
stepper_boards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800b480  0800b480  0001b480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9e4  0800b9e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9e4  0800b9e4  0001b9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9ec  0800b9ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9ec  0800b9ec  0001b9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9f0  0800b9f0  0001b9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b9f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200001e0  0800bbd4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  0800bbd4  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161dc  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d2  00000000  00000000  000363ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00038cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248a9  00000000  00000000  0003b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015027  00000000  00000000  0005fbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4b05  00000000  00000000  00074c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015971d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b54  00000000  00000000  00159770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b464 	.word	0x0800b464

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b464 	.word	0x0800b464

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001000:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001004:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001010:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001014:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001018:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001020:	e000      	b.n	8001024 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001022:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001024:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800102e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffc9 	bl	8000ff8 <ITM_SendChar>
	for(int i=0; i<len; i++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
	}
	return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_TxHeaderTypeDef TxHeader;

uint8_t count = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800108c:	2100      	movs	r1, #0
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f002 f9df 	bl	8003452 <HAL_CAN_GetRxMessage>
	count++;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800109e:	701a      	strb	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200003ac 	.word	0x200003ac
 80010ac:	200003b8 	.word	0x200003b8
 80010b0:	200003ec 	.word	0x200003ec

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ba:	f000 fe6e 	bl	8001d9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010be:	f000 f8bf 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c2:	f000 faf1 	bl	80016a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010c6:	f000 fabf 	bl	8001648 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010ca:	f000 fa6f 	bl	80015ac <MX_TIM2_Init>
  MX_TIM1_Init();
 80010ce:	f000 f9c1 	bl	8001454 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010d2:	f000 f907 	bl	80012e4 <MX_ADC1_Init>
  MX_CAN1_Init();
 80010d6:	f000 f969 	bl	80013ac <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // Debug
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	210f      	movs	r1, #15
 80010de:	484a      	ldr	r0, [pc, #296]	; (8001208 <main+0x154>)
 80010e0:	f002 ffaa 	bl	8004038 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2103      	movs	r1, #3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f002 ffa4 	bl	8004038 <HAL_GPIO_WritePin>

  // Stepper 1
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2104      	movs	r1, #4
 80010f4:	4845      	ldr	r0, [pc, #276]	; (800120c <main+0x158>)
 80010f6:	f002 ff9f 	bl	8004038 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin | STPR_EN_1_Pin, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001100:	4841      	ldr	r0, [pc, #260]	; (8001208 <main+0x154>)
 8001102:	f002 ff99 	bl	8004038 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STPR_PWM_1_GPIO_Port, STPR_PWM_1_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f002 ff92 	bl	8004038 <HAL_GPIO_WritePin>

  // Stepper 2
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_PWM_2_Pin, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	f640 0105 	movw	r1, #2053	; 0x805
 800111a:	483d      	ldr	r0, [pc, #244]	; (8001210 <main+0x15c>)
 800111c:	f002 ff8c 	bl	8004038 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, STPR_EN_2_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001126:	483a      	ldr	r0, [pc, #232]	; (8001210 <main+0x15c>)
 8001128:	f002 ff86 	bl	8004038 <HAL_GPIO_WritePin>

  // ADC Calibration
  HAL_StatusTypeDef ret;
  ret = HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800112c:	217f      	movs	r1, #127	; 0x7f
 800112e:	4839      	ldr	r0, [pc, #228]	; (8001214 <main+0x160>)
 8001130:	f001 fe32 	bl	8002d98 <HAL_ADCEx_Calibration_Start>
 8001134:	4603      	mov	r3, r0
 8001136:	75fb      	strb	r3, [r7, #23]
  if(ret != HAL_OK)
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <main+0x8e>
  {
	  Error_Handler();
 800113e:	f000 fb75 	bl	800182c <Error_Handler>
  }


  if(HAL_CAN_Start(&hcan1) == HAL_OK)
 8001142:	4835      	ldr	r0, [pc, #212]	; (8001218 <main+0x164>)
 8001144:	f002 f84d 	bl	80031e2 <HAL_CAN_Start>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d103      	bne.n	8001156 <main+0xa2>
	  printf("CAN started correctly\n");
 800114e:	4833      	ldr	r0, [pc, #204]	; (800121c <main+0x168>)
 8001150:	f006 fb90 	bl	8007874 <puts>
 8001154:	e002      	b.n	800115c <main+0xa8>
  else
	  printf("CAN error\n");
 8001156:	4832      	ldr	r0, [pc, #200]	; (8001220 <main+0x16c>)
 8001158:	f006 fb8c 	bl	8007874 <puts>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800115c:	2102      	movs	r1, #2
 800115e:	482e      	ldr	r0, [pc, #184]	; (8001218 <main+0x164>)
 8001160:	f002 fa89 	bl	8003676 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 1; // Length of data to send in bytes
 8001164:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <main+0x170>)
 8001166:	2201      	movs	r2, #1
 8001168:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0; // For basic CAN protocol
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <main+0x170>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8001170:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <main+0x170>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA; // transfering data of remote frame
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <main+0x170>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x620; // ID of this CAN peripheral
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <main+0x170>)
 800117e:	f44f 62c4 	mov.w	r2, #1568	; 0x620
 8001182:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <main+0x170>)
 8001186:	2200      	movs	r2, #0
 8001188:	751a      	strb	r2, [r3, #20]

  TxData[0] = 0x01;
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <main+0x174>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]

  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &TxData[0], &TxMailbox) == HAL_OK) {
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <main+0x178>)
 8001192:	4a25      	ldr	r2, [pc, #148]	; (8001228 <main+0x174>)
 8001194:	4923      	ldr	r1, [pc, #140]	; (8001224 <main+0x170>)
 8001196:	4820      	ldr	r0, [pc, #128]	; (8001218 <main+0x164>)
 8001198:	f002 f867 	bl	800326a <HAL_CAN_AddTxMessage>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d113      	bne.n	80011ca <main+0x116>
	  printf("Transmission requested 1\n");
 80011a2:	4823      	ldr	r0, [pc, #140]	; (8001230 <main+0x17c>)
 80011a4:	f006 fb66 	bl	8007874 <puts>
  		  if(!HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox))
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <main+0x178>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	481a      	ldr	r0, [pc, #104]	; (8001218 <main+0x164>)
 80011b0:	f002 f92b 	bl	800340a <HAL_CAN_IsTxMessagePending>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d103      	bne.n	80011c2 <main+0x10e>
  			  printf("Message sent 1\n");
 80011ba:	481e      	ldr	r0, [pc, #120]	; (8001234 <main+0x180>)
 80011bc:	f006 fb5a 	bl	8007874 <puts>
 80011c0:	e006      	b.n	80011d0 <main+0x11c>
  		  else
  			  printf("Message pending 1\n");
 80011c2:	481d      	ldr	r0, [pc, #116]	; (8001238 <main+0x184>)
 80011c4:	f006 fb56 	bl	8007874 <puts>
 80011c8:	e002      	b.n	80011d0 <main+0x11c>
  	  } else
  		  printf("Error 1\n");
 80011ca:	481c      	ldr	r0, [pc, #112]	; (800123c <main+0x188>)
 80011cc:	f006 fb52 	bl	8007874 <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t previous_t = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  uint32_t current_t = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  uint32_t delay = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
  uint32_t thermistor_reading = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
	  //{
	  // dataR[0] = dataR[0] + 1;
	  // HAL_UART_Transmit(&huart1, dataR, 1, HAL_MAX_DELAY);
	  // }

	  if(!HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox)){
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <main+0x178>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	480c      	ldr	r0, [pc, #48]	; (8001218 <main+0x164>)
 80011e8:	f002 f90f 	bl	800340a <HAL_CAN_IsTxMessagePending>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d105      	bne.n	80011fe <main+0x14a>
		  //printf("Message sent 2\n");
		  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &TxData[0], &TxMailbox);
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <main+0x178>)
 80011f4:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <main+0x174>)
 80011f6:	490b      	ldr	r1, [pc, #44]	; (8001224 <main+0x170>)
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <main+0x164>)
 80011fa:	f002 f836 	bl	800326a <HAL_CAN_AddTxMessage>
			  printf("Error 2\n"); */
	  }/*
	  else
		  printf("Message pending 2\n");*/

	  HAL_Delay(500);
 80011fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001202:	f000 fe3f 	bl	8001e84 <HAL_Delay>
	  if(!HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox)){
 8001206:	e7eb      	b.n	80011e0 <main+0x12c>
 8001208:	48000800 	.word	0x48000800
 800120c:	48000c00 	.word	0x48000c00
 8001210:	48000400 	.word	0x48000400
 8001214:	200001fc 	.word	0x200001fc
 8001218:	20000260 	.word	0x20000260
 800121c:	0800b480 	.word	0x0800b480
 8001220:	0800b498 	.word	0x0800b498
 8001224:	200003d4 	.word	0x200003d4
 8001228:	200003a4 	.word	0x200003a4
 800122c:	200003b4 	.word	0x200003b4
 8001230:	0800b4a4 	.word	0x0800b4a4
 8001234:	0800b4c0 	.word	0x0800b4c0
 8001238:	0800b4d0 	.word	0x0800b4d0
 800123c:	0800b4e4 	.word	0x0800b4e4

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b096      	sub	sp, #88	; 0x58
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2244      	movs	r2, #68	; 0x44
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f005 fc20 	bl	8006a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001262:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001266:	f002 ff0d 	bl	8004084 <HAL_PWREx_ControlVoltageScaling>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001270:	f000 fadc 	bl	800182c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001274:	2310      	movs	r3, #16
 8001276:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001278:	2301      	movs	r3, #1
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001288:	2301      	movs	r3, #1
 800128a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800128c:	2301      	movs	r3, #1
 800128e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001290:	2328      	movs	r3, #40	; 0x28
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001294:	2307      	movs	r3, #7
 8001296:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001298:	2302      	movs	r3, #2
 800129a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800129c:	2302      	movs	r3, #2
 800129e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4618      	mov	r0, r3
 80012a6:	f002 ff43 	bl	8004130 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80012b0:	f000 fabc 	bl	800182c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2303      	movs	r3, #3
 80012ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	2104      	movs	r1, #4
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 fb43 	bl	8004958 <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012d8:	f000 faa8 	bl	800182c <Error_Handler>
  }
}
 80012dc:	bf00      	nop
 80012de:	3758      	adds	r7, #88	; 0x58
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
 80012f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <MX_ADC1_Init+0xbc>)
 80012fc:	4a29      	ldr	r2, [pc, #164]	; (80013a4 <MX_ADC1_Init+0xc0>)
 80012fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001300:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <MX_ADC1_Init+0xbc>)
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <MX_ADC1_Init+0xbc>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <MX_ADC1_Init+0xbc>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001312:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <MX_ADC1_Init+0xbc>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_ADC1_Init+0xbc>)
 800131a:	2204      	movs	r2, #4
 800131c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_ADC1_Init+0xbc>)
 8001320:	2200      	movs	r2, #0
 8001322:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001324:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_ADC1_Init+0xbc>)
 8001326:	2201      	movs	r2, #1
 8001328:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_ADC1_Init+0xbc>)
 800132c:	2201      	movs	r2, #1
 800132e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <MX_ADC1_Init+0xbc>)
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_ADC1_Init+0xbc>)
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_ADC1_Init+0xbc>)
 8001340:	2200      	movs	r2, #0
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MX_ADC1_Init+0xbc>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_ADC1_Init+0xbc>)
 800134e:	2200      	movs	r2, #0
 8001350:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_ADC1_Init+0xbc>)
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135a:	4811      	ldr	r0, [pc, #68]	; (80013a0 <MX_ADC1_Init+0xbc>)
 800135c:	f000 ff68 	bl	8002230 <HAL_ADC_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001366:	f000 fa61 	bl	800182c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <MX_ADC1_Init+0xc4>)
 800136c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800136e:	2306      	movs	r3, #6
 8001370:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001376:	237f      	movs	r3, #127	; 0x7f
 8001378:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800137a:	2304      	movs	r3, #4
 800137c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_ADC1_Init+0xbc>)
 8001388:	f001 f89a 	bl	80024c0 <HAL_ADC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001392:	f000 fa4b 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001fc 	.word	0x200001fc
 80013a4:	50040000 	.word	0x50040000
 80013a8:	c7520000 	.word	0xc7520000

080013ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_CAN1_Init+0xa0>)
 80013b4:	4a26      	ldr	r2, [pc, #152]	; (8001450 <MX_CAN1_Init+0xa4>)
 80013b6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_CAN1_Init+0xa0>)
 80013ba:	2228      	movs	r2, #40	; 0x28
 80013bc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <MX_CAN1_Init+0xa0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_CAN1_Init+0xa0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_CAN1_Init+0xa0>)
 80013cc:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80013d0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_CAN1_Init+0xa0>)
 80013d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013d8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_CAN1_Init+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_CAN1_Init+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_CAN1_Init+0xa0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_CAN1_Init+0xa0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_CAN1_Init+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_CAN1_Init+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013fe:	4813      	ldr	r0, [pc, #76]	; (800144c <MX_CAN1_Init+0xa0>)
 8001400:	f001 fd2a 	bl	8002e58 <HAL_CAN_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800140a:	f000 fa0f 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800140e:	2301      	movs	r3, #1
 8001410:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;		// Specify filter bank to use
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; //Incoming data is saved here
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 800141a:	f242 0360 	movw	r3, #8288	; 0x2060
 800141e:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh= 0x103<<5;
 8001424:	f242 0360 	movw	r3, #8288	; 0x2060
 8001428:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800143a:	463b      	mov	r3, r7
 800143c:	4619      	mov	r1, r3
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_CAN1_Init+0xa0>)
 8001440:	f001 fe05 	bl	800304e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000260 	.word	0x20000260
 8001450:	40006400 	.word	0x40006400

08001454 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b09a      	sub	sp, #104	; 0x68
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	222c      	movs	r2, #44	; 0x2c
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f005 fb00 	bl	8006a94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001494:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <MX_TIM1_Init+0x150>)
 8001496:	4a44      	ldr	r2, [pc, #272]	; (80015a8 <MX_TIM1_Init+0x154>)
 8001498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800149a:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <MX_TIM1_Init+0x150>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <MX_TIM1_Init+0x150>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <MX_TIM1_Init+0x150>)
 80014a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <MX_TIM1_Init+0x150>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b4:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <MX_TIM1_Init+0x150>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <MX_TIM1_Init+0x150>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014c0:	4838      	ldr	r0, [pc, #224]	; (80015a4 <MX_TIM1_Init+0x150>)
 80014c2:	f003 ff75 	bl	80053b0 <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f000 f9ae 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014da:	4619      	mov	r1, r3
 80014dc:	4831      	ldr	r0, [pc, #196]	; (80015a4 <MX_TIM1_Init+0x150>)
 80014de:	f004 f933 	bl	8005748 <HAL_TIM_ConfigClockSource>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80014e8:	f000 f9a0 	bl	800182c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ec:	482d      	ldr	r0, [pc, #180]	; (80015a4 <MX_TIM1_Init+0x150>)
 80014ee:	f003 ffb6 	bl	800545e <HAL_TIM_PWM_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80014f8:	f000 f998 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fc:	2300      	movs	r3, #0
 80014fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001508:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800150c:	4619      	mov	r1, r3
 800150e:	4825      	ldr	r0, [pc, #148]	; (80015a4 <MX_TIM1_Init+0x150>)
 8001510:	f004 fd60 	bl	8005fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800151a:	f000 f987 	bl	800182c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151e:	2360      	movs	r3, #96	; 0x60
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001526:	2300      	movs	r3, #0
 8001528:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800152a:	2300      	movs	r3, #0
 800152c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800153a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800153e:	2200      	movs	r2, #0
 8001540:	4619      	mov	r1, r3
 8001542:	4818      	ldr	r0, [pc, #96]	; (80015a4 <MX_TIM1_Init+0x150>)
 8001544:	f003 ffec 	bl	8005520 <HAL_TIM_PWM_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800154e:	f000 f96d 	bl	800182c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001574:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM1_Init+0x150>)
 8001588:	f004 fd8a 	bl	80060a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001592:	f000 f94b 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM1_Init+0x150>)
 8001598:	f000 fa56 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3768      	adds	r7, #104	; 0x68
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000288 	.word	0x20000288
 80015a8:	40012c00 	.word	0x40012c00

080015ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_TIM2_Init+0x98>)
 80015cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_TIM2_Init+0x98>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_TIM2_Init+0x98>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_TIM2_Init+0x98>)
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <MX_TIM2_Init+0x98>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_TIM2_Init+0x98>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f2:	4814      	ldr	r0, [pc, #80]	; (8001644 <MX_TIM2_Init+0x98>)
 80015f4:	f003 fedc 	bl	80053b0 <HAL_TIM_Base_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015fe:	f000 f915 	bl	800182c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_TIM2_Init+0x98>)
 8001610:	f004 f89a 	bl	8005748 <HAL_TIM_ConfigClockSource>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800161a:	f000 f907 	bl	800182c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_TIM2_Init+0x98>)
 800162c:	f004 fcd2 	bl	8005fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001636:	f000 f8f9 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200002d4 	.word	0x200002d4

08001648 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 800164e:	4a15      	ldr	r2, [pc, #84]	; (80016a4 <MX_USART1_UART_Init+0x5c>)
 8001650:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 8001654:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001658:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_USART1_UART_Init+0x58>)
 800168c:	f004 fd80 	bl	8006190 <HAL_UART_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001696:	f000 f8c9 	bl	800182c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000320 	.word	0x20000320
 80016a4:	40013800 	.word	0x40013800

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	; 0x28
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	4b57      	ldr	r3, [pc, #348]	; (800181c <MX_GPIO_Init+0x174>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4a56      	ldr	r2, [pc, #344]	; (800181c <MX_GPIO_Init+0x174>)
 80016c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4b54      	ldr	r3, [pc, #336]	; (800181c <MX_GPIO_Init+0x174>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	4b51      	ldr	r3, [pc, #324]	; (800181c <MX_GPIO_Init+0x174>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a50      	ldr	r2, [pc, #320]	; (800181c <MX_GPIO_Init+0x174>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b4e      	ldr	r3, [pc, #312]	; (800181c <MX_GPIO_Init+0x174>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b4b      	ldr	r3, [pc, #300]	; (800181c <MX_GPIO_Init+0x174>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a4a      	ldr	r2, [pc, #296]	; (800181c <MX_GPIO_Init+0x174>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b48      	ldr	r3, [pc, #288]	; (800181c <MX_GPIO_Init+0x174>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	4b45      	ldr	r3, [pc, #276]	; (800181c <MX_GPIO_Init+0x174>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a44      	ldr	r2, [pc, #272]	; (800181c <MX_GPIO_Init+0x174>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b42      	ldr	r3, [pc, #264]	; (800181c <MX_GPIO_Init+0x174>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171e:	4b3f      	ldr	r3, [pc, #252]	; (800181c <MX_GPIO_Init+0x174>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a3e      	ldr	r2, [pc, #248]	; (800181c <MX_GPIO_Init+0x174>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b3c      	ldr	r3, [pc, #240]	; (800181c <MX_GPIO_Init+0x174>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8001736:	2200      	movs	r2, #0
 8001738:	f640 410f 	movw	r1, #3087	; 0xc0f
 800173c:	4838      	ldr	r0, [pc, #224]	; (8001820 <MX_GPIO_Init+0x178>)
 800173e:	f002 fc7b 	bl	8004038 <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f248 0103 	movw	r1, #32771	; 0x8003
 8001748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174c:	f002 fc74 	bl	8004038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin|STPR_PWM_2_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f640 4105 	movw	r1, #3077	; 0xc05
 8001756:	4833      	ldr	r0, [pc, #204]	; (8001824 <MX_GPIO_Init+0x17c>)
 8001758:	f002 fc6e 	bl	8004038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	2104      	movs	r1, #4
 8001760:	4831      	ldr	r0, [pc, #196]	; (8001828 <MX_GPIO_Init+0x180>)
 8001762:	f002 fc69 	bl	8004038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8001766:	f640 430f 	movw	r3, #3087	; 0xc0f
 800176a:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4828      	ldr	r0, [pc, #160]	; (8001820 <MX_GPIO_Init+0x178>)
 8001780:	f002 fae0 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin STPR_PWM_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin;
 8001784:	f248 0303 	movw	r3, #32771	; 0x8003
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a0:	f002 fad0 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin STPR_PWM_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin|STPR_PWM_2_Pin;
 80017a4:	f640 4305 	movw	r3, #3077	; 0xc05
 80017a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4819      	ldr	r0, [pc, #100]	; (8001824 <MX_GPIO_Init+0x17c>)
 80017be:	f002 fac1 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 80017c2:	f24f 2302 	movw	r3, #61954	; 0xf202
 80017c6:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4813      	ldr	r0, [pc, #76]	; (8001824 <MX_GPIO_Init+0x17c>)
 80017d8:	f002 fab4 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 80017dc:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	480b      	ldr	r0, [pc, #44]	; (8001820 <MX_GPIO_Init+0x178>)
 80017f2:	f002 faa7 	bl	8003d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 80017f6:	2304      	movs	r3, #4
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_GPIO_Init+0x180>)
 800180e:	f002 fa99 	bl	8003d44 <HAL_GPIO_Init>

}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	; 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	48000800 	.word	0x48000800
 8001824:	48000400 	.word	0x48000400
 8001828:	48000c00 	.word	0x48000c00

0800182c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001830:	b672      	cpsid	i
}
 8001832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001834:	e7fe      	b.n	8001834 <Error_Handler+0x8>
	...

08001838 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_MspInit+0x44>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001842:	4a0e      	ldr	r2, [pc, #56]	; (800187c <HAL_MspInit+0x44>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6613      	str	r3, [r2, #96]	; 0x60
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_MspInit+0x44>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_MspInit+0x44>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_MspInit+0x44>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6593      	str	r3, [r2, #88]	; 0x58
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_MspInit+0x44>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0a0      	sub	sp, #128	; 0x80
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001888:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	225c      	movs	r2, #92	; 0x5c
 800189e:	2100      	movs	r1, #0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f005 f8f7 	bl	8006a94 <memset>
  if(hadc->Instance==ADC1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a25      	ldr	r2, [pc, #148]	; (8001940 <HAL_ADC_MspInit+0xc0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d142      	bne.n	8001936 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018ba:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80018bc:	2301      	movs	r3, #1
 80018be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80018c4:	2310      	movs	r3, #16
 80018c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018c8:	2307      	movs	r3, #7
 80018ca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018da:	f107 0310 	add.w	r3, r7, #16
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 fa5c 	bl	8004d9c <HAL_RCCEx_PeriphCLKConfig>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80018ea:	f7ff ff9f 	bl	800182c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <HAL_ADC_MspInit+0xc4>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a14      	ldr	r2, [pc, #80]	; (8001944 <HAL_ADC_MspInit+0xc4>)
 80018f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_ADC_MspInit+0xc4>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_ADC_MspInit+0xc4>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_ADC_MspInit+0xc4>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_ADC_MspInit+0xc4>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 800191e:	2310      	movs	r3, #16
 8001920:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <HAL_ADC_MspInit+0xc8>)
 8001932:	f002 fa07 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001936:	bf00      	nop
 8001938:	3780      	adds	r7, #128	; 0x80
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	50040000 	.word	0x50040000
 8001944:	40021000 	.word	0x40021000
 8001948:	48000800 	.word	0x48000800

0800194c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <HAL_CAN_MspInit+0x90>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d131      	bne.n	80019d2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_CAN_MspInit+0x94>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <HAL_CAN_MspInit+0x94>)
 8001974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001978:	6593      	str	r3, [r2, #88]	; 0x58
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_CAN_MspInit+0x94>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_CAN_MspInit+0x94>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <HAL_CAN_MspInit+0x94>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_CAN_MspInit+0x94>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800199e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	2303      	movs	r3, #3
 80019ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019b0:	2309      	movs	r3, #9
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019be:	f002 f9c1 	bl	8003d44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2014      	movs	r0, #20
 80019c8:	f002 f985 	bl	8003cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019cc:	2014      	movs	r0, #20
 80019ce:	f002 f99e 	bl	8003d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40006400 	.word	0x40006400
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <HAL_TIM_Base_MspInit+0x5c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d10c      	bne.n	8001a10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_TIM_Base_MspInit+0x60>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_TIM_Base_MspInit+0x60>)
 80019fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a00:	6613      	str	r3, [r2, #96]	; 0x60
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_TIM_Base_MspInit+0x60>)
 8001a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a0e:	e010      	b.n	8001a32 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a18:	d10b      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_TIM_Base_MspInit+0x60>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <HAL_TIM_Base_MspInit+0x60>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6593      	str	r3, [r2, #88]	; 0x58
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <HAL_TIM_Base_MspInit+0x60>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40021000 	.word	0x40021000

08001a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_TIM_MspPostInit+0x68>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d11d      	bne.n	8001aa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a11      	ldr	r2, [pc, #68]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_TIM_MspPostInit+0x6c>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 8001a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f002 f94f 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40012c00 	.word	0x40012c00
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0a0      	sub	sp, #128	; 0x80
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad0:	f107 0310 	add.w	r3, r7, #16
 8001ad4:	225c      	movs	r2, #92	; 0x5c
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 ffdb 	bl	8006a94 <memset>
  if(huart->Instance==USART1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_UART_MspInit+0xa8>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d137      	bne.n	8001b58 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aec:	2300      	movs	r3, #0
 8001aee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 f951 	bl	8004d9c <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b00:	f7ff fe94 	bl	800182c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b08:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	4a10      	ldr	r2, [pc, #64]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_UART_MspInit+0xac>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b38:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b42:	2303      	movs	r3, #3
 8001b44:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b46:	2307      	movs	r3, #7
 8001b48:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b54:	f002 f8f6 	bl	8003d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b58:	bf00      	nop
 8001b5a:	3780      	adds	r7, #128	; 0x80
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40013800 	.word	0x40013800
 8001b64:	40021000 	.word	0x40021000

08001b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <NMI_Handler+0x4>

08001b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <BusFault_Handler+0x4>

08001b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <UsageFault_Handler+0x4>

08001b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb4:	f000 f946 	bl	8001e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <CAN1_RX0_IRQHandler+0x10>)
 8001bc2:	f001 fd7e 	bl	80036c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000260 	.word	0x20000260

08001bd0 <_getpid>:
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_kill>:
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	f004 ff29 	bl	8006a40 <__errno>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2216      	movs	r2, #22
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_exit>:
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe7 	bl	8001be0 <_kill>
 8001c12:	e7fe      	b.n	8001c12 <_exit+0x12>

08001c14 <_read>:
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e00a      	b.n	8001c3c <_read+0x28>
 8001c26:	f3af 8000 	nop.w
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf0      	blt.n	8001c26 <_read+0x12>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_close>:
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_fstat>:
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_isatty>:
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_lseek>:
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <_sbrk>:
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <_sbrk+0x5c>)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <_sbrk+0x60>)
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <_sbrk+0x22>
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_sbrk+0x64>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <_sbrk+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d207      	bcs.n	8001cf8 <_sbrk+0x40>
 8001ce8:	f004 feaa 	bl	8006a40 <__errno>
 8001cec:	4603      	mov	r3, r0
 8001cee:	220c      	movs	r2, #12
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cf6:	e009      	b.n	8001d0c <_sbrk+0x54>
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <_sbrk+0x64>)
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20010000 	.word	0x20010000
 8001d18:	00000400 	.word	0x00000400
 8001d1c:	200003f0 	.word	0x200003f0
 8001d20:	20000408 	.word	0x20000408

08001d24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <SystemInit+0x20>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <SystemInit+0x20>)
 8001d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <Reset_Handler>:
 8001d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d80 <LoopForever+0x2>
 8001d4c:	f7ff ffea 	bl	8001d24 <SystemInit>
 8001d50:	480c      	ldr	r0, [pc, #48]	; (8001d84 <LoopForever+0x6>)
 8001d52:	490d      	ldr	r1, [pc, #52]	; (8001d88 <LoopForever+0xa>)
 8001d54:	4a0d      	ldr	r2, [pc, #52]	; (8001d8c <LoopForever+0xe>)
 8001d56:	2300      	movs	r3, #0
 8001d58:	e002      	b.n	8001d60 <LoopCopyDataInit>

08001d5a <CopyDataInit>:
 8001d5a:	58d4      	ldr	r4, [r2, r3]
 8001d5c:	50c4      	str	r4, [r0, r3]
 8001d5e:	3304      	adds	r3, #4

08001d60 <LoopCopyDataInit>:
 8001d60:	18c4      	adds	r4, r0, r3
 8001d62:	428c      	cmp	r4, r1
 8001d64:	d3f9      	bcc.n	8001d5a <CopyDataInit>
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <LoopForever+0x12>)
 8001d68:	4c0a      	ldr	r4, [pc, #40]	; (8001d94 <LoopForever+0x16>)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e001      	b.n	8001d72 <LoopFillZerobss>

08001d6e <FillZerobss>:
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	3204      	adds	r2, #4

08001d72 <LoopFillZerobss>:
 8001d72:	42a2      	cmp	r2, r4
 8001d74:	d3fb      	bcc.n	8001d6e <FillZerobss>
 8001d76:	f004 fe69 	bl	8006a4c <__libc_init_array>
 8001d7a:	f7ff f99b 	bl	80010b4 <main>

08001d7e <LoopForever>:
 8001d7e:	e7fe      	b.n	8001d7e <LoopForever>
 8001d80:	20010000 	.word	0x20010000
 8001d84:	20000000 	.word	0x20000000
 8001d88:	200001e0 	.word	0x200001e0
 8001d8c:	0800b9f4 	.word	0x0800b9f4
 8001d90:	200001e0 	.word	0x200001e0
 8001d94:	20000408 	.word	0x20000408

08001d98 <ADC1_IRQHandler>:
 8001d98:	e7fe      	b.n	8001d98 <ADC1_IRQHandler>

08001d9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f001 ff8b 	bl	8003cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001daa:	200f      	movs	r0, #15
 8001dac:	f000 f80e 	bl	8001dcc <HAL_InitTick>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	e001      	b.n	8001dc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dbc:	f7ff fd3c 	bl	8001838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dd8:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_InitTick+0x6c>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d023      	beq.n	8001e28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001de0:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_InitTick+0x70>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_InitTick+0x6c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f001 ff97 	bl	8003d2a <HAL_SYSTICK_Config>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10f      	bne.n	8001e22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d809      	bhi.n	8001e1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e10:	f001 ff61 	bl	8003cd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_InitTick+0x74>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e007      	b.n	8001e2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
 8001e20:	e004      	b.n	8001e2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	73fb      	strb	r3, [r7, #15]
 8001e26:	e001      	b.n	8001e2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004

08001e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_IncTick+0x20>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_IncTick+0x24>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_IncTick+0x24>)
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000008 	.word	0x20000008
 8001e68:	200003f4 	.word	0x200003f4

08001e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_GetTick+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200003f4 	.word	0x200003f4

08001e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e8c:	f7ff ffee 	bl	8001e6c <HAL_GetTick>
 8001e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e9c:	d005      	beq.n	8001eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_Delay+0x44>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eaa:	bf00      	nop
 8001eac:	f7ff ffde 	bl	8001e6c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d8f7      	bhi.n	8001eac <HAL_Delay+0x28>
  {
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000008 	.word	0x20000008

08001ecc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3360      	adds	r3, #96	; 0x60
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <LL_ADC_SetOffset+0x44>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	03fff000 	.word	0x03fff000

08001f7c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3360      	adds	r3, #96	; 0x60
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3360      	adds	r3, #96	; 0x60
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b087      	sub	sp, #28
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3330      	adds	r3, #48	; 0x30
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	4413      	add	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	211f      	movs	r1, #31
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	401a      	ands	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	0e9b      	lsrs	r3, r3, #26
 8002016:	f003 011f 	and.w	r1, r3, #31
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	f003 031f 	and.w	r3, r3, #31
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	431a      	orrs	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800202a:	bf00      	nop
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002036:	b480      	push	{r7}
 8002038:	b087      	sub	sp, #28
 800203a:	af00      	add	r7, sp, #0
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3314      	adds	r3, #20
 8002046:	461a      	mov	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	0e5b      	lsrs	r3, r3, #25
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	4413      	add	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	0d1b      	lsrs	r3, r3, #20
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2107      	movs	r1, #7
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	0d1b      	lsrs	r3, r3, #20
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	431a      	orrs	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002080:	bf00      	nop
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a4:	43db      	mvns	r3, r3
 80020a6:	401a      	ands	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0318 	and.w	r3, r3, #24
 80020ae:	4908      	ldr	r1, [pc, #32]	; (80020d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020b0:	40d9      	lsrs	r1, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	400b      	ands	r3, r1
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	431a      	orrs	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	0007ffff 	.word	0x0007ffff

080020d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6093      	str	r3, [r2, #8]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800210c:	d101      	bne.n	8002112 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002134:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800215c:	d101      	bne.n	8002162 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002184:	f043 0202 	orr.w	r2, r3, #2
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <LL_ADC_IsEnabled+0x18>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <LL_ADC_IsEnabled+0x1a>
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d101      	bne.n	80021d6 <LL_ADC_IsDisableOngoing+0x18>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_ADC_IsDisableOngoing+0x1a>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d101      	bne.n	80021fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b08      	cmp	r3, #8
 800221c:	d101      	bne.n	8002222 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800223c:	2300      	movs	r3, #0
 800223e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e12c      	b.n	80024a4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002254:	2b00      	cmp	r3, #0
 8002256:	d109      	bne.n	800226c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff fb11 	bl	8001880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff41 	bl	80020f8 <LL_ADC_IsDeepPowerDownEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff27 	bl	80020d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff5c 	bl	8002148 <LL_ADC_IsInternalRegulatorEnabled>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff40 	bl	8002120 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a0:	4b82      	ldr	r3, [pc, #520]	; (80024ac <HAL_ADC_Init+0x27c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	4a82      	ldr	r2, [pc, #520]	; (80024b0 <HAL_ADC_Init+0x280>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	3301      	adds	r3, #1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022b4:	e002      	b.n	80022bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f9      	bne.n	80022b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff3e 	bl	8002148 <LL_ADC_IsInternalRegulatorEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10d      	bne.n	80022ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f043 0210 	orr.w	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff76 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 80022f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 80c5 	bne.w	8002492 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 80c1 	bne.w	8002492 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002318:	f043 0202 	orr.w	r2, r3, #2
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff37 	bl	8002198 <LL_ADC_IsEnabled>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10b      	bne.n	8002348 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002330:	4860      	ldr	r0, [pc, #384]	; (80024b4 <HAL_ADC_Init+0x284>)
 8002332:	f7ff ff31 	bl	8002198 <LL_ADC_IsEnabled>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4619      	mov	r1, r3
 8002342:	485d      	ldr	r0, [pc, #372]	; (80024b8 <HAL_ADC_Init+0x288>)
 8002344:	f7ff fdc2 	bl	8001ecc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	7e5b      	ldrb	r3, [r3, #25]
 800234c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002352:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002358:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800235e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002366:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d106      	bne.n	8002384 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	3b01      	subs	r3, #1
 800237c:	045b      	lsls	r3, r3, #17
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	4b45      	ldr	r3, [pc, #276]	; (80024bc <HAL_ADC_Init+0x28c>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	69b9      	ldr	r1, [r7, #24]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff13 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 80023be:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff20 	bl	800220a <LL_ADC_INJ_IsConversionOngoing>
 80023ca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d13d      	bne.n	800244e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d13a      	bne.n	800244e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023dc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f4:	f023 0302 	bic.w	r3, r3, #2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	69b9      	ldr	r1, [r7, #24]
 80023fe:	430b      	orrs	r3, r1
 8002400:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002408:	2b01      	cmp	r3, #1
 800240a:	d118      	bne.n	800243e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800242e:	430a      	orrs	r2, r1
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	e007      	b.n	800244e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10c      	bne.n	8002470 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f023 010f 	bic.w	r1, r3, #15
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
 800246e:	e007      	b.n	8002480 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 020f 	bic.w	r2, r2, #15
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	f023 0303 	bic.w	r3, r3, #3
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
 8002490:	e007      	b.n	80024a2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000000 	.word	0x20000000
 80024b0:	053e2d63 	.word	0x053e2d63
 80024b4:	50040000 	.word	0x50040000
 80024b8:	50040300 	.word	0x50040300
 80024bc:	fff0c007 	.word	0xfff0c007

080024c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0b6      	sub	sp, #216	; 0xd8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x22>
 80024de:	2302      	movs	r3, #2
 80024e0:	e3b9      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x796>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fe78 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 839e 	bne.w	8002c38 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b05      	cmp	r3, #5
 8002502:	d824      	bhi.n	800254e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	3b02      	subs	r3, #2
 800250a:	2b03      	cmp	r3, #3
 800250c:	d81b      	bhi.n	8002546 <HAL_ADC_ConfigChannel+0x86>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <HAL_ADC_ConfigChannel+0x54>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002525 	.word	0x08002525
 8002518:	0800252d 	.word	0x0800252d
 800251c:	08002535 	.word	0x08002535
 8002520:	0800253d 	.word	0x0800253d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	220c      	movs	r2, #12
 8002528:	605a      	str	r2, [r3, #4]
          break;
 800252a:	e011      	b.n	8002550 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2212      	movs	r2, #18
 8002530:	605a      	str	r2, [r3, #4]
          break;
 8002532:	e00d      	b.n	8002550 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2218      	movs	r2, #24
 8002538:	605a      	str	r2, [r3, #4]
          break;
 800253a:	e009      	b.n	8002550 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002542:	605a      	str	r2, [r3, #4]
          break;
 8002544:	e004      	b.n	8002550 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2206      	movs	r2, #6
 800254a:	605a      	str	r2, [r3, #4]
          break;
 800254c:	e000      	b.n	8002550 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800254e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	f7ff fd3e 	bl	8001fde <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fe3c 	bl	80021e4 <LL_ADC_REG_IsConversionOngoing>
 800256c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fe48 	bl	800220a <LL_ADC_INJ_IsConversionOngoing>
 800257a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800257e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 81a6 	bne.w	80028d4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002588:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 81a1 	bne.w	80028d4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6819      	ldr	r1, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	461a      	mov	r2, r3
 80025a0:	f7ff fd49 	bl	8002036 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	08db      	lsrs	r3, r3, #3
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d00a      	beq.n	80025dc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6919      	ldr	r1, [r3, #16]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025d6:	f7ff fcad 	bl	8001f34 <LL_ADC_SetOffset>
 80025da:	e17b      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fcca 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x148>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fcbf 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	f003 021f 	and.w	r2, r3, #31
 8002606:	e01e      	b.n	8002646 <HAL_ADC_ConfigChannel+0x186>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff fcb4 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800262a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800262e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e004      	b.n	8002644 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800263a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264e:	2b00      	cmp	r3, #0
 8002650:	d105      	bne.n	800265e <HAL_ADC_ConfigChannel+0x19e>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0e9b      	lsrs	r3, r3, #26
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	e018      	b.n	8002690 <HAL_ADC_ConfigChannel+0x1d0>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002666:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800267a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002682:	2320      	movs	r3, #32
 8002684:	e004      	b.n	8002690 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002690:	429a      	cmp	r2, r3
 8002692:	d106      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2200      	movs	r2, #0
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fc83 	bl	8001fa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2101      	movs	r1, #1
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fc67 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x20e>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2101      	movs	r1, #1
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fc5c 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	e01e      	b.n	800270c <HAL_ADC_ConfigChannel+0x24c>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2101      	movs	r1, #1
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff fc51 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80026da:	4603      	mov	r3, r0
 80026dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026e4:	fa93 f3a3 	rbit	r3, r3
 80026e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80026f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80026fc:	2320      	movs	r3, #32
 80026fe:	e004      	b.n	800270a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002704:	fab3 f383 	clz	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	2b00      	cmp	r3, #0
 8002716:	d105      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x264>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	e018      	b.n	8002756 <HAL_ADC_ConfigChannel+0x296>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002738:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800273c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002748:	2320      	movs	r3, #32
 800274a:	e004      	b.n	8002756 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800274c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002756:	429a      	cmp	r2, r3
 8002758:	d106      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2200      	movs	r2, #0
 8002760:	2101      	movs	r1, #1
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fc20 	bl	8001fa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2102      	movs	r1, #2
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fc04 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002774:	4603      	mov	r3, r0
 8002776:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10a      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x2d4>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2102      	movs	r1, #2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fbf9 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	f003 021f 	and.w	r2, r3, #31
 8002792:	e01e      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x312>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2102      	movs	r1, #2
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fbee 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80027b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80027ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80027c2:	2320      	movs	r3, #32
 80027c4:	e004      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80027c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d105      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x32a>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	f003 031f 	and.w	r3, r3, #31
 80027e8:	e016      	b.n	8002818 <HAL_ADC_ConfigChannel+0x358>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027f6:	fa93 f3a3 	rbit	r3, r3
 80027fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80027fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e004      	b.n	8002818 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800280e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002818:	429a      	cmp	r2, r3
 800281a:	d106      	bne.n	800282a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	2102      	movs	r1, #2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fbbf 	bl	8001fa8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2103      	movs	r1, #3
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fba3 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x396>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2103      	movs	r1, #3
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fb98 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	0e9b      	lsrs	r3, r3, #26
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	e017      	b.n	8002886 <HAL_ADC_ConfigChannel+0x3c6>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2103      	movs	r1, #3
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fb8d 	bl	8001f7c <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800286e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002870:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e003      	b.n	8002884 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800287c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288e:	2b00      	cmp	r3, #0
 8002890:	d105      	bne.n	800289e <HAL_ADC_ConfigChannel+0x3de>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0e9b      	lsrs	r3, r3, #26
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	e011      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x402>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80028b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80028ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d106      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2200      	movs	r2, #0
 80028cc:	2103      	movs	r1, #3
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fb6a 	bl	8001fa8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fc5d 	bl	8002198 <LL_ADC_IsEnabled>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 813f 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f7ff fbca 	bl	800208c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a8e      	ldr	r2, [pc, #568]	; (8002b38 <HAL_ADC_ConfigChannel+0x678>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	f040 8130 	bne.w	8002b64 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <HAL_ADC_ConfigChannel+0x46c>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	0e9b      	lsrs	r3, r3, #26
 800291a:	3301      	adds	r3, #1
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	2b09      	cmp	r3, #9
 8002922:	bf94      	ite	ls
 8002924:	2301      	movls	r3, #1
 8002926:	2300      	movhi	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	e019      	b.n	8002960 <HAL_ADC_ConfigChannel+0x4a0>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800293a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800293c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800293e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e003      	b.n	8002950 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3301      	adds	r3, #1
 8002952:	f003 031f 	and.w	r3, r3, #31
 8002956:	2b09      	cmp	r3, #9
 8002958:	bf94      	ite	ls
 800295a:	2301      	movls	r3, #1
 800295c:	2300      	movhi	r3, #0
 800295e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002960:	2b00      	cmp	r3, #0
 8002962:	d079      	beq.n	8002a58 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x4c0>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	0e9b      	lsrs	r3, r3, #26
 8002976:	3301      	adds	r3, #1
 8002978:	069b      	lsls	r3, r3, #26
 800297a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800297e:	e015      	b.n	80029ac <HAL_ADC_ConfigChannel+0x4ec>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800298e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002990:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e003      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800299c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	069b      	lsls	r3, r3, #26
 80029a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x50c>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0e9b      	lsrs	r3, r3, #26
 80029be:	3301      	adds	r3, #1
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2101      	movs	r1, #1
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	e017      	b.n	80029fc <HAL_ADC_ConfigChannel+0x53c>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80029de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80029e4:	2320      	movs	r3, #32
 80029e6:	e003      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80029e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2101      	movs	r1, #1
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	ea42 0103 	orr.w	r1, r2, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10a      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x562>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	3301      	adds	r3, #1
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	051b      	lsls	r3, r3, #20
 8002a20:	e018      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x594>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	e003      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	3301      	adds	r3, #1
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a54:	430b      	orrs	r3, r1
 8002a56:	e080      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d107      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x5b4>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	069b      	lsls	r3, r3, #26
 8002a6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a72:	e015      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x5e0>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002a8c:	2320      	movs	r3, #32
 8002a8e:	e003      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	fab3 f383 	clz	r3, r3
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	3301      	adds	r3, #1
 8002a9a:	069b      	lsls	r3, r3, #26
 8002a9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x600>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	2101      	movs	r1, #1
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	e017      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x630>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	fa93 f3a3 	rbit	r3, r3
 8002acc:	61fb      	str	r3, [r7, #28]
  return result;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002ad8:	2320      	movs	r3, #32
 8002ada:	e003      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2101      	movs	r1, #1
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	ea42 0103 	orr.w	r1, r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x65c>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	3301      	adds	r3, #1
 8002b08:	f003 021f 	and.w	r2, r3, #31
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	3b1e      	subs	r3, #30
 8002b14:	051b      	lsls	r3, r3, #20
 8002b16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	e01d      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x698>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	613b      	str	r3, [r7, #16]
  return result;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e005      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x684>
 8002b38:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	f003 021f 	and.w	r2, r3, #31
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	3b1e      	subs	r3, #30
 8002b52:	051b      	lsls	r3, r3, #20
 8002b54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	6892      	ldr	r2, [r2, #8]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7ff fa69 	bl	8002036 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_ADC_ConfigChannel+0x7a0>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d06c      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b70:	483c      	ldr	r0, [pc, #240]	; (8002c64 <HAL_ADC_ConfigChannel+0x7a4>)
 8002b72:	f7ff f9d1 	bl	8001f18 <LL_ADC_GetCommonPathInternalCh>
 8002b76:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a3a      	ldr	r2, [pc, #232]	; (8002c68 <HAL_ADC_ConfigChannel+0x7a8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d127      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d121      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a35      	ldr	r2, [pc, #212]	; (8002c6c <HAL_ADC_ConfigChannel+0x7ac>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d157      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	482f      	ldr	r0, [pc, #188]	; (8002c64 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ba6:	f7ff f9a4 	bl	8001ef2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002baa:	4b31      	ldr	r3, [pc, #196]	; (8002c70 <HAL_ADC_ConfigChannel+0x7b0>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	099b      	lsrs	r3, r3, #6
 8002bb0:	4a30      	ldr	r2, [pc, #192]	; (8002c74 <HAL_ADC_ConfigChannel+0x7b4>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bc4:	e002      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f9      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd2:	e03a      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a27      	ldr	r2, [pc, #156]	; (8002c78 <HAL_ADC_ConfigChannel+0x7b8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d113      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x746>
 8002bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <HAL_ADC_ConfigChannel+0x7ac>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d12a      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bf8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4819      	ldr	r0, [pc, #100]	; (8002c64 <HAL_ADC_ConfigChannel+0x7a4>)
 8002c00:	f7ff f977 	bl	8001ef2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c04:	e021      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a1c      	ldr	r2, [pc, #112]	; (8002c7c <HAL_ADC_ConfigChannel+0x7bc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d11c      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d116      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <HAL_ADC_ConfigChannel+0x7ac>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d111      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c2e:	4619      	mov	r1, r3
 8002c30:	480c      	ldr	r0, [pc, #48]	; (8002c64 <HAL_ADC_ConfigChannel+0x7a4>)
 8002c32:	f7ff f95e 	bl	8001ef2 <LL_ADC_SetCommonPathInternalCh>
 8002c36:	e008      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3c:	f043 0220 	orr.w	r2, r3, #32
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c52:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	37d8      	adds	r7, #216	; 0xd8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	80080000 	.word	0x80080000
 8002c64:	50040300 	.word	0x50040300
 8002c68:	c7520000 	.word	0xc7520000
 8002c6c:	50040000 	.word	0x50040000
 8002c70:	20000000 	.word	0x20000000
 8002c74:	053e2d63 	.word	0x053e2d63
 8002c78:	cb840000 	.word	0xcb840000
 8002c7c:	80000001 	.word	0x80000001

08002c80 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fa96 	bl	80021be <LL_ADC_IsDisableOngoing>
 8002c92:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fa7d 	bl	8002198 <LL_ADC_IsEnabled>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d047      	beq.n	8002d34 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d144      	bne.n	8002d34 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030d 	and.w	r3, r3, #13
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d10c      	bne.n	8002cd2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fa57 	bl	8002170 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cca:	f7ff f8cf 	bl	8001e6c <HAL_GetTick>
 8002cce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cd0:	e029      	b.n	8002d26 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f043 0210 	orr.w	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	f043 0201 	orr.w	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e023      	b.n	8002d36 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cee:	f7ff f8bd 	bl	8001e6c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d914      	bls.n	8002d26 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0e:	f043 0210 	orr.w	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e007      	b.n	8002d36 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1dc      	bne.n	8002cee <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <LL_ADC_StartCalibration>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_ADC_IsCalibrationOnGoing>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d84:	d101      	bne.n	8002d8a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e04d      	b.n	8002e50 <HAL_ADCEx_Calibration_Start+0xb8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff5f 	bl	8002c80 <ADC_Disable>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d136      	bne.n	8002e3a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dd4:	f023 0302 	bic.w	r3, r3, #2
 8002dd8:	f043 0202 	orr.w	r2, r3, #2
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6839      	ldr	r1, [r7, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ffa9 	bl	8002d3e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dec:	e014      	b.n	8002e18 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	3301      	adds	r3, #1
 8002df2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002dfa:	d30d      	bcc.n	8002e18 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	f023 0312 	bic.w	r3, r3, #18
 8002e04:	f043 0210 	orr.w	r2, r3, #16
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e01b      	b.n	8002e50 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ffa7 	bl	8002d70 <LL_ADC_IsCalibrationOnGoing>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e2      	bne.n	8002dee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2c:	f023 0303 	bic.w	r3, r3, #3
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	; 0x54
 8002e38:	e005      	b.n	8002e46 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f043 0210 	orr.w	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0ed      	b.n	8003046 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe fd68 	bl	800194c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e8c:	f7fe ffee 	bl	8001e6c <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e92:	e012      	b.n	8002eba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e94:	f7fe ffea 	bl	8001e6c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b0a      	cmp	r3, #10
 8002ea0:	d90b      	bls.n	8002eba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2205      	movs	r2, #5
 8002eb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0c5      	b.n	8003046 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0e5      	beq.n	8002e94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0202 	bic.w	r2, r2, #2
 8002ed6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed8:	f7fe ffc8 	bl	8001e6c <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ede:	e012      	b.n	8002f06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ee0:	f7fe ffc4 	bl	8001e6c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b0a      	cmp	r3, #10
 8002eec:	d90b      	bls.n	8002f06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2205      	movs	r2, #5
 8002efe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e09f      	b.n	8003046 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e5      	bne.n	8002ee0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7e1b      	ldrb	r3, [r3, #24]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d108      	bne.n	8002f2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e007      	b.n	8002f3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7e5b      	ldrb	r3, [r3, #25]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d108      	bne.n	8002f58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e007      	b.n	8002f68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7e9b      	ldrb	r3, [r3, #26]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d108      	bne.n	8002f82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0220 	orr.w	r2, r2, #32
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	e007      	b.n	8002f92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0220 	bic.w	r2, r2, #32
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7edb      	ldrb	r3, [r3, #27]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d108      	bne.n	8002fac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0210 	bic.w	r2, r2, #16
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e007      	b.n	8002fbc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0210 	orr.w	r2, r2, #16
 8002fba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7f1b      	ldrb	r3, [r3, #28]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d108      	bne.n	8002fd6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0208 	orr.w	r2, r2, #8
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	e007      	b.n	8002fe6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0208 	bic.w	r2, r2, #8
 8002fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	7f5b      	ldrb	r3, [r3, #29]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d108      	bne.n	8003000 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0204 	orr.w	r2, r2, #4
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e007      	b.n	8003010 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0204 	bic.w	r2, r2, #4
 800300e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	ea42 0103 	orr.w	r1, r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	1e5a      	subs	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800304e:	b480      	push	{r7}
 8003050:	b087      	sub	sp, #28
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003064:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d003      	beq.n	8003074 <HAL_CAN_ConfigFilter+0x26>
 800306c:	7cfb      	ldrb	r3, [r7, #19]
 800306e:	2b02      	cmp	r3, #2
 8003070:	f040 80aa 	bne.w	80031c8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2201      	movs	r2, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	43db      	mvns	r3, r3
 800309e:	401a      	ands	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d123      	bne.n	80030f6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	43db      	mvns	r3, r3
 80030b8:	401a      	ands	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	3248      	adds	r2, #72	; 0x48
 80030d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030ec:	6979      	ldr	r1, [r7, #20]
 80030ee:	3348      	adds	r3, #72	; 0x48
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	440b      	add	r3, r1
 80030f4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d122      	bne.n	8003144 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	431a      	orrs	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800311e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3248      	adds	r2, #72	; 0x48
 8003124:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003138:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	3348      	adds	r3, #72	; 0x48
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	440b      	add	r3, r1
 8003142:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800315e:	e007      	b.n	8003170 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	431a      	orrs	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	43db      	mvns	r3, r3
 8003182:	401a      	ands	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800318a:	e007      	b.n	800319c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	431a      	orrs	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d107      	bne.n	80031b4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	431a      	orrs	r2, r3
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031ba:	f023 0201 	bic.w	r2, r3, #1
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e006      	b.n	80031d6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	371c      	adds	r7, #28
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d12e      	bne.n	8003254 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800320e:	f7fe fe2d 	bl	8001e6c <HAL_GetTick>
 8003212:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003214:	e012      	b.n	800323c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003216:	f7fe fe29 	bl	8001e6c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b0a      	cmp	r3, #10
 8003222:	d90b      	bls.n	800323c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2205      	movs	r2, #5
 8003234:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e012      	b.n	8003262 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1e5      	bne.n	8003216 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e006      	b.n	8003262 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800326a:	b480      	push	{r7}
 800326c:	b089      	sub	sp, #36	; 0x24
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800327e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003288:	7ffb      	ldrb	r3, [r7, #31]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d003      	beq.n	8003296 <HAL_CAN_AddTxMessage+0x2c>
 800328e:	7ffb      	ldrb	r3, [r7, #31]
 8003290:	2b02      	cmp	r3, #2
 8003292:	f040 80ad 	bne.w	80033f0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d105      	bne.n	80032b6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8095 	beq.w	80033e0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	0e1b      	lsrs	r3, r3, #24
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80032c0:	2201      	movs	r2, #1
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	409a      	lsls	r2, r3
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10d      	bne.n	80032ee <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	6809      	ldr	r1, [r1, #0]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	3318      	adds	r3, #24
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	440b      	add	r3, r1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e00f      	b.n	800330e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032fe:	68f9      	ldr	r1, [r7, #12]
 8003300:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003302:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	3318      	adds	r3, #24
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	440b      	add	r3, r1
 800330c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6819      	ldr	r1, [r3, #0]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	3318      	adds	r3, #24
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	440b      	add	r3, r1
 800331e:	3304      	adds	r3, #4
 8003320:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	7d1b      	ldrb	r3, [r3, #20]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d111      	bne.n	800334e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	3318      	adds	r3, #24
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	6811      	ldr	r1, [r2, #0]
 800333e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	3318      	adds	r3, #24
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	440b      	add	r3, r1
 800334a:	3304      	adds	r3, #4
 800334c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3307      	adds	r3, #7
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	061a      	lsls	r2, r3, #24
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3306      	adds	r3, #6
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3305      	adds	r3, #5
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	4313      	orrs	r3, r2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	3204      	adds	r2, #4
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	4610      	mov	r0, r2
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	6811      	ldr	r1, [r2, #0]
 8003376:	ea43 0200 	orr.w	r2, r3, r0
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	440b      	add	r3, r1
 8003380:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003384:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3303      	adds	r3, #3
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	061a      	lsls	r2, r3, #24
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3302      	adds	r3, #2
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3301      	adds	r3, #1
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	4313      	orrs	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	7812      	ldrb	r2, [r2, #0]
 80033a6:	4610      	mov	r0, r2
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	6811      	ldr	r1, [r2, #0]
 80033ac:	ea43 0200 	orr.w	r2, r3, r0
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80033ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3318      	adds	r3, #24
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	4413      	add	r3, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	6811      	ldr	r1, [r2, #0]
 80033ce:	f043 0201 	orr.w	r2, r3, #1
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3318      	adds	r3, #24
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	440b      	add	r3, r1
 80033da:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e00e      	b.n	80033fe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e006      	b.n	80033fe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
  }
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800340a:	b480      	push	{r7}
 800340c:	b085      	sub	sp, #20
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800341e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8003420:	7afb      	ldrb	r3, [r7, #11]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d002      	beq.n	800342c <HAL_CAN_IsTxMessagePending+0x22>
 8003426:	7afb      	ldrb	r3, [r7, #11]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d10b      	bne.n	8003444 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	069b      	lsls	r3, r3, #26
 8003436:	401a      	ands	r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	069b      	lsls	r3, r3, #26
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8003440:	2301      	movs	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003444:	68fb      	ldr	r3, [r7, #12]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003452:	b480      	push	{r7}
 8003454:	b087      	sub	sp, #28
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003466:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d003      	beq.n	8003476 <HAL_CAN_GetRxMessage+0x24>
 800346e:	7dfb      	ldrb	r3, [r7, #23]
 8003470:	2b02      	cmp	r3, #2
 8003472:	f040 80f3 	bne.w	800365c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10e      	bne.n	800349a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d116      	bne.n	80034b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0e7      	b.n	800366a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0d8      	b.n	800366a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	331b      	adds	r3, #27
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	4413      	add	r3, r2
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0204 	and.w	r2, r3, #4
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	331b      	adds	r3, #27
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	4413      	add	r3, r2
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0d5b      	lsrs	r3, r3, #21
 80034e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e00b      	b.n	8003508 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	331b      	adds	r3, #27
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	4413      	add	r3, r2
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	08db      	lsrs	r3, r3, #3
 8003500:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	331b      	adds	r3, #27
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	4413      	add	r3, r2
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0202 	and.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	331b      	adds	r3, #27
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	4413      	add	r3, r2
 800352a:	3304      	adds	r3, #4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 020f 	and.w	r2, r3, #15
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	331b      	adds	r3, #27
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	4413      	add	r3, r2
 8003542:	3304      	adds	r3, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	b2da      	uxtb	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	331b      	adds	r3, #27
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	4413      	add	r3, r2
 800355a:	3304      	adds	r3, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	0c1b      	lsrs	r3, r3, #16
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	4413      	add	r3, r2
 8003570:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4413      	add	r3, r2
 8003586:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	0a1a      	lsrs	r2, r3, #8
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	4413      	add	r3, r2
 80035a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	0c1a      	lsrs	r2, r3, #16
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	3302      	adds	r3, #2
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0e1a      	lsrs	r2, r3, #24
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	3303      	adds	r3, #3
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	3304      	adds	r3, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	0a1a      	lsrs	r2, r3, #8
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	3305      	adds	r3, #5
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	4413      	add	r3, r2
 8003606:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0c1a      	lsrs	r2, r3, #16
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	3306      	adds	r3, #6
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	4413      	add	r3, r2
 8003620:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	0e1a      	lsrs	r2, r3, #24
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	3307      	adds	r3, #7
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0220 	orr.w	r2, r2, #32
 8003644:	60da      	str	r2, [r3, #12]
 8003646:	e007      	b.n	8003658 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0220 	orr.w	r2, r2, #32
 8003656:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e006      	b.n	800366a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003676:	b480      	push	{r7}
 8003678:	b085      	sub	sp, #20
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003686:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d002      	beq.n	8003694 <HAL_CAN_ActivateNotification+0x1e>
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d109      	bne.n	80036a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6959      	ldr	r1, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e006      	b.n	80036b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
  }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b08a      	sub	sp, #40	; 0x28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d07c      	beq.n	8003802 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d023      	beq.n	800375a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f983 	bl	8003a30 <HAL_CAN_TxMailbox0CompleteCallback>
 800372a:	e016      	b.n	800375a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	e00c      	b.n	800375a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d004      	beq.n	8003754 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
 8003752:	e002      	b.n	800375a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f989 	bl	8003a6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d024      	beq.n	80037ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800376c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f963 	bl	8003a44 <HAL_CAN_TxMailbox1CompleteCallback>
 800377e:	e016      	b.n	80037ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	e00c      	b.n	80037ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800379a:	2b00      	cmp	r3, #0
 800379c:	d004      	beq.n	80037a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	e002      	b.n	80037ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f969 	bl	8003a80 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d024      	beq.n	8003802 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f943 	bl	8003a58 <HAL_CAN_TxMailbox2CompleteCallback>
 80037d2:	e016      	b.n	8003802 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d004      	beq.n	80037e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	e00c      	b.n	8003802 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
 80037fa:	e002      	b.n	8003802 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f949 	bl	8003a94 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00c      	beq.n	8003826 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800381c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2210      	movs	r2, #16
 8003824:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d006      	beq.n	8003848 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2208      	movs	r2, #8
 8003840:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f930 	bl	8003aa8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7fd fc0d 	bl	8001080 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00c      	beq.n	800388a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003880:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2210      	movs	r2, #16
 8003888:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d006      	beq.n	80038ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2208      	movs	r2, #8
 80038a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f912 	bl	8003ad0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f8f9 	bl	8003abc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2210      	movs	r2, #16
 80038e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f8fc 	bl	8003ae4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00b      	beq.n	800390e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2208      	movs	r2, #8
 8003906:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f8f5 	bl	8003af8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d07b      	beq.n	8003a10 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d072      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397c:	2b00      	cmp	r3, #0
 800397e:	d043      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003986:	2b00      	cmp	r3, #0
 8003988:	d03e      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003990:	2b60      	cmp	r3, #96	; 0x60
 8003992:	d02b      	beq.n	80039ec <HAL_CAN_IRQHandler+0x32a>
 8003994:	2b60      	cmp	r3, #96	; 0x60
 8003996:	d82e      	bhi.n	80039f6 <HAL_CAN_IRQHandler+0x334>
 8003998:	2b50      	cmp	r3, #80	; 0x50
 800399a:	d022      	beq.n	80039e2 <HAL_CAN_IRQHandler+0x320>
 800399c:	2b50      	cmp	r3, #80	; 0x50
 800399e:	d82a      	bhi.n	80039f6 <HAL_CAN_IRQHandler+0x334>
 80039a0:	2b40      	cmp	r3, #64	; 0x40
 80039a2:	d019      	beq.n	80039d8 <HAL_CAN_IRQHandler+0x316>
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d826      	bhi.n	80039f6 <HAL_CAN_IRQHandler+0x334>
 80039a8:	2b30      	cmp	r3, #48	; 0x30
 80039aa:	d010      	beq.n	80039ce <HAL_CAN_IRQHandler+0x30c>
 80039ac:	2b30      	cmp	r3, #48	; 0x30
 80039ae:	d822      	bhi.n	80039f6 <HAL_CAN_IRQHandler+0x334>
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d002      	beq.n	80039ba <HAL_CAN_IRQHandler+0x2f8>
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d005      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039b8:	e01d      	b.n	80039f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	f043 0308 	orr.w	r3, r3, #8
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039c2:	e019      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	f043 0310 	orr.w	r3, r3, #16
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039cc:	e014      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	f043 0320 	orr.w	r3, r3, #32
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039d6:	e00f      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039e0:	e00a      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ea:	e005      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039f4:	e000      	b.n	80039f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80039f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f872 	bl	8003b0c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a28:	bf00      	nop
 8003a2a:	3728      	adds	r7, #40	; 0x28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <__NVIC_SetPriorityGrouping>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b52:	4a04      	ldr	r2, [pc, #16]	; (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	60d3      	str	r3, [r2, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_GetPriorityGrouping>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <__NVIC_GetPriorityGrouping+0x18>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	f003 0307 	and.w	r3, r3, #7
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_EnableIRQ>:
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db0b      	blt.n	8003bae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	4907      	ldr	r1, [pc, #28]	; (8003bbc <__NVIC_EnableIRQ+0x38>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <__NVIC_SetPriority>:
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db0a      	blt.n	8003bea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	490c      	ldr	r1, [pc, #48]	; (8003c0c <__NVIC_SetPriority+0x4c>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	440b      	add	r3, r1
 8003be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003be8:	e00a      	b.n	8003c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4908      	ldr	r1, [pc, #32]	; (8003c10 <__NVIC_SetPriority+0x50>)
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	0112      	lsls	r2, r2, #4
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	761a      	strb	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <NVIC_EncodePriority>:
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	; 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f1c3 0307 	rsb	r3, r3, #7
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	bf28      	it	cs
 8003c32:	2304      	movcs	r3, #4
 8003c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d902      	bls.n	8003c44 <NVIC_EncodePriority+0x30>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3b03      	subs	r3, #3
 8003c42:	e000      	b.n	8003c46 <NVIC_EncodePriority+0x32>
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	401a      	ands	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43d9      	mvns	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c6c:	4313      	orrs	r3, r2
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	; 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <SysTick_Config>:
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c8c:	d301      	bcc.n	8003c92 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e00f      	b.n	8003cb2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c92:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <SysTick_Config+0x40>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c9a:	210f      	movs	r1, #15
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ca0:	f7ff ff8e 	bl	8003bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <SysTick_Config+0x40>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003caa:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <SysTick_Config+0x40>)
 8003cac:	2207      	movs	r2, #7
 8003cae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	e000e010 	.word	0xe000e010

08003cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ff29 	bl	8003b20 <__NVIC_SetPriorityGrouping>
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	4603      	mov	r3, r0
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce8:	f7ff ff3e 	bl	8003b68 <__NVIC_GetPriorityGrouping>
 8003cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	6978      	ldr	r0, [r7, #20]
 8003cf4:	f7ff ff8e 	bl	8003c14 <NVIC_EncodePriority>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff ff5d 	bl	8003bc0 <__NVIC_SetPriority>
}
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4603      	mov	r3, r0
 8003d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff ff31 	bl	8003b84 <__NVIC_EnableIRQ>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ffa2 	bl	8003c7c <SysTick_Config>
 8003d38:	4603      	mov	r3, r0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d52:	e154      	b.n	8003ffe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2101      	movs	r1, #1
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d60:	4013      	ands	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8146 	beq.w	8003ff8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d005      	beq.n	8003d84 <HAL_GPIO_Init+0x40>
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d130      	bne.n	8003de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	2203      	movs	r2, #3
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dba:	2201      	movs	r2, #1
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	f003 0201 	and.w	r2, r3, #1
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d017      	beq.n	8003e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d123      	bne.n	8003e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	08da      	lsrs	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3208      	adds	r2, #8
 8003e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	220f      	movs	r2, #15
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	08da      	lsrs	r2, r3, #3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3208      	adds	r2, #8
 8003e70:	6939      	ldr	r1, [r7, #16]
 8003e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	2203      	movs	r2, #3
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 0203 	and.w	r2, r3, #3
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80a0 	beq.w	8003ff8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb8:	4b58      	ldr	r3, [pc, #352]	; (800401c <HAL_GPIO_Init+0x2d8>)
 8003eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebc:	4a57      	ldr	r2, [pc, #348]	; (800401c <HAL_GPIO_Init+0x2d8>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ec4:	4b55      	ldr	r3, [pc, #340]	; (800401c <HAL_GPIO_Init+0x2d8>)
 8003ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ed0:	4a53      	ldr	r2, [pc, #332]	; (8004020 <HAL_GPIO_Init+0x2dc>)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	220f      	movs	r2, #15
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003efa:	d019      	beq.n	8003f30 <HAL_GPIO_Init+0x1ec>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a49      	ldr	r2, [pc, #292]	; (8004024 <HAL_GPIO_Init+0x2e0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d013      	beq.n	8003f2c <HAL_GPIO_Init+0x1e8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a48      	ldr	r2, [pc, #288]	; (8004028 <HAL_GPIO_Init+0x2e4>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d00d      	beq.n	8003f28 <HAL_GPIO_Init+0x1e4>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a47      	ldr	r2, [pc, #284]	; (800402c <HAL_GPIO_Init+0x2e8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <HAL_GPIO_Init+0x1e0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a46      	ldr	r2, [pc, #280]	; (8004030 <HAL_GPIO_Init+0x2ec>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_GPIO_Init+0x1dc>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	e008      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f20:	2307      	movs	r3, #7
 8003f22:	e006      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f24:	2303      	movs	r3, #3
 8003f26:	e004      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e002      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <HAL_GPIO_Init+0x1ee>
 8003f30:	2300      	movs	r3, #0
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	f002 0203 	and.w	r2, r2, #3
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	4093      	lsls	r3, r2
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f42:	4937      	ldr	r1, [pc, #220]	; (8004020 <HAL_GPIO_Init+0x2dc>)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	089b      	lsrs	r3, r3, #2
 8003f48:	3302      	adds	r3, #2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f50:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f74:	4a2f      	ldr	r2, [pc, #188]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003f7a:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f9e:	4a25      	ldr	r2, [pc, #148]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fa4:	4b23      	ldr	r3, [pc, #140]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003fc8:	4a1a      	ldr	r2, [pc, #104]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ff2:	4a10      	ldr	r2, [pc, #64]	; (8004034 <HAL_GPIO_Init+0x2f0>)
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	f47f aea3 	bne.w	8003d54 <HAL_GPIO_Init+0x10>
  }
}
 800400e:	bf00      	nop
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40021000 	.word	0x40021000
 8004020:	40010000 	.word	0x40010000
 8004024:	48000400 	.word	0x48000400
 8004028:	48000800 	.word	0x48000800
 800402c:	48000c00 	.word	0x48000c00
 8004030:	48001000 	.word	0x48001000
 8004034:	40010400 	.word	0x40010400

08004038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	807b      	strh	r3, [r7, #2]
 8004044:	4613      	mov	r3, r2
 8004046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004048:	787b      	ldrb	r3, [r7, #1]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800404e:	887a      	ldrh	r2, [r7, #2]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004054:	e002      	b.n	800405c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004056:	887a      	ldrh	r2, [r7, #2]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <HAL_PWREx_GetVoltageRange+0x18>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40007000 	.word	0x40007000

08004084 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004092:	d130      	bne.n	80040f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004094:	4b23      	ldr	r3, [pc, #140]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800409c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a0:	d038      	beq.n	8004114 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040aa:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040b2:	4b1d      	ldr	r3, [pc, #116]	; (8004128 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2232      	movs	r2, #50	; 0x32
 80040b8:	fb02 f303 	mul.w	r3, r2, r3
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0c9b      	lsrs	r3, r3, #18
 80040c4:	3301      	adds	r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040c8:	e002      	b.n	80040d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040d0:	4b14      	ldr	r3, [pc, #80]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040dc:	d102      	bne.n	80040e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1f2      	bne.n	80040ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040e4:	4b0f      	ldr	r3, [pc, #60]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f0:	d110      	bne.n	8004114 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e00f      	b.n	8004116 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004102:	d007      	beq.n	8004114 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800410c:	4a05      	ldr	r2, [pc, #20]	; (8004124 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800410e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004112:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40007000 	.word	0x40007000
 8004128:	20000000 	.word	0x20000000
 800412c:	431bde83 	.word	0x431bde83

08004130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f000 bc02 	b.w	8004948 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004144:	4b96      	ldr	r3, [pc, #600]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414e:	4b94      	ldr	r3, [pc, #592]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 80e4 	beq.w	800432e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <HAL_RCC_OscConfig+0x4c>
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	f040 808b 	bne.w	800428a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b01      	cmp	r3, #1
 8004178:	f040 8087 	bne.w	800428a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800417c:	4b88      	ldr	r3, [pc, #544]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_OscConfig+0x64>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e3d9      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1a      	ldr	r2, [r3, #32]
 8004198:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <HAL_RCC_OscConfig+0x7e>
 80041a4:	4b7e      	ldr	r3, [pc, #504]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ac:	e005      	b.n	80041ba <HAL_RCC_OscConfig+0x8a>
 80041ae:	4b7c      	ldr	r3, [pc, #496]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d223      	bcs.n	8004206 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fd8a 	bl	8004cdc <RCC_SetFlashLatencyFromMSIRange>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e3ba      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d2:	4b73      	ldr	r3, [pc, #460]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a72      	ldr	r2, [pc, #456]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041d8:	f043 0308 	orr.w	r3, r3, #8
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	4b70      	ldr	r3, [pc, #448]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	496d      	ldr	r1, [pc, #436]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f0:	4b6b      	ldr	r3, [pc, #428]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	4968      	ldr	r1, [pc, #416]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
 8004204:	e025      	b.n	8004252 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004206:	4b66      	ldr	r3, [pc, #408]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a65      	ldr	r2, [pc, #404]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 800420c:	f043 0308 	orr.w	r3, r3, #8
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b63      	ldr	r3, [pc, #396]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4960      	ldr	r1, [pc, #384]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004224:	4b5e      	ldr	r3, [pc, #376]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	495b      	ldr	r1, [pc, #364]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fd4a 	bl	8004cdc <RCC_SetFlashLatencyFromMSIRange>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e37a      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004252:	f000 fc81 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8004256:	4602      	mov	r2, r0
 8004258:	4b51      	ldr	r3, [pc, #324]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	091b      	lsrs	r3, r3, #4
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	4950      	ldr	r1, [pc, #320]	; (80043a4 <HAL_RCC_OscConfig+0x274>)
 8004264:	5ccb      	ldrb	r3, [r1, r3]
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	fa22 f303 	lsr.w	r3, r2, r3
 800426e:	4a4e      	ldr	r2, [pc, #312]	; (80043a8 <HAL_RCC_OscConfig+0x278>)
 8004270:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004272:	4b4e      	ldr	r3, [pc, #312]	; (80043ac <HAL_RCC_OscConfig+0x27c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd fda8 	bl	8001dcc <HAL_InitTick>
 800427c:	4603      	mov	r3, r0
 800427e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d052      	beq.n	800432c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	e35e      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d032      	beq.n	80042f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004292:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a42      	ldr	r2, [pc, #264]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800429e:	f7fd fde5 	bl	8001e6c <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a6:	f7fd fde1 	bl	8001e6c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e347      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f0      	beq.n	80042a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042c4:	4b36      	ldr	r3, [pc, #216]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a35      	ldr	r2, [pc, #212]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042ca:	f043 0308 	orr.w	r3, r3, #8
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4930      	ldr	r1, [pc, #192]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042e2:	4b2f      	ldr	r3, [pc, #188]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	492b      	ldr	r1, [pc, #172]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
 80042f6:	e01a      	b.n	800432e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042f8:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004304:	f7fd fdb2 	bl	8001e6c <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800430c:	f7fd fdae 	bl	8001e6c <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e314      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x1dc>
 800432a:	e000      	b.n	800432e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800432c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d073      	beq.n	8004422 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b08      	cmp	r3, #8
 800433e:	d005      	beq.n	800434c <HAL_RCC_OscConfig+0x21c>
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b0c      	cmp	r3, #12
 8004344:	d10e      	bne.n	8004364 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b03      	cmp	r3, #3
 800434a:	d10b      	bne.n	8004364 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d063      	beq.n	8004420 <HAL_RCC_OscConfig+0x2f0>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d15f      	bne.n	8004420 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e2f1      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d106      	bne.n	800437c <HAL_RCC_OscConfig+0x24c>
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a0b      	ldr	r2, [pc, #44]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e025      	b.n	80043c8 <HAL_RCC_OscConfig+0x298>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004384:	d114      	bne.n	80043b0 <HAL_RCC_OscConfig+0x280>
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a05      	ldr	r2, [pc, #20]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a02      	ldr	r2, [pc, #8]	; (80043a0 <HAL_RCC_OscConfig+0x270>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e013      	b.n	80043c8 <HAL_RCC_OscConfig+0x298>
 80043a0:	40021000 	.word	0x40021000
 80043a4:	0800b4ec 	.word	0x0800b4ec
 80043a8:	20000000 	.word	0x20000000
 80043ac:	20000004 	.word	0x20000004
 80043b0:	4ba0      	ldr	r3, [pc, #640]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a9f      	ldr	r2, [pc, #636]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b9d      	ldr	r3, [pc, #628]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a9c      	ldr	r2, [pc, #624]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd fd4c 	bl	8001e6c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd fd48 	bl	8001e6c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e2ae      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ea:	4b92      	ldr	r3, [pc, #584]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x2a8>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd fd38 	bl	8001e6c <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fd fd34 	bl	8001e6c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e29a      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004412:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x2d0>
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d060      	beq.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b04      	cmp	r3, #4
 8004432:	d005      	beq.n	8004440 <HAL_RCC_OscConfig+0x310>
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2b0c      	cmp	r3, #12
 8004438:	d119      	bne.n	800446e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d116      	bne.n	800446e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004440:	4b7c      	ldr	r3, [pc, #496]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_RCC_OscConfig+0x328>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e277      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004458:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	4973      	ldr	r1, [pc, #460]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004468:	4313      	orrs	r3, r2
 800446a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800446c:	e040      	b.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d023      	beq.n	80044be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004476:	4b6f      	ldr	r3, [pc, #444]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6e      	ldr	r2, [pc, #440]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004482:	f7fd fcf3 	bl	8001e6c <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448a:	f7fd fcef 	bl	8001e6c <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e255      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800449c:	4b65      	ldr	r3, [pc, #404]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0f0      	beq.n	800448a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a8:	4b62      	ldr	r3, [pc, #392]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	495f      	ldr	r1, [pc, #380]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	604b      	str	r3, [r1, #4]
 80044bc:	e018      	b.n	80044f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044be:	4b5d      	ldr	r3, [pc, #372]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5c      	ldr	r2, [pc, #368]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80044c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fd fccf 	bl	8001e6c <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d2:	f7fd fccb 	bl	8001e6c <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e231      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e4:	4b53      	ldr	r3, [pc, #332]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f0      	bne.n	80044d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d03c      	beq.n	8004576 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01c      	beq.n	800453e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004504:	4b4b      	ldr	r3, [pc, #300]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450a:	4a4a      	ldr	r2, [pc, #296]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fd fcaa 	bl	8001e6c <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451c:	f7fd fca6 	bl	8001e6c <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e20c      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800452e:	4b41      	ldr	r3, [pc, #260]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004530:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ef      	beq.n	800451c <HAL_RCC_OscConfig+0x3ec>
 800453c:	e01b      	b.n	8004576 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453e:	4b3d      	ldr	r3, [pc, #244]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004544:	4a3b      	ldr	r2, [pc, #236]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454e:	f7fd fc8d 	bl	8001e6c <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004556:	f7fd fc89 	bl	8001e6c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e1ef      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004568:	4b32      	ldr	r3, [pc, #200]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 800456a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1ef      	bne.n	8004556 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80a6 	beq.w	80046d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004584:	2300      	movs	r3, #0
 8004586:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004588:	4b2a      	ldr	r3, [pc, #168]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10d      	bne.n	80045b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004594:	4b27      	ldr	r3, [pc, #156]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	4a26      	ldr	r2, [pc, #152]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6593      	str	r3, [r2, #88]	; 0x58
 80045a0:	4b24      	ldr	r3, [pc, #144]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ac:	2301      	movs	r3, #1
 80045ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <HAL_RCC_OscConfig+0x508>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d118      	bne.n	80045ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045bc:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <HAL_RCC_OscConfig+0x508>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <HAL_RCC_OscConfig+0x508>)
 80045c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c8:	f7fd fc50 	bl	8001e6c <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d0:	f7fd fc4c 	bl	8001e6c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e1b2      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e2:	4b15      	ldr	r3, [pc, #84]	; (8004638 <HAL_RCC_OscConfig+0x508>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d108      	bne.n	8004608 <HAL_RCC_OscConfig+0x4d8>
 80045f6:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fc:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004606:	e029      	b.n	800465c <HAL_RCC_OscConfig+0x52c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b05      	cmp	r3, #5
 800460e:	d115      	bne.n	800463c <HAL_RCC_OscConfig+0x50c>
 8004610:	4b08      	ldr	r3, [pc, #32]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	4a07      	ldr	r2, [pc, #28]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004618:	f043 0304 	orr.w	r3, r3, #4
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	4a03      	ldr	r2, [pc, #12]	; (8004634 <HAL_RCC_OscConfig+0x504>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004630:	e014      	b.n	800465c <HAL_RCC_OscConfig+0x52c>
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000
 8004638:	40007000 	.word	0x40007000
 800463c:	4b9a      	ldr	r3, [pc, #616]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	4a99      	ldr	r2, [pc, #612]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800464c:	4b96      	ldr	r3, [pc, #600]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	4a95      	ldr	r2, [pc, #596]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004654:	f023 0304 	bic.w	r3, r3, #4
 8004658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d016      	beq.n	8004692 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fd fc02 	bl	8001e6c <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466a:	e00a      	b.n	8004682 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466c:	f7fd fbfe 	bl	8001e6c <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	; 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e162      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004682:	4b89      	ldr	r3, [pc, #548]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ed      	beq.n	800466c <HAL_RCC_OscConfig+0x53c>
 8004690:	e015      	b.n	80046be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7fd fbeb 	bl	8001e6c <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fd fbe7 	bl	8001e6c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e14b      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046b0:	4b7d      	ldr	r3, [pc, #500]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ed      	bne.n	800469a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046be:	7ffb      	ldrb	r3, [r7, #31]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d105      	bne.n	80046d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c4:	4b78      	ldr	r3, [pc, #480]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	4a77      	ldr	r2, [pc, #476]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 80046ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d03c      	beq.n	8004756 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d01c      	beq.n	800471e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046e4:	4b70      	ldr	r3, [pc, #448]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 80046e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ea:	4a6f      	ldr	r2, [pc, #444]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f4:	f7fd fbba 	bl	8001e6c <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046fc:	f7fd fbb6 	bl	8001e6c <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e11c      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800470e:	4b66      	ldr	r3, [pc, #408]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ef      	beq.n	80046fc <HAL_RCC_OscConfig+0x5cc>
 800471c:	e01b      	b.n	8004756 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800471e:	4b62      	ldr	r3, [pc, #392]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004724:	4a60      	ldr	r2, [pc, #384]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fd fb9d 	bl	8001e6c <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004736:	f7fd fb99 	bl	8001e6c <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0ff      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004748:	4b57      	ldr	r3, [pc, #348]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 800474a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1ef      	bne.n	8004736 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 80f3 	beq.w	8004946 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	2b02      	cmp	r3, #2
 8004766:	f040 80c9 	bne.w	80048fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800476a:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 0203 	and.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	429a      	cmp	r2, r3
 800477c:	d12c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	3b01      	subs	r3, #1
 800478a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800478c:	429a      	cmp	r2, r3
 800478e:	d123      	bne.n	80047d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d11b      	bne.n	80047d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d113      	bne.n	80047d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	3b01      	subs	r3, #1
 80047be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d109      	bne.n	80047d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	3b01      	subs	r3, #1
 80047d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d06b      	beq.n	80048b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d062      	beq.n	80048a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047de:	4b32      	ldr	r3, [pc, #200]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e0ac      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047ee:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 80047f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047fa:	f7fd fb37 	bl	8001e6c <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004802:	f7fd fb33 	bl	8001e6c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e099      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004814:	4b24      	ldr	r3, [pc, #144]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004820:	4b21      	ldr	r3, [pc, #132]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	4b21      	ldr	r3, [pc, #132]	; (80048ac <HAL_RCC_OscConfig+0x77c>)
 8004826:	4013      	ands	r3, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004830:	3a01      	subs	r2, #1
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	4311      	orrs	r1, r2
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800483a:	0212      	lsls	r2, r2, #8
 800483c:	4311      	orrs	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004842:	0852      	lsrs	r2, r2, #1
 8004844:	3a01      	subs	r2, #1
 8004846:	0552      	lsls	r2, r2, #21
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800484e:	0852      	lsrs	r2, r2, #1
 8004850:	3a01      	subs	r2, #1
 8004852:	0652      	lsls	r2, r2, #25
 8004854:	4311      	orrs	r1, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800485a:	06d2      	lsls	r2, r2, #27
 800485c:	430a      	orrs	r2, r1
 800485e:	4912      	ldr	r1, [pc, #72]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004860:	4313      	orrs	r3, r2
 8004862:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004864:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a0f      	ldr	r2, [pc, #60]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 800486a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800486e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004870:	4b0d      	ldr	r3, [pc, #52]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	4a0c      	ldr	r2, [pc, #48]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800487a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800487c:	f7fd faf6 	bl	8001e6c <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004884:	f7fd faf2 	bl	8001e6c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e058      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004896:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <HAL_RCC_OscConfig+0x778>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048a2:	e050      	b.n	8004946 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e04f      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
 80048a8:	40021000 	.word	0x40021000
 80048ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b0:	4b27      	ldr	r3, [pc, #156]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d144      	bne.n	8004946 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048bc:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a23      	ldr	r2, [pc, #140]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 80048c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048c8:	4b21      	ldr	r3, [pc, #132]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4a20      	ldr	r2, [pc, #128]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 80048ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048d4:	f7fd faca 	bl	8001e6c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fd fac6 	bl	8001e6c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e02c      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x7ac>
 80048fa:	e024      	b.n	8004946 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d01f      	beq.n	8004942 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004902:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 8004908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800490c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490e:	f7fd faad 	bl	8001e6c <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004916:	f7fd faa9 	bl	8001e6c <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e00f      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 8004936:	68da      	ldr	r2, [r3, #12]
 8004938:	4905      	ldr	r1, [pc, #20]	; (8004950 <HAL_RCC_OscConfig+0x820>)
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_RCC_OscConfig+0x824>)
 800493c:	4013      	ands	r3, r2
 800493e:	60cb      	str	r3, [r1, #12]
 8004940:	e001      	b.n	8004946 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	feeefffc 	.word	0xfeeefffc

08004958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0e7      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800496c:	4b75      	ldr	r3, [pc, #468]	; (8004b44 <HAL_RCC_ClockConfig+0x1ec>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d910      	bls.n	800499c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b72      	ldr	r3, [pc, #456]	; (8004b44 <HAL_RCC_ClockConfig+0x1ec>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 0207 	bic.w	r2, r3, #7
 8004982:	4970      	ldr	r1, [pc, #448]	; (8004b44 <HAL_RCC_ClockConfig+0x1ec>)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498a:	4b6e      	ldr	r3, [pc, #440]	; (8004b44 <HAL_RCC_ClockConfig+0x1ec>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0cf      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d010      	beq.n	80049ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	4b66      	ldr	r3, [pc, #408]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d908      	bls.n	80049ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b8:	4b63      	ldr	r3, [pc, #396]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4960      	ldr	r1, [pc, #384]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d04c      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049de:	4b5a      	ldr	r3, [pc, #360]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d121      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0a6      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f6:	4b54      	ldr	r3, [pc, #336]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d115      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e09a      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a0e:	4b4e      	ldr	r3, [pc, #312]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e08e      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a1e:	4b4a      	ldr	r3, [pc, #296]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e086      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a2e:	4b46      	ldr	r3, [pc, #280]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4943      	ldr	r1, [pc, #268]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fd fa14 	bl	8001e6c <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fd fa10 	bl	8001e6c <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e06e      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	4b3a      	ldr	r3, [pc, #232]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 020c 	and.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1eb      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d010      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d208      	bcs.n	8004a9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a8c:	4b2e      	ldr	r3, [pc, #184]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	492b      	ldr	r1, [pc, #172]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9e:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <HAL_RCC_ClockConfig+0x1ec>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d210      	bcs.n	8004ace <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aac:	4b25      	ldr	r3, [pc, #148]	; (8004b44 <HAL_RCC_ClockConfig+0x1ec>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f023 0207 	bic.w	r2, r3, #7
 8004ab4:	4923      	ldr	r1, [pc, #140]	; (8004b44 <HAL_RCC_ClockConfig+0x1ec>)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abc:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <HAL_RCC_ClockConfig+0x1ec>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d001      	beq.n	8004ace <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e036      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ada:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	4918      	ldr	r1, [pc, #96]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af8:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4910      	ldr	r1, [pc, #64]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b0c:	f000 f824 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <HAL_RCC_ClockConfig+0x1f0>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	490b      	ldr	r1, [pc, #44]	; (8004b4c <HAL_RCC_ClockConfig+0x1f4>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	f003 031f 	and.w	r3, r3, #31
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
 8004b28:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <HAL_RCC_ClockConfig+0x1f8>)
 8004b2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_ClockConfig+0x1fc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fd f94b 	bl	8001dcc <HAL_InitTick>
 8004b36:	4603      	mov	r3, r0
 8004b38:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b3a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40022000 	.word	0x40022000
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	0800b4ec 	.word	0x0800b4ec
 8004b50:	20000000 	.word	0x20000000
 8004b54:	20000004 	.word	0x20000004

08004b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b089      	sub	sp, #36	; 0x24
 8004b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b66:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b70:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x34>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	d121      	bne.n	8004bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d11e      	bne.n	8004bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b8c:	4b34      	ldr	r3, [pc, #208]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b98:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9e:	0a1b      	lsrs	r3, r3, #8
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e005      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bb4:	4a2b      	ldr	r2, [pc, #172]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10d      	bne.n	8004be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d102      	bne.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bd0:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	e004      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bdc:	4b22      	ldr	r3, [pc, #136]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d134      	bne.n	8004c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004be6:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d003      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0xac>
 8004bfc:	e005      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c00:	617b      	str	r3, [r7, #20]
      break;
 8004c02:	e005      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c04:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c06:	617b      	str	r3, [r7, #20]
      break;
 8004c08:	e002      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	617b      	str	r3, [r7, #20]
      break;
 8004c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c10:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c1e:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	fb03 f202 	mul.w	r2, r3, r2
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	0e5b      	lsrs	r3, r3, #25
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	3301      	adds	r3, #1
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c50:	69bb      	ldr	r3, [r7, #24]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	; 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000
 8004c64:	0800b504 	.word	0x0800b504
 8004c68:	00f42400 	.word	0x00f42400

08004c6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c72:	681b      	ldr	r3, [r3, #0]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000000 	.word	0x20000000

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c88:	f7ff fff0 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4904      	ldr	r1, [pc, #16]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	0800b4fc 	.word	0x0800b4fc

08004cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cb4:	f7ff ffda 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0adb      	lsrs	r3, r3, #11
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4904      	ldr	r1, [pc, #16]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	0800b4fc 	.word	0x0800b4fc

08004cdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ce8:	4b2a      	ldr	r3, [pc, #168]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cf4:	f7ff f9b8 	bl	8004068 <HAL_PWREx_GetVoltageRange>
 8004cf8:	6178      	str	r0, [r7, #20]
 8004cfa:	e014      	b.n	8004d26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cfc:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d00:	4a24      	ldr	r2, [pc, #144]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d06:	6593      	str	r3, [r2, #88]	; 0x58
 8004d08:	4b22      	ldr	r3, [pc, #136]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d14:	f7ff f9a8 	bl	8004068 <HAL_PWREx_GetVoltageRange>
 8004d18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d1a:	4b1e      	ldr	r3, [pc, #120]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2c:	d10b      	bne.n	8004d46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b80      	cmp	r3, #128	; 0x80
 8004d32:	d919      	bls.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2ba0      	cmp	r3, #160	; 0xa0
 8004d38:	d902      	bls.n	8004d40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	e013      	b.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d40:	2301      	movs	r3, #1
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	e010      	b.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b80      	cmp	r3, #128	; 0x80
 8004d4a:	d902      	bls.n	8004d52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	e00a      	b.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b80      	cmp	r3, #128	; 0x80
 8004d56:	d102      	bne.n	8004d5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d58:	2302      	movs	r3, #2
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	e004      	b.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b70      	cmp	r3, #112	; 0x70
 8004d62:	d101      	bne.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d64:	2301      	movs	r3, #1
 8004d66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f023 0207 	bic.w	r2, r3, #7
 8004d70:	4909      	ldr	r1, [pc, #36]	; (8004d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d78:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d001      	beq.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40021000 	.word	0x40021000
 8004d98:	40022000 	.word	0x40022000

08004d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004da4:	2300      	movs	r3, #0
 8004da6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004da8:	2300      	movs	r3, #0
 8004daa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d031      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dc0:	d01a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004dc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dc6:	d814      	bhi.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d009      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dd0:	d10f      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004dd2:	4b5d      	ldr	r3, [pc, #372]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	4a5c      	ldr	r2, [pc, #368]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ddc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004dde:	e00c      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	2100      	movs	r1, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f9f0 	bl	80051cc <RCCEx_PLLSAI1_Config>
 8004dec:	4603      	mov	r3, r0
 8004dee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004df0:	e003      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	74fb      	strb	r3, [r7, #19]
      break;
 8004df6:	e000      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dfa:	7cfb      	ldrb	r3, [r7, #19]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d10b      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e00:	4b51      	ldr	r3, [pc, #324]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	494e      	ldr	r1, [pc, #312]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e16:	e001      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e18:	7cfb      	ldrb	r3, [r7, #19]
 8004e1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 809e 	beq.w	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e2e:	4b46      	ldr	r3, [pc, #280]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00d      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e44:	4b40      	ldr	r3, [pc, #256]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	4a3f      	ldr	r2, [pc, #252]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e50:	4b3d      	ldr	r3, [pc, #244]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e60:	4b3a      	ldr	r3, [pc, #232]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a39      	ldr	r2, [pc, #228]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e6c:	f7fc fffe 	bl	8001e6c <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e72:	e009      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e74:	f7fc fffa 	bl	8001e6c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d902      	bls.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	74fb      	strb	r3, [r7, #19]
        break;
 8004e86:	e005      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e88:	4b30      	ldr	r3, [pc, #192]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0ef      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004e94:	7cfb      	ldrb	r3, [r7, #19]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d15a      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e9a:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d01e      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d019      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ec2:	4b21      	ldr	r3, [pc, #132]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec8:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed8:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ee2:	4a19      	ldr	r2, [pc, #100]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d016      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fc ffba 	bl	8001e6c <HAL_GetTick>
 8004ef8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004efa:	e00b      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004efc:	f7fc ffb6 	bl	8001e6c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d902      	bls.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	74fb      	strb	r3, [r7, #19]
            break;
 8004f12:	e006      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0ec      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004f22:	7cfb      	ldrb	r3, [r7, #19]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	4904      	ldr	r1, [pc, #16]	; (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f3e:	e009      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	74bb      	strb	r3, [r7, #18]
 8004f44:	e006      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004f46:	bf00      	nop
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f50:	7cfb      	ldrb	r3, [r7, #19]
 8004f52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f54:	7c7b      	ldrb	r3, [r7, #17]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d105      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5a:	4b9b      	ldr	r3, [pc, #620]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	4a9a      	ldr	r2, [pc, #616]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f72:	4b95      	ldr	r3, [pc, #596]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	f023 0203 	bic.w	r2, r3, #3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4991      	ldr	r1, [pc, #580]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f94:	4b8c      	ldr	r3, [pc, #560]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9a:	f023 020c 	bic.w	r2, r3, #12
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	4989      	ldr	r1, [pc, #548]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fb6:	4b84      	ldr	r3, [pc, #528]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	4980      	ldr	r1, [pc, #512]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fd8:	4b7b      	ldr	r3, [pc, #492]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	4978      	ldr	r1, [pc, #480]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ffa:	4b73      	ldr	r3, [pc, #460]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005008:	496f      	ldr	r1, [pc, #444]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800501c:	4b6a      	ldr	r3, [pc, #424]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	4967      	ldr	r1, [pc, #412]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800503e:	4b62      	ldr	r3, [pc, #392]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	495e      	ldr	r1, [pc, #376]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005060:	4b59      	ldr	r3, [pc, #356]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005066:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506e:	4956      	ldr	r1, [pc, #344]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005082:	4b51      	ldr	r3, [pc, #324]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005088:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	494d      	ldr	r1, [pc, #308]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d028      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050a4:	4b48      	ldr	r3, [pc, #288]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b2:	4945      	ldr	r1, [pc, #276]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050c2:	d106      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c4:	4b40      	ldr	r3, [pc, #256]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4a3f      	ldr	r2, [pc, #252]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ce:	60d3      	str	r3, [r2, #12]
 80050d0:	e011      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050da:	d10c      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	2101      	movs	r1, #1
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f872 	bl	80051cc <RCCEx_PLLSAI1_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80050f2:	7cfb      	ldrb	r3, [r7, #19]
 80050f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d028      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005102:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005108:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005110:	492d      	ldr	r1, [pc, #180]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005120:	d106      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005122:	4b29      	ldr	r3, [pc, #164]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	4a28      	ldr	r2, [pc, #160]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800512c:	60d3      	str	r3, [r2, #12]
 800512e:	e011      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005138:	d10c      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3304      	adds	r3, #4
 800513e:	2101      	movs	r1, #1
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f843 	bl	80051cc <RCCEx_PLLSAI1_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01c      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005160:	4b19      	ldr	r3, [pc, #100]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005166:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516e:	4916      	ldr	r1, [pc, #88]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800517e:	d10c      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3304      	adds	r3, #4
 8005184:	2102      	movs	r1, #2
 8005186:	4618      	mov	r0, r3
 8005188:	f000 f820 	bl	80051cc <RCCEx_PLLSAI1_Config>
 800518c:	4603      	mov	r3, r0
 800518e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005196:	7cfb      	ldrb	r3, [r7, #19]
 8005198:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	4904      	ldr	r1, [pc, #16]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40021000 	.word	0x40021000

080051cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051da:	4b74      	ldr	r3, [pc, #464]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d018      	beq.n	8005218 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051e6:	4b71      	ldr	r3, [pc, #452]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f003 0203 	and.w	r2, r3, #3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d10d      	bne.n	8005212 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
       ||
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051fe:	4b6b      	ldr	r3, [pc, #428]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	091b      	lsrs	r3, r3, #4
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
       ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d047      	beq.n	80052a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	73fb      	strb	r3, [r7, #15]
 8005216:	e044      	b.n	80052a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b03      	cmp	r3, #3
 800521e:	d018      	beq.n	8005252 <RCCEx_PLLSAI1_Config+0x86>
 8005220:	2b03      	cmp	r3, #3
 8005222:	d825      	bhi.n	8005270 <RCCEx_PLLSAI1_Config+0xa4>
 8005224:	2b01      	cmp	r3, #1
 8005226:	d002      	beq.n	800522e <RCCEx_PLLSAI1_Config+0x62>
 8005228:	2b02      	cmp	r3, #2
 800522a:	d009      	beq.n	8005240 <RCCEx_PLLSAI1_Config+0x74>
 800522c:	e020      	b.n	8005270 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800522e:	4b5f      	ldr	r3, [pc, #380]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d11d      	bne.n	8005276 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800523e:	e01a      	b.n	8005276 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005240:	4b5a      	ldr	r3, [pc, #360]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005248:	2b00      	cmp	r3, #0
 800524a:	d116      	bne.n	800527a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005250:	e013      	b.n	800527a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005252:	4b56      	ldr	r3, [pc, #344]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10f      	bne.n	800527e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800525e:	4b53      	ldr	r3, [pc, #332]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800526e:	e006      	b.n	800527e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      break;
 8005274:	e004      	b.n	8005280 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005276:	bf00      	nop
 8005278:	e002      	b.n	8005280 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800527a:	bf00      	nop
 800527c:	e000      	b.n	8005280 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800527e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005286:	4b49      	ldr	r3, [pc, #292]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6819      	ldr	r1, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	3b01      	subs	r3, #1
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	430b      	orrs	r3, r1
 800529c:	4943      	ldr	r1, [pc, #268]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d17c      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052a8:	4b40      	ldr	r3, [pc, #256]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3f      	ldr	r2, [pc, #252]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b4:	f7fc fdda 	bl	8001e6c <HAL_GetTick>
 80052b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052ba:	e009      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052bc:	f7fc fdd6 	bl	8001e6c <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d902      	bls.n	80052d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	73fb      	strb	r3, [r7, #15]
        break;
 80052ce:	e005      	b.n	80052dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052d0:	4b36      	ldr	r3, [pc, #216]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1ef      	bne.n	80052bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d15f      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d110      	bne.n	800530a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052e8:	4b30      	ldr	r3, [pc, #192]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80052f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6892      	ldr	r2, [r2, #8]
 80052f8:	0211      	lsls	r1, r2, #8
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68d2      	ldr	r2, [r2, #12]
 80052fe:	06d2      	lsls	r2, r2, #27
 8005300:	430a      	orrs	r2, r1
 8005302:	492a      	ldr	r1, [pc, #168]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005304:	4313      	orrs	r3, r2
 8005306:	610b      	str	r3, [r1, #16]
 8005308:	e027      	b.n	800535a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d112      	bne.n	8005336 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005310:	4b26      	ldr	r3, [pc, #152]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005318:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6892      	ldr	r2, [r2, #8]
 8005320:	0211      	lsls	r1, r2, #8
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6912      	ldr	r2, [r2, #16]
 8005326:	0852      	lsrs	r2, r2, #1
 8005328:	3a01      	subs	r2, #1
 800532a:	0552      	lsls	r2, r2, #21
 800532c:	430a      	orrs	r2, r1
 800532e:	491f      	ldr	r1, [pc, #124]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005330:	4313      	orrs	r3, r2
 8005332:	610b      	str	r3, [r1, #16]
 8005334:	e011      	b.n	800535a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800533e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	6892      	ldr	r2, [r2, #8]
 8005346:	0211      	lsls	r1, r2, #8
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6952      	ldr	r2, [r2, #20]
 800534c:	0852      	lsrs	r2, r2, #1
 800534e:	3a01      	subs	r2, #1
 8005350:	0652      	lsls	r2, r2, #25
 8005352:	430a      	orrs	r2, r1
 8005354:	4915      	ldr	r1, [pc, #84]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005356:	4313      	orrs	r3, r2
 8005358:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800535a:	4b14      	ldr	r3, [pc, #80]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a13      	ldr	r2, [pc, #76]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005360:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005364:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005366:	f7fc fd81 	bl	8001e6c <HAL_GetTick>
 800536a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800536c:	e009      	b.n	8005382 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800536e:	f7fc fd7d 	bl	8001e6c <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d902      	bls.n	8005382 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	73fb      	strb	r3, [r7, #15]
          break;
 8005380:	e005      	b.n	800538e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0ef      	beq.n	800536e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	4903      	ldr	r1, [pc, #12]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40021000 	.word	0x40021000

080053b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e049      	b.n	8005456 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fc fb04 	bl	80019e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f000 fa74 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e049      	b.n	8005504 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d106      	bne.n	800548a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f841 	bl	800550c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3304      	adds	r3, #4
 800549a:	4619      	mov	r1, r3
 800549c:	4610      	mov	r0, r2
 800549e:	f000 fa1d 	bl	80058dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800553a:	2302      	movs	r3, #2
 800553c:	e0ff      	b.n	800573e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b14      	cmp	r3, #20
 800554a:	f200 80f0 	bhi.w	800572e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800554e:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	080055a9 	.word	0x080055a9
 8005558:	0800572f 	.word	0x0800572f
 800555c:	0800572f 	.word	0x0800572f
 8005560:	0800572f 	.word	0x0800572f
 8005564:	080055e9 	.word	0x080055e9
 8005568:	0800572f 	.word	0x0800572f
 800556c:	0800572f 	.word	0x0800572f
 8005570:	0800572f 	.word	0x0800572f
 8005574:	0800562b 	.word	0x0800562b
 8005578:	0800572f 	.word	0x0800572f
 800557c:	0800572f 	.word	0x0800572f
 8005580:	0800572f 	.word	0x0800572f
 8005584:	0800566b 	.word	0x0800566b
 8005588:	0800572f 	.word	0x0800572f
 800558c:	0800572f 	.word	0x0800572f
 8005590:	0800572f 	.word	0x0800572f
 8005594:	080056ad 	.word	0x080056ad
 8005598:	0800572f 	.word	0x0800572f
 800559c:	0800572f 	.word	0x0800572f
 80055a0:	0800572f 	.word	0x0800572f
 80055a4:	080056ed 	.word	0x080056ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68b9      	ldr	r1, [r7, #8]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f9f8 	bl	80059a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0208 	orr.w	r2, r2, #8
 80055c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0204 	bic.w	r2, r2, #4
 80055d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6999      	ldr	r1, [r3, #24]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	619a      	str	r2, [r3, #24]
      break;
 80055e6:	e0a5      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fa54 	bl	8005a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6999      	ldr	r1, [r3, #24]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	021a      	lsls	r2, r3, #8
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	619a      	str	r2, [r3, #24]
      break;
 8005628:	e084      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	4618      	mov	r0, r3
 8005632:	f000 faad 	bl	8005b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0208 	orr.w	r2, r2, #8
 8005644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0204 	bic.w	r2, r2, #4
 8005654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69d9      	ldr	r1, [r3, #28]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	61da      	str	r2, [r3, #28]
      break;
 8005668:	e064      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fb05 	bl	8005c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69d9      	ldr	r1, [r3, #28]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	021a      	lsls	r2, r3, #8
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	61da      	str	r2, [r3, #28]
      break;
 80056aa:	e043      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fb42 	bl	8005d3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0208 	orr.w	r2, r2, #8
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0204 	bic.w	r2, r2, #4
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056ea:	e023      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fb7a 	bl	8005dec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005706:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005716:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	021a      	lsls	r2, r3, #8
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800572c:	e002      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	75fb      	strb	r3, [r7, #23]
      break;
 8005732:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800573c:	7dfb      	ldrb	r3, [r7, #23]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop

08005748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_TIM_ConfigClockSource+0x1c>
 8005760:	2302      	movs	r3, #2
 8005762:	e0b6      	b.n	80058d2 <HAL_TIM_ConfigClockSource+0x18a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005782:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800578e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a0:	d03e      	beq.n	8005820 <HAL_TIM_ConfigClockSource+0xd8>
 80057a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a6:	f200 8087 	bhi.w	80058b8 <HAL_TIM_ConfigClockSource+0x170>
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	f000 8086 	beq.w	80058be <HAL_TIM_ConfigClockSource+0x176>
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b6:	d87f      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x170>
 80057b8:	2b70      	cmp	r3, #112	; 0x70
 80057ba:	d01a      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0xaa>
 80057bc:	2b70      	cmp	r3, #112	; 0x70
 80057be:	d87b      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x170>
 80057c0:	2b60      	cmp	r3, #96	; 0x60
 80057c2:	d050      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x11e>
 80057c4:	2b60      	cmp	r3, #96	; 0x60
 80057c6:	d877      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x170>
 80057c8:	2b50      	cmp	r3, #80	; 0x50
 80057ca:	d03c      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0xfe>
 80057cc:	2b50      	cmp	r3, #80	; 0x50
 80057ce:	d873      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x170>
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d058      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x13e>
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d86f      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x170>
 80057d8:	2b30      	cmp	r3, #48	; 0x30
 80057da:	d064      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x15e>
 80057dc:	2b30      	cmp	r3, #48	; 0x30
 80057de:	d86b      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x170>
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d060      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x15e>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d867      	bhi.n	80058b8 <HAL_TIM_ConfigClockSource+0x170>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d05c      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x15e>
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d05a      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x15e>
 80057f0:	e062      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6899      	ldr	r1, [r3, #8]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f000 fbc7 	bl	8005f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005814:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	609a      	str	r2, [r3, #8]
      break;
 800581e:	e04f      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	6899      	ldr	r1, [r3, #8]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f000 fbb0 	bl	8005f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005842:	609a      	str	r2, [r3, #8]
      break;
 8005844:	e03c      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	461a      	mov	r2, r3
 8005854:	f000 fb24 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2150      	movs	r1, #80	; 0x50
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fb7d 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005864:	e02c      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	461a      	mov	r2, r3
 8005874:	f000 fb43 	bl	8005efe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2160      	movs	r1, #96	; 0x60
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fb6d 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005884:	e01c      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6859      	ldr	r1, [r3, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	461a      	mov	r2, r3
 8005894:	f000 fb04 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2140      	movs	r1, #64	; 0x40
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fb5d 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 80058a4:	e00c      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f000 fb54 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 80058b6:	e003      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	e000      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80058be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a2a      	ldr	r2, [pc, #168]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_Base_SetConfig+0x20>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d108      	bne.n	800590e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a21      	ldr	r2, [pc, #132]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00b      	beq.n	800592e <TIM_Base_SetConfig+0x52>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591c:	d007      	beq.n	800592e <TIM_Base_SetConfig+0x52>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a1e      	ldr	r2, [pc, #120]	; (800599c <TIM_Base_SetConfig+0xc0>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_Base_SetConfig+0x52>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1d      	ldr	r2, [pc, #116]	; (80059a0 <TIM_Base_SetConfig+0xc4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d108      	bne.n	8005940 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4313      	orrs	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	689a      	ldr	r2, [r3, #8]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a0c      	ldr	r2, [pc, #48]	; (8005998 <TIM_Base_SetConfig+0xbc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d007      	beq.n	800597c <TIM_Base_SetConfig+0xa0>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a0b      	ldr	r2, [pc, #44]	; (800599c <TIM_Base_SetConfig+0xc0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_Base_SetConfig+0xa0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a0a      	ldr	r2, [pc, #40]	; (80059a0 <TIM_Base_SetConfig+0xc4>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d103      	bne.n	8005984 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	615a      	str	r2, [r3, #20]
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400

080059a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f023 0201 	bic.w	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f023 0302 	bic.w	r3, r3, #2
 80059f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a24      	ldr	r2, [pc, #144]	; (8005a90 <TIM_OC1_SetConfig+0xec>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_OC1_SetConfig+0x70>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a23      	ldr	r2, [pc, #140]	; (8005a94 <TIM_OC1_SetConfig+0xf0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC1_SetConfig+0x70>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a22      	ldr	r2, [pc, #136]	; (8005a98 <TIM_OC1_SetConfig+0xf4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d10c      	bne.n	8005a2e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f023 0308 	bic.w	r3, r3, #8
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0304 	bic.w	r3, r3, #4
 8005a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <TIM_OC1_SetConfig+0xec>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d007      	beq.n	8005a46 <TIM_OC1_SetConfig+0xa2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a16      	ldr	r2, [pc, #88]	; (8005a94 <TIM_OC1_SetConfig+0xf0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d003      	beq.n	8005a46 <TIM_OC1_SetConfig+0xa2>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a15      	ldr	r2, [pc, #84]	; (8005a98 <TIM_OC1_SetConfig+0xf4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d111      	bne.n	8005a6a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40014000 	.word	0x40014000
 8005a98:	40014400 	.word	0x40014400

08005a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	f023 0210 	bic.w	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f023 0320 	bic.w	r3, r3, #32
 8005aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a22      	ldr	r2, [pc, #136]	; (8005b84 <TIM_OC2_SetConfig+0xe8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10d      	bne.n	8005b1c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <TIM_OC2_SetConfig+0xe8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_OC2_SetConfig+0x98>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <TIM_OC2_SetConfig+0xec>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC2_SetConfig+0x98>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <TIM_OC2_SetConfig+0xf0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d113      	bne.n	8005b5c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	621a      	str	r2, [r3, #32]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400

08005b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0303 	bic.w	r3, r3, #3
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <TIM_OC3_SetConfig+0xe4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d10d      	bne.n	8005c0e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	021b      	lsls	r3, r3, #8
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a18      	ldr	r2, [pc, #96]	; (8005c74 <TIM_OC3_SetConfig+0xe4>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_OC3_SetConfig+0x96>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a17      	ldr	r2, [pc, #92]	; (8005c78 <TIM_OC3_SetConfig+0xe8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_OC3_SetConfig+0x96>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a16      	ldr	r2, [pc, #88]	; (8005c7c <TIM_OC3_SetConfig+0xec>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d113      	bne.n	8005c4e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	621a      	str	r2, [r3, #32]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40014000 	.word	0x40014000
 8005c7c:	40014400 	.word	0x40014400

08005c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <TIM_OC4_SetConfig+0xb0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d007      	beq.n	8005cf4 <TIM_OC4_SetConfig+0x74>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a13      	ldr	r2, [pc, #76]	; (8005d34 <TIM_OC4_SetConfig+0xb4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d003      	beq.n	8005cf4 <TIM_OC4_SetConfig+0x74>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <TIM_OC4_SetConfig+0xb8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d109      	bne.n	8005d08 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400

08005d3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a13      	ldr	r2, [pc, #76]	; (8005de0 <TIM_OC5_SetConfig+0xa4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d007      	beq.n	8005da6 <TIM_OC5_SetConfig+0x6a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a12      	ldr	r2, [pc, #72]	; (8005de4 <TIM_OC5_SetConfig+0xa8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <TIM_OC5_SetConfig+0x6a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a11      	ldr	r2, [pc, #68]	; (8005de8 <TIM_OC5_SetConfig+0xac>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d109      	bne.n	8005dba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	021b      	lsls	r3, r3, #8
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	40012c00 	.word	0x40012c00
 8005de4:	40014000 	.word	0x40014000
 8005de8:	40014400 	.word	0x40014400

08005dec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	021b      	lsls	r3, r3, #8
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	051b      	lsls	r3, r3, #20
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a14      	ldr	r2, [pc, #80]	; (8005e94 <TIM_OC6_SetConfig+0xa8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d007      	beq.n	8005e58 <TIM_OC6_SetConfig+0x6c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <TIM_OC6_SetConfig+0xac>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC6_SetConfig+0x6c>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a12      	ldr	r2, [pc, #72]	; (8005e9c <TIM_OC6_SetConfig+0xb0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d109      	bne.n	8005e6c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	029b      	lsls	r3, r3, #10
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40014400 	.word	0x40014400

08005ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 030a 	bic.w	r3, r3, #10
 8005edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b087      	sub	sp, #28
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f023 0210 	bic.w	r2, r3, #16
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	031b      	lsls	r3, r3, #12
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f043 0307 	orr.w	r3, r3, #7
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	021a      	lsls	r2, r3, #8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e04f      	b.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a21      	ldr	r2, [pc, #132]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d108      	bne.n	8006028 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800601c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800602e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a14      	ldr	r2, [pc, #80]	; (8006098 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d009      	beq.n	8006060 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006054:	d004      	beq.n	8006060 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a10      	ldr	r2, [pc, #64]	; (800609c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10c      	bne.n	800607a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006066:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	4313      	orrs	r3, r2
 8006070:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	40012c00 	.word	0x40012c00
 800609c:	40014000 	.word	0x40014000

080060a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e060      	b.n	800617e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	4313      	orrs	r3, r2
 8006116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	4313      	orrs	r3, r2
 8006124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	041b      	lsls	r3, r3, #16
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a14      	ldr	r2, [pc, #80]	; (800618c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d115      	bne.n	800616c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	051b      	lsls	r3, r3, #20
 800614c:	4313      	orrs	r3, r2
 800614e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4313      	orrs	r3, r2
 800615c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40012c00 	.word	0x40012c00

08006190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e040      	b.n	8006224 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fb fc80 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2224      	movs	r2, #36	; 0x24
 80061bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f82c 	bl	800622c <UART_SetConfig>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e022      	b.n	8006224 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa7a 	bl	80066e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800620a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0201 	orr.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fb01 	bl	8006824 <UART_CheckIdleState>
 8006222:	4603      	mov	r3, r0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800622c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006230:	b08a      	sub	sp, #40	; 0x28
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	431a      	orrs	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	431a      	orrs	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	4313      	orrs	r3, r2
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	4b9e      	ldr	r3, [pc, #632]	; (80064d4 <UART_SetConfig+0x2a8>)
 800625c:	4013      	ands	r3, r2
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006264:	430b      	orrs	r3, r1
 8006266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a93      	ldr	r2, [pc, #588]	; (80064d8 <UART_SetConfig+0x2ac>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006294:	4313      	orrs	r3, r2
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a8:	430a      	orrs	r2, r1
 80062aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a8a      	ldr	r2, [pc, #552]	; (80064dc <UART_SetConfig+0x2b0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d126      	bne.n	8006304 <UART_SetConfig+0xd8>
 80062b6:	4b8a      	ldr	r3, [pc, #552]	; (80064e0 <UART_SetConfig+0x2b4>)
 80062b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d81b      	bhi.n	80062fc <UART_SetConfig+0xd0>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <UART_SetConfig+0xa0>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	080062dd 	.word	0x080062dd
 80062d0:	080062ed 	.word	0x080062ed
 80062d4:	080062e5 	.word	0x080062e5
 80062d8:	080062f5 	.word	0x080062f5
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e2:	e0ab      	b.n	800643c <UART_SetConfig+0x210>
 80062e4:	2302      	movs	r3, #2
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ea:	e0a7      	b.n	800643c <UART_SetConfig+0x210>
 80062ec:	2304      	movs	r3, #4
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f2:	e0a3      	b.n	800643c <UART_SetConfig+0x210>
 80062f4:	2308      	movs	r3, #8
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fa:	e09f      	b.n	800643c <UART_SetConfig+0x210>
 80062fc:	2310      	movs	r3, #16
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006302:	e09b      	b.n	800643c <UART_SetConfig+0x210>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a76      	ldr	r2, [pc, #472]	; (80064e4 <UART_SetConfig+0x2b8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d138      	bne.n	8006380 <UART_SetConfig+0x154>
 800630e:	4b74      	ldr	r3, [pc, #464]	; (80064e0 <UART_SetConfig+0x2b4>)
 8006310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006314:	f003 030c 	and.w	r3, r3, #12
 8006318:	2b0c      	cmp	r3, #12
 800631a:	d82d      	bhi.n	8006378 <UART_SetConfig+0x14c>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <UART_SetConfig+0xf8>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006359 	.word	0x08006359
 8006328:	08006379 	.word	0x08006379
 800632c:	08006379 	.word	0x08006379
 8006330:	08006379 	.word	0x08006379
 8006334:	08006369 	.word	0x08006369
 8006338:	08006379 	.word	0x08006379
 800633c:	08006379 	.word	0x08006379
 8006340:	08006379 	.word	0x08006379
 8006344:	08006361 	.word	0x08006361
 8006348:	08006379 	.word	0x08006379
 800634c:	08006379 	.word	0x08006379
 8006350:	08006379 	.word	0x08006379
 8006354:	08006371 	.word	0x08006371
 8006358:	2300      	movs	r3, #0
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800635e:	e06d      	b.n	800643c <UART_SetConfig+0x210>
 8006360:	2302      	movs	r3, #2
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006366:	e069      	b.n	800643c <UART_SetConfig+0x210>
 8006368:	2304      	movs	r3, #4
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636e:	e065      	b.n	800643c <UART_SetConfig+0x210>
 8006370:	2308      	movs	r3, #8
 8006372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006376:	e061      	b.n	800643c <UART_SetConfig+0x210>
 8006378:	2310      	movs	r3, #16
 800637a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637e:	e05d      	b.n	800643c <UART_SetConfig+0x210>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a58      	ldr	r2, [pc, #352]	; (80064e8 <UART_SetConfig+0x2bc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d125      	bne.n	80063d6 <UART_SetConfig+0x1aa>
 800638a:	4b55      	ldr	r3, [pc, #340]	; (80064e0 <UART_SetConfig+0x2b4>)
 800638c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006390:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006394:	2b30      	cmp	r3, #48	; 0x30
 8006396:	d016      	beq.n	80063c6 <UART_SetConfig+0x19a>
 8006398:	2b30      	cmp	r3, #48	; 0x30
 800639a:	d818      	bhi.n	80063ce <UART_SetConfig+0x1a2>
 800639c:	2b20      	cmp	r3, #32
 800639e:	d00a      	beq.n	80063b6 <UART_SetConfig+0x18a>
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d814      	bhi.n	80063ce <UART_SetConfig+0x1a2>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <UART_SetConfig+0x182>
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d008      	beq.n	80063be <UART_SetConfig+0x192>
 80063ac:	e00f      	b.n	80063ce <UART_SetConfig+0x1a2>
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b4:	e042      	b.n	800643c <UART_SetConfig+0x210>
 80063b6:	2302      	movs	r3, #2
 80063b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063bc:	e03e      	b.n	800643c <UART_SetConfig+0x210>
 80063be:	2304      	movs	r3, #4
 80063c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063c4:	e03a      	b.n	800643c <UART_SetConfig+0x210>
 80063c6:	2308      	movs	r3, #8
 80063c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063cc:	e036      	b.n	800643c <UART_SetConfig+0x210>
 80063ce:	2310      	movs	r3, #16
 80063d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063d4:	e032      	b.n	800643c <UART_SetConfig+0x210>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a3f      	ldr	r2, [pc, #252]	; (80064d8 <UART_SetConfig+0x2ac>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d12a      	bne.n	8006436 <UART_SetConfig+0x20a>
 80063e0:	4b3f      	ldr	r3, [pc, #252]	; (80064e0 <UART_SetConfig+0x2b4>)
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ee:	d01a      	beq.n	8006426 <UART_SetConfig+0x1fa>
 80063f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063f4:	d81b      	bhi.n	800642e <UART_SetConfig+0x202>
 80063f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fa:	d00c      	beq.n	8006416 <UART_SetConfig+0x1ea>
 80063fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006400:	d815      	bhi.n	800642e <UART_SetConfig+0x202>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <UART_SetConfig+0x1e2>
 8006406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640a:	d008      	beq.n	800641e <UART_SetConfig+0x1f2>
 800640c:	e00f      	b.n	800642e <UART_SetConfig+0x202>
 800640e:	2300      	movs	r3, #0
 8006410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006414:	e012      	b.n	800643c <UART_SetConfig+0x210>
 8006416:	2302      	movs	r3, #2
 8006418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800641c:	e00e      	b.n	800643c <UART_SetConfig+0x210>
 800641e:	2304      	movs	r3, #4
 8006420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006424:	e00a      	b.n	800643c <UART_SetConfig+0x210>
 8006426:	2308      	movs	r3, #8
 8006428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800642c:	e006      	b.n	800643c <UART_SetConfig+0x210>
 800642e:	2310      	movs	r3, #16
 8006430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006434:	e002      	b.n	800643c <UART_SetConfig+0x210>
 8006436:	2310      	movs	r3, #16
 8006438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a25      	ldr	r2, [pc, #148]	; (80064d8 <UART_SetConfig+0x2ac>)
 8006442:	4293      	cmp	r3, r2
 8006444:	f040 808a 	bne.w	800655c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800644c:	2b08      	cmp	r3, #8
 800644e:	d824      	bhi.n	800649a <UART_SetConfig+0x26e>
 8006450:	a201      	add	r2, pc, #4	; (adr r2, 8006458 <UART_SetConfig+0x22c>)
 8006452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006456:	bf00      	nop
 8006458:	0800647d 	.word	0x0800647d
 800645c:	0800649b 	.word	0x0800649b
 8006460:	08006485 	.word	0x08006485
 8006464:	0800649b 	.word	0x0800649b
 8006468:	0800648b 	.word	0x0800648b
 800646c:	0800649b 	.word	0x0800649b
 8006470:	0800649b 	.word	0x0800649b
 8006474:	0800649b 	.word	0x0800649b
 8006478:	08006493 	.word	0x08006493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800647c:	f7fe fc02 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8006480:	61f8      	str	r0, [r7, #28]
        break;
 8006482:	e010      	b.n	80064a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006484:	4b19      	ldr	r3, [pc, #100]	; (80064ec <UART_SetConfig+0x2c0>)
 8006486:	61fb      	str	r3, [r7, #28]
        break;
 8006488:	e00d      	b.n	80064a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800648a:	f7fe fb65 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 800648e:	61f8      	str	r0, [r7, #28]
        break;
 8006490:	e009      	b.n	80064a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006496:	61fb      	str	r3, [r7, #28]
        break;
 8006498:	e005      	b.n	80064a6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8109 	beq.w	80066c0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	4413      	add	r3, r2
 80064b8:	69fa      	ldr	r2, [r7, #28]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d305      	bcc.n	80064ca <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064c4:	69fa      	ldr	r2, [r7, #28]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d912      	bls.n	80064f0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064d0:	e0f6      	b.n	80066c0 <UART_SetConfig+0x494>
 80064d2:	bf00      	nop
 80064d4:	efff69f3 	.word	0xefff69f3
 80064d8:	40008000 	.word	0x40008000
 80064dc:	40013800 	.word	0x40013800
 80064e0:	40021000 	.word	0x40021000
 80064e4:	40004400 	.word	0x40004400
 80064e8:	40004800 	.word	0x40004800
 80064ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	2200      	movs	r2, #0
 80064f4:	461c      	mov	r4, r3
 80064f6:	4615      	mov	r5, r2
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	022b      	lsls	r3, r5, #8
 8006502:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006506:	0222      	lsls	r2, r4, #8
 8006508:	68f9      	ldr	r1, [r7, #12]
 800650a:	6849      	ldr	r1, [r1, #4]
 800650c:	0849      	lsrs	r1, r1, #1
 800650e:	2000      	movs	r0, #0
 8006510:	4688      	mov	r8, r1
 8006512:	4681      	mov	r9, r0
 8006514:	eb12 0a08 	adds.w	sl, r2, r8
 8006518:	eb43 0b09 	adc.w	fp, r3, r9
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	603b      	str	r3, [r7, #0]
 8006524:	607a      	str	r2, [r7, #4]
 8006526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800652a:	4650      	mov	r0, sl
 800652c:	4659      	mov	r1, fp
 800652e:	f7fa fbab 	bl	8000c88 <__aeabi_uldivmod>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4613      	mov	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006540:	d308      	bcc.n	8006554 <UART_SetConfig+0x328>
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006548:	d204      	bcs.n	8006554 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	e0b5      	b.n	80066c0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800655a:	e0b1      	b.n	80066c0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006564:	d15d      	bne.n	8006622 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800656a:	2b08      	cmp	r3, #8
 800656c:	d827      	bhi.n	80065be <UART_SetConfig+0x392>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0x348>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	08006599 	.word	0x08006599
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	080065bf 	.word	0x080065bf
 8006584:	080065af 	.word	0x080065af
 8006588:	080065bf 	.word	0x080065bf
 800658c:	080065bf 	.word	0x080065bf
 8006590:	080065bf 	.word	0x080065bf
 8006594:	080065b7 	.word	0x080065b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006598:	f7fe fb74 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 800659c:	61f8      	str	r0, [r7, #28]
        break;
 800659e:	e014      	b.n	80065ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a0:	f7fe fb86 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 80065a4:	61f8      	str	r0, [r7, #28]
        break;
 80065a6:	e010      	b.n	80065ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a8:	4b4c      	ldr	r3, [pc, #304]	; (80066dc <UART_SetConfig+0x4b0>)
 80065aa:	61fb      	str	r3, [r7, #28]
        break;
 80065ac:	e00d      	b.n	80065ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ae:	f7fe fad3 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 80065b2:	61f8      	str	r0, [r7, #28]
        break;
 80065b4:	e009      	b.n	80065ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ba:	61fb      	str	r3, [r7, #28]
        break;
 80065bc:	e005      	b.n	80065ca <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d077      	beq.n	80066c0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	005a      	lsls	r2, r3, #1
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	441a      	add	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b0f      	cmp	r3, #15
 80065ea:	d916      	bls.n	800661a <UART_SetConfig+0x3ee>
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f2:	d212      	bcs.n	800661a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f023 030f 	bic.w	r3, r3, #15
 80065fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	b29b      	uxth	r3, r3
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	b29a      	uxth	r2, r3
 800660a:	8afb      	ldrh	r3, [r7, #22]
 800660c:	4313      	orrs	r3, r2
 800660e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	8afa      	ldrh	r2, [r7, #22]
 8006616:	60da      	str	r2, [r3, #12]
 8006618:	e052      	b.n	80066c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006620:	e04e      	b.n	80066c0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006626:	2b08      	cmp	r3, #8
 8006628:	d827      	bhi.n	800667a <UART_SetConfig+0x44e>
 800662a:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <UART_SetConfig+0x404>)
 800662c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006630:	08006655 	.word	0x08006655
 8006634:	0800665d 	.word	0x0800665d
 8006638:	08006665 	.word	0x08006665
 800663c:	0800667b 	.word	0x0800667b
 8006640:	0800666b 	.word	0x0800666b
 8006644:	0800667b 	.word	0x0800667b
 8006648:	0800667b 	.word	0x0800667b
 800664c:	0800667b 	.word	0x0800667b
 8006650:	08006673 	.word	0x08006673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006654:	f7fe fb16 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8006658:	61f8      	str	r0, [r7, #28]
        break;
 800665a:	e014      	b.n	8006686 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800665c:	f7fe fb28 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 8006660:	61f8      	str	r0, [r7, #28]
        break;
 8006662:	e010      	b.n	8006686 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006664:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <UART_SetConfig+0x4b0>)
 8006666:	61fb      	str	r3, [r7, #28]
        break;
 8006668:	e00d      	b.n	8006686 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800666a:	f7fe fa75 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 800666e:	61f8      	str	r0, [r7, #28]
        break;
 8006670:	e009      	b.n	8006686 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006676:	61fb      	str	r3, [r7, #28]
        break;
 8006678:	e005      	b.n	8006686 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006684:	bf00      	nop
    }

    if (pclk != 0U)
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d019      	beq.n	80066c0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	085a      	lsrs	r2, r3, #1
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	441a      	add	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	fbb2 f3f3 	udiv	r3, r2, r3
 800669e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	2b0f      	cmp	r3, #15
 80066a4:	d909      	bls.n	80066ba <UART_SetConfig+0x48e>
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ac:	d205      	bcs.n	80066ba <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60da      	str	r2, [r3, #12]
 80066b8:	e002      	b.n	80066c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3728      	adds	r7, #40	; 0x28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066da:	bf00      	nop
 80066dc:	00f42400 	.word	0x00f42400

080066e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00a      	beq.n	800674e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	430a      	orrs	r2, r1
 800676e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00a      	beq.n	8006792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	f003 0320 	and.w	r3, r3, #32
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01a      	beq.n	80067f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067de:	d10a      	bne.n	80067f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]
  }
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af02      	add	r7, sp, #8
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006834:	f7fb fb1a 	bl	8001e6c <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0308 	and.w	r3, r3, #8
 8006844:	2b08      	cmp	r3, #8
 8006846:	d10e      	bne.n	8006866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f82d 	bl	80068b6 <UART_WaitOnFlagUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e023      	b.n	80068ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b04      	cmp	r3, #4
 8006872:	d10e      	bne.n	8006892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f817 	bl	80068b6 <UART_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e00d      	b.n	80068ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b09c      	sub	sp, #112	; 0x70
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	603b      	str	r3, [r7, #0]
 80068c2:	4613      	mov	r3, r2
 80068c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c6:	e0a5      	b.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ce:	f000 80a1 	beq.w	8006a14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d2:	f7fb facb 	bl	8001e6c <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068de:	429a      	cmp	r2, r3
 80068e0:	d302      	bcc.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80068e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d13e      	bne.n	8006966 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068fc:	667b      	str	r3, [r7, #100]	; 0x64
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006906:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006908:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800690c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e6      	bne.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3308      	adds	r3, #8
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	f023 0301 	bic.w	r3, r3, #1
 8006930:	663b      	str	r3, [r7, #96]	; 0x60
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3308      	adds	r3, #8
 8006938:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800693a:	64ba      	str	r2, [r7, #72]	; 0x48
 800693c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006940:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006942:	e841 2300 	strex	r3, r2, [r1]
 8006946:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1e5      	bne.n	800691a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2220      	movs	r2, #32
 8006952:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e067      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d04f      	beq.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800697e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006982:	d147      	bne.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800698c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
 80069ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069b4:	e841 2300 	strex	r3, r2, [r1]
 80069b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1e6      	bne.n	800698e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3308      	adds	r3, #8
 80069c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	e853 3f00 	ldrex	r3, [r3]
 80069ce:	613b      	str	r3, [r7, #16]
   return(result);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3308      	adds	r3, #8
 80069de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069e0:	623a      	str	r2, [r7, #32]
 80069e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e4:	69f9      	ldr	r1, [r7, #28]
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	e841 2300 	strex	r3, r2, [r1]
 80069ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1e5      	bne.n	80069c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e010      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69da      	ldr	r2, [r3, #28]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	bf0c      	ite	eq
 8006a24:	2301      	moveq	r3, #1
 8006a26:	2300      	movne	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	f43f af4a 	beq.w	80068c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3770      	adds	r7, #112	; 0x70
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <__errno>:
 8006a40:	4b01      	ldr	r3, [pc, #4]	; (8006a48 <__errno+0x8>)
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	2000000c 	.word	0x2000000c

08006a4c <__libc_init_array>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4d0d      	ldr	r5, [pc, #52]	; (8006a84 <__libc_init_array+0x38>)
 8006a50:	4c0d      	ldr	r4, [pc, #52]	; (8006a88 <__libc_init_array+0x3c>)
 8006a52:	1b64      	subs	r4, r4, r5
 8006a54:	10a4      	asrs	r4, r4, #2
 8006a56:	2600      	movs	r6, #0
 8006a58:	42a6      	cmp	r6, r4
 8006a5a:	d109      	bne.n	8006a70 <__libc_init_array+0x24>
 8006a5c:	4d0b      	ldr	r5, [pc, #44]	; (8006a8c <__libc_init_array+0x40>)
 8006a5e:	4c0c      	ldr	r4, [pc, #48]	; (8006a90 <__libc_init_array+0x44>)
 8006a60:	f004 fd00 	bl	800b464 <_init>
 8006a64:	1b64      	subs	r4, r4, r5
 8006a66:	10a4      	asrs	r4, r4, #2
 8006a68:	2600      	movs	r6, #0
 8006a6a:	42a6      	cmp	r6, r4
 8006a6c:	d105      	bne.n	8006a7a <__libc_init_array+0x2e>
 8006a6e:	bd70      	pop	{r4, r5, r6, pc}
 8006a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a74:	4798      	blx	r3
 8006a76:	3601      	adds	r6, #1
 8006a78:	e7ee      	b.n	8006a58 <__libc_init_array+0xc>
 8006a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7e:	4798      	blx	r3
 8006a80:	3601      	adds	r6, #1
 8006a82:	e7f2      	b.n	8006a6a <__libc_init_array+0x1e>
 8006a84:	0800b9ec 	.word	0x0800b9ec
 8006a88:	0800b9ec 	.word	0x0800b9ec
 8006a8c:	0800b9ec 	.word	0x0800b9ec
 8006a90:	0800b9f0 	.word	0x0800b9f0

08006a94 <memset>:
 8006a94:	4402      	add	r2, r0
 8006a96:	4603      	mov	r3, r0
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d100      	bne.n	8006a9e <memset+0xa>
 8006a9c:	4770      	bx	lr
 8006a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006aa2:	e7f9      	b.n	8006a98 <memset+0x4>

08006aa4 <__cvt>:
 8006aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa8:	ec55 4b10 	vmov	r4, r5, d0
 8006aac:	2d00      	cmp	r5, #0
 8006aae:	460e      	mov	r6, r1
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	462b      	mov	r3, r5
 8006ab4:	bfbb      	ittet	lt
 8006ab6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006aba:	461d      	movlt	r5, r3
 8006abc:	2300      	movge	r3, #0
 8006abe:	232d      	movlt	r3, #45	; 0x2d
 8006ac0:	700b      	strb	r3, [r1, #0]
 8006ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ac4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ac8:	4691      	mov	r9, r2
 8006aca:	f023 0820 	bic.w	r8, r3, #32
 8006ace:	bfbc      	itt	lt
 8006ad0:	4622      	movlt	r2, r4
 8006ad2:	4614      	movlt	r4, r2
 8006ad4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ad8:	d005      	beq.n	8006ae6 <__cvt+0x42>
 8006ada:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ade:	d100      	bne.n	8006ae2 <__cvt+0x3e>
 8006ae0:	3601      	adds	r6, #1
 8006ae2:	2102      	movs	r1, #2
 8006ae4:	e000      	b.n	8006ae8 <__cvt+0x44>
 8006ae6:	2103      	movs	r1, #3
 8006ae8:	ab03      	add	r3, sp, #12
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	ab02      	add	r3, sp, #8
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	ec45 4b10 	vmov	d0, r4, r5
 8006af4:	4653      	mov	r3, sl
 8006af6:	4632      	mov	r2, r6
 8006af8:	f001 fee2 	bl	80088c0 <_dtoa_r>
 8006afc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b00:	4607      	mov	r7, r0
 8006b02:	d102      	bne.n	8006b0a <__cvt+0x66>
 8006b04:	f019 0f01 	tst.w	r9, #1
 8006b08:	d022      	beq.n	8006b50 <__cvt+0xac>
 8006b0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b0e:	eb07 0906 	add.w	r9, r7, r6
 8006b12:	d110      	bne.n	8006b36 <__cvt+0x92>
 8006b14:	783b      	ldrb	r3, [r7, #0]
 8006b16:	2b30      	cmp	r3, #48	; 0x30
 8006b18:	d10a      	bne.n	8006b30 <__cvt+0x8c>
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4629      	mov	r1, r5
 8006b22:	f7f9 ffd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b26:	b918      	cbnz	r0, 8006b30 <__cvt+0x8c>
 8006b28:	f1c6 0601 	rsb	r6, r6, #1
 8006b2c:	f8ca 6000 	str.w	r6, [sl]
 8006b30:	f8da 3000 	ldr.w	r3, [sl]
 8006b34:	4499      	add	r9, r3
 8006b36:	2200      	movs	r2, #0
 8006b38:	2300      	movs	r3, #0
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	f7f9 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b42:	b108      	cbz	r0, 8006b48 <__cvt+0xa4>
 8006b44:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b48:	2230      	movs	r2, #48	; 0x30
 8006b4a:	9b03      	ldr	r3, [sp, #12]
 8006b4c:	454b      	cmp	r3, r9
 8006b4e:	d307      	bcc.n	8006b60 <__cvt+0xbc>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b54:	1bdb      	subs	r3, r3, r7
 8006b56:	4638      	mov	r0, r7
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	b004      	add	sp, #16
 8006b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b60:	1c59      	adds	r1, r3, #1
 8006b62:	9103      	str	r1, [sp, #12]
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	e7f0      	b.n	8006b4a <__cvt+0xa6>

08006b68 <__exponent>:
 8006b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	bfb8      	it	lt
 8006b70:	4249      	neglt	r1, r1
 8006b72:	f803 2b02 	strb.w	r2, [r3], #2
 8006b76:	bfb4      	ite	lt
 8006b78:	222d      	movlt	r2, #45	; 0x2d
 8006b7a:	222b      	movge	r2, #43	; 0x2b
 8006b7c:	2909      	cmp	r1, #9
 8006b7e:	7042      	strb	r2, [r0, #1]
 8006b80:	dd2a      	ble.n	8006bd8 <__exponent+0x70>
 8006b82:	f10d 0407 	add.w	r4, sp, #7
 8006b86:	46a4      	mov	ip, r4
 8006b88:	270a      	movs	r7, #10
 8006b8a:	46a6      	mov	lr, r4
 8006b8c:	460a      	mov	r2, r1
 8006b8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b92:	fb07 1516 	mls	r5, r7, r6, r1
 8006b96:	3530      	adds	r5, #48	; 0x30
 8006b98:	2a63      	cmp	r2, #99	; 0x63
 8006b9a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006b9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	dcf1      	bgt.n	8006b8a <__exponent+0x22>
 8006ba6:	3130      	adds	r1, #48	; 0x30
 8006ba8:	f1ae 0502 	sub.w	r5, lr, #2
 8006bac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006bb0:	1c44      	adds	r4, r0, #1
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4561      	cmp	r1, ip
 8006bb6:	d30a      	bcc.n	8006bce <__exponent+0x66>
 8006bb8:	f10d 0209 	add.w	r2, sp, #9
 8006bbc:	eba2 020e 	sub.w	r2, r2, lr
 8006bc0:	4565      	cmp	r5, ip
 8006bc2:	bf88      	it	hi
 8006bc4:	2200      	movhi	r2, #0
 8006bc6:	4413      	add	r3, r2
 8006bc8:	1a18      	subs	r0, r3, r0
 8006bca:	b003      	add	sp, #12
 8006bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006bd6:	e7ed      	b.n	8006bb4 <__exponent+0x4c>
 8006bd8:	2330      	movs	r3, #48	; 0x30
 8006bda:	3130      	adds	r1, #48	; 0x30
 8006bdc:	7083      	strb	r3, [r0, #2]
 8006bde:	70c1      	strb	r1, [r0, #3]
 8006be0:	1d03      	adds	r3, r0, #4
 8006be2:	e7f1      	b.n	8006bc8 <__exponent+0x60>

08006be4 <_printf_float>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	ed2d 8b02 	vpush	{d8}
 8006bec:	b08d      	sub	sp, #52	; 0x34
 8006bee:	460c      	mov	r4, r1
 8006bf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	461f      	mov	r7, r3
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	f003 f975 	bl	8009ee8 <_localeconv_r>
 8006bfe:	f8d0 a000 	ldr.w	sl, [r0]
 8006c02:	4650      	mov	r0, sl
 8006c04:	f7f9 fae4 	bl	80001d0 <strlen>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	9305      	str	r3, [sp, #20]
 8006c10:	f8d8 3000 	ldr.w	r3, [r8]
 8006c14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c18:	3307      	adds	r3, #7
 8006c1a:	f023 0307 	bic.w	r3, r3, #7
 8006c1e:	f103 0208 	add.w	r2, r3, #8
 8006c22:	f8c8 2000 	str.w	r2, [r8]
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c36:	9307      	str	r3, [sp, #28]
 8006c38:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c3c:	ee08 0a10 	vmov	s16, r0
 8006c40:	4b9f      	ldr	r3, [pc, #636]	; (8006ec0 <_printf_float+0x2dc>)
 8006c42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c4a:	f7f9 ff6f 	bl	8000b2c <__aeabi_dcmpun>
 8006c4e:	bb88      	cbnz	r0, 8006cb4 <_printf_float+0xd0>
 8006c50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c54:	4b9a      	ldr	r3, [pc, #616]	; (8006ec0 <_printf_float+0x2dc>)
 8006c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c5a:	f7f9 ff49 	bl	8000af0 <__aeabi_dcmple>
 8006c5e:	bb48      	cbnz	r0, 8006cb4 <_printf_float+0xd0>
 8006c60:	2200      	movs	r2, #0
 8006c62:	2300      	movs	r3, #0
 8006c64:	4640      	mov	r0, r8
 8006c66:	4649      	mov	r1, r9
 8006c68:	f7f9 ff38 	bl	8000adc <__aeabi_dcmplt>
 8006c6c:	b110      	cbz	r0, 8006c74 <_printf_float+0x90>
 8006c6e:	232d      	movs	r3, #45	; 0x2d
 8006c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c74:	4b93      	ldr	r3, [pc, #588]	; (8006ec4 <_printf_float+0x2e0>)
 8006c76:	4894      	ldr	r0, [pc, #592]	; (8006ec8 <_printf_float+0x2e4>)
 8006c78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c7c:	bf94      	ite	ls
 8006c7e:	4698      	movls	r8, r3
 8006c80:	4680      	movhi	r8, r0
 8006c82:	2303      	movs	r3, #3
 8006c84:	6123      	str	r3, [r4, #16]
 8006c86:	9b05      	ldr	r3, [sp, #20]
 8006c88:	f023 0204 	bic.w	r2, r3, #4
 8006c8c:	6022      	str	r2, [r4, #0]
 8006c8e:	f04f 0900 	mov.w	r9, #0
 8006c92:	9700      	str	r7, [sp, #0]
 8006c94:	4633      	mov	r3, r6
 8006c96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c98:	4621      	mov	r1, r4
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f000 f9d8 	bl	8007050 <_printf_common>
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	f040 8090 	bne.w	8006dc6 <_printf_float+0x1e2>
 8006ca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006caa:	b00d      	add	sp, #52	; 0x34
 8006cac:	ecbd 8b02 	vpop	{d8}
 8006cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 ff36 	bl	8000b2c <__aeabi_dcmpun>
 8006cc0:	b140      	cbz	r0, 8006cd4 <_printf_float+0xf0>
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bfbc      	itt	lt
 8006cc8:	232d      	movlt	r3, #45	; 0x2d
 8006cca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006cce:	487f      	ldr	r0, [pc, #508]	; (8006ecc <_printf_float+0x2e8>)
 8006cd0:	4b7f      	ldr	r3, [pc, #508]	; (8006ed0 <_printf_float+0x2ec>)
 8006cd2:	e7d1      	b.n	8006c78 <_printf_float+0x94>
 8006cd4:	6863      	ldr	r3, [r4, #4]
 8006cd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006cda:	9206      	str	r2, [sp, #24]
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	d13f      	bne.n	8006d60 <_printf_float+0x17c>
 8006ce0:	2306      	movs	r3, #6
 8006ce2:	6063      	str	r3, [r4, #4]
 8006ce4:	9b05      	ldr	r3, [sp, #20]
 8006ce6:	6861      	ldr	r1, [r4, #4]
 8006ce8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006cec:	2300      	movs	r3, #0
 8006cee:	9303      	str	r3, [sp, #12]
 8006cf0:	ab0a      	add	r3, sp, #40	; 0x28
 8006cf2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006cf6:	ab09      	add	r3, sp, #36	; 0x24
 8006cf8:	ec49 8b10 	vmov	d0, r8, r9
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	6022      	str	r2, [r4, #0]
 8006d00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d04:	4628      	mov	r0, r5
 8006d06:	f7ff fecd 	bl	8006aa4 <__cvt>
 8006d0a:	9b06      	ldr	r3, [sp, #24]
 8006d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d0e:	2b47      	cmp	r3, #71	; 0x47
 8006d10:	4680      	mov	r8, r0
 8006d12:	d108      	bne.n	8006d26 <_printf_float+0x142>
 8006d14:	1cc8      	adds	r0, r1, #3
 8006d16:	db02      	blt.n	8006d1e <_printf_float+0x13a>
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	4299      	cmp	r1, r3
 8006d1c:	dd41      	ble.n	8006da2 <_printf_float+0x1be>
 8006d1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d22:	fa5f fb8b 	uxtb.w	fp, fp
 8006d26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d2a:	d820      	bhi.n	8006d6e <_printf_float+0x18a>
 8006d2c:	3901      	subs	r1, #1
 8006d2e:	465a      	mov	r2, fp
 8006d30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d34:	9109      	str	r1, [sp, #36]	; 0x24
 8006d36:	f7ff ff17 	bl	8006b68 <__exponent>
 8006d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d3c:	1813      	adds	r3, r2, r0
 8006d3e:	2a01      	cmp	r2, #1
 8006d40:	4681      	mov	r9, r0
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	dc02      	bgt.n	8006d4c <_printf_float+0x168>
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	07d2      	lsls	r2, r2, #31
 8006d4a:	d501      	bpl.n	8006d50 <_printf_float+0x16c>
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	6123      	str	r3, [r4, #16]
 8006d50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d09c      	beq.n	8006c92 <_printf_float+0xae>
 8006d58:	232d      	movs	r3, #45	; 0x2d
 8006d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d5e:	e798      	b.n	8006c92 <_printf_float+0xae>
 8006d60:	9a06      	ldr	r2, [sp, #24]
 8006d62:	2a47      	cmp	r2, #71	; 0x47
 8006d64:	d1be      	bne.n	8006ce4 <_printf_float+0x100>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1bc      	bne.n	8006ce4 <_printf_float+0x100>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e7b9      	b.n	8006ce2 <_printf_float+0xfe>
 8006d6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d72:	d118      	bne.n	8006da6 <_printf_float+0x1c2>
 8006d74:	2900      	cmp	r1, #0
 8006d76:	6863      	ldr	r3, [r4, #4]
 8006d78:	dd0b      	ble.n	8006d92 <_printf_float+0x1ae>
 8006d7a:	6121      	str	r1, [r4, #16]
 8006d7c:	b913      	cbnz	r3, 8006d84 <_printf_float+0x1a0>
 8006d7e:	6822      	ldr	r2, [r4, #0]
 8006d80:	07d0      	lsls	r0, r2, #31
 8006d82:	d502      	bpl.n	8006d8a <_printf_float+0x1a6>
 8006d84:	3301      	adds	r3, #1
 8006d86:	440b      	add	r3, r1
 8006d88:	6123      	str	r3, [r4, #16]
 8006d8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d8c:	f04f 0900 	mov.w	r9, #0
 8006d90:	e7de      	b.n	8006d50 <_printf_float+0x16c>
 8006d92:	b913      	cbnz	r3, 8006d9a <_printf_float+0x1b6>
 8006d94:	6822      	ldr	r2, [r4, #0]
 8006d96:	07d2      	lsls	r2, r2, #31
 8006d98:	d501      	bpl.n	8006d9e <_printf_float+0x1ba>
 8006d9a:	3302      	adds	r3, #2
 8006d9c:	e7f4      	b.n	8006d88 <_printf_float+0x1a4>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e7f2      	b.n	8006d88 <_printf_float+0x1a4>
 8006da2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da8:	4299      	cmp	r1, r3
 8006daa:	db05      	blt.n	8006db8 <_printf_float+0x1d4>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	6121      	str	r1, [r4, #16]
 8006db0:	07d8      	lsls	r0, r3, #31
 8006db2:	d5ea      	bpl.n	8006d8a <_printf_float+0x1a6>
 8006db4:	1c4b      	adds	r3, r1, #1
 8006db6:	e7e7      	b.n	8006d88 <_printf_float+0x1a4>
 8006db8:	2900      	cmp	r1, #0
 8006dba:	bfd4      	ite	le
 8006dbc:	f1c1 0202 	rsble	r2, r1, #2
 8006dc0:	2201      	movgt	r2, #1
 8006dc2:	4413      	add	r3, r2
 8006dc4:	e7e0      	b.n	8006d88 <_printf_float+0x1a4>
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	055a      	lsls	r2, r3, #21
 8006dca:	d407      	bmi.n	8006ddc <_printf_float+0x1f8>
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	4642      	mov	r2, r8
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	d12c      	bne.n	8006e34 <_printf_float+0x250>
 8006dda:	e764      	b.n	8006ca6 <_printf_float+0xc2>
 8006ddc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006de0:	f240 80e0 	bls.w	8006fa4 <_printf_float+0x3c0>
 8006de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006de8:	2200      	movs	r2, #0
 8006dea:	2300      	movs	r3, #0
 8006dec:	f7f9 fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	d034      	beq.n	8006e5e <_printf_float+0x27a>
 8006df4:	4a37      	ldr	r2, [pc, #220]	; (8006ed4 <_printf_float+0x2f0>)
 8006df6:	2301      	movs	r3, #1
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	47b8      	blx	r7
 8006dfe:	3001      	adds	r0, #1
 8006e00:	f43f af51 	beq.w	8006ca6 <_printf_float+0xc2>
 8006e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	db02      	blt.n	8006e12 <_printf_float+0x22e>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	07d8      	lsls	r0, r3, #31
 8006e10:	d510      	bpl.n	8006e34 <_printf_float+0x250>
 8006e12:	ee18 3a10 	vmov	r3, s16
 8006e16:	4652      	mov	r2, sl
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af41 	beq.w	8006ca6 <_printf_float+0xc2>
 8006e24:	f04f 0800 	mov.w	r8, #0
 8006e28:	f104 091a 	add.w	r9, r4, #26
 8006e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	4543      	cmp	r3, r8
 8006e32:	dc09      	bgt.n	8006e48 <_printf_float+0x264>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	079b      	lsls	r3, r3, #30
 8006e38:	f100 8105 	bmi.w	8007046 <_printf_float+0x462>
 8006e3c:	68e0      	ldr	r0, [r4, #12]
 8006e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e40:	4298      	cmp	r0, r3
 8006e42:	bfb8      	it	lt
 8006e44:	4618      	movlt	r0, r3
 8006e46:	e730      	b.n	8006caa <_printf_float+0xc6>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	464a      	mov	r2, r9
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b8      	blx	r7
 8006e52:	3001      	adds	r0, #1
 8006e54:	f43f af27 	beq.w	8006ca6 <_printf_float+0xc2>
 8006e58:	f108 0801 	add.w	r8, r8, #1
 8006e5c:	e7e6      	b.n	8006e2c <_printf_float+0x248>
 8006e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	dc39      	bgt.n	8006ed8 <_printf_float+0x2f4>
 8006e64:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <_printf_float+0x2f0>)
 8006e66:	2301      	movs	r3, #1
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f43f af19 	beq.w	8006ca6 <_printf_float+0xc2>
 8006e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d102      	bne.n	8006e82 <_printf_float+0x29e>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	07d9      	lsls	r1, r3, #31
 8006e80:	d5d8      	bpl.n	8006e34 <_printf_float+0x250>
 8006e82:	ee18 3a10 	vmov	r3, s16
 8006e86:	4652      	mov	r2, sl
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f43f af09 	beq.w	8006ca6 <_printf_float+0xc2>
 8006e94:	f04f 0900 	mov.w	r9, #0
 8006e98:	f104 0a1a 	add.w	sl, r4, #26
 8006e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e9e:	425b      	negs	r3, r3
 8006ea0:	454b      	cmp	r3, r9
 8006ea2:	dc01      	bgt.n	8006ea8 <_printf_float+0x2c4>
 8006ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea6:	e792      	b.n	8006dce <_printf_float+0x1ea>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	4652      	mov	r2, sl
 8006eac:	4631      	mov	r1, r6
 8006eae:	4628      	mov	r0, r5
 8006eb0:	47b8      	blx	r7
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	f43f aef7 	beq.w	8006ca6 <_printf_float+0xc2>
 8006eb8:	f109 0901 	add.w	r9, r9, #1
 8006ebc:	e7ee      	b.n	8006e9c <_printf_float+0x2b8>
 8006ebe:	bf00      	nop
 8006ec0:	7fefffff 	.word	0x7fefffff
 8006ec4:	0800b538 	.word	0x0800b538
 8006ec8:	0800b53c 	.word	0x0800b53c
 8006ecc:	0800b544 	.word	0x0800b544
 8006ed0:	0800b540 	.word	0x0800b540
 8006ed4:	0800b548 	.word	0x0800b548
 8006ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006edc:	429a      	cmp	r2, r3
 8006ede:	bfa8      	it	ge
 8006ee0:	461a      	movge	r2, r3
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	4691      	mov	r9, r2
 8006ee6:	dc37      	bgt.n	8006f58 <_printf_float+0x374>
 8006ee8:	f04f 0b00 	mov.w	fp, #0
 8006eec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ef0:	f104 021a 	add.w	r2, r4, #26
 8006ef4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ef6:	9305      	str	r3, [sp, #20]
 8006ef8:	eba3 0309 	sub.w	r3, r3, r9
 8006efc:	455b      	cmp	r3, fp
 8006efe:	dc33      	bgt.n	8006f68 <_printf_float+0x384>
 8006f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f04:	429a      	cmp	r2, r3
 8006f06:	db3b      	blt.n	8006f80 <_printf_float+0x39c>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	07da      	lsls	r2, r3, #31
 8006f0c:	d438      	bmi.n	8006f80 <_printf_float+0x39c>
 8006f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f10:	9a05      	ldr	r2, [sp, #20]
 8006f12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f14:	1a9a      	subs	r2, r3, r2
 8006f16:	eba3 0901 	sub.w	r9, r3, r1
 8006f1a:	4591      	cmp	r9, r2
 8006f1c:	bfa8      	it	ge
 8006f1e:	4691      	movge	r9, r2
 8006f20:	f1b9 0f00 	cmp.w	r9, #0
 8006f24:	dc35      	bgt.n	8006f92 <_printf_float+0x3ae>
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f2e:	f104 0a1a 	add.w	sl, r4, #26
 8006f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f36:	1a9b      	subs	r3, r3, r2
 8006f38:	eba3 0309 	sub.w	r3, r3, r9
 8006f3c:	4543      	cmp	r3, r8
 8006f3e:	f77f af79 	ble.w	8006e34 <_printf_float+0x250>
 8006f42:	2301      	movs	r3, #1
 8006f44:	4652      	mov	r2, sl
 8006f46:	4631      	mov	r1, r6
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b8      	blx	r7
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	f43f aeaa 	beq.w	8006ca6 <_printf_float+0xc2>
 8006f52:	f108 0801 	add.w	r8, r8, #1
 8006f56:	e7ec      	b.n	8006f32 <_printf_float+0x34e>
 8006f58:	4613      	mov	r3, r2
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4642      	mov	r2, r8
 8006f5e:	4628      	mov	r0, r5
 8006f60:	47b8      	blx	r7
 8006f62:	3001      	adds	r0, #1
 8006f64:	d1c0      	bne.n	8006ee8 <_printf_float+0x304>
 8006f66:	e69e      	b.n	8006ca6 <_printf_float+0xc2>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	9205      	str	r2, [sp, #20]
 8006f70:	47b8      	blx	r7
 8006f72:	3001      	adds	r0, #1
 8006f74:	f43f ae97 	beq.w	8006ca6 <_printf_float+0xc2>
 8006f78:	9a05      	ldr	r2, [sp, #20]
 8006f7a:	f10b 0b01 	add.w	fp, fp, #1
 8006f7e:	e7b9      	b.n	8006ef4 <_printf_float+0x310>
 8006f80:	ee18 3a10 	vmov	r3, s16
 8006f84:	4652      	mov	r2, sl
 8006f86:	4631      	mov	r1, r6
 8006f88:	4628      	mov	r0, r5
 8006f8a:	47b8      	blx	r7
 8006f8c:	3001      	adds	r0, #1
 8006f8e:	d1be      	bne.n	8006f0e <_printf_float+0x32a>
 8006f90:	e689      	b.n	8006ca6 <_printf_float+0xc2>
 8006f92:	9a05      	ldr	r2, [sp, #20]
 8006f94:	464b      	mov	r3, r9
 8006f96:	4442      	add	r2, r8
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	47b8      	blx	r7
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d1c1      	bne.n	8006f26 <_printf_float+0x342>
 8006fa2:	e680      	b.n	8006ca6 <_printf_float+0xc2>
 8006fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fa6:	2a01      	cmp	r2, #1
 8006fa8:	dc01      	bgt.n	8006fae <_printf_float+0x3ca>
 8006faa:	07db      	lsls	r3, r3, #31
 8006fac:	d538      	bpl.n	8007020 <_printf_float+0x43c>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b8      	blx	r7
 8006fb8:	3001      	adds	r0, #1
 8006fba:	f43f ae74 	beq.w	8006ca6 <_printf_float+0xc2>
 8006fbe:	ee18 3a10 	vmov	r3, s16
 8006fc2:	4652      	mov	r2, sl
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	47b8      	blx	r7
 8006fca:	3001      	adds	r0, #1
 8006fcc:	f43f ae6b 	beq.w	8006ca6 <_printf_float+0xc2>
 8006fd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f7f9 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fdc:	b9d8      	cbnz	r0, 8007016 <_printf_float+0x432>
 8006fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe0:	f108 0201 	add.w	r2, r8, #1
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	d10e      	bne.n	800700e <_printf_float+0x42a>
 8006ff0:	e659      	b.n	8006ca6 <_printf_float+0xc2>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f43f ae52 	beq.w	8006ca6 <_printf_float+0xc2>
 8007002:	f108 0801 	add.w	r8, r8, #1
 8007006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007008:	3b01      	subs	r3, #1
 800700a:	4543      	cmp	r3, r8
 800700c:	dcf1      	bgt.n	8006ff2 <_printf_float+0x40e>
 800700e:	464b      	mov	r3, r9
 8007010:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007014:	e6dc      	b.n	8006dd0 <_printf_float+0x1ec>
 8007016:	f04f 0800 	mov.w	r8, #0
 800701a:	f104 0a1a 	add.w	sl, r4, #26
 800701e:	e7f2      	b.n	8007006 <_printf_float+0x422>
 8007020:	2301      	movs	r3, #1
 8007022:	4642      	mov	r2, r8
 8007024:	e7df      	b.n	8006fe6 <_printf_float+0x402>
 8007026:	2301      	movs	r3, #1
 8007028:	464a      	mov	r2, r9
 800702a:	4631      	mov	r1, r6
 800702c:	4628      	mov	r0, r5
 800702e:	47b8      	blx	r7
 8007030:	3001      	adds	r0, #1
 8007032:	f43f ae38 	beq.w	8006ca6 <_printf_float+0xc2>
 8007036:	f108 0801 	add.w	r8, r8, #1
 800703a:	68e3      	ldr	r3, [r4, #12]
 800703c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800703e:	1a5b      	subs	r3, r3, r1
 8007040:	4543      	cmp	r3, r8
 8007042:	dcf0      	bgt.n	8007026 <_printf_float+0x442>
 8007044:	e6fa      	b.n	8006e3c <_printf_float+0x258>
 8007046:	f04f 0800 	mov.w	r8, #0
 800704a:	f104 0919 	add.w	r9, r4, #25
 800704e:	e7f4      	b.n	800703a <_printf_float+0x456>

08007050 <_printf_common>:
 8007050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	4616      	mov	r6, r2
 8007056:	4699      	mov	r9, r3
 8007058:	688a      	ldr	r2, [r1, #8]
 800705a:	690b      	ldr	r3, [r1, #16]
 800705c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007060:	4293      	cmp	r3, r2
 8007062:	bfb8      	it	lt
 8007064:	4613      	movlt	r3, r2
 8007066:	6033      	str	r3, [r6, #0]
 8007068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800706c:	4607      	mov	r7, r0
 800706e:	460c      	mov	r4, r1
 8007070:	b10a      	cbz	r2, 8007076 <_printf_common+0x26>
 8007072:	3301      	adds	r3, #1
 8007074:	6033      	str	r3, [r6, #0]
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	0699      	lsls	r1, r3, #26
 800707a:	bf42      	ittt	mi
 800707c:	6833      	ldrmi	r3, [r6, #0]
 800707e:	3302      	addmi	r3, #2
 8007080:	6033      	strmi	r3, [r6, #0]
 8007082:	6825      	ldr	r5, [r4, #0]
 8007084:	f015 0506 	ands.w	r5, r5, #6
 8007088:	d106      	bne.n	8007098 <_printf_common+0x48>
 800708a:	f104 0a19 	add.w	sl, r4, #25
 800708e:	68e3      	ldr	r3, [r4, #12]
 8007090:	6832      	ldr	r2, [r6, #0]
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	42ab      	cmp	r3, r5
 8007096:	dc26      	bgt.n	80070e6 <_printf_common+0x96>
 8007098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800709c:	1e13      	subs	r3, r2, #0
 800709e:	6822      	ldr	r2, [r4, #0]
 80070a0:	bf18      	it	ne
 80070a2:	2301      	movne	r3, #1
 80070a4:	0692      	lsls	r2, r2, #26
 80070a6:	d42b      	bmi.n	8007100 <_printf_common+0xb0>
 80070a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070ac:	4649      	mov	r1, r9
 80070ae:	4638      	mov	r0, r7
 80070b0:	47c0      	blx	r8
 80070b2:	3001      	adds	r0, #1
 80070b4:	d01e      	beq.n	80070f4 <_printf_common+0xa4>
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	68e5      	ldr	r5, [r4, #12]
 80070ba:	6832      	ldr	r2, [r6, #0]
 80070bc:	f003 0306 	and.w	r3, r3, #6
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	bf08      	it	eq
 80070c4:	1aad      	subeq	r5, r5, r2
 80070c6:	68a3      	ldr	r3, [r4, #8]
 80070c8:	6922      	ldr	r2, [r4, #16]
 80070ca:	bf0c      	ite	eq
 80070cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070d0:	2500      	movne	r5, #0
 80070d2:	4293      	cmp	r3, r2
 80070d4:	bfc4      	itt	gt
 80070d6:	1a9b      	subgt	r3, r3, r2
 80070d8:	18ed      	addgt	r5, r5, r3
 80070da:	2600      	movs	r6, #0
 80070dc:	341a      	adds	r4, #26
 80070de:	42b5      	cmp	r5, r6
 80070e0:	d11a      	bne.n	8007118 <_printf_common+0xc8>
 80070e2:	2000      	movs	r0, #0
 80070e4:	e008      	b.n	80070f8 <_printf_common+0xa8>
 80070e6:	2301      	movs	r3, #1
 80070e8:	4652      	mov	r2, sl
 80070ea:	4649      	mov	r1, r9
 80070ec:	4638      	mov	r0, r7
 80070ee:	47c0      	blx	r8
 80070f0:	3001      	adds	r0, #1
 80070f2:	d103      	bne.n	80070fc <_printf_common+0xac>
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fc:	3501      	adds	r5, #1
 80070fe:	e7c6      	b.n	800708e <_printf_common+0x3e>
 8007100:	18e1      	adds	r1, r4, r3
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	2030      	movs	r0, #48	; 0x30
 8007106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800710a:	4422      	add	r2, r4
 800710c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007114:	3302      	adds	r3, #2
 8007116:	e7c7      	b.n	80070a8 <_printf_common+0x58>
 8007118:	2301      	movs	r3, #1
 800711a:	4622      	mov	r2, r4
 800711c:	4649      	mov	r1, r9
 800711e:	4638      	mov	r0, r7
 8007120:	47c0      	blx	r8
 8007122:	3001      	adds	r0, #1
 8007124:	d0e6      	beq.n	80070f4 <_printf_common+0xa4>
 8007126:	3601      	adds	r6, #1
 8007128:	e7d9      	b.n	80070de <_printf_common+0x8e>
	...

0800712c <_printf_i>:
 800712c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007130:	7e0f      	ldrb	r7, [r1, #24]
 8007132:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007134:	2f78      	cmp	r7, #120	; 0x78
 8007136:	4691      	mov	r9, r2
 8007138:	4680      	mov	r8, r0
 800713a:	460c      	mov	r4, r1
 800713c:	469a      	mov	sl, r3
 800713e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007142:	d807      	bhi.n	8007154 <_printf_i+0x28>
 8007144:	2f62      	cmp	r7, #98	; 0x62
 8007146:	d80a      	bhi.n	800715e <_printf_i+0x32>
 8007148:	2f00      	cmp	r7, #0
 800714a:	f000 80d8 	beq.w	80072fe <_printf_i+0x1d2>
 800714e:	2f58      	cmp	r7, #88	; 0x58
 8007150:	f000 80a3 	beq.w	800729a <_printf_i+0x16e>
 8007154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800715c:	e03a      	b.n	80071d4 <_printf_i+0xa8>
 800715e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007162:	2b15      	cmp	r3, #21
 8007164:	d8f6      	bhi.n	8007154 <_printf_i+0x28>
 8007166:	a101      	add	r1, pc, #4	; (adr r1, 800716c <_printf_i+0x40>)
 8007168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800716c:	080071c5 	.word	0x080071c5
 8007170:	080071d9 	.word	0x080071d9
 8007174:	08007155 	.word	0x08007155
 8007178:	08007155 	.word	0x08007155
 800717c:	08007155 	.word	0x08007155
 8007180:	08007155 	.word	0x08007155
 8007184:	080071d9 	.word	0x080071d9
 8007188:	08007155 	.word	0x08007155
 800718c:	08007155 	.word	0x08007155
 8007190:	08007155 	.word	0x08007155
 8007194:	08007155 	.word	0x08007155
 8007198:	080072e5 	.word	0x080072e5
 800719c:	08007209 	.word	0x08007209
 80071a0:	080072c7 	.word	0x080072c7
 80071a4:	08007155 	.word	0x08007155
 80071a8:	08007155 	.word	0x08007155
 80071ac:	08007307 	.word	0x08007307
 80071b0:	08007155 	.word	0x08007155
 80071b4:	08007209 	.word	0x08007209
 80071b8:	08007155 	.word	0x08007155
 80071bc:	08007155 	.word	0x08007155
 80071c0:	080072cf 	.word	0x080072cf
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	1d1a      	adds	r2, r3, #4
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	602a      	str	r2, [r5, #0]
 80071cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071d4:	2301      	movs	r3, #1
 80071d6:	e0a3      	b.n	8007320 <_printf_i+0x1f4>
 80071d8:	6820      	ldr	r0, [r4, #0]
 80071da:	6829      	ldr	r1, [r5, #0]
 80071dc:	0606      	lsls	r6, r0, #24
 80071de:	f101 0304 	add.w	r3, r1, #4
 80071e2:	d50a      	bpl.n	80071fa <_printf_i+0xce>
 80071e4:	680e      	ldr	r6, [r1, #0]
 80071e6:	602b      	str	r3, [r5, #0]
 80071e8:	2e00      	cmp	r6, #0
 80071ea:	da03      	bge.n	80071f4 <_printf_i+0xc8>
 80071ec:	232d      	movs	r3, #45	; 0x2d
 80071ee:	4276      	negs	r6, r6
 80071f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f4:	485e      	ldr	r0, [pc, #376]	; (8007370 <_printf_i+0x244>)
 80071f6:	230a      	movs	r3, #10
 80071f8:	e019      	b.n	800722e <_printf_i+0x102>
 80071fa:	680e      	ldr	r6, [r1, #0]
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007202:	bf18      	it	ne
 8007204:	b236      	sxthne	r6, r6
 8007206:	e7ef      	b.n	80071e8 <_printf_i+0xbc>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	6820      	ldr	r0, [r4, #0]
 800720c:	1d19      	adds	r1, r3, #4
 800720e:	6029      	str	r1, [r5, #0]
 8007210:	0601      	lsls	r1, r0, #24
 8007212:	d501      	bpl.n	8007218 <_printf_i+0xec>
 8007214:	681e      	ldr	r6, [r3, #0]
 8007216:	e002      	b.n	800721e <_printf_i+0xf2>
 8007218:	0646      	lsls	r6, r0, #25
 800721a:	d5fb      	bpl.n	8007214 <_printf_i+0xe8>
 800721c:	881e      	ldrh	r6, [r3, #0]
 800721e:	4854      	ldr	r0, [pc, #336]	; (8007370 <_printf_i+0x244>)
 8007220:	2f6f      	cmp	r7, #111	; 0x6f
 8007222:	bf0c      	ite	eq
 8007224:	2308      	moveq	r3, #8
 8007226:	230a      	movne	r3, #10
 8007228:	2100      	movs	r1, #0
 800722a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800722e:	6865      	ldr	r5, [r4, #4]
 8007230:	60a5      	str	r5, [r4, #8]
 8007232:	2d00      	cmp	r5, #0
 8007234:	bfa2      	ittt	ge
 8007236:	6821      	ldrge	r1, [r4, #0]
 8007238:	f021 0104 	bicge.w	r1, r1, #4
 800723c:	6021      	strge	r1, [r4, #0]
 800723e:	b90e      	cbnz	r6, 8007244 <_printf_i+0x118>
 8007240:	2d00      	cmp	r5, #0
 8007242:	d04d      	beq.n	80072e0 <_printf_i+0x1b4>
 8007244:	4615      	mov	r5, r2
 8007246:	fbb6 f1f3 	udiv	r1, r6, r3
 800724a:	fb03 6711 	mls	r7, r3, r1, r6
 800724e:	5dc7      	ldrb	r7, [r0, r7]
 8007250:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007254:	4637      	mov	r7, r6
 8007256:	42bb      	cmp	r3, r7
 8007258:	460e      	mov	r6, r1
 800725a:	d9f4      	bls.n	8007246 <_printf_i+0x11a>
 800725c:	2b08      	cmp	r3, #8
 800725e:	d10b      	bne.n	8007278 <_printf_i+0x14c>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	07de      	lsls	r6, r3, #31
 8007264:	d508      	bpl.n	8007278 <_printf_i+0x14c>
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	6861      	ldr	r1, [r4, #4]
 800726a:	4299      	cmp	r1, r3
 800726c:	bfde      	ittt	le
 800726e:	2330      	movle	r3, #48	; 0x30
 8007270:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007274:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007278:	1b52      	subs	r2, r2, r5
 800727a:	6122      	str	r2, [r4, #16]
 800727c:	f8cd a000 	str.w	sl, [sp]
 8007280:	464b      	mov	r3, r9
 8007282:	aa03      	add	r2, sp, #12
 8007284:	4621      	mov	r1, r4
 8007286:	4640      	mov	r0, r8
 8007288:	f7ff fee2 	bl	8007050 <_printf_common>
 800728c:	3001      	adds	r0, #1
 800728e:	d14c      	bne.n	800732a <_printf_i+0x1fe>
 8007290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007294:	b004      	add	sp, #16
 8007296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729a:	4835      	ldr	r0, [pc, #212]	; (8007370 <_printf_i+0x244>)
 800729c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072a0:	6829      	ldr	r1, [r5, #0]
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80072a8:	6029      	str	r1, [r5, #0]
 80072aa:	061d      	lsls	r5, r3, #24
 80072ac:	d514      	bpl.n	80072d8 <_printf_i+0x1ac>
 80072ae:	07df      	lsls	r7, r3, #31
 80072b0:	bf44      	itt	mi
 80072b2:	f043 0320 	orrmi.w	r3, r3, #32
 80072b6:	6023      	strmi	r3, [r4, #0]
 80072b8:	b91e      	cbnz	r6, 80072c2 <_printf_i+0x196>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	f023 0320 	bic.w	r3, r3, #32
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	2310      	movs	r3, #16
 80072c4:	e7b0      	b.n	8007228 <_printf_i+0xfc>
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	f043 0320 	orr.w	r3, r3, #32
 80072cc:	6023      	str	r3, [r4, #0]
 80072ce:	2378      	movs	r3, #120	; 0x78
 80072d0:	4828      	ldr	r0, [pc, #160]	; (8007374 <_printf_i+0x248>)
 80072d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072d6:	e7e3      	b.n	80072a0 <_printf_i+0x174>
 80072d8:	0659      	lsls	r1, r3, #25
 80072da:	bf48      	it	mi
 80072dc:	b2b6      	uxthmi	r6, r6
 80072de:	e7e6      	b.n	80072ae <_printf_i+0x182>
 80072e0:	4615      	mov	r5, r2
 80072e2:	e7bb      	b.n	800725c <_printf_i+0x130>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	6826      	ldr	r6, [r4, #0]
 80072e8:	6961      	ldr	r1, [r4, #20]
 80072ea:	1d18      	adds	r0, r3, #4
 80072ec:	6028      	str	r0, [r5, #0]
 80072ee:	0635      	lsls	r5, r6, #24
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	d501      	bpl.n	80072f8 <_printf_i+0x1cc>
 80072f4:	6019      	str	r1, [r3, #0]
 80072f6:	e002      	b.n	80072fe <_printf_i+0x1d2>
 80072f8:	0670      	lsls	r0, r6, #25
 80072fa:	d5fb      	bpl.n	80072f4 <_printf_i+0x1c8>
 80072fc:	8019      	strh	r1, [r3, #0]
 80072fe:	2300      	movs	r3, #0
 8007300:	6123      	str	r3, [r4, #16]
 8007302:	4615      	mov	r5, r2
 8007304:	e7ba      	b.n	800727c <_printf_i+0x150>
 8007306:	682b      	ldr	r3, [r5, #0]
 8007308:	1d1a      	adds	r2, r3, #4
 800730a:	602a      	str	r2, [r5, #0]
 800730c:	681d      	ldr	r5, [r3, #0]
 800730e:	6862      	ldr	r2, [r4, #4]
 8007310:	2100      	movs	r1, #0
 8007312:	4628      	mov	r0, r5
 8007314:	f7f8 ff64 	bl	80001e0 <memchr>
 8007318:	b108      	cbz	r0, 800731e <_printf_i+0x1f2>
 800731a:	1b40      	subs	r0, r0, r5
 800731c:	6060      	str	r0, [r4, #4]
 800731e:	6863      	ldr	r3, [r4, #4]
 8007320:	6123      	str	r3, [r4, #16]
 8007322:	2300      	movs	r3, #0
 8007324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007328:	e7a8      	b.n	800727c <_printf_i+0x150>
 800732a:	6923      	ldr	r3, [r4, #16]
 800732c:	462a      	mov	r2, r5
 800732e:	4649      	mov	r1, r9
 8007330:	4640      	mov	r0, r8
 8007332:	47d0      	blx	sl
 8007334:	3001      	adds	r0, #1
 8007336:	d0ab      	beq.n	8007290 <_printf_i+0x164>
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	079b      	lsls	r3, r3, #30
 800733c:	d413      	bmi.n	8007366 <_printf_i+0x23a>
 800733e:	68e0      	ldr	r0, [r4, #12]
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	4298      	cmp	r0, r3
 8007344:	bfb8      	it	lt
 8007346:	4618      	movlt	r0, r3
 8007348:	e7a4      	b.n	8007294 <_printf_i+0x168>
 800734a:	2301      	movs	r3, #1
 800734c:	4632      	mov	r2, r6
 800734e:	4649      	mov	r1, r9
 8007350:	4640      	mov	r0, r8
 8007352:	47d0      	blx	sl
 8007354:	3001      	adds	r0, #1
 8007356:	d09b      	beq.n	8007290 <_printf_i+0x164>
 8007358:	3501      	adds	r5, #1
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	9903      	ldr	r1, [sp, #12]
 800735e:	1a5b      	subs	r3, r3, r1
 8007360:	42ab      	cmp	r3, r5
 8007362:	dcf2      	bgt.n	800734a <_printf_i+0x21e>
 8007364:	e7eb      	b.n	800733e <_printf_i+0x212>
 8007366:	2500      	movs	r5, #0
 8007368:	f104 0619 	add.w	r6, r4, #25
 800736c:	e7f5      	b.n	800735a <_printf_i+0x22e>
 800736e:	bf00      	nop
 8007370:	0800b54a 	.word	0x0800b54a
 8007374:	0800b55b 	.word	0x0800b55b

08007378 <_scanf_float>:
 8007378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	b087      	sub	sp, #28
 800737e:	4617      	mov	r7, r2
 8007380:	9303      	str	r3, [sp, #12]
 8007382:	688b      	ldr	r3, [r1, #8]
 8007384:	1e5a      	subs	r2, r3, #1
 8007386:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800738a:	bf83      	ittte	hi
 800738c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007390:	195b      	addhi	r3, r3, r5
 8007392:	9302      	strhi	r3, [sp, #8]
 8007394:	2300      	movls	r3, #0
 8007396:	bf86      	itte	hi
 8007398:	f240 135d 	movwhi	r3, #349	; 0x15d
 800739c:	608b      	strhi	r3, [r1, #8]
 800739e:	9302      	strls	r3, [sp, #8]
 80073a0:	680b      	ldr	r3, [r1, #0]
 80073a2:	468b      	mov	fp, r1
 80073a4:	2500      	movs	r5, #0
 80073a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80073aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80073ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80073b2:	4680      	mov	r8, r0
 80073b4:	460c      	mov	r4, r1
 80073b6:	465e      	mov	r6, fp
 80073b8:	46aa      	mov	sl, r5
 80073ba:	46a9      	mov	r9, r5
 80073bc:	9501      	str	r5, [sp, #4]
 80073be:	68a2      	ldr	r2, [r4, #8]
 80073c0:	b152      	cbz	r2, 80073d8 <_scanf_float+0x60>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b4e      	cmp	r3, #78	; 0x4e
 80073c8:	d864      	bhi.n	8007494 <_scanf_float+0x11c>
 80073ca:	2b40      	cmp	r3, #64	; 0x40
 80073cc:	d83c      	bhi.n	8007448 <_scanf_float+0xd0>
 80073ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80073d2:	b2c8      	uxtb	r0, r1
 80073d4:	280e      	cmp	r0, #14
 80073d6:	d93a      	bls.n	800744e <_scanf_float+0xd6>
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	d003      	beq.n	80073e6 <_scanf_float+0x6e>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80073ea:	f1ba 0f01 	cmp.w	sl, #1
 80073ee:	f200 8113 	bhi.w	8007618 <_scanf_float+0x2a0>
 80073f2:	455e      	cmp	r6, fp
 80073f4:	f200 8105 	bhi.w	8007602 <_scanf_float+0x28a>
 80073f8:	2501      	movs	r5, #1
 80073fa:	4628      	mov	r0, r5
 80073fc:	b007      	add	sp, #28
 80073fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007402:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007406:	2a0d      	cmp	r2, #13
 8007408:	d8e6      	bhi.n	80073d8 <_scanf_float+0x60>
 800740a:	a101      	add	r1, pc, #4	; (adr r1, 8007410 <_scanf_float+0x98>)
 800740c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007410:	0800754f 	.word	0x0800754f
 8007414:	080073d9 	.word	0x080073d9
 8007418:	080073d9 	.word	0x080073d9
 800741c:	080073d9 	.word	0x080073d9
 8007420:	080075af 	.word	0x080075af
 8007424:	08007587 	.word	0x08007587
 8007428:	080073d9 	.word	0x080073d9
 800742c:	080073d9 	.word	0x080073d9
 8007430:	0800755d 	.word	0x0800755d
 8007434:	080073d9 	.word	0x080073d9
 8007438:	080073d9 	.word	0x080073d9
 800743c:	080073d9 	.word	0x080073d9
 8007440:	080073d9 	.word	0x080073d9
 8007444:	08007515 	.word	0x08007515
 8007448:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800744c:	e7db      	b.n	8007406 <_scanf_float+0x8e>
 800744e:	290e      	cmp	r1, #14
 8007450:	d8c2      	bhi.n	80073d8 <_scanf_float+0x60>
 8007452:	a001      	add	r0, pc, #4	; (adr r0, 8007458 <_scanf_float+0xe0>)
 8007454:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007458:	08007507 	.word	0x08007507
 800745c:	080073d9 	.word	0x080073d9
 8007460:	08007507 	.word	0x08007507
 8007464:	0800759b 	.word	0x0800759b
 8007468:	080073d9 	.word	0x080073d9
 800746c:	080074b5 	.word	0x080074b5
 8007470:	080074f1 	.word	0x080074f1
 8007474:	080074f1 	.word	0x080074f1
 8007478:	080074f1 	.word	0x080074f1
 800747c:	080074f1 	.word	0x080074f1
 8007480:	080074f1 	.word	0x080074f1
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080074f1 	.word	0x080074f1
 800748c:	080074f1 	.word	0x080074f1
 8007490:	080074f1 	.word	0x080074f1
 8007494:	2b6e      	cmp	r3, #110	; 0x6e
 8007496:	d809      	bhi.n	80074ac <_scanf_float+0x134>
 8007498:	2b60      	cmp	r3, #96	; 0x60
 800749a:	d8b2      	bhi.n	8007402 <_scanf_float+0x8a>
 800749c:	2b54      	cmp	r3, #84	; 0x54
 800749e:	d077      	beq.n	8007590 <_scanf_float+0x218>
 80074a0:	2b59      	cmp	r3, #89	; 0x59
 80074a2:	d199      	bne.n	80073d8 <_scanf_float+0x60>
 80074a4:	2d07      	cmp	r5, #7
 80074a6:	d197      	bne.n	80073d8 <_scanf_float+0x60>
 80074a8:	2508      	movs	r5, #8
 80074aa:	e029      	b.n	8007500 <_scanf_float+0x188>
 80074ac:	2b74      	cmp	r3, #116	; 0x74
 80074ae:	d06f      	beq.n	8007590 <_scanf_float+0x218>
 80074b0:	2b79      	cmp	r3, #121	; 0x79
 80074b2:	e7f6      	b.n	80074a2 <_scanf_float+0x12a>
 80074b4:	6821      	ldr	r1, [r4, #0]
 80074b6:	05c8      	lsls	r0, r1, #23
 80074b8:	d51a      	bpl.n	80074f0 <_scanf_float+0x178>
 80074ba:	9b02      	ldr	r3, [sp, #8]
 80074bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80074c0:	6021      	str	r1, [r4, #0]
 80074c2:	f109 0901 	add.w	r9, r9, #1
 80074c6:	b11b      	cbz	r3, 80074d0 <_scanf_float+0x158>
 80074c8:	3b01      	subs	r3, #1
 80074ca:	3201      	adds	r2, #1
 80074cc:	9302      	str	r3, [sp, #8]
 80074ce:	60a2      	str	r2, [r4, #8]
 80074d0:	68a3      	ldr	r3, [r4, #8]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	60a3      	str	r3, [r4, #8]
 80074d6:	6923      	ldr	r3, [r4, #16]
 80074d8:	3301      	adds	r3, #1
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3b01      	subs	r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	f340 8084 	ble.w	80075f0 <_scanf_float+0x278>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	3301      	adds	r3, #1
 80074ec:	603b      	str	r3, [r7, #0]
 80074ee:	e766      	b.n	80073be <_scanf_float+0x46>
 80074f0:	eb1a 0f05 	cmn.w	sl, r5
 80074f4:	f47f af70 	bne.w	80073d8 <_scanf_float+0x60>
 80074f8:	6822      	ldr	r2, [r4, #0]
 80074fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80074fe:	6022      	str	r2, [r4, #0]
 8007500:	f806 3b01 	strb.w	r3, [r6], #1
 8007504:	e7e4      	b.n	80074d0 <_scanf_float+0x158>
 8007506:	6822      	ldr	r2, [r4, #0]
 8007508:	0610      	lsls	r0, r2, #24
 800750a:	f57f af65 	bpl.w	80073d8 <_scanf_float+0x60>
 800750e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007512:	e7f4      	b.n	80074fe <_scanf_float+0x186>
 8007514:	f1ba 0f00 	cmp.w	sl, #0
 8007518:	d10e      	bne.n	8007538 <_scanf_float+0x1c0>
 800751a:	f1b9 0f00 	cmp.w	r9, #0
 800751e:	d10e      	bne.n	800753e <_scanf_float+0x1c6>
 8007520:	6822      	ldr	r2, [r4, #0]
 8007522:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007526:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800752a:	d108      	bne.n	800753e <_scanf_float+0x1c6>
 800752c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007530:	6022      	str	r2, [r4, #0]
 8007532:	f04f 0a01 	mov.w	sl, #1
 8007536:	e7e3      	b.n	8007500 <_scanf_float+0x188>
 8007538:	f1ba 0f02 	cmp.w	sl, #2
 800753c:	d055      	beq.n	80075ea <_scanf_float+0x272>
 800753e:	2d01      	cmp	r5, #1
 8007540:	d002      	beq.n	8007548 <_scanf_float+0x1d0>
 8007542:	2d04      	cmp	r5, #4
 8007544:	f47f af48 	bne.w	80073d8 <_scanf_float+0x60>
 8007548:	3501      	adds	r5, #1
 800754a:	b2ed      	uxtb	r5, r5
 800754c:	e7d8      	b.n	8007500 <_scanf_float+0x188>
 800754e:	f1ba 0f01 	cmp.w	sl, #1
 8007552:	f47f af41 	bne.w	80073d8 <_scanf_float+0x60>
 8007556:	f04f 0a02 	mov.w	sl, #2
 800755a:	e7d1      	b.n	8007500 <_scanf_float+0x188>
 800755c:	b97d      	cbnz	r5, 800757e <_scanf_float+0x206>
 800755e:	f1b9 0f00 	cmp.w	r9, #0
 8007562:	f47f af3c 	bne.w	80073de <_scanf_float+0x66>
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800756c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007570:	f47f af39 	bne.w	80073e6 <_scanf_float+0x6e>
 8007574:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007578:	6022      	str	r2, [r4, #0]
 800757a:	2501      	movs	r5, #1
 800757c:	e7c0      	b.n	8007500 <_scanf_float+0x188>
 800757e:	2d03      	cmp	r5, #3
 8007580:	d0e2      	beq.n	8007548 <_scanf_float+0x1d0>
 8007582:	2d05      	cmp	r5, #5
 8007584:	e7de      	b.n	8007544 <_scanf_float+0x1cc>
 8007586:	2d02      	cmp	r5, #2
 8007588:	f47f af26 	bne.w	80073d8 <_scanf_float+0x60>
 800758c:	2503      	movs	r5, #3
 800758e:	e7b7      	b.n	8007500 <_scanf_float+0x188>
 8007590:	2d06      	cmp	r5, #6
 8007592:	f47f af21 	bne.w	80073d8 <_scanf_float+0x60>
 8007596:	2507      	movs	r5, #7
 8007598:	e7b2      	b.n	8007500 <_scanf_float+0x188>
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	0591      	lsls	r1, r2, #22
 800759e:	f57f af1b 	bpl.w	80073d8 <_scanf_float+0x60>
 80075a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80075a6:	6022      	str	r2, [r4, #0]
 80075a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80075ac:	e7a8      	b.n	8007500 <_scanf_float+0x188>
 80075ae:	6822      	ldr	r2, [r4, #0]
 80075b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80075b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80075b8:	d006      	beq.n	80075c8 <_scanf_float+0x250>
 80075ba:	0550      	lsls	r0, r2, #21
 80075bc:	f57f af0c 	bpl.w	80073d8 <_scanf_float+0x60>
 80075c0:	f1b9 0f00 	cmp.w	r9, #0
 80075c4:	f43f af0f 	beq.w	80073e6 <_scanf_float+0x6e>
 80075c8:	0591      	lsls	r1, r2, #22
 80075ca:	bf58      	it	pl
 80075cc:	9901      	ldrpl	r1, [sp, #4]
 80075ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075d2:	bf58      	it	pl
 80075d4:	eba9 0101 	subpl.w	r1, r9, r1
 80075d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80075dc:	bf58      	it	pl
 80075de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80075e2:	6022      	str	r2, [r4, #0]
 80075e4:	f04f 0900 	mov.w	r9, #0
 80075e8:	e78a      	b.n	8007500 <_scanf_float+0x188>
 80075ea:	f04f 0a03 	mov.w	sl, #3
 80075ee:	e787      	b.n	8007500 <_scanf_float+0x188>
 80075f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075f4:	4639      	mov	r1, r7
 80075f6:	4640      	mov	r0, r8
 80075f8:	4798      	blx	r3
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f43f aedf 	beq.w	80073be <_scanf_float+0x46>
 8007600:	e6ea      	b.n	80073d8 <_scanf_float+0x60>
 8007602:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007606:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800760a:	463a      	mov	r2, r7
 800760c:	4640      	mov	r0, r8
 800760e:	4798      	blx	r3
 8007610:	6923      	ldr	r3, [r4, #16]
 8007612:	3b01      	subs	r3, #1
 8007614:	6123      	str	r3, [r4, #16]
 8007616:	e6ec      	b.n	80073f2 <_scanf_float+0x7a>
 8007618:	1e6b      	subs	r3, r5, #1
 800761a:	2b06      	cmp	r3, #6
 800761c:	d825      	bhi.n	800766a <_scanf_float+0x2f2>
 800761e:	2d02      	cmp	r5, #2
 8007620:	d836      	bhi.n	8007690 <_scanf_float+0x318>
 8007622:	455e      	cmp	r6, fp
 8007624:	f67f aee8 	bls.w	80073f8 <_scanf_float+0x80>
 8007628:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800762c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007630:	463a      	mov	r2, r7
 8007632:	4640      	mov	r0, r8
 8007634:	4798      	blx	r3
 8007636:	6923      	ldr	r3, [r4, #16]
 8007638:	3b01      	subs	r3, #1
 800763a:	6123      	str	r3, [r4, #16]
 800763c:	e7f1      	b.n	8007622 <_scanf_float+0x2aa>
 800763e:	9802      	ldr	r0, [sp, #8]
 8007640:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007644:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007648:	9002      	str	r0, [sp, #8]
 800764a:	463a      	mov	r2, r7
 800764c:	4640      	mov	r0, r8
 800764e:	4798      	blx	r3
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	3b01      	subs	r3, #1
 8007654:	6123      	str	r3, [r4, #16]
 8007656:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800765a:	fa5f fa8a 	uxtb.w	sl, sl
 800765e:	f1ba 0f02 	cmp.w	sl, #2
 8007662:	d1ec      	bne.n	800763e <_scanf_float+0x2c6>
 8007664:	3d03      	subs	r5, #3
 8007666:	b2ed      	uxtb	r5, r5
 8007668:	1b76      	subs	r6, r6, r5
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	05da      	lsls	r2, r3, #23
 800766e:	d52f      	bpl.n	80076d0 <_scanf_float+0x358>
 8007670:	055b      	lsls	r3, r3, #21
 8007672:	d510      	bpl.n	8007696 <_scanf_float+0x31e>
 8007674:	455e      	cmp	r6, fp
 8007676:	f67f aebf 	bls.w	80073f8 <_scanf_float+0x80>
 800767a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800767e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007682:	463a      	mov	r2, r7
 8007684:	4640      	mov	r0, r8
 8007686:	4798      	blx	r3
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	3b01      	subs	r3, #1
 800768c:	6123      	str	r3, [r4, #16]
 800768e:	e7f1      	b.n	8007674 <_scanf_float+0x2fc>
 8007690:	46aa      	mov	sl, r5
 8007692:	9602      	str	r6, [sp, #8]
 8007694:	e7df      	b.n	8007656 <_scanf_float+0x2de>
 8007696:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800769a:	6923      	ldr	r3, [r4, #16]
 800769c:	2965      	cmp	r1, #101	; 0x65
 800769e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80076a2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80076a6:	6123      	str	r3, [r4, #16]
 80076a8:	d00c      	beq.n	80076c4 <_scanf_float+0x34c>
 80076aa:	2945      	cmp	r1, #69	; 0x45
 80076ac:	d00a      	beq.n	80076c4 <_scanf_float+0x34c>
 80076ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076b2:	463a      	mov	r2, r7
 80076b4:	4640      	mov	r0, r8
 80076b6:	4798      	blx	r3
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80076be:	3b01      	subs	r3, #1
 80076c0:	1eb5      	subs	r5, r6, #2
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076c8:	463a      	mov	r2, r7
 80076ca:	4640      	mov	r0, r8
 80076cc:	4798      	blx	r3
 80076ce:	462e      	mov	r6, r5
 80076d0:	6825      	ldr	r5, [r4, #0]
 80076d2:	f015 0510 	ands.w	r5, r5, #16
 80076d6:	d159      	bne.n	800778c <_scanf_float+0x414>
 80076d8:	7035      	strb	r5, [r6, #0]
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80076e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e4:	d11b      	bne.n	800771e <_scanf_float+0x3a6>
 80076e6:	9b01      	ldr	r3, [sp, #4]
 80076e8:	454b      	cmp	r3, r9
 80076ea:	eba3 0209 	sub.w	r2, r3, r9
 80076ee:	d123      	bne.n	8007738 <_scanf_float+0x3c0>
 80076f0:	2200      	movs	r2, #0
 80076f2:	4659      	mov	r1, fp
 80076f4:	4640      	mov	r0, r8
 80076f6:	f000 ff0d 	bl	8008514 <_strtod_r>
 80076fa:	6822      	ldr	r2, [r4, #0]
 80076fc:	9b03      	ldr	r3, [sp, #12]
 80076fe:	f012 0f02 	tst.w	r2, #2
 8007702:	ec57 6b10 	vmov	r6, r7, d0
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	d021      	beq.n	800774e <_scanf_float+0x3d6>
 800770a:	9903      	ldr	r1, [sp, #12]
 800770c:	1d1a      	adds	r2, r3, #4
 800770e:	600a      	str	r2, [r1, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	e9c3 6700 	strd	r6, r7, [r3]
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	3301      	adds	r3, #1
 800771a:	60e3      	str	r3, [r4, #12]
 800771c:	e66d      	b.n	80073fa <_scanf_float+0x82>
 800771e:	9b04      	ldr	r3, [sp, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0e5      	beq.n	80076f0 <_scanf_float+0x378>
 8007724:	9905      	ldr	r1, [sp, #20]
 8007726:	230a      	movs	r3, #10
 8007728:	462a      	mov	r2, r5
 800772a:	3101      	adds	r1, #1
 800772c:	4640      	mov	r0, r8
 800772e:	f000 ff79 	bl	8008624 <_strtol_r>
 8007732:	9b04      	ldr	r3, [sp, #16]
 8007734:	9e05      	ldr	r6, [sp, #20]
 8007736:	1ac2      	subs	r2, r0, r3
 8007738:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800773c:	429e      	cmp	r6, r3
 800773e:	bf28      	it	cs
 8007740:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007744:	4912      	ldr	r1, [pc, #72]	; (8007790 <_scanf_float+0x418>)
 8007746:	4630      	mov	r0, r6
 8007748:	f000 f8a2 	bl	8007890 <siprintf>
 800774c:	e7d0      	b.n	80076f0 <_scanf_float+0x378>
 800774e:	9903      	ldr	r1, [sp, #12]
 8007750:	f012 0f04 	tst.w	r2, #4
 8007754:	f103 0204 	add.w	r2, r3, #4
 8007758:	600a      	str	r2, [r1, #0]
 800775a:	d1d9      	bne.n	8007710 <_scanf_float+0x398>
 800775c:	f8d3 8000 	ldr.w	r8, [r3]
 8007760:	ee10 2a10 	vmov	r2, s0
 8007764:	ee10 0a10 	vmov	r0, s0
 8007768:	463b      	mov	r3, r7
 800776a:	4639      	mov	r1, r7
 800776c:	f7f9 f9de 	bl	8000b2c <__aeabi_dcmpun>
 8007770:	b128      	cbz	r0, 800777e <_scanf_float+0x406>
 8007772:	4808      	ldr	r0, [pc, #32]	; (8007794 <_scanf_float+0x41c>)
 8007774:	f000 f886 	bl	8007884 <nanf>
 8007778:	ed88 0a00 	vstr	s0, [r8]
 800777c:	e7cb      	b.n	8007716 <_scanf_float+0x39e>
 800777e:	4630      	mov	r0, r6
 8007780:	4639      	mov	r1, r7
 8007782:	f7f9 fa31 	bl	8000be8 <__aeabi_d2f>
 8007786:	f8c8 0000 	str.w	r0, [r8]
 800778a:	e7c4      	b.n	8007716 <_scanf_float+0x39e>
 800778c:	2500      	movs	r5, #0
 800778e:	e634      	b.n	80073fa <_scanf_float+0x82>
 8007790:	0800b56c 	.word	0x0800b56c
 8007794:	0800b9e0 	.word	0x0800b9e0

08007798 <_puts_r>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	460e      	mov	r6, r1
 800779c:	4605      	mov	r5, r0
 800779e:	b118      	cbz	r0, 80077a8 <_puts_r+0x10>
 80077a0:	6983      	ldr	r3, [r0, #24]
 80077a2:	b90b      	cbnz	r3, 80077a8 <_puts_r+0x10>
 80077a4:	f001 ff94 	bl	80096d0 <__sinit>
 80077a8:	69ab      	ldr	r3, [r5, #24]
 80077aa:	68ac      	ldr	r4, [r5, #8]
 80077ac:	b913      	cbnz	r3, 80077b4 <_puts_r+0x1c>
 80077ae:	4628      	mov	r0, r5
 80077b0:	f001 ff8e 	bl	80096d0 <__sinit>
 80077b4:	4b2c      	ldr	r3, [pc, #176]	; (8007868 <_puts_r+0xd0>)
 80077b6:	429c      	cmp	r4, r3
 80077b8:	d120      	bne.n	80077fc <_puts_r+0x64>
 80077ba:	686c      	ldr	r4, [r5, #4]
 80077bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077be:	07db      	lsls	r3, r3, #31
 80077c0:	d405      	bmi.n	80077ce <_puts_r+0x36>
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	0598      	lsls	r0, r3, #22
 80077c6:	d402      	bmi.n	80077ce <_puts_r+0x36>
 80077c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ca:	f002 fb92 	bl	8009ef2 <__retarget_lock_acquire_recursive>
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	0719      	lsls	r1, r3, #28
 80077d2:	d51d      	bpl.n	8007810 <_puts_r+0x78>
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	b1db      	cbz	r3, 8007810 <_puts_r+0x78>
 80077d8:	3e01      	subs	r6, #1
 80077da:	68a3      	ldr	r3, [r4, #8]
 80077dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077e0:	3b01      	subs	r3, #1
 80077e2:	60a3      	str	r3, [r4, #8]
 80077e4:	bb39      	cbnz	r1, 8007836 <_puts_r+0x9e>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	da38      	bge.n	800785c <_puts_r+0xc4>
 80077ea:	4622      	mov	r2, r4
 80077ec:	210a      	movs	r1, #10
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 ff1a 	bl	8008628 <__swbuf_r>
 80077f4:	3001      	adds	r0, #1
 80077f6:	d011      	beq.n	800781c <_puts_r+0x84>
 80077f8:	250a      	movs	r5, #10
 80077fa:	e011      	b.n	8007820 <_puts_r+0x88>
 80077fc:	4b1b      	ldr	r3, [pc, #108]	; (800786c <_puts_r+0xd4>)
 80077fe:	429c      	cmp	r4, r3
 8007800:	d101      	bne.n	8007806 <_puts_r+0x6e>
 8007802:	68ac      	ldr	r4, [r5, #8]
 8007804:	e7da      	b.n	80077bc <_puts_r+0x24>
 8007806:	4b1a      	ldr	r3, [pc, #104]	; (8007870 <_puts_r+0xd8>)
 8007808:	429c      	cmp	r4, r3
 800780a:	bf08      	it	eq
 800780c:	68ec      	ldreq	r4, [r5, #12]
 800780e:	e7d5      	b.n	80077bc <_puts_r+0x24>
 8007810:	4621      	mov	r1, r4
 8007812:	4628      	mov	r0, r5
 8007814:	f000 ff5a 	bl	80086cc <__swsetup_r>
 8007818:	2800      	cmp	r0, #0
 800781a:	d0dd      	beq.n	80077d8 <_puts_r+0x40>
 800781c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007822:	07da      	lsls	r2, r3, #31
 8007824:	d405      	bmi.n	8007832 <_puts_r+0x9a>
 8007826:	89a3      	ldrh	r3, [r4, #12]
 8007828:	059b      	lsls	r3, r3, #22
 800782a:	d402      	bmi.n	8007832 <_puts_r+0x9a>
 800782c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800782e:	f002 fb61 	bl	8009ef4 <__retarget_lock_release_recursive>
 8007832:	4628      	mov	r0, r5
 8007834:	bd70      	pop	{r4, r5, r6, pc}
 8007836:	2b00      	cmp	r3, #0
 8007838:	da04      	bge.n	8007844 <_puts_r+0xac>
 800783a:	69a2      	ldr	r2, [r4, #24]
 800783c:	429a      	cmp	r2, r3
 800783e:	dc06      	bgt.n	800784e <_puts_r+0xb6>
 8007840:	290a      	cmp	r1, #10
 8007842:	d004      	beq.n	800784e <_puts_r+0xb6>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	6022      	str	r2, [r4, #0]
 800784a:	7019      	strb	r1, [r3, #0]
 800784c:	e7c5      	b.n	80077da <_puts_r+0x42>
 800784e:	4622      	mov	r2, r4
 8007850:	4628      	mov	r0, r5
 8007852:	f000 fee9 	bl	8008628 <__swbuf_r>
 8007856:	3001      	adds	r0, #1
 8007858:	d1bf      	bne.n	80077da <_puts_r+0x42>
 800785a:	e7df      	b.n	800781c <_puts_r+0x84>
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	250a      	movs	r5, #10
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	6022      	str	r2, [r4, #0]
 8007864:	701d      	strb	r5, [r3, #0]
 8007866:	e7db      	b.n	8007820 <_puts_r+0x88>
 8007868:	0800b77c 	.word	0x0800b77c
 800786c:	0800b79c 	.word	0x0800b79c
 8007870:	0800b75c 	.word	0x0800b75c

08007874 <puts>:
 8007874:	4b02      	ldr	r3, [pc, #8]	; (8007880 <puts+0xc>)
 8007876:	4601      	mov	r1, r0
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	f7ff bf8d 	b.w	8007798 <_puts_r>
 800787e:	bf00      	nop
 8007880:	2000000c 	.word	0x2000000c

08007884 <nanf>:
 8007884:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800788c <nanf+0x8>
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	7fc00000 	.word	0x7fc00000

08007890 <siprintf>:
 8007890:	b40e      	push	{r1, r2, r3}
 8007892:	b500      	push	{lr}
 8007894:	b09c      	sub	sp, #112	; 0x70
 8007896:	ab1d      	add	r3, sp, #116	; 0x74
 8007898:	9002      	str	r0, [sp, #8]
 800789a:	9006      	str	r0, [sp, #24]
 800789c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078a0:	4809      	ldr	r0, [pc, #36]	; (80078c8 <siprintf+0x38>)
 80078a2:	9107      	str	r1, [sp, #28]
 80078a4:	9104      	str	r1, [sp, #16]
 80078a6:	4909      	ldr	r1, [pc, #36]	; (80078cc <siprintf+0x3c>)
 80078a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ac:	9105      	str	r1, [sp, #20]
 80078ae:	6800      	ldr	r0, [r0, #0]
 80078b0:	9301      	str	r3, [sp, #4]
 80078b2:	a902      	add	r1, sp, #8
 80078b4:	f003 f9c0 	bl	800ac38 <_svfiprintf_r>
 80078b8:	9b02      	ldr	r3, [sp, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	b01c      	add	sp, #112	; 0x70
 80078c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c4:	b003      	add	sp, #12
 80078c6:	4770      	bx	lr
 80078c8:	2000000c 	.word	0x2000000c
 80078cc:	ffff0208 	.word	0xffff0208

080078d0 <sulp>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	4604      	mov	r4, r0
 80078d4:	460d      	mov	r5, r1
 80078d6:	ec45 4b10 	vmov	d0, r4, r5
 80078da:	4616      	mov	r6, r2
 80078dc:	f002 ff0a 	bl	800a6f4 <__ulp>
 80078e0:	ec51 0b10 	vmov	r0, r1, d0
 80078e4:	b17e      	cbz	r6, 8007906 <sulp+0x36>
 80078e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dd09      	ble.n	8007906 <sulp+0x36>
 80078f2:	051b      	lsls	r3, r3, #20
 80078f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80078f8:	2400      	movs	r4, #0
 80078fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80078fe:	4622      	mov	r2, r4
 8007900:	462b      	mov	r3, r5
 8007902:	f7f8 fe79 	bl	80005f8 <__aeabi_dmul>
 8007906:	bd70      	pop	{r4, r5, r6, pc}

08007908 <_strtod_l>:
 8007908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	ed2d 8b02 	vpush	{d8}
 8007910:	b09d      	sub	sp, #116	; 0x74
 8007912:	461f      	mov	r7, r3
 8007914:	2300      	movs	r3, #0
 8007916:	9318      	str	r3, [sp, #96]	; 0x60
 8007918:	4ba2      	ldr	r3, [pc, #648]	; (8007ba4 <_strtod_l+0x29c>)
 800791a:	9213      	str	r2, [sp, #76]	; 0x4c
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	9305      	str	r3, [sp, #20]
 8007920:	4604      	mov	r4, r0
 8007922:	4618      	mov	r0, r3
 8007924:	4688      	mov	r8, r1
 8007926:	f7f8 fc53 	bl	80001d0 <strlen>
 800792a:	f04f 0a00 	mov.w	sl, #0
 800792e:	4605      	mov	r5, r0
 8007930:	f04f 0b00 	mov.w	fp, #0
 8007934:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800793a:	781a      	ldrb	r2, [r3, #0]
 800793c:	2a2b      	cmp	r2, #43	; 0x2b
 800793e:	d04e      	beq.n	80079de <_strtod_l+0xd6>
 8007940:	d83b      	bhi.n	80079ba <_strtod_l+0xb2>
 8007942:	2a0d      	cmp	r2, #13
 8007944:	d834      	bhi.n	80079b0 <_strtod_l+0xa8>
 8007946:	2a08      	cmp	r2, #8
 8007948:	d834      	bhi.n	80079b4 <_strtod_l+0xac>
 800794a:	2a00      	cmp	r2, #0
 800794c:	d03e      	beq.n	80079cc <_strtod_l+0xc4>
 800794e:	2300      	movs	r3, #0
 8007950:	930a      	str	r3, [sp, #40]	; 0x28
 8007952:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007954:	7833      	ldrb	r3, [r6, #0]
 8007956:	2b30      	cmp	r3, #48	; 0x30
 8007958:	f040 80b0 	bne.w	8007abc <_strtod_l+0x1b4>
 800795c:	7873      	ldrb	r3, [r6, #1]
 800795e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007962:	2b58      	cmp	r3, #88	; 0x58
 8007964:	d168      	bne.n	8007a38 <_strtod_l+0x130>
 8007966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	ab18      	add	r3, sp, #96	; 0x60
 800796c:	9702      	str	r7, [sp, #8]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	4a8d      	ldr	r2, [pc, #564]	; (8007ba8 <_strtod_l+0x2a0>)
 8007972:	ab19      	add	r3, sp, #100	; 0x64
 8007974:	a917      	add	r1, sp, #92	; 0x5c
 8007976:	4620      	mov	r0, r4
 8007978:	f001 ffae 	bl	80098d8 <__gethex>
 800797c:	f010 0707 	ands.w	r7, r0, #7
 8007980:	4605      	mov	r5, r0
 8007982:	d005      	beq.n	8007990 <_strtod_l+0x88>
 8007984:	2f06      	cmp	r7, #6
 8007986:	d12c      	bne.n	80079e2 <_strtod_l+0xda>
 8007988:	3601      	adds	r6, #1
 800798a:	2300      	movs	r3, #0
 800798c:	9617      	str	r6, [sp, #92]	; 0x5c
 800798e:	930a      	str	r3, [sp, #40]	; 0x28
 8007990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007992:	2b00      	cmp	r3, #0
 8007994:	f040 8590 	bne.w	80084b8 <_strtod_l+0xbb0>
 8007998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800799a:	b1eb      	cbz	r3, 80079d8 <_strtod_l+0xd0>
 800799c:	4652      	mov	r2, sl
 800799e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80079a2:	ec43 2b10 	vmov	d0, r2, r3
 80079a6:	b01d      	add	sp, #116	; 0x74
 80079a8:	ecbd 8b02 	vpop	{d8}
 80079ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b0:	2a20      	cmp	r2, #32
 80079b2:	d1cc      	bne.n	800794e <_strtod_l+0x46>
 80079b4:	3301      	adds	r3, #1
 80079b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80079b8:	e7be      	b.n	8007938 <_strtod_l+0x30>
 80079ba:	2a2d      	cmp	r2, #45	; 0x2d
 80079bc:	d1c7      	bne.n	800794e <_strtod_l+0x46>
 80079be:	2201      	movs	r2, #1
 80079c0:	920a      	str	r2, [sp, #40]	; 0x28
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80079c6:	785b      	ldrb	r3, [r3, #1]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1c2      	bne.n	8007952 <_strtod_l+0x4a>
 80079cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f040 856e 	bne.w	80084b4 <_strtod_l+0xbac>
 80079d8:	4652      	mov	r2, sl
 80079da:	465b      	mov	r3, fp
 80079dc:	e7e1      	b.n	80079a2 <_strtod_l+0x9a>
 80079de:	2200      	movs	r2, #0
 80079e0:	e7ee      	b.n	80079c0 <_strtod_l+0xb8>
 80079e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80079e4:	b13a      	cbz	r2, 80079f6 <_strtod_l+0xee>
 80079e6:	2135      	movs	r1, #53	; 0x35
 80079e8:	a81a      	add	r0, sp, #104	; 0x68
 80079ea:	f002 ff8e 	bl	800a90a <__copybits>
 80079ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80079f0:	4620      	mov	r0, r4
 80079f2:	f002 fb4d 	bl	800a090 <_Bfree>
 80079f6:	3f01      	subs	r7, #1
 80079f8:	2f04      	cmp	r7, #4
 80079fa:	d806      	bhi.n	8007a0a <_strtod_l+0x102>
 80079fc:	e8df f007 	tbb	[pc, r7]
 8007a00:	1714030a 	.word	0x1714030a
 8007a04:	0a          	.byte	0x0a
 8007a05:	00          	.byte	0x00
 8007a06:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007a0a:	0728      	lsls	r0, r5, #28
 8007a0c:	d5c0      	bpl.n	8007990 <_strtod_l+0x88>
 8007a0e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007a12:	e7bd      	b.n	8007990 <_strtod_l+0x88>
 8007a14:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007a18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a26:	e7f0      	b.n	8007a0a <_strtod_l+0x102>
 8007a28:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007bac <_strtod_l+0x2a4>
 8007a2c:	e7ed      	b.n	8007a0a <_strtod_l+0x102>
 8007a2e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007a32:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007a36:	e7e8      	b.n	8007a0a <_strtod_l+0x102>
 8007a38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b30      	cmp	r3, #48	; 0x30
 8007a42:	d0f9      	beq.n	8007a38 <_strtod_l+0x130>
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0a3      	beq.n	8007990 <_strtod_l+0x88>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f04f 0900 	mov.w	r9, #0
 8007a4e:	9304      	str	r3, [sp, #16]
 8007a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a52:	9308      	str	r3, [sp, #32]
 8007a54:	f8cd 901c 	str.w	r9, [sp, #28]
 8007a58:	464f      	mov	r7, r9
 8007a5a:	220a      	movs	r2, #10
 8007a5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007a5e:	7806      	ldrb	r6, [r0, #0]
 8007a60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007a64:	b2d9      	uxtb	r1, r3
 8007a66:	2909      	cmp	r1, #9
 8007a68:	d92a      	bls.n	8007ac0 <_strtod_l+0x1b8>
 8007a6a:	9905      	ldr	r1, [sp, #20]
 8007a6c:	462a      	mov	r2, r5
 8007a6e:	f003 fa3e 	bl	800aeee <strncmp>
 8007a72:	b398      	cbz	r0, 8007adc <_strtod_l+0x1d4>
 8007a74:	2000      	movs	r0, #0
 8007a76:	4632      	mov	r2, r6
 8007a78:	463d      	mov	r5, r7
 8007a7a:	9005      	str	r0, [sp, #20]
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2a65      	cmp	r2, #101	; 0x65
 8007a80:	d001      	beq.n	8007a86 <_strtod_l+0x17e>
 8007a82:	2a45      	cmp	r2, #69	; 0x45
 8007a84:	d118      	bne.n	8007ab8 <_strtod_l+0x1b0>
 8007a86:	b91d      	cbnz	r5, 8007a90 <_strtod_l+0x188>
 8007a88:	9a04      	ldr	r2, [sp, #16]
 8007a8a:	4302      	orrs	r2, r0
 8007a8c:	d09e      	beq.n	80079cc <_strtod_l+0xc4>
 8007a8e:	2500      	movs	r5, #0
 8007a90:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007a94:	f108 0201 	add.w	r2, r8, #1
 8007a98:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a9a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007a9e:	2a2b      	cmp	r2, #43	; 0x2b
 8007aa0:	d075      	beq.n	8007b8e <_strtod_l+0x286>
 8007aa2:	2a2d      	cmp	r2, #45	; 0x2d
 8007aa4:	d07b      	beq.n	8007b9e <_strtod_l+0x296>
 8007aa6:	f04f 0c00 	mov.w	ip, #0
 8007aaa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007aae:	2909      	cmp	r1, #9
 8007ab0:	f240 8082 	bls.w	8007bb8 <_strtod_l+0x2b0>
 8007ab4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007ab8:	2600      	movs	r6, #0
 8007aba:	e09d      	b.n	8007bf8 <_strtod_l+0x2f0>
 8007abc:	2300      	movs	r3, #0
 8007abe:	e7c4      	b.n	8007a4a <_strtod_l+0x142>
 8007ac0:	2f08      	cmp	r7, #8
 8007ac2:	bfd8      	it	le
 8007ac4:	9907      	ldrle	r1, [sp, #28]
 8007ac6:	f100 0001 	add.w	r0, r0, #1
 8007aca:	bfda      	itte	le
 8007acc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ad0:	9307      	strle	r3, [sp, #28]
 8007ad2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007ad6:	3701      	adds	r7, #1
 8007ad8:	9017      	str	r0, [sp, #92]	; 0x5c
 8007ada:	e7bf      	b.n	8007a5c <_strtod_l+0x154>
 8007adc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ade:	195a      	adds	r2, r3, r5
 8007ae0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ae2:	5d5a      	ldrb	r2, [r3, r5]
 8007ae4:	2f00      	cmp	r7, #0
 8007ae6:	d037      	beq.n	8007b58 <_strtod_l+0x250>
 8007ae8:	9005      	str	r0, [sp, #20]
 8007aea:	463d      	mov	r5, r7
 8007aec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007af0:	2b09      	cmp	r3, #9
 8007af2:	d912      	bls.n	8007b1a <_strtod_l+0x212>
 8007af4:	2301      	movs	r3, #1
 8007af6:	e7c2      	b.n	8007a7e <_strtod_l+0x176>
 8007af8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007afe:	785a      	ldrb	r2, [r3, #1]
 8007b00:	3001      	adds	r0, #1
 8007b02:	2a30      	cmp	r2, #48	; 0x30
 8007b04:	d0f8      	beq.n	8007af8 <_strtod_l+0x1f0>
 8007b06:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	f200 84d9 	bhi.w	80084c2 <_strtod_l+0xbba>
 8007b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b12:	9005      	str	r0, [sp, #20]
 8007b14:	2000      	movs	r0, #0
 8007b16:	9308      	str	r3, [sp, #32]
 8007b18:	4605      	mov	r5, r0
 8007b1a:	3a30      	subs	r2, #48	; 0x30
 8007b1c:	f100 0301 	add.w	r3, r0, #1
 8007b20:	d014      	beq.n	8007b4c <_strtod_l+0x244>
 8007b22:	9905      	ldr	r1, [sp, #20]
 8007b24:	4419      	add	r1, r3
 8007b26:	9105      	str	r1, [sp, #20]
 8007b28:	462b      	mov	r3, r5
 8007b2a:	eb00 0e05 	add.w	lr, r0, r5
 8007b2e:	210a      	movs	r1, #10
 8007b30:	4573      	cmp	r3, lr
 8007b32:	d113      	bne.n	8007b5c <_strtod_l+0x254>
 8007b34:	182b      	adds	r3, r5, r0
 8007b36:	2b08      	cmp	r3, #8
 8007b38:	f105 0501 	add.w	r5, r5, #1
 8007b3c:	4405      	add	r5, r0
 8007b3e:	dc1c      	bgt.n	8007b7a <_strtod_l+0x272>
 8007b40:	9907      	ldr	r1, [sp, #28]
 8007b42:	230a      	movs	r3, #10
 8007b44:	fb03 2301 	mla	r3, r3, r1, r2
 8007b48:	9307      	str	r3, [sp, #28]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b4e:	1c51      	adds	r1, r2, #1
 8007b50:	9117      	str	r1, [sp, #92]	; 0x5c
 8007b52:	7852      	ldrb	r2, [r2, #1]
 8007b54:	4618      	mov	r0, r3
 8007b56:	e7c9      	b.n	8007aec <_strtod_l+0x1e4>
 8007b58:	4638      	mov	r0, r7
 8007b5a:	e7d2      	b.n	8007b02 <_strtod_l+0x1fa>
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	dc04      	bgt.n	8007b6a <_strtod_l+0x262>
 8007b60:	9e07      	ldr	r6, [sp, #28]
 8007b62:	434e      	muls	r6, r1
 8007b64:	9607      	str	r6, [sp, #28]
 8007b66:	3301      	adds	r3, #1
 8007b68:	e7e2      	b.n	8007b30 <_strtod_l+0x228>
 8007b6a:	f103 0c01 	add.w	ip, r3, #1
 8007b6e:	f1bc 0f10 	cmp.w	ip, #16
 8007b72:	bfd8      	it	le
 8007b74:	fb01 f909 	mulle.w	r9, r1, r9
 8007b78:	e7f5      	b.n	8007b66 <_strtod_l+0x25e>
 8007b7a:	2d10      	cmp	r5, #16
 8007b7c:	bfdc      	itt	le
 8007b7e:	230a      	movle	r3, #10
 8007b80:	fb03 2909 	mlale	r9, r3, r9, r2
 8007b84:	e7e1      	b.n	8007b4a <_strtod_l+0x242>
 8007b86:	2300      	movs	r3, #0
 8007b88:	9305      	str	r3, [sp, #20]
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e77c      	b.n	8007a88 <_strtod_l+0x180>
 8007b8e:	f04f 0c00 	mov.w	ip, #0
 8007b92:	f108 0202 	add.w	r2, r8, #2
 8007b96:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b98:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007b9c:	e785      	b.n	8007aaa <_strtod_l+0x1a2>
 8007b9e:	f04f 0c01 	mov.w	ip, #1
 8007ba2:	e7f6      	b.n	8007b92 <_strtod_l+0x28a>
 8007ba4:	0800b824 	.word	0x0800b824
 8007ba8:	0800b574 	.word	0x0800b574
 8007bac:	7ff00000 	.word	0x7ff00000
 8007bb0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bb2:	1c51      	adds	r1, r2, #1
 8007bb4:	9117      	str	r1, [sp, #92]	; 0x5c
 8007bb6:	7852      	ldrb	r2, [r2, #1]
 8007bb8:	2a30      	cmp	r2, #48	; 0x30
 8007bba:	d0f9      	beq.n	8007bb0 <_strtod_l+0x2a8>
 8007bbc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007bc0:	2908      	cmp	r1, #8
 8007bc2:	f63f af79 	bhi.w	8007ab8 <_strtod_l+0x1b0>
 8007bc6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007bca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bcc:	9206      	str	r2, [sp, #24]
 8007bce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007bd0:	1c51      	adds	r1, r2, #1
 8007bd2:	9117      	str	r1, [sp, #92]	; 0x5c
 8007bd4:	7852      	ldrb	r2, [r2, #1]
 8007bd6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007bda:	2e09      	cmp	r6, #9
 8007bdc:	d937      	bls.n	8007c4e <_strtod_l+0x346>
 8007bde:	9e06      	ldr	r6, [sp, #24]
 8007be0:	1b89      	subs	r1, r1, r6
 8007be2:	2908      	cmp	r1, #8
 8007be4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007be8:	dc02      	bgt.n	8007bf0 <_strtod_l+0x2e8>
 8007bea:	4576      	cmp	r6, lr
 8007bec:	bfa8      	it	ge
 8007bee:	4676      	movge	r6, lr
 8007bf0:	f1bc 0f00 	cmp.w	ip, #0
 8007bf4:	d000      	beq.n	8007bf8 <_strtod_l+0x2f0>
 8007bf6:	4276      	negs	r6, r6
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	d14d      	bne.n	8007c98 <_strtod_l+0x390>
 8007bfc:	9904      	ldr	r1, [sp, #16]
 8007bfe:	4301      	orrs	r1, r0
 8007c00:	f47f aec6 	bne.w	8007990 <_strtod_l+0x88>
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f47f aee1 	bne.w	80079cc <_strtod_l+0xc4>
 8007c0a:	2a69      	cmp	r2, #105	; 0x69
 8007c0c:	d027      	beq.n	8007c5e <_strtod_l+0x356>
 8007c0e:	dc24      	bgt.n	8007c5a <_strtod_l+0x352>
 8007c10:	2a49      	cmp	r2, #73	; 0x49
 8007c12:	d024      	beq.n	8007c5e <_strtod_l+0x356>
 8007c14:	2a4e      	cmp	r2, #78	; 0x4e
 8007c16:	f47f aed9 	bne.w	80079cc <_strtod_l+0xc4>
 8007c1a:	499f      	ldr	r1, [pc, #636]	; (8007e98 <_strtod_l+0x590>)
 8007c1c:	a817      	add	r0, sp, #92	; 0x5c
 8007c1e:	f002 f8b3 	bl	8009d88 <__match>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	f43f aed2 	beq.w	80079cc <_strtod_l+0xc4>
 8007c28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b28      	cmp	r3, #40	; 0x28
 8007c2e:	d12d      	bne.n	8007c8c <_strtod_l+0x384>
 8007c30:	499a      	ldr	r1, [pc, #616]	; (8007e9c <_strtod_l+0x594>)
 8007c32:	aa1a      	add	r2, sp, #104	; 0x68
 8007c34:	a817      	add	r0, sp, #92	; 0x5c
 8007c36:	f002 f8bb 	bl	8009db0 <__hexnan>
 8007c3a:	2805      	cmp	r0, #5
 8007c3c:	d126      	bne.n	8007c8c <_strtod_l+0x384>
 8007c3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007c44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007c48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007c4c:	e6a0      	b.n	8007990 <_strtod_l+0x88>
 8007c4e:	210a      	movs	r1, #10
 8007c50:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007c54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007c58:	e7b9      	b.n	8007bce <_strtod_l+0x2c6>
 8007c5a:	2a6e      	cmp	r2, #110	; 0x6e
 8007c5c:	e7db      	b.n	8007c16 <_strtod_l+0x30e>
 8007c5e:	4990      	ldr	r1, [pc, #576]	; (8007ea0 <_strtod_l+0x598>)
 8007c60:	a817      	add	r0, sp, #92	; 0x5c
 8007c62:	f002 f891 	bl	8009d88 <__match>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	f43f aeb0 	beq.w	80079cc <_strtod_l+0xc4>
 8007c6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c6e:	498d      	ldr	r1, [pc, #564]	; (8007ea4 <_strtod_l+0x59c>)
 8007c70:	3b01      	subs	r3, #1
 8007c72:	a817      	add	r0, sp, #92	; 0x5c
 8007c74:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c76:	f002 f887 	bl	8009d88 <__match>
 8007c7a:	b910      	cbnz	r0, 8007c82 <_strtod_l+0x37a>
 8007c7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c7e:	3301      	adds	r3, #1
 8007c80:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c82:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007eb4 <_strtod_l+0x5ac>
 8007c86:	f04f 0a00 	mov.w	sl, #0
 8007c8a:	e681      	b.n	8007990 <_strtod_l+0x88>
 8007c8c:	4886      	ldr	r0, [pc, #536]	; (8007ea8 <_strtod_l+0x5a0>)
 8007c8e:	f003 f8d3 	bl	800ae38 <nan>
 8007c92:	ec5b ab10 	vmov	sl, fp, d0
 8007c96:	e67b      	b.n	8007990 <_strtod_l+0x88>
 8007c98:	9b05      	ldr	r3, [sp, #20]
 8007c9a:	9807      	ldr	r0, [sp, #28]
 8007c9c:	1af3      	subs	r3, r6, r3
 8007c9e:	2f00      	cmp	r7, #0
 8007ca0:	bf08      	it	eq
 8007ca2:	462f      	moveq	r7, r5
 8007ca4:	2d10      	cmp	r5, #16
 8007ca6:	9306      	str	r3, [sp, #24]
 8007ca8:	46a8      	mov	r8, r5
 8007caa:	bfa8      	it	ge
 8007cac:	f04f 0810 	movge.w	r8, #16
 8007cb0:	f7f8 fc28 	bl	8000504 <__aeabi_ui2d>
 8007cb4:	2d09      	cmp	r5, #9
 8007cb6:	4682      	mov	sl, r0
 8007cb8:	468b      	mov	fp, r1
 8007cba:	dd13      	ble.n	8007ce4 <_strtod_l+0x3dc>
 8007cbc:	4b7b      	ldr	r3, [pc, #492]	; (8007eac <_strtod_l+0x5a4>)
 8007cbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007cc2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007cc6:	f7f8 fc97 	bl	80005f8 <__aeabi_dmul>
 8007cca:	4682      	mov	sl, r0
 8007ccc:	4648      	mov	r0, r9
 8007cce:	468b      	mov	fp, r1
 8007cd0:	f7f8 fc18 	bl	8000504 <__aeabi_ui2d>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4650      	mov	r0, sl
 8007cda:	4659      	mov	r1, fp
 8007cdc:	f7f8 fad6 	bl	800028c <__adddf3>
 8007ce0:	4682      	mov	sl, r0
 8007ce2:	468b      	mov	fp, r1
 8007ce4:	2d0f      	cmp	r5, #15
 8007ce6:	dc38      	bgt.n	8007d5a <_strtod_l+0x452>
 8007ce8:	9b06      	ldr	r3, [sp, #24]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f43f ae50 	beq.w	8007990 <_strtod_l+0x88>
 8007cf0:	dd24      	ble.n	8007d3c <_strtod_l+0x434>
 8007cf2:	2b16      	cmp	r3, #22
 8007cf4:	dc0b      	bgt.n	8007d0e <_strtod_l+0x406>
 8007cf6:	496d      	ldr	r1, [pc, #436]	; (8007eac <_strtod_l+0x5a4>)
 8007cf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d00:	4652      	mov	r2, sl
 8007d02:	465b      	mov	r3, fp
 8007d04:	f7f8 fc78 	bl	80005f8 <__aeabi_dmul>
 8007d08:	4682      	mov	sl, r0
 8007d0a:	468b      	mov	fp, r1
 8007d0c:	e640      	b.n	8007990 <_strtod_l+0x88>
 8007d0e:	9a06      	ldr	r2, [sp, #24]
 8007d10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007d14:	4293      	cmp	r3, r2
 8007d16:	db20      	blt.n	8007d5a <_strtod_l+0x452>
 8007d18:	4c64      	ldr	r4, [pc, #400]	; (8007eac <_strtod_l+0x5a4>)
 8007d1a:	f1c5 050f 	rsb	r5, r5, #15
 8007d1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d22:	4652      	mov	r2, sl
 8007d24:	465b      	mov	r3, fp
 8007d26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d2a:	f7f8 fc65 	bl	80005f8 <__aeabi_dmul>
 8007d2e:	9b06      	ldr	r3, [sp, #24]
 8007d30:	1b5d      	subs	r5, r3, r5
 8007d32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d3a:	e7e3      	b.n	8007d04 <_strtod_l+0x3fc>
 8007d3c:	9b06      	ldr	r3, [sp, #24]
 8007d3e:	3316      	adds	r3, #22
 8007d40:	db0b      	blt.n	8007d5a <_strtod_l+0x452>
 8007d42:	9b05      	ldr	r3, [sp, #20]
 8007d44:	1b9e      	subs	r6, r3, r6
 8007d46:	4b59      	ldr	r3, [pc, #356]	; (8007eac <_strtod_l+0x5a4>)
 8007d48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007d4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d50:	4650      	mov	r0, sl
 8007d52:	4659      	mov	r1, fp
 8007d54:	f7f8 fd7a 	bl	800084c <__aeabi_ddiv>
 8007d58:	e7d6      	b.n	8007d08 <_strtod_l+0x400>
 8007d5a:	9b06      	ldr	r3, [sp, #24]
 8007d5c:	eba5 0808 	sub.w	r8, r5, r8
 8007d60:	4498      	add	r8, r3
 8007d62:	f1b8 0f00 	cmp.w	r8, #0
 8007d66:	dd74      	ble.n	8007e52 <_strtod_l+0x54a>
 8007d68:	f018 030f 	ands.w	r3, r8, #15
 8007d6c:	d00a      	beq.n	8007d84 <_strtod_l+0x47c>
 8007d6e:	494f      	ldr	r1, [pc, #316]	; (8007eac <_strtod_l+0x5a4>)
 8007d70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d74:	4652      	mov	r2, sl
 8007d76:	465b      	mov	r3, fp
 8007d78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d7c:	f7f8 fc3c 	bl	80005f8 <__aeabi_dmul>
 8007d80:	4682      	mov	sl, r0
 8007d82:	468b      	mov	fp, r1
 8007d84:	f038 080f 	bics.w	r8, r8, #15
 8007d88:	d04f      	beq.n	8007e2a <_strtod_l+0x522>
 8007d8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007d8e:	dd22      	ble.n	8007dd6 <_strtod_l+0x4ce>
 8007d90:	2500      	movs	r5, #0
 8007d92:	462e      	mov	r6, r5
 8007d94:	9507      	str	r5, [sp, #28]
 8007d96:	9505      	str	r5, [sp, #20]
 8007d98:	2322      	movs	r3, #34	; 0x22
 8007d9a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007eb4 <_strtod_l+0x5ac>
 8007d9e:	6023      	str	r3, [r4, #0]
 8007da0:	f04f 0a00 	mov.w	sl, #0
 8007da4:	9b07      	ldr	r3, [sp, #28]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f43f adf2 	beq.w	8007990 <_strtod_l+0x88>
 8007dac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007dae:	4620      	mov	r0, r4
 8007db0:	f002 f96e 	bl	800a090 <_Bfree>
 8007db4:	9905      	ldr	r1, [sp, #20]
 8007db6:	4620      	mov	r0, r4
 8007db8:	f002 f96a 	bl	800a090 <_Bfree>
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f002 f966 	bl	800a090 <_Bfree>
 8007dc4:	9907      	ldr	r1, [sp, #28]
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f002 f962 	bl	800a090 <_Bfree>
 8007dcc:	4629      	mov	r1, r5
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f002 f95e 	bl	800a090 <_Bfree>
 8007dd4:	e5dc      	b.n	8007990 <_strtod_l+0x88>
 8007dd6:	4b36      	ldr	r3, [pc, #216]	; (8007eb0 <_strtod_l+0x5a8>)
 8007dd8:	9304      	str	r3, [sp, #16]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007de0:	4650      	mov	r0, sl
 8007de2:	4659      	mov	r1, fp
 8007de4:	4699      	mov	r9, r3
 8007de6:	f1b8 0f01 	cmp.w	r8, #1
 8007dea:	dc21      	bgt.n	8007e30 <_strtod_l+0x528>
 8007dec:	b10b      	cbz	r3, 8007df2 <_strtod_l+0x4ea>
 8007dee:	4682      	mov	sl, r0
 8007df0:	468b      	mov	fp, r1
 8007df2:	4b2f      	ldr	r3, [pc, #188]	; (8007eb0 <_strtod_l+0x5a8>)
 8007df4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007df8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007dfc:	4652      	mov	r2, sl
 8007dfe:	465b      	mov	r3, fp
 8007e00:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007e04:	f7f8 fbf8 	bl	80005f8 <__aeabi_dmul>
 8007e08:	4b2a      	ldr	r3, [pc, #168]	; (8007eb4 <_strtod_l+0x5ac>)
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	400b      	ands	r3, r1
 8007e0e:	492a      	ldr	r1, [pc, #168]	; (8007eb8 <_strtod_l+0x5b0>)
 8007e10:	428b      	cmp	r3, r1
 8007e12:	4682      	mov	sl, r0
 8007e14:	d8bc      	bhi.n	8007d90 <_strtod_l+0x488>
 8007e16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007e1a:	428b      	cmp	r3, r1
 8007e1c:	bf86      	itte	hi
 8007e1e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007ebc <_strtod_l+0x5b4>
 8007e22:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8007e26:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9304      	str	r3, [sp, #16]
 8007e2e:	e084      	b.n	8007f3a <_strtod_l+0x632>
 8007e30:	f018 0f01 	tst.w	r8, #1
 8007e34:	d005      	beq.n	8007e42 <_strtod_l+0x53a>
 8007e36:	9b04      	ldr	r3, [sp, #16]
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f7f8 fbdc 	bl	80005f8 <__aeabi_dmul>
 8007e40:	2301      	movs	r3, #1
 8007e42:	9a04      	ldr	r2, [sp, #16]
 8007e44:	3208      	adds	r2, #8
 8007e46:	f109 0901 	add.w	r9, r9, #1
 8007e4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e4e:	9204      	str	r2, [sp, #16]
 8007e50:	e7c9      	b.n	8007de6 <_strtod_l+0x4de>
 8007e52:	d0ea      	beq.n	8007e2a <_strtod_l+0x522>
 8007e54:	f1c8 0800 	rsb	r8, r8, #0
 8007e58:	f018 020f 	ands.w	r2, r8, #15
 8007e5c:	d00a      	beq.n	8007e74 <_strtod_l+0x56c>
 8007e5e:	4b13      	ldr	r3, [pc, #76]	; (8007eac <_strtod_l+0x5a4>)
 8007e60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e64:	4650      	mov	r0, sl
 8007e66:	4659      	mov	r1, fp
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f7f8 fcee 	bl	800084c <__aeabi_ddiv>
 8007e70:	4682      	mov	sl, r0
 8007e72:	468b      	mov	fp, r1
 8007e74:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007e78:	d0d7      	beq.n	8007e2a <_strtod_l+0x522>
 8007e7a:	f1b8 0f1f 	cmp.w	r8, #31
 8007e7e:	dd1f      	ble.n	8007ec0 <_strtod_l+0x5b8>
 8007e80:	2500      	movs	r5, #0
 8007e82:	462e      	mov	r6, r5
 8007e84:	9507      	str	r5, [sp, #28]
 8007e86:	9505      	str	r5, [sp, #20]
 8007e88:	2322      	movs	r3, #34	; 0x22
 8007e8a:	f04f 0a00 	mov.w	sl, #0
 8007e8e:	f04f 0b00 	mov.w	fp, #0
 8007e92:	6023      	str	r3, [r4, #0]
 8007e94:	e786      	b.n	8007da4 <_strtod_l+0x49c>
 8007e96:	bf00      	nop
 8007e98:	0800b545 	.word	0x0800b545
 8007e9c:	0800b588 	.word	0x0800b588
 8007ea0:	0800b53d 	.word	0x0800b53d
 8007ea4:	0800b6cc 	.word	0x0800b6cc
 8007ea8:	0800b9e0 	.word	0x0800b9e0
 8007eac:	0800b8c0 	.word	0x0800b8c0
 8007eb0:	0800b898 	.word	0x0800b898
 8007eb4:	7ff00000 	.word	0x7ff00000
 8007eb8:	7ca00000 	.word	0x7ca00000
 8007ebc:	7fefffff 	.word	0x7fefffff
 8007ec0:	f018 0310 	ands.w	r3, r8, #16
 8007ec4:	bf18      	it	ne
 8007ec6:	236a      	movne	r3, #106	; 0x6a
 8007ec8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008278 <_strtod_l+0x970>
 8007ecc:	9304      	str	r3, [sp, #16]
 8007ece:	4650      	mov	r0, sl
 8007ed0:	4659      	mov	r1, fp
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f018 0f01 	tst.w	r8, #1
 8007ed8:	d004      	beq.n	8007ee4 <_strtod_l+0x5dc>
 8007eda:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ede:	f7f8 fb8b 	bl	80005f8 <__aeabi_dmul>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007ee8:	f109 0908 	add.w	r9, r9, #8
 8007eec:	d1f2      	bne.n	8007ed4 <_strtod_l+0x5cc>
 8007eee:	b10b      	cbz	r3, 8007ef4 <_strtod_l+0x5ec>
 8007ef0:	4682      	mov	sl, r0
 8007ef2:	468b      	mov	fp, r1
 8007ef4:	9b04      	ldr	r3, [sp, #16]
 8007ef6:	b1c3      	cbz	r3, 8007f2a <_strtod_l+0x622>
 8007ef8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007efc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	4659      	mov	r1, fp
 8007f04:	dd11      	ble.n	8007f2a <_strtod_l+0x622>
 8007f06:	2b1f      	cmp	r3, #31
 8007f08:	f340 8124 	ble.w	8008154 <_strtod_l+0x84c>
 8007f0c:	2b34      	cmp	r3, #52	; 0x34
 8007f0e:	bfde      	ittt	le
 8007f10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007f14:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007f18:	fa03 f202 	lslle.w	r2, r3, r2
 8007f1c:	f04f 0a00 	mov.w	sl, #0
 8007f20:	bfcc      	ite	gt
 8007f22:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007f26:	ea02 0b01 	andle.w	fp, r2, r1
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	4650      	mov	r0, sl
 8007f30:	4659      	mov	r1, fp
 8007f32:	f7f8 fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	d1a2      	bne.n	8007e80 <_strtod_l+0x578>
 8007f3a:	9b07      	ldr	r3, [sp, #28]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	9908      	ldr	r1, [sp, #32]
 8007f40:	462b      	mov	r3, r5
 8007f42:	463a      	mov	r2, r7
 8007f44:	4620      	mov	r0, r4
 8007f46:	f002 f90b 	bl	800a160 <__s2b>
 8007f4a:	9007      	str	r0, [sp, #28]
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	f43f af1f 	beq.w	8007d90 <_strtod_l+0x488>
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	1b9e      	subs	r6, r3, r6
 8007f56:	9b06      	ldr	r3, [sp, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bfb4      	ite	lt
 8007f5c:	4633      	movlt	r3, r6
 8007f5e:	2300      	movge	r3, #0
 8007f60:	930c      	str	r3, [sp, #48]	; 0x30
 8007f62:	9b06      	ldr	r3, [sp, #24]
 8007f64:	2500      	movs	r5, #0
 8007f66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f6a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f6c:	462e      	mov	r6, r5
 8007f6e:	9b07      	ldr	r3, [sp, #28]
 8007f70:	4620      	mov	r0, r4
 8007f72:	6859      	ldr	r1, [r3, #4]
 8007f74:	f002 f84c 	bl	800a010 <_Balloc>
 8007f78:	9005      	str	r0, [sp, #20]
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	f43f af0c 	beq.w	8007d98 <_strtod_l+0x490>
 8007f80:	9b07      	ldr	r3, [sp, #28]
 8007f82:	691a      	ldr	r2, [r3, #16]
 8007f84:	3202      	adds	r2, #2
 8007f86:	f103 010c 	add.w	r1, r3, #12
 8007f8a:	0092      	lsls	r2, r2, #2
 8007f8c:	300c      	adds	r0, #12
 8007f8e:	f002 f831 	bl	8009ff4 <memcpy>
 8007f92:	ec4b ab10 	vmov	d0, sl, fp
 8007f96:	aa1a      	add	r2, sp, #104	; 0x68
 8007f98:	a919      	add	r1, sp, #100	; 0x64
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f002 fc26 	bl	800a7ec <__d2b>
 8007fa0:	ec4b ab18 	vmov	d8, sl, fp
 8007fa4:	9018      	str	r0, [sp, #96]	; 0x60
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	f43f aef6 	beq.w	8007d98 <_strtod_l+0x490>
 8007fac:	2101      	movs	r1, #1
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f002 f970 	bl	800a294 <__i2b>
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f43f aeee 	beq.w	8007d98 <_strtod_l+0x490>
 8007fbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fbe:	9904      	ldr	r1, [sp, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	bfab      	itete	ge
 8007fc4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007fc6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007fc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007fca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007fce:	bfac      	ite	ge
 8007fd0:	eb03 0902 	addge.w	r9, r3, r2
 8007fd4:	1ad7      	sublt	r7, r2, r3
 8007fd6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007fd8:	eba3 0801 	sub.w	r8, r3, r1
 8007fdc:	4490      	add	r8, r2
 8007fde:	4ba1      	ldr	r3, [pc, #644]	; (8008264 <_strtod_l+0x95c>)
 8007fe0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007fe4:	4598      	cmp	r8, r3
 8007fe6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fea:	f280 80c7 	bge.w	800817c <_strtod_l+0x874>
 8007fee:	eba3 0308 	sub.w	r3, r3, r8
 8007ff2:	2b1f      	cmp	r3, #31
 8007ff4:	eba2 0203 	sub.w	r2, r2, r3
 8007ff8:	f04f 0101 	mov.w	r1, #1
 8007ffc:	f300 80b1 	bgt.w	8008162 <_strtod_l+0x85a>
 8008000:	fa01 f303 	lsl.w	r3, r1, r3
 8008004:	930d      	str	r3, [sp, #52]	; 0x34
 8008006:	2300      	movs	r3, #0
 8008008:	9308      	str	r3, [sp, #32]
 800800a:	eb09 0802 	add.w	r8, r9, r2
 800800e:	9b04      	ldr	r3, [sp, #16]
 8008010:	45c1      	cmp	r9, r8
 8008012:	4417      	add	r7, r2
 8008014:	441f      	add	r7, r3
 8008016:	464b      	mov	r3, r9
 8008018:	bfa8      	it	ge
 800801a:	4643      	movge	r3, r8
 800801c:	42bb      	cmp	r3, r7
 800801e:	bfa8      	it	ge
 8008020:	463b      	movge	r3, r7
 8008022:	2b00      	cmp	r3, #0
 8008024:	bfc2      	ittt	gt
 8008026:	eba8 0803 	subgt.w	r8, r8, r3
 800802a:	1aff      	subgt	r7, r7, r3
 800802c:	eba9 0903 	subgt.w	r9, r9, r3
 8008030:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008032:	2b00      	cmp	r3, #0
 8008034:	dd17      	ble.n	8008066 <_strtod_l+0x75e>
 8008036:	4631      	mov	r1, r6
 8008038:	461a      	mov	r2, r3
 800803a:	4620      	mov	r0, r4
 800803c:	f002 f9ea 	bl	800a414 <__pow5mult>
 8008040:	4606      	mov	r6, r0
 8008042:	2800      	cmp	r0, #0
 8008044:	f43f aea8 	beq.w	8007d98 <_strtod_l+0x490>
 8008048:	4601      	mov	r1, r0
 800804a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800804c:	4620      	mov	r0, r4
 800804e:	f002 f937 	bl	800a2c0 <__multiply>
 8008052:	900b      	str	r0, [sp, #44]	; 0x2c
 8008054:	2800      	cmp	r0, #0
 8008056:	f43f ae9f 	beq.w	8007d98 <_strtod_l+0x490>
 800805a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800805c:	4620      	mov	r0, r4
 800805e:	f002 f817 	bl	800a090 <_Bfree>
 8008062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008064:	9318      	str	r3, [sp, #96]	; 0x60
 8008066:	f1b8 0f00 	cmp.w	r8, #0
 800806a:	f300 808c 	bgt.w	8008186 <_strtod_l+0x87e>
 800806e:	9b06      	ldr	r3, [sp, #24]
 8008070:	2b00      	cmp	r3, #0
 8008072:	dd08      	ble.n	8008086 <_strtod_l+0x77e>
 8008074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008076:	9905      	ldr	r1, [sp, #20]
 8008078:	4620      	mov	r0, r4
 800807a:	f002 f9cb 	bl	800a414 <__pow5mult>
 800807e:	9005      	str	r0, [sp, #20]
 8008080:	2800      	cmp	r0, #0
 8008082:	f43f ae89 	beq.w	8007d98 <_strtod_l+0x490>
 8008086:	2f00      	cmp	r7, #0
 8008088:	dd08      	ble.n	800809c <_strtod_l+0x794>
 800808a:	9905      	ldr	r1, [sp, #20]
 800808c:	463a      	mov	r2, r7
 800808e:	4620      	mov	r0, r4
 8008090:	f002 fa1a 	bl	800a4c8 <__lshift>
 8008094:	9005      	str	r0, [sp, #20]
 8008096:	2800      	cmp	r0, #0
 8008098:	f43f ae7e 	beq.w	8007d98 <_strtod_l+0x490>
 800809c:	f1b9 0f00 	cmp.w	r9, #0
 80080a0:	dd08      	ble.n	80080b4 <_strtod_l+0x7ac>
 80080a2:	4631      	mov	r1, r6
 80080a4:	464a      	mov	r2, r9
 80080a6:	4620      	mov	r0, r4
 80080a8:	f002 fa0e 	bl	800a4c8 <__lshift>
 80080ac:	4606      	mov	r6, r0
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f ae72 	beq.w	8007d98 <_strtod_l+0x490>
 80080b4:	9a05      	ldr	r2, [sp, #20]
 80080b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080b8:	4620      	mov	r0, r4
 80080ba:	f002 fa91 	bl	800a5e0 <__mdiff>
 80080be:	4605      	mov	r5, r0
 80080c0:	2800      	cmp	r0, #0
 80080c2:	f43f ae69 	beq.w	8007d98 <_strtod_l+0x490>
 80080c6:	68c3      	ldr	r3, [r0, #12]
 80080c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80080ca:	2300      	movs	r3, #0
 80080cc:	60c3      	str	r3, [r0, #12]
 80080ce:	4631      	mov	r1, r6
 80080d0:	f002 fa6a 	bl	800a5a8 <__mcmp>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	da60      	bge.n	800819a <_strtod_l+0x892>
 80080d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080da:	ea53 030a 	orrs.w	r3, r3, sl
 80080de:	f040 8082 	bne.w	80081e6 <_strtod_l+0x8de>
 80080e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d17d      	bne.n	80081e6 <_strtod_l+0x8de>
 80080ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080ee:	0d1b      	lsrs	r3, r3, #20
 80080f0:	051b      	lsls	r3, r3, #20
 80080f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080f6:	d976      	bls.n	80081e6 <_strtod_l+0x8de>
 80080f8:	696b      	ldr	r3, [r5, #20]
 80080fa:	b913      	cbnz	r3, 8008102 <_strtod_l+0x7fa>
 80080fc:	692b      	ldr	r3, [r5, #16]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	dd71      	ble.n	80081e6 <_strtod_l+0x8de>
 8008102:	4629      	mov	r1, r5
 8008104:	2201      	movs	r2, #1
 8008106:	4620      	mov	r0, r4
 8008108:	f002 f9de 	bl	800a4c8 <__lshift>
 800810c:	4631      	mov	r1, r6
 800810e:	4605      	mov	r5, r0
 8008110:	f002 fa4a 	bl	800a5a8 <__mcmp>
 8008114:	2800      	cmp	r0, #0
 8008116:	dd66      	ble.n	80081e6 <_strtod_l+0x8de>
 8008118:	9904      	ldr	r1, [sp, #16]
 800811a:	4a53      	ldr	r2, [pc, #332]	; (8008268 <_strtod_l+0x960>)
 800811c:	465b      	mov	r3, fp
 800811e:	2900      	cmp	r1, #0
 8008120:	f000 8081 	beq.w	8008226 <_strtod_l+0x91e>
 8008124:	ea02 010b 	and.w	r1, r2, fp
 8008128:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800812c:	dc7b      	bgt.n	8008226 <_strtod_l+0x91e>
 800812e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008132:	f77f aea9 	ble.w	8007e88 <_strtod_l+0x580>
 8008136:	4b4d      	ldr	r3, [pc, #308]	; (800826c <_strtod_l+0x964>)
 8008138:	4650      	mov	r0, sl
 800813a:	4659      	mov	r1, fp
 800813c:	2200      	movs	r2, #0
 800813e:	f7f8 fa5b 	bl	80005f8 <__aeabi_dmul>
 8008142:	460b      	mov	r3, r1
 8008144:	4303      	orrs	r3, r0
 8008146:	bf08      	it	eq
 8008148:	2322      	moveq	r3, #34	; 0x22
 800814a:	4682      	mov	sl, r0
 800814c:	468b      	mov	fp, r1
 800814e:	bf08      	it	eq
 8008150:	6023      	streq	r3, [r4, #0]
 8008152:	e62b      	b.n	8007dac <_strtod_l+0x4a4>
 8008154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008158:	fa02 f303 	lsl.w	r3, r2, r3
 800815c:	ea03 0a0a 	and.w	sl, r3, sl
 8008160:	e6e3      	b.n	8007f2a <_strtod_l+0x622>
 8008162:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008166:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800816a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800816e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008172:	fa01 f308 	lsl.w	r3, r1, r8
 8008176:	9308      	str	r3, [sp, #32]
 8008178:	910d      	str	r1, [sp, #52]	; 0x34
 800817a:	e746      	b.n	800800a <_strtod_l+0x702>
 800817c:	2300      	movs	r3, #0
 800817e:	9308      	str	r3, [sp, #32]
 8008180:	2301      	movs	r3, #1
 8008182:	930d      	str	r3, [sp, #52]	; 0x34
 8008184:	e741      	b.n	800800a <_strtod_l+0x702>
 8008186:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008188:	4642      	mov	r2, r8
 800818a:	4620      	mov	r0, r4
 800818c:	f002 f99c 	bl	800a4c8 <__lshift>
 8008190:	9018      	str	r0, [sp, #96]	; 0x60
 8008192:	2800      	cmp	r0, #0
 8008194:	f47f af6b 	bne.w	800806e <_strtod_l+0x766>
 8008198:	e5fe      	b.n	8007d98 <_strtod_l+0x490>
 800819a:	465f      	mov	r7, fp
 800819c:	d16e      	bne.n	800827c <_strtod_l+0x974>
 800819e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081a4:	b342      	cbz	r2, 80081f8 <_strtod_l+0x8f0>
 80081a6:	4a32      	ldr	r2, [pc, #200]	; (8008270 <_strtod_l+0x968>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d128      	bne.n	80081fe <_strtod_l+0x8f6>
 80081ac:	9b04      	ldr	r3, [sp, #16]
 80081ae:	4651      	mov	r1, sl
 80081b0:	b1eb      	cbz	r3, 80081ee <_strtod_l+0x8e6>
 80081b2:	4b2d      	ldr	r3, [pc, #180]	; (8008268 <_strtod_l+0x960>)
 80081b4:	403b      	ands	r3, r7
 80081b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80081ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081be:	d819      	bhi.n	80081f4 <_strtod_l+0x8ec>
 80081c0:	0d1b      	lsrs	r3, r3, #20
 80081c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	4299      	cmp	r1, r3
 80081cc:	d117      	bne.n	80081fe <_strtod_l+0x8f6>
 80081ce:	4b29      	ldr	r3, [pc, #164]	; (8008274 <_strtod_l+0x96c>)
 80081d0:	429f      	cmp	r7, r3
 80081d2:	d102      	bne.n	80081da <_strtod_l+0x8d2>
 80081d4:	3101      	adds	r1, #1
 80081d6:	f43f addf 	beq.w	8007d98 <_strtod_l+0x490>
 80081da:	4b23      	ldr	r3, [pc, #140]	; (8008268 <_strtod_l+0x960>)
 80081dc:	403b      	ands	r3, r7
 80081de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80081e2:	f04f 0a00 	mov.w	sl, #0
 80081e6:	9b04      	ldr	r3, [sp, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1a4      	bne.n	8008136 <_strtod_l+0x82e>
 80081ec:	e5de      	b.n	8007dac <_strtod_l+0x4a4>
 80081ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081f2:	e7ea      	b.n	80081ca <_strtod_l+0x8c2>
 80081f4:	4613      	mov	r3, r2
 80081f6:	e7e8      	b.n	80081ca <_strtod_l+0x8c2>
 80081f8:	ea53 030a 	orrs.w	r3, r3, sl
 80081fc:	d08c      	beq.n	8008118 <_strtod_l+0x810>
 80081fe:	9b08      	ldr	r3, [sp, #32]
 8008200:	b1db      	cbz	r3, 800823a <_strtod_l+0x932>
 8008202:	423b      	tst	r3, r7
 8008204:	d0ef      	beq.n	80081e6 <_strtod_l+0x8de>
 8008206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008208:	9a04      	ldr	r2, [sp, #16]
 800820a:	4650      	mov	r0, sl
 800820c:	4659      	mov	r1, fp
 800820e:	b1c3      	cbz	r3, 8008242 <_strtod_l+0x93a>
 8008210:	f7ff fb5e 	bl	80078d0 <sulp>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	ec51 0b18 	vmov	r0, r1, d8
 800821c:	f7f8 f836 	bl	800028c <__adddf3>
 8008220:	4682      	mov	sl, r0
 8008222:	468b      	mov	fp, r1
 8008224:	e7df      	b.n	80081e6 <_strtod_l+0x8de>
 8008226:	4013      	ands	r3, r2
 8008228:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800822c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008230:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008234:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008238:	e7d5      	b.n	80081e6 <_strtod_l+0x8de>
 800823a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800823c:	ea13 0f0a 	tst.w	r3, sl
 8008240:	e7e0      	b.n	8008204 <_strtod_l+0x8fc>
 8008242:	f7ff fb45 	bl	80078d0 <sulp>
 8008246:	4602      	mov	r2, r0
 8008248:	460b      	mov	r3, r1
 800824a:	ec51 0b18 	vmov	r0, r1, d8
 800824e:	f7f8 f81b 	bl	8000288 <__aeabi_dsub>
 8008252:	2200      	movs	r2, #0
 8008254:	2300      	movs	r3, #0
 8008256:	4682      	mov	sl, r0
 8008258:	468b      	mov	fp, r1
 800825a:	f7f8 fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800825e:	2800      	cmp	r0, #0
 8008260:	d0c1      	beq.n	80081e6 <_strtod_l+0x8de>
 8008262:	e611      	b.n	8007e88 <_strtod_l+0x580>
 8008264:	fffffc02 	.word	0xfffffc02
 8008268:	7ff00000 	.word	0x7ff00000
 800826c:	39500000 	.word	0x39500000
 8008270:	000fffff 	.word	0x000fffff
 8008274:	7fefffff 	.word	0x7fefffff
 8008278:	0800b5a0 	.word	0x0800b5a0
 800827c:	4631      	mov	r1, r6
 800827e:	4628      	mov	r0, r5
 8008280:	f002 fb10 	bl	800a8a4 <__ratio>
 8008284:	ec59 8b10 	vmov	r8, r9, d0
 8008288:	ee10 0a10 	vmov	r0, s0
 800828c:	2200      	movs	r2, #0
 800828e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008292:	4649      	mov	r1, r9
 8008294:	f7f8 fc2c 	bl	8000af0 <__aeabi_dcmple>
 8008298:	2800      	cmp	r0, #0
 800829a:	d07a      	beq.n	8008392 <_strtod_l+0xa8a>
 800829c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d04a      	beq.n	8008338 <_strtod_l+0xa30>
 80082a2:	4b95      	ldr	r3, [pc, #596]	; (80084f8 <_strtod_l+0xbf0>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80082aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80084f8 <_strtod_l+0xbf0>
 80082ae:	f04f 0800 	mov.w	r8, #0
 80082b2:	4b92      	ldr	r3, [pc, #584]	; (80084fc <_strtod_l+0xbf4>)
 80082b4:	403b      	ands	r3, r7
 80082b6:	930d      	str	r3, [sp, #52]	; 0x34
 80082b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082ba:	4b91      	ldr	r3, [pc, #580]	; (8008500 <_strtod_l+0xbf8>)
 80082bc:	429a      	cmp	r2, r3
 80082be:	f040 80b0 	bne.w	8008422 <_strtod_l+0xb1a>
 80082c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80082ca:	ec4b ab10 	vmov	d0, sl, fp
 80082ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082d2:	f002 fa0f 	bl	800a6f4 <__ulp>
 80082d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082da:	ec53 2b10 	vmov	r2, r3, d0
 80082de:	f7f8 f98b 	bl	80005f8 <__aeabi_dmul>
 80082e2:	4652      	mov	r2, sl
 80082e4:	465b      	mov	r3, fp
 80082e6:	f7f7 ffd1 	bl	800028c <__adddf3>
 80082ea:	460b      	mov	r3, r1
 80082ec:	4983      	ldr	r1, [pc, #524]	; (80084fc <_strtod_l+0xbf4>)
 80082ee:	4a85      	ldr	r2, [pc, #532]	; (8008504 <_strtod_l+0xbfc>)
 80082f0:	4019      	ands	r1, r3
 80082f2:	4291      	cmp	r1, r2
 80082f4:	4682      	mov	sl, r0
 80082f6:	d960      	bls.n	80083ba <_strtod_l+0xab2>
 80082f8:	ee18 3a90 	vmov	r3, s17
 80082fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008300:	4293      	cmp	r3, r2
 8008302:	d104      	bne.n	800830e <_strtod_l+0xa06>
 8008304:	ee18 3a10 	vmov	r3, s16
 8008308:	3301      	adds	r3, #1
 800830a:	f43f ad45 	beq.w	8007d98 <_strtod_l+0x490>
 800830e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008510 <_strtod_l+0xc08>
 8008312:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008316:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008318:	4620      	mov	r0, r4
 800831a:	f001 feb9 	bl	800a090 <_Bfree>
 800831e:	9905      	ldr	r1, [sp, #20]
 8008320:	4620      	mov	r0, r4
 8008322:	f001 feb5 	bl	800a090 <_Bfree>
 8008326:	4631      	mov	r1, r6
 8008328:	4620      	mov	r0, r4
 800832a:	f001 feb1 	bl	800a090 <_Bfree>
 800832e:	4629      	mov	r1, r5
 8008330:	4620      	mov	r0, r4
 8008332:	f001 fead 	bl	800a090 <_Bfree>
 8008336:	e61a      	b.n	8007f6e <_strtod_l+0x666>
 8008338:	f1ba 0f00 	cmp.w	sl, #0
 800833c:	d11b      	bne.n	8008376 <_strtod_l+0xa6e>
 800833e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008342:	b9f3      	cbnz	r3, 8008382 <_strtod_l+0xa7a>
 8008344:	4b6c      	ldr	r3, [pc, #432]	; (80084f8 <_strtod_l+0xbf0>)
 8008346:	2200      	movs	r2, #0
 8008348:	4640      	mov	r0, r8
 800834a:	4649      	mov	r1, r9
 800834c:	f7f8 fbc6 	bl	8000adc <__aeabi_dcmplt>
 8008350:	b9d0      	cbnz	r0, 8008388 <_strtod_l+0xa80>
 8008352:	4640      	mov	r0, r8
 8008354:	4649      	mov	r1, r9
 8008356:	4b6c      	ldr	r3, [pc, #432]	; (8008508 <_strtod_l+0xc00>)
 8008358:	2200      	movs	r2, #0
 800835a:	f7f8 f94d 	bl	80005f8 <__aeabi_dmul>
 800835e:	4680      	mov	r8, r0
 8008360:	4689      	mov	r9, r1
 8008362:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008366:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800836a:	9315      	str	r3, [sp, #84]	; 0x54
 800836c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008370:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008374:	e79d      	b.n	80082b2 <_strtod_l+0x9aa>
 8008376:	f1ba 0f01 	cmp.w	sl, #1
 800837a:	d102      	bne.n	8008382 <_strtod_l+0xa7a>
 800837c:	2f00      	cmp	r7, #0
 800837e:	f43f ad83 	beq.w	8007e88 <_strtod_l+0x580>
 8008382:	4b62      	ldr	r3, [pc, #392]	; (800850c <_strtod_l+0xc04>)
 8008384:	2200      	movs	r2, #0
 8008386:	e78e      	b.n	80082a6 <_strtod_l+0x99e>
 8008388:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008508 <_strtod_l+0xc00>
 800838c:	f04f 0800 	mov.w	r8, #0
 8008390:	e7e7      	b.n	8008362 <_strtod_l+0xa5a>
 8008392:	4b5d      	ldr	r3, [pc, #372]	; (8008508 <_strtod_l+0xc00>)
 8008394:	4640      	mov	r0, r8
 8008396:	4649      	mov	r1, r9
 8008398:	2200      	movs	r2, #0
 800839a:	f7f8 f92d 	bl	80005f8 <__aeabi_dmul>
 800839e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a0:	4680      	mov	r8, r0
 80083a2:	4689      	mov	r9, r1
 80083a4:	b933      	cbnz	r3, 80083b4 <_strtod_l+0xaac>
 80083a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083aa:	900e      	str	r0, [sp, #56]	; 0x38
 80083ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80083ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80083b2:	e7dd      	b.n	8008370 <_strtod_l+0xa68>
 80083b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80083b8:	e7f9      	b.n	80083ae <_strtod_l+0xaa6>
 80083ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80083be:	9b04      	ldr	r3, [sp, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1a8      	bne.n	8008316 <_strtod_l+0xa0e>
 80083c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083ca:	0d1b      	lsrs	r3, r3, #20
 80083cc:	051b      	lsls	r3, r3, #20
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d1a1      	bne.n	8008316 <_strtod_l+0xa0e>
 80083d2:	4640      	mov	r0, r8
 80083d4:	4649      	mov	r1, r9
 80083d6:	f7f8 fc6f 	bl	8000cb8 <__aeabi_d2lz>
 80083da:	f7f8 f8df 	bl	800059c <__aeabi_l2d>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	f7f7 ff4f 	bl	8000288 <__aeabi_dsub>
 80083ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083f0:	ea43 030a 	orr.w	r3, r3, sl
 80083f4:	4313      	orrs	r3, r2
 80083f6:	4680      	mov	r8, r0
 80083f8:	4689      	mov	r9, r1
 80083fa:	d055      	beq.n	80084a8 <_strtod_l+0xba0>
 80083fc:	a336      	add	r3, pc, #216	; (adr r3, 80084d8 <_strtod_l+0xbd0>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f7f8 fb6b 	bl	8000adc <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	f47f acd0 	bne.w	8007dac <_strtod_l+0x4a4>
 800840c:	a334      	add	r3, pc, #208	; (adr r3, 80084e0 <_strtod_l+0xbd8>)
 800840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f8 fb7f 	bl	8000b18 <__aeabi_dcmpgt>
 800841a:	2800      	cmp	r0, #0
 800841c:	f43f af7b 	beq.w	8008316 <_strtod_l+0xa0e>
 8008420:	e4c4      	b.n	8007dac <_strtod_l+0x4a4>
 8008422:	9b04      	ldr	r3, [sp, #16]
 8008424:	b333      	cbz	r3, 8008474 <_strtod_l+0xb6c>
 8008426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008428:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800842c:	d822      	bhi.n	8008474 <_strtod_l+0xb6c>
 800842e:	a32e      	add	r3, pc, #184	; (adr r3, 80084e8 <_strtod_l+0xbe0>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	4640      	mov	r0, r8
 8008436:	4649      	mov	r1, r9
 8008438:	f7f8 fb5a 	bl	8000af0 <__aeabi_dcmple>
 800843c:	b1a0      	cbz	r0, 8008468 <_strtod_l+0xb60>
 800843e:	4649      	mov	r1, r9
 8008440:	4640      	mov	r0, r8
 8008442:	f7f8 fbb1 	bl	8000ba8 <__aeabi_d2uiz>
 8008446:	2801      	cmp	r0, #1
 8008448:	bf38      	it	cc
 800844a:	2001      	movcc	r0, #1
 800844c:	f7f8 f85a 	bl	8000504 <__aeabi_ui2d>
 8008450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008452:	4680      	mov	r8, r0
 8008454:	4689      	mov	r9, r1
 8008456:	bb23      	cbnz	r3, 80084a2 <_strtod_l+0xb9a>
 8008458:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800845c:	9010      	str	r0, [sp, #64]	; 0x40
 800845e:	9311      	str	r3, [sp, #68]	; 0x44
 8008460:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008464:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800846c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008470:	1a9b      	subs	r3, r3, r2
 8008472:	9309      	str	r3, [sp, #36]	; 0x24
 8008474:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008478:	eeb0 0a48 	vmov.f32	s0, s16
 800847c:	eef0 0a68 	vmov.f32	s1, s17
 8008480:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008484:	f002 f936 	bl	800a6f4 <__ulp>
 8008488:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800848c:	ec53 2b10 	vmov	r2, r3, d0
 8008490:	f7f8 f8b2 	bl	80005f8 <__aeabi_dmul>
 8008494:	ec53 2b18 	vmov	r2, r3, d8
 8008498:	f7f7 fef8 	bl	800028c <__adddf3>
 800849c:	4682      	mov	sl, r0
 800849e:	468b      	mov	fp, r1
 80084a0:	e78d      	b.n	80083be <_strtod_l+0xab6>
 80084a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80084a6:	e7db      	b.n	8008460 <_strtod_l+0xb58>
 80084a8:	a311      	add	r3, pc, #68	; (adr r3, 80084f0 <_strtod_l+0xbe8>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f7f8 fb15 	bl	8000adc <__aeabi_dcmplt>
 80084b2:	e7b2      	b.n	800841a <_strtod_l+0xb12>
 80084b4:	2300      	movs	r3, #0
 80084b6:	930a      	str	r3, [sp, #40]	; 0x28
 80084b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084bc:	6013      	str	r3, [r2, #0]
 80084be:	f7ff ba6b 	b.w	8007998 <_strtod_l+0x90>
 80084c2:	2a65      	cmp	r2, #101	; 0x65
 80084c4:	f43f ab5f 	beq.w	8007b86 <_strtod_l+0x27e>
 80084c8:	2a45      	cmp	r2, #69	; 0x45
 80084ca:	f43f ab5c 	beq.w	8007b86 <_strtod_l+0x27e>
 80084ce:	2301      	movs	r3, #1
 80084d0:	f7ff bb94 	b.w	8007bfc <_strtod_l+0x2f4>
 80084d4:	f3af 8000 	nop.w
 80084d8:	94a03595 	.word	0x94a03595
 80084dc:	3fdfffff 	.word	0x3fdfffff
 80084e0:	35afe535 	.word	0x35afe535
 80084e4:	3fe00000 	.word	0x3fe00000
 80084e8:	ffc00000 	.word	0xffc00000
 80084ec:	41dfffff 	.word	0x41dfffff
 80084f0:	94a03595 	.word	0x94a03595
 80084f4:	3fcfffff 	.word	0x3fcfffff
 80084f8:	3ff00000 	.word	0x3ff00000
 80084fc:	7ff00000 	.word	0x7ff00000
 8008500:	7fe00000 	.word	0x7fe00000
 8008504:	7c9fffff 	.word	0x7c9fffff
 8008508:	3fe00000 	.word	0x3fe00000
 800850c:	bff00000 	.word	0xbff00000
 8008510:	7fefffff 	.word	0x7fefffff

08008514 <_strtod_r>:
 8008514:	4b01      	ldr	r3, [pc, #4]	; (800851c <_strtod_r+0x8>)
 8008516:	f7ff b9f7 	b.w	8007908 <_strtod_l>
 800851a:	bf00      	nop
 800851c:	20000074 	.word	0x20000074

08008520 <_strtol_l.constprop.0>:
 8008520:	2b01      	cmp	r3, #1
 8008522:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008526:	d001      	beq.n	800852c <_strtol_l.constprop.0+0xc>
 8008528:	2b24      	cmp	r3, #36	; 0x24
 800852a:	d906      	bls.n	800853a <_strtol_l.constprop.0+0x1a>
 800852c:	f7fe fa88 	bl	8006a40 <__errno>
 8008530:	2316      	movs	r3, #22
 8008532:	6003      	str	r3, [r0, #0]
 8008534:	2000      	movs	r0, #0
 8008536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008620 <_strtol_l.constprop.0+0x100>
 800853e:	460d      	mov	r5, r1
 8008540:	462e      	mov	r6, r5
 8008542:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008546:	f814 700c 	ldrb.w	r7, [r4, ip]
 800854a:	f017 0708 	ands.w	r7, r7, #8
 800854e:	d1f7      	bne.n	8008540 <_strtol_l.constprop.0+0x20>
 8008550:	2c2d      	cmp	r4, #45	; 0x2d
 8008552:	d132      	bne.n	80085ba <_strtol_l.constprop.0+0x9a>
 8008554:	782c      	ldrb	r4, [r5, #0]
 8008556:	2701      	movs	r7, #1
 8008558:	1cb5      	adds	r5, r6, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d05b      	beq.n	8008616 <_strtol_l.constprop.0+0xf6>
 800855e:	2b10      	cmp	r3, #16
 8008560:	d109      	bne.n	8008576 <_strtol_l.constprop.0+0x56>
 8008562:	2c30      	cmp	r4, #48	; 0x30
 8008564:	d107      	bne.n	8008576 <_strtol_l.constprop.0+0x56>
 8008566:	782c      	ldrb	r4, [r5, #0]
 8008568:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800856c:	2c58      	cmp	r4, #88	; 0x58
 800856e:	d14d      	bne.n	800860c <_strtol_l.constprop.0+0xec>
 8008570:	786c      	ldrb	r4, [r5, #1]
 8008572:	2310      	movs	r3, #16
 8008574:	3502      	adds	r5, #2
 8008576:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800857a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800857e:	f04f 0c00 	mov.w	ip, #0
 8008582:	fbb8 f9f3 	udiv	r9, r8, r3
 8008586:	4666      	mov	r6, ip
 8008588:	fb03 8a19 	mls	sl, r3, r9, r8
 800858c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008590:	f1be 0f09 	cmp.w	lr, #9
 8008594:	d816      	bhi.n	80085c4 <_strtol_l.constprop.0+0xa4>
 8008596:	4674      	mov	r4, lr
 8008598:	42a3      	cmp	r3, r4
 800859a:	dd24      	ble.n	80085e6 <_strtol_l.constprop.0+0xc6>
 800859c:	f1bc 0f00 	cmp.w	ip, #0
 80085a0:	db1e      	blt.n	80085e0 <_strtol_l.constprop.0+0xc0>
 80085a2:	45b1      	cmp	r9, r6
 80085a4:	d31c      	bcc.n	80085e0 <_strtol_l.constprop.0+0xc0>
 80085a6:	d101      	bne.n	80085ac <_strtol_l.constprop.0+0x8c>
 80085a8:	45a2      	cmp	sl, r4
 80085aa:	db19      	blt.n	80085e0 <_strtol_l.constprop.0+0xc0>
 80085ac:	fb06 4603 	mla	r6, r6, r3, r4
 80085b0:	f04f 0c01 	mov.w	ip, #1
 80085b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085b8:	e7e8      	b.n	800858c <_strtol_l.constprop.0+0x6c>
 80085ba:	2c2b      	cmp	r4, #43	; 0x2b
 80085bc:	bf04      	itt	eq
 80085be:	782c      	ldrbeq	r4, [r5, #0]
 80085c0:	1cb5      	addeq	r5, r6, #2
 80085c2:	e7ca      	b.n	800855a <_strtol_l.constprop.0+0x3a>
 80085c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80085c8:	f1be 0f19 	cmp.w	lr, #25
 80085cc:	d801      	bhi.n	80085d2 <_strtol_l.constprop.0+0xb2>
 80085ce:	3c37      	subs	r4, #55	; 0x37
 80085d0:	e7e2      	b.n	8008598 <_strtol_l.constprop.0+0x78>
 80085d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80085d6:	f1be 0f19 	cmp.w	lr, #25
 80085da:	d804      	bhi.n	80085e6 <_strtol_l.constprop.0+0xc6>
 80085dc:	3c57      	subs	r4, #87	; 0x57
 80085de:	e7db      	b.n	8008598 <_strtol_l.constprop.0+0x78>
 80085e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80085e4:	e7e6      	b.n	80085b4 <_strtol_l.constprop.0+0x94>
 80085e6:	f1bc 0f00 	cmp.w	ip, #0
 80085ea:	da05      	bge.n	80085f8 <_strtol_l.constprop.0+0xd8>
 80085ec:	2322      	movs	r3, #34	; 0x22
 80085ee:	6003      	str	r3, [r0, #0]
 80085f0:	4646      	mov	r6, r8
 80085f2:	b942      	cbnz	r2, 8008606 <_strtol_l.constprop.0+0xe6>
 80085f4:	4630      	mov	r0, r6
 80085f6:	e79e      	b.n	8008536 <_strtol_l.constprop.0+0x16>
 80085f8:	b107      	cbz	r7, 80085fc <_strtol_l.constprop.0+0xdc>
 80085fa:	4276      	negs	r6, r6
 80085fc:	2a00      	cmp	r2, #0
 80085fe:	d0f9      	beq.n	80085f4 <_strtol_l.constprop.0+0xd4>
 8008600:	f1bc 0f00 	cmp.w	ip, #0
 8008604:	d000      	beq.n	8008608 <_strtol_l.constprop.0+0xe8>
 8008606:	1e69      	subs	r1, r5, #1
 8008608:	6011      	str	r1, [r2, #0]
 800860a:	e7f3      	b.n	80085f4 <_strtol_l.constprop.0+0xd4>
 800860c:	2430      	movs	r4, #48	; 0x30
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1b1      	bne.n	8008576 <_strtol_l.constprop.0+0x56>
 8008612:	2308      	movs	r3, #8
 8008614:	e7af      	b.n	8008576 <_strtol_l.constprop.0+0x56>
 8008616:	2c30      	cmp	r4, #48	; 0x30
 8008618:	d0a5      	beq.n	8008566 <_strtol_l.constprop.0+0x46>
 800861a:	230a      	movs	r3, #10
 800861c:	e7ab      	b.n	8008576 <_strtol_l.constprop.0+0x56>
 800861e:	bf00      	nop
 8008620:	0800b5c9 	.word	0x0800b5c9

08008624 <_strtol_r>:
 8008624:	f7ff bf7c 	b.w	8008520 <_strtol_l.constprop.0>

08008628 <__swbuf_r>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	460e      	mov	r6, r1
 800862c:	4614      	mov	r4, r2
 800862e:	4605      	mov	r5, r0
 8008630:	b118      	cbz	r0, 800863a <__swbuf_r+0x12>
 8008632:	6983      	ldr	r3, [r0, #24]
 8008634:	b90b      	cbnz	r3, 800863a <__swbuf_r+0x12>
 8008636:	f001 f84b 	bl	80096d0 <__sinit>
 800863a:	4b21      	ldr	r3, [pc, #132]	; (80086c0 <__swbuf_r+0x98>)
 800863c:	429c      	cmp	r4, r3
 800863e:	d12b      	bne.n	8008698 <__swbuf_r+0x70>
 8008640:	686c      	ldr	r4, [r5, #4]
 8008642:	69a3      	ldr	r3, [r4, #24]
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	071a      	lsls	r2, r3, #28
 800864a:	d52f      	bpl.n	80086ac <__swbuf_r+0x84>
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	b36b      	cbz	r3, 80086ac <__swbuf_r+0x84>
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	6820      	ldr	r0, [r4, #0]
 8008654:	1ac0      	subs	r0, r0, r3
 8008656:	6963      	ldr	r3, [r4, #20]
 8008658:	b2f6      	uxtb	r6, r6
 800865a:	4283      	cmp	r3, r0
 800865c:	4637      	mov	r7, r6
 800865e:	dc04      	bgt.n	800866a <__swbuf_r+0x42>
 8008660:	4621      	mov	r1, r4
 8008662:	4628      	mov	r0, r5
 8008664:	f000 ffa0 	bl	80095a8 <_fflush_r>
 8008668:	bb30      	cbnz	r0, 80086b8 <__swbuf_r+0x90>
 800866a:	68a3      	ldr	r3, [r4, #8]
 800866c:	3b01      	subs	r3, #1
 800866e:	60a3      	str	r3, [r4, #8]
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	701e      	strb	r6, [r3, #0]
 8008678:	6963      	ldr	r3, [r4, #20]
 800867a:	3001      	adds	r0, #1
 800867c:	4283      	cmp	r3, r0
 800867e:	d004      	beq.n	800868a <__swbuf_r+0x62>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	07db      	lsls	r3, r3, #31
 8008684:	d506      	bpl.n	8008694 <__swbuf_r+0x6c>
 8008686:	2e0a      	cmp	r6, #10
 8008688:	d104      	bne.n	8008694 <__swbuf_r+0x6c>
 800868a:	4621      	mov	r1, r4
 800868c:	4628      	mov	r0, r5
 800868e:	f000 ff8b 	bl	80095a8 <_fflush_r>
 8008692:	b988      	cbnz	r0, 80086b8 <__swbuf_r+0x90>
 8008694:	4638      	mov	r0, r7
 8008696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008698:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <__swbuf_r+0x9c>)
 800869a:	429c      	cmp	r4, r3
 800869c:	d101      	bne.n	80086a2 <__swbuf_r+0x7a>
 800869e:	68ac      	ldr	r4, [r5, #8]
 80086a0:	e7cf      	b.n	8008642 <__swbuf_r+0x1a>
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <__swbuf_r+0xa0>)
 80086a4:	429c      	cmp	r4, r3
 80086a6:	bf08      	it	eq
 80086a8:	68ec      	ldreq	r4, [r5, #12]
 80086aa:	e7ca      	b.n	8008642 <__swbuf_r+0x1a>
 80086ac:	4621      	mov	r1, r4
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 f80c 	bl	80086cc <__swsetup_r>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d0cb      	beq.n	8008650 <__swbuf_r+0x28>
 80086b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80086bc:	e7ea      	b.n	8008694 <__swbuf_r+0x6c>
 80086be:	bf00      	nop
 80086c0:	0800b77c 	.word	0x0800b77c
 80086c4:	0800b79c 	.word	0x0800b79c
 80086c8:	0800b75c 	.word	0x0800b75c

080086cc <__swsetup_r>:
 80086cc:	4b32      	ldr	r3, [pc, #200]	; (8008798 <__swsetup_r+0xcc>)
 80086ce:	b570      	push	{r4, r5, r6, lr}
 80086d0:	681d      	ldr	r5, [r3, #0]
 80086d2:	4606      	mov	r6, r0
 80086d4:	460c      	mov	r4, r1
 80086d6:	b125      	cbz	r5, 80086e2 <__swsetup_r+0x16>
 80086d8:	69ab      	ldr	r3, [r5, #24]
 80086da:	b913      	cbnz	r3, 80086e2 <__swsetup_r+0x16>
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 fff7 	bl	80096d0 <__sinit>
 80086e2:	4b2e      	ldr	r3, [pc, #184]	; (800879c <__swsetup_r+0xd0>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	d10f      	bne.n	8008708 <__swsetup_r+0x3c>
 80086e8:	686c      	ldr	r4, [r5, #4]
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f0:	0719      	lsls	r1, r3, #28
 80086f2:	d42c      	bmi.n	800874e <__swsetup_r+0x82>
 80086f4:	06dd      	lsls	r5, r3, #27
 80086f6:	d411      	bmi.n	800871c <__swsetup_r+0x50>
 80086f8:	2309      	movs	r3, #9
 80086fa:	6033      	str	r3, [r6, #0]
 80086fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008700:	81a3      	strh	r3, [r4, #12]
 8008702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008706:	e03e      	b.n	8008786 <__swsetup_r+0xba>
 8008708:	4b25      	ldr	r3, [pc, #148]	; (80087a0 <__swsetup_r+0xd4>)
 800870a:	429c      	cmp	r4, r3
 800870c:	d101      	bne.n	8008712 <__swsetup_r+0x46>
 800870e:	68ac      	ldr	r4, [r5, #8]
 8008710:	e7eb      	b.n	80086ea <__swsetup_r+0x1e>
 8008712:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <__swsetup_r+0xd8>)
 8008714:	429c      	cmp	r4, r3
 8008716:	bf08      	it	eq
 8008718:	68ec      	ldreq	r4, [r5, #12]
 800871a:	e7e6      	b.n	80086ea <__swsetup_r+0x1e>
 800871c:	0758      	lsls	r0, r3, #29
 800871e:	d512      	bpl.n	8008746 <__swsetup_r+0x7a>
 8008720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008722:	b141      	cbz	r1, 8008736 <__swsetup_r+0x6a>
 8008724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008728:	4299      	cmp	r1, r3
 800872a:	d002      	beq.n	8008732 <__swsetup_r+0x66>
 800872c:	4630      	mov	r0, r6
 800872e:	f002 f947 	bl	800a9c0 <_free_r>
 8008732:	2300      	movs	r3, #0
 8008734:	6363      	str	r3, [r4, #52]	; 0x34
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	2300      	movs	r3, #0
 8008740:	6063      	str	r3, [r4, #4]
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	f043 0308 	orr.w	r3, r3, #8
 800874c:	81a3      	strh	r3, [r4, #12]
 800874e:	6923      	ldr	r3, [r4, #16]
 8008750:	b94b      	cbnz	r3, 8008766 <__swsetup_r+0x9a>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800875c:	d003      	beq.n	8008766 <__swsetup_r+0x9a>
 800875e:	4621      	mov	r1, r4
 8008760:	4630      	mov	r0, r6
 8008762:	f001 fbed 	bl	8009f40 <__smakebuf_r>
 8008766:	89a0      	ldrh	r0, [r4, #12]
 8008768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800876c:	f010 0301 	ands.w	r3, r0, #1
 8008770:	d00a      	beq.n	8008788 <__swsetup_r+0xbc>
 8008772:	2300      	movs	r3, #0
 8008774:	60a3      	str	r3, [r4, #8]
 8008776:	6963      	ldr	r3, [r4, #20]
 8008778:	425b      	negs	r3, r3
 800877a:	61a3      	str	r3, [r4, #24]
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	b943      	cbnz	r3, 8008792 <__swsetup_r+0xc6>
 8008780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008784:	d1ba      	bne.n	80086fc <__swsetup_r+0x30>
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	0781      	lsls	r1, r0, #30
 800878a:	bf58      	it	pl
 800878c:	6963      	ldrpl	r3, [r4, #20]
 800878e:	60a3      	str	r3, [r4, #8]
 8008790:	e7f4      	b.n	800877c <__swsetup_r+0xb0>
 8008792:	2000      	movs	r0, #0
 8008794:	e7f7      	b.n	8008786 <__swsetup_r+0xba>
 8008796:	bf00      	nop
 8008798:	2000000c 	.word	0x2000000c
 800879c:	0800b77c 	.word	0x0800b77c
 80087a0:	0800b79c 	.word	0x0800b79c
 80087a4:	0800b75c 	.word	0x0800b75c

080087a8 <quorem>:
 80087a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	6903      	ldr	r3, [r0, #16]
 80087ae:	690c      	ldr	r4, [r1, #16]
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	4607      	mov	r7, r0
 80087b4:	f2c0 8081 	blt.w	80088ba <quorem+0x112>
 80087b8:	3c01      	subs	r4, #1
 80087ba:	f101 0814 	add.w	r8, r1, #20
 80087be:	f100 0514 	add.w	r5, r0, #20
 80087c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087d0:	3301      	adds	r3, #1
 80087d2:	429a      	cmp	r2, r3
 80087d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80087e0:	d331      	bcc.n	8008846 <quorem+0x9e>
 80087e2:	f04f 0e00 	mov.w	lr, #0
 80087e6:	4640      	mov	r0, r8
 80087e8:	46ac      	mov	ip, r5
 80087ea:	46f2      	mov	sl, lr
 80087ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80087f0:	b293      	uxth	r3, r2
 80087f2:	fb06 e303 	mla	r3, r6, r3, lr
 80087f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	ebaa 0303 	sub.w	r3, sl, r3
 8008800:	f8dc a000 	ldr.w	sl, [ip]
 8008804:	0c12      	lsrs	r2, r2, #16
 8008806:	fa13 f38a 	uxtah	r3, r3, sl
 800880a:	fb06 e202 	mla	r2, r6, r2, lr
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	9b00      	ldr	r3, [sp, #0]
 8008812:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008816:	b292      	uxth	r2, r2
 8008818:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800881c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008820:	f8bd 3000 	ldrh.w	r3, [sp]
 8008824:	4581      	cmp	r9, r0
 8008826:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800882a:	f84c 3b04 	str.w	r3, [ip], #4
 800882e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008832:	d2db      	bcs.n	80087ec <quorem+0x44>
 8008834:	f855 300b 	ldr.w	r3, [r5, fp]
 8008838:	b92b      	cbnz	r3, 8008846 <quorem+0x9e>
 800883a:	9b01      	ldr	r3, [sp, #4]
 800883c:	3b04      	subs	r3, #4
 800883e:	429d      	cmp	r5, r3
 8008840:	461a      	mov	r2, r3
 8008842:	d32e      	bcc.n	80088a2 <quorem+0xfa>
 8008844:	613c      	str	r4, [r7, #16]
 8008846:	4638      	mov	r0, r7
 8008848:	f001 feae 	bl	800a5a8 <__mcmp>
 800884c:	2800      	cmp	r0, #0
 800884e:	db24      	blt.n	800889a <quorem+0xf2>
 8008850:	3601      	adds	r6, #1
 8008852:	4628      	mov	r0, r5
 8008854:	f04f 0c00 	mov.w	ip, #0
 8008858:	f858 2b04 	ldr.w	r2, [r8], #4
 800885c:	f8d0 e000 	ldr.w	lr, [r0]
 8008860:	b293      	uxth	r3, r2
 8008862:	ebac 0303 	sub.w	r3, ip, r3
 8008866:	0c12      	lsrs	r2, r2, #16
 8008868:	fa13 f38e 	uxtah	r3, r3, lr
 800886c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008874:	b29b      	uxth	r3, r3
 8008876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800887a:	45c1      	cmp	r9, r8
 800887c:	f840 3b04 	str.w	r3, [r0], #4
 8008880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008884:	d2e8      	bcs.n	8008858 <quorem+0xb0>
 8008886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800888a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800888e:	b922      	cbnz	r2, 800889a <quorem+0xf2>
 8008890:	3b04      	subs	r3, #4
 8008892:	429d      	cmp	r5, r3
 8008894:	461a      	mov	r2, r3
 8008896:	d30a      	bcc.n	80088ae <quorem+0x106>
 8008898:	613c      	str	r4, [r7, #16]
 800889a:	4630      	mov	r0, r6
 800889c:	b003      	add	sp, #12
 800889e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a2:	6812      	ldr	r2, [r2, #0]
 80088a4:	3b04      	subs	r3, #4
 80088a6:	2a00      	cmp	r2, #0
 80088a8:	d1cc      	bne.n	8008844 <quorem+0x9c>
 80088aa:	3c01      	subs	r4, #1
 80088ac:	e7c7      	b.n	800883e <quorem+0x96>
 80088ae:	6812      	ldr	r2, [r2, #0]
 80088b0:	3b04      	subs	r3, #4
 80088b2:	2a00      	cmp	r2, #0
 80088b4:	d1f0      	bne.n	8008898 <quorem+0xf0>
 80088b6:	3c01      	subs	r4, #1
 80088b8:	e7eb      	b.n	8008892 <quorem+0xea>
 80088ba:	2000      	movs	r0, #0
 80088bc:	e7ee      	b.n	800889c <quorem+0xf4>
	...

080088c0 <_dtoa_r>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ed2d 8b04 	vpush	{d8-d9}
 80088c8:	ec57 6b10 	vmov	r6, r7, d0
 80088cc:	b093      	sub	sp, #76	; 0x4c
 80088ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088d4:	9106      	str	r1, [sp, #24]
 80088d6:	ee10 aa10 	vmov	sl, s0
 80088da:	4604      	mov	r4, r0
 80088dc:	9209      	str	r2, [sp, #36]	; 0x24
 80088de:	930c      	str	r3, [sp, #48]	; 0x30
 80088e0:	46bb      	mov	fp, r7
 80088e2:	b975      	cbnz	r5, 8008902 <_dtoa_r+0x42>
 80088e4:	2010      	movs	r0, #16
 80088e6:	f001 fb6b 	bl	8009fc0 <malloc>
 80088ea:	4602      	mov	r2, r0
 80088ec:	6260      	str	r0, [r4, #36]	; 0x24
 80088ee:	b920      	cbnz	r0, 80088fa <_dtoa_r+0x3a>
 80088f0:	4ba7      	ldr	r3, [pc, #668]	; (8008b90 <_dtoa_r+0x2d0>)
 80088f2:	21ea      	movs	r1, #234	; 0xea
 80088f4:	48a7      	ldr	r0, [pc, #668]	; (8008b94 <_dtoa_r+0x2d4>)
 80088f6:	f002 fb2d 	bl	800af54 <__assert_func>
 80088fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088fe:	6005      	str	r5, [r0, #0]
 8008900:	60c5      	str	r5, [r0, #12]
 8008902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008904:	6819      	ldr	r1, [r3, #0]
 8008906:	b151      	cbz	r1, 800891e <_dtoa_r+0x5e>
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	604a      	str	r2, [r1, #4]
 800890c:	2301      	movs	r3, #1
 800890e:	4093      	lsls	r3, r2
 8008910:	608b      	str	r3, [r1, #8]
 8008912:	4620      	mov	r0, r4
 8008914:	f001 fbbc 	bl	800a090 <_Bfree>
 8008918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800891a:	2200      	movs	r2, #0
 800891c:	601a      	str	r2, [r3, #0]
 800891e:	1e3b      	subs	r3, r7, #0
 8008920:	bfaa      	itet	ge
 8008922:	2300      	movge	r3, #0
 8008924:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008928:	f8c8 3000 	strge.w	r3, [r8]
 800892c:	4b9a      	ldr	r3, [pc, #616]	; (8008b98 <_dtoa_r+0x2d8>)
 800892e:	bfbc      	itt	lt
 8008930:	2201      	movlt	r2, #1
 8008932:	f8c8 2000 	strlt.w	r2, [r8]
 8008936:	ea33 030b 	bics.w	r3, r3, fp
 800893a:	d11b      	bne.n	8008974 <_dtoa_r+0xb4>
 800893c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800893e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008948:	4333      	orrs	r3, r6
 800894a:	f000 8592 	beq.w	8009472 <_dtoa_r+0xbb2>
 800894e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008950:	b963      	cbnz	r3, 800896c <_dtoa_r+0xac>
 8008952:	4b92      	ldr	r3, [pc, #584]	; (8008b9c <_dtoa_r+0x2dc>)
 8008954:	e022      	b.n	800899c <_dtoa_r+0xdc>
 8008956:	4b92      	ldr	r3, [pc, #584]	; (8008ba0 <_dtoa_r+0x2e0>)
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	3308      	adds	r3, #8
 800895c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800895e:	6013      	str	r3, [r2, #0]
 8008960:	9801      	ldr	r0, [sp, #4]
 8008962:	b013      	add	sp, #76	; 0x4c
 8008964:	ecbd 8b04 	vpop	{d8-d9}
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	4b8b      	ldr	r3, [pc, #556]	; (8008b9c <_dtoa_r+0x2dc>)
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	3303      	adds	r3, #3
 8008972:	e7f3      	b.n	800895c <_dtoa_r+0x9c>
 8008974:	2200      	movs	r2, #0
 8008976:	2300      	movs	r3, #0
 8008978:	4650      	mov	r0, sl
 800897a:	4659      	mov	r1, fp
 800897c:	f7f8 f8a4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008980:	ec4b ab19 	vmov	d9, sl, fp
 8008984:	4680      	mov	r8, r0
 8008986:	b158      	cbz	r0, 80089a0 <_dtoa_r+0xe0>
 8008988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800898a:	2301      	movs	r3, #1
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 856b 	beq.w	800946c <_dtoa_r+0xbac>
 8008996:	4883      	ldr	r0, [pc, #524]	; (8008ba4 <_dtoa_r+0x2e4>)
 8008998:	6018      	str	r0, [r3, #0]
 800899a:	1e43      	subs	r3, r0, #1
 800899c:	9301      	str	r3, [sp, #4]
 800899e:	e7df      	b.n	8008960 <_dtoa_r+0xa0>
 80089a0:	ec4b ab10 	vmov	d0, sl, fp
 80089a4:	aa10      	add	r2, sp, #64	; 0x40
 80089a6:	a911      	add	r1, sp, #68	; 0x44
 80089a8:	4620      	mov	r0, r4
 80089aa:	f001 ff1f 	bl	800a7ec <__d2b>
 80089ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80089b2:	ee08 0a10 	vmov	s16, r0
 80089b6:	2d00      	cmp	r5, #0
 80089b8:	f000 8084 	beq.w	8008ac4 <_dtoa_r+0x204>
 80089bc:	ee19 3a90 	vmov	r3, s19
 80089c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80089c8:	4656      	mov	r6, sl
 80089ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80089ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80089d6:	4b74      	ldr	r3, [pc, #464]	; (8008ba8 <_dtoa_r+0x2e8>)
 80089d8:	2200      	movs	r2, #0
 80089da:	4630      	mov	r0, r6
 80089dc:	4639      	mov	r1, r7
 80089de:	f7f7 fc53 	bl	8000288 <__aeabi_dsub>
 80089e2:	a365      	add	r3, pc, #404	; (adr r3, 8008b78 <_dtoa_r+0x2b8>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f7f7 fe06 	bl	80005f8 <__aeabi_dmul>
 80089ec:	a364      	add	r3, pc, #400	; (adr r3, 8008b80 <_dtoa_r+0x2c0>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f7f7 fc4b 	bl	800028c <__adddf3>
 80089f6:	4606      	mov	r6, r0
 80089f8:	4628      	mov	r0, r5
 80089fa:	460f      	mov	r7, r1
 80089fc:	f7f7 fd92 	bl	8000524 <__aeabi_i2d>
 8008a00:	a361      	add	r3, pc, #388	; (adr r3, 8008b88 <_dtoa_r+0x2c8>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f7f7 fdf7 	bl	80005f8 <__aeabi_dmul>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4630      	mov	r0, r6
 8008a10:	4639      	mov	r1, r7
 8008a12:	f7f7 fc3b 	bl	800028c <__adddf3>
 8008a16:	4606      	mov	r6, r0
 8008a18:	460f      	mov	r7, r1
 8008a1a:	f7f8 f89d 	bl	8000b58 <__aeabi_d2iz>
 8008a1e:	2200      	movs	r2, #0
 8008a20:	9000      	str	r0, [sp, #0]
 8008a22:	2300      	movs	r3, #0
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f7f8 f858 	bl	8000adc <__aeabi_dcmplt>
 8008a2c:	b150      	cbz	r0, 8008a44 <_dtoa_r+0x184>
 8008a2e:	9800      	ldr	r0, [sp, #0]
 8008a30:	f7f7 fd78 	bl	8000524 <__aeabi_i2d>
 8008a34:	4632      	mov	r2, r6
 8008a36:	463b      	mov	r3, r7
 8008a38:	f7f8 f846 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a3c:	b910      	cbnz	r0, 8008a44 <_dtoa_r+0x184>
 8008a3e:	9b00      	ldr	r3, [sp, #0]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	9b00      	ldr	r3, [sp, #0]
 8008a46:	2b16      	cmp	r3, #22
 8008a48:	d85a      	bhi.n	8008b00 <_dtoa_r+0x240>
 8008a4a:	9a00      	ldr	r2, [sp, #0]
 8008a4c:	4b57      	ldr	r3, [pc, #348]	; (8008bac <_dtoa_r+0x2ec>)
 8008a4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	ec51 0b19 	vmov	r0, r1, d9
 8008a5a:	f7f8 f83f 	bl	8000adc <__aeabi_dcmplt>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d050      	beq.n	8008b04 <_dtoa_r+0x244>
 8008a62:	9b00      	ldr	r3, [sp, #0]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	2300      	movs	r3, #0
 8008a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a6e:	1b5d      	subs	r5, r3, r5
 8008a70:	1e6b      	subs	r3, r5, #1
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	bf45      	ittet	mi
 8008a76:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a7a:	9304      	strmi	r3, [sp, #16]
 8008a7c:	2300      	movpl	r3, #0
 8008a7e:	2300      	movmi	r3, #0
 8008a80:	bf4c      	ite	mi
 8008a82:	9305      	strmi	r3, [sp, #20]
 8008a84:	9304      	strpl	r3, [sp, #16]
 8008a86:	9b00      	ldr	r3, [sp, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	db3d      	blt.n	8008b08 <_dtoa_r+0x248>
 8008a8c:	9b05      	ldr	r3, [sp, #20]
 8008a8e:	9a00      	ldr	r2, [sp, #0]
 8008a90:	920a      	str	r2, [sp, #40]	; 0x28
 8008a92:	4413      	add	r3, r2
 8008a94:	9305      	str	r3, [sp, #20]
 8008a96:	2300      	movs	r3, #0
 8008a98:	9307      	str	r3, [sp, #28]
 8008a9a:	9b06      	ldr	r3, [sp, #24]
 8008a9c:	2b09      	cmp	r3, #9
 8008a9e:	f200 8089 	bhi.w	8008bb4 <_dtoa_r+0x2f4>
 8008aa2:	2b05      	cmp	r3, #5
 8008aa4:	bfc4      	itt	gt
 8008aa6:	3b04      	subgt	r3, #4
 8008aa8:	9306      	strgt	r3, [sp, #24]
 8008aaa:	9b06      	ldr	r3, [sp, #24]
 8008aac:	f1a3 0302 	sub.w	r3, r3, #2
 8008ab0:	bfcc      	ite	gt
 8008ab2:	2500      	movgt	r5, #0
 8008ab4:	2501      	movle	r5, #1
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	f200 8087 	bhi.w	8008bca <_dtoa_r+0x30a>
 8008abc:	e8df f003 	tbb	[pc, r3]
 8008ac0:	59383a2d 	.word	0x59383a2d
 8008ac4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ac8:	441d      	add	r5, r3
 8008aca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ace:	2b20      	cmp	r3, #32
 8008ad0:	bfc1      	itttt	gt
 8008ad2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ad6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ada:	fa0b f303 	lslgt.w	r3, fp, r3
 8008ade:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ae2:	bfda      	itte	le
 8008ae4:	f1c3 0320 	rsble	r3, r3, #32
 8008ae8:	fa06 f003 	lslle.w	r0, r6, r3
 8008aec:	4318      	orrgt	r0, r3
 8008aee:	f7f7 fd09 	bl	8000504 <__aeabi_ui2d>
 8008af2:	2301      	movs	r3, #1
 8008af4:	4606      	mov	r6, r0
 8008af6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008afa:	3d01      	subs	r5, #1
 8008afc:	930e      	str	r3, [sp, #56]	; 0x38
 8008afe:	e76a      	b.n	80089d6 <_dtoa_r+0x116>
 8008b00:	2301      	movs	r3, #1
 8008b02:	e7b2      	b.n	8008a6a <_dtoa_r+0x1aa>
 8008b04:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b06:	e7b1      	b.n	8008a6c <_dtoa_r+0x1ac>
 8008b08:	9b04      	ldr	r3, [sp, #16]
 8008b0a:	9a00      	ldr	r2, [sp, #0]
 8008b0c:	1a9b      	subs	r3, r3, r2
 8008b0e:	9304      	str	r3, [sp, #16]
 8008b10:	4253      	negs	r3, r2
 8008b12:	9307      	str	r3, [sp, #28]
 8008b14:	2300      	movs	r3, #0
 8008b16:	930a      	str	r3, [sp, #40]	; 0x28
 8008b18:	e7bf      	b.n	8008a9a <_dtoa_r+0x1da>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9308      	str	r3, [sp, #32]
 8008b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	dc55      	bgt.n	8008bd0 <_dtoa_r+0x310>
 8008b24:	2301      	movs	r3, #1
 8008b26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b2e:	e00c      	b.n	8008b4a <_dtoa_r+0x28a>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e7f3      	b.n	8008b1c <_dtoa_r+0x25c>
 8008b34:	2300      	movs	r3, #0
 8008b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b38:	9308      	str	r3, [sp, #32]
 8008b3a:	9b00      	ldr	r3, [sp, #0]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	9302      	str	r3, [sp, #8]
 8008b40:	3301      	adds	r3, #1
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	9303      	str	r3, [sp, #12]
 8008b46:	bfb8      	it	lt
 8008b48:	2301      	movlt	r3, #1
 8008b4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	6042      	str	r2, [r0, #4]
 8008b50:	2204      	movs	r2, #4
 8008b52:	f102 0614 	add.w	r6, r2, #20
 8008b56:	429e      	cmp	r6, r3
 8008b58:	6841      	ldr	r1, [r0, #4]
 8008b5a:	d93d      	bls.n	8008bd8 <_dtoa_r+0x318>
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f001 fa57 	bl	800a010 <_Balloc>
 8008b62:	9001      	str	r0, [sp, #4]
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d13b      	bne.n	8008be0 <_dtoa_r+0x320>
 8008b68:	4b11      	ldr	r3, [pc, #68]	; (8008bb0 <_dtoa_r+0x2f0>)
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b70:	e6c0      	b.n	80088f4 <_dtoa_r+0x34>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e7df      	b.n	8008b36 <_dtoa_r+0x276>
 8008b76:	bf00      	nop
 8008b78:	636f4361 	.word	0x636f4361
 8008b7c:	3fd287a7 	.word	0x3fd287a7
 8008b80:	8b60c8b3 	.word	0x8b60c8b3
 8008b84:	3fc68a28 	.word	0x3fc68a28
 8008b88:	509f79fb 	.word	0x509f79fb
 8008b8c:	3fd34413 	.word	0x3fd34413
 8008b90:	0800b6d6 	.word	0x0800b6d6
 8008b94:	0800b6ed 	.word	0x0800b6ed
 8008b98:	7ff00000 	.word	0x7ff00000
 8008b9c:	0800b6d2 	.word	0x0800b6d2
 8008ba0:	0800b6c9 	.word	0x0800b6c9
 8008ba4:	0800b549 	.word	0x0800b549
 8008ba8:	3ff80000 	.word	0x3ff80000
 8008bac:	0800b8c0 	.word	0x0800b8c0
 8008bb0:	0800b748 	.word	0x0800b748
 8008bb4:	2501      	movs	r5, #1
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	9306      	str	r3, [sp, #24]
 8008bba:	9508      	str	r5, [sp, #32]
 8008bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bc0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2312      	movs	r3, #18
 8008bc8:	e7b0      	b.n	8008b2c <_dtoa_r+0x26c>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	9308      	str	r3, [sp, #32]
 8008bce:	e7f5      	b.n	8008bbc <_dtoa_r+0x2fc>
 8008bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bd6:	e7b8      	b.n	8008b4a <_dtoa_r+0x28a>
 8008bd8:	3101      	adds	r1, #1
 8008bda:	6041      	str	r1, [r0, #4]
 8008bdc:	0052      	lsls	r2, r2, #1
 8008bde:	e7b8      	b.n	8008b52 <_dtoa_r+0x292>
 8008be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008be2:	9a01      	ldr	r2, [sp, #4]
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	2b0e      	cmp	r3, #14
 8008bea:	f200 809d 	bhi.w	8008d28 <_dtoa_r+0x468>
 8008bee:	2d00      	cmp	r5, #0
 8008bf0:	f000 809a 	beq.w	8008d28 <_dtoa_r+0x468>
 8008bf4:	9b00      	ldr	r3, [sp, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	dd32      	ble.n	8008c60 <_dtoa_r+0x3a0>
 8008bfa:	4ab7      	ldr	r2, [pc, #732]	; (8008ed8 <_dtoa_r+0x618>)
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c08:	9b00      	ldr	r3, [sp, #0]
 8008c0a:	05d8      	lsls	r0, r3, #23
 8008c0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008c10:	d516      	bpl.n	8008c40 <_dtoa_r+0x380>
 8008c12:	4bb2      	ldr	r3, [pc, #712]	; (8008edc <_dtoa_r+0x61c>)
 8008c14:	ec51 0b19 	vmov	r0, r1, d9
 8008c18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c1c:	f7f7 fe16 	bl	800084c <__aeabi_ddiv>
 8008c20:	f007 070f 	and.w	r7, r7, #15
 8008c24:	4682      	mov	sl, r0
 8008c26:	468b      	mov	fp, r1
 8008c28:	2503      	movs	r5, #3
 8008c2a:	4eac      	ldr	r6, [pc, #688]	; (8008edc <_dtoa_r+0x61c>)
 8008c2c:	b957      	cbnz	r7, 8008c44 <_dtoa_r+0x384>
 8008c2e:	4642      	mov	r2, r8
 8008c30:	464b      	mov	r3, r9
 8008c32:	4650      	mov	r0, sl
 8008c34:	4659      	mov	r1, fp
 8008c36:	f7f7 fe09 	bl	800084c <__aeabi_ddiv>
 8008c3a:	4682      	mov	sl, r0
 8008c3c:	468b      	mov	fp, r1
 8008c3e:	e028      	b.n	8008c92 <_dtoa_r+0x3d2>
 8008c40:	2502      	movs	r5, #2
 8008c42:	e7f2      	b.n	8008c2a <_dtoa_r+0x36a>
 8008c44:	07f9      	lsls	r1, r7, #31
 8008c46:	d508      	bpl.n	8008c5a <_dtoa_r+0x39a>
 8008c48:	4640      	mov	r0, r8
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c50:	f7f7 fcd2 	bl	80005f8 <__aeabi_dmul>
 8008c54:	3501      	adds	r5, #1
 8008c56:	4680      	mov	r8, r0
 8008c58:	4689      	mov	r9, r1
 8008c5a:	107f      	asrs	r7, r7, #1
 8008c5c:	3608      	adds	r6, #8
 8008c5e:	e7e5      	b.n	8008c2c <_dtoa_r+0x36c>
 8008c60:	f000 809b 	beq.w	8008d9a <_dtoa_r+0x4da>
 8008c64:	9b00      	ldr	r3, [sp, #0]
 8008c66:	4f9d      	ldr	r7, [pc, #628]	; (8008edc <_dtoa_r+0x61c>)
 8008c68:	425e      	negs	r6, r3
 8008c6a:	4b9b      	ldr	r3, [pc, #620]	; (8008ed8 <_dtoa_r+0x618>)
 8008c6c:	f006 020f 	and.w	r2, r6, #15
 8008c70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	ec51 0b19 	vmov	r0, r1, d9
 8008c7c:	f7f7 fcbc 	bl	80005f8 <__aeabi_dmul>
 8008c80:	1136      	asrs	r6, r6, #4
 8008c82:	4682      	mov	sl, r0
 8008c84:	468b      	mov	fp, r1
 8008c86:	2300      	movs	r3, #0
 8008c88:	2502      	movs	r5, #2
 8008c8a:	2e00      	cmp	r6, #0
 8008c8c:	d17a      	bne.n	8008d84 <_dtoa_r+0x4c4>
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1d3      	bne.n	8008c3a <_dtoa_r+0x37a>
 8008c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 8082 	beq.w	8008d9e <_dtoa_r+0x4de>
 8008c9a:	4b91      	ldr	r3, [pc, #580]	; (8008ee0 <_dtoa_r+0x620>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4650      	mov	r0, sl
 8008ca0:	4659      	mov	r1, fp
 8008ca2:	f7f7 ff1b 	bl	8000adc <__aeabi_dcmplt>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d079      	beq.n	8008d9e <_dtoa_r+0x4de>
 8008caa:	9b03      	ldr	r3, [sp, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d076      	beq.n	8008d9e <_dtoa_r+0x4de>
 8008cb0:	9b02      	ldr	r3, [sp, #8]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	dd36      	ble.n	8008d24 <_dtoa_r+0x464>
 8008cb6:	9b00      	ldr	r3, [sp, #0]
 8008cb8:	4650      	mov	r0, sl
 8008cba:	4659      	mov	r1, fp
 8008cbc:	1e5f      	subs	r7, r3, #1
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	4b88      	ldr	r3, [pc, #544]	; (8008ee4 <_dtoa_r+0x624>)
 8008cc2:	f7f7 fc99 	bl	80005f8 <__aeabi_dmul>
 8008cc6:	9e02      	ldr	r6, [sp, #8]
 8008cc8:	4682      	mov	sl, r0
 8008cca:	468b      	mov	fp, r1
 8008ccc:	3501      	adds	r5, #1
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f7f7 fc28 	bl	8000524 <__aeabi_i2d>
 8008cd4:	4652      	mov	r2, sl
 8008cd6:	465b      	mov	r3, fp
 8008cd8:	f7f7 fc8e 	bl	80005f8 <__aeabi_dmul>
 8008cdc:	4b82      	ldr	r3, [pc, #520]	; (8008ee8 <_dtoa_r+0x628>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f7f7 fad4 	bl	800028c <__adddf3>
 8008ce4:	46d0      	mov	r8, sl
 8008ce6:	46d9      	mov	r9, fp
 8008ce8:	4682      	mov	sl, r0
 8008cea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008cee:	2e00      	cmp	r6, #0
 8008cf0:	d158      	bne.n	8008da4 <_dtoa_r+0x4e4>
 8008cf2:	4b7e      	ldr	r3, [pc, #504]	; (8008eec <_dtoa_r+0x62c>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	4649      	mov	r1, r9
 8008cfa:	f7f7 fac5 	bl	8000288 <__aeabi_dsub>
 8008cfe:	4652      	mov	r2, sl
 8008d00:	465b      	mov	r3, fp
 8008d02:	4680      	mov	r8, r0
 8008d04:	4689      	mov	r9, r1
 8008d06:	f7f7 ff07 	bl	8000b18 <__aeabi_dcmpgt>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	f040 8295 	bne.w	800923a <_dtoa_r+0x97a>
 8008d10:	4652      	mov	r2, sl
 8008d12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d16:	4640      	mov	r0, r8
 8008d18:	4649      	mov	r1, r9
 8008d1a:	f7f7 fedf 	bl	8000adc <__aeabi_dcmplt>
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	f040 8289 	bne.w	8009236 <_dtoa_r+0x976>
 8008d24:	ec5b ab19 	vmov	sl, fp, d9
 8008d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f2c0 8148 	blt.w	8008fc0 <_dtoa_r+0x700>
 8008d30:	9a00      	ldr	r2, [sp, #0]
 8008d32:	2a0e      	cmp	r2, #14
 8008d34:	f300 8144 	bgt.w	8008fc0 <_dtoa_r+0x700>
 8008d38:	4b67      	ldr	r3, [pc, #412]	; (8008ed8 <_dtoa_r+0x618>)
 8008d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f280 80d5 	bge.w	8008ef4 <_dtoa_r+0x634>
 8008d4a:	9b03      	ldr	r3, [sp, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f300 80d1 	bgt.w	8008ef4 <_dtoa_r+0x634>
 8008d52:	f040 826f 	bne.w	8009234 <_dtoa_r+0x974>
 8008d56:	4b65      	ldr	r3, [pc, #404]	; (8008eec <_dtoa_r+0x62c>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	4649      	mov	r1, r9
 8008d5e:	f7f7 fc4b 	bl	80005f8 <__aeabi_dmul>
 8008d62:	4652      	mov	r2, sl
 8008d64:	465b      	mov	r3, fp
 8008d66:	f7f7 fecd 	bl	8000b04 <__aeabi_dcmpge>
 8008d6a:	9e03      	ldr	r6, [sp, #12]
 8008d6c:	4637      	mov	r7, r6
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	f040 8245 	bne.w	80091fe <_dtoa_r+0x93e>
 8008d74:	9d01      	ldr	r5, [sp, #4]
 8008d76:	2331      	movs	r3, #49	; 0x31
 8008d78:	f805 3b01 	strb.w	r3, [r5], #1
 8008d7c:	9b00      	ldr	r3, [sp, #0]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	e240      	b.n	8009206 <_dtoa_r+0x946>
 8008d84:	07f2      	lsls	r2, r6, #31
 8008d86:	d505      	bpl.n	8008d94 <_dtoa_r+0x4d4>
 8008d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d8c:	f7f7 fc34 	bl	80005f8 <__aeabi_dmul>
 8008d90:	3501      	adds	r5, #1
 8008d92:	2301      	movs	r3, #1
 8008d94:	1076      	asrs	r6, r6, #1
 8008d96:	3708      	adds	r7, #8
 8008d98:	e777      	b.n	8008c8a <_dtoa_r+0x3ca>
 8008d9a:	2502      	movs	r5, #2
 8008d9c:	e779      	b.n	8008c92 <_dtoa_r+0x3d2>
 8008d9e:	9f00      	ldr	r7, [sp, #0]
 8008da0:	9e03      	ldr	r6, [sp, #12]
 8008da2:	e794      	b.n	8008cce <_dtoa_r+0x40e>
 8008da4:	9901      	ldr	r1, [sp, #4]
 8008da6:	4b4c      	ldr	r3, [pc, #304]	; (8008ed8 <_dtoa_r+0x618>)
 8008da8:	4431      	add	r1, r6
 8008daa:	910d      	str	r1, [sp, #52]	; 0x34
 8008dac:	9908      	ldr	r1, [sp, #32]
 8008dae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008db2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008db6:	2900      	cmp	r1, #0
 8008db8:	d043      	beq.n	8008e42 <_dtoa_r+0x582>
 8008dba:	494d      	ldr	r1, [pc, #308]	; (8008ef0 <_dtoa_r+0x630>)
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	f7f7 fd45 	bl	800084c <__aeabi_ddiv>
 8008dc2:	4652      	mov	r2, sl
 8008dc4:	465b      	mov	r3, fp
 8008dc6:	f7f7 fa5f 	bl	8000288 <__aeabi_dsub>
 8008dca:	9d01      	ldr	r5, [sp, #4]
 8008dcc:	4682      	mov	sl, r0
 8008dce:	468b      	mov	fp, r1
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	f7f7 fec0 	bl	8000b58 <__aeabi_d2iz>
 8008dd8:	4606      	mov	r6, r0
 8008dda:	f7f7 fba3 	bl	8000524 <__aeabi_i2d>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4640      	mov	r0, r8
 8008de4:	4649      	mov	r1, r9
 8008de6:	f7f7 fa4f 	bl	8000288 <__aeabi_dsub>
 8008dea:	3630      	adds	r6, #48	; 0x30
 8008dec:	f805 6b01 	strb.w	r6, [r5], #1
 8008df0:	4652      	mov	r2, sl
 8008df2:	465b      	mov	r3, fp
 8008df4:	4680      	mov	r8, r0
 8008df6:	4689      	mov	r9, r1
 8008df8:	f7f7 fe70 	bl	8000adc <__aeabi_dcmplt>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d163      	bne.n	8008ec8 <_dtoa_r+0x608>
 8008e00:	4642      	mov	r2, r8
 8008e02:	464b      	mov	r3, r9
 8008e04:	4936      	ldr	r1, [pc, #216]	; (8008ee0 <_dtoa_r+0x620>)
 8008e06:	2000      	movs	r0, #0
 8008e08:	f7f7 fa3e 	bl	8000288 <__aeabi_dsub>
 8008e0c:	4652      	mov	r2, sl
 8008e0e:	465b      	mov	r3, fp
 8008e10:	f7f7 fe64 	bl	8000adc <__aeabi_dcmplt>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f040 80b5 	bne.w	8008f84 <_dtoa_r+0x6c4>
 8008e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e1c:	429d      	cmp	r5, r3
 8008e1e:	d081      	beq.n	8008d24 <_dtoa_r+0x464>
 8008e20:	4b30      	ldr	r3, [pc, #192]	; (8008ee4 <_dtoa_r+0x624>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	4650      	mov	r0, sl
 8008e26:	4659      	mov	r1, fp
 8008e28:	f7f7 fbe6 	bl	80005f8 <__aeabi_dmul>
 8008e2c:	4b2d      	ldr	r3, [pc, #180]	; (8008ee4 <_dtoa_r+0x624>)
 8008e2e:	4682      	mov	sl, r0
 8008e30:	468b      	mov	fp, r1
 8008e32:	4640      	mov	r0, r8
 8008e34:	4649      	mov	r1, r9
 8008e36:	2200      	movs	r2, #0
 8008e38:	f7f7 fbde 	bl	80005f8 <__aeabi_dmul>
 8008e3c:	4680      	mov	r8, r0
 8008e3e:	4689      	mov	r9, r1
 8008e40:	e7c6      	b.n	8008dd0 <_dtoa_r+0x510>
 8008e42:	4650      	mov	r0, sl
 8008e44:	4659      	mov	r1, fp
 8008e46:	f7f7 fbd7 	bl	80005f8 <__aeabi_dmul>
 8008e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e4c:	9d01      	ldr	r5, [sp, #4]
 8008e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e50:	4682      	mov	sl, r0
 8008e52:	468b      	mov	fp, r1
 8008e54:	4649      	mov	r1, r9
 8008e56:	4640      	mov	r0, r8
 8008e58:	f7f7 fe7e 	bl	8000b58 <__aeabi_d2iz>
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	f7f7 fb61 	bl	8000524 <__aeabi_i2d>
 8008e62:	3630      	adds	r6, #48	; 0x30
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4640      	mov	r0, r8
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	f7f7 fa0c 	bl	8000288 <__aeabi_dsub>
 8008e70:	f805 6b01 	strb.w	r6, [r5], #1
 8008e74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e76:	429d      	cmp	r5, r3
 8008e78:	4680      	mov	r8, r0
 8008e7a:	4689      	mov	r9, r1
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	d124      	bne.n	8008ecc <_dtoa_r+0x60c>
 8008e82:	4b1b      	ldr	r3, [pc, #108]	; (8008ef0 <_dtoa_r+0x630>)
 8008e84:	4650      	mov	r0, sl
 8008e86:	4659      	mov	r1, fp
 8008e88:	f7f7 fa00 	bl	800028c <__adddf3>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	f7f7 fe40 	bl	8000b18 <__aeabi_dcmpgt>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d173      	bne.n	8008f84 <_dtoa_r+0x6c4>
 8008e9c:	4652      	mov	r2, sl
 8008e9e:	465b      	mov	r3, fp
 8008ea0:	4913      	ldr	r1, [pc, #76]	; (8008ef0 <_dtoa_r+0x630>)
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	f7f7 f9f0 	bl	8000288 <__aeabi_dsub>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4640      	mov	r0, r8
 8008eae:	4649      	mov	r1, r9
 8008eb0:	f7f7 fe14 	bl	8000adc <__aeabi_dcmplt>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f43f af35 	beq.w	8008d24 <_dtoa_r+0x464>
 8008eba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ebc:	1e6b      	subs	r3, r5, #1
 8008ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ec0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ec4:	2b30      	cmp	r3, #48	; 0x30
 8008ec6:	d0f8      	beq.n	8008eba <_dtoa_r+0x5fa>
 8008ec8:	9700      	str	r7, [sp, #0]
 8008eca:	e049      	b.n	8008f60 <_dtoa_r+0x6a0>
 8008ecc:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <_dtoa_r+0x624>)
 8008ece:	f7f7 fb93 	bl	80005f8 <__aeabi_dmul>
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	4689      	mov	r9, r1
 8008ed6:	e7bd      	b.n	8008e54 <_dtoa_r+0x594>
 8008ed8:	0800b8c0 	.word	0x0800b8c0
 8008edc:	0800b898 	.word	0x0800b898
 8008ee0:	3ff00000 	.word	0x3ff00000
 8008ee4:	40240000 	.word	0x40240000
 8008ee8:	401c0000 	.word	0x401c0000
 8008eec:	40140000 	.word	0x40140000
 8008ef0:	3fe00000 	.word	0x3fe00000
 8008ef4:	9d01      	ldr	r5, [sp, #4]
 8008ef6:	4656      	mov	r6, sl
 8008ef8:	465f      	mov	r7, fp
 8008efa:	4642      	mov	r2, r8
 8008efc:	464b      	mov	r3, r9
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	f7f7 fca3 	bl	800084c <__aeabi_ddiv>
 8008f06:	f7f7 fe27 	bl	8000b58 <__aeabi_d2iz>
 8008f0a:	4682      	mov	sl, r0
 8008f0c:	f7f7 fb0a 	bl	8000524 <__aeabi_i2d>
 8008f10:	4642      	mov	r2, r8
 8008f12:	464b      	mov	r3, r9
 8008f14:	f7f7 fb70 	bl	80005f8 <__aeabi_dmul>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008f24:	f7f7 f9b0 	bl	8000288 <__aeabi_dsub>
 8008f28:	f805 6b01 	strb.w	r6, [r5], #1
 8008f2c:	9e01      	ldr	r6, [sp, #4]
 8008f2e:	9f03      	ldr	r7, [sp, #12]
 8008f30:	1bae      	subs	r6, r5, r6
 8008f32:	42b7      	cmp	r7, r6
 8008f34:	4602      	mov	r2, r0
 8008f36:	460b      	mov	r3, r1
 8008f38:	d135      	bne.n	8008fa6 <_dtoa_r+0x6e6>
 8008f3a:	f7f7 f9a7 	bl	800028c <__adddf3>
 8008f3e:	4642      	mov	r2, r8
 8008f40:	464b      	mov	r3, r9
 8008f42:	4606      	mov	r6, r0
 8008f44:	460f      	mov	r7, r1
 8008f46:	f7f7 fde7 	bl	8000b18 <__aeabi_dcmpgt>
 8008f4a:	b9d0      	cbnz	r0, 8008f82 <_dtoa_r+0x6c2>
 8008f4c:	4642      	mov	r2, r8
 8008f4e:	464b      	mov	r3, r9
 8008f50:	4630      	mov	r0, r6
 8008f52:	4639      	mov	r1, r7
 8008f54:	f7f7 fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f58:	b110      	cbz	r0, 8008f60 <_dtoa_r+0x6a0>
 8008f5a:	f01a 0f01 	tst.w	sl, #1
 8008f5e:	d110      	bne.n	8008f82 <_dtoa_r+0x6c2>
 8008f60:	4620      	mov	r0, r4
 8008f62:	ee18 1a10 	vmov	r1, s16
 8008f66:	f001 f893 	bl	800a090 <_Bfree>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	9800      	ldr	r0, [sp, #0]
 8008f6e:	702b      	strb	r3, [r5, #0]
 8008f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f72:	3001      	adds	r0, #1
 8008f74:	6018      	str	r0, [r3, #0]
 8008f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f43f acf1 	beq.w	8008960 <_dtoa_r+0xa0>
 8008f7e:	601d      	str	r5, [r3, #0]
 8008f80:	e4ee      	b.n	8008960 <_dtoa_r+0xa0>
 8008f82:	9f00      	ldr	r7, [sp, #0]
 8008f84:	462b      	mov	r3, r5
 8008f86:	461d      	mov	r5, r3
 8008f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f8c:	2a39      	cmp	r2, #57	; 0x39
 8008f8e:	d106      	bne.n	8008f9e <_dtoa_r+0x6de>
 8008f90:	9a01      	ldr	r2, [sp, #4]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d1f7      	bne.n	8008f86 <_dtoa_r+0x6c6>
 8008f96:	9901      	ldr	r1, [sp, #4]
 8008f98:	2230      	movs	r2, #48	; 0x30
 8008f9a:	3701      	adds	r7, #1
 8008f9c:	700a      	strb	r2, [r1, #0]
 8008f9e:	781a      	ldrb	r2, [r3, #0]
 8008fa0:	3201      	adds	r2, #1
 8008fa2:	701a      	strb	r2, [r3, #0]
 8008fa4:	e790      	b.n	8008ec8 <_dtoa_r+0x608>
 8008fa6:	4ba6      	ldr	r3, [pc, #664]	; (8009240 <_dtoa_r+0x980>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f7f7 fb25 	bl	80005f8 <__aeabi_dmul>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	460f      	mov	r7, r1
 8008fb6:	f7f7 fd87 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d09d      	beq.n	8008efa <_dtoa_r+0x63a>
 8008fbe:	e7cf      	b.n	8008f60 <_dtoa_r+0x6a0>
 8008fc0:	9a08      	ldr	r2, [sp, #32]
 8008fc2:	2a00      	cmp	r2, #0
 8008fc4:	f000 80d7 	beq.w	8009176 <_dtoa_r+0x8b6>
 8008fc8:	9a06      	ldr	r2, [sp, #24]
 8008fca:	2a01      	cmp	r2, #1
 8008fcc:	f300 80ba 	bgt.w	8009144 <_dtoa_r+0x884>
 8008fd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fd2:	2a00      	cmp	r2, #0
 8008fd4:	f000 80b2 	beq.w	800913c <_dtoa_r+0x87c>
 8008fd8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008fdc:	9e07      	ldr	r6, [sp, #28]
 8008fde:	9d04      	ldr	r5, [sp, #16]
 8008fe0:	9a04      	ldr	r2, [sp, #16]
 8008fe2:	441a      	add	r2, r3
 8008fe4:	9204      	str	r2, [sp, #16]
 8008fe6:	9a05      	ldr	r2, [sp, #20]
 8008fe8:	2101      	movs	r1, #1
 8008fea:	441a      	add	r2, r3
 8008fec:	4620      	mov	r0, r4
 8008fee:	9205      	str	r2, [sp, #20]
 8008ff0:	f001 f950 	bl	800a294 <__i2b>
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	dd0c      	ble.n	8009014 <_dtoa_r+0x754>
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dd09      	ble.n	8009014 <_dtoa_r+0x754>
 8009000:	42ab      	cmp	r3, r5
 8009002:	9a04      	ldr	r2, [sp, #16]
 8009004:	bfa8      	it	ge
 8009006:	462b      	movge	r3, r5
 8009008:	1ad2      	subs	r2, r2, r3
 800900a:	9204      	str	r2, [sp, #16]
 800900c:	9a05      	ldr	r2, [sp, #20]
 800900e:	1aed      	subs	r5, r5, r3
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	9305      	str	r3, [sp, #20]
 8009014:	9b07      	ldr	r3, [sp, #28]
 8009016:	b31b      	cbz	r3, 8009060 <_dtoa_r+0x7a0>
 8009018:	9b08      	ldr	r3, [sp, #32]
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80af 	beq.w	800917e <_dtoa_r+0x8be>
 8009020:	2e00      	cmp	r6, #0
 8009022:	dd13      	ble.n	800904c <_dtoa_r+0x78c>
 8009024:	4639      	mov	r1, r7
 8009026:	4632      	mov	r2, r6
 8009028:	4620      	mov	r0, r4
 800902a:	f001 f9f3 	bl	800a414 <__pow5mult>
 800902e:	ee18 2a10 	vmov	r2, s16
 8009032:	4601      	mov	r1, r0
 8009034:	4607      	mov	r7, r0
 8009036:	4620      	mov	r0, r4
 8009038:	f001 f942 	bl	800a2c0 <__multiply>
 800903c:	ee18 1a10 	vmov	r1, s16
 8009040:	4680      	mov	r8, r0
 8009042:	4620      	mov	r0, r4
 8009044:	f001 f824 	bl	800a090 <_Bfree>
 8009048:	ee08 8a10 	vmov	s16, r8
 800904c:	9b07      	ldr	r3, [sp, #28]
 800904e:	1b9a      	subs	r2, r3, r6
 8009050:	d006      	beq.n	8009060 <_dtoa_r+0x7a0>
 8009052:	ee18 1a10 	vmov	r1, s16
 8009056:	4620      	mov	r0, r4
 8009058:	f001 f9dc 	bl	800a414 <__pow5mult>
 800905c:	ee08 0a10 	vmov	s16, r0
 8009060:	2101      	movs	r1, #1
 8009062:	4620      	mov	r0, r4
 8009064:	f001 f916 	bl	800a294 <__i2b>
 8009068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800906a:	2b00      	cmp	r3, #0
 800906c:	4606      	mov	r6, r0
 800906e:	f340 8088 	ble.w	8009182 <_dtoa_r+0x8c2>
 8009072:	461a      	mov	r2, r3
 8009074:	4601      	mov	r1, r0
 8009076:	4620      	mov	r0, r4
 8009078:	f001 f9cc 	bl	800a414 <__pow5mult>
 800907c:	9b06      	ldr	r3, [sp, #24]
 800907e:	2b01      	cmp	r3, #1
 8009080:	4606      	mov	r6, r0
 8009082:	f340 8081 	ble.w	8009188 <_dtoa_r+0x8c8>
 8009086:	f04f 0800 	mov.w	r8, #0
 800908a:	6933      	ldr	r3, [r6, #16]
 800908c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009090:	6918      	ldr	r0, [r3, #16]
 8009092:	f001 f8af 	bl	800a1f4 <__hi0bits>
 8009096:	f1c0 0020 	rsb	r0, r0, #32
 800909a:	9b05      	ldr	r3, [sp, #20]
 800909c:	4418      	add	r0, r3
 800909e:	f010 001f 	ands.w	r0, r0, #31
 80090a2:	f000 8092 	beq.w	80091ca <_dtoa_r+0x90a>
 80090a6:	f1c0 0320 	rsb	r3, r0, #32
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	f340 808a 	ble.w	80091c4 <_dtoa_r+0x904>
 80090b0:	f1c0 001c 	rsb	r0, r0, #28
 80090b4:	9b04      	ldr	r3, [sp, #16]
 80090b6:	4403      	add	r3, r0
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	9b05      	ldr	r3, [sp, #20]
 80090bc:	4403      	add	r3, r0
 80090be:	4405      	add	r5, r0
 80090c0:	9305      	str	r3, [sp, #20]
 80090c2:	9b04      	ldr	r3, [sp, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dd07      	ble.n	80090d8 <_dtoa_r+0x818>
 80090c8:	ee18 1a10 	vmov	r1, s16
 80090cc:	461a      	mov	r2, r3
 80090ce:	4620      	mov	r0, r4
 80090d0:	f001 f9fa 	bl	800a4c8 <__lshift>
 80090d4:	ee08 0a10 	vmov	s16, r0
 80090d8:	9b05      	ldr	r3, [sp, #20]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	dd05      	ble.n	80090ea <_dtoa_r+0x82a>
 80090de:	4631      	mov	r1, r6
 80090e0:	461a      	mov	r2, r3
 80090e2:	4620      	mov	r0, r4
 80090e4:	f001 f9f0 	bl	800a4c8 <__lshift>
 80090e8:	4606      	mov	r6, r0
 80090ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d06e      	beq.n	80091ce <_dtoa_r+0x90e>
 80090f0:	ee18 0a10 	vmov	r0, s16
 80090f4:	4631      	mov	r1, r6
 80090f6:	f001 fa57 	bl	800a5a8 <__mcmp>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	da67      	bge.n	80091ce <_dtoa_r+0x90e>
 80090fe:	9b00      	ldr	r3, [sp, #0]
 8009100:	3b01      	subs	r3, #1
 8009102:	ee18 1a10 	vmov	r1, s16
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	220a      	movs	r2, #10
 800910a:	2300      	movs	r3, #0
 800910c:	4620      	mov	r0, r4
 800910e:	f000 ffe1 	bl	800a0d4 <__multadd>
 8009112:	9b08      	ldr	r3, [sp, #32]
 8009114:	ee08 0a10 	vmov	s16, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 81b1 	beq.w	8009480 <_dtoa_r+0xbc0>
 800911e:	2300      	movs	r3, #0
 8009120:	4639      	mov	r1, r7
 8009122:	220a      	movs	r2, #10
 8009124:	4620      	mov	r0, r4
 8009126:	f000 ffd5 	bl	800a0d4 <__multadd>
 800912a:	9b02      	ldr	r3, [sp, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	4607      	mov	r7, r0
 8009130:	f300 808e 	bgt.w	8009250 <_dtoa_r+0x990>
 8009134:	9b06      	ldr	r3, [sp, #24]
 8009136:	2b02      	cmp	r3, #2
 8009138:	dc51      	bgt.n	80091de <_dtoa_r+0x91e>
 800913a:	e089      	b.n	8009250 <_dtoa_r+0x990>
 800913c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800913e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009142:	e74b      	b.n	8008fdc <_dtoa_r+0x71c>
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	1e5e      	subs	r6, r3, #1
 8009148:	9b07      	ldr	r3, [sp, #28]
 800914a:	42b3      	cmp	r3, r6
 800914c:	bfbf      	itttt	lt
 800914e:	9b07      	ldrlt	r3, [sp, #28]
 8009150:	9607      	strlt	r6, [sp, #28]
 8009152:	1af2      	sublt	r2, r6, r3
 8009154:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009156:	bfb6      	itet	lt
 8009158:	189b      	addlt	r3, r3, r2
 800915a:	1b9e      	subge	r6, r3, r6
 800915c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	bfb8      	it	lt
 8009162:	2600      	movlt	r6, #0
 8009164:	2b00      	cmp	r3, #0
 8009166:	bfb7      	itett	lt
 8009168:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800916c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009170:	1a9d      	sublt	r5, r3, r2
 8009172:	2300      	movlt	r3, #0
 8009174:	e734      	b.n	8008fe0 <_dtoa_r+0x720>
 8009176:	9e07      	ldr	r6, [sp, #28]
 8009178:	9d04      	ldr	r5, [sp, #16]
 800917a:	9f08      	ldr	r7, [sp, #32]
 800917c:	e73b      	b.n	8008ff6 <_dtoa_r+0x736>
 800917e:	9a07      	ldr	r2, [sp, #28]
 8009180:	e767      	b.n	8009052 <_dtoa_r+0x792>
 8009182:	9b06      	ldr	r3, [sp, #24]
 8009184:	2b01      	cmp	r3, #1
 8009186:	dc18      	bgt.n	80091ba <_dtoa_r+0x8fa>
 8009188:	f1ba 0f00 	cmp.w	sl, #0
 800918c:	d115      	bne.n	80091ba <_dtoa_r+0x8fa>
 800918e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009192:	b993      	cbnz	r3, 80091ba <_dtoa_r+0x8fa>
 8009194:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009198:	0d1b      	lsrs	r3, r3, #20
 800919a:	051b      	lsls	r3, r3, #20
 800919c:	b183      	cbz	r3, 80091c0 <_dtoa_r+0x900>
 800919e:	9b04      	ldr	r3, [sp, #16]
 80091a0:	3301      	adds	r3, #1
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	9b05      	ldr	r3, [sp, #20]
 80091a6:	3301      	adds	r3, #1
 80091a8:	9305      	str	r3, [sp, #20]
 80091aa:	f04f 0801 	mov.w	r8, #1
 80091ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f47f af6a 	bne.w	800908a <_dtoa_r+0x7ca>
 80091b6:	2001      	movs	r0, #1
 80091b8:	e76f      	b.n	800909a <_dtoa_r+0x7da>
 80091ba:	f04f 0800 	mov.w	r8, #0
 80091be:	e7f6      	b.n	80091ae <_dtoa_r+0x8ee>
 80091c0:	4698      	mov	r8, r3
 80091c2:	e7f4      	b.n	80091ae <_dtoa_r+0x8ee>
 80091c4:	f43f af7d 	beq.w	80090c2 <_dtoa_r+0x802>
 80091c8:	4618      	mov	r0, r3
 80091ca:	301c      	adds	r0, #28
 80091cc:	e772      	b.n	80090b4 <_dtoa_r+0x7f4>
 80091ce:	9b03      	ldr	r3, [sp, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	dc37      	bgt.n	8009244 <_dtoa_r+0x984>
 80091d4:	9b06      	ldr	r3, [sp, #24]
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	dd34      	ble.n	8009244 <_dtoa_r+0x984>
 80091da:	9b03      	ldr	r3, [sp, #12]
 80091dc:	9302      	str	r3, [sp, #8]
 80091de:	9b02      	ldr	r3, [sp, #8]
 80091e0:	b96b      	cbnz	r3, 80091fe <_dtoa_r+0x93e>
 80091e2:	4631      	mov	r1, r6
 80091e4:	2205      	movs	r2, #5
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 ff74 	bl	800a0d4 <__multadd>
 80091ec:	4601      	mov	r1, r0
 80091ee:	4606      	mov	r6, r0
 80091f0:	ee18 0a10 	vmov	r0, s16
 80091f4:	f001 f9d8 	bl	800a5a8 <__mcmp>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	f73f adbb 	bgt.w	8008d74 <_dtoa_r+0x4b4>
 80091fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009200:	9d01      	ldr	r5, [sp, #4]
 8009202:	43db      	mvns	r3, r3
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	f04f 0800 	mov.w	r8, #0
 800920a:	4631      	mov	r1, r6
 800920c:	4620      	mov	r0, r4
 800920e:	f000 ff3f 	bl	800a090 <_Bfree>
 8009212:	2f00      	cmp	r7, #0
 8009214:	f43f aea4 	beq.w	8008f60 <_dtoa_r+0x6a0>
 8009218:	f1b8 0f00 	cmp.w	r8, #0
 800921c:	d005      	beq.n	800922a <_dtoa_r+0x96a>
 800921e:	45b8      	cmp	r8, r7
 8009220:	d003      	beq.n	800922a <_dtoa_r+0x96a>
 8009222:	4641      	mov	r1, r8
 8009224:	4620      	mov	r0, r4
 8009226:	f000 ff33 	bl	800a090 <_Bfree>
 800922a:	4639      	mov	r1, r7
 800922c:	4620      	mov	r0, r4
 800922e:	f000 ff2f 	bl	800a090 <_Bfree>
 8009232:	e695      	b.n	8008f60 <_dtoa_r+0x6a0>
 8009234:	2600      	movs	r6, #0
 8009236:	4637      	mov	r7, r6
 8009238:	e7e1      	b.n	80091fe <_dtoa_r+0x93e>
 800923a:	9700      	str	r7, [sp, #0]
 800923c:	4637      	mov	r7, r6
 800923e:	e599      	b.n	8008d74 <_dtoa_r+0x4b4>
 8009240:	40240000 	.word	0x40240000
 8009244:	9b08      	ldr	r3, [sp, #32]
 8009246:	2b00      	cmp	r3, #0
 8009248:	f000 80ca 	beq.w	80093e0 <_dtoa_r+0xb20>
 800924c:	9b03      	ldr	r3, [sp, #12]
 800924e:	9302      	str	r3, [sp, #8]
 8009250:	2d00      	cmp	r5, #0
 8009252:	dd05      	ble.n	8009260 <_dtoa_r+0x9a0>
 8009254:	4639      	mov	r1, r7
 8009256:	462a      	mov	r2, r5
 8009258:	4620      	mov	r0, r4
 800925a:	f001 f935 	bl	800a4c8 <__lshift>
 800925e:	4607      	mov	r7, r0
 8009260:	f1b8 0f00 	cmp.w	r8, #0
 8009264:	d05b      	beq.n	800931e <_dtoa_r+0xa5e>
 8009266:	6879      	ldr	r1, [r7, #4]
 8009268:	4620      	mov	r0, r4
 800926a:	f000 fed1 	bl	800a010 <_Balloc>
 800926e:	4605      	mov	r5, r0
 8009270:	b928      	cbnz	r0, 800927e <_dtoa_r+0x9be>
 8009272:	4b87      	ldr	r3, [pc, #540]	; (8009490 <_dtoa_r+0xbd0>)
 8009274:	4602      	mov	r2, r0
 8009276:	f240 21ea 	movw	r1, #746	; 0x2ea
 800927a:	f7ff bb3b 	b.w	80088f4 <_dtoa_r+0x34>
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	3202      	adds	r2, #2
 8009282:	0092      	lsls	r2, r2, #2
 8009284:	f107 010c 	add.w	r1, r7, #12
 8009288:	300c      	adds	r0, #12
 800928a:	f000 feb3 	bl	8009ff4 <memcpy>
 800928e:	2201      	movs	r2, #1
 8009290:	4629      	mov	r1, r5
 8009292:	4620      	mov	r0, r4
 8009294:	f001 f918 	bl	800a4c8 <__lshift>
 8009298:	9b01      	ldr	r3, [sp, #4]
 800929a:	f103 0901 	add.w	r9, r3, #1
 800929e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80092a2:	4413      	add	r3, r2
 80092a4:	9305      	str	r3, [sp, #20]
 80092a6:	f00a 0301 	and.w	r3, sl, #1
 80092aa:	46b8      	mov	r8, r7
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	4607      	mov	r7, r0
 80092b0:	4631      	mov	r1, r6
 80092b2:	ee18 0a10 	vmov	r0, s16
 80092b6:	f7ff fa77 	bl	80087a8 <quorem>
 80092ba:	4641      	mov	r1, r8
 80092bc:	9002      	str	r0, [sp, #8]
 80092be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80092c2:	ee18 0a10 	vmov	r0, s16
 80092c6:	f001 f96f 	bl	800a5a8 <__mcmp>
 80092ca:	463a      	mov	r2, r7
 80092cc:	9003      	str	r0, [sp, #12]
 80092ce:	4631      	mov	r1, r6
 80092d0:	4620      	mov	r0, r4
 80092d2:	f001 f985 	bl	800a5e0 <__mdiff>
 80092d6:	68c2      	ldr	r2, [r0, #12]
 80092d8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80092dc:	4605      	mov	r5, r0
 80092de:	bb02      	cbnz	r2, 8009322 <_dtoa_r+0xa62>
 80092e0:	4601      	mov	r1, r0
 80092e2:	ee18 0a10 	vmov	r0, s16
 80092e6:	f001 f95f 	bl	800a5a8 <__mcmp>
 80092ea:	4602      	mov	r2, r0
 80092ec:	4629      	mov	r1, r5
 80092ee:	4620      	mov	r0, r4
 80092f0:	9207      	str	r2, [sp, #28]
 80092f2:	f000 fecd 	bl	800a090 <_Bfree>
 80092f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80092fa:	ea43 0102 	orr.w	r1, r3, r2
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	430b      	orrs	r3, r1
 8009302:	464d      	mov	r5, r9
 8009304:	d10f      	bne.n	8009326 <_dtoa_r+0xa66>
 8009306:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800930a:	d02a      	beq.n	8009362 <_dtoa_r+0xaa2>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	dd02      	ble.n	8009318 <_dtoa_r+0xa58>
 8009312:	9b02      	ldr	r3, [sp, #8]
 8009314:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009318:	f88b a000 	strb.w	sl, [fp]
 800931c:	e775      	b.n	800920a <_dtoa_r+0x94a>
 800931e:	4638      	mov	r0, r7
 8009320:	e7ba      	b.n	8009298 <_dtoa_r+0x9d8>
 8009322:	2201      	movs	r2, #1
 8009324:	e7e2      	b.n	80092ec <_dtoa_r+0xa2c>
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	db04      	blt.n	8009336 <_dtoa_r+0xa76>
 800932c:	9906      	ldr	r1, [sp, #24]
 800932e:	430b      	orrs	r3, r1
 8009330:	9904      	ldr	r1, [sp, #16]
 8009332:	430b      	orrs	r3, r1
 8009334:	d122      	bne.n	800937c <_dtoa_r+0xabc>
 8009336:	2a00      	cmp	r2, #0
 8009338:	ddee      	ble.n	8009318 <_dtoa_r+0xa58>
 800933a:	ee18 1a10 	vmov	r1, s16
 800933e:	2201      	movs	r2, #1
 8009340:	4620      	mov	r0, r4
 8009342:	f001 f8c1 	bl	800a4c8 <__lshift>
 8009346:	4631      	mov	r1, r6
 8009348:	ee08 0a10 	vmov	s16, r0
 800934c:	f001 f92c 	bl	800a5a8 <__mcmp>
 8009350:	2800      	cmp	r0, #0
 8009352:	dc03      	bgt.n	800935c <_dtoa_r+0xa9c>
 8009354:	d1e0      	bne.n	8009318 <_dtoa_r+0xa58>
 8009356:	f01a 0f01 	tst.w	sl, #1
 800935a:	d0dd      	beq.n	8009318 <_dtoa_r+0xa58>
 800935c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009360:	d1d7      	bne.n	8009312 <_dtoa_r+0xa52>
 8009362:	2339      	movs	r3, #57	; 0x39
 8009364:	f88b 3000 	strb.w	r3, [fp]
 8009368:	462b      	mov	r3, r5
 800936a:	461d      	mov	r5, r3
 800936c:	3b01      	subs	r3, #1
 800936e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009372:	2a39      	cmp	r2, #57	; 0x39
 8009374:	d071      	beq.n	800945a <_dtoa_r+0xb9a>
 8009376:	3201      	adds	r2, #1
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	e746      	b.n	800920a <_dtoa_r+0x94a>
 800937c:	2a00      	cmp	r2, #0
 800937e:	dd07      	ble.n	8009390 <_dtoa_r+0xad0>
 8009380:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009384:	d0ed      	beq.n	8009362 <_dtoa_r+0xaa2>
 8009386:	f10a 0301 	add.w	r3, sl, #1
 800938a:	f88b 3000 	strb.w	r3, [fp]
 800938e:	e73c      	b.n	800920a <_dtoa_r+0x94a>
 8009390:	9b05      	ldr	r3, [sp, #20]
 8009392:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009396:	4599      	cmp	r9, r3
 8009398:	d047      	beq.n	800942a <_dtoa_r+0xb6a>
 800939a:	ee18 1a10 	vmov	r1, s16
 800939e:	2300      	movs	r3, #0
 80093a0:	220a      	movs	r2, #10
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 fe96 	bl	800a0d4 <__multadd>
 80093a8:	45b8      	cmp	r8, r7
 80093aa:	ee08 0a10 	vmov	s16, r0
 80093ae:	f04f 0300 	mov.w	r3, #0
 80093b2:	f04f 020a 	mov.w	r2, #10
 80093b6:	4641      	mov	r1, r8
 80093b8:	4620      	mov	r0, r4
 80093ba:	d106      	bne.n	80093ca <_dtoa_r+0xb0a>
 80093bc:	f000 fe8a 	bl	800a0d4 <__multadd>
 80093c0:	4680      	mov	r8, r0
 80093c2:	4607      	mov	r7, r0
 80093c4:	f109 0901 	add.w	r9, r9, #1
 80093c8:	e772      	b.n	80092b0 <_dtoa_r+0x9f0>
 80093ca:	f000 fe83 	bl	800a0d4 <__multadd>
 80093ce:	4639      	mov	r1, r7
 80093d0:	4680      	mov	r8, r0
 80093d2:	2300      	movs	r3, #0
 80093d4:	220a      	movs	r2, #10
 80093d6:	4620      	mov	r0, r4
 80093d8:	f000 fe7c 	bl	800a0d4 <__multadd>
 80093dc:	4607      	mov	r7, r0
 80093de:	e7f1      	b.n	80093c4 <_dtoa_r+0xb04>
 80093e0:	9b03      	ldr	r3, [sp, #12]
 80093e2:	9302      	str	r3, [sp, #8]
 80093e4:	9d01      	ldr	r5, [sp, #4]
 80093e6:	ee18 0a10 	vmov	r0, s16
 80093ea:	4631      	mov	r1, r6
 80093ec:	f7ff f9dc 	bl	80087a8 <quorem>
 80093f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093f4:	9b01      	ldr	r3, [sp, #4]
 80093f6:	f805 ab01 	strb.w	sl, [r5], #1
 80093fa:	1aea      	subs	r2, r5, r3
 80093fc:	9b02      	ldr	r3, [sp, #8]
 80093fe:	4293      	cmp	r3, r2
 8009400:	dd09      	ble.n	8009416 <_dtoa_r+0xb56>
 8009402:	ee18 1a10 	vmov	r1, s16
 8009406:	2300      	movs	r3, #0
 8009408:	220a      	movs	r2, #10
 800940a:	4620      	mov	r0, r4
 800940c:	f000 fe62 	bl	800a0d4 <__multadd>
 8009410:	ee08 0a10 	vmov	s16, r0
 8009414:	e7e7      	b.n	80093e6 <_dtoa_r+0xb26>
 8009416:	9b02      	ldr	r3, [sp, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	bfc8      	it	gt
 800941c:	461d      	movgt	r5, r3
 800941e:	9b01      	ldr	r3, [sp, #4]
 8009420:	bfd8      	it	le
 8009422:	2501      	movle	r5, #1
 8009424:	441d      	add	r5, r3
 8009426:	f04f 0800 	mov.w	r8, #0
 800942a:	ee18 1a10 	vmov	r1, s16
 800942e:	2201      	movs	r2, #1
 8009430:	4620      	mov	r0, r4
 8009432:	f001 f849 	bl	800a4c8 <__lshift>
 8009436:	4631      	mov	r1, r6
 8009438:	ee08 0a10 	vmov	s16, r0
 800943c:	f001 f8b4 	bl	800a5a8 <__mcmp>
 8009440:	2800      	cmp	r0, #0
 8009442:	dc91      	bgt.n	8009368 <_dtoa_r+0xaa8>
 8009444:	d102      	bne.n	800944c <_dtoa_r+0xb8c>
 8009446:	f01a 0f01 	tst.w	sl, #1
 800944a:	d18d      	bne.n	8009368 <_dtoa_r+0xaa8>
 800944c:	462b      	mov	r3, r5
 800944e:	461d      	mov	r5, r3
 8009450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009454:	2a30      	cmp	r2, #48	; 0x30
 8009456:	d0fa      	beq.n	800944e <_dtoa_r+0xb8e>
 8009458:	e6d7      	b.n	800920a <_dtoa_r+0x94a>
 800945a:	9a01      	ldr	r2, [sp, #4]
 800945c:	429a      	cmp	r2, r3
 800945e:	d184      	bne.n	800936a <_dtoa_r+0xaaa>
 8009460:	9b00      	ldr	r3, [sp, #0]
 8009462:	3301      	adds	r3, #1
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	2331      	movs	r3, #49	; 0x31
 8009468:	7013      	strb	r3, [r2, #0]
 800946a:	e6ce      	b.n	800920a <_dtoa_r+0x94a>
 800946c:	4b09      	ldr	r3, [pc, #36]	; (8009494 <_dtoa_r+0xbd4>)
 800946e:	f7ff ba95 	b.w	800899c <_dtoa_r+0xdc>
 8009472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009474:	2b00      	cmp	r3, #0
 8009476:	f47f aa6e 	bne.w	8008956 <_dtoa_r+0x96>
 800947a:	4b07      	ldr	r3, [pc, #28]	; (8009498 <_dtoa_r+0xbd8>)
 800947c:	f7ff ba8e 	b.w	800899c <_dtoa_r+0xdc>
 8009480:	9b02      	ldr	r3, [sp, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	dcae      	bgt.n	80093e4 <_dtoa_r+0xb24>
 8009486:	9b06      	ldr	r3, [sp, #24]
 8009488:	2b02      	cmp	r3, #2
 800948a:	f73f aea8 	bgt.w	80091de <_dtoa_r+0x91e>
 800948e:	e7a9      	b.n	80093e4 <_dtoa_r+0xb24>
 8009490:	0800b748 	.word	0x0800b748
 8009494:	0800b548 	.word	0x0800b548
 8009498:	0800b6c9 	.word	0x0800b6c9

0800949c <__sflush_r>:
 800949c:	898a      	ldrh	r2, [r1, #12]
 800949e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a2:	4605      	mov	r5, r0
 80094a4:	0710      	lsls	r0, r2, #28
 80094a6:	460c      	mov	r4, r1
 80094a8:	d458      	bmi.n	800955c <__sflush_r+0xc0>
 80094aa:	684b      	ldr	r3, [r1, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	dc05      	bgt.n	80094bc <__sflush_r+0x20>
 80094b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	dc02      	bgt.n	80094bc <__sflush_r+0x20>
 80094b6:	2000      	movs	r0, #0
 80094b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094be:	2e00      	cmp	r6, #0
 80094c0:	d0f9      	beq.n	80094b6 <__sflush_r+0x1a>
 80094c2:	2300      	movs	r3, #0
 80094c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094c8:	682f      	ldr	r7, [r5, #0]
 80094ca:	602b      	str	r3, [r5, #0]
 80094cc:	d032      	beq.n	8009534 <__sflush_r+0x98>
 80094ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	075a      	lsls	r2, r3, #29
 80094d4:	d505      	bpl.n	80094e2 <__sflush_r+0x46>
 80094d6:	6863      	ldr	r3, [r4, #4]
 80094d8:	1ac0      	subs	r0, r0, r3
 80094da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094dc:	b10b      	cbz	r3, 80094e2 <__sflush_r+0x46>
 80094de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094e0:	1ac0      	subs	r0, r0, r3
 80094e2:	2300      	movs	r3, #0
 80094e4:	4602      	mov	r2, r0
 80094e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094e8:	6a21      	ldr	r1, [r4, #32]
 80094ea:	4628      	mov	r0, r5
 80094ec:	47b0      	blx	r6
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	d106      	bne.n	8009502 <__sflush_r+0x66>
 80094f4:	6829      	ldr	r1, [r5, #0]
 80094f6:	291d      	cmp	r1, #29
 80094f8:	d82c      	bhi.n	8009554 <__sflush_r+0xb8>
 80094fa:	4a2a      	ldr	r2, [pc, #168]	; (80095a4 <__sflush_r+0x108>)
 80094fc:	40ca      	lsrs	r2, r1
 80094fe:	07d6      	lsls	r6, r2, #31
 8009500:	d528      	bpl.n	8009554 <__sflush_r+0xb8>
 8009502:	2200      	movs	r2, #0
 8009504:	6062      	str	r2, [r4, #4]
 8009506:	04d9      	lsls	r1, r3, #19
 8009508:	6922      	ldr	r2, [r4, #16]
 800950a:	6022      	str	r2, [r4, #0]
 800950c:	d504      	bpl.n	8009518 <__sflush_r+0x7c>
 800950e:	1c42      	adds	r2, r0, #1
 8009510:	d101      	bne.n	8009516 <__sflush_r+0x7a>
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	b903      	cbnz	r3, 8009518 <__sflush_r+0x7c>
 8009516:	6560      	str	r0, [r4, #84]	; 0x54
 8009518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800951a:	602f      	str	r7, [r5, #0]
 800951c:	2900      	cmp	r1, #0
 800951e:	d0ca      	beq.n	80094b6 <__sflush_r+0x1a>
 8009520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009524:	4299      	cmp	r1, r3
 8009526:	d002      	beq.n	800952e <__sflush_r+0x92>
 8009528:	4628      	mov	r0, r5
 800952a:	f001 fa49 	bl	800a9c0 <_free_r>
 800952e:	2000      	movs	r0, #0
 8009530:	6360      	str	r0, [r4, #52]	; 0x34
 8009532:	e7c1      	b.n	80094b8 <__sflush_r+0x1c>
 8009534:	6a21      	ldr	r1, [r4, #32]
 8009536:	2301      	movs	r3, #1
 8009538:	4628      	mov	r0, r5
 800953a:	47b0      	blx	r6
 800953c:	1c41      	adds	r1, r0, #1
 800953e:	d1c7      	bne.n	80094d0 <__sflush_r+0x34>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0c4      	beq.n	80094d0 <__sflush_r+0x34>
 8009546:	2b1d      	cmp	r3, #29
 8009548:	d001      	beq.n	800954e <__sflush_r+0xb2>
 800954a:	2b16      	cmp	r3, #22
 800954c:	d101      	bne.n	8009552 <__sflush_r+0xb6>
 800954e:	602f      	str	r7, [r5, #0]
 8009550:	e7b1      	b.n	80094b6 <__sflush_r+0x1a>
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	e7ad      	b.n	80094b8 <__sflush_r+0x1c>
 800955c:	690f      	ldr	r7, [r1, #16]
 800955e:	2f00      	cmp	r7, #0
 8009560:	d0a9      	beq.n	80094b6 <__sflush_r+0x1a>
 8009562:	0793      	lsls	r3, r2, #30
 8009564:	680e      	ldr	r6, [r1, #0]
 8009566:	bf08      	it	eq
 8009568:	694b      	ldreq	r3, [r1, #20]
 800956a:	600f      	str	r7, [r1, #0]
 800956c:	bf18      	it	ne
 800956e:	2300      	movne	r3, #0
 8009570:	eba6 0807 	sub.w	r8, r6, r7
 8009574:	608b      	str	r3, [r1, #8]
 8009576:	f1b8 0f00 	cmp.w	r8, #0
 800957a:	dd9c      	ble.n	80094b6 <__sflush_r+0x1a>
 800957c:	6a21      	ldr	r1, [r4, #32]
 800957e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009580:	4643      	mov	r3, r8
 8009582:	463a      	mov	r2, r7
 8009584:	4628      	mov	r0, r5
 8009586:	47b0      	blx	r6
 8009588:	2800      	cmp	r0, #0
 800958a:	dc06      	bgt.n	800959a <__sflush_r+0xfe>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009598:	e78e      	b.n	80094b8 <__sflush_r+0x1c>
 800959a:	4407      	add	r7, r0
 800959c:	eba8 0800 	sub.w	r8, r8, r0
 80095a0:	e7e9      	b.n	8009576 <__sflush_r+0xda>
 80095a2:	bf00      	nop
 80095a4:	20400001 	.word	0x20400001

080095a8 <_fflush_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	690b      	ldr	r3, [r1, #16]
 80095ac:	4605      	mov	r5, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	b913      	cbnz	r3, 80095b8 <_fflush_r+0x10>
 80095b2:	2500      	movs	r5, #0
 80095b4:	4628      	mov	r0, r5
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	b118      	cbz	r0, 80095c2 <_fflush_r+0x1a>
 80095ba:	6983      	ldr	r3, [r0, #24]
 80095bc:	b90b      	cbnz	r3, 80095c2 <_fflush_r+0x1a>
 80095be:	f000 f887 	bl	80096d0 <__sinit>
 80095c2:	4b14      	ldr	r3, [pc, #80]	; (8009614 <_fflush_r+0x6c>)
 80095c4:	429c      	cmp	r4, r3
 80095c6:	d11b      	bne.n	8009600 <_fflush_r+0x58>
 80095c8:	686c      	ldr	r4, [r5, #4]
 80095ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0ef      	beq.n	80095b2 <_fflush_r+0xa>
 80095d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095d4:	07d0      	lsls	r0, r2, #31
 80095d6:	d404      	bmi.n	80095e2 <_fflush_r+0x3a>
 80095d8:	0599      	lsls	r1, r3, #22
 80095da:	d402      	bmi.n	80095e2 <_fflush_r+0x3a>
 80095dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095de:	f000 fc88 	bl	8009ef2 <__retarget_lock_acquire_recursive>
 80095e2:	4628      	mov	r0, r5
 80095e4:	4621      	mov	r1, r4
 80095e6:	f7ff ff59 	bl	800949c <__sflush_r>
 80095ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095ec:	07da      	lsls	r2, r3, #31
 80095ee:	4605      	mov	r5, r0
 80095f0:	d4e0      	bmi.n	80095b4 <_fflush_r+0xc>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	059b      	lsls	r3, r3, #22
 80095f6:	d4dd      	bmi.n	80095b4 <_fflush_r+0xc>
 80095f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095fa:	f000 fc7b 	bl	8009ef4 <__retarget_lock_release_recursive>
 80095fe:	e7d9      	b.n	80095b4 <_fflush_r+0xc>
 8009600:	4b05      	ldr	r3, [pc, #20]	; (8009618 <_fflush_r+0x70>)
 8009602:	429c      	cmp	r4, r3
 8009604:	d101      	bne.n	800960a <_fflush_r+0x62>
 8009606:	68ac      	ldr	r4, [r5, #8]
 8009608:	e7df      	b.n	80095ca <_fflush_r+0x22>
 800960a:	4b04      	ldr	r3, [pc, #16]	; (800961c <_fflush_r+0x74>)
 800960c:	429c      	cmp	r4, r3
 800960e:	bf08      	it	eq
 8009610:	68ec      	ldreq	r4, [r5, #12]
 8009612:	e7da      	b.n	80095ca <_fflush_r+0x22>
 8009614:	0800b77c 	.word	0x0800b77c
 8009618:	0800b79c 	.word	0x0800b79c
 800961c:	0800b75c 	.word	0x0800b75c

08009620 <std>:
 8009620:	2300      	movs	r3, #0
 8009622:	b510      	push	{r4, lr}
 8009624:	4604      	mov	r4, r0
 8009626:	e9c0 3300 	strd	r3, r3, [r0]
 800962a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800962e:	6083      	str	r3, [r0, #8]
 8009630:	8181      	strh	r1, [r0, #12]
 8009632:	6643      	str	r3, [r0, #100]	; 0x64
 8009634:	81c2      	strh	r2, [r0, #14]
 8009636:	6183      	str	r3, [r0, #24]
 8009638:	4619      	mov	r1, r3
 800963a:	2208      	movs	r2, #8
 800963c:	305c      	adds	r0, #92	; 0x5c
 800963e:	f7fd fa29 	bl	8006a94 <memset>
 8009642:	4b05      	ldr	r3, [pc, #20]	; (8009658 <std+0x38>)
 8009644:	6263      	str	r3, [r4, #36]	; 0x24
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <std+0x3c>)
 8009648:	62a3      	str	r3, [r4, #40]	; 0x28
 800964a:	4b05      	ldr	r3, [pc, #20]	; (8009660 <std+0x40>)
 800964c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800964e:	4b05      	ldr	r3, [pc, #20]	; (8009664 <std+0x44>)
 8009650:	6224      	str	r4, [r4, #32]
 8009652:	6323      	str	r3, [r4, #48]	; 0x30
 8009654:	bd10      	pop	{r4, pc}
 8009656:	bf00      	nop
 8009658:	0800ae69 	.word	0x0800ae69
 800965c:	0800ae8b 	.word	0x0800ae8b
 8009660:	0800aec3 	.word	0x0800aec3
 8009664:	0800aee7 	.word	0x0800aee7

08009668 <_cleanup_r>:
 8009668:	4901      	ldr	r1, [pc, #4]	; (8009670 <_cleanup_r+0x8>)
 800966a:	f000 b8af 	b.w	80097cc <_fwalk_reent>
 800966e:	bf00      	nop
 8009670:	080095a9 	.word	0x080095a9

08009674 <__sfmoreglue>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	2268      	movs	r2, #104	; 0x68
 8009678:	1e4d      	subs	r5, r1, #1
 800967a:	4355      	muls	r5, r2
 800967c:	460e      	mov	r6, r1
 800967e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009682:	f001 fa09 	bl	800aa98 <_malloc_r>
 8009686:	4604      	mov	r4, r0
 8009688:	b140      	cbz	r0, 800969c <__sfmoreglue+0x28>
 800968a:	2100      	movs	r1, #0
 800968c:	e9c0 1600 	strd	r1, r6, [r0]
 8009690:	300c      	adds	r0, #12
 8009692:	60a0      	str	r0, [r4, #8]
 8009694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009698:	f7fd f9fc 	bl	8006a94 <memset>
 800969c:	4620      	mov	r0, r4
 800969e:	bd70      	pop	{r4, r5, r6, pc}

080096a0 <__sfp_lock_acquire>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__sfp_lock_acquire+0x8>)
 80096a2:	f000 bc26 	b.w	8009ef2 <__retarget_lock_acquire_recursive>
 80096a6:	bf00      	nop
 80096a8:	200003f9 	.word	0x200003f9

080096ac <__sfp_lock_release>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__sfp_lock_release+0x8>)
 80096ae:	f000 bc21 	b.w	8009ef4 <__retarget_lock_release_recursive>
 80096b2:	bf00      	nop
 80096b4:	200003f9 	.word	0x200003f9

080096b8 <__sinit_lock_acquire>:
 80096b8:	4801      	ldr	r0, [pc, #4]	; (80096c0 <__sinit_lock_acquire+0x8>)
 80096ba:	f000 bc1a 	b.w	8009ef2 <__retarget_lock_acquire_recursive>
 80096be:	bf00      	nop
 80096c0:	200003fa 	.word	0x200003fa

080096c4 <__sinit_lock_release>:
 80096c4:	4801      	ldr	r0, [pc, #4]	; (80096cc <__sinit_lock_release+0x8>)
 80096c6:	f000 bc15 	b.w	8009ef4 <__retarget_lock_release_recursive>
 80096ca:	bf00      	nop
 80096cc:	200003fa 	.word	0x200003fa

080096d0 <__sinit>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	4604      	mov	r4, r0
 80096d4:	f7ff fff0 	bl	80096b8 <__sinit_lock_acquire>
 80096d8:	69a3      	ldr	r3, [r4, #24]
 80096da:	b11b      	cbz	r3, 80096e4 <__sinit+0x14>
 80096dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096e0:	f7ff bff0 	b.w	80096c4 <__sinit_lock_release>
 80096e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096e8:	6523      	str	r3, [r4, #80]	; 0x50
 80096ea:	4b13      	ldr	r3, [pc, #76]	; (8009738 <__sinit+0x68>)
 80096ec:	4a13      	ldr	r2, [pc, #76]	; (800973c <__sinit+0x6c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	bf04      	itt	eq
 80096f6:	2301      	moveq	r3, #1
 80096f8:	61a3      	streq	r3, [r4, #24]
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 f820 	bl	8009740 <__sfp>
 8009700:	6060      	str	r0, [r4, #4]
 8009702:	4620      	mov	r0, r4
 8009704:	f000 f81c 	bl	8009740 <__sfp>
 8009708:	60a0      	str	r0, [r4, #8]
 800970a:	4620      	mov	r0, r4
 800970c:	f000 f818 	bl	8009740 <__sfp>
 8009710:	2200      	movs	r2, #0
 8009712:	60e0      	str	r0, [r4, #12]
 8009714:	2104      	movs	r1, #4
 8009716:	6860      	ldr	r0, [r4, #4]
 8009718:	f7ff ff82 	bl	8009620 <std>
 800971c:	68a0      	ldr	r0, [r4, #8]
 800971e:	2201      	movs	r2, #1
 8009720:	2109      	movs	r1, #9
 8009722:	f7ff ff7d 	bl	8009620 <std>
 8009726:	68e0      	ldr	r0, [r4, #12]
 8009728:	2202      	movs	r2, #2
 800972a:	2112      	movs	r1, #18
 800972c:	f7ff ff78 	bl	8009620 <std>
 8009730:	2301      	movs	r3, #1
 8009732:	61a3      	str	r3, [r4, #24]
 8009734:	e7d2      	b.n	80096dc <__sinit+0xc>
 8009736:	bf00      	nop
 8009738:	0800b534 	.word	0x0800b534
 800973c:	08009669 	.word	0x08009669

08009740 <__sfp>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	4607      	mov	r7, r0
 8009744:	f7ff ffac 	bl	80096a0 <__sfp_lock_acquire>
 8009748:	4b1e      	ldr	r3, [pc, #120]	; (80097c4 <__sfp+0x84>)
 800974a:	681e      	ldr	r6, [r3, #0]
 800974c:	69b3      	ldr	r3, [r6, #24]
 800974e:	b913      	cbnz	r3, 8009756 <__sfp+0x16>
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff ffbd 	bl	80096d0 <__sinit>
 8009756:	3648      	adds	r6, #72	; 0x48
 8009758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800975c:	3b01      	subs	r3, #1
 800975e:	d503      	bpl.n	8009768 <__sfp+0x28>
 8009760:	6833      	ldr	r3, [r6, #0]
 8009762:	b30b      	cbz	r3, 80097a8 <__sfp+0x68>
 8009764:	6836      	ldr	r6, [r6, #0]
 8009766:	e7f7      	b.n	8009758 <__sfp+0x18>
 8009768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800976c:	b9d5      	cbnz	r5, 80097a4 <__sfp+0x64>
 800976e:	4b16      	ldr	r3, [pc, #88]	; (80097c8 <__sfp+0x88>)
 8009770:	60e3      	str	r3, [r4, #12]
 8009772:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009776:	6665      	str	r5, [r4, #100]	; 0x64
 8009778:	f000 fbba 	bl	8009ef0 <__retarget_lock_init_recursive>
 800977c:	f7ff ff96 	bl	80096ac <__sfp_lock_release>
 8009780:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009784:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009788:	6025      	str	r5, [r4, #0]
 800978a:	61a5      	str	r5, [r4, #24]
 800978c:	2208      	movs	r2, #8
 800978e:	4629      	mov	r1, r5
 8009790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009794:	f7fd f97e 	bl	8006a94 <memset>
 8009798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800979c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097a0:	4620      	mov	r0, r4
 80097a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a4:	3468      	adds	r4, #104	; 0x68
 80097a6:	e7d9      	b.n	800975c <__sfp+0x1c>
 80097a8:	2104      	movs	r1, #4
 80097aa:	4638      	mov	r0, r7
 80097ac:	f7ff ff62 	bl	8009674 <__sfmoreglue>
 80097b0:	4604      	mov	r4, r0
 80097b2:	6030      	str	r0, [r6, #0]
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d1d5      	bne.n	8009764 <__sfp+0x24>
 80097b8:	f7ff ff78 	bl	80096ac <__sfp_lock_release>
 80097bc:	230c      	movs	r3, #12
 80097be:	603b      	str	r3, [r7, #0]
 80097c0:	e7ee      	b.n	80097a0 <__sfp+0x60>
 80097c2:	bf00      	nop
 80097c4:	0800b534 	.word	0x0800b534
 80097c8:	ffff0001 	.word	0xffff0001

080097cc <_fwalk_reent>:
 80097cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d0:	4606      	mov	r6, r0
 80097d2:	4688      	mov	r8, r1
 80097d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097d8:	2700      	movs	r7, #0
 80097da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097de:	f1b9 0901 	subs.w	r9, r9, #1
 80097e2:	d505      	bpl.n	80097f0 <_fwalk_reent+0x24>
 80097e4:	6824      	ldr	r4, [r4, #0]
 80097e6:	2c00      	cmp	r4, #0
 80097e8:	d1f7      	bne.n	80097da <_fwalk_reent+0xe>
 80097ea:	4638      	mov	r0, r7
 80097ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f0:	89ab      	ldrh	r3, [r5, #12]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d907      	bls.n	8009806 <_fwalk_reent+0x3a>
 80097f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097fa:	3301      	adds	r3, #1
 80097fc:	d003      	beq.n	8009806 <_fwalk_reent+0x3a>
 80097fe:	4629      	mov	r1, r5
 8009800:	4630      	mov	r0, r6
 8009802:	47c0      	blx	r8
 8009804:	4307      	orrs	r7, r0
 8009806:	3568      	adds	r5, #104	; 0x68
 8009808:	e7e9      	b.n	80097de <_fwalk_reent+0x12>

0800980a <rshift>:
 800980a:	6903      	ldr	r3, [r0, #16]
 800980c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009814:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009818:	f100 0414 	add.w	r4, r0, #20
 800981c:	dd45      	ble.n	80098aa <rshift+0xa0>
 800981e:	f011 011f 	ands.w	r1, r1, #31
 8009822:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009826:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800982a:	d10c      	bne.n	8009846 <rshift+0x3c>
 800982c:	f100 0710 	add.w	r7, r0, #16
 8009830:	4629      	mov	r1, r5
 8009832:	42b1      	cmp	r1, r6
 8009834:	d334      	bcc.n	80098a0 <rshift+0x96>
 8009836:	1a9b      	subs	r3, r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	1eea      	subs	r2, r5, #3
 800983c:	4296      	cmp	r6, r2
 800983e:	bf38      	it	cc
 8009840:	2300      	movcc	r3, #0
 8009842:	4423      	add	r3, r4
 8009844:	e015      	b.n	8009872 <rshift+0x68>
 8009846:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800984a:	f1c1 0820 	rsb	r8, r1, #32
 800984e:	40cf      	lsrs	r7, r1
 8009850:	f105 0e04 	add.w	lr, r5, #4
 8009854:	46a1      	mov	r9, r4
 8009856:	4576      	cmp	r6, lr
 8009858:	46f4      	mov	ip, lr
 800985a:	d815      	bhi.n	8009888 <rshift+0x7e>
 800985c:	1a9a      	subs	r2, r3, r2
 800985e:	0092      	lsls	r2, r2, #2
 8009860:	3a04      	subs	r2, #4
 8009862:	3501      	adds	r5, #1
 8009864:	42ae      	cmp	r6, r5
 8009866:	bf38      	it	cc
 8009868:	2200      	movcc	r2, #0
 800986a:	18a3      	adds	r3, r4, r2
 800986c:	50a7      	str	r7, [r4, r2]
 800986e:	b107      	cbz	r7, 8009872 <rshift+0x68>
 8009870:	3304      	adds	r3, #4
 8009872:	1b1a      	subs	r2, r3, r4
 8009874:	42a3      	cmp	r3, r4
 8009876:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800987a:	bf08      	it	eq
 800987c:	2300      	moveq	r3, #0
 800987e:	6102      	str	r2, [r0, #16]
 8009880:	bf08      	it	eq
 8009882:	6143      	streq	r3, [r0, #20]
 8009884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009888:	f8dc c000 	ldr.w	ip, [ip]
 800988c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009890:	ea4c 0707 	orr.w	r7, ip, r7
 8009894:	f849 7b04 	str.w	r7, [r9], #4
 8009898:	f85e 7b04 	ldr.w	r7, [lr], #4
 800989c:	40cf      	lsrs	r7, r1
 800989e:	e7da      	b.n	8009856 <rshift+0x4c>
 80098a0:	f851 cb04 	ldr.w	ip, [r1], #4
 80098a4:	f847 cf04 	str.w	ip, [r7, #4]!
 80098a8:	e7c3      	b.n	8009832 <rshift+0x28>
 80098aa:	4623      	mov	r3, r4
 80098ac:	e7e1      	b.n	8009872 <rshift+0x68>

080098ae <__hexdig_fun>:
 80098ae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098b2:	2b09      	cmp	r3, #9
 80098b4:	d802      	bhi.n	80098bc <__hexdig_fun+0xe>
 80098b6:	3820      	subs	r0, #32
 80098b8:	b2c0      	uxtb	r0, r0
 80098ba:	4770      	bx	lr
 80098bc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098c0:	2b05      	cmp	r3, #5
 80098c2:	d801      	bhi.n	80098c8 <__hexdig_fun+0x1a>
 80098c4:	3847      	subs	r0, #71	; 0x47
 80098c6:	e7f7      	b.n	80098b8 <__hexdig_fun+0xa>
 80098c8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098cc:	2b05      	cmp	r3, #5
 80098ce:	d801      	bhi.n	80098d4 <__hexdig_fun+0x26>
 80098d0:	3827      	subs	r0, #39	; 0x27
 80098d2:	e7f1      	b.n	80098b8 <__hexdig_fun+0xa>
 80098d4:	2000      	movs	r0, #0
 80098d6:	4770      	bx	lr

080098d8 <__gethex>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	ed2d 8b02 	vpush	{d8}
 80098e0:	b089      	sub	sp, #36	; 0x24
 80098e2:	ee08 0a10 	vmov	s16, r0
 80098e6:	9304      	str	r3, [sp, #16]
 80098e8:	4bb4      	ldr	r3, [pc, #720]	; (8009bbc <__gethex+0x2e4>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	4618      	mov	r0, r3
 80098f0:	468b      	mov	fp, r1
 80098f2:	4690      	mov	r8, r2
 80098f4:	f7f6 fc6c 	bl	80001d0 <strlen>
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	f8db 2000 	ldr.w	r2, [fp]
 80098fe:	4403      	add	r3, r0
 8009900:	4682      	mov	sl, r0
 8009902:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009906:	9305      	str	r3, [sp, #20]
 8009908:	1c93      	adds	r3, r2, #2
 800990a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800990e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009912:	32fe      	adds	r2, #254	; 0xfe
 8009914:	18d1      	adds	r1, r2, r3
 8009916:	461f      	mov	r7, r3
 8009918:	f813 0b01 	ldrb.w	r0, [r3], #1
 800991c:	9100      	str	r1, [sp, #0]
 800991e:	2830      	cmp	r0, #48	; 0x30
 8009920:	d0f8      	beq.n	8009914 <__gethex+0x3c>
 8009922:	f7ff ffc4 	bl	80098ae <__hexdig_fun>
 8009926:	4604      	mov	r4, r0
 8009928:	2800      	cmp	r0, #0
 800992a:	d13a      	bne.n	80099a2 <__gethex+0xca>
 800992c:	9901      	ldr	r1, [sp, #4]
 800992e:	4652      	mov	r2, sl
 8009930:	4638      	mov	r0, r7
 8009932:	f001 fadc 	bl	800aeee <strncmp>
 8009936:	4605      	mov	r5, r0
 8009938:	2800      	cmp	r0, #0
 800993a:	d168      	bne.n	8009a0e <__gethex+0x136>
 800993c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009940:	eb07 060a 	add.w	r6, r7, sl
 8009944:	f7ff ffb3 	bl	80098ae <__hexdig_fun>
 8009948:	2800      	cmp	r0, #0
 800994a:	d062      	beq.n	8009a12 <__gethex+0x13a>
 800994c:	4633      	mov	r3, r6
 800994e:	7818      	ldrb	r0, [r3, #0]
 8009950:	2830      	cmp	r0, #48	; 0x30
 8009952:	461f      	mov	r7, r3
 8009954:	f103 0301 	add.w	r3, r3, #1
 8009958:	d0f9      	beq.n	800994e <__gethex+0x76>
 800995a:	f7ff ffa8 	bl	80098ae <__hexdig_fun>
 800995e:	2301      	movs	r3, #1
 8009960:	fab0 f480 	clz	r4, r0
 8009964:	0964      	lsrs	r4, r4, #5
 8009966:	4635      	mov	r5, r6
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	463a      	mov	r2, r7
 800996c:	4616      	mov	r6, r2
 800996e:	3201      	adds	r2, #1
 8009970:	7830      	ldrb	r0, [r6, #0]
 8009972:	f7ff ff9c 	bl	80098ae <__hexdig_fun>
 8009976:	2800      	cmp	r0, #0
 8009978:	d1f8      	bne.n	800996c <__gethex+0x94>
 800997a:	9901      	ldr	r1, [sp, #4]
 800997c:	4652      	mov	r2, sl
 800997e:	4630      	mov	r0, r6
 8009980:	f001 fab5 	bl	800aeee <strncmp>
 8009984:	b980      	cbnz	r0, 80099a8 <__gethex+0xd0>
 8009986:	b94d      	cbnz	r5, 800999c <__gethex+0xc4>
 8009988:	eb06 050a 	add.w	r5, r6, sl
 800998c:	462a      	mov	r2, r5
 800998e:	4616      	mov	r6, r2
 8009990:	3201      	adds	r2, #1
 8009992:	7830      	ldrb	r0, [r6, #0]
 8009994:	f7ff ff8b 	bl	80098ae <__hexdig_fun>
 8009998:	2800      	cmp	r0, #0
 800999a:	d1f8      	bne.n	800998e <__gethex+0xb6>
 800999c:	1bad      	subs	r5, r5, r6
 800999e:	00ad      	lsls	r5, r5, #2
 80099a0:	e004      	b.n	80099ac <__gethex+0xd4>
 80099a2:	2400      	movs	r4, #0
 80099a4:	4625      	mov	r5, r4
 80099a6:	e7e0      	b.n	800996a <__gethex+0x92>
 80099a8:	2d00      	cmp	r5, #0
 80099aa:	d1f7      	bne.n	800999c <__gethex+0xc4>
 80099ac:	7833      	ldrb	r3, [r6, #0]
 80099ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099b2:	2b50      	cmp	r3, #80	; 0x50
 80099b4:	d13b      	bne.n	8009a2e <__gethex+0x156>
 80099b6:	7873      	ldrb	r3, [r6, #1]
 80099b8:	2b2b      	cmp	r3, #43	; 0x2b
 80099ba:	d02c      	beq.n	8009a16 <__gethex+0x13e>
 80099bc:	2b2d      	cmp	r3, #45	; 0x2d
 80099be:	d02e      	beq.n	8009a1e <__gethex+0x146>
 80099c0:	1c71      	adds	r1, r6, #1
 80099c2:	f04f 0900 	mov.w	r9, #0
 80099c6:	7808      	ldrb	r0, [r1, #0]
 80099c8:	f7ff ff71 	bl	80098ae <__hexdig_fun>
 80099cc:	1e43      	subs	r3, r0, #1
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b18      	cmp	r3, #24
 80099d2:	d82c      	bhi.n	8009a2e <__gethex+0x156>
 80099d4:	f1a0 0210 	sub.w	r2, r0, #16
 80099d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099dc:	f7ff ff67 	bl	80098ae <__hexdig_fun>
 80099e0:	1e43      	subs	r3, r0, #1
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b18      	cmp	r3, #24
 80099e6:	d91d      	bls.n	8009a24 <__gethex+0x14c>
 80099e8:	f1b9 0f00 	cmp.w	r9, #0
 80099ec:	d000      	beq.n	80099f0 <__gethex+0x118>
 80099ee:	4252      	negs	r2, r2
 80099f0:	4415      	add	r5, r2
 80099f2:	f8cb 1000 	str.w	r1, [fp]
 80099f6:	b1e4      	cbz	r4, 8009a32 <__gethex+0x15a>
 80099f8:	9b00      	ldr	r3, [sp, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	bf14      	ite	ne
 80099fe:	2700      	movne	r7, #0
 8009a00:	2706      	moveq	r7, #6
 8009a02:	4638      	mov	r0, r7
 8009a04:	b009      	add	sp, #36	; 0x24
 8009a06:	ecbd 8b02 	vpop	{d8}
 8009a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0e:	463e      	mov	r6, r7
 8009a10:	4625      	mov	r5, r4
 8009a12:	2401      	movs	r4, #1
 8009a14:	e7ca      	b.n	80099ac <__gethex+0xd4>
 8009a16:	f04f 0900 	mov.w	r9, #0
 8009a1a:	1cb1      	adds	r1, r6, #2
 8009a1c:	e7d3      	b.n	80099c6 <__gethex+0xee>
 8009a1e:	f04f 0901 	mov.w	r9, #1
 8009a22:	e7fa      	b.n	8009a1a <__gethex+0x142>
 8009a24:	230a      	movs	r3, #10
 8009a26:	fb03 0202 	mla	r2, r3, r2, r0
 8009a2a:	3a10      	subs	r2, #16
 8009a2c:	e7d4      	b.n	80099d8 <__gethex+0x100>
 8009a2e:	4631      	mov	r1, r6
 8009a30:	e7df      	b.n	80099f2 <__gethex+0x11a>
 8009a32:	1bf3      	subs	r3, r6, r7
 8009a34:	3b01      	subs	r3, #1
 8009a36:	4621      	mov	r1, r4
 8009a38:	2b07      	cmp	r3, #7
 8009a3a:	dc0b      	bgt.n	8009a54 <__gethex+0x17c>
 8009a3c:	ee18 0a10 	vmov	r0, s16
 8009a40:	f000 fae6 	bl	800a010 <_Balloc>
 8009a44:	4604      	mov	r4, r0
 8009a46:	b940      	cbnz	r0, 8009a5a <__gethex+0x182>
 8009a48:	4b5d      	ldr	r3, [pc, #372]	; (8009bc0 <__gethex+0x2e8>)
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	21de      	movs	r1, #222	; 0xde
 8009a4e:	485d      	ldr	r0, [pc, #372]	; (8009bc4 <__gethex+0x2ec>)
 8009a50:	f001 fa80 	bl	800af54 <__assert_func>
 8009a54:	3101      	adds	r1, #1
 8009a56:	105b      	asrs	r3, r3, #1
 8009a58:	e7ee      	b.n	8009a38 <__gethex+0x160>
 8009a5a:	f100 0914 	add.w	r9, r0, #20
 8009a5e:	f04f 0b00 	mov.w	fp, #0
 8009a62:	f1ca 0301 	rsb	r3, sl, #1
 8009a66:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a6a:	f8cd b000 	str.w	fp, [sp]
 8009a6e:	9306      	str	r3, [sp, #24]
 8009a70:	42b7      	cmp	r7, r6
 8009a72:	d340      	bcc.n	8009af6 <__gethex+0x21e>
 8009a74:	9802      	ldr	r0, [sp, #8]
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	f840 3b04 	str.w	r3, [r0], #4
 8009a7c:	eba0 0009 	sub.w	r0, r0, r9
 8009a80:	1080      	asrs	r0, r0, #2
 8009a82:	0146      	lsls	r6, r0, #5
 8009a84:	6120      	str	r0, [r4, #16]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 fbb4 	bl	800a1f4 <__hi0bits>
 8009a8c:	1a30      	subs	r0, r6, r0
 8009a8e:	f8d8 6000 	ldr.w	r6, [r8]
 8009a92:	42b0      	cmp	r0, r6
 8009a94:	dd63      	ble.n	8009b5e <__gethex+0x286>
 8009a96:	1b87      	subs	r7, r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 ff58 	bl	800a950 <__any_on>
 8009aa0:	4682      	mov	sl, r0
 8009aa2:	b1a8      	cbz	r0, 8009ad0 <__gethex+0x1f8>
 8009aa4:	1e7b      	subs	r3, r7, #1
 8009aa6:	1159      	asrs	r1, r3, #5
 8009aa8:	f003 021f 	and.w	r2, r3, #31
 8009aac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009ab0:	f04f 0a01 	mov.w	sl, #1
 8009ab4:	fa0a f202 	lsl.w	r2, sl, r2
 8009ab8:	420a      	tst	r2, r1
 8009aba:	d009      	beq.n	8009ad0 <__gethex+0x1f8>
 8009abc:	4553      	cmp	r3, sl
 8009abe:	dd05      	ble.n	8009acc <__gethex+0x1f4>
 8009ac0:	1eb9      	subs	r1, r7, #2
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 ff44 	bl	800a950 <__any_on>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d145      	bne.n	8009b58 <__gethex+0x280>
 8009acc:	f04f 0a02 	mov.w	sl, #2
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f7ff fe99 	bl	800980a <rshift>
 8009ad8:	443d      	add	r5, r7
 8009ada:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ade:	42ab      	cmp	r3, r5
 8009ae0:	da4c      	bge.n	8009b7c <__gethex+0x2a4>
 8009ae2:	ee18 0a10 	vmov	r0, s16
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	f000 fad2 	bl	800a090 <_Bfree>
 8009aec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009aee:	2300      	movs	r3, #0
 8009af0:	6013      	str	r3, [r2, #0]
 8009af2:	27a3      	movs	r7, #163	; 0xa3
 8009af4:	e785      	b.n	8009a02 <__gethex+0x12a>
 8009af6:	1e73      	subs	r3, r6, #1
 8009af8:	9a05      	ldr	r2, [sp, #20]
 8009afa:	9303      	str	r3, [sp, #12]
 8009afc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d019      	beq.n	8009b38 <__gethex+0x260>
 8009b04:	f1bb 0f20 	cmp.w	fp, #32
 8009b08:	d107      	bne.n	8009b1a <__gethex+0x242>
 8009b0a:	9b02      	ldr	r3, [sp, #8]
 8009b0c:	9a00      	ldr	r2, [sp, #0]
 8009b0e:	f843 2b04 	str.w	r2, [r3], #4
 8009b12:	9302      	str	r3, [sp, #8]
 8009b14:	2300      	movs	r3, #0
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	469b      	mov	fp, r3
 8009b1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b1e:	f7ff fec6 	bl	80098ae <__hexdig_fun>
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	f000 000f 	and.w	r0, r0, #15
 8009b28:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b2c:	4303      	orrs	r3, r0
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	f10b 0b04 	add.w	fp, fp, #4
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	e00d      	b.n	8009b54 <__gethex+0x27c>
 8009b38:	9b03      	ldr	r3, [sp, #12]
 8009b3a:	9a06      	ldr	r2, [sp, #24]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	42bb      	cmp	r3, r7
 8009b40:	d3e0      	bcc.n	8009b04 <__gethex+0x22c>
 8009b42:	4618      	mov	r0, r3
 8009b44:	9901      	ldr	r1, [sp, #4]
 8009b46:	9307      	str	r3, [sp, #28]
 8009b48:	4652      	mov	r2, sl
 8009b4a:	f001 f9d0 	bl	800aeee <strncmp>
 8009b4e:	9b07      	ldr	r3, [sp, #28]
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d1d7      	bne.n	8009b04 <__gethex+0x22c>
 8009b54:	461e      	mov	r6, r3
 8009b56:	e78b      	b.n	8009a70 <__gethex+0x198>
 8009b58:	f04f 0a03 	mov.w	sl, #3
 8009b5c:	e7b8      	b.n	8009ad0 <__gethex+0x1f8>
 8009b5e:	da0a      	bge.n	8009b76 <__gethex+0x29e>
 8009b60:	1a37      	subs	r7, r6, r0
 8009b62:	4621      	mov	r1, r4
 8009b64:	ee18 0a10 	vmov	r0, s16
 8009b68:	463a      	mov	r2, r7
 8009b6a:	f000 fcad 	bl	800a4c8 <__lshift>
 8009b6e:	1bed      	subs	r5, r5, r7
 8009b70:	4604      	mov	r4, r0
 8009b72:	f100 0914 	add.w	r9, r0, #20
 8009b76:	f04f 0a00 	mov.w	sl, #0
 8009b7a:	e7ae      	b.n	8009ada <__gethex+0x202>
 8009b7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b80:	42a8      	cmp	r0, r5
 8009b82:	dd72      	ble.n	8009c6a <__gethex+0x392>
 8009b84:	1b45      	subs	r5, r0, r5
 8009b86:	42ae      	cmp	r6, r5
 8009b88:	dc36      	bgt.n	8009bf8 <__gethex+0x320>
 8009b8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d02a      	beq.n	8009be8 <__gethex+0x310>
 8009b92:	2b03      	cmp	r3, #3
 8009b94:	d02c      	beq.n	8009bf0 <__gethex+0x318>
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d11c      	bne.n	8009bd4 <__gethex+0x2fc>
 8009b9a:	42ae      	cmp	r6, r5
 8009b9c:	d11a      	bne.n	8009bd4 <__gethex+0x2fc>
 8009b9e:	2e01      	cmp	r6, #1
 8009ba0:	d112      	bne.n	8009bc8 <__gethex+0x2f0>
 8009ba2:	9a04      	ldr	r2, [sp, #16]
 8009ba4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	2301      	movs	r3, #1
 8009bac:	6123      	str	r3, [r4, #16]
 8009bae:	f8c9 3000 	str.w	r3, [r9]
 8009bb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bb4:	2762      	movs	r7, #98	; 0x62
 8009bb6:	601c      	str	r4, [r3, #0]
 8009bb8:	e723      	b.n	8009a02 <__gethex+0x12a>
 8009bba:	bf00      	nop
 8009bbc:	0800b824 	.word	0x0800b824
 8009bc0:	0800b748 	.word	0x0800b748
 8009bc4:	0800b7bc 	.word	0x0800b7bc
 8009bc8:	1e71      	subs	r1, r6, #1
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f000 fec0 	bl	800a950 <__any_on>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d1e6      	bne.n	8009ba2 <__gethex+0x2ca>
 8009bd4:	ee18 0a10 	vmov	r0, s16
 8009bd8:	4621      	mov	r1, r4
 8009bda:	f000 fa59 	bl	800a090 <_Bfree>
 8009bde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009be0:	2300      	movs	r3, #0
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	2750      	movs	r7, #80	; 0x50
 8009be6:	e70c      	b.n	8009a02 <__gethex+0x12a>
 8009be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1f2      	bne.n	8009bd4 <__gethex+0x2fc>
 8009bee:	e7d8      	b.n	8009ba2 <__gethex+0x2ca>
 8009bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1d5      	bne.n	8009ba2 <__gethex+0x2ca>
 8009bf6:	e7ed      	b.n	8009bd4 <__gethex+0x2fc>
 8009bf8:	1e6f      	subs	r7, r5, #1
 8009bfa:	f1ba 0f00 	cmp.w	sl, #0
 8009bfe:	d131      	bne.n	8009c64 <__gethex+0x38c>
 8009c00:	b127      	cbz	r7, 8009c0c <__gethex+0x334>
 8009c02:	4639      	mov	r1, r7
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 fea3 	bl	800a950 <__any_on>
 8009c0a:	4682      	mov	sl, r0
 8009c0c:	117b      	asrs	r3, r7, #5
 8009c0e:	2101      	movs	r1, #1
 8009c10:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c14:	f007 071f 	and.w	r7, r7, #31
 8009c18:	fa01 f707 	lsl.w	r7, r1, r7
 8009c1c:	421f      	tst	r7, r3
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4620      	mov	r0, r4
 8009c22:	bf18      	it	ne
 8009c24:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c28:	1b76      	subs	r6, r6, r5
 8009c2a:	f7ff fdee 	bl	800980a <rshift>
 8009c2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c32:	2702      	movs	r7, #2
 8009c34:	f1ba 0f00 	cmp.w	sl, #0
 8009c38:	d048      	beq.n	8009ccc <__gethex+0x3f4>
 8009c3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d015      	beq.n	8009c6e <__gethex+0x396>
 8009c42:	2b03      	cmp	r3, #3
 8009c44:	d017      	beq.n	8009c76 <__gethex+0x39e>
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d109      	bne.n	8009c5e <__gethex+0x386>
 8009c4a:	f01a 0f02 	tst.w	sl, #2
 8009c4e:	d006      	beq.n	8009c5e <__gethex+0x386>
 8009c50:	f8d9 0000 	ldr.w	r0, [r9]
 8009c54:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c58:	f01a 0f01 	tst.w	sl, #1
 8009c5c:	d10e      	bne.n	8009c7c <__gethex+0x3a4>
 8009c5e:	f047 0710 	orr.w	r7, r7, #16
 8009c62:	e033      	b.n	8009ccc <__gethex+0x3f4>
 8009c64:	f04f 0a01 	mov.w	sl, #1
 8009c68:	e7d0      	b.n	8009c0c <__gethex+0x334>
 8009c6a:	2701      	movs	r7, #1
 8009c6c:	e7e2      	b.n	8009c34 <__gethex+0x35c>
 8009c6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c70:	f1c3 0301 	rsb	r3, r3, #1
 8009c74:	9315      	str	r3, [sp, #84]	; 0x54
 8009c76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0f0      	beq.n	8009c5e <__gethex+0x386>
 8009c7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c80:	f104 0314 	add.w	r3, r4, #20
 8009c84:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c88:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c8c:	f04f 0c00 	mov.w	ip, #0
 8009c90:	4618      	mov	r0, r3
 8009c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c96:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009c9a:	d01c      	beq.n	8009cd6 <__gethex+0x3fe>
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	6002      	str	r2, [r0, #0]
 8009ca0:	2f02      	cmp	r7, #2
 8009ca2:	f104 0314 	add.w	r3, r4, #20
 8009ca6:	d13f      	bne.n	8009d28 <__gethex+0x450>
 8009ca8:	f8d8 2000 	ldr.w	r2, [r8]
 8009cac:	3a01      	subs	r2, #1
 8009cae:	42b2      	cmp	r2, r6
 8009cb0:	d10a      	bne.n	8009cc8 <__gethex+0x3f0>
 8009cb2:	1171      	asrs	r1, r6, #5
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cba:	f006 061f 	and.w	r6, r6, #31
 8009cbe:	fa02 f606 	lsl.w	r6, r2, r6
 8009cc2:	421e      	tst	r6, r3
 8009cc4:	bf18      	it	ne
 8009cc6:	4617      	movne	r7, r2
 8009cc8:	f047 0720 	orr.w	r7, r7, #32
 8009ccc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cce:	601c      	str	r4, [r3, #0]
 8009cd0:	9b04      	ldr	r3, [sp, #16]
 8009cd2:	601d      	str	r5, [r3, #0]
 8009cd4:	e695      	b.n	8009a02 <__gethex+0x12a>
 8009cd6:	4299      	cmp	r1, r3
 8009cd8:	f843 cc04 	str.w	ip, [r3, #-4]
 8009cdc:	d8d8      	bhi.n	8009c90 <__gethex+0x3b8>
 8009cde:	68a3      	ldr	r3, [r4, #8]
 8009ce0:	459b      	cmp	fp, r3
 8009ce2:	db19      	blt.n	8009d18 <__gethex+0x440>
 8009ce4:	6861      	ldr	r1, [r4, #4]
 8009ce6:	ee18 0a10 	vmov	r0, s16
 8009cea:	3101      	adds	r1, #1
 8009cec:	f000 f990 	bl	800a010 <_Balloc>
 8009cf0:	4681      	mov	r9, r0
 8009cf2:	b918      	cbnz	r0, 8009cfc <__gethex+0x424>
 8009cf4:	4b1a      	ldr	r3, [pc, #104]	; (8009d60 <__gethex+0x488>)
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	2184      	movs	r1, #132	; 0x84
 8009cfa:	e6a8      	b.n	8009a4e <__gethex+0x176>
 8009cfc:	6922      	ldr	r2, [r4, #16]
 8009cfe:	3202      	adds	r2, #2
 8009d00:	f104 010c 	add.w	r1, r4, #12
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	300c      	adds	r0, #12
 8009d08:	f000 f974 	bl	8009ff4 <memcpy>
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	ee18 0a10 	vmov	r0, s16
 8009d12:	f000 f9bd 	bl	800a090 <_Bfree>
 8009d16:	464c      	mov	r4, r9
 8009d18:	6923      	ldr	r3, [r4, #16]
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d20:	6122      	str	r2, [r4, #16]
 8009d22:	2201      	movs	r2, #1
 8009d24:	615a      	str	r2, [r3, #20]
 8009d26:	e7bb      	b.n	8009ca0 <__gethex+0x3c8>
 8009d28:	6922      	ldr	r2, [r4, #16]
 8009d2a:	455a      	cmp	r2, fp
 8009d2c:	dd0b      	ble.n	8009d46 <__gethex+0x46e>
 8009d2e:	2101      	movs	r1, #1
 8009d30:	4620      	mov	r0, r4
 8009d32:	f7ff fd6a 	bl	800980a <rshift>
 8009d36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d3a:	3501      	adds	r5, #1
 8009d3c:	42ab      	cmp	r3, r5
 8009d3e:	f6ff aed0 	blt.w	8009ae2 <__gethex+0x20a>
 8009d42:	2701      	movs	r7, #1
 8009d44:	e7c0      	b.n	8009cc8 <__gethex+0x3f0>
 8009d46:	f016 061f 	ands.w	r6, r6, #31
 8009d4a:	d0fa      	beq.n	8009d42 <__gethex+0x46a>
 8009d4c:	4453      	add	r3, sl
 8009d4e:	f1c6 0620 	rsb	r6, r6, #32
 8009d52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d56:	f000 fa4d 	bl	800a1f4 <__hi0bits>
 8009d5a:	42b0      	cmp	r0, r6
 8009d5c:	dbe7      	blt.n	8009d2e <__gethex+0x456>
 8009d5e:	e7f0      	b.n	8009d42 <__gethex+0x46a>
 8009d60:	0800b748 	.word	0x0800b748

08009d64 <L_shift>:
 8009d64:	f1c2 0208 	rsb	r2, r2, #8
 8009d68:	0092      	lsls	r2, r2, #2
 8009d6a:	b570      	push	{r4, r5, r6, lr}
 8009d6c:	f1c2 0620 	rsb	r6, r2, #32
 8009d70:	6843      	ldr	r3, [r0, #4]
 8009d72:	6804      	ldr	r4, [r0, #0]
 8009d74:	fa03 f506 	lsl.w	r5, r3, r6
 8009d78:	432c      	orrs	r4, r5
 8009d7a:	40d3      	lsrs	r3, r2
 8009d7c:	6004      	str	r4, [r0, #0]
 8009d7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d82:	4288      	cmp	r0, r1
 8009d84:	d3f4      	bcc.n	8009d70 <L_shift+0xc>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}

08009d88 <__match>:
 8009d88:	b530      	push	{r4, r5, lr}
 8009d8a:	6803      	ldr	r3, [r0, #0]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d92:	b914      	cbnz	r4, 8009d9a <__match+0x12>
 8009d94:	6003      	str	r3, [r0, #0]
 8009d96:	2001      	movs	r0, #1
 8009d98:	bd30      	pop	{r4, r5, pc}
 8009d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009da2:	2d19      	cmp	r5, #25
 8009da4:	bf98      	it	ls
 8009da6:	3220      	addls	r2, #32
 8009da8:	42a2      	cmp	r2, r4
 8009daa:	d0f0      	beq.n	8009d8e <__match+0x6>
 8009dac:	2000      	movs	r0, #0
 8009dae:	e7f3      	b.n	8009d98 <__match+0x10>

08009db0 <__hexnan>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	680b      	ldr	r3, [r1, #0]
 8009db6:	115e      	asrs	r6, r3, #5
 8009db8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009dbc:	f013 031f 	ands.w	r3, r3, #31
 8009dc0:	b087      	sub	sp, #28
 8009dc2:	bf18      	it	ne
 8009dc4:	3604      	addne	r6, #4
 8009dc6:	2500      	movs	r5, #0
 8009dc8:	1f37      	subs	r7, r6, #4
 8009dca:	4690      	mov	r8, r2
 8009dcc:	6802      	ldr	r2, [r0, #0]
 8009dce:	9301      	str	r3, [sp, #4]
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	f846 5c04 	str.w	r5, [r6, #-4]
 8009dd6:	46b9      	mov	r9, r7
 8009dd8:	463c      	mov	r4, r7
 8009dda:	9502      	str	r5, [sp, #8]
 8009ddc:	46ab      	mov	fp, r5
 8009dde:	7851      	ldrb	r1, [r2, #1]
 8009de0:	1c53      	adds	r3, r2, #1
 8009de2:	9303      	str	r3, [sp, #12]
 8009de4:	b341      	cbz	r1, 8009e38 <__hexnan+0x88>
 8009de6:	4608      	mov	r0, r1
 8009de8:	9205      	str	r2, [sp, #20]
 8009dea:	9104      	str	r1, [sp, #16]
 8009dec:	f7ff fd5f 	bl	80098ae <__hexdig_fun>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d14f      	bne.n	8009e94 <__hexnan+0xe4>
 8009df4:	9904      	ldr	r1, [sp, #16]
 8009df6:	9a05      	ldr	r2, [sp, #20]
 8009df8:	2920      	cmp	r1, #32
 8009dfa:	d818      	bhi.n	8009e2e <__hexnan+0x7e>
 8009dfc:	9b02      	ldr	r3, [sp, #8]
 8009dfe:	459b      	cmp	fp, r3
 8009e00:	dd13      	ble.n	8009e2a <__hexnan+0x7a>
 8009e02:	454c      	cmp	r4, r9
 8009e04:	d206      	bcs.n	8009e14 <__hexnan+0x64>
 8009e06:	2d07      	cmp	r5, #7
 8009e08:	dc04      	bgt.n	8009e14 <__hexnan+0x64>
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	4649      	mov	r1, r9
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f7ff ffa8 	bl	8009d64 <L_shift>
 8009e14:	4544      	cmp	r4, r8
 8009e16:	d950      	bls.n	8009eba <__hexnan+0x10a>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	f1a4 0904 	sub.w	r9, r4, #4
 8009e1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e22:	f8cd b008 	str.w	fp, [sp, #8]
 8009e26:	464c      	mov	r4, r9
 8009e28:	461d      	mov	r5, r3
 8009e2a:	9a03      	ldr	r2, [sp, #12]
 8009e2c:	e7d7      	b.n	8009dde <__hexnan+0x2e>
 8009e2e:	2929      	cmp	r1, #41	; 0x29
 8009e30:	d156      	bne.n	8009ee0 <__hexnan+0x130>
 8009e32:	3202      	adds	r2, #2
 8009e34:	f8ca 2000 	str.w	r2, [sl]
 8009e38:	f1bb 0f00 	cmp.w	fp, #0
 8009e3c:	d050      	beq.n	8009ee0 <__hexnan+0x130>
 8009e3e:	454c      	cmp	r4, r9
 8009e40:	d206      	bcs.n	8009e50 <__hexnan+0xa0>
 8009e42:	2d07      	cmp	r5, #7
 8009e44:	dc04      	bgt.n	8009e50 <__hexnan+0xa0>
 8009e46:	462a      	mov	r2, r5
 8009e48:	4649      	mov	r1, r9
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f7ff ff8a 	bl	8009d64 <L_shift>
 8009e50:	4544      	cmp	r4, r8
 8009e52:	d934      	bls.n	8009ebe <__hexnan+0x10e>
 8009e54:	f1a8 0204 	sub.w	r2, r8, #4
 8009e58:	4623      	mov	r3, r4
 8009e5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e62:	429f      	cmp	r7, r3
 8009e64:	d2f9      	bcs.n	8009e5a <__hexnan+0xaa>
 8009e66:	1b3b      	subs	r3, r7, r4
 8009e68:	f023 0303 	bic.w	r3, r3, #3
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	3401      	adds	r4, #1
 8009e70:	3e03      	subs	r6, #3
 8009e72:	42b4      	cmp	r4, r6
 8009e74:	bf88      	it	hi
 8009e76:	2304      	movhi	r3, #4
 8009e78:	4443      	add	r3, r8
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f843 2b04 	str.w	r2, [r3], #4
 8009e80:	429f      	cmp	r7, r3
 8009e82:	d2fb      	bcs.n	8009e7c <__hexnan+0xcc>
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	b91b      	cbnz	r3, 8009e90 <__hexnan+0xe0>
 8009e88:	4547      	cmp	r7, r8
 8009e8a:	d127      	bne.n	8009edc <__hexnan+0x12c>
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	603b      	str	r3, [r7, #0]
 8009e90:	2005      	movs	r0, #5
 8009e92:	e026      	b.n	8009ee2 <__hexnan+0x132>
 8009e94:	3501      	adds	r5, #1
 8009e96:	2d08      	cmp	r5, #8
 8009e98:	f10b 0b01 	add.w	fp, fp, #1
 8009e9c:	dd06      	ble.n	8009eac <__hexnan+0xfc>
 8009e9e:	4544      	cmp	r4, r8
 8009ea0:	d9c3      	bls.n	8009e2a <__hexnan+0x7a>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ea8:	2501      	movs	r5, #1
 8009eaa:	3c04      	subs	r4, #4
 8009eac:	6822      	ldr	r2, [r4, #0]
 8009eae:	f000 000f 	and.w	r0, r0, #15
 8009eb2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009eb6:	6022      	str	r2, [r4, #0]
 8009eb8:	e7b7      	b.n	8009e2a <__hexnan+0x7a>
 8009eba:	2508      	movs	r5, #8
 8009ebc:	e7b5      	b.n	8009e2a <__hexnan+0x7a>
 8009ebe:	9b01      	ldr	r3, [sp, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0df      	beq.n	8009e84 <__hexnan+0xd4>
 8009ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ec8:	f1c3 0320 	rsb	r3, r3, #32
 8009ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ed4:	401a      	ands	r2, r3
 8009ed6:	f846 2c04 	str.w	r2, [r6, #-4]
 8009eda:	e7d3      	b.n	8009e84 <__hexnan+0xd4>
 8009edc:	3f04      	subs	r7, #4
 8009ede:	e7d1      	b.n	8009e84 <__hexnan+0xd4>
 8009ee0:	2004      	movs	r0, #4
 8009ee2:	b007      	add	sp, #28
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ee8 <_localeconv_r>:
 8009ee8:	4800      	ldr	r0, [pc, #0]	; (8009eec <_localeconv_r+0x4>)
 8009eea:	4770      	bx	lr
 8009eec:	20000164 	.word	0x20000164

08009ef0 <__retarget_lock_init_recursive>:
 8009ef0:	4770      	bx	lr

08009ef2 <__retarget_lock_acquire_recursive>:
 8009ef2:	4770      	bx	lr

08009ef4 <__retarget_lock_release_recursive>:
 8009ef4:	4770      	bx	lr

08009ef6 <__swhatbuf_r>:
 8009ef6:	b570      	push	{r4, r5, r6, lr}
 8009ef8:	460e      	mov	r6, r1
 8009efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efe:	2900      	cmp	r1, #0
 8009f00:	b096      	sub	sp, #88	; 0x58
 8009f02:	4614      	mov	r4, r2
 8009f04:	461d      	mov	r5, r3
 8009f06:	da08      	bge.n	8009f1a <__swhatbuf_r+0x24>
 8009f08:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	602a      	str	r2, [r5, #0]
 8009f10:	061a      	lsls	r2, r3, #24
 8009f12:	d410      	bmi.n	8009f36 <__swhatbuf_r+0x40>
 8009f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f18:	e00e      	b.n	8009f38 <__swhatbuf_r+0x42>
 8009f1a:	466a      	mov	r2, sp
 8009f1c:	f001 f85a 	bl	800afd4 <_fstat_r>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	dbf1      	blt.n	8009f08 <__swhatbuf_r+0x12>
 8009f24:	9a01      	ldr	r2, [sp, #4]
 8009f26:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f2a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f2e:	425a      	negs	r2, r3
 8009f30:	415a      	adcs	r2, r3
 8009f32:	602a      	str	r2, [r5, #0]
 8009f34:	e7ee      	b.n	8009f14 <__swhatbuf_r+0x1e>
 8009f36:	2340      	movs	r3, #64	; 0x40
 8009f38:	2000      	movs	r0, #0
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	b016      	add	sp, #88	; 0x58
 8009f3e:	bd70      	pop	{r4, r5, r6, pc}

08009f40 <__smakebuf_r>:
 8009f40:	898b      	ldrh	r3, [r1, #12]
 8009f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f44:	079d      	lsls	r5, r3, #30
 8009f46:	4606      	mov	r6, r0
 8009f48:	460c      	mov	r4, r1
 8009f4a:	d507      	bpl.n	8009f5c <__smakebuf_r+0x1c>
 8009f4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	6123      	str	r3, [r4, #16]
 8009f54:	2301      	movs	r3, #1
 8009f56:	6163      	str	r3, [r4, #20]
 8009f58:	b002      	add	sp, #8
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	ab01      	add	r3, sp, #4
 8009f5e:	466a      	mov	r2, sp
 8009f60:	f7ff ffc9 	bl	8009ef6 <__swhatbuf_r>
 8009f64:	9900      	ldr	r1, [sp, #0]
 8009f66:	4605      	mov	r5, r0
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f000 fd95 	bl	800aa98 <_malloc_r>
 8009f6e:	b948      	cbnz	r0, 8009f84 <__smakebuf_r+0x44>
 8009f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f74:	059a      	lsls	r2, r3, #22
 8009f76:	d4ef      	bmi.n	8009f58 <__smakebuf_r+0x18>
 8009f78:	f023 0303 	bic.w	r3, r3, #3
 8009f7c:	f043 0302 	orr.w	r3, r3, #2
 8009f80:	81a3      	strh	r3, [r4, #12]
 8009f82:	e7e3      	b.n	8009f4c <__smakebuf_r+0xc>
 8009f84:	4b0d      	ldr	r3, [pc, #52]	; (8009fbc <__smakebuf_r+0x7c>)
 8009f86:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	6020      	str	r0, [r4, #0]
 8009f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f90:	81a3      	strh	r3, [r4, #12]
 8009f92:	9b00      	ldr	r3, [sp, #0]
 8009f94:	6163      	str	r3, [r4, #20]
 8009f96:	9b01      	ldr	r3, [sp, #4]
 8009f98:	6120      	str	r0, [r4, #16]
 8009f9a:	b15b      	cbz	r3, 8009fb4 <__smakebuf_r+0x74>
 8009f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f001 f829 	bl	800aff8 <_isatty_r>
 8009fa6:	b128      	cbz	r0, 8009fb4 <__smakebuf_r+0x74>
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	f023 0303 	bic.w	r3, r3, #3
 8009fae:	f043 0301 	orr.w	r3, r3, #1
 8009fb2:	81a3      	strh	r3, [r4, #12]
 8009fb4:	89a0      	ldrh	r0, [r4, #12]
 8009fb6:	4305      	orrs	r5, r0
 8009fb8:	81a5      	strh	r5, [r4, #12]
 8009fba:	e7cd      	b.n	8009f58 <__smakebuf_r+0x18>
 8009fbc:	08009669 	.word	0x08009669

08009fc0 <malloc>:
 8009fc0:	4b02      	ldr	r3, [pc, #8]	; (8009fcc <malloc+0xc>)
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	6818      	ldr	r0, [r3, #0]
 8009fc6:	f000 bd67 	b.w	800aa98 <_malloc_r>
 8009fca:	bf00      	nop
 8009fcc:	2000000c 	.word	0x2000000c

08009fd0 <__ascii_mbtowc>:
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	b901      	cbnz	r1, 8009fd6 <__ascii_mbtowc+0x6>
 8009fd4:	a901      	add	r1, sp, #4
 8009fd6:	b142      	cbz	r2, 8009fea <__ascii_mbtowc+0x1a>
 8009fd8:	b14b      	cbz	r3, 8009fee <__ascii_mbtowc+0x1e>
 8009fda:	7813      	ldrb	r3, [r2, #0]
 8009fdc:	600b      	str	r3, [r1, #0]
 8009fde:	7812      	ldrb	r2, [r2, #0]
 8009fe0:	1e10      	subs	r0, r2, #0
 8009fe2:	bf18      	it	ne
 8009fe4:	2001      	movne	r0, #1
 8009fe6:	b002      	add	sp, #8
 8009fe8:	4770      	bx	lr
 8009fea:	4610      	mov	r0, r2
 8009fec:	e7fb      	b.n	8009fe6 <__ascii_mbtowc+0x16>
 8009fee:	f06f 0001 	mvn.w	r0, #1
 8009ff2:	e7f8      	b.n	8009fe6 <__ascii_mbtowc+0x16>

08009ff4 <memcpy>:
 8009ff4:	440a      	add	r2, r1
 8009ff6:	4291      	cmp	r1, r2
 8009ff8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009ffc:	d100      	bne.n	800a000 <memcpy+0xc>
 8009ffe:	4770      	bx	lr
 800a000:	b510      	push	{r4, lr}
 800a002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a00a:	4291      	cmp	r1, r2
 800a00c:	d1f9      	bne.n	800a002 <memcpy+0xe>
 800a00e:	bd10      	pop	{r4, pc}

0800a010 <_Balloc>:
 800a010:	b570      	push	{r4, r5, r6, lr}
 800a012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a014:	4604      	mov	r4, r0
 800a016:	460d      	mov	r5, r1
 800a018:	b976      	cbnz	r6, 800a038 <_Balloc+0x28>
 800a01a:	2010      	movs	r0, #16
 800a01c:	f7ff ffd0 	bl	8009fc0 <malloc>
 800a020:	4602      	mov	r2, r0
 800a022:	6260      	str	r0, [r4, #36]	; 0x24
 800a024:	b920      	cbnz	r0, 800a030 <_Balloc+0x20>
 800a026:	4b18      	ldr	r3, [pc, #96]	; (800a088 <_Balloc+0x78>)
 800a028:	4818      	ldr	r0, [pc, #96]	; (800a08c <_Balloc+0x7c>)
 800a02a:	2166      	movs	r1, #102	; 0x66
 800a02c:	f000 ff92 	bl	800af54 <__assert_func>
 800a030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a034:	6006      	str	r6, [r0, #0]
 800a036:	60c6      	str	r6, [r0, #12]
 800a038:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a03a:	68f3      	ldr	r3, [r6, #12]
 800a03c:	b183      	cbz	r3, 800a060 <_Balloc+0x50>
 800a03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a046:	b9b8      	cbnz	r0, 800a078 <_Balloc+0x68>
 800a048:	2101      	movs	r1, #1
 800a04a:	fa01 f605 	lsl.w	r6, r1, r5
 800a04e:	1d72      	adds	r2, r6, #5
 800a050:	0092      	lsls	r2, r2, #2
 800a052:	4620      	mov	r0, r4
 800a054:	f000 fc9d 	bl	800a992 <_calloc_r>
 800a058:	b160      	cbz	r0, 800a074 <_Balloc+0x64>
 800a05a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a05e:	e00e      	b.n	800a07e <_Balloc+0x6e>
 800a060:	2221      	movs	r2, #33	; 0x21
 800a062:	2104      	movs	r1, #4
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fc94 	bl	800a992 <_calloc_r>
 800a06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a06c:	60f0      	str	r0, [r6, #12]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1e4      	bne.n	800a03e <_Balloc+0x2e>
 800a074:	2000      	movs	r0, #0
 800a076:	bd70      	pop	{r4, r5, r6, pc}
 800a078:	6802      	ldr	r2, [r0, #0]
 800a07a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a07e:	2300      	movs	r3, #0
 800a080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a084:	e7f7      	b.n	800a076 <_Balloc+0x66>
 800a086:	bf00      	nop
 800a088:	0800b6d6 	.word	0x0800b6d6
 800a08c:	0800b838 	.word	0x0800b838

0800a090 <_Bfree>:
 800a090:	b570      	push	{r4, r5, r6, lr}
 800a092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a094:	4605      	mov	r5, r0
 800a096:	460c      	mov	r4, r1
 800a098:	b976      	cbnz	r6, 800a0b8 <_Bfree+0x28>
 800a09a:	2010      	movs	r0, #16
 800a09c:	f7ff ff90 	bl	8009fc0 <malloc>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	6268      	str	r0, [r5, #36]	; 0x24
 800a0a4:	b920      	cbnz	r0, 800a0b0 <_Bfree+0x20>
 800a0a6:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <_Bfree+0x3c>)
 800a0a8:	4809      	ldr	r0, [pc, #36]	; (800a0d0 <_Bfree+0x40>)
 800a0aa:	218a      	movs	r1, #138	; 0x8a
 800a0ac:	f000 ff52 	bl	800af54 <__assert_func>
 800a0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0b4:	6006      	str	r6, [r0, #0]
 800a0b6:	60c6      	str	r6, [r0, #12]
 800a0b8:	b13c      	cbz	r4, 800a0ca <_Bfree+0x3a>
 800a0ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0bc:	6862      	ldr	r2, [r4, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0c4:	6021      	str	r1, [r4, #0]
 800a0c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	0800b6d6 	.word	0x0800b6d6
 800a0d0:	0800b838 	.word	0x0800b838

0800a0d4 <__multadd>:
 800a0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d8:	690d      	ldr	r5, [r1, #16]
 800a0da:	4607      	mov	r7, r0
 800a0dc:	460c      	mov	r4, r1
 800a0de:	461e      	mov	r6, r3
 800a0e0:	f101 0c14 	add.w	ip, r1, #20
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	f8dc 3000 	ldr.w	r3, [ip]
 800a0ea:	b299      	uxth	r1, r3
 800a0ec:	fb02 6101 	mla	r1, r2, r1, r6
 800a0f0:	0c1e      	lsrs	r6, r3, #16
 800a0f2:	0c0b      	lsrs	r3, r1, #16
 800a0f4:	fb02 3306 	mla	r3, r2, r6, r3
 800a0f8:	b289      	uxth	r1, r1
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a100:	4285      	cmp	r5, r0
 800a102:	f84c 1b04 	str.w	r1, [ip], #4
 800a106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a10a:	dcec      	bgt.n	800a0e6 <__multadd+0x12>
 800a10c:	b30e      	cbz	r6, 800a152 <__multadd+0x7e>
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	42ab      	cmp	r3, r5
 800a112:	dc19      	bgt.n	800a148 <__multadd+0x74>
 800a114:	6861      	ldr	r1, [r4, #4]
 800a116:	4638      	mov	r0, r7
 800a118:	3101      	adds	r1, #1
 800a11a:	f7ff ff79 	bl	800a010 <_Balloc>
 800a11e:	4680      	mov	r8, r0
 800a120:	b928      	cbnz	r0, 800a12e <__multadd+0x5a>
 800a122:	4602      	mov	r2, r0
 800a124:	4b0c      	ldr	r3, [pc, #48]	; (800a158 <__multadd+0x84>)
 800a126:	480d      	ldr	r0, [pc, #52]	; (800a15c <__multadd+0x88>)
 800a128:	21b5      	movs	r1, #181	; 0xb5
 800a12a:	f000 ff13 	bl	800af54 <__assert_func>
 800a12e:	6922      	ldr	r2, [r4, #16]
 800a130:	3202      	adds	r2, #2
 800a132:	f104 010c 	add.w	r1, r4, #12
 800a136:	0092      	lsls	r2, r2, #2
 800a138:	300c      	adds	r0, #12
 800a13a:	f7ff ff5b 	bl	8009ff4 <memcpy>
 800a13e:	4621      	mov	r1, r4
 800a140:	4638      	mov	r0, r7
 800a142:	f7ff ffa5 	bl	800a090 <_Bfree>
 800a146:	4644      	mov	r4, r8
 800a148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a14c:	3501      	adds	r5, #1
 800a14e:	615e      	str	r6, [r3, #20]
 800a150:	6125      	str	r5, [r4, #16]
 800a152:	4620      	mov	r0, r4
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a158:	0800b748 	.word	0x0800b748
 800a15c:	0800b838 	.word	0x0800b838

0800a160 <__s2b>:
 800a160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a164:	460c      	mov	r4, r1
 800a166:	4615      	mov	r5, r2
 800a168:	461f      	mov	r7, r3
 800a16a:	2209      	movs	r2, #9
 800a16c:	3308      	adds	r3, #8
 800a16e:	4606      	mov	r6, r0
 800a170:	fb93 f3f2 	sdiv	r3, r3, r2
 800a174:	2100      	movs	r1, #0
 800a176:	2201      	movs	r2, #1
 800a178:	429a      	cmp	r2, r3
 800a17a:	db09      	blt.n	800a190 <__s2b+0x30>
 800a17c:	4630      	mov	r0, r6
 800a17e:	f7ff ff47 	bl	800a010 <_Balloc>
 800a182:	b940      	cbnz	r0, 800a196 <__s2b+0x36>
 800a184:	4602      	mov	r2, r0
 800a186:	4b19      	ldr	r3, [pc, #100]	; (800a1ec <__s2b+0x8c>)
 800a188:	4819      	ldr	r0, [pc, #100]	; (800a1f0 <__s2b+0x90>)
 800a18a:	21ce      	movs	r1, #206	; 0xce
 800a18c:	f000 fee2 	bl	800af54 <__assert_func>
 800a190:	0052      	lsls	r2, r2, #1
 800a192:	3101      	adds	r1, #1
 800a194:	e7f0      	b.n	800a178 <__s2b+0x18>
 800a196:	9b08      	ldr	r3, [sp, #32]
 800a198:	6143      	str	r3, [r0, #20]
 800a19a:	2d09      	cmp	r5, #9
 800a19c:	f04f 0301 	mov.w	r3, #1
 800a1a0:	6103      	str	r3, [r0, #16]
 800a1a2:	dd16      	ble.n	800a1d2 <__s2b+0x72>
 800a1a4:	f104 0909 	add.w	r9, r4, #9
 800a1a8:	46c8      	mov	r8, r9
 800a1aa:	442c      	add	r4, r5
 800a1ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1b0:	4601      	mov	r1, r0
 800a1b2:	3b30      	subs	r3, #48	; 0x30
 800a1b4:	220a      	movs	r2, #10
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7ff ff8c 	bl	800a0d4 <__multadd>
 800a1bc:	45a0      	cmp	r8, r4
 800a1be:	d1f5      	bne.n	800a1ac <__s2b+0x4c>
 800a1c0:	f1a5 0408 	sub.w	r4, r5, #8
 800a1c4:	444c      	add	r4, r9
 800a1c6:	1b2d      	subs	r5, r5, r4
 800a1c8:	1963      	adds	r3, r4, r5
 800a1ca:	42bb      	cmp	r3, r7
 800a1cc:	db04      	blt.n	800a1d8 <__s2b+0x78>
 800a1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1d2:	340a      	adds	r4, #10
 800a1d4:	2509      	movs	r5, #9
 800a1d6:	e7f6      	b.n	800a1c6 <__s2b+0x66>
 800a1d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1dc:	4601      	mov	r1, r0
 800a1de:	3b30      	subs	r3, #48	; 0x30
 800a1e0:	220a      	movs	r2, #10
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	f7ff ff76 	bl	800a0d4 <__multadd>
 800a1e8:	e7ee      	b.n	800a1c8 <__s2b+0x68>
 800a1ea:	bf00      	nop
 800a1ec:	0800b748 	.word	0x0800b748
 800a1f0:	0800b838 	.word	0x0800b838

0800a1f4 <__hi0bits>:
 800a1f4:	0c03      	lsrs	r3, r0, #16
 800a1f6:	041b      	lsls	r3, r3, #16
 800a1f8:	b9d3      	cbnz	r3, 800a230 <__hi0bits+0x3c>
 800a1fa:	0400      	lsls	r0, r0, #16
 800a1fc:	2310      	movs	r3, #16
 800a1fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a202:	bf04      	itt	eq
 800a204:	0200      	lsleq	r0, r0, #8
 800a206:	3308      	addeq	r3, #8
 800a208:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a20c:	bf04      	itt	eq
 800a20e:	0100      	lsleq	r0, r0, #4
 800a210:	3304      	addeq	r3, #4
 800a212:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a216:	bf04      	itt	eq
 800a218:	0080      	lsleq	r0, r0, #2
 800a21a:	3302      	addeq	r3, #2
 800a21c:	2800      	cmp	r0, #0
 800a21e:	db05      	blt.n	800a22c <__hi0bits+0x38>
 800a220:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a224:	f103 0301 	add.w	r3, r3, #1
 800a228:	bf08      	it	eq
 800a22a:	2320      	moveq	r3, #32
 800a22c:	4618      	mov	r0, r3
 800a22e:	4770      	bx	lr
 800a230:	2300      	movs	r3, #0
 800a232:	e7e4      	b.n	800a1fe <__hi0bits+0xa>

0800a234 <__lo0bits>:
 800a234:	6803      	ldr	r3, [r0, #0]
 800a236:	f013 0207 	ands.w	r2, r3, #7
 800a23a:	4601      	mov	r1, r0
 800a23c:	d00b      	beq.n	800a256 <__lo0bits+0x22>
 800a23e:	07da      	lsls	r2, r3, #31
 800a240:	d423      	bmi.n	800a28a <__lo0bits+0x56>
 800a242:	0798      	lsls	r0, r3, #30
 800a244:	bf49      	itett	mi
 800a246:	085b      	lsrmi	r3, r3, #1
 800a248:	089b      	lsrpl	r3, r3, #2
 800a24a:	2001      	movmi	r0, #1
 800a24c:	600b      	strmi	r3, [r1, #0]
 800a24e:	bf5c      	itt	pl
 800a250:	600b      	strpl	r3, [r1, #0]
 800a252:	2002      	movpl	r0, #2
 800a254:	4770      	bx	lr
 800a256:	b298      	uxth	r0, r3
 800a258:	b9a8      	cbnz	r0, 800a286 <__lo0bits+0x52>
 800a25a:	0c1b      	lsrs	r3, r3, #16
 800a25c:	2010      	movs	r0, #16
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	b90a      	cbnz	r2, 800a266 <__lo0bits+0x32>
 800a262:	3008      	adds	r0, #8
 800a264:	0a1b      	lsrs	r3, r3, #8
 800a266:	071a      	lsls	r2, r3, #28
 800a268:	bf04      	itt	eq
 800a26a:	091b      	lsreq	r3, r3, #4
 800a26c:	3004      	addeq	r0, #4
 800a26e:	079a      	lsls	r2, r3, #30
 800a270:	bf04      	itt	eq
 800a272:	089b      	lsreq	r3, r3, #2
 800a274:	3002      	addeq	r0, #2
 800a276:	07da      	lsls	r2, r3, #31
 800a278:	d403      	bmi.n	800a282 <__lo0bits+0x4e>
 800a27a:	085b      	lsrs	r3, r3, #1
 800a27c:	f100 0001 	add.w	r0, r0, #1
 800a280:	d005      	beq.n	800a28e <__lo0bits+0x5a>
 800a282:	600b      	str	r3, [r1, #0]
 800a284:	4770      	bx	lr
 800a286:	4610      	mov	r0, r2
 800a288:	e7e9      	b.n	800a25e <__lo0bits+0x2a>
 800a28a:	2000      	movs	r0, #0
 800a28c:	4770      	bx	lr
 800a28e:	2020      	movs	r0, #32
 800a290:	4770      	bx	lr
	...

0800a294 <__i2b>:
 800a294:	b510      	push	{r4, lr}
 800a296:	460c      	mov	r4, r1
 800a298:	2101      	movs	r1, #1
 800a29a:	f7ff feb9 	bl	800a010 <_Balloc>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	b928      	cbnz	r0, 800a2ae <__i2b+0x1a>
 800a2a2:	4b05      	ldr	r3, [pc, #20]	; (800a2b8 <__i2b+0x24>)
 800a2a4:	4805      	ldr	r0, [pc, #20]	; (800a2bc <__i2b+0x28>)
 800a2a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a2aa:	f000 fe53 	bl	800af54 <__assert_func>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	6144      	str	r4, [r0, #20]
 800a2b2:	6103      	str	r3, [r0, #16]
 800a2b4:	bd10      	pop	{r4, pc}
 800a2b6:	bf00      	nop
 800a2b8:	0800b748 	.word	0x0800b748
 800a2bc:	0800b838 	.word	0x0800b838

0800a2c0 <__multiply>:
 800a2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c4:	4691      	mov	r9, r2
 800a2c6:	690a      	ldr	r2, [r1, #16]
 800a2c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	bfb8      	it	lt
 800a2d0:	460b      	movlt	r3, r1
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	bfbc      	itt	lt
 800a2d6:	464c      	movlt	r4, r9
 800a2d8:	4699      	movlt	r9, r3
 800a2da:	6927      	ldr	r7, [r4, #16]
 800a2dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2e0:	68a3      	ldr	r3, [r4, #8]
 800a2e2:	6861      	ldr	r1, [r4, #4]
 800a2e4:	eb07 060a 	add.w	r6, r7, sl
 800a2e8:	42b3      	cmp	r3, r6
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	bfb8      	it	lt
 800a2ee:	3101      	addlt	r1, #1
 800a2f0:	f7ff fe8e 	bl	800a010 <_Balloc>
 800a2f4:	b930      	cbnz	r0, 800a304 <__multiply+0x44>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	4b44      	ldr	r3, [pc, #272]	; (800a40c <__multiply+0x14c>)
 800a2fa:	4845      	ldr	r0, [pc, #276]	; (800a410 <__multiply+0x150>)
 800a2fc:	f240 115d 	movw	r1, #349	; 0x15d
 800a300:	f000 fe28 	bl	800af54 <__assert_func>
 800a304:	f100 0514 	add.w	r5, r0, #20
 800a308:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a30c:	462b      	mov	r3, r5
 800a30e:	2200      	movs	r2, #0
 800a310:	4543      	cmp	r3, r8
 800a312:	d321      	bcc.n	800a358 <__multiply+0x98>
 800a314:	f104 0314 	add.w	r3, r4, #20
 800a318:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a31c:	f109 0314 	add.w	r3, r9, #20
 800a320:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a324:	9202      	str	r2, [sp, #8]
 800a326:	1b3a      	subs	r2, r7, r4
 800a328:	3a15      	subs	r2, #21
 800a32a:	f022 0203 	bic.w	r2, r2, #3
 800a32e:	3204      	adds	r2, #4
 800a330:	f104 0115 	add.w	r1, r4, #21
 800a334:	428f      	cmp	r7, r1
 800a336:	bf38      	it	cc
 800a338:	2204      	movcc	r2, #4
 800a33a:	9201      	str	r2, [sp, #4]
 800a33c:	9a02      	ldr	r2, [sp, #8]
 800a33e:	9303      	str	r3, [sp, #12]
 800a340:	429a      	cmp	r2, r3
 800a342:	d80c      	bhi.n	800a35e <__multiply+0x9e>
 800a344:	2e00      	cmp	r6, #0
 800a346:	dd03      	ble.n	800a350 <__multiply+0x90>
 800a348:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d05a      	beq.n	800a406 <__multiply+0x146>
 800a350:	6106      	str	r6, [r0, #16]
 800a352:	b005      	add	sp, #20
 800a354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a358:	f843 2b04 	str.w	r2, [r3], #4
 800a35c:	e7d8      	b.n	800a310 <__multiply+0x50>
 800a35e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a362:	f1ba 0f00 	cmp.w	sl, #0
 800a366:	d024      	beq.n	800a3b2 <__multiply+0xf2>
 800a368:	f104 0e14 	add.w	lr, r4, #20
 800a36c:	46a9      	mov	r9, r5
 800a36e:	f04f 0c00 	mov.w	ip, #0
 800a372:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a376:	f8d9 1000 	ldr.w	r1, [r9]
 800a37a:	fa1f fb82 	uxth.w	fp, r2
 800a37e:	b289      	uxth	r1, r1
 800a380:	fb0a 110b 	mla	r1, sl, fp, r1
 800a384:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a388:	f8d9 2000 	ldr.w	r2, [r9]
 800a38c:	4461      	add	r1, ip
 800a38e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a392:	fb0a c20b 	mla	r2, sl, fp, ip
 800a396:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a39a:	b289      	uxth	r1, r1
 800a39c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3a0:	4577      	cmp	r7, lr
 800a3a2:	f849 1b04 	str.w	r1, [r9], #4
 800a3a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3aa:	d8e2      	bhi.n	800a372 <__multiply+0xb2>
 800a3ac:	9a01      	ldr	r2, [sp, #4]
 800a3ae:	f845 c002 	str.w	ip, [r5, r2]
 800a3b2:	9a03      	ldr	r2, [sp, #12]
 800a3b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	f1b9 0f00 	cmp.w	r9, #0
 800a3be:	d020      	beq.n	800a402 <__multiply+0x142>
 800a3c0:	6829      	ldr	r1, [r5, #0]
 800a3c2:	f104 0c14 	add.w	ip, r4, #20
 800a3c6:	46ae      	mov	lr, r5
 800a3c8:	f04f 0a00 	mov.w	sl, #0
 800a3cc:	f8bc b000 	ldrh.w	fp, [ip]
 800a3d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3d4:	fb09 220b 	mla	r2, r9, fp, r2
 800a3d8:	4492      	add	sl, r2
 800a3da:	b289      	uxth	r1, r1
 800a3dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a3e0:	f84e 1b04 	str.w	r1, [lr], #4
 800a3e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a3e8:	f8be 1000 	ldrh.w	r1, [lr]
 800a3ec:	0c12      	lsrs	r2, r2, #16
 800a3ee:	fb09 1102 	mla	r1, r9, r2, r1
 800a3f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a3f6:	4567      	cmp	r7, ip
 800a3f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a3fc:	d8e6      	bhi.n	800a3cc <__multiply+0x10c>
 800a3fe:	9a01      	ldr	r2, [sp, #4]
 800a400:	50a9      	str	r1, [r5, r2]
 800a402:	3504      	adds	r5, #4
 800a404:	e79a      	b.n	800a33c <__multiply+0x7c>
 800a406:	3e01      	subs	r6, #1
 800a408:	e79c      	b.n	800a344 <__multiply+0x84>
 800a40a:	bf00      	nop
 800a40c:	0800b748 	.word	0x0800b748
 800a410:	0800b838 	.word	0x0800b838

0800a414 <__pow5mult>:
 800a414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a418:	4615      	mov	r5, r2
 800a41a:	f012 0203 	ands.w	r2, r2, #3
 800a41e:	4606      	mov	r6, r0
 800a420:	460f      	mov	r7, r1
 800a422:	d007      	beq.n	800a434 <__pow5mult+0x20>
 800a424:	4c25      	ldr	r4, [pc, #148]	; (800a4bc <__pow5mult+0xa8>)
 800a426:	3a01      	subs	r2, #1
 800a428:	2300      	movs	r3, #0
 800a42a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a42e:	f7ff fe51 	bl	800a0d4 <__multadd>
 800a432:	4607      	mov	r7, r0
 800a434:	10ad      	asrs	r5, r5, #2
 800a436:	d03d      	beq.n	800a4b4 <__pow5mult+0xa0>
 800a438:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a43a:	b97c      	cbnz	r4, 800a45c <__pow5mult+0x48>
 800a43c:	2010      	movs	r0, #16
 800a43e:	f7ff fdbf 	bl	8009fc0 <malloc>
 800a442:	4602      	mov	r2, r0
 800a444:	6270      	str	r0, [r6, #36]	; 0x24
 800a446:	b928      	cbnz	r0, 800a454 <__pow5mult+0x40>
 800a448:	4b1d      	ldr	r3, [pc, #116]	; (800a4c0 <__pow5mult+0xac>)
 800a44a:	481e      	ldr	r0, [pc, #120]	; (800a4c4 <__pow5mult+0xb0>)
 800a44c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a450:	f000 fd80 	bl	800af54 <__assert_func>
 800a454:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a458:	6004      	str	r4, [r0, #0]
 800a45a:	60c4      	str	r4, [r0, #12]
 800a45c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a460:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a464:	b94c      	cbnz	r4, 800a47a <__pow5mult+0x66>
 800a466:	f240 2171 	movw	r1, #625	; 0x271
 800a46a:	4630      	mov	r0, r6
 800a46c:	f7ff ff12 	bl	800a294 <__i2b>
 800a470:	2300      	movs	r3, #0
 800a472:	f8c8 0008 	str.w	r0, [r8, #8]
 800a476:	4604      	mov	r4, r0
 800a478:	6003      	str	r3, [r0, #0]
 800a47a:	f04f 0900 	mov.w	r9, #0
 800a47e:	07eb      	lsls	r3, r5, #31
 800a480:	d50a      	bpl.n	800a498 <__pow5mult+0x84>
 800a482:	4639      	mov	r1, r7
 800a484:	4622      	mov	r2, r4
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ff1a 	bl	800a2c0 <__multiply>
 800a48c:	4639      	mov	r1, r7
 800a48e:	4680      	mov	r8, r0
 800a490:	4630      	mov	r0, r6
 800a492:	f7ff fdfd 	bl	800a090 <_Bfree>
 800a496:	4647      	mov	r7, r8
 800a498:	106d      	asrs	r5, r5, #1
 800a49a:	d00b      	beq.n	800a4b4 <__pow5mult+0xa0>
 800a49c:	6820      	ldr	r0, [r4, #0]
 800a49e:	b938      	cbnz	r0, 800a4b0 <__pow5mult+0x9c>
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	f7ff ff0b 	bl	800a2c0 <__multiply>
 800a4aa:	6020      	str	r0, [r4, #0]
 800a4ac:	f8c0 9000 	str.w	r9, [r0]
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	e7e4      	b.n	800a47e <__pow5mult+0x6a>
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4ba:	bf00      	nop
 800a4bc:	0800b988 	.word	0x0800b988
 800a4c0:	0800b6d6 	.word	0x0800b6d6
 800a4c4:	0800b838 	.word	0x0800b838

0800a4c8 <__lshift>:
 800a4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	6849      	ldr	r1, [r1, #4]
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4d6:	68a3      	ldr	r3, [r4, #8]
 800a4d8:	4607      	mov	r7, r0
 800a4da:	4691      	mov	r9, r2
 800a4dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4e0:	f108 0601 	add.w	r6, r8, #1
 800a4e4:	42b3      	cmp	r3, r6
 800a4e6:	db0b      	blt.n	800a500 <__lshift+0x38>
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	f7ff fd91 	bl	800a010 <_Balloc>
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	b948      	cbnz	r0, 800a506 <__lshift+0x3e>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	4b2a      	ldr	r3, [pc, #168]	; (800a5a0 <__lshift+0xd8>)
 800a4f6:	482b      	ldr	r0, [pc, #172]	; (800a5a4 <__lshift+0xdc>)
 800a4f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a4fc:	f000 fd2a 	bl	800af54 <__assert_func>
 800a500:	3101      	adds	r1, #1
 800a502:	005b      	lsls	r3, r3, #1
 800a504:	e7ee      	b.n	800a4e4 <__lshift+0x1c>
 800a506:	2300      	movs	r3, #0
 800a508:	f100 0114 	add.w	r1, r0, #20
 800a50c:	f100 0210 	add.w	r2, r0, #16
 800a510:	4618      	mov	r0, r3
 800a512:	4553      	cmp	r3, sl
 800a514:	db37      	blt.n	800a586 <__lshift+0xbe>
 800a516:	6920      	ldr	r0, [r4, #16]
 800a518:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a51c:	f104 0314 	add.w	r3, r4, #20
 800a520:	f019 091f 	ands.w	r9, r9, #31
 800a524:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a528:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a52c:	d02f      	beq.n	800a58e <__lshift+0xc6>
 800a52e:	f1c9 0e20 	rsb	lr, r9, #32
 800a532:	468a      	mov	sl, r1
 800a534:	f04f 0c00 	mov.w	ip, #0
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	fa02 f209 	lsl.w	r2, r2, r9
 800a53e:	ea42 020c 	orr.w	r2, r2, ip
 800a542:	f84a 2b04 	str.w	r2, [sl], #4
 800a546:	f853 2b04 	ldr.w	r2, [r3], #4
 800a54a:	4298      	cmp	r0, r3
 800a54c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a550:	d8f2      	bhi.n	800a538 <__lshift+0x70>
 800a552:	1b03      	subs	r3, r0, r4
 800a554:	3b15      	subs	r3, #21
 800a556:	f023 0303 	bic.w	r3, r3, #3
 800a55a:	3304      	adds	r3, #4
 800a55c:	f104 0215 	add.w	r2, r4, #21
 800a560:	4290      	cmp	r0, r2
 800a562:	bf38      	it	cc
 800a564:	2304      	movcc	r3, #4
 800a566:	f841 c003 	str.w	ip, [r1, r3]
 800a56a:	f1bc 0f00 	cmp.w	ip, #0
 800a56e:	d001      	beq.n	800a574 <__lshift+0xac>
 800a570:	f108 0602 	add.w	r6, r8, #2
 800a574:	3e01      	subs	r6, #1
 800a576:	4638      	mov	r0, r7
 800a578:	612e      	str	r6, [r5, #16]
 800a57a:	4621      	mov	r1, r4
 800a57c:	f7ff fd88 	bl	800a090 <_Bfree>
 800a580:	4628      	mov	r0, r5
 800a582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a586:	f842 0f04 	str.w	r0, [r2, #4]!
 800a58a:	3301      	adds	r3, #1
 800a58c:	e7c1      	b.n	800a512 <__lshift+0x4a>
 800a58e:	3904      	subs	r1, #4
 800a590:	f853 2b04 	ldr.w	r2, [r3], #4
 800a594:	f841 2f04 	str.w	r2, [r1, #4]!
 800a598:	4298      	cmp	r0, r3
 800a59a:	d8f9      	bhi.n	800a590 <__lshift+0xc8>
 800a59c:	e7ea      	b.n	800a574 <__lshift+0xac>
 800a59e:	bf00      	nop
 800a5a0:	0800b748 	.word	0x0800b748
 800a5a4:	0800b838 	.word	0x0800b838

0800a5a8 <__mcmp>:
 800a5a8:	b530      	push	{r4, r5, lr}
 800a5aa:	6902      	ldr	r2, [r0, #16]
 800a5ac:	690c      	ldr	r4, [r1, #16]
 800a5ae:	1b12      	subs	r2, r2, r4
 800a5b0:	d10e      	bne.n	800a5d0 <__mcmp+0x28>
 800a5b2:	f100 0314 	add.w	r3, r0, #20
 800a5b6:	3114      	adds	r1, #20
 800a5b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5c8:	42a5      	cmp	r5, r4
 800a5ca:	d003      	beq.n	800a5d4 <__mcmp+0x2c>
 800a5cc:	d305      	bcc.n	800a5da <__mcmp+0x32>
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	bd30      	pop	{r4, r5, pc}
 800a5d4:	4283      	cmp	r3, r0
 800a5d6:	d3f3      	bcc.n	800a5c0 <__mcmp+0x18>
 800a5d8:	e7fa      	b.n	800a5d0 <__mcmp+0x28>
 800a5da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5de:	e7f7      	b.n	800a5d0 <__mcmp+0x28>

0800a5e0 <__mdiff>:
 800a5e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	4690      	mov	r8, r2
 800a5ee:	f7ff ffdb 	bl	800a5a8 <__mcmp>
 800a5f2:	1e05      	subs	r5, r0, #0
 800a5f4:	d110      	bne.n	800a618 <__mdiff+0x38>
 800a5f6:	4629      	mov	r1, r5
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f7ff fd09 	bl	800a010 <_Balloc>
 800a5fe:	b930      	cbnz	r0, 800a60e <__mdiff+0x2e>
 800a600:	4b3a      	ldr	r3, [pc, #232]	; (800a6ec <__mdiff+0x10c>)
 800a602:	4602      	mov	r2, r0
 800a604:	f240 2132 	movw	r1, #562	; 0x232
 800a608:	4839      	ldr	r0, [pc, #228]	; (800a6f0 <__mdiff+0x110>)
 800a60a:	f000 fca3 	bl	800af54 <__assert_func>
 800a60e:	2301      	movs	r3, #1
 800a610:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a614:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a618:	bfa4      	itt	ge
 800a61a:	4643      	movge	r3, r8
 800a61c:	46a0      	movge	r8, r4
 800a61e:	4630      	mov	r0, r6
 800a620:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a624:	bfa6      	itte	ge
 800a626:	461c      	movge	r4, r3
 800a628:	2500      	movge	r5, #0
 800a62a:	2501      	movlt	r5, #1
 800a62c:	f7ff fcf0 	bl	800a010 <_Balloc>
 800a630:	b920      	cbnz	r0, 800a63c <__mdiff+0x5c>
 800a632:	4b2e      	ldr	r3, [pc, #184]	; (800a6ec <__mdiff+0x10c>)
 800a634:	4602      	mov	r2, r0
 800a636:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a63a:	e7e5      	b.n	800a608 <__mdiff+0x28>
 800a63c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a640:	6926      	ldr	r6, [r4, #16]
 800a642:	60c5      	str	r5, [r0, #12]
 800a644:	f104 0914 	add.w	r9, r4, #20
 800a648:	f108 0514 	add.w	r5, r8, #20
 800a64c:	f100 0e14 	add.w	lr, r0, #20
 800a650:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a654:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a658:	f108 0210 	add.w	r2, r8, #16
 800a65c:	46f2      	mov	sl, lr
 800a65e:	2100      	movs	r1, #0
 800a660:	f859 3b04 	ldr.w	r3, [r9], #4
 800a664:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a668:	fa1f f883 	uxth.w	r8, r3
 800a66c:	fa11 f18b 	uxtah	r1, r1, fp
 800a670:	0c1b      	lsrs	r3, r3, #16
 800a672:	eba1 0808 	sub.w	r8, r1, r8
 800a676:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a67a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a67e:	fa1f f888 	uxth.w	r8, r8
 800a682:	1419      	asrs	r1, r3, #16
 800a684:	454e      	cmp	r6, r9
 800a686:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a68a:	f84a 3b04 	str.w	r3, [sl], #4
 800a68e:	d8e7      	bhi.n	800a660 <__mdiff+0x80>
 800a690:	1b33      	subs	r3, r6, r4
 800a692:	3b15      	subs	r3, #21
 800a694:	f023 0303 	bic.w	r3, r3, #3
 800a698:	3304      	adds	r3, #4
 800a69a:	3415      	adds	r4, #21
 800a69c:	42a6      	cmp	r6, r4
 800a69e:	bf38      	it	cc
 800a6a0:	2304      	movcc	r3, #4
 800a6a2:	441d      	add	r5, r3
 800a6a4:	4473      	add	r3, lr
 800a6a6:	469e      	mov	lr, r3
 800a6a8:	462e      	mov	r6, r5
 800a6aa:	4566      	cmp	r6, ip
 800a6ac:	d30e      	bcc.n	800a6cc <__mdiff+0xec>
 800a6ae:	f10c 0203 	add.w	r2, ip, #3
 800a6b2:	1b52      	subs	r2, r2, r5
 800a6b4:	f022 0203 	bic.w	r2, r2, #3
 800a6b8:	3d03      	subs	r5, #3
 800a6ba:	45ac      	cmp	ip, r5
 800a6bc:	bf38      	it	cc
 800a6be:	2200      	movcc	r2, #0
 800a6c0:	441a      	add	r2, r3
 800a6c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a6c6:	b17b      	cbz	r3, 800a6e8 <__mdiff+0x108>
 800a6c8:	6107      	str	r7, [r0, #16]
 800a6ca:	e7a3      	b.n	800a614 <__mdiff+0x34>
 800a6cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6d0:	fa11 f288 	uxtah	r2, r1, r8
 800a6d4:	1414      	asrs	r4, r2, #16
 800a6d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6da:	b292      	uxth	r2, r2
 800a6dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a6e0:	f84e 2b04 	str.w	r2, [lr], #4
 800a6e4:	1421      	asrs	r1, r4, #16
 800a6e6:	e7e0      	b.n	800a6aa <__mdiff+0xca>
 800a6e8:	3f01      	subs	r7, #1
 800a6ea:	e7ea      	b.n	800a6c2 <__mdiff+0xe2>
 800a6ec:	0800b748 	.word	0x0800b748
 800a6f0:	0800b838 	.word	0x0800b838

0800a6f4 <__ulp>:
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	ed8d 0b00 	vstr	d0, [sp]
 800a6fa:	9b01      	ldr	r3, [sp, #4]
 800a6fc:	4912      	ldr	r1, [pc, #72]	; (800a748 <__ulp+0x54>)
 800a6fe:	4019      	ands	r1, r3
 800a700:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a704:	2900      	cmp	r1, #0
 800a706:	dd05      	ble.n	800a714 <__ulp+0x20>
 800a708:	2200      	movs	r2, #0
 800a70a:	460b      	mov	r3, r1
 800a70c:	ec43 2b10 	vmov	d0, r2, r3
 800a710:	b002      	add	sp, #8
 800a712:	4770      	bx	lr
 800a714:	4249      	negs	r1, r1
 800a716:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a71a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a71e:	f04f 0200 	mov.w	r2, #0
 800a722:	f04f 0300 	mov.w	r3, #0
 800a726:	da04      	bge.n	800a732 <__ulp+0x3e>
 800a728:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a72c:	fa41 f300 	asr.w	r3, r1, r0
 800a730:	e7ec      	b.n	800a70c <__ulp+0x18>
 800a732:	f1a0 0114 	sub.w	r1, r0, #20
 800a736:	291e      	cmp	r1, #30
 800a738:	bfda      	itte	le
 800a73a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a73e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a742:	2101      	movgt	r1, #1
 800a744:	460a      	mov	r2, r1
 800a746:	e7e1      	b.n	800a70c <__ulp+0x18>
 800a748:	7ff00000 	.word	0x7ff00000

0800a74c <__b2d>:
 800a74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a74e:	6905      	ldr	r5, [r0, #16]
 800a750:	f100 0714 	add.w	r7, r0, #20
 800a754:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a758:	1f2e      	subs	r6, r5, #4
 800a75a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a75e:	4620      	mov	r0, r4
 800a760:	f7ff fd48 	bl	800a1f4 <__hi0bits>
 800a764:	f1c0 0320 	rsb	r3, r0, #32
 800a768:	280a      	cmp	r0, #10
 800a76a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a7e8 <__b2d+0x9c>
 800a76e:	600b      	str	r3, [r1, #0]
 800a770:	dc14      	bgt.n	800a79c <__b2d+0x50>
 800a772:	f1c0 0e0b 	rsb	lr, r0, #11
 800a776:	fa24 f10e 	lsr.w	r1, r4, lr
 800a77a:	42b7      	cmp	r7, r6
 800a77c:	ea41 030c 	orr.w	r3, r1, ip
 800a780:	bf34      	ite	cc
 800a782:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a786:	2100      	movcs	r1, #0
 800a788:	3015      	adds	r0, #21
 800a78a:	fa04 f000 	lsl.w	r0, r4, r0
 800a78e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a792:	ea40 0201 	orr.w	r2, r0, r1
 800a796:	ec43 2b10 	vmov	d0, r2, r3
 800a79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a79c:	42b7      	cmp	r7, r6
 800a79e:	bf3a      	itte	cc
 800a7a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7a4:	f1a5 0608 	subcc.w	r6, r5, #8
 800a7a8:	2100      	movcs	r1, #0
 800a7aa:	380b      	subs	r0, #11
 800a7ac:	d017      	beq.n	800a7de <__b2d+0x92>
 800a7ae:	f1c0 0c20 	rsb	ip, r0, #32
 800a7b2:	fa04 f500 	lsl.w	r5, r4, r0
 800a7b6:	42be      	cmp	r6, r7
 800a7b8:	fa21 f40c 	lsr.w	r4, r1, ip
 800a7bc:	ea45 0504 	orr.w	r5, r5, r4
 800a7c0:	bf8c      	ite	hi
 800a7c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a7c6:	2400      	movls	r4, #0
 800a7c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a7cc:	fa01 f000 	lsl.w	r0, r1, r0
 800a7d0:	fa24 f40c 	lsr.w	r4, r4, ip
 800a7d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7d8:	ea40 0204 	orr.w	r2, r0, r4
 800a7dc:	e7db      	b.n	800a796 <__b2d+0x4a>
 800a7de:	ea44 030c 	orr.w	r3, r4, ip
 800a7e2:	460a      	mov	r2, r1
 800a7e4:	e7d7      	b.n	800a796 <__b2d+0x4a>
 800a7e6:	bf00      	nop
 800a7e8:	3ff00000 	.word	0x3ff00000

0800a7ec <__d2b>:
 800a7ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7f0:	4689      	mov	r9, r1
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	ec57 6b10 	vmov	r6, r7, d0
 800a7f8:	4690      	mov	r8, r2
 800a7fa:	f7ff fc09 	bl	800a010 <_Balloc>
 800a7fe:	4604      	mov	r4, r0
 800a800:	b930      	cbnz	r0, 800a810 <__d2b+0x24>
 800a802:	4602      	mov	r2, r0
 800a804:	4b25      	ldr	r3, [pc, #148]	; (800a89c <__d2b+0xb0>)
 800a806:	4826      	ldr	r0, [pc, #152]	; (800a8a0 <__d2b+0xb4>)
 800a808:	f240 310a 	movw	r1, #778	; 0x30a
 800a80c:	f000 fba2 	bl	800af54 <__assert_func>
 800a810:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a814:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a818:	bb35      	cbnz	r5, 800a868 <__d2b+0x7c>
 800a81a:	2e00      	cmp	r6, #0
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	d028      	beq.n	800a872 <__d2b+0x86>
 800a820:	4668      	mov	r0, sp
 800a822:	9600      	str	r6, [sp, #0]
 800a824:	f7ff fd06 	bl	800a234 <__lo0bits>
 800a828:	9900      	ldr	r1, [sp, #0]
 800a82a:	b300      	cbz	r0, 800a86e <__d2b+0x82>
 800a82c:	9a01      	ldr	r2, [sp, #4]
 800a82e:	f1c0 0320 	rsb	r3, r0, #32
 800a832:	fa02 f303 	lsl.w	r3, r2, r3
 800a836:	430b      	orrs	r3, r1
 800a838:	40c2      	lsrs	r2, r0
 800a83a:	6163      	str	r3, [r4, #20]
 800a83c:	9201      	str	r2, [sp, #4]
 800a83e:	9b01      	ldr	r3, [sp, #4]
 800a840:	61a3      	str	r3, [r4, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	bf14      	ite	ne
 800a846:	2202      	movne	r2, #2
 800a848:	2201      	moveq	r2, #1
 800a84a:	6122      	str	r2, [r4, #16]
 800a84c:	b1d5      	cbz	r5, 800a884 <__d2b+0x98>
 800a84e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a852:	4405      	add	r5, r0
 800a854:	f8c9 5000 	str.w	r5, [r9]
 800a858:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a85c:	f8c8 0000 	str.w	r0, [r8]
 800a860:	4620      	mov	r0, r4
 800a862:	b003      	add	sp, #12
 800a864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a86c:	e7d5      	b.n	800a81a <__d2b+0x2e>
 800a86e:	6161      	str	r1, [r4, #20]
 800a870:	e7e5      	b.n	800a83e <__d2b+0x52>
 800a872:	a801      	add	r0, sp, #4
 800a874:	f7ff fcde 	bl	800a234 <__lo0bits>
 800a878:	9b01      	ldr	r3, [sp, #4]
 800a87a:	6163      	str	r3, [r4, #20]
 800a87c:	2201      	movs	r2, #1
 800a87e:	6122      	str	r2, [r4, #16]
 800a880:	3020      	adds	r0, #32
 800a882:	e7e3      	b.n	800a84c <__d2b+0x60>
 800a884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a88c:	f8c9 0000 	str.w	r0, [r9]
 800a890:	6918      	ldr	r0, [r3, #16]
 800a892:	f7ff fcaf 	bl	800a1f4 <__hi0bits>
 800a896:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a89a:	e7df      	b.n	800a85c <__d2b+0x70>
 800a89c:	0800b748 	.word	0x0800b748
 800a8a0:	0800b838 	.word	0x0800b838

0800a8a4 <__ratio>:
 800a8a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	4688      	mov	r8, r1
 800a8aa:	4669      	mov	r1, sp
 800a8ac:	4681      	mov	r9, r0
 800a8ae:	f7ff ff4d 	bl	800a74c <__b2d>
 800a8b2:	a901      	add	r1, sp, #4
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	ec55 4b10 	vmov	r4, r5, d0
 800a8ba:	f7ff ff47 	bl	800a74c <__b2d>
 800a8be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a8c6:	eba3 0c02 	sub.w	ip, r3, r2
 800a8ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8ce:	1a9b      	subs	r3, r3, r2
 800a8d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a8d4:	ec51 0b10 	vmov	r0, r1, d0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	bfd6      	itet	le
 800a8dc:	460a      	movle	r2, r1
 800a8de:	462a      	movgt	r2, r5
 800a8e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8e4:	468b      	mov	fp, r1
 800a8e6:	462f      	mov	r7, r5
 800a8e8:	bfd4      	ite	le
 800a8ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a8ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	ee10 2a10 	vmov	r2, s0
 800a8f8:	465b      	mov	r3, fp
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	f7f5 ffa6 	bl	800084c <__aeabi_ddiv>
 800a900:	ec41 0b10 	vmov	d0, r0, r1
 800a904:	b003      	add	sp, #12
 800a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a90a <__copybits>:
 800a90a:	3901      	subs	r1, #1
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	1149      	asrs	r1, r1, #5
 800a910:	6914      	ldr	r4, [r2, #16]
 800a912:	3101      	adds	r1, #1
 800a914:	f102 0314 	add.w	r3, r2, #20
 800a918:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a91c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a920:	1f05      	subs	r5, r0, #4
 800a922:	42a3      	cmp	r3, r4
 800a924:	d30c      	bcc.n	800a940 <__copybits+0x36>
 800a926:	1aa3      	subs	r3, r4, r2
 800a928:	3b11      	subs	r3, #17
 800a92a:	f023 0303 	bic.w	r3, r3, #3
 800a92e:	3211      	adds	r2, #17
 800a930:	42a2      	cmp	r2, r4
 800a932:	bf88      	it	hi
 800a934:	2300      	movhi	r3, #0
 800a936:	4418      	add	r0, r3
 800a938:	2300      	movs	r3, #0
 800a93a:	4288      	cmp	r0, r1
 800a93c:	d305      	bcc.n	800a94a <__copybits+0x40>
 800a93e:	bd70      	pop	{r4, r5, r6, pc}
 800a940:	f853 6b04 	ldr.w	r6, [r3], #4
 800a944:	f845 6f04 	str.w	r6, [r5, #4]!
 800a948:	e7eb      	b.n	800a922 <__copybits+0x18>
 800a94a:	f840 3b04 	str.w	r3, [r0], #4
 800a94e:	e7f4      	b.n	800a93a <__copybits+0x30>

0800a950 <__any_on>:
 800a950:	f100 0214 	add.w	r2, r0, #20
 800a954:	6900      	ldr	r0, [r0, #16]
 800a956:	114b      	asrs	r3, r1, #5
 800a958:	4298      	cmp	r0, r3
 800a95a:	b510      	push	{r4, lr}
 800a95c:	db11      	blt.n	800a982 <__any_on+0x32>
 800a95e:	dd0a      	ble.n	800a976 <__any_on+0x26>
 800a960:	f011 011f 	ands.w	r1, r1, #31
 800a964:	d007      	beq.n	800a976 <__any_on+0x26>
 800a966:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a96a:	fa24 f001 	lsr.w	r0, r4, r1
 800a96e:	fa00 f101 	lsl.w	r1, r0, r1
 800a972:	428c      	cmp	r4, r1
 800a974:	d10b      	bne.n	800a98e <__any_on+0x3e>
 800a976:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d803      	bhi.n	800a986 <__any_on+0x36>
 800a97e:	2000      	movs	r0, #0
 800a980:	bd10      	pop	{r4, pc}
 800a982:	4603      	mov	r3, r0
 800a984:	e7f7      	b.n	800a976 <__any_on+0x26>
 800a986:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a98a:	2900      	cmp	r1, #0
 800a98c:	d0f5      	beq.n	800a97a <__any_on+0x2a>
 800a98e:	2001      	movs	r0, #1
 800a990:	e7f6      	b.n	800a980 <__any_on+0x30>

0800a992 <_calloc_r>:
 800a992:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a994:	fba1 2402 	umull	r2, r4, r1, r2
 800a998:	b94c      	cbnz	r4, 800a9ae <_calloc_r+0x1c>
 800a99a:	4611      	mov	r1, r2
 800a99c:	9201      	str	r2, [sp, #4]
 800a99e:	f000 f87b 	bl	800aa98 <_malloc_r>
 800a9a2:	9a01      	ldr	r2, [sp, #4]
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	b930      	cbnz	r0, 800a9b6 <_calloc_r+0x24>
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	b003      	add	sp, #12
 800a9ac:	bd30      	pop	{r4, r5, pc}
 800a9ae:	220c      	movs	r2, #12
 800a9b0:	6002      	str	r2, [r0, #0]
 800a9b2:	2500      	movs	r5, #0
 800a9b4:	e7f8      	b.n	800a9a8 <_calloc_r+0x16>
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	f7fc f86c 	bl	8006a94 <memset>
 800a9bc:	e7f4      	b.n	800a9a8 <_calloc_r+0x16>
	...

0800a9c0 <_free_r>:
 800a9c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9c2:	2900      	cmp	r1, #0
 800a9c4:	d044      	beq.n	800aa50 <_free_r+0x90>
 800a9c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9ca:	9001      	str	r0, [sp, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f1a1 0404 	sub.w	r4, r1, #4
 800a9d2:	bfb8      	it	lt
 800a9d4:	18e4      	addlt	r4, r4, r3
 800a9d6:	f000 fb4b 	bl	800b070 <__malloc_lock>
 800a9da:	4a1e      	ldr	r2, [pc, #120]	; (800aa54 <_free_r+0x94>)
 800a9dc:	9801      	ldr	r0, [sp, #4]
 800a9de:	6813      	ldr	r3, [r2, #0]
 800a9e0:	b933      	cbnz	r3, 800a9f0 <_free_r+0x30>
 800a9e2:	6063      	str	r3, [r4, #4]
 800a9e4:	6014      	str	r4, [r2, #0]
 800a9e6:	b003      	add	sp, #12
 800a9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9ec:	f000 bb46 	b.w	800b07c <__malloc_unlock>
 800a9f0:	42a3      	cmp	r3, r4
 800a9f2:	d908      	bls.n	800aa06 <_free_r+0x46>
 800a9f4:	6825      	ldr	r5, [r4, #0]
 800a9f6:	1961      	adds	r1, r4, r5
 800a9f8:	428b      	cmp	r3, r1
 800a9fa:	bf01      	itttt	eq
 800a9fc:	6819      	ldreq	r1, [r3, #0]
 800a9fe:	685b      	ldreq	r3, [r3, #4]
 800aa00:	1949      	addeq	r1, r1, r5
 800aa02:	6021      	streq	r1, [r4, #0]
 800aa04:	e7ed      	b.n	800a9e2 <_free_r+0x22>
 800aa06:	461a      	mov	r2, r3
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	b10b      	cbz	r3, 800aa10 <_free_r+0x50>
 800aa0c:	42a3      	cmp	r3, r4
 800aa0e:	d9fa      	bls.n	800aa06 <_free_r+0x46>
 800aa10:	6811      	ldr	r1, [r2, #0]
 800aa12:	1855      	adds	r5, r2, r1
 800aa14:	42a5      	cmp	r5, r4
 800aa16:	d10b      	bne.n	800aa30 <_free_r+0x70>
 800aa18:	6824      	ldr	r4, [r4, #0]
 800aa1a:	4421      	add	r1, r4
 800aa1c:	1854      	adds	r4, r2, r1
 800aa1e:	42a3      	cmp	r3, r4
 800aa20:	6011      	str	r1, [r2, #0]
 800aa22:	d1e0      	bne.n	800a9e6 <_free_r+0x26>
 800aa24:	681c      	ldr	r4, [r3, #0]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	6053      	str	r3, [r2, #4]
 800aa2a:	4421      	add	r1, r4
 800aa2c:	6011      	str	r1, [r2, #0]
 800aa2e:	e7da      	b.n	800a9e6 <_free_r+0x26>
 800aa30:	d902      	bls.n	800aa38 <_free_r+0x78>
 800aa32:	230c      	movs	r3, #12
 800aa34:	6003      	str	r3, [r0, #0]
 800aa36:	e7d6      	b.n	800a9e6 <_free_r+0x26>
 800aa38:	6825      	ldr	r5, [r4, #0]
 800aa3a:	1961      	adds	r1, r4, r5
 800aa3c:	428b      	cmp	r3, r1
 800aa3e:	bf04      	itt	eq
 800aa40:	6819      	ldreq	r1, [r3, #0]
 800aa42:	685b      	ldreq	r3, [r3, #4]
 800aa44:	6063      	str	r3, [r4, #4]
 800aa46:	bf04      	itt	eq
 800aa48:	1949      	addeq	r1, r1, r5
 800aa4a:	6021      	streq	r1, [r4, #0]
 800aa4c:	6054      	str	r4, [r2, #4]
 800aa4e:	e7ca      	b.n	800a9e6 <_free_r+0x26>
 800aa50:	b003      	add	sp, #12
 800aa52:	bd30      	pop	{r4, r5, pc}
 800aa54:	200003fc 	.word	0x200003fc

0800aa58 <sbrk_aligned>:
 800aa58:	b570      	push	{r4, r5, r6, lr}
 800aa5a:	4e0e      	ldr	r6, [pc, #56]	; (800aa94 <sbrk_aligned+0x3c>)
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	6831      	ldr	r1, [r6, #0]
 800aa60:	4605      	mov	r5, r0
 800aa62:	b911      	cbnz	r1, 800aa6a <sbrk_aligned+0x12>
 800aa64:	f000 f9f0 	bl	800ae48 <_sbrk_r>
 800aa68:	6030      	str	r0, [r6, #0]
 800aa6a:	4621      	mov	r1, r4
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f000 f9eb 	bl	800ae48 <_sbrk_r>
 800aa72:	1c43      	adds	r3, r0, #1
 800aa74:	d00a      	beq.n	800aa8c <sbrk_aligned+0x34>
 800aa76:	1cc4      	adds	r4, r0, #3
 800aa78:	f024 0403 	bic.w	r4, r4, #3
 800aa7c:	42a0      	cmp	r0, r4
 800aa7e:	d007      	beq.n	800aa90 <sbrk_aligned+0x38>
 800aa80:	1a21      	subs	r1, r4, r0
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 f9e0 	bl	800ae48 <_sbrk_r>
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d101      	bne.n	800aa90 <sbrk_aligned+0x38>
 800aa8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aa90:	4620      	mov	r0, r4
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	20000400 	.word	0x20000400

0800aa98 <_malloc_r>:
 800aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9c:	1ccd      	adds	r5, r1, #3
 800aa9e:	f025 0503 	bic.w	r5, r5, #3
 800aaa2:	3508      	adds	r5, #8
 800aaa4:	2d0c      	cmp	r5, #12
 800aaa6:	bf38      	it	cc
 800aaa8:	250c      	movcc	r5, #12
 800aaaa:	2d00      	cmp	r5, #0
 800aaac:	4607      	mov	r7, r0
 800aaae:	db01      	blt.n	800aab4 <_malloc_r+0x1c>
 800aab0:	42a9      	cmp	r1, r5
 800aab2:	d905      	bls.n	800aac0 <_malloc_r+0x28>
 800aab4:	230c      	movs	r3, #12
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	2600      	movs	r6, #0
 800aaba:	4630      	mov	r0, r6
 800aabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac0:	4e2e      	ldr	r6, [pc, #184]	; (800ab7c <_malloc_r+0xe4>)
 800aac2:	f000 fad5 	bl	800b070 <__malloc_lock>
 800aac6:	6833      	ldr	r3, [r6, #0]
 800aac8:	461c      	mov	r4, r3
 800aaca:	bb34      	cbnz	r4, 800ab1a <_malloc_r+0x82>
 800aacc:	4629      	mov	r1, r5
 800aace:	4638      	mov	r0, r7
 800aad0:	f7ff ffc2 	bl	800aa58 <sbrk_aligned>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	4604      	mov	r4, r0
 800aad8:	d14d      	bne.n	800ab76 <_malloc_r+0xde>
 800aada:	6834      	ldr	r4, [r6, #0]
 800aadc:	4626      	mov	r6, r4
 800aade:	2e00      	cmp	r6, #0
 800aae0:	d140      	bne.n	800ab64 <_malloc_r+0xcc>
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	4631      	mov	r1, r6
 800aae6:	4638      	mov	r0, r7
 800aae8:	eb04 0803 	add.w	r8, r4, r3
 800aaec:	f000 f9ac 	bl	800ae48 <_sbrk_r>
 800aaf0:	4580      	cmp	r8, r0
 800aaf2:	d13a      	bne.n	800ab6a <_malloc_r+0xd2>
 800aaf4:	6821      	ldr	r1, [r4, #0]
 800aaf6:	3503      	adds	r5, #3
 800aaf8:	1a6d      	subs	r5, r5, r1
 800aafa:	f025 0503 	bic.w	r5, r5, #3
 800aafe:	3508      	adds	r5, #8
 800ab00:	2d0c      	cmp	r5, #12
 800ab02:	bf38      	it	cc
 800ab04:	250c      	movcc	r5, #12
 800ab06:	4629      	mov	r1, r5
 800ab08:	4638      	mov	r0, r7
 800ab0a:	f7ff ffa5 	bl	800aa58 <sbrk_aligned>
 800ab0e:	3001      	adds	r0, #1
 800ab10:	d02b      	beq.n	800ab6a <_malloc_r+0xd2>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	442b      	add	r3, r5
 800ab16:	6023      	str	r3, [r4, #0]
 800ab18:	e00e      	b.n	800ab38 <_malloc_r+0xa0>
 800ab1a:	6822      	ldr	r2, [r4, #0]
 800ab1c:	1b52      	subs	r2, r2, r5
 800ab1e:	d41e      	bmi.n	800ab5e <_malloc_r+0xc6>
 800ab20:	2a0b      	cmp	r2, #11
 800ab22:	d916      	bls.n	800ab52 <_malloc_r+0xba>
 800ab24:	1961      	adds	r1, r4, r5
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	6025      	str	r5, [r4, #0]
 800ab2a:	bf18      	it	ne
 800ab2c:	6059      	strne	r1, [r3, #4]
 800ab2e:	6863      	ldr	r3, [r4, #4]
 800ab30:	bf08      	it	eq
 800ab32:	6031      	streq	r1, [r6, #0]
 800ab34:	5162      	str	r2, [r4, r5]
 800ab36:	604b      	str	r3, [r1, #4]
 800ab38:	4638      	mov	r0, r7
 800ab3a:	f104 060b 	add.w	r6, r4, #11
 800ab3e:	f000 fa9d 	bl	800b07c <__malloc_unlock>
 800ab42:	f026 0607 	bic.w	r6, r6, #7
 800ab46:	1d23      	adds	r3, r4, #4
 800ab48:	1af2      	subs	r2, r6, r3
 800ab4a:	d0b6      	beq.n	800aaba <_malloc_r+0x22>
 800ab4c:	1b9b      	subs	r3, r3, r6
 800ab4e:	50a3      	str	r3, [r4, r2]
 800ab50:	e7b3      	b.n	800aaba <_malloc_r+0x22>
 800ab52:	6862      	ldr	r2, [r4, #4]
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	bf0c      	ite	eq
 800ab58:	6032      	streq	r2, [r6, #0]
 800ab5a:	605a      	strne	r2, [r3, #4]
 800ab5c:	e7ec      	b.n	800ab38 <_malloc_r+0xa0>
 800ab5e:	4623      	mov	r3, r4
 800ab60:	6864      	ldr	r4, [r4, #4]
 800ab62:	e7b2      	b.n	800aaca <_malloc_r+0x32>
 800ab64:	4634      	mov	r4, r6
 800ab66:	6876      	ldr	r6, [r6, #4]
 800ab68:	e7b9      	b.n	800aade <_malloc_r+0x46>
 800ab6a:	230c      	movs	r3, #12
 800ab6c:	603b      	str	r3, [r7, #0]
 800ab6e:	4638      	mov	r0, r7
 800ab70:	f000 fa84 	bl	800b07c <__malloc_unlock>
 800ab74:	e7a1      	b.n	800aaba <_malloc_r+0x22>
 800ab76:	6025      	str	r5, [r4, #0]
 800ab78:	e7de      	b.n	800ab38 <_malloc_r+0xa0>
 800ab7a:	bf00      	nop
 800ab7c:	200003fc 	.word	0x200003fc

0800ab80 <__ssputs_r>:
 800ab80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab84:	688e      	ldr	r6, [r1, #8]
 800ab86:	429e      	cmp	r6, r3
 800ab88:	4682      	mov	sl, r0
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	4690      	mov	r8, r2
 800ab8e:	461f      	mov	r7, r3
 800ab90:	d838      	bhi.n	800ac04 <__ssputs_r+0x84>
 800ab92:	898a      	ldrh	r2, [r1, #12]
 800ab94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab98:	d032      	beq.n	800ac00 <__ssputs_r+0x80>
 800ab9a:	6825      	ldr	r5, [r4, #0]
 800ab9c:	6909      	ldr	r1, [r1, #16]
 800ab9e:	eba5 0901 	sub.w	r9, r5, r1
 800aba2:	6965      	ldr	r5, [r4, #20]
 800aba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aba8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abac:	3301      	adds	r3, #1
 800abae:	444b      	add	r3, r9
 800abb0:	106d      	asrs	r5, r5, #1
 800abb2:	429d      	cmp	r5, r3
 800abb4:	bf38      	it	cc
 800abb6:	461d      	movcc	r5, r3
 800abb8:	0553      	lsls	r3, r2, #21
 800abba:	d531      	bpl.n	800ac20 <__ssputs_r+0xa0>
 800abbc:	4629      	mov	r1, r5
 800abbe:	f7ff ff6b 	bl	800aa98 <_malloc_r>
 800abc2:	4606      	mov	r6, r0
 800abc4:	b950      	cbnz	r0, 800abdc <__ssputs_r+0x5c>
 800abc6:	230c      	movs	r3, #12
 800abc8:	f8ca 3000 	str.w	r3, [sl]
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abd2:	81a3      	strh	r3, [r4, #12]
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abdc:	6921      	ldr	r1, [r4, #16]
 800abde:	464a      	mov	r2, r9
 800abe0:	f7ff fa08 	bl	8009ff4 <memcpy>
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abee:	81a3      	strh	r3, [r4, #12]
 800abf0:	6126      	str	r6, [r4, #16]
 800abf2:	6165      	str	r5, [r4, #20]
 800abf4:	444e      	add	r6, r9
 800abf6:	eba5 0509 	sub.w	r5, r5, r9
 800abfa:	6026      	str	r6, [r4, #0]
 800abfc:	60a5      	str	r5, [r4, #8]
 800abfe:	463e      	mov	r6, r7
 800ac00:	42be      	cmp	r6, r7
 800ac02:	d900      	bls.n	800ac06 <__ssputs_r+0x86>
 800ac04:	463e      	mov	r6, r7
 800ac06:	6820      	ldr	r0, [r4, #0]
 800ac08:	4632      	mov	r2, r6
 800ac0a:	4641      	mov	r1, r8
 800ac0c:	f000 fa16 	bl	800b03c <memmove>
 800ac10:	68a3      	ldr	r3, [r4, #8]
 800ac12:	1b9b      	subs	r3, r3, r6
 800ac14:	60a3      	str	r3, [r4, #8]
 800ac16:	6823      	ldr	r3, [r4, #0]
 800ac18:	4433      	add	r3, r6
 800ac1a:	6023      	str	r3, [r4, #0]
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e7db      	b.n	800abd8 <__ssputs_r+0x58>
 800ac20:	462a      	mov	r2, r5
 800ac22:	f000 fa31 	bl	800b088 <_realloc_r>
 800ac26:	4606      	mov	r6, r0
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d1e1      	bne.n	800abf0 <__ssputs_r+0x70>
 800ac2c:	6921      	ldr	r1, [r4, #16]
 800ac2e:	4650      	mov	r0, sl
 800ac30:	f7ff fec6 	bl	800a9c0 <_free_r>
 800ac34:	e7c7      	b.n	800abc6 <__ssputs_r+0x46>
	...

0800ac38 <_svfiprintf_r>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	4698      	mov	r8, r3
 800ac3e:	898b      	ldrh	r3, [r1, #12]
 800ac40:	061b      	lsls	r3, r3, #24
 800ac42:	b09d      	sub	sp, #116	; 0x74
 800ac44:	4607      	mov	r7, r0
 800ac46:	460d      	mov	r5, r1
 800ac48:	4614      	mov	r4, r2
 800ac4a:	d50e      	bpl.n	800ac6a <_svfiprintf_r+0x32>
 800ac4c:	690b      	ldr	r3, [r1, #16]
 800ac4e:	b963      	cbnz	r3, 800ac6a <_svfiprintf_r+0x32>
 800ac50:	2140      	movs	r1, #64	; 0x40
 800ac52:	f7ff ff21 	bl	800aa98 <_malloc_r>
 800ac56:	6028      	str	r0, [r5, #0]
 800ac58:	6128      	str	r0, [r5, #16]
 800ac5a:	b920      	cbnz	r0, 800ac66 <_svfiprintf_r+0x2e>
 800ac5c:	230c      	movs	r3, #12
 800ac5e:	603b      	str	r3, [r7, #0]
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac64:	e0d1      	b.n	800ae0a <_svfiprintf_r+0x1d2>
 800ac66:	2340      	movs	r3, #64	; 0x40
 800ac68:	616b      	str	r3, [r5, #20]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac6e:	2320      	movs	r3, #32
 800ac70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac78:	2330      	movs	r3, #48	; 0x30
 800ac7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae24 <_svfiprintf_r+0x1ec>
 800ac7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac82:	f04f 0901 	mov.w	r9, #1
 800ac86:	4623      	mov	r3, r4
 800ac88:	469a      	mov	sl, r3
 800ac8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac8e:	b10a      	cbz	r2, 800ac94 <_svfiprintf_r+0x5c>
 800ac90:	2a25      	cmp	r2, #37	; 0x25
 800ac92:	d1f9      	bne.n	800ac88 <_svfiprintf_r+0x50>
 800ac94:	ebba 0b04 	subs.w	fp, sl, r4
 800ac98:	d00b      	beq.n	800acb2 <_svfiprintf_r+0x7a>
 800ac9a:	465b      	mov	r3, fp
 800ac9c:	4622      	mov	r2, r4
 800ac9e:	4629      	mov	r1, r5
 800aca0:	4638      	mov	r0, r7
 800aca2:	f7ff ff6d 	bl	800ab80 <__ssputs_r>
 800aca6:	3001      	adds	r0, #1
 800aca8:	f000 80aa 	beq.w	800ae00 <_svfiprintf_r+0x1c8>
 800acac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acae:	445a      	add	r2, fp
 800acb0:	9209      	str	r2, [sp, #36]	; 0x24
 800acb2:	f89a 3000 	ldrb.w	r3, [sl]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 80a2 	beq.w	800ae00 <_svfiprintf_r+0x1c8>
 800acbc:	2300      	movs	r3, #0
 800acbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800acc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acc6:	f10a 0a01 	add.w	sl, sl, #1
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	9307      	str	r3, [sp, #28]
 800acce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acd2:	931a      	str	r3, [sp, #104]	; 0x68
 800acd4:	4654      	mov	r4, sl
 800acd6:	2205      	movs	r2, #5
 800acd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acdc:	4851      	ldr	r0, [pc, #324]	; (800ae24 <_svfiprintf_r+0x1ec>)
 800acde:	f7f5 fa7f 	bl	80001e0 <memchr>
 800ace2:	9a04      	ldr	r2, [sp, #16]
 800ace4:	b9d8      	cbnz	r0, 800ad1e <_svfiprintf_r+0xe6>
 800ace6:	06d0      	lsls	r0, r2, #27
 800ace8:	bf44      	itt	mi
 800acea:	2320      	movmi	r3, #32
 800acec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acf0:	0711      	lsls	r1, r2, #28
 800acf2:	bf44      	itt	mi
 800acf4:	232b      	movmi	r3, #43	; 0x2b
 800acf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acfa:	f89a 3000 	ldrb.w	r3, [sl]
 800acfe:	2b2a      	cmp	r3, #42	; 0x2a
 800ad00:	d015      	beq.n	800ad2e <_svfiprintf_r+0xf6>
 800ad02:	9a07      	ldr	r2, [sp, #28]
 800ad04:	4654      	mov	r4, sl
 800ad06:	2000      	movs	r0, #0
 800ad08:	f04f 0c0a 	mov.w	ip, #10
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad12:	3b30      	subs	r3, #48	; 0x30
 800ad14:	2b09      	cmp	r3, #9
 800ad16:	d94e      	bls.n	800adb6 <_svfiprintf_r+0x17e>
 800ad18:	b1b0      	cbz	r0, 800ad48 <_svfiprintf_r+0x110>
 800ad1a:	9207      	str	r2, [sp, #28]
 800ad1c:	e014      	b.n	800ad48 <_svfiprintf_r+0x110>
 800ad1e:	eba0 0308 	sub.w	r3, r0, r8
 800ad22:	fa09 f303 	lsl.w	r3, r9, r3
 800ad26:	4313      	orrs	r3, r2
 800ad28:	9304      	str	r3, [sp, #16]
 800ad2a:	46a2      	mov	sl, r4
 800ad2c:	e7d2      	b.n	800acd4 <_svfiprintf_r+0x9c>
 800ad2e:	9b03      	ldr	r3, [sp, #12]
 800ad30:	1d19      	adds	r1, r3, #4
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	9103      	str	r1, [sp, #12]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	bfbb      	ittet	lt
 800ad3a:	425b      	neglt	r3, r3
 800ad3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad40:	9307      	strge	r3, [sp, #28]
 800ad42:	9307      	strlt	r3, [sp, #28]
 800ad44:	bfb8      	it	lt
 800ad46:	9204      	strlt	r2, [sp, #16]
 800ad48:	7823      	ldrb	r3, [r4, #0]
 800ad4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ad4c:	d10c      	bne.n	800ad68 <_svfiprintf_r+0x130>
 800ad4e:	7863      	ldrb	r3, [r4, #1]
 800ad50:	2b2a      	cmp	r3, #42	; 0x2a
 800ad52:	d135      	bne.n	800adc0 <_svfiprintf_r+0x188>
 800ad54:	9b03      	ldr	r3, [sp, #12]
 800ad56:	1d1a      	adds	r2, r3, #4
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	9203      	str	r2, [sp, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bfb8      	it	lt
 800ad60:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ad64:	3402      	adds	r4, #2
 800ad66:	9305      	str	r3, [sp, #20]
 800ad68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae34 <_svfiprintf_r+0x1fc>
 800ad6c:	7821      	ldrb	r1, [r4, #0]
 800ad6e:	2203      	movs	r2, #3
 800ad70:	4650      	mov	r0, sl
 800ad72:	f7f5 fa35 	bl	80001e0 <memchr>
 800ad76:	b140      	cbz	r0, 800ad8a <_svfiprintf_r+0x152>
 800ad78:	2340      	movs	r3, #64	; 0x40
 800ad7a:	eba0 000a 	sub.w	r0, r0, sl
 800ad7e:	fa03 f000 	lsl.w	r0, r3, r0
 800ad82:	9b04      	ldr	r3, [sp, #16]
 800ad84:	4303      	orrs	r3, r0
 800ad86:	3401      	adds	r4, #1
 800ad88:	9304      	str	r3, [sp, #16]
 800ad8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad8e:	4826      	ldr	r0, [pc, #152]	; (800ae28 <_svfiprintf_r+0x1f0>)
 800ad90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad94:	2206      	movs	r2, #6
 800ad96:	f7f5 fa23 	bl	80001e0 <memchr>
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d038      	beq.n	800ae10 <_svfiprintf_r+0x1d8>
 800ad9e:	4b23      	ldr	r3, [pc, #140]	; (800ae2c <_svfiprintf_r+0x1f4>)
 800ada0:	bb1b      	cbnz	r3, 800adea <_svfiprintf_r+0x1b2>
 800ada2:	9b03      	ldr	r3, [sp, #12]
 800ada4:	3307      	adds	r3, #7
 800ada6:	f023 0307 	bic.w	r3, r3, #7
 800adaa:	3308      	adds	r3, #8
 800adac:	9303      	str	r3, [sp, #12]
 800adae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adb0:	4433      	add	r3, r6
 800adb2:	9309      	str	r3, [sp, #36]	; 0x24
 800adb4:	e767      	b.n	800ac86 <_svfiprintf_r+0x4e>
 800adb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800adba:	460c      	mov	r4, r1
 800adbc:	2001      	movs	r0, #1
 800adbe:	e7a5      	b.n	800ad0c <_svfiprintf_r+0xd4>
 800adc0:	2300      	movs	r3, #0
 800adc2:	3401      	adds	r4, #1
 800adc4:	9305      	str	r3, [sp, #20]
 800adc6:	4619      	mov	r1, r3
 800adc8:	f04f 0c0a 	mov.w	ip, #10
 800adcc:	4620      	mov	r0, r4
 800adce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800add2:	3a30      	subs	r2, #48	; 0x30
 800add4:	2a09      	cmp	r2, #9
 800add6:	d903      	bls.n	800ade0 <_svfiprintf_r+0x1a8>
 800add8:	2b00      	cmp	r3, #0
 800adda:	d0c5      	beq.n	800ad68 <_svfiprintf_r+0x130>
 800addc:	9105      	str	r1, [sp, #20]
 800adde:	e7c3      	b.n	800ad68 <_svfiprintf_r+0x130>
 800ade0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ade4:	4604      	mov	r4, r0
 800ade6:	2301      	movs	r3, #1
 800ade8:	e7f0      	b.n	800adcc <_svfiprintf_r+0x194>
 800adea:	ab03      	add	r3, sp, #12
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	462a      	mov	r2, r5
 800adf0:	4b0f      	ldr	r3, [pc, #60]	; (800ae30 <_svfiprintf_r+0x1f8>)
 800adf2:	a904      	add	r1, sp, #16
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7fb fef5 	bl	8006be4 <_printf_float>
 800adfa:	1c42      	adds	r2, r0, #1
 800adfc:	4606      	mov	r6, r0
 800adfe:	d1d6      	bne.n	800adae <_svfiprintf_r+0x176>
 800ae00:	89ab      	ldrh	r3, [r5, #12]
 800ae02:	065b      	lsls	r3, r3, #25
 800ae04:	f53f af2c 	bmi.w	800ac60 <_svfiprintf_r+0x28>
 800ae08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae0a:	b01d      	add	sp, #116	; 0x74
 800ae0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae10:	ab03      	add	r3, sp, #12
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	462a      	mov	r2, r5
 800ae16:	4b06      	ldr	r3, [pc, #24]	; (800ae30 <_svfiprintf_r+0x1f8>)
 800ae18:	a904      	add	r1, sp, #16
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	f7fc f986 	bl	800712c <_printf_i>
 800ae20:	e7eb      	b.n	800adfa <_svfiprintf_r+0x1c2>
 800ae22:	bf00      	nop
 800ae24:	0800b994 	.word	0x0800b994
 800ae28:	0800b99e 	.word	0x0800b99e
 800ae2c:	08006be5 	.word	0x08006be5
 800ae30:	0800ab81 	.word	0x0800ab81
 800ae34:	0800b99a 	.word	0x0800b99a

0800ae38 <nan>:
 800ae38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae40 <nan+0x8>
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	00000000 	.word	0x00000000
 800ae44:	7ff80000 	.word	0x7ff80000

0800ae48 <_sbrk_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4d06      	ldr	r5, [pc, #24]	; (800ae64 <_sbrk_r+0x1c>)
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4604      	mov	r4, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	602b      	str	r3, [r5, #0]
 800ae54:	f7f6 ff30 	bl	8001cb8 <_sbrk>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_sbrk_r+0x1a>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_sbrk_r+0x1a>
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	20000404 	.word	0x20000404

0800ae68 <__sread>:
 800ae68:	b510      	push	{r4, lr}
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae70:	f000 fa92 	bl	800b398 <_read_r>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	bfab      	itete	ge
 800ae78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae7c:	181b      	addge	r3, r3, r0
 800ae7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae82:	bfac      	ite	ge
 800ae84:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae86:	81a3      	strhlt	r3, [r4, #12]
 800ae88:	bd10      	pop	{r4, pc}

0800ae8a <__swrite>:
 800ae8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	461f      	mov	r7, r3
 800ae90:	898b      	ldrh	r3, [r1, #12]
 800ae92:	05db      	lsls	r3, r3, #23
 800ae94:	4605      	mov	r5, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	4616      	mov	r6, r2
 800ae9a:	d505      	bpl.n	800aea8 <__swrite+0x1e>
 800ae9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aea0:	2302      	movs	r3, #2
 800aea2:	2200      	movs	r2, #0
 800aea4:	f000 f8b8 	bl	800b018 <_lseek_r>
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeb2:	81a3      	strh	r3, [r4, #12]
 800aeb4:	4632      	mov	r2, r6
 800aeb6:	463b      	mov	r3, r7
 800aeb8:	4628      	mov	r0, r5
 800aeba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aebe:	f000 b837 	b.w	800af30 <_write_r>

0800aec2 <__sseek>:
 800aec2:	b510      	push	{r4, lr}
 800aec4:	460c      	mov	r4, r1
 800aec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeca:	f000 f8a5 	bl	800b018 <_lseek_r>
 800aece:	1c43      	adds	r3, r0, #1
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	bf15      	itete	ne
 800aed4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aed6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aeda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aede:	81a3      	strheq	r3, [r4, #12]
 800aee0:	bf18      	it	ne
 800aee2:	81a3      	strhne	r3, [r4, #12]
 800aee4:	bd10      	pop	{r4, pc}

0800aee6 <__sclose>:
 800aee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeea:	f000 b851 	b.w	800af90 <_close_r>

0800aeee <strncmp>:
 800aeee:	b510      	push	{r4, lr}
 800aef0:	b17a      	cbz	r2, 800af12 <strncmp+0x24>
 800aef2:	4603      	mov	r3, r0
 800aef4:	3901      	subs	r1, #1
 800aef6:	1884      	adds	r4, r0, r2
 800aef8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aefc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af00:	4290      	cmp	r0, r2
 800af02:	d101      	bne.n	800af08 <strncmp+0x1a>
 800af04:	42a3      	cmp	r3, r4
 800af06:	d101      	bne.n	800af0c <strncmp+0x1e>
 800af08:	1a80      	subs	r0, r0, r2
 800af0a:	bd10      	pop	{r4, pc}
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d1f3      	bne.n	800aef8 <strncmp+0xa>
 800af10:	e7fa      	b.n	800af08 <strncmp+0x1a>
 800af12:	4610      	mov	r0, r2
 800af14:	e7f9      	b.n	800af0a <strncmp+0x1c>

0800af16 <__ascii_wctomb>:
 800af16:	b149      	cbz	r1, 800af2c <__ascii_wctomb+0x16>
 800af18:	2aff      	cmp	r2, #255	; 0xff
 800af1a:	bf85      	ittet	hi
 800af1c:	238a      	movhi	r3, #138	; 0x8a
 800af1e:	6003      	strhi	r3, [r0, #0]
 800af20:	700a      	strbls	r2, [r1, #0]
 800af22:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800af26:	bf98      	it	ls
 800af28:	2001      	movls	r0, #1
 800af2a:	4770      	bx	lr
 800af2c:	4608      	mov	r0, r1
 800af2e:	4770      	bx	lr

0800af30 <_write_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	4d07      	ldr	r5, [pc, #28]	; (800af50 <_write_r+0x20>)
 800af34:	4604      	mov	r4, r0
 800af36:	4608      	mov	r0, r1
 800af38:	4611      	mov	r1, r2
 800af3a:	2200      	movs	r2, #0
 800af3c:	602a      	str	r2, [r5, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	f7f6 f881 	bl	8001046 <_write>
 800af44:	1c43      	adds	r3, r0, #1
 800af46:	d102      	bne.n	800af4e <_write_r+0x1e>
 800af48:	682b      	ldr	r3, [r5, #0]
 800af4a:	b103      	cbz	r3, 800af4e <_write_r+0x1e>
 800af4c:	6023      	str	r3, [r4, #0]
 800af4e:	bd38      	pop	{r3, r4, r5, pc}
 800af50:	20000404 	.word	0x20000404

0800af54 <__assert_func>:
 800af54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af56:	4614      	mov	r4, r2
 800af58:	461a      	mov	r2, r3
 800af5a:	4b09      	ldr	r3, [pc, #36]	; (800af80 <__assert_func+0x2c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4605      	mov	r5, r0
 800af60:	68d8      	ldr	r0, [r3, #12]
 800af62:	b14c      	cbz	r4, 800af78 <__assert_func+0x24>
 800af64:	4b07      	ldr	r3, [pc, #28]	; (800af84 <__assert_func+0x30>)
 800af66:	9100      	str	r1, [sp, #0]
 800af68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af6c:	4906      	ldr	r1, [pc, #24]	; (800af88 <__assert_func+0x34>)
 800af6e:	462b      	mov	r3, r5
 800af70:	f000 f81e 	bl	800afb0 <fiprintf>
 800af74:	f000 fa22 	bl	800b3bc <abort>
 800af78:	4b04      	ldr	r3, [pc, #16]	; (800af8c <__assert_func+0x38>)
 800af7a:	461c      	mov	r4, r3
 800af7c:	e7f3      	b.n	800af66 <__assert_func+0x12>
 800af7e:	bf00      	nop
 800af80:	2000000c 	.word	0x2000000c
 800af84:	0800b9a5 	.word	0x0800b9a5
 800af88:	0800b9b2 	.word	0x0800b9b2
 800af8c:	0800b9e0 	.word	0x0800b9e0

0800af90 <_close_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4d06      	ldr	r5, [pc, #24]	; (800afac <_close_r+0x1c>)
 800af94:	2300      	movs	r3, #0
 800af96:	4604      	mov	r4, r0
 800af98:	4608      	mov	r0, r1
 800af9a:	602b      	str	r3, [r5, #0]
 800af9c:	f7f6 fe57 	bl	8001c4e <_close>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_close_r+0x1a>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_close_r+0x1a>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	20000404 	.word	0x20000404

0800afb0 <fiprintf>:
 800afb0:	b40e      	push	{r1, r2, r3}
 800afb2:	b503      	push	{r0, r1, lr}
 800afb4:	4601      	mov	r1, r0
 800afb6:	ab03      	add	r3, sp, #12
 800afb8:	4805      	ldr	r0, [pc, #20]	; (800afd0 <fiprintf+0x20>)
 800afba:	f853 2b04 	ldr.w	r2, [r3], #4
 800afbe:	6800      	ldr	r0, [r0, #0]
 800afc0:	9301      	str	r3, [sp, #4]
 800afc2:	f000 f8b9 	bl	800b138 <_vfiprintf_r>
 800afc6:	b002      	add	sp, #8
 800afc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afcc:	b003      	add	sp, #12
 800afce:	4770      	bx	lr
 800afd0:	2000000c 	.word	0x2000000c

0800afd4 <_fstat_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d07      	ldr	r5, [pc, #28]	; (800aff4 <_fstat_r+0x20>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	4611      	mov	r1, r2
 800afe0:	602b      	str	r3, [r5, #0]
 800afe2:	f7f6 fe40 	bl	8001c66 <_fstat>
 800afe6:	1c43      	adds	r3, r0, #1
 800afe8:	d102      	bne.n	800aff0 <_fstat_r+0x1c>
 800afea:	682b      	ldr	r3, [r5, #0]
 800afec:	b103      	cbz	r3, 800aff0 <_fstat_r+0x1c>
 800afee:	6023      	str	r3, [r4, #0]
 800aff0:	bd38      	pop	{r3, r4, r5, pc}
 800aff2:	bf00      	nop
 800aff4:	20000404 	.word	0x20000404

0800aff8 <_isatty_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4d06      	ldr	r5, [pc, #24]	; (800b014 <_isatty_r+0x1c>)
 800affc:	2300      	movs	r3, #0
 800affe:	4604      	mov	r4, r0
 800b000:	4608      	mov	r0, r1
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	f7f6 fe3f 	bl	8001c86 <_isatty>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d102      	bne.n	800b012 <_isatty_r+0x1a>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	b103      	cbz	r3, 800b012 <_isatty_r+0x1a>
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	20000404 	.word	0x20000404

0800b018 <_lseek_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	4d07      	ldr	r5, [pc, #28]	; (800b038 <_lseek_r+0x20>)
 800b01c:	4604      	mov	r4, r0
 800b01e:	4608      	mov	r0, r1
 800b020:	4611      	mov	r1, r2
 800b022:	2200      	movs	r2, #0
 800b024:	602a      	str	r2, [r5, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	f7f6 fe38 	bl	8001c9c <_lseek>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_lseek_r+0x1e>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_lseek_r+0x1e>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	20000404 	.word	0x20000404

0800b03c <memmove>:
 800b03c:	4288      	cmp	r0, r1
 800b03e:	b510      	push	{r4, lr}
 800b040:	eb01 0402 	add.w	r4, r1, r2
 800b044:	d902      	bls.n	800b04c <memmove+0x10>
 800b046:	4284      	cmp	r4, r0
 800b048:	4623      	mov	r3, r4
 800b04a:	d807      	bhi.n	800b05c <memmove+0x20>
 800b04c:	1e43      	subs	r3, r0, #1
 800b04e:	42a1      	cmp	r1, r4
 800b050:	d008      	beq.n	800b064 <memmove+0x28>
 800b052:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b05a:	e7f8      	b.n	800b04e <memmove+0x12>
 800b05c:	4402      	add	r2, r0
 800b05e:	4601      	mov	r1, r0
 800b060:	428a      	cmp	r2, r1
 800b062:	d100      	bne.n	800b066 <memmove+0x2a>
 800b064:	bd10      	pop	{r4, pc}
 800b066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b06a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b06e:	e7f7      	b.n	800b060 <memmove+0x24>

0800b070 <__malloc_lock>:
 800b070:	4801      	ldr	r0, [pc, #4]	; (800b078 <__malloc_lock+0x8>)
 800b072:	f7fe bf3e 	b.w	8009ef2 <__retarget_lock_acquire_recursive>
 800b076:	bf00      	nop
 800b078:	200003f8 	.word	0x200003f8

0800b07c <__malloc_unlock>:
 800b07c:	4801      	ldr	r0, [pc, #4]	; (800b084 <__malloc_unlock+0x8>)
 800b07e:	f7fe bf39 	b.w	8009ef4 <__retarget_lock_release_recursive>
 800b082:	bf00      	nop
 800b084:	200003f8 	.word	0x200003f8

0800b088 <_realloc_r>:
 800b088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b08c:	4680      	mov	r8, r0
 800b08e:	4614      	mov	r4, r2
 800b090:	460e      	mov	r6, r1
 800b092:	b921      	cbnz	r1, 800b09e <_realloc_r+0x16>
 800b094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b098:	4611      	mov	r1, r2
 800b09a:	f7ff bcfd 	b.w	800aa98 <_malloc_r>
 800b09e:	b92a      	cbnz	r2, 800b0ac <_realloc_r+0x24>
 800b0a0:	f7ff fc8e 	bl	800a9c0 <_free_r>
 800b0a4:	4625      	mov	r5, r4
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ac:	f000 f98d 	bl	800b3ca <_malloc_usable_size_r>
 800b0b0:	4284      	cmp	r4, r0
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	d802      	bhi.n	800b0bc <_realloc_r+0x34>
 800b0b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0ba:	d812      	bhi.n	800b0e2 <_realloc_r+0x5a>
 800b0bc:	4621      	mov	r1, r4
 800b0be:	4640      	mov	r0, r8
 800b0c0:	f7ff fcea 	bl	800aa98 <_malloc_r>
 800b0c4:	4605      	mov	r5, r0
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d0ed      	beq.n	800b0a6 <_realloc_r+0x1e>
 800b0ca:	42bc      	cmp	r4, r7
 800b0cc:	4622      	mov	r2, r4
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	bf28      	it	cs
 800b0d2:	463a      	movcs	r2, r7
 800b0d4:	f7fe ff8e 	bl	8009ff4 <memcpy>
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4640      	mov	r0, r8
 800b0dc:	f7ff fc70 	bl	800a9c0 <_free_r>
 800b0e0:	e7e1      	b.n	800b0a6 <_realloc_r+0x1e>
 800b0e2:	4635      	mov	r5, r6
 800b0e4:	e7df      	b.n	800b0a6 <_realloc_r+0x1e>

0800b0e6 <__sfputc_r>:
 800b0e6:	6893      	ldr	r3, [r2, #8]
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	b410      	push	{r4}
 800b0ee:	6093      	str	r3, [r2, #8]
 800b0f0:	da08      	bge.n	800b104 <__sfputc_r+0x1e>
 800b0f2:	6994      	ldr	r4, [r2, #24]
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	db01      	blt.n	800b0fc <__sfputc_r+0x16>
 800b0f8:	290a      	cmp	r1, #10
 800b0fa:	d103      	bne.n	800b104 <__sfputc_r+0x1e>
 800b0fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b100:	f7fd ba92 	b.w	8008628 <__swbuf_r>
 800b104:	6813      	ldr	r3, [r2, #0]
 800b106:	1c58      	adds	r0, r3, #1
 800b108:	6010      	str	r0, [r2, #0]
 800b10a:	7019      	strb	r1, [r3, #0]
 800b10c:	4608      	mov	r0, r1
 800b10e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <__sfputs_r>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	4606      	mov	r6, r0
 800b118:	460f      	mov	r7, r1
 800b11a:	4614      	mov	r4, r2
 800b11c:	18d5      	adds	r5, r2, r3
 800b11e:	42ac      	cmp	r4, r5
 800b120:	d101      	bne.n	800b126 <__sfputs_r+0x12>
 800b122:	2000      	movs	r0, #0
 800b124:	e007      	b.n	800b136 <__sfputs_r+0x22>
 800b126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b12a:	463a      	mov	r2, r7
 800b12c:	4630      	mov	r0, r6
 800b12e:	f7ff ffda 	bl	800b0e6 <__sfputc_r>
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	d1f3      	bne.n	800b11e <__sfputs_r+0xa>
 800b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b138 <_vfiprintf_r>:
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	460d      	mov	r5, r1
 800b13e:	b09d      	sub	sp, #116	; 0x74
 800b140:	4614      	mov	r4, r2
 800b142:	4698      	mov	r8, r3
 800b144:	4606      	mov	r6, r0
 800b146:	b118      	cbz	r0, 800b150 <_vfiprintf_r+0x18>
 800b148:	6983      	ldr	r3, [r0, #24]
 800b14a:	b90b      	cbnz	r3, 800b150 <_vfiprintf_r+0x18>
 800b14c:	f7fe fac0 	bl	80096d0 <__sinit>
 800b150:	4b89      	ldr	r3, [pc, #548]	; (800b378 <_vfiprintf_r+0x240>)
 800b152:	429d      	cmp	r5, r3
 800b154:	d11b      	bne.n	800b18e <_vfiprintf_r+0x56>
 800b156:	6875      	ldr	r5, [r6, #4]
 800b158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b15a:	07d9      	lsls	r1, r3, #31
 800b15c:	d405      	bmi.n	800b16a <_vfiprintf_r+0x32>
 800b15e:	89ab      	ldrh	r3, [r5, #12]
 800b160:	059a      	lsls	r2, r3, #22
 800b162:	d402      	bmi.n	800b16a <_vfiprintf_r+0x32>
 800b164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b166:	f7fe fec4 	bl	8009ef2 <__retarget_lock_acquire_recursive>
 800b16a:	89ab      	ldrh	r3, [r5, #12]
 800b16c:	071b      	lsls	r3, r3, #28
 800b16e:	d501      	bpl.n	800b174 <_vfiprintf_r+0x3c>
 800b170:	692b      	ldr	r3, [r5, #16]
 800b172:	b9eb      	cbnz	r3, 800b1b0 <_vfiprintf_r+0x78>
 800b174:	4629      	mov	r1, r5
 800b176:	4630      	mov	r0, r6
 800b178:	f7fd faa8 	bl	80086cc <__swsetup_r>
 800b17c:	b1c0      	cbz	r0, 800b1b0 <_vfiprintf_r+0x78>
 800b17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b180:	07dc      	lsls	r4, r3, #31
 800b182:	d50e      	bpl.n	800b1a2 <_vfiprintf_r+0x6a>
 800b184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b188:	b01d      	add	sp, #116	; 0x74
 800b18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18e:	4b7b      	ldr	r3, [pc, #492]	; (800b37c <_vfiprintf_r+0x244>)
 800b190:	429d      	cmp	r5, r3
 800b192:	d101      	bne.n	800b198 <_vfiprintf_r+0x60>
 800b194:	68b5      	ldr	r5, [r6, #8]
 800b196:	e7df      	b.n	800b158 <_vfiprintf_r+0x20>
 800b198:	4b79      	ldr	r3, [pc, #484]	; (800b380 <_vfiprintf_r+0x248>)
 800b19a:	429d      	cmp	r5, r3
 800b19c:	bf08      	it	eq
 800b19e:	68f5      	ldreq	r5, [r6, #12]
 800b1a0:	e7da      	b.n	800b158 <_vfiprintf_r+0x20>
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	0598      	lsls	r0, r3, #22
 800b1a6:	d4ed      	bmi.n	800b184 <_vfiprintf_r+0x4c>
 800b1a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1aa:	f7fe fea3 	bl	8009ef4 <__retarget_lock_release_recursive>
 800b1ae:	e7e9      	b.n	800b184 <_vfiprintf_r+0x4c>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b4:	2320      	movs	r3, #32
 800b1b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1be:	2330      	movs	r3, #48	; 0x30
 800b1c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b384 <_vfiprintf_r+0x24c>
 800b1c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c8:	f04f 0901 	mov.w	r9, #1
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	469a      	mov	sl, r3
 800b1d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1d4:	b10a      	cbz	r2, 800b1da <_vfiprintf_r+0xa2>
 800b1d6:	2a25      	cmp	r2, #37	; 0x25
 800b1d8:	d1f9      	bne.n	800b1ce <_vfiprintf_r+0x96>
 800b1da:	ebba 0b04 	subs.w	fp, sl, r4
 800b1de:	d00b      	beq.n	800b1f8 <_vfiprintf_r+0xc0>
 800b1e0:	465b      	mov	r3, fp
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f7ff ff94 	bl	800b114 <__sfputs_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	f000 80aa 	beq.w	800b346 <_vfiprintf_r+0x20e>
 800b1f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1f4:	445a      	add	r2, fp
 800b1f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 80a2 	beq.w	800b346 <_vfiprintf_r+0x20e>
 800b202:	2300      	movs	r3, #0
 800b204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b20c:	f10a 0a01 	add.w	sl, sl, #1
 800b210:	9304      	str	r3, [sp, #16]
 800b212:	9307      	str	r3, [sp, #28]
 800b214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b218:	931a      	str	r3, [sp, #104]	; 0x68
 800b21a:	4654      	mov	r4, sl
 800b21c:	2205      	movs	r2, #5
 800b21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b222:	4858      	ldr	r0, [pc, #352]	; (800b384 <_vfiprintf_r+0x24c>)
 800b224:	f7f4 ffdc 	bl	80001e0 <memchr>
 800b228:	9a04      	ldr	r2, [sp, #16]
 800b22a:	b9d8      	cbnz	r0, 800b264 <_vfiprintf_r+0x12c>
 800b22c:	06d1      	lsls	r1, r2, #27
 800b22e:	bf44      	itt	mi
 800b230:	2320      	movmi	r3, #32
 800b232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b236:	0713      	lsls	r3, r2, #28
 800b238:	bf44      	itt	mi
 800b23a:	232b      	movmi	r3, #43	; 0x2b
 800b23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b240:	f89a 3000 	ldrb.w	r3, [sl]
 800b244:	2b2a      	cmp	r3, #42	; 0x2a
 800b246:	d015      	beq.n	800b274 <_vfiprintf_r+0x13c>
 800b248:	9a07      	ldr	r2, [sp, #28]
 800b24a:	4654      	mov	r4, sl
 800b24c:	2000      	movs	r0, #0
 800b24e:	f04f 0c0a 	mov.w	ip, #10
 800b252:	4621      	mov	r1, r4
 800b254:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b258:	3b30      	subs	r3, #48	; 0x30
 800b25a:	2b09      	cmp	r3, #9
 800b25c:	d94e      	bls.n	800b2fc <_vfiprintf_r+0x1c4>
 800b25e:	b1b0      	cbz	r0, 800b28e <_vfiprintf_r+0x156>
 800b260:	9207      	str	r2, [sp, #28]
 800b262:	e014      	b.n	800b28e <_vfiprintf_r+0x156>
 800b264:	eba0 0308 	sub.w	r3, r0, r8
 800b268:	fa09 f303 	lsl.w	r3, r9, r3
 800b26c:	4313      	orrs	r3, r2
 800b26e:	9304      	str	r3, [sp, #16]
 800b270:	46a2      	mov	sl, r4
 800b272:	e7d2      	b.n	800b21a <_vfiprintf_r+0xe2>
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	1d19      	adds	r1, r3, #4
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	9103      	str	r1, [sp, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	bfbb      	ittet	lt
 800b280:	425b      	neglt	r3, r3
 800b282:	f042 0202 	orrlt.w	r2, r2, #2
 800b286:	9307      	strge	r3, [sp, #28]
 800b288:	9307      	strlt	r3, [sp, #28]
 800b28a:	bfb8      	it	lt
 800b28c:	9204      	strlt	r2, [sp, #16]
 800b28e:	7823      	ldrb	r3, [r4, #0]
 800b290:	2b2e      	cmp	r3, #46	; 0x2e
 800b292:	d10c      	bne.n	800b2ae <_vfiprintf_r+0x176>
 800b294:	7863      	ldrb	r3, [r4, #1]
 800b296:	2b2a      	cmp	r3, #42	; 0x2a
 800b298:	d135      	bne.n	800b306 <_vfiprintf_r+0x1ce>
 800b29a:	9b03      	ldr	r3, [sp, #12]
 800b29c:	1d1a      	adds	r2, r3, #4
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	9203      	str	r2, [sp, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	bfb8      	it	lt
 800b2a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b2aa:	3402      	adds	r4, #2
 800b2ac:	9305      	str	r3, [sp, #20]
 800b2ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b394 <_vfiprintf_r+0x25c>
 800b2b2:	7821      	ldrb	r1, [r4, #0]
 800b2b4:	2203      	movs	r2, #3
 800b2b6:	4650      	mov	r0, sl
 800b2b8:	f7f4 ff92 	bl	80001e0 <memchr>
 800b2bc:	b140      	cbz	r0, 800b2d0 <_vfiprintf_r+0x198>
 800b2be:	2340      	movs	r3, #64	; 0x40
 800b2c0:	eba0 000a 	sub.w	r0, r0, sl
 800b2c4:	fa03 f000 	lsl.w	r0, r3, r0
 800b2c8:	9b04      	ldr	r3, [sp, #16]
 800b2ca:	4303      	orrs	r3, r0
 800b2cc:	3401      	adds	r4, #1
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d4:	482c      	ldr	r0, [pc, #176]	; (800b388 <_vfiprintf_r+0x250>)
 800b2d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2da:	2206      	movs	r2, #6
 800b2dc:	f7f4 ff80 	bl	80001e0 <memchr>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d03f      	beq.n	800b364 <_vfiprintf_r+0x22c>
 800b2e4:	4b29      	ldr	r3, [pc, #164]	; (800b38c <_vfiprintf_r+0x254>)
 800b2e6:	bb1b      	cbnz	r3, 800b330 <_vfiprintf_r+0x1f8>
 800b2e8:	9b03      	ldr	r3, [sp, #12]
 800b2ea:	3307      	adds	r3, #7
 800b2ec:	f023 0307 	bic.w	r3, r3, #7
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	9303      	str	r3, [sp, #12]
 800b2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f6:	443b      	add	r3, r7
 800b2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2fa:	e767      	b.n	800b1cc <_vfiprintf_r+0x94>
 800b2fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b300:	460c      	mov	r4, r1
 800b302:	2001      	movs	r0, #1
 800b304:	e7a5      	b.n	800b252 <_vfiprintf_r+0x11a>
 800b306:	2300      	movs	r3, #0
 800b308:	3401      	adds	r4, #1
 800b30a:	9305      	str	r3, [sp, #20]
 800b30c:	4619      	mov	r1, r3
 800b30e:	f04f 0c0a 	mov.w	ip, #10
 800b312:	4620      	mov	r0, r4
 800b314:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b318:	3a30      	subs	r2, #48	; 0x30
 800b31a:	2a09      	cmp	r2, #9
 800b31c:	d903      	bls.n	800b326 <_vfiprintf_r+0x1ee>
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0c5      	beq.n	800b2ae <_vfiprintf_r+0x176>
 800b322:	9105      	str	r1, [sp, #20]
 800b324:	e7c3      	b.n	800b2ae <_vfiprintf_r+0x176>
 800b326:	fb0c 2101 	mla	r1, ip, r1, r2
 800b32a:	4604      	mov	r4, r0
 800b32c:	2301      	movs	r3, #1
 800b32e:	e7f0      	b.n	800b312 <_vfiprintf_r+0x1da>
 800b330:	ab03      	add	r3, sp, #12
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	462a      	mov	r2, r5
 800b336:	4b16      	ldr	r3, [pc, #88]	; (800b390 <_vfiprintf_r+0x258>)
 800b338:	a904      	add	r1, sp, #16
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7fb fc52 	bl	8006be4 <_printf_float>
 800b340:	4607      	mov	r7, r0
 800b342:	1c78      	adds	r0, r7, #1
 800b344:	d1d6      	bne.n	800b2f4 <_vfiprintf_r+0x1bc>
 800b346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b348:	07d9      	lsls	r1, r3, #31
 800b34a:	d405      	bmi.n	800b358 <_vfiprintf_r+0x220>
 800b34c:	89ab      	ldrh	r3, [r5, #12]
 800b34e:	059a      	lsls	r2, r3, #22
 800b350:	d402      	bmi.n	800b358 <_vfiprintf_r+0x220>
 800b352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b354:	f7fe fdce 	bl	8009ef4 <__retarget_lock_release_recursive>
 800b358:	89ab      	ldrh	r3, [r5, #12]
 800b35a:	065b      	lsls	r3, r3, #25
 800b35c:	f53f af12 	bmi.w	800b184 <_vfiprintf_r+0x4c>
 800b360:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b362:	e711      	b.n	800b188 <_vfiprintf_r+0x50>
 800b364:	ab03      	add	r3, sp, #12
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	462a      	mov	r2, r5
 800b36a:	4b09      	ldr	r3, [pc, #36]	; (800b390 <_vfiprintf_r+0x258>)
 800b36c:	a904      	add	r1, sp, #16
 800b36e:	4630      	mov	r0, r6
 800b370:	f7fb fedc 	bl	800712c <_printf_i>
 800b374:	e7e4      	b.n	800b340 <_vfiprintf_r+0x208>
 800b376:	bf00      	nop
 800b378:	0800b77c 	.word	0x0800b77c
 800b37c:	0800b79c 	.word	0x0800b79c
 800b380:	0800b75c 	.word	0x0800b75c
 800b384:	0800b994 	.word	0x0800b994
 800b388:	0800b99e 	.word	0x0800b99e
 800b38c:	08006be5 	.word	0x08006be5
 800b390:	0800b115 	.word	0x0800b115
 800b394:	0800b99a 	.word	0x0800b99a

0800b398 <_read_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4d07      	ldr	r5, [pc, #28]	; (800b3b8 <_read_r+0x20>)
 800b39c:	4604      	mov	r4, r0
 800b39e:	4608      	mov	r0, r1
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	602a      	str	r2, [r5, #0]
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	f7f6 fc34 	bl	8001c14 <_read>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_read_r+0x1e>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_read_r+0x1e>
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	20000404 	.word	0x20000404

0800b3bc <abort>:
 800b3bc:	b508      	push	{r3, lr}
 800b3be:	2006      	movs	r0, #6
 800b3c0:	f000 f834 	bl	800b42c <raise>
 800b3c4:	2001      	movs	r0, #1
 800b3c6:	f7f6 fc1b 	bl	8001c00 <_exit>

0800b3ca <_malloc_usable_size_r>:
 800b3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ce:	1f18      	subs	r0, r3, #4
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	bfbc      	itt	lt
 800b3d4:	580b      	ldrlt	r3, [r1, r0]
 800b3d6:	18c0      	addlt	r0, r0, r3
 800b3d8:	4770      	bx	lr

0800b3da <_raise_r>:
 800b3da:	291f      	cmp	r1, #31
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4604      	mov	r4, r0
 800b3e0:	460d      	mov	r5, r1
 800b3e2:	d904      	bls.n	800b3ee <_raise_r+0x14>
 800b3e4:	2316      	movs	r3, #22
 800b3e6:	6003      	str	r3, [r0, #0]
 800b3e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3ec:	bd38      	pop	{r3, r4, r5, pc}
 800b3ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b3f0:	b112      	cbz	r2, 800b3f8 <_raise_r+0x1e>
 800b3f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3f6:	b94b      	cbnz	r3, 800b40c <_raise_r+0x32>
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f000 f831 	bl	800b460 <_getpid_r>
 800b3fe:	462a      	mov	r2, r5
 800b400:	4601      	mov	r1, r0
 800b402:	4620      	mov	r0, r4
 800b404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b408:	f000 b818 	b.w	800b43c <_kill_r>
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d00a      	beq.n	800b426 <_raise_r+0x4c>
 800b410:	1c59      	adds	r1, r3, #1
 800b412:	d103      	bne.n	800b41c <_raise_r+0x42>
 800b414:	2316      	movs	r3, #22
 800b416:	6003      	str	r3, [r0, #0]
 800b418:	2001      	movs	r0, #1
 800b41a:	e7e7      	b.n	800b3ec <_raise_r+0x12>
 800b41c:	2400      	movs	r4, #0
 800b41e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b422:	4628      	mov	r0, r5
 800b424:	4798      	blx	r3
 800b426:	2000      	movs	r0, #0
 800b428:	e7e0      	b.n	800b3ec <_raise_r+0x12>
	...

0800b42c <raise>:
 800b42c:	4b02      	ldr	r3, [pc, #8]	; (800b438 <raise+0xc>)
 800b42e:	4601      	mov	r1, r0
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	f7ff bfd2 	b.w	800b3da <_raise_r>
 800b436:	bf00      	nop
 800b438:	2000000c 	.word	0x2000000c

0800b43c <_kill_r>:
 800b43c:	b538      	push	{r3, r4, r5, lr}
 800b43e:	4d07      	ldr	r5, [pc, #28]	; (800b45c <_kill_r+0x20>)
 800b440:	2300      	movs	r3, #0
 800b442:	4604      	mov	r4, r0
 800b444:	4608      	mov	r0, r1
 800b446:	4611      	mov	r1, r2
 800b448:	602b      	str	r3, [r5, #0]
 800b44a:	f7f6 fbc9 	bl	8001be0 <_kill>
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	d102      	bne.n	800b458 <_kill_r+0x1c>
 800b452:	682b      	ldr	r3, [r5, #0]
 800b454:	b103      	cbz	r3, 800b458 <_kill_r+0x1c>
 800b456:	6023      	str	r3, [r4, #0]
 800b458:	bd38      	pop	{r3, r4, r5, pc}
 800b45a:	bf00      	nop
 800b45c:	20000404 	.word	0x20000404

0800b460 <_getpid_r>:
 800b460:	f7f6 bbb6 	b.w	8001bd0 <_getpid>

0800b464 <_init>:
 800b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b466:	bf00      	nop
 800b468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46a:	bc08      	pop	{r3}
 800b46c:	469e      	mov	lr, r3
 800b46e:	4770      	bx	lr

0800b470 <_fini>:
 800b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b472:	bf00      	nop
 800b474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b476:	bc08      	pop	{r3}
 800b478:	469e      	mov	lr, r3
 800b47a:	4770      	bx	lr
