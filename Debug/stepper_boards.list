
stepper_boards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800bb40  0800bb40  0001bb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c07c  0800c07c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c07c  0800c07c  0001c07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c084  0800c084  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c088  0800c088  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c08c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001e0  0800c26c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800c26c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162c6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c3  00000000  00000000  000364d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00038da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248a9  00000000  00000000  0003b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001503a  00000000  00000000  0005fcd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4b18  00000000  00000000  00074d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159823  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b90  00000000  00000000  00159874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb28 	.word	0x0800bb28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800bb28 	.word	0x0800bb28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001000:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001004:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001010:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001014:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001018:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001020:	e000      	b.n	8001024 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001022:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001024:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800102e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffc9 	bl	8000ff8 <ITM_SendChar>
	for(int i=0; i<len; i++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
	}
	return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox;

CAN_RxHeaderTypeDef RxHeader;
CAN_TxHeaderTypeDef TxHeader;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800108c:	2100      	movs	r1, #0
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f002 fced 	bl	8003a6e <HAL_CAN_GetRxMessage>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200003ac 	.word	0x200003ac
 80010a0:	200003b8 	.word	0x200003b8
 80010a4:	00000000 	.word	0x00000000

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b08e      	sub	sp, #56	; 0x38
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fece 	bl	8001e4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f91f 	bl	80012f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f000 fb51 	bl	800175c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ba:	f000 fb1f 	bl	80016fc <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010be:	f000 facf 	bl	8001660 <MX_TIM2_Init>
  MX_TIM1_Init();
 80010c2:	f000 fa21 	bl	8001508 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010c6:	f000 f967 	bl	8001398 <MX_ADC1_Init>
  MX_CAN1_Init();
 80010ca:	f000 f9c9 	bl	8001460 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // Debug
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	210f      	movs	r1, #15
 80010d2:	487b      	ldr	r0, [pc, #492]	; (80012c0 <main+0x218>)
 80010d4:	f003 fad6 	bl	8004684 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2103      	movs	r1, #3
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e0:	f003 fad0 	bl	8004684 <HAL_GPIO_WritePin>

  // Stepper 1
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2104      	movs	r1, #4
 80010e8:	4876      	ldr	r0, [pc, #472]	; (80012c4 <main+0x21c>)
 80010ea:	f003 facb 	bl	8004684 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin | STPR_EN_1_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80010f4:	4872      	ldr	r0, [pc, #456]	; (80012c0 <main+0x218>)
 80010f6:	f003 fac5 	bl	8004684 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STPR_PWM_1_GPIO_Port, STPR_PWM_1_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f003 fabe 	bl	8004684 <HAL_GPIO_WritePin>

  // Stepper 2
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_PWM_2_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f640 0105 	movw	r1, #2053	; 0x805
 800110e:	486e      	ldr	r0, [pc, #440]	; (80012c8 <main+0x220>)
 8001110:	f003 fab8 	bl	8004684 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, STPR_EN_2_Pin, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111a:	486b      	ldr	r0, [pc, #428]	; (80012c8 <main+0x220>)
 800111c:	f003 fab2 	bl	8004684 <HAL_GPIO_WritePin>

  // ADC Calibration
  HAL_StatusTypeDef ret;
  ret = HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001120:	217f      	movs	r1, #127	; 0x7f
 8001122:	486a      	ldr	r0, [pc, #424]	; (80012cc <main+0x224>)
 8001124:	f002 f96a 	bl	80033fc <HAL_ADCEx_Calibration_Start>
 8001128:	4603      	mov	r3, r0
 800112a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(ret != HAL_OK)
 800112e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <main+0x92>
  {
	  Error_Handler();
 8001136:	f000 fbd3 	bl	80018e0 <Error_Handler>
  }

  uint8_t dataT[20] = "Hello from STM32!\n\r";
 800113a:	4b65      	ldr	r3, [pc, #404]	; (80012d0 <main+0x228>)
 800113c:	f107 0408 	add.w	r4, r7, #8
 8001140:	461d      	mov	r5, r3
 8001142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	6023      	str	r3, [r4, #0]
  uint8_t dataR[1] = "";
 800114a:	2300      	movs	r3, #0
 800114c:	713b      	strb	r3, [r7, #4]

  TxHeader.DLC = 2; // Length of data to send in bytes
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <main+0x22c>)
 8001150:	2202      	movs	r2, #2
 8001152:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0; // For basic CAN protocol
 8001154:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <main+0x22c>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 800115a:	4b5e      	ldr	r3, [pc, #376]	; (80012d4 <main+0x22c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA; // transfering data of remote frame
 8001160:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <main+0x22c>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446; // ID of this CAN peripheral
 8001166:	4b5b      	ldr	r3, [pc, #364]	; (80012d4 <main+0x22c>)
 8001168:	f240 4246 	movw	r2, #1094	; 0x446
 800116c:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800116e:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <main+0x22c>)
 8001170:	2200      	movs	r2, #0
 8001172:	751a      	strb	r2, [r3, #20]

  TxData[0] = 10;
 8001174:	4b58      	ldr	r3, [pc, #352]	; (80012d8 <main+0x230>)
 8001176:	220a      	movs	r2, #10
 8001178:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t previous_t = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t current_t = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t delay = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t thermistor_reading = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30

  GPIO_PinState BRAKE;
  GPIO_PinState FAULT_1;
  GPIO_PinState FAULT_2;

  HAL_UART_Transmit(&huart1, dataT, 14, HAL_MAX_DELAY);
 800118a:	f107 0108 	add.w	r1, r7, #8
 800118e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001192:	220e      	movs	r2, #14
 8001194:	4851      	ldr	r0, [pc, #324]	; (80012dc <main+0x234>)
 8001196:	f005 fb6f 	bl	8006878 <HAL_UART_Transmit>

  while (1)
  {
	  current_t = HAL_GetTick();
 800119a:	f000 fec1 	bl	8001f20 <HAL_GetTick>
 800119e:	62b8      	str	r0, [r7, #40]	; 0x28

	  if(current_t - previous_t >= delay){
 80011a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d812      	bhi.n	80011d2 <main+0x12a>
		  previous_t = current_t;
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
		  HAL_GPIO_WritePin(STPR_PWM_1_GPIO_Port, STPR_PWM_1_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ba:	f003 fa63 	bl	8004684 <HAL_GPIO_WritePin>

		  HAL_Delay(delay);
 80011be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011c0:	f000 feba 	bl	8001f38 <HAL_Delay>

		  HAL_GPIO_WritePin(STPR_PWM_1_GPIO_Port, STPR_PWM_1_Pin, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ce:	f003 fa59 	bl	8004684 <HAL_GPIO_WritePin>
	  }

	  ID_0 = HAL_GPIO_ReadPin(GPIOB, ID_0_Pin);
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	483c      	ldr	r0, [pc, #240]	; (80012c8 <main+0x220>)
 80011d8:	f003 fa3c 	bl	8004654 <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  ID_1 = HAL_GPIO_ReadPin(GPIOB, ID_1_Pin);
 80011e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e6:	4838      	ldr	r0, [pc, #224]	; (80012c8 <main+0x220>)
 80011e8:	f003 fa34 	bl	8004654 <HAL_GPIO_ReadPin>
 80011ec:	4603      	mov	r3, r0
 80011ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  ID_2 = HAL_GPIO_ReadPin(GPIOB, ID_2_Pin);
 80011f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f6:	4834      	ldr	r0, [pc, #208]	; (80012c8 <main+0x220>)
 80011f8:	f003 fa2c 	bl	8004654 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  ID_3 = HAL_GPIO_ReadPin(GPIOB, ID_3_Pin);
 8001202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001206:	4830      	ldr	r0, [pc, #192]	; (80012c8 <main+0x220>)
 8001208:	f003 fa24 	bl	8004654 <HAL_GPIO_ReadPin>
 800120c:	4603      	mov	r3, r0
 800120e:	f887 3020 	strb.w	r3, [r7, #32]

	  BRAKE = HAL_GPIO_ReadPin(GPIOB, BRAKE_IN_Pin);
 8001212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001216:	482c      	ldr	r0, [pc, #176]	; (80012c8 <main+0x220>)
 8001218:	f003 fa1c 	bl	8004654 <HAL_GPIO_ReadPin>
 800121c:	4603      	mov	r3, r0
 800121e:	77fb      	strb	r3, [r7, #31]
	  FAULT_1 = HAL_GPIO_ReadPin(GPIOC, STPR_FLT_1_Pin);
 8001220:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001224:	4826      	ldr	r0, [pc, #152]	; (80012c0 <main+0x218>)
 8001226:	f003 fa15 	bl	8004654 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	77bb      	strb	r3, [r7, #30]
	  FAULT_2 = HAL_GPIO_ReadPin(GPIOB, STPR_FLT_2_Pin);
 800122e:	2102      	movs	r1, #2
 8001230:	4825      	ldr	r0, [pc, #148]	; (80012c8 <main+0x220>)
 8001232:	f003 fa0f 	bl	8004654 <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	777b      	strb	r3, [r7, #29]
	  printf("BRAKE: %d\n", BRAKE);
	  printf("FAULT 1: %d\n", FAULT_1);
	  printf("FAULT 2: %d\n", FAULT_2);
	  */

	  HAL_ADC_Start(&hadc1);
 800123a:	4824      	ldr	r0, [pc, #144]	; (80012cc <main+0x224>)
 800123c:	f001 f9fe 	bl	800263c <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001240:	2164      	movs	r1, #100	; 0x64
 8001242:	4822      	ldr	r0, [pc, #136]	; (80012cc <main+0x224>)
 8001244:	f001 fa90 	bl	8002768 <HAL_ADC_PollForConversion>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d103      	bne.n	8001256 <main+0x1ae>
	  {
		  thermistor_reading = HAL_ADC_GetValue(&hadc1);
 800124e:	481f      	ldr	r0, [pc, #124]	; (80012cc <main+0x224>)
 8001250:	f001 fb19 	bl	8002886 <HAL_ADC_GetValue>
 8001254:	6338      	str	r0, [r7, #48]	; 0x30
	  }
	  HAL_ADC_Stop(&hadc1);
 8001256:	481d      	ldr	r0, [pc, #116]	; (80012cc <main+0x224>)
 8001258:	f001 fa53 	bl	8002702 <HAL_ADC_Stop>

	  printf("Thermistor Measurement: %u\n", thermistor_reading);
 800125c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800125e:	4820      	ldr	r0, [pc, #128]	; (80012e0 <main+0x238>)
 8001260:	f006 fe54 	bl	8007f0c <iprintf>
	  printf("Thermistor Voltage: %f\n", (float) thermistor_reading*3.3/4096);
 8001264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800126e:	ee17 0a90 	vmov	r0, s15
 8001272:	f7ff f969 	bl	8000548 <__aeabi_f2d>
 8001276:	a310      	add	r3, pc, #64	; (adr r3, 80012b8 <main+0x210>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff f9bc 	bl	80005f8 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <main+0x23c>)
 800128e:	f7ff fadd 	bl	800084c <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4814      	ldr	r0, [pc, #80]	; (80012e8 <main+0x240>)
 8001298:	f006 fe38 	bl	8007f0c <iprintf>
	//	  dataR[0] = dataR[0] + 1;
	//	  HAL_UART_Transmit(&huart1, dataR, 1, HAL_MAX_DELAY);
	 // }


	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <main+0x244>)
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <main+0x230>)
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <main+0x22c>)
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <main+0x248>)
 80012a4:	f002 fb13 	bl	80038ce <HAL_CAN_AddTxMessage>

	  HAL_CAN_Start(&hcan1);
 80012a8:	4811      	ldr	r0, [pc, #68]	; (80012f0 <main+0x248>)
 80012aa:	f002 facc 	bl	8003846 <HAL_CAN_Start>

	  // Activate notification when data is received
	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012ae:	2102      	movs	r1, #2
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <main+0x248>)
 80012b2:	f002 fcee 	bl	8003c92 <HAL_CAN_ActivateNotification>
	  current_t = HAL_GetTick();
 80012b6:	e770      	b.n	800119a <main+0xf2>
 80012b8:	66666666 	.word	0x66666666
 80012bc:	400a6666 	.word	0x400a6666
 80012c0:	48000800 	.word	0x48000800
 80012c4:	48000c00 	.word	0x48000c00
 80012c8:	48000400 	.word	0x48000400
 80012cc:	200001fc 	.word	0x200001fc
 80012d0:	0800bb74 	.word	0x0800bb74
 80012d4:	200003d4 	.word	0x200003d4
 80012d8:	200003a4 	.word	0x200003a4
 80012dc:	20000320 	.word	0x20000320
 80012e0:	0800bb40 	.word	0x0800bb40
 80012e4:	40b00000 	.word	0x40b00000
 80012e8:	0800bb5c 	.word	0x0800bb5c
 80012ec:	200003b4 	.word	0x200003b4
 80012f0:	20000260 	.word	0x20000260

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b096      	sub	sp, #88	; 0x58
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2244      	movs	r2, #68	; 0x44
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f005 ff80 	bl	8007208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001316:	f44f 7000 	mov.w	r0, #512	; 0x200
 800131a:	f003 f9d9 	bl	80046d0 <HAL_PWREx_ControlVoltageScaling>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001324:	f000 fadc 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001328:	2310      	movs	r3, #16
 800132a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001334:	2360      	movs	r3, #96	; 0x60
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800133c:	2301      	movs	r3, #1
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001344:	2328      	movs	r3, #40	; 0x28
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001348:	2307      	movs	r3, #7
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001350:	2302      	movs	r3, #2
 8001352:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4618      	mov	r0, r3
 800135a:	f003 fa0f 	bl	800477c <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001364:	f000 fabc 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2303      	movs	r3, #3
 800136e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800137c:	463b      	mov	r3, r7
 800137e:	2104      	movs	r1, #4
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fe0f 	bl	8004fa4 <HAL_RCC_ClockConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800138c:	f000 faa8 	bl	80018e0 <Error_Handler>
  }
}
 8001390:	bf00      	nop
 8001392:	3758      	adds	r7, #88	; 0x58
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
 80013ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013b0:	4a29      	ldr	r2, [pc, #164]	; (8001458 <MX_ADC1_Init+0xc0>)
 80013b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013b4:	4b27      	ldr	r3, [pc, #156]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013cc:	4b21      	ldr	r3, [pc, #132]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013ce:	2204      	movs	r2, #4
 80013d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013da:	2201      	movs	r2, #1
 80013dc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_ADC1_Init+0xbc>)
 8001402:	2200      	movs	r2, #0
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_ADC1_Init+0xbc>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800140e:	4811      	ldr	r0, [pc, #68]	; (8001454 <MX_ADC1_Init+0xbc>)
 8001410:	f000 ffcc 	bl	80023ac <HAL_ADC_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800141a:	f000 fa61 	bl	80018e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_ADC1_Init+0xc4>)
 8001420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001422:	2306      	movs	r3, #6
 8001424:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800142a:	237f      	movs	r3, #127	; 0x7f
 800142c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800142e:	2304      	movs	r3, #4
 8001430:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	; (8001454 <MX_ADC1_Init+0xbc>)
 800143c:	f001 fa30 	bl	80028a0 <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001446:	f000 fa4b 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200001fc 	.word	0x200001fc
 8001458:	50040000 	.word	0x50040000
 800145c:	c7520000 	.word	0xc7520000

08001460 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <MX_CAN1_Init+0xa0>)
 8001468:	4a26      	ldr	r2, [pc, #152]	; (8001504 <MX_CAN1_Init+0xa4>)
 800146a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <MX_CAN1_Init+0xa0>)
 800146e:	2220      	movs	r2, #32
 8001470:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <MX_CAN1_Init+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_CAN1_Init+0xa0>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_CAN1_Init+0xa0>)
 8001480:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001484:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001486:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_CAN1_Init+0xa0>)
 8001488:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800148c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800148e:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <MX_CAN1_Init+0xa0>)
 8001490:	2200      	movs	r2, #0
 8001492:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_CAN1_Init+0xa0>)
 8001496:	2200      	movs	r2, #0
 8001498:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <MX_CAN1_Init+0xa0>)
 800149c:	2200      	movs	r2, #0
 800149e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_CAN1_Init+0xa0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_CAN1_Init+0xa0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_CAN1_Init+0xa0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014b2:	4813      	ldr	r0, [pc, #76]	; (8001500 <MX_CAN1_Init+0xa0>)
 80014b4:	f002 f802 	bl	80034bc <HAL_CAN_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80014be:	f000 fa0f 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80014c2:	2301      	movs	r3, #1
 80014c4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;		// Specify filter bank to use
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; //Incoming data is saved here
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 80014ce:	f242 0360 	movw	r3, #8288	; 0x2060
 80014d2:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh= 0x103<<5;
 80014d8:	f242 0360 	movw	r3, #8288	; 0x2060
 80014dc:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80014ee:	463b      	mov	r3, r7
 80014f0:	4619      	mov	r1, r3
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <MX_CAN1_Init+0xa0>)
 80014f4:	f002 f8dd 	bl	80036b2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3728      	adds	r7, #40	; 0x28
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000260 	.word	0x20000260
 8001504:	40006400 	.word	0x40006400

08001508 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b09a      	sub	sp, #104	; 0x68
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	222c      	movs	r2, #44	; 0x2c
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f005 fe60 	bl	8007208 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <MX_TIM1_Init+0x150>)
 800154a:	4a44      	ldr	r2, [pc, #272]	; (800165c <MX_TIM1_Init+0x154>)
 800154c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <MX_TIM1_Init+0x150>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <MX_TIM1_Init+0x150>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800155a:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <MX_TIM1_Init+0x150>)
 800155c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001560:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	4b3d      	ldr	r3, [pc, #244]	; (8001658 <MX_TIM1_Init+0x150>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001568:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <MX_TIM1_Init+0x150>)
 800156a:	2200      	movs	r2, #0
 800156c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156e:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <MX_TIM1_Init+0x150>)
 8001570:	2200      	movs	r2, #0
 8001572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001574:	4838      	ldr	r0, [pc, #224]	; (8001658 <MX_TIM1_Init+0x150>)
 8001576:	f004 fa41 	bl	80059fc <HAL_TIM_Base_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001580:	f000 f9ae 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001588:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800158e:	4619      	mov	r1, r3
 8001590:	4831      	ldr	r0, [pc, #196]	; (8001658 <MX_TIM1_Init+0x150>)
 8001592:	f004 fbff 	bl	8005d94 <HAL_TIM_ConfigClockSource>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800159c:	f000 f9a0 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015a0:	482d      	ldr	r0, [pc, #180]	; (8001658 <MX_TIM1_Init+0x150>)
 80015a2:	f004 fa82 	bl	8005aaa <HAL_TIM_PWM_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80015ac:	f000 f998 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015c0:	4619      	mov	r1, r3
 80015c2:	4825      	ldr	r0, [pc, #148]	; (8001658 <MX_TIM1_Init+0x150>)
 80015c4:	f005 f82c 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015ce:	f000 f987 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d2:	2360      	movs	r3, #96	; 0x60
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015de:	2300      	movs	r3, #0
 80015e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	4818      	ldr	r0, [pc, #96]	; (8001658 <MX_TIM1_Init+0x150>)
 80015f8:	f004 fab8 	bl	8005b6c <HAL_TIM_PWM_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001602:	f000 f96d 	bl	80018e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001628:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM1_Init+0x150>)
 800163c:	f005 f856 	bl	80066ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001646:	f000 f94b 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800164a:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM1_Init+0x150>)
 800164c:	f000 fa56 	bl	8001afc <HAL_TIM_MspPostInit>

}
 8001650:	bf00      	nop
 8001652:	3768      	adds	r7, #104	; 0x68
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000288 	.word	0x20000288
 800165c:	40012c00 	.word	0x40012c00

08001660 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_TIM2_Init+0x98>)
 8001680:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001684:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_TIM2_Init+0x98>)
 8001688:	2200      	movs	r2, #0
 800168a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_TIM2_Init+0x98>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_TIM2_Init+0x98>)
 8001694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001698:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_TIM2_Init+0x98>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_TIM2_Init+0x98>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a6:	4814      	ldr	r0, [pc, #80]	; (80016f8 <MX_TIM2_Init+0x98>)
 80016a8:	f004 f9a8 	bl	80059fc <HAL_TIM_Base_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016b2:	f000 f915 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016bc:	f107 0310 	add.w	r3, r7, #16
 80016c0:	4619      	mov	r1, r3
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_TIM2_Init+0x98>)
 80016c4:	f004 fb66 	bl	8005d94 <HAL_TIM_ConfigClockSource>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016ce:	f000 f907 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <MX_TIM2_Init+0x98>)
 80016e0:	f004 ff9e 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80016ea:	f000 f8f9 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200002d4 	.word	0x200002d4

080016fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001702:	4a15      	ldr	r2, [pc, #84]	; (8001758 <MX_USART1_UART_Init+0x5c>)
 8001704:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001708:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800170c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_USART1_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_USART1_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_USART1_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_USART1_UART_Init+0x58>)
 8001740:	f005 f84c 	bl	80067dc <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800174a:	f000 f8c9 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000320 	.word	0x20000320
 8001758:	40013800 	.word	0x40013800

0800175c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001772:	4b57      	ldr	r3, [pc, #348]	; (80018d0 <MX_GPIO_Init+0x174>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	4a56      	ldr	r2, [pc, #344]	; (80018d0 <MX_GPIO_Init+0x174>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800177e:	4b54      	ldr	r3, [pc, #336]	; (80018d0 <MX_GPIO_Init+0x174>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	4b51      	ldr	r3, [pc, #324]	; (80018d0 <MX_GPIO_Init+0x174>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	4a50      	ldr	r2, [pc, #320]	; (80018d0 <MX_GPIO_Init+0x174>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001796:	4b4e      	ldr	r3, [pc, #312]	; (80018d0 <MX_GPIO_Init+0x174>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <MX_GPIO_Init+0x174>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a4a      	ldr	r2, [pc, #296]	; (80018d0 <MX_GPIO_Init+0x174>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <MX_GPIO_Init+0x174>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4b45      	ldr	r3, [pc, #276]	; (80018d0 <MX_GPIO_Init+0x174>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a44      	ldr	r2, [pc, #272]	; (80018d0 <MX_GPIO_Init+0x174>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <MX_GPIO_Init+0x174>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d2:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <MX_GPIO_Init+0x174>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a3e      	ldr	r2, [pc, #248]	; (80018d0 <MX_GPIO_Init+0x174>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <MX_GPIO_Init+0x174>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 80017ea:	2200      	movs	r2, #0
 80017ec:	f640 410f 	movw	r1, #3087	; 0xc0f
 80017f0:	4838      	ldr	r0, [pc, #224]	; (80018d4 <MX_GPIO_Init+0x178>)
 80017f2:	f002 ff47 	bl	8004684 <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f248 0103 	movw	r1, #32771	; 0x8003
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001800:	f002 ff40 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin|STPR_PWM_2_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f640 4105 	movw	r1, #3077	; 0xc05
 800180a:	4833      	ldr	r0, [pc, #204]	; (80018d8 <MX_GPIO_Init+0x17c>)
 800180c:	f002 ff3a 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	2104      	movs	r1, #4
 8001814:	4831      	ldr	r0, [pc, #196]	; (80018dc <MX_GPIO_Init+0x180>)
 8001816:	f002 ff35 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 800181a:	f640 430f 	movw	r3, #3087	; 0xc0f
 800181e:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	4828      	ldr	r0, [pc, #160]	; (80018d4 <MX_GPIO_Init+0x178>)
 8001834:	f002 fd94 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin STPR_PWM_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin;
 8001838:	f248 0303 	movw	r3, #32771	; 0x8003
 800183c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f002 fd84 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin STPR_PWM_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin|STPR_PWM_2_Pin;
 8001858:	f640 4305 	movw	r3, #3077	; 0xc05
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	4819      	ldr	r0, [pc, #100]	; (80018d8 <MX_GPIO_Init+0x17c>)
 8001872:	f002 fd75 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 8001876:	f24f 2302 	movw	r3, #61954	; 0xf202
 800187a:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4813      	ldr	r0, [pc, #76]	; (80018d8 <MX_GPIO_Init+0x17c>)
 800188c:	f002 fd68 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 8001890:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	480b      	ldr	r0, [pc, #44]	; (80018d4 <MX_GPIO_Init+0x178>)
 80018a6:	f002 fd5b 	bl	8004360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 80018aa:	2304      	movs	r3, #4
 80018ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ae:	2301      	movs	r3, #1
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4806      	ldr	r0, [pc, #24]	; (80018dc <MX_GPIO_Init+0x180>)
 80018c2:	f002 fd4d 	bl	8004360 <HAL_GPIO_Init>

}
 80018c6:	bf00      	nop
 80018c8:	3728      	adds	r7, #40	; 0x28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000800 	.word	0x48000800
 80018d8:	48000400 	.word	0x48000400
 80018dc:	48000c00 	.word	0x48000c00

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_MspInit+0x44>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_MspInit+0x44>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6613      	str	r3, [r2, #96]	; 0x60
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_MspInit+0x44>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_MspInit+0x44>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	4a08      	ldr	r2, [pc, #32]	; (8001930 <HAL_MspInit+0x44>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_MspInit+0x44>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0a0      	sub	sp, #128	; 0x80
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194c:	f107 0310 	add.w	r3, r7, #16
 8001950:	225c      	movs	r2, #92	; 0x5c
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f005 fc57 	bl	8007208 <memset>
  if(hadc->Instance==ADC1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <HAL_ADC_MspInit+0xc0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d142      	bne.n	80019ea <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001968:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800196a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800196e:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001970:	2301      	movs	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001974:	2301      	movs	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001978:	2310      	movs	r3, #16
 800197a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800197c:	2307      	movs	r3, #7
 800197e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001980:	2302      	movs	r3, #2
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001984:	2302      	movs	r3, #2
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	4618      	mov	r0, r3
 8001994:	f003 fd28 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800199e:	f7ff ff9f 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_ADC_MspInit+0xc4>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_ADC_MspInit+0xc4>)
 80019a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_ADC_MspInit+0xc4>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_ADC_MspInit+0xc4>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_ADC_MspInit+0xc4>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c6:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_ADC_MspInit+0xc4>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 80019d2:	2310      	movs	r3, #16
 80019d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d6:	2303      	movs	r3, #3
 80019d8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019e2:	4619      	mov	r1, r3
 80019e4:	4805      	ldr	r0, [pc, #20]	; (80019fc <HAL_ADC_MspInit+0xc8>)
 80019e6:	f002 fcbb 	bl	8004360 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019ea:	bf00      	nop
 80019ec:	3780      	adds	r7, #128	; 0x80
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	50040000 	.word	0x50040000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000800 	.word	0x48000800

08001a00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1c      	ldr	r2, [pc, #112]	; (8001a90 <HAL_CAN_MspInit+0x90>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d131      	bne.n	8001a86 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_CAN_MspInit+0x94>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <HAL_CAN_MspInit+0x94>)
 8001a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_CAN_MspInit+0x94>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_CAN_MspInit+0x94>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <HAL_CAN_MspInit+0x94>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_CAN_MspInit+0x94>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a64:	2309      	movs	r3, #9
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a72:	f002 fc75 	bl	8004360 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2014      	movs	r0, #20
 8001a7c:	f002 fc39 	bl	80042f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a80:	2014      	movs	r0, #20
 8001a82:	f002 fc52 	bl	800432a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40006400 	.word	0x40006400
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <HAL_TIM_Base_MspInit+0x5c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <HAL_TIM_Base_MspInit+0x60>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <HAL_TIM_Base_MspInit+0x60>)
 8001ab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_TIM_Base_MspInit+0x60>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ac2:	e010      	b.n	8001ae6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001acc:	d10b      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_TIM_Base_MspInit+0x60>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_TIM_Base_MspInit+0x60>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6593      	str	r3, [r2, #88]	; 0x58
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <HAL_TIM_Base_MspInit+0x60>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40012c00 	.word	0x40012c00
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <HAL_TIM_MspPostInit+0x68>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d11d      	bne.n	8001b5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_TIM_MspPostInit+0x6c>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	4a11      	ldr	r2, [pc, #68]	; (8001b68 <HAL_TIM_MspPostInit+0x6c>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_TIM_MspPostInit+0x6c>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 8001b36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b56:	f002 fc03 	bl	8004360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40012c00 	.word	0x40012c00
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0a0      	sub	sp, #128	; 0x80
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	225c      	movs	r2, #92	; 0x5c
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f005 fb3b 	bl	8007208 <memset>
  if(huart->Instance==USART1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <HAL_UART_MspInit+0xa8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d137      	bne.n	8001c0c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba4:	f107 0310 	add.w	r3, r7, #16
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 fc1d 	bl	80053e8 <HAL_RCCEx_PeriphCLKConfig>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bb4:	f7ff fe94 	bl	80018e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_UART_MspInit+0xac>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_UART_MspInit+0xac>)
 8001bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc2:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc4:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_UART_MspInit+0xac>)
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_UART_MspInit+0xac>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <HAL_UART_MspInit+0xac>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_UART_MspInit+0xac>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001be8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f002 fbaa 	bl	8004360 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c0c:	bf00      	nop
 8001c0e:	3780      	adds	r7, #128	; 0x80
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40013800 	.word	0x40013800
 8001c18:	40021000 	.word	0x40021000

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <NMI_Handler+0x4>

08001c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c26:	e7fe      	b.n	8001c26 <HardFault_Handler+0x4>

08001c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <MemManage_Handler+0x4>

08001c2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c32:	e7fe      	b.n	8001c32 <BusFault_Handler+0x4>

08001c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <UsageFault_Handler+0x4>

08001c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c68:	f000 f946 	bl	8001ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <CAN1_RX0_IRQHandler+0x10>)
 8001c76:	f002 f832 	bl	8003cde <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000260 	.word	0x20000260

08001c84 <_getpid>:
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	2301      	movs	r3, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_kill>:
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	f005 fa89 	bl	80071b4 <__errno>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2216      	movs	r2, #22
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <_exit>:
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ffe7 	bl	8001c94 <_kill>
 8001cc6:	e7fe      	b.n	8001cc6 <_exit+0x12>

08001cc8 <_read>:
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e00a      	b.n	8001cf0 <_read+0x28>
 8001cda:	f3af 8000 	nop.w
 8001cde:	4601      	mov	r1, r0
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	60ba      	str	r2, [r7, #8]
 8001ce6:	b2ca      	uxtb	r2, r1
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbf0      	blt.n	8001cda <_read+0x12>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_close>:
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <_fstat>:
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_isatty>:
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	2301      	movs	r3, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_lseek>:
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <_sbrk>:
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <_sbrk+0x5c>)
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <_sbrk+0x60>)
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <_sbrk+0x22>
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <_sbrk+0x64>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <_sbrk+0x68>)
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d207      	bcs.n	8001dac <_sbrk+0x40>
 8001d9c:	f005 fa0a 	bl	80071b4 <__errno>
 8001da0:	4603      	mov	r3, r0
 8001da2:	220c      	movs	r2, #12
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001daa:	e009      	b.n	8001dc0 <_sbrk+0x54>
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <_sbrk+0x64>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <_sbrk+0x64>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <_sbrk+0x64>)
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20010000 	.word	0x20010000
 8001dcc:	00000400 	.word	0x00000400
 8001dd0:	200003ec 	.word	0x200003ec
 8001dd4:	20000408 	.word	0x20000408

08001dd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <SystemInit+0x20>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <SystemInit+0x20>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <Reset_Handler>:
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e34 <LoopForever+0x2>
 8001e00:	f7ff ffea 	bl	8001dd8 <SystemInit>
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <LoopForever+0x6>)
 8001e06:	490d      	ldr	r1, [pc, #52]	; (8001e3c <LoopForever+0xa>)
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <LoopForever+0xe>)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:
 8001e0e:	58d4      	ldr	r4, [r2, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:
 8001e14:	18c4      	adds	r4, r0, r3
 8001e16:	428c      	cmp	r4, r1
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <LoopForever+0x12>)
 8001e1c:	4c0a      	ldr	r4, [pc, #40]	; (8001e48 <LoopForever+0x16>)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:
 8001e26:	42a2      	cmp	r2, r4
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>
 8001e2a:	f005 f9c9 	bl	80071c0 <__libc_init_array>
 8001e2e:	f7ff f93b 	bl	80010a8 <main>

08001e32 <LoopForever>:
 8001e32:	e7fe      	b.n	8001e32 <LoopForever>
 8001e34:	20010000 	.word	0x20010000
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	200001e0 	.word	0x200001e0
 8001e40:	0800c08c 	.word	0x0800c08c
 8001e44:	200001e0 	.word	0x200001e0
 8001e48:	20000404 	.word	0x20000404

08001e4c <ADC1_IRQHandler>:
 8001e4c:	e7fe      	b.n	8001e4c <ADC1_IRQHandler>

08001e4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f002 fa3f 	bl	80042dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e5e:	200f      	movs	r0, #15
 8001e60:	f000 f80e 	bl	8001e80 <HAL_InitTick>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	e001      	b.n	8001e74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e70:	f7ff fd3c 	bl	80018ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <HAL_InitTick+0x6c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d023      	beq.n	8001edc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <HAL_InitTick+0x70>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_InitTick+0x6c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fa4b 	bl	8004346 <HAL_SYSTICK_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d809      	bhi.n	8001ed0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec4:	f002 fa15 	bl	80042f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	; (8001ef4 <HAL_InitTick+0x74>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e007      	b.n	8001ee0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e004      	b.n	8001ee0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	e001      	b.n	8001ee0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	200003f0 	.word	0x200003f0

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	200003f0 	.word	0x200003f0

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff ffee 	bl	8001f20 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f50:	d005      	beq.n	8001f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_Delay+0x44>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5e:	bf00      	nop
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d8f7      	bhi.n	8001f60 <HAL_Delay+0x28>
  {
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000008 	.word	0x20000008

08001f80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	431a      	orrs	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	609a      	str	r2, [r3, #8]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3360      	adds	r3, #96	; 0x60
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <LL_ADC_SetOffset+0x44>)
 800200a:	4013      	ands	r3, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	4313      	orrs	r3, r2
 8002018:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	03fff000 	.word	0x03fff000

08002030 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3360      	adds	r3, #96	; 0x60
 800203e:	461a      	mov	r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3360      	adds	r3, #96	; 0x60
 800206c:	461a      	mov	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	431a      	orrs	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002086:	bf00      	nop
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3330      	adds	r3, #48	; 0x30
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	4413      	add	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	211f      	movs	r1, #31
 80020e4:	fa01 f303 	lsl.w	r3, r1, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	401a      	ands	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0e9b      	lsrs	r3, r3, #26
 80020f0:	f003 011f 	and.w	r1, r3, #31
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	431a      	orrs	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002104:	bf00      	nop
 8002106:	371c      	adds	r7, #28
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3314      	adds	r3, #20
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	0e5b      	lsrs	r3, r3, #25
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	0d1b      	lsrs	r3, r3, #20
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2107      	movs	r1, #7
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	401a      	ands	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	0d1b      	lsrs	r3, r3, #20
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	431a      	orrs	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0318 	and.w	r3, r3, #24
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800218c:	40d9      	lsrs	r1, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	400b      	ands	r3, r1
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	431a      	orrs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800219e:	bf00      	nop
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	0007ffff 	.word	0x0007ffff

080021b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6093      	str	r3, [r2, #8]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021e8:	d101      	bne.n	80021ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800220c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002210:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002238:	d101      	bne.n	800223e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800225c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002288:	f043 0202 	orr.w	r2, r3, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <LL_ADC_IsEnabled+0x18>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <LL_ADC_IsEnabled+0x1a>
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d101      	bne.n	80022da <LL_ADC_IsDisableOngoing+0x18>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <LL_ADC_IsDisableOngoing+0x1a>
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022fc:	f043 0204 	orr.w	r2, r3, #4
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002324:	f043 0210 	orr.w	r2, r3, #16
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b04      	cmp	r3, #4
 800234a:	d101      	bne.n	8002350 <LL_ADC_REG_IsConversionOngoing+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800236e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002372:	f043 0220 	orr.w	r2, r3, #32
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b08      	cmp	r3, #8
 8002398:	d101      	bne.n	800239e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e12c      	b.n	8002620 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff faad 	bl	8001934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fef1 	bl	80021d4 <LL_ADC_IsDeepPowerDownEnabled>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fed7 	bl	80021b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff0c 	bl	8002224 <LL_ADC_IsInternalRegulatorEnabled>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fef0 	bl	80021fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800241c:	4b82      	ldr	r3, [pc, #520]	; (8002628 <HAL_ADC_Init+0x27c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	4a82      	ldr	r2, [pc, #520]	; (800262c <HAL_ADC_Init+0x280>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	099b      	lsrs	r3, r3, #6
 800242a:	3301      	adds	r3, #1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002430:	e002      	b.n	8002438 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	3b01      	subs	r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f9      	bne.n	8002432 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff feee 	bl	8002224 <LL_ADC_IsInternalRegulatorEnabled>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002452:	f043 0210 	orr.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff62 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 8002474:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f003 0310 	and.w	r3, r3, #16
 800247e:	2b00      	cmp	r3, #0
 8002480:	f040 80c5 	bne.w	800260e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 80c1 	bne.w	800260e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002490:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002494:	f043 0202 	orr.w	r2, r3, #2
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fefb 	bl	800229c <LL_ADC_IsEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ac:	4860      	ldr	r0, [pc, #384]	; (8002630 <HAL_ADC_Init+0x284>)
 80024ae:	f7ff fef5 	bl	800229c <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4619      	mov	r1, r3
 80024be:	485d      	ldr	r0, [pc, #372]	; (8002634 <HAL_ADC_Init+0x288>)
 80024c0:	f7ff fd5e 	bl	8001f80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7e5b      	ldrb	r3, [r3, #25]
 80024c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80024d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80024da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024e4:	4313      	orrs	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d106      	bne.n	8002500 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	3b01      	subs	r3, #1
 80024f8:	045b      	lsls	r3, r3, #17
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	4b45      	ldr	r3, [pc, #276]	; (8002638 <HAL_ADC_Init+0x28c>)
 8002524:	4013      	ands	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	69b9      	ldr	r1, [r7, #24]
 800252c:	430b      	orrs	r3, r1
 800252e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff feff 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 800253a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff20 	bl	8002386 <LL_ADC_INJ_IsConversionOngoing>
 8002546:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d13d      	bne.n	80025ca <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d13a      	bne.n	80025ca <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002558:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002560:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002570:	f023 0302 	bic.w	r3, r3, #2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	69b9      	ldr	r1, [r7, #24]
 800257a:	430b      	orrs	r3, r1
 800257c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002584:	2b01      	cmp	r3, #1
 8002586:	d118      	bne.n	80025ba <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002592:	f023 0304 	bic.w	r3, r3, #4
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800259e:	4311      	orrs	r1, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025a4:	4311      	orrs	r1, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025aa:	430a      	orrs	r2, r1
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	611a      	str	r2, [r3, #16]
 80025b8:	e007      	b.n	80025ca <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10c      	bne.n	80025ec <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	f023 010f 	bic.w	r1, r3, #15
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	1e5a      	subs	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	631a      	str	r2, [r3, #48]	; 0x30
 80025ea:	e007      	b.n	80025fc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 020f 	bic.w	r2, r2, #15
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f023 0303 	bic.w	r3, r3, #3
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
 800260c:	e007      	b.n	800261e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	f043 0210 	orr.w	r2, r3, #16
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800261e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000000 	.word	0x20000000
 800262c:	053e2d63 	.word	0x053e2d63
 8002630:	50040000 	.word	0x50040000
 8002634:	50040300 	.word	0x50040300
 8002638:	fff0c007 	.word	0xfff0c007

0800263c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fe75 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d14f      	bne.n	80026f4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_ADC_Start+0x26>
 800265e:	2302      	movs	r3, #2
 8002660:	e04b      	b.n	80026fa <HAL_ADC_Start+0xbe>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fdb4 	bl	80031d8 <ADC_Enable>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d137      	bne.n	80026ea <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d106      	bne.n	80026aa <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f023 0206 	bic.w	r2, r3, #6
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	659a      	str	r2, [r3, #88]	; 0x58
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	221c      	movs	r2, #28
 80026b6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fe00 	bl	80022e8 <LL_ADC_REG_StartConversion>
 80026e8:	e006      	b.n	80026f8 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80026f2:	e001      	b.n	80026f8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
 80026f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b084      	sub	sp, #16
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_ADC_Stop+0x16>
 8002714:	2302      	movs	r3, #2
 8002716:	e023      	b.n	8002760 <HAL_ADC_Stop+0x5e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002720:	2103      	movs	r1, #3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fc9c 	bl	8003060 <ADC_ConversionStop>
 8002728:	4603      	mov	r3, r0
 800272a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d111      	bne.n	8002756 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fdd6 	bl	80032e4 <ADC_Disable>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	f043 0201 	orr.w	r2, r3, #1
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d102      	bne.n	8002780 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800277a:	2308      	movs	r3, #8
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	e010      	b.n	80027a2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06f      	b.n	800287e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800279e:	2304      	movs	r3, #4
 80027a0:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027a2:	f7ff fbbd 	bl	8001f20 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027a8:	e021      	b.n	80027ee <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b0:	d01d      	beq.n	80027ee <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027b2:	f7ff fbb5 	bl	8001f20 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <HAL_ADC_PollForConversion+0x60>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d112      	bne.n	80027ee <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10b      	bne.n	80027ee <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027da:	f043 0204 	orr.w	r2, r3, #4
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e047      	b.n	800287e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0d6      	beq.n	80027aa <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff fc40 	bl	8002092 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01c      	beq.n	8002852 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7e5b      	ldrb	r3, [r3, #25]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d118      	bne.n	8002852 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b08      	cmp	r3, #8
 800282c:	d111      	bne.n	8002852 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d105      	bne.n	8002852 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d104      	bne.n	800286a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2208      	movs	r2, #8
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e008      	b.n	800287c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	220c      	movs	r2, #12
 800287a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b0b6      	sub	sp, #216	; 0xd8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x22>
 80028be:	2302      	movs	r3, #2
 80028c0:	e3b9      	b.n	8003036 <HAL_ADC_ConfigChannel+0x796>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fd32 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 839e 	bne.w	8003018 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d824      	bhi.n	800292e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	3b02      	subs	r3, #2
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d81b      	bhi.n	8002926 <HAL_ADC_ConfigChannel+0x86>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <HAL_ADC_ConfigChannel+0x54>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002905 	.word	0x08002905
 80028f8:	0800290d 	.word	0x0800290d
 80028fc:	08002915 	.word	0x08002915
 8002900:	0800291d 	.word	0x0800291d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	220c      	movs	r2, #12
 8002908:	605a      	str	r2, [r3, #4]
          break;
 800290a:	e011      	b.n	8002930 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2212      	movs	r2, #18
 8002910:	605a      	str	r2, [r3, #4]
          break;
 8002912:	e00d      	b.n	8002930 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2218      	movs	r2, #24
 8002918:	605a      	str	r2, [r3, #4]
          break;
 800291a:	e009      	b.n	8002930 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002922:	605a      	str	r2, [r3, #4]
          break;
 8002924:	e004      	b.n	8002930 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2206      	movs	r2, #6
 800292a:	605a      	str	r2, [r3, #4]
          break;
 800292c:	e000      	b.n	8002930 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800292e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	f7ff fbbb 	bl	80020b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fcf6 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 800294c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fd16 	bl	8002386 <LL_ADC_INJ_IsConversionOngoing>
 800295a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800295e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 81a6 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800296c:	2b00      	cmp	r3, #0
 800296e:	f040 81a1 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6819      	ldr	r1, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	461a      	mov	r2, r3
 8002980:	f7ff fbc6 	bl	8002110 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	08db      	lsrs	r3, r3, #3
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d00a      	beq.n	80029bc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6919      	ldr	r1, [r3, #16]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029b6:	f7ff fb17 	bl	8001fe8 <LL_ADC_SetOffset>
 80029ba:	e17b      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fb34 	bl	8002030 <LL_ADC_GetOffsetChannel>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10a      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x148>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fb29 	bl	8002030 <LL_ADC_GetOffsetChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	f003 021f 	and.w	r2, r3, #31
 80029e6:	e01e      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x186>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2100      	movs	r1, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fb1e 	bl	8002030 <LL_ADC_GetOffsetChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002a16:	2320      	movs	r3, #32
 8002a18:	e004      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002a1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x19e>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	e018      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x1d0>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002a62:	2320      	movs	r3, #32
 8002a64:	e004      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d106      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff faed 	bl	800205c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2101      	movs	r1, #1
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fad1 	bl	8002030 <LL_ADC_GetOffsetChannel>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x20e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fac6 	bl	8002030 <LL_ADC_GetOffsetChannel>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	0e9b      	lsrs	r3, r3, #26
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	e01e      	b.n	8002aec <HAL_ADC_ConfigChannel+0x24c>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fabb 	bl	8002030 <LL_ADC_GetOffsetChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002acc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ad4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002adc:	2320      	movs	r3, #32
 8002ade:	e004      	b.n	8002aea <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002ae0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x264>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	e018      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x296>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002b28:	2320      	movs	r3, #32
 8002b2a:	e004      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d106      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2101      	movs	r1, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fa8a 	bl	800205c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fa6e 	bl	8002030 <LL_ADC_GetOffsetChannel>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x2d4>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2102      	movs	r1, #2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff fa63 	bl	8002030 <LL_ADC_GetOffsetChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	0e9b      	lsrs	r3, r3, #26
 8002b6e:	f003 021f 	and.w	r2, r3, #31
 8002b72:	e01e      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x312>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2102      	movs	r1, #2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fa58 	bl	8002030 <LL_ADC_GetOffsetChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e004      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d105      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x32a>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	0e9b      	lsrs	r3, r3, #26
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	e016      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x358>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002be2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e004      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d106      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2102      	movs	r1, #2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fa29 	bl	800205c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2103      	movs	r1, #3
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fa0d 	bl	8002030 <LL_ADC_GetOffsetChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10a      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x396>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2103      	movs	r1, #3
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fa02 	bl	8002030 <LL_ADC_GetOffsetChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	0e9b      	lsrs	r3, r3, #26
 8002c30:	f003 021f 	and.w	r2, r3, #31
 8002c34:	e017      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x3c6>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2103      	movs	r1, #3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff f9f7 	bl	8002030 <LL_ADC_GetOffsetChannel>
 8002c42:	4603      	mov	r3, r0
 8002c44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c48:	fa93 f3a3 	rbit	r3, r3
 8002c4c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c50:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c58:	2320      	movs	r3, #32
 8002c5a:	e003      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c5e:	fab3 f383 	clz	r3, r3
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x3de>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	e011      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x402>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e003      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d106      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	2103      	movs	r1, #3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff f9d4 	bl	800205c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff faef 	bl	800229c <LL_ADC_IsEnabled>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f040 813f 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	6819      	ldr	r1, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f7ff fa48 	bl	8002168 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4a8e      	ldr	r2, [pc, #568]	; (8002f18 <HAL_ADC_ConfigChannel+0x678>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	f040 8130 	bne.w	8002f44 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x46c>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	0e9b      	lsrs	r3, r3, #26
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	bf94      	ite	ls
 8002d04:	2301      	movls	r3, #1
 8002d06:	2300      	movhi	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e019      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x4a0>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d24:	2320      	movs	r3, #32
 8002d26:	e003      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	3301      	adds	r3, #1
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2b09      	cmp	r3, #9
 8002d38:	bf94      	ite	ls
 8002d3a:	2301      	movls	r3, #1
 8002d3c:	2300      	movhi	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d079      	beq.n	8002e38 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x4c0>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	0e9b      	lsrs	r3, r3, #26
 8002d56:	3301      	adds	r3, #1
 8002d58:	069b      	lsls	r3, r3, #26
 8002d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d5e:	e015      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x4ec>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d70:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d78:	2320      	movs	r3, #32
 8002d7a:	e003      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	069b      	lsls	r3, r3, #26
 8002d88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d109      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x50c>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	e017      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x53c>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	e003      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002dc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ddc:	ea42 0103 	orr.w	r1, r2, r3
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x562>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	3301      	adds	r3, #1
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	051b      	lsls	r3, r3, #20
 8002e00:	e018      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x594>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002e1a:	2320      	movs	r3, #32
 8002e1c:	e003      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	4413      	add	r3, r2
 8002e32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e34:	430b      	orrs	r3, r1
 8002e36:	e080      	b.n	8002f3a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d107      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x5b4>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	069b      	lsls	r3, r3, #26
 8002e4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e52:	e015      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x5e0>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e003      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	069b      	lsls	r3, r3, #26
 8002e7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x600>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	3301      	adds	r3, #1
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	2101      	movs	r1, #1
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	e017      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x630>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	61fb      	str	r3, [r7, #28]
  return result;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e003      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2101      	movs	r1, #1
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	ea42 0103 	orr.w	r1, r2, r3
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10d      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x65c>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3b1e      	subs	r3, #30
 8002ef4:	051b      	lsls	r3, r3, #20
 8002ef6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002efa:	e01d      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x698>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	613b      	str	r3, [r7, #16]
  return result;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d103      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002f14:	2320      	movs	r3, #32
 8002f16:	e005      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x684>
 8002f18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	fab3 f383 	clz	r3, r3
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f003 021f 	and.w	r2, r3, #31
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	3b1e      	subs	r3, #30
 8002f32:	051b      	lsls	r3, r3, #20
 8002f34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	6892      	ldr	r2, [r2, #8]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7ff f8e6 	bl	8002110 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_ADC_ConfigChannel+0x7a0>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d06c      	beq.n	800302a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f50:	483c      	ldr	r0, [pc, #240]	; (8003044 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f52:	f7ff f83b 	bl	8001fcc <LL_ADC_GetCommonPathInternalCh>
 8002f56:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a3a      	ldr	r2, [pc, #232]	; (8003048 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d127      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d121      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a35      	ldr	r2, [pc, #212]	; (800304c <HAL_ADC_ConfigChannel+0x7ac>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d157      	bne.n	800302a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f82:	4619      	mov	r1, r3
 8002f84:	482f      	ldr	r0, [pc, #188]	; (8003044 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f86:	f7ff f80e 	bl	8001fa6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f8a:	4b31      	ldr	r3, [pc, #196]	; (8003050 <HAL_ADC_ConfigChannel+0x7b0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	4a30      	ldr	r2, [pc, #192]	; (8003054 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fa4:	e002      	b.n	8002fac <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f9      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb2:	e03a      	b.n	800302a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_ADC_ConfigChannel+0x7b8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d113      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x746>
 8002fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10d      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1f      	ldr	r2, [pc, #124]	; (800304c <HAL_ADC_ConfigChannel+0x7ac>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d12a      	bne.n	800302a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4819      	ldr	r0, [pc, #100]	; (8003044 <HAL_ADC_ConfigChannel+0x7a4>)
 8002fe0:	f7fe ffe1 	bl	8001fa6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fe4:	e021      	b.n	800302a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <HAL_ADC_ConfigChannel+0x7bc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d11c      	bne.n	800302a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d116      	bne.n	800302a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a12      	ldr	r2, [pc, #72]	; (800304c <HAL_ADC_ConfigChannel+0x7ac>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d111      	bne.n	800302a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800300a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800300e:	4619      	mov	r1, r3
 8003010:	480c      	ldr	r0, [pc, #48]	; (8003044 <HAL_ADC_ConfigChannel+0x7a4>)
 8003012:	f7fe ffc8 	bl	8001fa6 <LL_ADC_SetCommonPathInternalCh>
 8003016:	e008      	b.n	800302a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	f043 0220 	orr.w	r2, r3, #32
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003032:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003036:	4618      	mov	r0, r3
 8003038:	37d8      	adds	r7, #216	; 0xd8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	80080000 	.word	0x80080000
 8003044:	50040300 	.word	0x50040300
 8003048:	c7520000 	.word	0xc7520000
 800304c:	50040000 	.word	0x50040000
 8003050:	20000000 	.word	0x20000000
 8003054:	053e2d63 	.word	0x053e2d63
 8003058:	cb840000 	.word	0xcb840000
 800305c:	80000001 	.word	0x80000001

08003060 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff f95e 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 800307c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f97f 	bl	8002386 <LL_ADC_INJ_IsConversionOngoing>
 8003088:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8098 	beq.w	80031c8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02a      	beq.n	80030fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	7e5b      	ldrb	r3, [r3, #25]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d126      	bne.n	80030fc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	7e1b      	ldrb	r3, [r3, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d122      	bne.n	80030fc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030ba:	e014      	b.n	80030e6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	4a45      	ldr	r2, [pc, #276]	; (80031d4 <ADC_ConversionStop+0x174>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d90d      	bls.n	80030e0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c8:	f043 0210 	orr.w	r2, r3, #16
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e074      	b.n	80031ca <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	3301      	adds	r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d1e3      	bne.n	80030bc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2240      	movs	r2, #64	; 0x40
 80030fa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d014      	beq.n	800312c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff f916 	bl	8002338 <LL_ADC_REG_IsConversionOngoing>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff f8d3 	bl	80022c2 <LL_ADC_IsDisableOngoing>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d104      	bne.n	800312c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f8f2 	bl	8002310 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d014      	beq.n	800315c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f925 	bl	8002386 <LL_ADC_INJ_IsConversionOngoing>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f8bb 	bl	80022c2 <LL_ADC_IsDisableOngoing>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f901 	bl	800235e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d005      	beq.n	800316e <ADC_ConversionStop+0x10e>
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d105      	bne.n	8003174 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003168:	230c      	movs	r3, #12
 800316a:	617b      	str	r3, [r7, #20]
        break;
 800316c:	e005      	b.n	800317a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800316e:	2308      	movs	r3, #8
 8003170:	617b      	str	r3, [r7, #20]
        break;
 8003172:	e002      	b.n	800317a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003174:	2304      	movs	r3, #4
 8003176:	617b      	str	r3, [r7, #20]
        break;
 8003178:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800317a:	f7fe fed1 	bl	8001f20 <HAL_GetTick>
 800317e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003180:	e01b      	b.n	80031ba <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003182:	f7fe fecd 	bl	8001f20 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b05      	cmp	r3, #5
 800318e:	d914      	bls.n	80031ba <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	f043 0210 	orr.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	f043 0201 	orr.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e007      	b.n	80031ca <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1dc      	bne.n	8003182 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	a33fffff 	.word	0xa33fffff

080031d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff f857 	bl	800229c <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d169      	bne.n	80032c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <ADC_Enable+0xfc>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f043 0210 	orr.w	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e055      	b.n	80032ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f812 	bl	800224c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003228:	482b      	ldr	r0, [pc, #172]	; (80032d8 <ADC_Enable+0x100>)
 800322a:	f7fe fecf 	bl	8001fcc <LL_ADC_GetCommonPathInternalCh>
 800322e:	4603      	mov	r3, r0
 8003230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003238:	4b28      	ldr	r3, [pc, #160]	; (80032dc <ADC_Enable+0x104>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <ADC_Enable+0x108>)
 8003240:	fba2 2303 	umull	r2, r3, r2, r3
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003252:	e002      	b.n	800325a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3b01      	subs	r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1f9      	bne.n	8003254 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003260:	f7fe fe5e 	bl	8001f20 <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003266:	e028      	b.n	80032ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f815 	bl	800229c <LL_ADC_IsEnabled>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fe ffe5 	bl	800224c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003282:	f7fe fe4d 	bl	8001f20 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d914      	bls.n	80032ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d00d      	beq.n	80032ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a2:	f043 0210 	orr.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e007      	b.n	80032ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d1cf      	bne.n	8003268 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	8000003f 	.word	0x8000003f
 80032d8:	50040300 	.word	0x50040300
 80032dc:	20000000 	.word	0x20000000
 80032e0:	053e2d63 	.word	0x053e2d63

080032e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe ffe6 	bl	80022c2 <LL_ADC_IsDisableOngoing>
 80032f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe ffcd 	bl	800229c <LL_ADC_IsEnabled>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d047      	beq.n	8003398 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d144      	bne.n	8003398 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030d 	and.w	r3, r3, #13
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10c      	bne.n	8003336 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe ffa7 	bl	8002274 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2203      	movs	r2, #3
 800332c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800332e:	f7fe fdf7 	bl	8001f20 <HAL_GetTick>
 8003332:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003334:	e029      	b.n	800338a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f043 0210 	orr.w	r2, r3, #16
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e023      	b.n	800339a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003352:	f7fe fde5 	bl	8001f20 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d914      	bls.n	800338a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00d      	beq.n	800338a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	f043 0210 	orr.w	r2, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e007      	b.n	800339a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1dc      	bne.n	8003352 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <LL_ADC_StartCalibration>:
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80033b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033be:	4313      	orrs	r3, r2
 80033c0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	609a      	str	r2, [r3, #8]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_ADC_IsCalibrationOnGoing>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033e8:	d101      	bne.n	80033ee <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003406:	2300      	movs	r3, #0
 8003408:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_ADCEx_Calibration_Start+0x1c>
 8003414:	2302      	movs	r3, #2
 8003416:	e04d      	b.n	80034b4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff5f 	bl	80032e4 <ADC_Disable>
 8003426:	4603      	mov	r3, r0
 8003428:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d136      	bne.n	800349e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003434:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003438:	f023 0302 	bic.w	r3, r3, #2
 800343c:	f043 0202 	orr.w	r2, r3, #2
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6839      	ldr	r1, [r7, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ffa9 	bl	80033a2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003450:	e014      	b.n	800347c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	3301      	adds	r3, #1
 8003456:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800345e:	d30d      	bcc.n	800347c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f023 0312 	bic.w	r3, r3, #18
 8003468:	f043 0210 	orr.w	r2, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e01b      	b.n	80034b4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ffa7 	bl	80033d4 <LL_ADC_IsCalibrationOnGoing>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e2      	bne.n	8003452 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f023 0303 	bic.w	r3, r3, #3
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
 800349c:	e005      	b.n	80034aa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	f043 0210 	orr.w	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e0ed      	b.n	80036aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe fa90 	bl	8001a00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f0:	f7fe fd16 	bl	8001f20 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034f6:	e012      	b.n	800351e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034f8:	f7fe fd12 	bl	8001f20 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b0a      	cmp	r3, #10
 8003504:	d90b      	bls.n	800351e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2205      	movs	r2, #5
 8003516:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e0c5      	b.n	80036aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0e5      	beq.n	80034f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0202 	bic.w	r2, r2, #2
 800353a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800353c:	f7fe fcf0 	bl	8001f20 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003542:	e012      	b.n	800356a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003544:	f7fe fcec 	bl	8001f20 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b0a      	cmp	r3, #10
 8003550:	d90b      	bls.n	800356a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2205      	movs	r2, #5
 8003562:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e09f      	b.n	80036aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e5      	bne.n	8003544 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7e1b      	ldrb	r3, [r3, #24]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d108      	bne.n	8003592 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e007      	b.n	80035a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7e5b      	ldrb	r3, [r3, #25]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d108      	bne.n	80035bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e007      	b.n	80035cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7e9b      	ldrb	r3, [r3, #26]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d108      	bne.n	80035e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0220 	orr.w	r2, r2, #32
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e007      	b.n	80035f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0220 	bic.w	r2, r2, #32
 80035f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	7edb      	ldrb	r3, [r3, #27]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d108      	bne.n	8003610 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0210 	bic.w	r2, r2, #16
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e007      	b.n	8003620 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0210 	orr.w	r2, r2, #16
 800361e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	7f1b      	ldrb	r3, [r3, #28]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d108      	bne.n	800363a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0208 	orr.w	r2, r2, #8
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e007      	b.n	800364a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0208 	bic.w	r2, r2, #8
 8003648:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	7f5b      	ldrb	r3, [r3, #29]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d108      	bne.n	8003664 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0204 	orr.w	r2, r2, #4
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e007      	b.n	8003674 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0204 	bic.w	r2, r2, #4
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	ea42 0103 	orr.w	r1, r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	1e5a      	subs	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b087      	sub	sp, #28
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d003      	beq.n	80036d8 <HAL_CAN_ConfigFilter+0x26>
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	f040 80aa 	bne.w	800382c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2201      	movs	r2, #1
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	43db      	mvns	r3, r3
 8003702:	401a      	ands	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d123      	bne.n	800375a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	43db      	mvns	r3, r3
 800371c:	401a      	ands	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003734:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	3248      	adds	r2, #72	; 0x48
 800373a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800374e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003750:	6979      	ldr	r1, [r7, #20]
 8003752:	3348      	adds	r3, #72	; 0x48
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	440b      	add	r3, r1
 8003758:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d122      	bne.n	80037a8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	431a      	orrs	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003782:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3248      	adds	r2, #72	; 0x48
 8003788:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800379c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	3348      	adds	r3, #72	; 0x48
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	440b      	add	r3, r1
 80037a6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	401a      	ands	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80037c2:	e007      	b.n	80037d4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	401a      	ands	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80037ee:	e007      	b.n	8003800 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	431a      	orrs	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	431a      	orrs	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800381e:	f023 0201 	bic.w	r2, r3, #1
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e006      	b.n	800383a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	371c      	adds	r7, #28
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b01      	cmp	r3, #1
 8003858:	d12e      	bne.n	80038b8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003872:	f7fe fb55 	bl	8001f20 <HAL_GetTick>
 8003876:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003878:	e012      	b.n	80038a0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800387a:	f7fe fb51 	bl	8001f20 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b0a      	cmp	r3, #10
 8003886:	d90b      	bls.n	80038a0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2205      	movs	r2, #5
 8003898:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e012      	b.n	80038c6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e5      	bne.n	800387a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e006      	b.n	80038c6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b089      	sub	sp, #36	; 0x24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80038ec:	7ffb      	ldrb	r3, [r7, #31]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d003      	beq.n	80038fa <HAL_CAN_AddTxMessage+0x2c>
 80038f2:	7ffb      	ldrb	r3, [r7, #31]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	f040 80ad 	bne.w	8003a54 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8095 	beq.w	8003a44 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	0e1b      	lsrs	r3, r3, #24
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003924:	2201      	movs	r2, #1
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	409a      	lsls	r2, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003940:	68f9      	ldr	r1, [r7, #12]
 8003942:	6809      	ldr	r1, [r1, #0]
 8003944:	431a      	orrs	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3318      	adds	r3, #24
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	440b      	add	r3, r1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e00f      	b.n	8003972 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800395c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003962:	68f9      	ldr	r1, [r7, #12]
 8003964:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003966:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	3318      	adds	r3, #24
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	440b      	add	r3, r1
 8003970:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6819      	ldr	r1, [r3, #0]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3318      	adds	r3, #24
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	440b      	add	r3, r1
 8003982:	3304      	adds	r3, #4
 8003984:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	7d1b      	ldrb	r3, [r3, #20]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d111      	bne.n	80039b2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	3318      	adds	r3, #24
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	4413      	add	r3, r2
 800399a:	3304      	adds	r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	6811      	ldr	r1, [r2, #0]
 80039a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	3318      	adds	r3, #24
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	440b      	add	r3, r1
 80039ae:	3304      	adds	r3, #4
 80039b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3307      	adds	r3, #7
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	061a      	lsls	r2, r3, #24
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3306      	adds	r3, #6
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3305      	adds	r3, #5
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	4313      	orrs	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	3204      	adds	r2, #4
 80039d2:	7812      	ldrb	r2, [r2, #0]
 80039d4:	4610      	mov	r0, r2
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	6811      	ldr	r1, [r2, #0]
 80039da:	ea43 0200 	orr.w	r2, r3, r0
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	440b      	add	r3, r1
 80039e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80039e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3303      	adds	r3, #3
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	061a      	lsls	r2, r3, #24
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3302      	adds	r3, #2
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3301      	adds	r3, #1
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	4313      	orrs	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	7812      	ldrb	r2, [r2, #0]
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	6811      	ldr	r1, [r2, #0]
 8003a10:	ea43 0200 	orr.w	r2, r3, r0
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	440b      	add	r3, r1
 8003a1a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003a1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3318      	adds	r3, #24
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	4413      	add	r3, r2
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	6811      	ldr	r1, [r2, #0]
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	3318      	adds	r3, #24
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	440b      	add	r3, r1
 8003a3e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e00e      	b.n	8003a62 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e006      	b.n	8003a62 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3724      	adds	r7, #36	; 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b087      	sub	sp, #28
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a82:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d003      	beq.n	8003a92 <HAL_CAN_GetRxMessage+0x24>
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	f040 80f3 	bne.w	8003c78 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10e      	bne.n	8003ab6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d116      	bne.n	8003ad4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0e7      	b.n	8003c86 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d107      	bne.n	8003ad4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0d8      	b.n	8003c86 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	331b      	adds	r3, #27
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	4413      	add	r3, r2
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0204 	and.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10c      	bne.n	8003b0c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	331b      	adds	r3, #27
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	4413      	add	r3, r2
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	0d5b      	lsrs	r3, r3, #21
 8003b02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	331b      	adds	r3, #27
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	4413      	add	r3, r2
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	08db      	lsrs	r3, r3, #3
 8003b1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	331b      	adds	r3, #27
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	4413      	add	r3, r2
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0202 	and.w	r2, r3, #2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	331b      	adds	r3, #27
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 020f 	and.w	r2, r3, #15
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	331b      	adds	r3, #27
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3304      	adds	r3, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	331b      	adds	r3, #27
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	4413      	add	r3, r2
 8003b76:	3304      	adds	r3, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	0a1a      	lsrs	r2, r3, #8
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	0c1a      	lsrs	r2, r3, #16
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0e1a      	lsrs	r2, r3, #24
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	3303      	adds	r3, #3
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	0a1a      	lsrs	r2, r3, #8
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	3305      	adds	r3, #5
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0c1a      	lsrs	r2, r3, #16
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	3306      	adds	r3, #6
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	0e1a      	lsrs	r2, r3, #24
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	3307      	adds	r3, #7
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0220 	orr.w	r2, r2, #32
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	e007      	b.n	8003c74 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0220 	orr.w	r2, r2, #32
 8003c72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e006      	b.n	8003c86 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
  }
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ca2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d002      	beq.n	8003cb0 <HAL_CAN_ActivateNotification+0x1e>
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d109      	bne.n	8003cc4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6959      	ldr	r1, [r3, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e006      	b.n	8003cd2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b08a      	sub	sp, #40	; 0x28
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d07c      	beq.n	8003e1e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d023      	beq.n	8003d76 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2201      	movs	r2, #1
 8003d34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f983 	bl	800404c <HAL_CAN_TxMailbox0CompleteCallback>
 8003d46:	e016      	b.n	8003d76 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5a:	e00c      	b.n	8003d76 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6e:	e002      	b.n	8003d76 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f989 	bl	8004088 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d024      	beq.n	8003dca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f963 	bl	8004060 <HAL_CAN_TxMailbox1CompleteCallback>
 8003d9a:	e016      	b.n	8003dca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
 8003dae:	e00c      	b.n	8003dca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d004      	beq.n	8003dc4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	e002      	b.n	8003dca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f969 	bl	800409c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d024      	beq.n	8003e1e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ddc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f943 	bl	8004074 <HAL_CAN_TxMailbox2CompleteCallback>
 8003dee:	e016      	b.n	8003e1e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d004      	beq.n	8003e04 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
 8003e02:	e00c      	b.n	8003e1e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
 8003e16:	e002      	b.n	8003e1e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f949 	bl	80040b0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00c      	beq.n	8003e42 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2210      	movs	r2, #16
 8003e40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d006      	beq.n	8003e64 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f930 	bl	80040c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7fd f8ff 	bl	8001080 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00b      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2208      	movs	r2, #8
 8003ec0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f912 	bl	80040ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d009      	beq.n	8003ee6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 f8f9 	bl	80040d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00b      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2210      	movs	r2, #16
 8003f00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8fc 	bl	8004100 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d006      	beq.n	8003f2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2208      	movs	r2, #8
 8003f22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f8f5 	bl	8004114 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d07b      	beq.n	800402c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d072      	beq.n	8004024 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d043      	beq.n	8004024 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d03e      	beq.n	8004024 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fac:	2b60      	cmp	r3, #96	; 0x60
 8003fae:	d02b      	beq.n	8004008 <HAL_CAN_IRQHandler+0x32a>
 8003fb0:	2b60      	cmp	r3, #96	; 0x60
 8003fb2:	d82e      	bhi.n	8004012 <HAL_CAN_IRQHandler+0x334>
 8003fb4:	2b50      	cmp	r3, #80	; 0x50
 8003fb6:	d022      	beq.n	8003ffe <HAL_CAN_IRQHandler+0x320>
 8003fb8:	2b50      	cmp	r3, #80	; 0x50
 8003fba:	d82a      	bhi.n	8004012 <HAL_CAN_IRQHandler+0x334>
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d019      	beq.n	8003ff4 <HAL_CAN_IRQHandler+0x316>
 8003fc0:	2b40      	cmp	r3, #64	; 0x40
 8003fc2:	d826      	bhi.n	8004012 <HAL_CAN_IRQHandler+0x334>
 8003fc4:	2b30      	cmp	r3, #48	; 0x30
 8003fc6:	d010      	beq.n	8003fea <HAL_CAN_IRQHandler+0x30c>
 8003fc8:	2b30      	cmp	r3, #48	; 0x30
 8003fca:	d822      	bhi.n	8004012 <HAL_CAN_IRQHandler+0x334>
 8003fcc:	2b10      	cmp	r3, #16
 8003fce:	d002      	beq.n	8003fd6 <HAL_CAN_IRQHandler+0x2f8>
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d005      	beq.n	8003fe0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003fd4:	e01d      	b.n	8004012 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	f043 0308 	orr.w	r3, r3, #8
 8003fdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fde:	e019      	b.n	8004014 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	f043 0310 	orr.w	r3, r3, #16
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fe8:	e014      	b.n	8004014 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	f043 0320 	orr.w	r3, r3, #32
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ff2:	e00f      	b.n	8004014 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ffc:	e00a      	b.n	8004014 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004006:	e005      	b.n	8004014 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004010:	e000      	b.n	8004014 <HAL_CAN_IRQHandler+0x336>
            break;
 8004012:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004022:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2204      	movs	r2, #4
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f872 	bl	8004128 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004044:	bf00      	nop
 8004046:	3728      	adds	r7, #40	; 0x28
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <__NVIC_SetPriorityGrouping>:
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800414c:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004158:	4013      	ands	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416e:	4a04      	ldr	r2, [pc, #16]	; (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	60d3      	str	r3, [r2, #12]
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <__NVIC_GetPriorityGrouping>:
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <__NVIC_GetPriorityGrouping+0x18>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	f003 0307 	and.w	r3, r3, #7
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_EnableIRQ>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db0b      	blt.n	80041ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	4907      	ldr	r1, [pc, #28]	; (80041d8 <__NVIC_EnableIRQ+0x38>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2001      	movs	r0, #1
 80041c2:	fa00 f202 	lsl.w	r2, r0, r2
 80041c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000e100 	.word	0xe000e100

080041dc <__NVIC_SetPriority>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db0a      	blt.n	8004206 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	490c      	ldr	r1, [pc, #48]	; (8004228 <__NVIC_SetPriority+0x4c>)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	440b      	add	r3, r1
 8004200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004204:	e00a      	b.n	800421c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4908      	ldr	r1, [pc, #32]	; (800422c <__NVIC_SetPriority+0x50>)
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	3b04      	subs	r3, #4
 8004214:	0112      	lsls	r2, r2, #4
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	440b      	add	r3, r1
 800421a:	761a      	strb	r2, [r3, #24]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000e100 	.word	0xe000e100
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <NVIC_EncodePriority>:
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	; 0x24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f1c3 0307 	rsb	r3, r3, #7
 800424a:	2b04      	cmp	r3, #4
 800424c:	bf28      	it	cs
 800424e:	2304      	movcs	r3, #4
 8004250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3304      	adds	r3, #4
 8004256:	2b06      	cmp	r3, #6
 8004258:	d902      	bls.n	8004260 <NVIC_EncodePriority+0x30>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3b03      	subs	r3, #3
 800425e:	e000      	b.n	8004262 <NVIC_EncodePriority+0x32>
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	401a      	ands	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	43d9      	mvns	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004288:	4313      	orrs	r3, r2
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <SysTick_Config>:
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042a8:	d301      	bcc.n	80042ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80042aa:	2301      	movs	r3, #1
 80042ac:	e00f      	b.n	80042ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <SysTick_Config+0x40>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042b6:	210f      	movs	r1, #15
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042bc:	f7ff ff8e 	bl	80041dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <SysTick_Config+0x40>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <SysTick_Config+0x40>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	e000e010 	.word	0xe000e010

080042dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff29 	bl	800413c <__NVIC_SetPriorityGrouping>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004304:	f7ff ff3e 	bl	8004184 <__NVIC_GetPriorityGrouping>
 8004308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f7ff ff8e 	bl	8004230 <NVIC_EncodePriority>
 8004314:	4602      	mov	r2, r0
 8004316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff5d 	bl	80041dc <__NVIC_SetPriority>
}
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	4603      	mov	r3, r0
 8004332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff31 	bl	80041a0 <__NVIC_EnableIRQ>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ffa2 	bl	8004298 <SysTick_Config>
 8004354:	4603      	mov	r3, r0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800436e:	e154      	b.n	800461a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	2101      	movs	r1, #1
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	4013      	ands	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8146 	beq.w	8004614 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d005      	beq.n	80043a0 <HAL_GPIO_Init+0x40>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d130      	bne.n	8004402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	2203      	movs	r2, #3
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043d6:	2201      	movs	r2, #1
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4013      	ands	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	f003 0201 	and.w	r2, r3, #1
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b03      	cmp	r3, #3
 800440c:	d017      	beq.n	800443e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	2203      	movs	r2, #3
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43db      	mvns	r3, r3
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d123      	bne.n	8004492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	08da      	lsrs	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3208      	adds	r2, #8
 8004452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	220f      	movs	r2, #15
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43db      	mvns	r3, r3
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4013      	ands	r3, r2
 800446c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	08da      	lsrs	r2, r3, #3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3208      	adds	r2, #8
 800448c:	6939      	ldr	r1, [r7, #16]
 800448e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	2203      	movs	r2, #3
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4013      	ands	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f003 0203 	and.w	r2, r3, #3
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80a0 	beq.w	8004614 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d4:	4b58      	ldr	r3, [pc, #352]	; (8004638 <HAL_GPIO_Init+0x2d8>)
 80044d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044d8:	4a57      	ldr	r2, [pc, #348]	; (8004638 <HAL_GPIO_Init+0x2d8>)
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6613      	str	r3, [r2, #96]	; 0x60
 80044e0:	4b55      	ldr	r3, [pc, #340]	; (8004638 <HAL_GPIO_Init+0x2d8>)
 80044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80044ec:	4a53      	ldr	r2, [pc, #332]	; (800463c <HAL_GPIO_Init+0x2dc>)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	089b      	lsrs	r3, r3, #2
 80044f2:	3302      	adds	r3, #2
 80044f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 0303 	and.w	r3, r3, #3
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	220f      	movs	r2, #15
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4013      	ands	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004516:	d019      	beq.n	800454c <HAL_GPIO_Init+0x1ec>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a49      	ldr	r2, [pc, #292]	; (8004640 <HAL_GPIO_Init+0x2e0>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <HAL_GPIO_Init+0x1e8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a48      	ldr	r2, [pc, #288]	; (8004644 <HAL_GPIO_Init+0x2e4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00d      	beq.n	8004544 <HAL_GPIO_Init+0x1e4>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a47      	ldr	r2, [pc, #284]	; (8004648 <HAL_GPIO_Init+0x2e8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d007      	beq.n	8004540 <HAL_GPIO_Init+0x1e0>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a46      	ldr	r2, [pc, #280]	; (800464c <HAL_GPIO_Init+0x2ec>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_GPIO_Init+0x1dc>
 8004538:	2304      	movs	r3, #4
 800453a:	e008      	b.n	800454e <HAL_GPIO_Init+0x1ee>
 800453c:	2307      	movs	r3, #7
 800453e:	e006      	b.n	800454e <HAL_GPIO_Init+0x1ee>
 8004540:	2303      	movs	r3, #3
 8004542:	e004      	b.n	800454e <HAL_GPIO_Init+0x1ee>
 8004544:	2302      	movs	r3, #2
 8004546:	e002      	b.n	800454e <HAL_GPIO_Init+0x1ee>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <HAL_GPIO_Init+0x1ee>
 800454c:	2300      	movs	r3, #0
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	f002 0203 	and.w	r2, r2, #3
 8004554:	0092      	lsls	r2, r2, #2
 8004556:	4093      	lsls	r3, r2
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800455e:	4937      	ldr	r1, [pc, #220]	; (800463c <HAL_GPIO_Init+0x2dc>)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	089b      	lsrs	r3, r3, #2
 8004564:	3302      	adds	r3, #2
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800456c:	4b38      	ldr	r3, [pc, #224]	; (8004650 <HAL_GPIO_Init+0x2f0>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	43db      	mvns	r3, r3
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4013      	ands	r3, r2
 800457a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004590:	4a2f      	ldr	r2, [pc, #188]	; (8004650 <HAL_GPIO_Init+0x2f0>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004596:	4b2e      	ldr	r3, [pc, #184]	; (8004650 <HAL_GPIO_Init+0x2f0>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	43db      	mvns	r3, r3
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045ba:	4a25      	ldr	r2, [pc, #148]	; (8004650 <HAL_GPIO_Init+0x2f0>)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045c0:	4b23      	ldr	r3, [pc, #140]	; (8004650 <HAL_GPIO_Init+0x2f0>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	43db      	mvns	r3, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4013      	ands	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045e4:	4a1a      	ldr	r2, [pc, #104]	; (8004650 <HAL_GPIO_Init+0x2f0>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80045ea:	4b19      	ldr	r3, [pc, #100]	; (8004650 <HAL_GPIO_Init+0x2f0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800460e:	4a10      	ldr	r2, [pc, #64]	; (8004650 <HAL_GPIO_Init+0x2f0>)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	3301      	adds	r3, #1
 8004618:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	f47f aea3 	bne.w	8004370 <HAL_GPIO_Init+0x10>
  }
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	40021000 	.word	0x40021000
 800463c:	40010000 	.word	0x40010000
 8004640:	48000400 	.word	0x48000400
 8004644:	48000800 	.word	0x48000800
 8004648:	48000c00 	.word	0x48000c00
 800464c:	48001000 	.word	0x48001000
 8004650:	40010400 	.word	0x40010400

08004654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	887b      	ldrh	r3, [r7, #2]
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	e001      	b.n	8004676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
 8004690:	4613      	mov	r3, r2
 8004692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004694:	787b      	ldrb	r3, [r7, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046a0:	e002      	b.n	80046a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046a2:	887a      	ldrh	r2, [r7, #2]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <HAL_PWREx_GetVoltageRange+0x18>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40007000 	.word	0x40007000

080046d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046de:	d130      	bne.n	8004742 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e0:	4b23      	ldr	r3, [pc, #140]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ec:	d038      	beq.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046ee:	4b20      	ldr	r3, [pc, #128]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046f6:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2232      	movs	r2, #50	; 0x32
 8004704:	fb02 f303 	mul.w	r3, r2, r3
 8004708:	4a1b      	ldr	r2, [pc, #108]	; (8004778 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800470a:	fba2 2303 	umull	r2, r3, r2, r3
 800470e:	0c9b      	lsrs	r3, r3, #18
 8004710:	3301      	adds	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004714:	e002      	b.n	800471c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b01      	subs	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471c:	4b14      	ldr	r3, [pc, #80]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004728:	d102      	bne.n	8004730 <HAL_PWREx_ControlVoltageScaling+0x60>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1f2      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004730:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800473c:	d110      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e00f      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474e:	d007      	beq.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004758:	4a05      	ldr	r2, [pc, #20]	; (8004770 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800475e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40007000 	.word	0x40007000
 8004774:	20000000 	.word	0x20000000
 8004778:	431bde83 	.word	0x431bde83

0800477c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f000 bc02 	b.w	8004f94 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004790:	4b96      	ldr	r3, [pc, #600]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800479a:	4b94      	ldr	r3, [pc, #592]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80e4 	beq.w	800497a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d007      	beq.n	80047c8 <HAL_RCC_OscConfig+0x4c>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	f040 808b 	bne.w	80048d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	f040 8087 	bne.w	80048d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c8:	4b88      	ldr	r3, [pc, #544]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_OscConfig+0x64>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e3d9      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1a      	ldr	r2, [r3, #32]
 80047e4:	4b81      	ldr	r3, [pc, #516]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d004      	beq.n	80047fa <HAL_RCC_OscConfig+0x7e>
 80047f0:	4b7e      	ldr	r3, [pc, #504]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047f8:	e005      	b.n	8004806 <HAL_RCC_OscConfig+0x8a>
 80047fa:	4b7c      	ldr	r3, [pc, #496]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80047fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004806:	4293      	cmp	r3, r2
 8004808:	d223      	bcs.n	8004852 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fd8a 	bl	8005328 <RCC_SetFlashLatencyFromMSIRange>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e3ba      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800481e:	4b73      	ldr	r3, [pc, #460]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a72      	ldr	r2, [pc, #456]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004824:	f043 0308 	orr.w	r3, r3, #8
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4b70      	ldr	r3, [pc, #448]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	496d      	ldr	r1, [pc, #436]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004838:	4313      	orrs	r3, r2
 800483a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800483c:	4b6b      	ldr	r3, [pc, #428]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	4968      	ldr	r1, [pc, #416]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
 8004850:	e025      	b.n	800489e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004852:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a65      	ldr	r2, [pc, #404]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004858:	f043 0308 	orr.w	r3, r3, #8
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	4960      	ldr	r1, [pc, #384]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004870:	4b5e      	ldr	r3, [pc, #376]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	495b      	ldr	r1, [pc, #364]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fd4a 	bl	8005328 <RCC_SetFlashLatencyFromMSIRange>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e37a      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800489e:	f000 fc81 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 80048a2:	4602      	mov	r2, r0
 80048a4:	4b51      	ldr	r3, [pc, #324]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	4950      	ldr	r1, [pc, #320]	; (80049f0 <HAL_RCC_OscConfig+0x274>)
 80048b0:	5ccb      	ldrb	r3, [r1, r3]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	4a4e      	ldr	r2, [pc, #312]	; (80049f4 <HAL_RCC_OscConfig+0x278>)
 80048bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048be:	4b4e      	ldr	r3, [pc, #312]	; (80049f8 <HAL_RCC_OscConfig+0x27c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd fadc 	bl	8001e80 <HAL_InitTick>
 80048c8:	4603      	mov	r3, r0
 80048ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d052      	beq.n	8004978 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	e35e      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d032      	beq.n	8004944 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80048de:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a42      	ldr	r2, [pc, #264]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048ea:	f7fd fb19 	bl	8001f20 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048f2:	f7fd fb15 	bl	8001f20 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e347      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004904:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f0      	beq.n	80048f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a35      	ldr	r2, [pc, #212]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004916:	f043 0308 	orr.w	r3, r3, #8
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	4b33      	ldr	r3, [pc, #204]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	4930      	ldr	r1, [pc, #192]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800492e:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	492b      	ldr	r1, [pc, #172]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800493e:	4313      	orrs	r3, r2
 8004940:	604b      	str	r3, [r1, #4]
 8004942:	e01a      	b.n	800497a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004944:	4b29      	ldr	r3, [pc, #164]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a28      	ldr	r2, [pc, #160]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004950:	f7fd fae6 	bl	8001f20 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004958:	f7fd fae2 	bl	8001f20 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e314      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800496a:	4b20      	ldr	r3, [pc, #128]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x1dc>
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004978:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d073      	beq.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b08      	cmp	r3, #8
 800498a:	d005      	beq.n	8004998 <HAL_RCC_OscConfig+0x21c>
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b0c      	cmp	r3, #12
 8004990:	d10e      	bne.n	80049b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d10b      	bne.n	80049b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d063      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d15f      	bne.n	8004a6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e2f1      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d106      	bne.n	80049c8 <HAL_RCC_OscConfig+0x24c>
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a0b      	ldr	r2, [pc, #44]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e025      	b.n	8004a14 <HAL_RCC_OscConfig+0x298>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d0:	d114      	bne.n	80049fc <HAL_RCC_OscConfig+0x280>
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a05      	ldr	r2, [pc, #20]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a02      	ldr	r2, [pc, #8]	; (80049ec <HAL_RCC_OscConfig+0x270>)
 80049e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	e013      	b.n	8004a14 <HAL_RCC_OscConfig+0x298>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	0800bb88 	.word	0x0800bb88
 80049f4:	20000000 	.word	0x20000000
 80049f8:	20000004 	.word	0x20000004
 80049fc:	4ba0      	ldr	r3, [pc, #640]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a9f      	ldr	r2, [pc, #636]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	4b9d      	ldr	r3, [pc, #628]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a9c      	ldr	r2, [pc, #624]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d013      	beq.n	8004a44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fd fa80 	bl	8001f20 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fd fa7c 	bl	8001f20 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e2ae      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a36:	4b92      	ldr	r3, [pc, #584]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x2a8>
 8004a42:	e014      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd fa6c 	bl	8001f20 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7fd fa68 	bl	8001f20 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	; 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e29a      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5e:	4b88      	ldr	r3, [pc, #544]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x2d0>
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d060      	beq.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x310>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d119      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d116      	bne.n	8004aba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a8c:	4b7c      	ldr	r3, [pc, #496]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x328>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e277      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	4b76      	ldr	r3, [pc, #472]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	4973      	ldr	r1, [pc, #460]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab8:	e040      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d023      	beq.n	8004b0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac2:	4b6f      	ldr	r3, [pc, #444]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6e      	ldr	r2, [pc, #440]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fd fa27 	bl	8001f20 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad6:	f7fd fa23 	bl	8001f20 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e255      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae8:	4b65      	ldr	r3, [pc, #404]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af4:	4b62      	ldr	r3, [pc, #392]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	495f      	ldr	r1, [pc, #380]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
 8004b08:	e018      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0a:	4b5d      	ldr	r3, [pc, #372]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a5c      	ldr	r2, [pc, #368]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fd fa03 	bl	8001f20 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fd f9ff 	bl	8001f20 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e231      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b30:	4b53      	ldr	r3, [pc, #332]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f0      	bne.n	8004b1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d03c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b50:	4b4b      	ldr	r3, [pc, #300]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b56:	4a4a      	ldr	r2, [pc, #296]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fd f9de 	bl	8001f20 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b68:	f7fd f9da 	bl	8001f20 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e20c      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b7a:	4b41      	ldr	r3, [pc, #260]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <HAL_RCC_OscConfig+0x3ec>
 8004b88:	e01b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b90:	4a3b      	ldr	r2, [pc, #236]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fd f9c1 	bl	8001f20 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba2:	f7fd f9bd 	bl	8001f20 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e1ef      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bb4:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ef      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 80a6 	beq.w	8004d1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bd4:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10d      	bne.n	8004bfc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be0:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be4:	4a26      	ldr	r2, [pc, #152]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bea:	6593      	str	r3, [r2, #88]	; 0x58
 8004bec:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfc:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d118      	bne.n	8004c3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c08:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c14:	f7fd f984 	bl	8001f20 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1c:	f7fd f980 	bl	8001f20 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e1b2      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <HAL_RCC_OscConfig+0x508>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d108      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4d8>
 8004c42:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	4a0d      	ldr	r2, [pc, #52]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c52:	e029      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	d115      	bne.n	8004c88 <HAL_RCC_OscConfig+0x50c>
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	4a07      	ldr	r2, [pc, #28]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c64:	f043 0304 	orr.w	r3, r3, #4
 8004c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c72:	4a03      	ldr	r2, [pc, #12]	; (8004c80 <HAL_RCC_OscConfig+0x504>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7c:	e014      	b.n	8004ca8 <HAL_RCC_OscConfig+0x52c>
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	40007000 	.word	0x40007000
 8004c88:	4b9a      	ldr	r3, [pc, #616]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	4a99      	ldr	r2, [pc, #612]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c98:	4b96      	ldr	r3, [pc, #600]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	4a95      	ldr	r2, [pc, #596]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004ca0:	f023 0304 	bic.w	r3, r3, #4
 8004ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d016      	beq.n	8004cde <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fd f936 	bl	8001f20 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fd f932 	bl	8001f20 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e162      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cce:	4b89      	ldr	r3, [pc, #548]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ed      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x53c>
 8004cdc:	e015      	b.n	8004d0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cde:	f7fd f91f 	bl	8001f20 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fd f91b 	bl	8001f20 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e14b      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfc:	4b7d      	ldr	r3, [pc, #500]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1ed      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0a:	7ffb      	ldrb	r3, [r7, #31]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d10:	4b78      	ldr	r3, [pc, #480]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	4a77      	ldr	r2, [pc, #476]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d03c      	beq.n	8004da2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01c      	beq.n	8004d6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d30:	4b70      	ldr	r3, [pc, #448]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d36:	4a6f      	ldr	r2, [pc, #444]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fd f8ee 	bl	8001f20 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d48:	f7fd f8ea 	bl	8001f20 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e11c      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d5a:	4b66      	ldr	r3, [pc, #408]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0ef      	beq.n	8004d48 <HAL_RCC_OscConfig+0x5cc>
 8004d68:	e01b      	b.n	8004da2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d6a:	4b62      	ldr	r3, [pc, #392]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d70:	4a60      	ldr	r2, [pc, #384]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d72:	f023 0301 	bic.w	r3, r3, #1
 8004d76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fd f8d1 	bl	8001f20 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d82:	f7fd f8cd 	bl	8001f20 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0ff      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d94:	4b57      	ldr	r3, [pc, #348]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1ef      	bne.n	8004d82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 80f3 	beq.w	8004f92 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	f040 80c9 	bne.w	8004f48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004db6:	4b4f      	ldr	r3, [pc, #316]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f003 0203 	and.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d12c      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d123      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d11b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d113      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d109      	bne.n	8004e24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d06b      	beq.n	8004efc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b0c      	cmp	r3, #12
 8004e28:	d062      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e2a:	4b32      	ldr	r3, [pc, #200]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e0ac      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2d      	ldr	r2, [pc, #180]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004e40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e46:	f7fd f86b 	bl	8001f20 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4e:	f7fd f867 	bl	8001f20 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e099      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e60:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f0      	bne.n	8004e4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e6c:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <HAL_RCC_OscConfig+0x77c>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e7c:	3a01      	subs	r2, #1
 8004e7e:	0112      	lsls	r2, r2, #4
 8004e80:	4311      	orrs	r1, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e86:	0212      	lsls	r2, r2, #8
 8004e88:	4311      	orrs	r1, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e8e:	0852      	lsrs	r2, r2, #1
 8004e90:	3a01      	subs	r2, #1
 8004e92:	0552      	lsls	r2, r2, #21
 8004e94:	4311      	orrs	r1, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e9a:	0852      	lsrs	r2, r2, #1
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	0652      	lsls	r2, r2, #25
 8004ea0:	4311      	orrs	r1, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ea6:	06d2      	lsls	r2, r2, #27
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	4912      	ldr	r1, [pc, #72]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004eb0:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ebc:	4b0d      	ldr	r3, [pc, #52]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ec8:	f7fd f82a 	bl	8001f20 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed0:	f7fd f826 	bl	8001f20 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e058      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee2:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <HAL_RCC_OscConfig+0x778>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eee:	e050      	b.n	8004f92 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e04f      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efc:	4b27      	ldr	r3, [pc, #156]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d144      	bne.n	8004f92 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f08:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a23      	ldr	r2, [pc, #140]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f14:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4a20      	ldr	r2, [pc, #128]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f20:	f7fc fffe 	bl	8001f20 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fc fffa 	bl	8001f20 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e02c      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0x7ac>
 8004f46:	e024      	b.n	8004f92 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	d01f      	beq.n	8004f8e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a12      	ldr	r2, [pc, #72]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5a:	f7fc ffe1 	bl	8001f20 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f62:	f7fc ffdd 	bl	8001f20 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e00f      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f74:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f0      	bne.n	8004f62 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	4905      	ldr	r1, [pc, #20]	; (8004f9c <HAL_RCC_OscConfig+0x820>)
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_RCC_OscConfig+0x824>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60cb      	str	r3, [r1, #12]
 8004f8c:	e001      	b.n	8004f92 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	feeefffc 	.word	0xfeeefffc

08004fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0e7      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b75      	ldr	r3, [pc, #468]	; (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d910      	bls.n	8004fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b72      	ldr	r3, [pc, #456]	; (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 0207 	bic.w	r2, r3, #7
 8004fce:	4970      	ldr	r1, [pc, #448]	; (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b6e      	ldr	r3, [pc, #440]	; (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0cf      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d010      	beq.n	8005016 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	4b66      	ldr	r3, [pc, #408]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005000:	429a      	cmp	r2, r3
 8005002:	d908      	bls.n	8005016 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005004:	4b63      	ldr	r3, [pc, #396]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4960      	ldr	r1, [pc, #384]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d04c      	beq.n	80050bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b03      	cmp	r3, #3
 8005028:	d107      	bne.n	800503a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502a:	4b5a      	ldr	r3, [pc, #360]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d121      	bne.n	800507a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e0a6      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005042:	4b54      	ldr	r3, [pc, #336]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d115      	bne.n	800507a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e09a      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800505a:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e08e      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800506a:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e086      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800507a:	4b46      	ldr	r3, [pc, #280]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4943      	ldr	r1, [pc, #268]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005088:	4313      	orrs	r3, r2
 800508a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508c:	f7fc ff48 	bl	8001f20 <HAL_GetTick>
 8005090:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005092:	e00a      	b.n	80050aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005094:	f7fc ff44 	bl	8001f20 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e06e      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	4b3a      	ldr	r3, [pc, #232]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 020c 	and.w	r2, r3, #12
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d1eb      	bne.n	8005094 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d010      	beq.n	80050ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	4b31      	ldr	r3, [pc, #196]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d208      	bcs.n	80050ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b2e      	ldr	r3, [pc, #184]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	492b      	ldr	r1, [pc, #172]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050ea:	4b29      	ldr	r3, [pc, #164]	; (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d210      	bcs.n	800511a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f8:	4b25      	ldr	r3, [pc, #148]	; (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f023 0207 	bic.w	r2, r3, #7
 8005100:	4923      	ldr	r1, [pc, #140]	; (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005108:	4b21      	ldr	r3, [pc, #132]	; (8005190 <HAL_RCC_ClockConfig+0x1ec>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d001      	beq.n	800511a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e036      	b.n	8005188 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d008      	beq.n	8005138 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005126:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	4918      	ldr	r1, [pc, #96]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005134:	4313      	orrs	r3, r2
 8005136:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d009      	beq.n	8005158 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005144:	4b13      	ldr	r3, [pc, #76]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4910      	ldr	r1, [pc, #64]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005154:	4313      	orrs	r3, r2
 8005156:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005158:	f000 f824 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 800515c:	4602      	mov	r2, r0
 800515e:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <HAL_RCC_ClockConfig+0x1f0>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	490b      	ldr	r1, [pc, #44]	; (8005198 <HAL_RCC_ClockConfig+0x1f4>)
 800516a:	5ccb      	ldrb	r3, [r1, r3]
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	fa22 f303 	lsr.w	r3, r2, r3
 8005174:	4a09      	ldr	r2, [pc, #36]	; (800519c <HAL_RCC_ClockConfig+0x1f8>)
 8005176:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005178:	4b09      	ldr	r3, [pc, #36]	; (80051a0 <HAL_RCC_ClockConfig+0x1fc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f7fc fe7f 	bl	8001e80 <HAL_InitTick>
 8005182:	4603      	mov	r3, r0
 8005184:	72fb      	strb	r3, [r7, #11]

  return status;
 8005186:	7afb      	ldrb	r3, [r7, #11]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40022000 	.word	0x40022000
 8005194:	40021000 	.word	0x40021000
 8005198:	0800bb88 	.word	0x0800bb88
 800519c:	20000000 	.word	0x20000000
 80051a0:	20000004 	.word	0x20000004

080051a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b089      	sub	sp, #36	; 0x24
 80051a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
 80051ae:	2300      	movs	r3, #0
 80051b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b2:	4b3e      	ldr	r3, [pc, #248]	; (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051bc:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0x34>
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	2b0c      	cmp	r3, #12
 80051d0:	d121      	bne.n	8005216 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d11e      	bne.n	8005216 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051d8:	4b34      	ldr	r3, [pc, #208]	; (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d107      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051e4:	4b31      	ldr	r3, [pc, #196]	; (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 80051e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	e005      	b.n	8005200 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051f4:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	091b      	lsrs	r3, r3, #4
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005200:	4a2b      	ldr	r2, [pc, #172]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005208:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10d      	bne.n	800522c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005214:	e00a      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d102      	bne.n	8005222 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800521c:	4b25      	ldr	r3, [pc, #148]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e004      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d101      	bne.n	800522c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005228:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800522a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b0c      	cmp	r3, #12
 8005230:	d134      	bne.n	800529c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005232:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d003      	beq.n	800524a <HAL_RCC_GetSysClockFreq+0xa6>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b03      	cmp	r3, #3
 8005246:	d003      	beq.n	8005250 <HAL_RCC_GetSysClockFreq+0xac>
 8005248:	e005      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800524a:	4b1a      	ldr	r3, [pc, #104]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800524c:	617b      	str	r3, [r7, #20]
      break;
 800524e:	e005      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005250:	4b18      	ldr	r3, [pc, #96]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005252:	617b      	str	r3, [r7, #20]
      break;
 8005254:	e002      	b.n	800525c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	617b      	str	r3, [r7, #20]
      break;
 800525a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800525c:	4b13      	ldr	r3, [pc, #76]	; (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	3301      	adds	r3, #1
 8005268:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800526a:	4b10      	ldr	r3, [pc, #64]	; (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	fb03 f202 	mul.w	r2, r3, r2
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <HAL_RCC_GetSysClockFreq+0x108>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	0e5b      	lsrs	r3, r3, #25
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	3301      	adds	r3, #1
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800529c:	69bb      	ldr	r3, [r7, #24]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3724      	adds	r7, #36	; 0x24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	0800bba0 	.word	0x0800bba0
 80052b4:	00f42400 	.word	0x00f42400

080052b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <HAL_RCC_GetHCLKFreq+0x14>)
 80052be:	681b      	ldr	r3, [r3, #0]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20000000 	.word	0x20000000

080052d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052d4:	f7ff fff0 	bl	80052b8 <HAL_RCC_GetHCLKFreq>
 80052d8:	4602      	mov	r2, r0
 80052da:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	4904      	ldr	r1, [pc, #16]	; (80052f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052e6:	5ccb      	ldrb	r3, [r1, r3]
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40021000 	.word	0x40021000
 80052f8:	0800bb98 	.word	0x0800bb98

080052fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005300:	f7ff ffda 	bl	80052b8 <HAL_RCC_GetHCLKFreq>
 8005304:	4602      	mov	r2, r0
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	0adb      	lsrs	r3, r3, #11
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	4904      	ldr	r1, [pc, #16]	; (8005324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	f003 031f 	and.w	r3, r3, #31
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800531c:	4618      	mov	r0, r3
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40021000 	.word	0x40021000
 8005324:	0800bb98 	.word	0x0800bb98

08005328 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005334:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005340:	f7ff f9b8 	bl	80046b4 <HAL_PWREx_GetVoltageRange>
 8005344:	6178      	str	r0, [r7, #20]
 8005346:	e014      	b.n	8005372 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005348:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800534a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800534c:	4a24      	ldr	r2, [pc, #144]	; (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800534e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005352:	6593      	str	r3, [r2, #88]	; 0x58
 8005354:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005360:	f7ff f9a8 	bl	80046b4 <HAL_PWREx_GetVoltageRange>
 8005364:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005366:	4b1e      	ldr	r3, [pc, #120]	; (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800536a:	4a1d      	ldr	r2, [pc, #116]	; (80053e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800536c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005370:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005378:	d10b      	bne.n	8005392 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b80      	cmp	r3, #128	; 0x80
 800537e:	d919      	bls.n	80053b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2ba0      	cmp	r3, #160	; 0xa0
 8005384:	d902      	bls.n	800538c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005386:	2302      	movs	r3, #2
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	e013      	b.n	80053b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800538c:	2301      	movs	r3, #1
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	e010      	b.n	80053b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b80      	cmp	r3, #128	; 0x80
 8005396:	d902      	bls.n	800539e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005398:	2303      	movs	r3, #3
 800539a:	613b      	str	r3, [r7, #16]
 800539c:	e00a      	b.n	80053b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b80      	cmp	r3, #128	; 0x80
 80053a2:	d102      	bne.n	80053aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053a4:	2302      	movs	r3, #2
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	e004      	b.n	80053b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b70      	cmp	r3, #112	; 0x70
 80053ae:	d101      	bne.n	80053b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053b0:	2301      	movs	r3, #1
 80053b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f023 0207 	bic.w	r2, r3, #7
 80053bc:	4909      	ldr	r1, [pc, #36]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053c4:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d001      	beq.n	80053d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3718      	adds	r7, #24
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40021000 	.word	0x40021000
 80053e4:	40022000 	.word	0x40022000

080053e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053f0:	2300      	movs	r3, #0
 80053f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f4:	2300      	movs	r3, #0
 80053f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005400:	2b00      	cmp	r3, #0
 8005402:	d031      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800540c:	d01a      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800540e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005412:	d814      	bhi.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d009      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800541c:	d10f      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800541e:	4b5d      	ldr	r3, [pc, #372]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	4a5c      	ldr	r2, [pc, #368]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005428:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800542a:	e00c      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3304      	adds	r3, #4
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f000 f9f0 	bl	8005818 <RCCEx_PLLSAI1_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800543c:	e003      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	74fb      	strb	r3, [r7, #19]
      break;
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10b      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800544c:	4b51      	ldr	r3, [pc, #324]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800544e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005452:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	494e      	ldr	r1, [pc, #312]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005462:	e001      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	7cfb      	ldrb	r3, [r7, #19]
 8005466:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 809e 	beq.w	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005476:	2300      	movs	r3, #0
 8005478:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800547a:	4b46      	ldr	r3, [pc, #280]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800547c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800548a:	2300      	movs	r3, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00d      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005490:	4b40      	ldr	r3, [pc, #256]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005494:	4a3f      	ldr	r2, [pc, #252]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549a:	6593      	str	r3, [r2, #88]	; 0x58
 800549c:	4b3d      	ldr	r3, [pc, #244]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800549e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a8:	2301      	movs	r3, #1
 80054aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054ac:	4b3a      	ldr	r3, [pc, #232]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a39      	ldr	r2, [pc, #228]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054b8:	f7fc fd32 	bl	8001f20 <HAL_GetTick>
 80054bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054be:	e009      	b.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c0:	f7fc fd2e 	bl	8001f20 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d902      	bls.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	74fb      	strb	r3, [r7, #19]
        break;
 80054d2:	e005      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054d4:	4b30      	ldr	r3, [pc, #192]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0ef      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80054e0:	7cfb      	ldrb	r3, [r7, #19]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d15a      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054e6:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01e      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d019      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005502:	4b24      	ldr	r3, [pc, #144]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800550e:	4b21      	ldr	r3, [pc, #132]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800551a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800551e:	4b1d      	ldr	r3, [pc, #116]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800552e:	4a19      	ldr	r2, [pc, #100]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d016      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005540:	f7fc fcee 	bl	8001f20 <HAL_GetTick>
 8005544:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005546:	e00b      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005548:	f7fc fcea 	bl	8001f20 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	f241 3288 	movw	r2, #5000	; 0x1388
 8005556:	4293      	cmp	r3, r2
 8005558:	d902      	bls.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	74fb      	strb	r3, [r7, #19]
            break;
 800555e:	e006      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0ec      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800556e:	7cfb      	ldrb	r3, [r7, #19]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10b      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005574:	4b07      	ldr	r3, [pc, #28]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	4904      	ldr	r1, [pc, #16]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800558a:	e009      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	74bb      	strb	r3, [r7, #18]
 8005590:	e006      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005592:	bf00      	nop
 8005594:	40021000 	.word	0x40021000
 8005598:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055a0:	7c7b      	ldrb	r3, [r7, #17]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d105      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a6:	4b9b      	ldr	r3, [pc, #620]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055aa:	4a9a      	ldr	r2, [pc, #616]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055be:	4b95      	ldr	r3, [pc, #596]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f023 0203 	bic.w	r2, r3, #3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	4991      	ldr	r1, [pc, #580]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055e0:	4b8c      	ldr	r3, [pc, #560]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e6:	f023 020c 	bic.w	r2, r3, #12
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	4989      	ldr	r1, [pc, #548]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0304 	and.w	r3, r3, #4
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00a      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005602:	4b84      	ldr	r3, [pc, #528]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005608:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	4980      	ldr	r1, [pc, #512]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00a      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005624:	4b7b      	ldr	r3, [pc, #492]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	4978      	ldr	r1, [pc, #480]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005634:	4313      	orrs	r3, r2
 8005636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00a      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005646:	4b73      	ldr	r3, [pc, #460]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	496f      	ldr	r1, [pc, #444]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005668:	4b6a      	ldr	r3, [pc, #424]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800566a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800566e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	4967      	ldr	r1, [pc, #412]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800568a:	4b62      	ldr	r3, [pc, #392]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800568c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005690:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	495e      	ldr	r1, [pc, #376]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056ac:	4b59      	ldr	r3, [pc, #356]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ba:	4956      	ldr	r1, [pc, #344]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056ce:	4b51      	ldr	r3, [pc, #324]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	494d      	ldr	r1, [pc, #308]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d028      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056f0:	4b48      	ldr	r3, [pc, #288]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fe:	4945      	ldr	r1, [pc, #276]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800570e:	d106      	bne.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005710:	4b40      	ldr	r3, [pc, #256]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	4a3f      	ldr	r2, [pc, #252]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800571a:	60d3      	str	r3, [r2, #12]
 800571c:	e011      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005722:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005726:	d10c      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	2101      	movs	r1, #1
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f872 	bl	8005818 <RCCEx_PLLSAI1_Config>
 8005734:	4603      	mov	r3, r0
 8005736:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005738:	7cfb      	ldrb	r3, [r7, #19]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800573e:	7cfb      	ldrb	r3, [r7, #19]
 8005740:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d028      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800574e:	4b31      	ldr	r3, [pc, #196]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005754:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800575c:	492d      	ldr	r1, [pc, #180]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800575e:	4313      	orrs	r3, r2
 8005760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800576c:	d106      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800576e:	4b29      	ldr	r3, [pc, #164]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	4a28      	ldr	r2, [pc, #160]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005778:	60d3      	str	r3, [r2, #12]
 800577a:	e011      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005784:	d10c      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3304      	adds	r3, #4
 800578a:	2101      	movs	r1, #1
 800578c:	4618      	mov	r0, r3
 800578e:	f000 f843 	bl	8005818 <RCCEx_PLLSAI1_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005796:	7cfb      	ldrb	r3, [r7, #19]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800579c:	7cfb      	ldrb	r3, [r7, #19]
 800579e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01c      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057ac:	4b19      	ldr	r3, [pc, #100]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	4916      	ldr	r1, [pc, #88]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ca:	d10c      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	2102      	movs	r1, #2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f820 	bl	8005818 <RCCEx_PLLSAI1_Config>
 80057d8:	4603      	mov	r3, r0
 80057da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80057e2:	7cfb      	ldrb	r3, [r7, #19]
 80057e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057f2:	4b08      	ldr	r3, [pc, #32]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005800:	4904      	ldr	r1, [pc, #16]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005808:	7cbb      	ldrb	r3, [r7, #18]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40021000 	.word	0x40021000

08005818 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005826:	4b74      	ldr	r3, [pc, #464]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d018      	beq.n	8005864 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005832:	4b71      	ldr	r3, [pc, #452]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0203 	and.w	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d10d      	bne.n	800585e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
       ||
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800584a:	4b6b      	ldr	r3, [pc, #428]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
       ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d047      	beq.n	80058ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	73fb      	strb	r3, [r7, #15]
 8005862:	e044      	b.n	80058ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b03      	cmp	r3, #3
 800586a:	d018      	beq.n	800589e <RCCEx_PLLSAI1_Config+0x86>
 800586c:	2b03      	cmp	r3, #3
 800586e:	d825      	bhi.n	80058bc <RCCEx_PLLSAI1_Config+0xa4>
 8005870:	2b01      	cmp	r3, #1
 8005872:	d002      	beq.n	800587a <RCCEx_PLLSAI1_Config+0x62>
 8005874:	2b02      	cmp	r3, #2
 8005876:	d009      	beq.n	800588c <RCCEx_PLLSAI1_Config+0x74>
 8005878:	e020      	b.n	80058bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800587a:	4b5f      	ldr	r3, [pc, #380]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d11d      	bne.n	80058c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800588a:	e01a      	b.n	80058c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800588c:	4b5a      	ldr	r3, [pc, #360]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005894:	2b00      	cmp	r3, #0
 8005896:	d116      	bne.n	80058c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800589c:	e013      	b.n	80058c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800589e:	4b56      	ldr	r3, [pc, #344]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058aa:	4b53      	ldr	r3, [pc, #332]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058ba:	e006      	b.n	80058ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	73fb      	strb	r3, [r7, #15]
      break;
 80058c0:	e004      	b.n	80058cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058c2:	bf00      	nop
 80058c4:	e002      	b.n	80058cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058c6:	bf00      	nop
 80058c8:	e000      	b.n	80058cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10d      	bne.n	80058ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058d2:	4b49      	ldr	r3, [pc, #292]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6819      	ldr	r1, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	430b      	orrs	r3, r1
 80058e8:	4943      	ldr	r1, [pc, #268]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d17c      	bne.n	80059ee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058f4:	4b40      	ldr	r3, [pc, #256]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a3f      	ldr	r2, [pc, #252]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005900:	f7fc fb0e 	bl	8001f20 <HAL_GetTick>
 8005904:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005906:	e009      	b.n	800591c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005908:	f7fc fb0a 	bl	8001f20 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d902      	bls.n	800591c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	73fb      	strb	r3, [r7, #15]
        break;
 800591a:	e005      	b.n	8005928 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800591c:	4b36      	ldr	r3, [pc, #216]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ef      	bne.n	8005908 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d15f      	bne.n	80059ee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d110      	bne.n	8005956 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005934:	4b30      	ldr	r3, [pc, #192]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800593c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6892      	ldr	r2, [r2, #8]
 8005944:	0211      	lsls	r1, r2, #8
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	68d2      	ldr	r2, [r2, #12]
 800594a:	06d2      	lsls	r2, r2, #27
 800594c:	430a      	orrs	r2, r1
 800594e:	492a      	ldr	r1, [pc, #168]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005950:	4313      	orrs	r3, r2
 8005952:	610b      	str	r3, [r1, #16]
 8005954:	e027      	b.n	80059a6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d112      	bne.n	8005982 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800595c:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005964:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6892      	ldr	r2, [r2, #8]
 800596c:	0211      	lsls	r1, r2, #8
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6912      	ldr	r2, [r2, #16]
 8005972:	0852      	lsrs	r2, r2, #1
 8005974:	3a01      	subs	r2, #1
 8005976:	0552      	lsls	r2, r2, #21
 8005978:	430a      	orrs	r2, r1
 800597a:	491f      	ldr	r1, [pc, #124]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800597c:	4313      	orrs	r3, r2
 800597e:	610b      	str	r3, [r1, #16]
 8005980:	e011      	b.n	80059a6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005982:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800598a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6892      	ldr	r2, [r2, #8]
 8005992:	0211      	lsls	r1, r2, #8
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6952      	ldr	r2, [r2, #20]
 8005998:	0852      	lsrs	r2, r2, #1
 800599a:	3a01      	subs	r2, #1
 800599c:	0652      	lsls	r2, r2, #25
 800599e:	430a      	orrs	r2, r1
 80059a0:	4915      	ldr	r1, [pc, #84]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a13      	ldr	r2, [pc, #76]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b2:	f7fc fab5 	bl	8001f20 <HAL_GetTick>
 80059b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059b8:	e009      	b.n	80059ce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ba:	f7fc fab1 	bl	8001f20 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d902      	bls.n	80059ce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	73fb      	strb	r3, [r7, #15]
          break;
 80059cc:	e005      	b.n	80059da <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059ce:	4b0a      	ldr	r3, [pc, #40]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0ef      	beq.n	80059ba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80059e0:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	4903      	ldr	r1, [pc, #12]	; (80059f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40021000 	.word	0x40021000

080059fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e049      	b.n	8005aa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fc f838 	bl	8001a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f000 fa74 	bl	8005f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b082      	sub	sp, #8
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e049      	b.n	8005b50 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d106      	bne.n	8005ad6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f841 	bl	8005b58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f000 fa1d 	bl	8005f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e0ff      	b.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b14      	cmp	r3, #20
 8005b96:	f200 80f0 	bhi.w	8005d7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b9a:	a201      	add	r2, pc, #4	; (adr r2, 8005ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba0:	08005bf5 	.word	0x08005bf5
 8005ba4:	08005d7b 	.word	0x08005d7b
 8005ba8:	08005d7b 	.word	0x08005d7b
 8005bac:	08005d7b 	.word	0x08005d7b
 8005bb0:	08005c35 	.word	0x08005c35
 8005bb4:	08005d7b 	.word	0x08005d7b
 8005bb8:	08005d7b 	.word	0x08005d7b
 8005bbc:	08005d7b 	.word	0x08005d7b
 8005bc0:	08005c77 	.word	0x08005c77
 8005bc4:	08005d7b 	.word	0x08005d7b
 8005bc8:	08005d7b 	.word	0x08005d7b
 8005bcc:	08005d7b 	.word	0x08005d7b
 8005bd0:	08005cb7 	.word	0x08005cb7
 8005bd4:	08005d7b 	.word	0x08005d7b
 8005bd8:	08005d7b 	.word	0x08005d7b
 8005bdc:	08005d7b 	.word	0x08005d7b
 8005be0:	08005cf9 	.word	0x08005cf9
 8005be4:	08005d7b 	.word	0x08005d7b
 8005be8:	08005d7b 	.word	0x08005d7b
 8005bec:	08005d7b 	.word	0x08005d7b
 8005bf0:	08005d39 	.word	0x08005d39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 f9f8 	bl	8005ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0204 	bic.w	r2, r2, #4
 8005c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6999      	ldr	r1, [r3, #24]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	619a      	str	r2, [r3, #24]
      break;
 8005c32:	e0a5      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 fa54 	bl	80060e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6999      	ldr	r1, [r3, #24]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	619a      	str	r2, [r3, #24]
      break;
 8005c74:	e084      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 faad 	bl	80061dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69da      	ldr	r2, [r3, #28]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f042 0208 	orr.w	r2, r2, #8
 8005c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0204 	bic.w	r2, r2, #4
 8005ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69d9      	ldr	r1, [r3, #28]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	61da      	str	r2, [r3, #28]
      break;
 8005cb4:	e064      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 fb05 	bl	80062cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69da      	ldr	r2, [r3, #28]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69d9      	ldr	r1, [r3, #28]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	021a      	lsls	r2, r3, #8
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	61da      	str	r2, [r3, #28]
      break;
 8005cf6:	e043      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fb42 	bl	8006388 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0208 	orr.w	r2, r2, #8
 8005d12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0204 	bic.w	r2, r2, #4
 8005d22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d36:	e023      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68b9      	ldr	r1, [r7, #8]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fb7a 	bl	8006438 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	021a      	lsls	r2, r3, #8
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d78:	e002      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop

08005d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIM_ConfigClockSource+0x1c>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e0b6      	b.n	8005f1e <HAL_TIM_ConfigClockSource+0x18a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dec:	d03e      	beq.n	8005e6c <HAL_TIM_ConfigClockSource+0xd8>
 8005dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df2:	f200 8087 	bhi.w	8005f04 <HAL_TIM_ConfigClockSource+0x170>
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfa:	f000 8086 	beq.w	8005f0a <HAL_TIM_ConfigClockSource+0x176>
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e02:	d87f      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x170>
 8005e04:	2b70      	cmp	r3, #112	; 0x70
 8005e06:	d01a      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0xaa>
 8005e08:	2b70      	cmp	r3, #112	; 0x70
 8005e0a:	d87b      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x170>
 8005e0c:	2b60      	cmp	r3, #96	; 0x60
 8005e0e:	d050      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x11e>
 8005e10:	2b60      	cmp	r3, #96	; 0x60
 8005e12:	d877      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x170>
 8005e14:	2b50      	cmp	r3, #80	; 0x50
 8005e16:	d03c      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0xfe>
 8005e18:	2b50      	cmp	r3, #80	; 0x50
 8005e1a:	d873      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x170>
 8005e1c:	2b40      	cmp	r3, #64	; 0x40
 8005e1e:	d058      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x13e>
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d86f      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x170>
 8005e24:	2b30      	cmp	r3, #48	; 0x30
 8005e26:	d064      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8005e28:	2b30      	cmp	r3, #48	; 0x30
 8005e2a:	d86b      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x170>
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d060      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d867      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x170>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05c      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d05a      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x15e>
 8005e3c:	e062      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6899      	ldr	r1, [r3, #8]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f000 fbc7 	bl	80065e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	609a      	str	r2, [r3, #8]
      break;
 8005e6a:	e04f      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	6899      	ldr	r1, [r3, #8]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f000 fbb0 	bl	80065e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e8e:	609a      	str	r2, [r3, #8]
      break;
 8005e90:	e03c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6859      	ldr	r1, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f000 fb24 	bl	80064ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2150      	movs	r1, #80	; 0x50
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fb7d 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 8005eb0:	e02c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6859      	ldr	r1, [r3, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f000 fb43 	bl	800654a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2160      	movs	r1, #96	; 0x60
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fb6d 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 8005ed0:	e01c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f000 fb04 	bl	80064ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2140      	movs	r1, #64	; 0x40
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fb5d 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 8005ef0:	e00c      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f000 fb54 	bl	80065aa <TIM_ITRx_SetConfig>
      break;
 8005f02:	e003      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
      break;
 8005f08:	e000      	b.n	8005f0c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a2a      	ldr	r2, [pc, #168]	; (8005fe4 <TIM_Base_SetConfig+0xbc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d003      	beq.n	8005f48 <TIM_Base_SetConfig+0x20>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f46:	d108      	bne.n	8005f5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a21      	ldr	r2, [pc, #132]	; (8005fe4 <TIM_Base_SetConfig+0xbc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00b      	beq.n	8005f7a <TIM_Base_SetConfig+0x52>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f68:	d007      	beq.n	8005f7a <TIM_Base_SetConfig+0x52>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a1e      	ldr	r2, [pc, #120]	; (8005fe8 <TIM_Base_SetConfig+0xc0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_Base_SetConfig+0x52>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <TIM_Base_SetConfig+0xc4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d108      	bne.n	8005f8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a0c      	ldr	r2, [pc, #48]	; (8005fe4 <TIM_Base_SetConfig+0xbc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d007      	beq.n	8005fc8 <TIM_Base_SetConfig+0xa0>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a0b      	ldr	r2, [pc, #44]	; (8005fe8 <TIM_Base_SetConfig+0xc0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_Base_SetConfig+0xa0>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <TIM_Base_SetConfig+0xc4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d103      	bne.n	8005fd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	615a      	str	r2, [r3, #20]
}
 8005fd6:	bf00      	nop
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	40012c00 	.word	0x40012c00
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40014400 	.word	0x40014400

08005ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f023 0302 	bic.w	r3, r3, #2
 800603c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a24      	ldr	r2, [pc, #144]	; (80060dc <TIM_OC1_SetConfig+0xec>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d007      	beq.n	8006060 <TIM_OC1_SetConfig+0x70>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a23      	ldr	r2, [pc, #140]	; (80060e0 <TIM_OC1_SetConfig+0xf0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_OC1_SetConfig+0x70>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a22      	ldr	r2, [pc, #136]	; (80060e4 <TIM_OC1_SetConfig+0xf4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10c      	bne.n	800607a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0308 	bic.w	r3, r3, #8
 8006066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f023 0304 	bic.w	r3, r3, #4
 8006078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a17      	ldr	r2, [pc, #92]	; (80060dc <TIM_OC1_SetConfig+0xec>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <TIM_OC1_SetConfig+0xa2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a16      	ldr	r2, [pc, #88]	; (80060e0 <TIM_OC1_SetConfig+0xf0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_OC1_SetConfig+0xa2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <TIM_OC1_SetConfig+0xf4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d111      	bne.n	80060b6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	621a      	str	r2, [r3, #32]
}
 80060d0:	bf00      	nop
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40014000 	.word	0x40014000
 80060e4:	40014400 	.word	0x40014400

080060e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0210 	bic.w	r2, r3, #16
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0320 	bic.w	r3, r3, #32
 8006136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a22      	ldr	r2, [pc, #136]	; (80061d0 <TIM_OC2_SetConfig+0xe8>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d10d      	bne.n	8006168 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4313      	orrs	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <TIM_OC2_SetConfig+0xe8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_OC2_SetConfig+0x98>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <TIM_OC2_SetConfig+0xec>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_OC2_SetConfig+0x98>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <TIM_OC2_SetConfig+0xf0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d113      	bne.n	80061a8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800618e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4313      	orrs	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	621a      	str	r2, [r3, #32]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40014000 	.word	0x40014000
 80061d8:	40014400 	.word	0x40014400

080061dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a21      	ldr	r2, [pc, #132]	; (80062c0 <TIM_OC3_SetConfig+0xe4>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d10d      	bne.n	800625a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a18      	ldr	r2, [pc, #96]	; (80062c0 <TIM_OC3_SetConfig+0xe4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d007      	beq.n	8006272 <TIM_OC3_SetConfig+0x96>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a17      	ldr	r2, [pc, #92]	; (80062c4 <TIM_OC3_SetConfig+0xe8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d003      	beq.n	8006272 <TIM_OC3_SetConfig+0x96>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a16      	ldr	r2, [pc, #88]	; (80062c8 <TIM_OC3_SetConfig+0xec>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d113      	bne.n	800629a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40014000 	.word	0x40014000
 80062c8:	40014400 	.word	0x40014400

080062cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800631a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	031b      	lsls	r3, r3, #12
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a14      	ldr	r2, [pc, #80]	; (800637c <TIM_OC4_SetConfig+0xb0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <TIM_OC4_SetConfig+0x74>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a13      	ldr	r2, [pc, #76]	; (8006380 <TIM_OC4_SetConfig+0xb4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d003      	beq.n	8006340 <TIM_OC4_SetConfig+0x74>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a12      	ldr	r2, [pc, #72]	; (8006384 <TIM_OC4_SetConfig+0xb8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d109      	bne.n	8006354 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	019b      	lsls	r3, r3, #6
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	4313      	orrs	r3, r2
 8006352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	621a      	str	r2, [r3, #32]
}
 800636e:	bf00      	nop
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40012c00 	.word	0x40012c00
 8006380:	40014000 	.word	0x40014000
 8006384:	40014400 	.word	0x40014400

08006388 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	041b      	lsls	r3, r3, #16
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a13      	ldr	r2, [pc, #76]	; (800642c <TIM_OC5_SetConfig+0xa4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d007      	beq.n	80063f2 <TIM_OC5_SetConfig+0x6a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a12      	ldr	r2, [pc, #72]	; (8006430 <TIM_OC5_SetConfig+0xa8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_OC5_SetConfig+0x6a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a11      	ldr	r2, [pc, #68]	; (8006434 <TIM_OC5_SetConfig+0xac>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d109      	bne.n	8006406 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	621a      	str	r2, [r3, #32]
}
 8006420:	bf00      	nop
 8006422:	371c      	adds	r7, #28
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	40012c00 	.word	0x40012c00
 8006430:	40014000 	.word	0x40014000
 8006434:	40014400 	.word	0x40014400

08006438 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800645e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800647e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	051b      	lsls	r3, r3, #20
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a14      	ldr	r2, [pc, #80]	; (80064e0 <TIM_OC6_SetConfig+0xa8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d007      	beq.n	80064a4 <TIM_OC6_SetConfig+0x6c>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a13      	ldr	r2, [pc, #76]	; (80064e4 <TIM_OC6_SetConfig+0xac>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_OC6_SetConfig+0x6c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <TIM_OC6_SetConfig+0xb0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d109      	bne.n	80064b8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40012c00 	.word	0x40012c00
 80064e4:	40014000 	.word	0x40014000
 80064e8:	40014400 	.word	0x40014400

080064ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0201 	bic.w	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	011b      	lsls	r3, r3, #4
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f023 030a 	bic.w	r3, r3, #10
 8006528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800654a:	b480      	push	{r7}
 800654c:	b087      	sub	sp, #28
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	f023 0210 	bic.w	r2, r3, #16
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	031b      	lsls	r3, r3, #12
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006586:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	011b      	lsls	r3, r3, #4
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	4313      	orrs	r3, r2
 8006590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	621a      	str	r2, [r3, #32]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b085      	sub	sp, #20
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f043 0307 	orr.w	r3, r3, #7
 80065cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	609a      	str	r2, [r3, #8]
}
 80065d4:	bf00      	nop
 80065d6:	3714      	adds	r7, #20
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	021a      	lsls	r2, r3, #8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	431a      	orrs	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4313      	orrs	r3, r2
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4313      	orrs	r3, r2
 800660c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	609a      	str	r2, [r3, #8]
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006634:	2302      	movs	r3, #2
 8006636:	e04f      	b.n	80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a21      	ldr	r2, [pc, #132]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d108      	bne.n	8006674 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006668:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a14      	ldr	r2, [pc, #80]	; (80066e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d009      	beq.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a0:	d004      	beq.n	80066ac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a10      	ldr	r2, [pc, #64]	; (80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d10c      	bne.n	80066c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68ba      	ldr	r2, [r7, #8]
 80066c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40014000 	.word	0x40014000

080066ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006704:	2302      	movs	r3, #2
 8006706:	e060      	b.n	80067ca <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	4313      	orrs	r3, r2
 800672a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	041b      	lsls	r3, r3, #16
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a14      	ldr	r2, [pc, #80]	; (80067d8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d115      	bne.n	80067b8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	051b      	lsls	r3, r3, #20
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40012c00 	.word	0x40012c00

080067dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e040      	b.n	8006870 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fb f9b4 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2224      	movs	r2, #36	; 0x24
 8006808:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0201 	bic.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f8c0 	bl	80069a0 <UART_SetConfig>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e022      	b.n	8006870 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fb0e 	bl	8006e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fb95 	bl	8006f98 <UART_CheckIdleState>
 800686e:	4603      	mov	r3, r0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	; 0x28
 800687c:	af02      	add	r7, sp, #8
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800688c:	2b20      	cmp	r3, #32
 800688e:	f040 8082 	bne.w	8006996 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <HAL_UART_Transmit+0x26>
 8006898:	88fb      	ldrh	r3, [r7, #6]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e07a      	b.n	8006998 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d101      	bne.n	80068b0 <HAL_UART_Transmit+0x38>
 80068ac:	2302      	movs	r3, #2
 80068ae:	e073      	b.n	8006998 <HAL_UART_Transmit+0x120>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2221      	movs	r2, #33	; 0x21
 80068c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068c6:	f7fb fb2b 	bl	8001f20 <HAL_GetTick>
 80068ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	88fa      	ldrh	r2, [r7, #6]
 80068d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e4:	d108      	bne.n	80068f8 <HAL_UART_Transmit+0x80>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d104      	bne.n	80068f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	e003      	b.n	8006900 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068fc:	2300      	movs	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006908:	e02d      	b.n	8006966 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2200      	movs	r2, #0
 8006912:	2180      	movs	r1, #128	; 0x80
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 fb88 	bl	800702a <UART_WaitOnFlagUntilTimeout>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e039      	b.n	8006998 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10b      	bne.n	8006942 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	881a      	ldrh	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006936:	b292      	uxth	r2, r2
 8006938:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	3302      	adds	r3, #2
 800693e:	61bb      	str	r3, [r7, #24]
 8006940:	e008      	b.n	8006954 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	781a      	ldrb	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	b292      	uxth	r2, r2
 800694c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	3301      	adds	r3, #1
 8006952:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1cb      	bne.n	800690a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2200      	movs	r2, #0
 800697a:	2140      	movs	r1, #64	; 0x40
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 fb54 	bl	800702a <UART_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e005      	b.n	8006998 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2220      	movs	r2, #32
 8006990:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e000      	b.n	8006998 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006996:	2302      	movs	r3, #2
  }
}
 8006998:	4618      	mov	r0, r3
 800699a:	3720      	adds	r7, #32
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a4:	b08a      	sub	sp, #40	; 0x28
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	431a      	orrs	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	69db      	ldr	r3, [r3, #28]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b9e      	ldr	r3, [pc, #632]	; (8006c48 <UART_SetConfig+0x2a8>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069d8:	430b      	orrs	r3, r1
 80069da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	68da      	ldr	r2, [r3, #12]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a93      	ldr	r2, [pc, #588]	; (8006c4c <UART_SetConfig+0x2ac>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a8a      	ldr	r2, [pc, #552]	; (8006c50 <UART_SetConfig+0x2b0>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d126      	bne.n	8006a78 <UART_SetConfig+0xd8>
 8006a2a:	4b8a      	ldr	r3, [pc, #552]	; (8006c54 <UART_SetConfig+0x2b4>)
 8006a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d81b      	bhi.n	8006a70 <UART_SetConfig+0xd0>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <UART_SetConfig+0xa0>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a51 	.word	0x08006a51
 8006a44:	08006a61 	.word	0x08006a61
 8006a48:	08006a59 	.word	0x08006a59
 8006a4c:	08006a69 	.word	0x08006a69
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a56:	e0ab      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5e:	e0a7      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006a60:	2304      	movs	r3, #4
 8006a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a66:	e0a3      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006a68:	2308      	movs	r3, #8
 8006a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6e:	e09f      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006a70:	2310      	movs	r3, #16
 8006a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a76:	e09b      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a76      	ldr	r2, [pc, #472]	; (8006c58 <UART_SetConfig+0x2b8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d138      	bne.n	8006af4 <UART_SetConfig+0x154>
 8006a82:	4b74      	ldr	r3, [pc, #464]	; (8006c54 <UART_SetConfig+0x2b4>)
 8006a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a88:	f003 030c 	and.w	r3, r3, #12
 8006a8c:	2b0c      	cmp	r3, #12
 8006a8e:	d82d      	bhi.n	8006aec <UART_SetConfig+0x14c>
 8006a90:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <UART_SetConfig+0xf8>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006acd 	.word	0x08006acd
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	08006aed 	.word	0x08006aed
 8006aa4:	08006aed 	.word	0x08006aed
 8006aa8:	08006add 	.word	0x08006add
 8006aac:	08006aed 	.word	0x08006aed
 8006ab0:	08006aed 	.word	0x08006aed
 8006ab4:	08006aed 	.word	0x08006aed
 8006ab8:	08006ad5 	.word	0x08006ad5
 8006abc:	08006aed 	.word	0x08006aed
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	08006aed 	.word	0x08006aed
 8006ac8:	08006ae5 	.word	0x08006ae5
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad2:	e06d      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ada:	e069      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae2:	e065      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e061      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e05d      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a58      	ldr	r2, [pc, #352]	; (8006c5c <UART_SetConfig+0x2bc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d125      	bne.n	8006b4a <UART_SetConfig+0x1aa>
 8006afe:	4b55      	ldr	r3, [pc, #340]	; (8006c54 <UART_SetConfig+0x2b4>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b08:	2b30      	cmp	r3, #48	; 0x30
 8006b0a:	d016      	beq.n	8006b3a <UART_SetConfig+0x19a>
 8006b0c:	2b30      	cmp	r3, #48	; 0x30
 8006b0e:	d818      	bhi.n	8006b42 <UART_SetConfig+0x1a2>
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d00a      	beq.n	8006b2a <UART_SetConfig+0x18a>
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d814      	bhi.n	8006b42 <UART_SetConfig+0x1a2>
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <UART_SetConfig+0x182>
 8006b1c:	2b10      	cmp	r3, #16
 8006b1e:	d008      	beq.n	8006b32 <UART_SetConfig+0x192>
 8006b20:	e00f      	b.n	8006b42 <UART_SetConfig+0x1a2>
 8006b22:	2300      	movs	r3, #0
 8006b24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b28:	e042      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b30:	e03e      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006b32:	2304      	movs	r3, #4
 8006b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b38:	e03a      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b40:	e036      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006b42:	2310      	movs	r3, #16
 8006b44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b48:	e032      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a3f      	ldr	r2, [pc, #252]	; (8006c4c <UART_SetConfig+0x2ac>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d12a      	bne.n	8006baa <UART_SetConfig+0x20a>
 8006b54:	4b3f      	ldr	r3, [pc, #252]	; (8006c54 <UART_SetConfig+0x2b4>)
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b62:	d01a      	beq.n	8006b9a <UART_SetConfig+0x1fa>
 8006b64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b68:	d81b      	bhi.n	8006ba2 <UART_SetConfig+0x202>
 8006b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b6e:	d00c      	beq.n	8006b8a <UART_SetConfig+0x1ea>
 8006b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b74:	d815      	bhi.n	8006ba2 <UART_SetConfig+0x202>
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <UART_SetConfig+0x1e2>
 8006b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b7e:	d008      	beq.n	8006b92 <UART_SetConfig+0x1f2>
 8006b80:	e00f      	b.n	8006ba2 <UART_SetConfig+0x202>
 8006b82:	2300      	movs	r3, #0
 8006b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b88:	e012      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b90:	e00e      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006b92:	2304      	movs	r3, #4
 8006b94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b98:	e00a      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006b9a:	2308      	movs	r3, #8
 8006b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba0:	e006      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006ba2:	2310      	movs	r3, #16
 8006ba4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba8:	e002      	b.n	8006bb0 <UART_SetConfig+0x210>
 8006baa:	2310      	movs	r3, #16
 8006bac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a25      	ldr	r2, [pc, #148]	; (8006c4c <UART_SetConfig+0x2ac>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	f040 808a 	bne.w	8006cd0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d824      	bhi.n	8006c0e <UART_SetConfig+0x26e>
 8006bc4:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <UART_SetConfig+0x22c>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006bf1 	.word	0x08006bf1
 8006bd0:	08006c0f 	.word	0x08006c0f
 8006bd4:	08006bf9 	.word	0x08006bf9
 8006bd8:	08006c0f 	.word	0x08006c0f
 8006bdc:	08006bff 	.word	0x08006bff
 8006be0:	08006c0f 	.word	0x08006c0f
 8006be4:	08006c0f 	.word	0x08006c0f
 8006be8:	08006c0f 	.word	0x08006c0f
 8006bec:	08006c07 	.word	0x08006c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bf0:	f7fe fb6e 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 8006bf4:	61f8      	str	r0, [r7, #28]
        break;
 8006bf6:	e010      	b.n	8006c1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf8:	4b19      	ldr	r3, [pc, #100]	; (8006c60 <UART_SetConfig+0x2c0>)
 8006bfa:	61fb      	str	r3, [r7, #28]
        break;
 8006bfc:	e00d      	b.n	8006c1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bfe:	f7fe fad1 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8006c02:	61f8      	str	r0, [r7, #28]
        break;
 8006c04:	e009      	b.n	8006c1a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c0a:	61fb      	str	r3, [r7, #28]
        break;
 8006c0c:	e005      	b.n	8006c1a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8109 	beq.w	8006e34 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	4613      	mov	r3, r2
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	4413      	add	r3, r2
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d305      	bcc.n	8006c3e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c38:	69fa      	ldr	r2, [r7, #28]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d912      	bls.n	8006c64 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c44:	e0f6      	b.n	8006e34 <UART_SetConfig+0x494>
 8006c46:	bf00      	nop
 8006c48:	efff69f3 	.word	0xefff69f3
 8006c4c:	40008000 	.word	0x40008000
 8006c50:	40013800 	.word	0x40013800
 8006c54:	40021000 	.word	0x40021000
 8006c58:	40004400 	.word	0x40004400
 8006c5c:	40004800 	.word	0x40004800
 8006c60:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2200      	movs	r2, #0
 8006c68:	461c      	mov	r4, r3
 8006c6a:	4615      	mov	r5, r2
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	022b      	lsls	r3, r5, #8
 8006c76:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c7a:	0222      	lsls	r2, r4, #8
 8006c7c:	68f9      	ldr	r1, [r7, #12]
 8006c7e:	6849      	ldr	r1, [r1, #4]
 8006c80:	0849      	lsrs	r1, r1, #1
 8006c82:	2000      	movs	r0, #0
 8006c84:	4688      	mov	r8, r1
 8006c86:	4681      	mov	r9, r0
 8006c88:	eb12 0a08 	adds.w	sl, r2, r8
 8006c8c:	eb43 0b09 	adc.w	fp, r3, r9
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	607a      	str	r2, [r7, #4]
 8006c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c9e:	4650      	mov	r0, sl
 8006ca0:	4659      	mov	r1, fp
 8006ca2:	f7f9 fff1 	bl	8000c88 <__aeabi_uldivmod>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4613      	mov	r3, r2
 8006cac:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb4:	d308      	bcc.n	8006cc8 <UART_SetConfig+0x328>
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cbc:	d204      	bcs.n	8006cc8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	60da      	str	r2, [r3, #12]
 8006cc6:	e0b5      	b.n	8006e34 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cce:	e0b1      	b.n	8006e34 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cd8:	d15d      	bne.n	8006d96 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006cda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d827      	bhi.n	8006d32 <UART_SetConfig+0x392>
 8006ce2:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <UART_SetConfig+0x348>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006d0d 	.word	0x08006d0d
 8006cec:	08006d15 	.word	0x08006d15
 8006cf0:	08006d1d 	.word	0x08006d1d
 8006cf4:	08006d33 	.word	0x08006d33
 8006cf8:	08006d23 	.word	0x08006d23
 8006cfc:	08006d33 	.word	0x08006d33
 8006d00:	08006d33 	.word	0x08006d33
 8006d04:	08006d33 	.word	0x08006d33
 8006d08:	08006d2b 	.word	0x08006d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d0c:	f7fe fae0 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 8006d10:	61f8      	str	r0, [r7, #28]
        break;
 8006d12:	e014      	b.n	8006d3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d14:	f7fe faf2 	bl	80052fc <HAL_RCC_GetPCLK2Freq>
 8006d18:	61f8      	str	r0, [r7, #28]
        break;
 8006d1a:	e010      	b.n	8006d3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d1c:	4b4c      	ldr	r3, [pc, #304]	; (8006e50 <UART_SetConfig+0x4b0>)
 8006d1e:	61fb      	str	r3, [r7, #28]
        break;
 8006d20:	e00d      	b.n	8006d3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d22:	f7fe fa3f 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8006d26:	61f8      	str	r0, [r7, #28]
        break;
 8006d28:	e009      	b.n	8006d3e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2e:	61fb      	str	r3, [r7, #28]
        break;
 8006d30:	e005      	b.n	8006d3e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d077      	beq.n	8006e34 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	005a      	lsls	r2, r3, #1
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	441a      	add	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b0f      	cmp	r3, #15
 8006d5e:	d916      	bls.n	8006d8e <UART_SetConfig+0x3ee>
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d66:	d212      	bcs.n	8006d8e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f023 030f 	bic.w	r3, r3, #15
 8006d70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	085b      	lsrs	r3, r3, #1
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	8afb      	ldrh	r3, [r7, #22]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	8afa      	ldrh	r2, [r7, #22]
 8006d8a:	60da      	str	r2, [r3, #12]
 8006d8c:	e052      	b.n	8006e34 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d94:	e04e      	b.n	8006e34 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d827      	bhi.n	8006dee <UART_SetConfig+0x44e>
 8006d9e:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <UART_SetConfig+0x404>)
 8006da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006dd9 	.word	0x08006dd9
 8006db0:	08006def 	.word	0x08006def
 8006db4:	08006ddf 	.word	0x08006ddf
 8006db8:	08006def 	.word	0x08006def
 8006dbc:	08006def 	.word	0x08006def
 8006dc0:	08006def 	.word	0x08006def
 8006dc4:	08006de7 	.word	0x08006de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc8:	f7fe fa82 	bl	80052d0 <HAL_RCC_GetPCLK1Freq>
 8006dcc:	61f8      	str	r0, [r7, #28]
        break;
 8006dce:	e014      	b.n	8006dfa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dd0:	f7fe fa94 	bl	80052fc <HAL_RCC_GetPCLK2Freq>
 8006dd4:	61f8      	str	r0, [r7, #28]
        break;
 8006dd6:	e010      	b.n	8006dfa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd8:	4b1d      	ldr	r3, [pc, #116]	; (8006e50 <UART_SetConfig+0x4b0>)
 8006dda:	61fb      	str	r3, [r7, #28]
        break;
 8006ddc:	e00d      	b.n	8006dfa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dde:	f7fe f9e1 	bl	80051a4 <HAL_RCC_GetSysClockFreq>
 8006de2:	61f8      	str	r0, [r7, #28]
        break;
 8006de4:	e009      	b.n	8006dfa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dea:	61fb      	str	r3, [r7, #28]
        break;
 8006dec:	e005      	b.n	8006dfa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006df8:	bf00      	nop
    }

    if (pclk != 0U)
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d019      	beq.n	8006e34 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	085a      	lsrs	r2, r3, #1
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	441a      	add	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b0f      	cmp	r3, #15
 8006e18:	d909      	bls.n	8006e2e <UART_SetConfig+0x48e>
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e20:	d205      	bcs.n	8006e2e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	e002      	b.n	8006e34 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3728      	adds	r7, #40	; 0x28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4e:	bf00      	nop
 8006e50:	00f42400 	.word	0x00f42400

08006e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00a      	beq.n	8006ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01a      	beq.n	8006f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f52:	d10a      	bne.n	8006f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fa8:	f7fa ffba 	bl	8001f20 <HAL_GetTick>
 8006fac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d10e      	bne.n	8006fda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f82d 	bl	800702a <UART_WaitOnFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e023      	b.n	8007022 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d10e      	bne.n	8007006 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f817 	bl	800702a <UART_WaitOnFlagUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e00d      	b.n	8007022 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b09c      	sub	sp, #112	; 0x70
 800702e:	af00      	add	r7, sp, #0
 8007030:	60f8      	str	r0, [r7, #12]
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	603b      	str	r3, [r7, #0]
 8007036:	4613      	mov	r3, r2
 8007038:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703a:	e0a5      	b.n	8007188 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800703c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007042:	f000 80a1 	beq.w	8007188 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007046:	f7fa ff6b 	bl	8001f20 <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007052:	429a      	cmp	r2, r3
 8007054:	d302      	bcc.n	800705c <UART_WaitOnFlagUntilTimeout+0x32>
 8007056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007058:	2b00      	cmp	r3, #0
 800705a:	d13e      	bne.n	80070da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800706a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007070:	667b      	str	r3, [r7, #100]	; 0x64
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800707a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800707c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007080:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e6      	bne.n	800705c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	663b      	str	r3, [r7, #96]	; 0x60
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80070b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e5      	bne.n	800708e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2220      	movs	r2, #32
 80070cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e067      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d04f      	beq.n	8007188 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f6:	d147      	bne.n	8007188 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007100:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007116:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	461a      	mov	r2, r3
 800711e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007120:	637b      	str	r3, [r7, #52]	; 0x34
 8007122:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e6      	bne.n	8007102 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3308      	adds	r3, #8
 800713a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	613b      	str	r3, [r7, #16]
   return(result);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f023 0301 	bic.w	r3, r3, #1
 800714a:	66bb      	str	r3, [r7, #104]	; 0x68
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3308      	adds	r3, #8
 8007152:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007154:	623a      	str	r2, [r7, #32]
 8007156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	69f9      	ldr	r1, [r7, #28]
 800715a:	6a3a      	ldr	r2, [r7, #32]
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	61bb      	str	r3, [r7, #24]
   return(result);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e5      	bne.n	8007134 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2220      	movs	r2, #32
 8007172:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2220      	movs	r2, #32
 8007178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e010      	b.n	80071aa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69da      	ldr	r2, [r3, #28]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	4013      	ands	r3, r2
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	429a      	cmp	r2, r3
 8007196:	bf0c      	ite	eq
 8007198:	2301      	moveq	r3, #1
 800719a:	2300      	movne	r3, #0
 800719c:	b2db      	uxtb	r3, r3
 800719e:	461a      	mov	r2, r3
 80071a0:	79fb      	ldrb	r3, [r7, #7]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	f43f af4a 	beq.w	800703c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3770      	adds	r7, #112	; 0x70
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <__errno>:
 80071b4:	4b01      	ldr	r3, [pc, #4]	; (80071bc <__errno+0x8>)
 80071b6:	6818      	ldr	r0, [r3, #0]
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	2000000c 	.word	0x2000000c

080071c0 <__libc_init_array>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	4d0d      	ldr	r5, [pc, #52]	; (80071f8 <__libc_init_array+0x38>)
 80071c4:	4c0d      	ldr	r4, [pc, #52]	; (80071fc <__libc_init_array+0x3c>)
 80071c6:	1b64      	subs	r4, r4, r5
 80071c8:	10a4      	asrs	r4, r4, #2
 80071ca:	2600      	movs	r6, #0
 80071cc:	42a6      	cmp	r6, r4
 80071ce:	d109      	bne.n	80071e4 <__libc_init_array+0x24>
 80071d0:	4d0b      	ldr	r5, [pc, #44]	; (8007200 <__libc_init_array+0x40>)
 80071d2:	4c0c      	ldr	r4, [pc, #48]	; (8007204 <__libc_init_array+0x44>)
 80071d4:	f004 fca8 	bl	800bb28 <_init>
 80071d8:	1b64      	subs	r4, r4, r5
 80071da:	10a4      	asrs	r4, r4, #2
 80071dc:	2600      	movs	r6, #0
 80071de:	42a6      	cmp	r6, r4
 80071e0:	d105      	bne.n	80071ee <__libc_init_array+0x2e>
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
 80071e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e8:	4798      	blx	r3
 80071ea:	3601      	adds	r6, #1
 80071ec:	e7ee      	b.n	80071cc <__libc_init_array+0xc>
 80071ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f2:	4798      	blx	r3
 80071f4:	3601      	adds	r6, #1
 80071f6:	e7f2      	b.n	80071de <__libc_init_array+0x1e>
 80071f8:	0800c084 	.word	0x0800c084
 80071fc:	0800c084 	.word	0x0800c084
 8007200:	0800c084 	.word	0x0800c084
 8007204:	0800c088 	.word	0x0800c088

08007208 <memset>:
 8007208:	4402      	add	r2, r0
 800720a:	4603      	mov	r3, r0
 800720c:	4293      	cmp	r3, r2
 800720e:	d100      	bne.n	8007212 <memset+0xa>
 8007210:	4770      	bx	lr
 8007212:	f803 1b01 	strb.w	r1, [r3], #1
 8007216:	e7f9      	b.n	800720c <memset+0x4>

08007218 <__cvt>:
 8007218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800721c:	ec55 4b10 	vmov	r4, r5, d0
 8007220:	2d00      	cmp	r5, #0
 8007222:	460e      	mov	r6, r1
 8007224:	4619      	mov	r1, r3
 8007226:	462b      	mov	r3, r5
 8007228:	bfbb      	ittet	lt
 800722a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800722e:	461d      	movlt	r5, r3
 8007230:	2300      	movge	r3, #0
 8007232:	232d      	movlt	r3, #45	; 0x2d
 8007234:	700b      	strb	r3, [r1, #0]
 8007236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007238:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800723c:	4691      	mov	r9, r2
 800723e:	f023 0820 	bic.w	r8, r3, #32
 8007242:	bfbc      	itt	lt
 8007244:	4622      	movlt	r2, r4
 8007246:	4614      	movlt	r4, r2
 8007248:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800724c:	d005      	beq.n	800725a <__cvt+0x42>
 800724e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007252:	d100      	bne.n	8007256 <__cvt+0x3e>
 8007254:	3601      	adds	r6, #1
 8007256:	2102      	movs	r1, #2
 8007258:	e000      	b.n	800725c <__cvt+0x44>
 800725a:	2103      	movs	r1, #3
 800725c:	ab03      	add	r3, sp, #12
 800725e:	9301      	str	r3, [sp, #4]
 8007260:	ab02      	add	r3, sp, #8
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	ec45 4b10 	vmov	d0, r4, r5
 8007268:	4653      	mov	r3, sl
 800726a:	4632      	mov	r2, r6
 800726c:	f001 fdc4 	bl	8008df8 <_dtoa_r>
 8007270:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007274:	4607      	mov	r7, r0
 8007276:	d102      	bne.n	800727e <__cvt+0x66>
 8007278:	f019 0f01 	tst.w	r9, #1
 800727c:	d022      	beq.n	80072c4 <__cvt+0xac>
 800727e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007282:	eb07 0906 	add.w	r9, r7, r6
 8007286:	d110      	bne.n	80072aa <__cvt+0x92>
 8007288:	783b      	ldrb	r3, [r7, #0]
 800728a:	2b30      	cmp	r3, #48	; 0x30
 800728c:	d10a      	bne.n	80072a4 <__cvt+0x8c>
 800728e:	2200      	movs	r2, #0
 8007290:	2300      	movs	r3, #0
 8007292:	4620      	mov	r0, r4
 8007294:	4629      	mov	r1, r5
 8007296:	f7f9 fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800729a:	b918      	cbnz	r0, 80072a4 <__cvt+0x8c>
 800729c:	f1c6 0601 	rsb	r6, r6, #1
 80072a0:	f8ca 6000 	str.w	r6, [sl]
 80072a4:	f8da 3000 	ldr.w	r3, [sl]
 80072a8:	4499      	add	r9, r3
 80072aa:	2200      	movs	r2, #0
 80072ac:	2300      	movs	r3, #0
 80072ae:	4620      	mov	r0, r4
 80072b0:	4629      	mov	r1, r5
 80072b2:	f7f9 fc09 	bl	8000ac8 <__aeabi_dcmpeq>
 80072b6:	b108      	cbz	r0, 80072bc <__cvt+0xa4>
 80072b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80072bc:	2230      	movs	r2, #48	; 0x30
 80072be:	9b03      	ldr	r3, [sp, #12]
 80072c0:	454b      	cmp	r3, r9
 80072c2:	d307      	bcc.n	80072d4 <__cvt+0xbc>
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072c8:	1bdb      	subs	r3, r3, r7
 80072ca:	4638      	mov	r0, r7
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	b004      	add	sp, #16
 80072d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d4:	1c59      	adds	r1, r3, #1
 80072d6:	9103      	str	r1, [sp, #12]
 80072d8:	701a      	strb	r2, [r3, #0]
 80072da:	e7f0      	b.n	80072be <__cvt+0xa6>

080072dc <__exponent>:
 80072dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072de:	4603      	mov	r3, r0
 80072e0:	2900      	cmp	r1, #0
 80072e2:	bfb8      	it	lt
 80072e4:	4249      	neglt	r1, r1
 80072e6:	f803 2b02 	strb.w	r2, [r3], #2
 80072ea:	bfb4      	ite	lt
 80072ec:	222d      	movlt	r2, #45	; 0x2d
 80072ee:	222b      	movge	r2, #43	; 0x2b
 80072f0:	2909      	cmp	r1, #9
 80072f2:	7042      	strb	r2, [r0, #1]
 80072f4:	dd2a      	ble.n	800734c <__exponent+0x70>
 80072f6:	f10d 0407 	add.w	r4, sp, #7
 80072fa:	46a4      	mov	ip, r4
 80072fc:	270a      	movs	r7, #10
 80072fe:	46a6      	mov	lr, r4
 8007300:	460a      	mov	r2, r1
 8007302:	fb91 f6f7 	sdiv	r6, r1, r7
 8007306:	fb07 1516 	mls	r5, r7, r6, r1
 800730a:	3530      	adds	r5, #48	; 0x30
 800730c:	2a63      	cmp	r2, #99	; 0x63
 800730e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007312:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007316:	4631      	mov	r1, r6
 8007318:	dcf1      	bgt.n	80072fe <__exponent+0x22>
 800731a:	3130      	adds	r1, #48	; 0x30
 800731c:	f1ae 0502 	sub.w	r5, lr, #2
 8007320:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007324:	1c44      	adds	r4, r0, #1
 8007326:	4629      	mov	r1, r5
 8007328:	4561      	cmp	r1, ip
 800732a:	d30a      	bcc.n	8007342 <__exponent+0x66>
 800732c:	f10d 0209 	add.w	r2, sp, #9
 8007330:	eba2 020e 	sub.w	r2, r2, lr
 8007334:	4565      	cmp	r5, ip
 8007336:	bf88      	it	hi
 8007338:	2200      	movhi	r2, #0
 800733a:	4413      	add	r3, r2
 800733c:	1a18      	subs	r0, r3, r0
 800733e:	b003      	add	sp, #12
 8007340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007346:	f804 2f01 	strb.w	r2, [r4, #1]!
 800734a:	e7ed      	b.n	8007328 <__exponent+0x4c>
 800734c:	2330      	movs	r3, #48	; 0x30
 800734e:	3130      	adds	r1, #48	; 0x30
 8007350:	7083      	strb	r3, [r0, #2]
 8007352:	70c1      	strb	r1, [r0, #3]
 8007354:	1d03      	adds	r3, r0, #4
 8007356:	e7f1      	b.n	800733c <__exponent+0x60>

08007358 <_printf_float>:
 8007358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	ed2d 8b02 	vpush	{d8}
 8007360:	b08d      	sub	sp, #52	; 0x34
 8007362:	460c      	mov	r4, r1
 8007364:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007368:	4616      	mov	r6, r2
 800736a:	461f      	mov	r7, r3
 800736c:	4605      	mov	r5, r0
 800736e:	f002 ff95 	bl	800a29c <_localeconv_r>
 8007372:	f8d0 a000 	ldr.w	sl, [r0]
 8007376:	4650      	mov	r0, sl
 8007378:	f7f8 ff2a 	bl	80001d0 <strlen>
 800737c:	2300      	movs	r3, #0
 800737e:	930a      	str	r3, [sp, #40]	; 0x28
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	9305      	str	r3, [sp, #20]
 8007384:	f8d8 3000 	ldr.w	r3, [r8]
 8007388:	f894 b018 	ldrb.w	fp, [r4, #24]
 800738c:	3307      	adds	r3, #7
 800738e:	f023 0307 	bic.w	r3, r3, #7
 8007392:	f103 0208 	add.w	r2, r3, #8
 8007396:	f8c8 2000 	str.w	r2, [r8]
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80073a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073aa:	9307      	str	r3, [sp, #28]
 80073ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80073b0:	ee08 0a10 	vmov	s16, r0
 80073b4:	4b9f      	ldr	r3, [pc, #636]	; (8007634 <_printf_float+0x2dc>)
 80073b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073be:	f7f9 fbb5 	bl	8000b2c <__aeabi_dcmpun>
 80073c2:	bb88      	cbnz	r0, 8007428 <_printf_float+0xd0>
 80073c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073c8:	4b9a      	ldr	r3, [pc, #616]	; (8007634 <_printf_float+0x2dc>)
 80073ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073ce:	f7f9 fb8f 	bl	8000af0 <__aeabi_dcmple>
 80073d2:	bb48      	cbnz	r0, 8007428 <_printf_float+0xd0>
 80073d4:	2200      	movs	r2, #0
 80073d6:	2300      	movs	r3, #0
 80073d8:	4640      	mov	r0, r8
 80073da:	4649      	mov	r1, r9
 80073dc:	f7f9 fb7e 	bl	8000adc <__aeabi_dcmplt>
 80073e0:	b110      	cbz	r0, 80073e8 <_printf_float+0x90>
 80073e2:	232d      	movs	r3, #45	; 0x2d
 80073e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073e8:	4b93      	ldr	r3, [pc, #588]	; (8007638 <_printf_float+0x2e0>)
 80073ea:	4894      	ldr	r0, [pc, #592]	; (800763c <_printf_float+0x2e4>)
 80073ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80073f0:	bf94      	ite	ls
 80073f2:	4698      	movls	r8, r3
 80073f4:	4680      	movhi	r8, r0
 80073f6:	2303      	movs	r3, #3
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	9b05      	ldr	r3, [sp, #20]
 80073fc:	f023 0204 	bic.w	r2, r3, #4
 8007400:	6022      	str	r2, [r4, #0]
 8007402:	f04f 0900 	mov.w	r9, #0
 8007406:	9700      	str	r7, [sp, #0]
 8007408:	4633      	mov	r3, r6
 800740a:	aa0b      	add	r2, sp, #44	; 0x2c
 800740c:	4621      	mov	r1, r4
 800740e:	4628      	mov	r0, r5
 8007410:	f000 f9d8 	bl	80077c4 <_printf_common>
 8007414:	3001      	adds	r0, #1
 8007416:	f040 8090 	bne.w	800753a <_printf_float+0x1e2>
 800741a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800741e:	b00d      	add	sp, #52	; 0x34
 8007420:	ecbd 8b02 	vpop	{d8}
 8007424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007428:	4642      	mov	r2, r8
 800742a:	464b      	mov	r3, r9
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f7f9 fb7c 	bl	8000b2c <__aeabi_dcmpun>
 8007434:	b140      	cbz	r0, 8007448 <_printf_float+0xf0>
 8007436:	464b      	mov	r3, r9
 8007438:	2b00      	cmp	r3, #0
 800743a:	bfbc      	itt	lt
 800743c:	232d      	movlt	r3, #45	; 0x2d
 800743e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007442:	487f      	ldr	r0, [pc, #508]	; (8007640 <_printf_float+0x2e8>)
 8007444:	4b7f      	ldr	r3, [pc, #508]	; (8007644 <_printf_float+0x2ec>)
 8007446:	e7d1      	b.n	80073ec <_printf_float+0x94>
 8007448:	6863      	ldr	r3, [r4, #4]
 800744a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800744e:	9206      	str	r2, [sp, #24]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	d13f      	bne.n	80074d4 <_printf_float+0x17c>
 8007454:	2306      	movs	r3, #6
 8007456:	6063      	str	r3, [r4, #4]
 8007458:	9b05      	ldr	r3, [sp, #20]
 800745a:	6861      	ldr	r1, [r4, #4]
 800745c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007460:	2300      	movs	r3, #0
 8007462:	9303      	str	r3, [sp, #12]
 8007464:	ab0a      	add	r3, sp, #40	; 0x28
 8007466:	e9cd b301 	strd	fp, r3, [sp, #4]
 800746a:	ab09      	add	r3, sp, #36	; 0x24
 800746c:	ec49 8b10 	vmov	d0, r8, r9
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	6022      	str	r2, [r4, #0]
 8007474:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007478:	4628      	mov	r0, r5
 800747a:	f7ff fecd 	bl	8007218 <__cvt>
 800747e:	9b06      	ldr	r3, [sp, #24]
 8007480:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007482:	2b47      	cmp	r3, #71	; 0x47
 8007484:	4680      	mov	r8, r0
 8007486:	d108      	bne.n	800749a <_printf_float+0x142>
 8007488:	1cc8      	adds	r0, r1, #3
 800748a:	db02      	blt.n	8007492 <_printf_float+0x13a>
 800748c:	6863      	ldr	r3, [r4, #4]
 800748e:	4299      	cmp	r1, r3
 8007490:	dd41      	ble.n	8007516 <_printf_float+0x1be>
 8007492:	f1ab 0b02 	sub.w	fp, fp, #2
 8007496:	fa5f fb8b 	uxtb.w	fp, fp
 800749a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800749e:	d820      	bhi.n	80074e2 <_printf_float+0x18a>
 80074a0:	3901      	subs	r1, #1
 80074a2:	465a      	mov	r2, fp
 80074a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074a8:	9109      	str	r1, [sp, #36]	; 0x24
 80074aa:	f7ff ff17 	bl	80072dc <__exponent>
 80074ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074b0:	1813      	adds	r3, r2, r0
 80074b2:	2a01      	cmp	r2, #1
 80074b4:	4681      	mov	r9, r0
 80074b6:	6123      	str	r3, [r4, #16]
 80074b8:	dc02      	bgt.n	80074c0 <_printf_float+0x168>
 80074ba:	6822      	ldr	r2, [r4, #0]
 80074bc:	07d2      	lsls	r2, r2, #31
 80074be:	d501      	bpl.n	80074c4 <_printf_float+0x16c>
 80074c0:	3301      	adds	r3, #1
 80074c2:	6123      	str	r3, [r4, #16]
 80074c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d09c      	beq.n	8007406 <_printf_float+0xae>
 80074cc:	232d      	movs	r3, #45	; 0x2d
 80074ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d2:	e798      	b.n	8007406 <_printf_float+0xae>
 80074d4:	9a06      	ldr	r2, [sp, #24]
 80074d6:	2a47      	cmp	r2, #71	; 0x47
 80074d8:	d1be      	bne.n	8007458 <_printf_float+0x100>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1bc      	bne.n	8007458 <_printf_float+0x100>
 80074de:	2301      	movs	r3, #1
 80074e0:	e7b9      	b.n	8007456 <_printf_float+0xfe>
 80074e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80074e6:	d118      	bne.n	800751a <_printf_float+0x1c2>
 80074e8:	2900      	cmp	r1, #0
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	dd0b      	ble.n	8007506 <_printf_float+0x1ae>
 80074ee:	6121      	str	r1, [r4, #16]
 80074f0:	b913      	cbnz	r3, 80074f8 <_printf_float+0x1a0>
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	07d0      	lsls	r0, r2, #31
 80074f6:	d502      	bpl.n	80074fe <_printf_float+0x1a6>
 80074f8:	3301      	adds	r3, #1
 80074fa:	440b      	add	r3, r1
 80074fc:	6123      	str	r3, [r4, #16]
 80074fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007500:	f04f 0900 	mov.w	r9, #0
 8007504:	e7de      	b.n	80074c4 <_printf_float+0x16c>
 8007506:	b913      	cbnz	r3, 800750e <_printf_float+0x1b6>
 8007508:	6822      	ldr	r2, [r4, #0]
 800750a:	07d2      	lsls	r2, r2, #31
 800750c:	d501      	bpl.n	8007512 <_printf_float+0x1ba>
 800750e:	3302      	adds	r3, #2
 8007510:	e7f4      	b.n	80074fc <_printf_float+0x1a4>
 8007512:	2301      	movs	r3, #1
 8007514:	e7f2      	b.n	80074fc <_printf_float+0x1a4>
 8007516:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800751a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800751c:	4299      	cmp	r1, r3
 800751e:	db05      	blt.n	800752c <_printf_float+0x1d4>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	6121      	str	r1, [r4, #16]
 8007524:	07d8      	lsls	r0, r3, #31
 8007526:	d5ea      	bpl.n	80074fe <_printf_float+0x1a6>
 8007528:	1c4b      	adds	r3, r1, #1
 800752a:	e7e7      	b.n	80074fc <_printf_float+0x1a4>
 800752c:	2900      	cmp	r1, #0
 800752e:	bfd4      	ite	le
 8007530:	f1c1 0202 	rsble	r2, r1, #2
 8007534:	2201      	movgt	r2, #1
 8007536:	4413      	add	r3, r2
 8007538:	e7e0      	b.n	80074fc <_printf_float+0x1a4>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	055a      	lsls	r2, r3, #21
 800753e:	d407      	bmi.n	8007550 <_printf_float+0x1f8>
 8007540:	6923      	ldr	r3, [r4, #16]
 8007542:	4642      	mov	r2, r8
 8007544:	4631      	mov	r1, r6
 8007546:	4628      	mov	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	3001      	adds	r0, #1
 800754c:	d12c      	bne.n	80075a8 <_printf_float+0x250>
 800754e:	e764      	b.n	800741a <_printf_float+0xc2>
 8007550:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007554:	f240 80e0 	bls.w	8007718 <_printf_float+0x3c0>
 8007558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800755c:	2200      	movs	r2, #0
 800755e:	2300      	movs	r3, #0
 8007560:	f7f9 fab2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007564:	2800      	cmp	r0, #0
 8007566:	d034      	beq.n	80075d2 <_printf_float+0x27a>
 8007568:	4a37      	ldr	r2, [pc, #220]	; (8007648 <_printf_float+0x2f0>)
 800756a:	2301      	movs	r3, #1
 800756c:	4631      	mov	r1, r6
 800756e:	4628      	mov	r0, r5
 8007570:	47b8      	blx	r7
 8007572:	3001      	adds	r0, #1
 8007574:	f43f af51 	beq.w	800741a <_printf_float+0xc2>
 8007578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800757c:	429a      	cmp	r2, r3
 800757e:	db02      	blt.n	8007586 <_printf_float+0x22e>
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	07d8      	lsls	r0, r3, #31
 8007584:	d510      	bpl.n	80075a8 <_printf_float+0x250>
 8007586:	ee18 3a10 	vmov	r3, s16
 800758a:	4652      	mov	r2, sl
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f af41 	beq.w	800741a <_printf_float+0xc2>
 8007598:	f04f 0800 	mov.w	r8, #0
 800759c:	f104 091a 	add.w	r9, r4, #26
 80075a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075a2:	3b01      	subs	r3, #1
 80075a4:	4543      	cmp	r3, r8
 80075a6:	dc09      	bgt.n	80075bc <_printf_float+0x264>
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	079b      	lsls	r3, r3, #30
 80075ac:	f100 8105 	bmi.w	80077ba <_printf_float+0x462>
 80075b0:	68e0      	ldr	r0, [r4, #12]
 80075b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075b4:	4298      	cmp	r0, r3
 80075b6:	bfb8      	it	lt
 80075b8:	4618      	movlt	r0, r3
 80075ba:	e730      	b.n	800741e <_printf_float+0xc6>
 80075bc:	2301      	movs	r3, #1
 80075be:	464a      	mov	r2, r9
 80075c0:	4631      	mov	r1, r6
 80075c2:	4628      	mov	r0, r5
 80075c4:	47b8      	blx	r7
 80075c6:	3001      	adds	r0, #1
 80075c8:	f43f af27 	beq.w	800741a <_printf_float+0xc2>
 80075cc:	f108 0801 	add.w	r8, r8, #1
 80075d0:	e7e6      	b.n	80075a0 <_printf_float+0x248>
 80075d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dc39      	bgt.n	800764c <_printf_float+0x2f4>
 80075d8:	4a1b      	ldr	r2, [pc, #108]	; (8007648 <_printf_float+0x2f0>)
 80075da:	2301      	movs	r3, #1
 80075dc:	4631      	mov	r1, r6
 80075de:	4628      	mov	r0, r5
 80075e0:	47b8      	blx	r7
 80075e2:	3001      	adds	r0, #1
 80075e4:	f43f af19 	beq.w	800741a <_printf_float+0xc2>
 80075e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ec:	4313      	orrs	r3, r2
 80075ee:	d102      	bne.n	80075f6 <_printf_float+0x29e>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	07d9      	lsls	r1, r3, #31
 80075f4:	d5d8      	bpl.n	80075a8 <_printf_float+0x250>
 80075f6:	ee18 3a10 	vmov	r3, s16
 80075fa:	4652      	mov	r2, sl
 80075fc:	4631      	mov	r1, r6
 80075fe:	4628      	mov	r0, r5
 8007600:	47b8      	blx	r7
 8007602:	3001      	adds	r0, #1
 8007604:	f43f af09 	beq.w	800741a <_printf_float+0xc2>
 8007608:	f04f 0900 	mov.w	r9, #0
 800760c:	f104 0a1a 	add.w	sl, r4, #26
 8007610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007612:	425b      	negs	r3, r3
 8007614:	454b      	cmp	r3, r9
 8007616:	dc01      	bgt.n	800761c <_printf_float+0x2c4>
 8007618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800761a:	e792      	b.n	8007542 <_printf_float+0x1ea>
 800761c:	2301      	movs	r3, #1
 800761e:	4652      	mov	r2, sl
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f aef7 	beq.w	800741a <_printf_float+0xc2>
 800762c:	f109 0901 	add.w	r9, r9, #1
 8007630:	e7ee      	b.n	8007610 <_printf_float+0x2b8>
 8007632:	bf00      	nop
 8007634:	7fefffff 	.word	0x7fefffff
 8007638:	0800bbd4 	.word	0x0800bbd4
 800763c:	0800bbd8 	.word	0x0800bbd8
 8007640:	0800bbe0 	.word	0x0800bbe0
 8007644:	0800bbdc 	.word	0x0800bbdc
 8007648:	0800bbe4 	.word	0x0800bbe4
 800764c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800764e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007650:	429a      	cmp	r2, r3
 8007652:	bfa8      	it	ge
 8007654:	461a      	movge	r2, r3
 8007656:	2a00      	cmp	r2, #0
 8007658:	4691      	mov	r9, r2
 800765a:	dc37      	bgt.n	80076cc <_printf_float+0x374>
 800765c:	f04f 0b00 	mov.w	fp, #0
 8007660:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007664:	f104 021a 	add.w	r2, r4, #26
 8007668:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800766a:	9305      	str	r3, [sp, #20]
 800766c:	eba3 0309 	sub.w	r3, r3, r9
 8007670:	455b      	cmp	r3, fp
 8007672:	dc33      	bgt.n	80076dc <_printf_float+0x384>
 8007674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007678:	429a      	cmp	r2, r3
 800767a:	db3b      	blt.n	80076f4 <_printf_float+0x39c>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	07da      	lsls	r2, r3, #31
 8007680:	d438      	bmi.n	80076f4 <_printf_float+0x39c>
 8007682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007684:	9a05      	ldr	r2, [sp, #20]
 8007686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007688:	1a9a      	subs	r2, r3, r2
 800768a:	eba3 0901 	sub.w	r9, r3, r1
 800768e:	4591      	cmp	r9, r2
 8007690:	bfa8      	it	ge
 8007692:	4691      	movge	r9, r2
 8007694:	f1b9 0f00 	cmp.w	r9, #0
 8007698:	dc35      	bgt.n	8007706 <_printf_float+0x3ae>
 800769a:	f04f 0800 	mov.w	r8, #0
 800769e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076a2:	f104 0a1a 	add.w	sl, r4, #26
 80076a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	eba3 0309 	sub.w	r3, r3, r9
 80076b0:	4543      	cmp	r3, r8
 80076b2:	f77f af79 	ble.w	80075a8 <_printf_float+0x250>
 80076b6:	2301      	movs	r3, #1
 80076b8:	4652      	mov	r2, sl
 80076ba:	4631      	mov	r1, r6
 80076bc:	4628      	mov	r0, r5
 80076be:	47b8      	blx	r7
 80076c0:	3001      	adds	r0, #1
 80076c2:	f43f aeaa 	beq.w	800741a <_printf_float+0xc2>
 80076c6:	f108 0801 	add.w	r8, r8, #1
 80076ca:	e7ec      	b.n	80076a6 <_printf_float+0x34e>
 80076cc:	4613      	mov	r3, r2
 80076ce:	4631      	mov	r1, r6
 80076d0:	4642      	mov	r2, r8
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	d1c0      	bne.n	800765c <_printf_float+0x304>
 80076da:	e69e      	b.n	800741a <_printf_float+0xc2>
 80076dc:	2301      	movs	r3, #1
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	9205      	str	r2, [sp, #20]
 80076e4:	47b8      	blx	r7
 80076e6:	3001      	adds	r0, #1
 80076e8:	f43f ae97 	beq.w	800741a <_printf_float+0xc2>
 80076ec:	9a05      	ldr	r2, [sp, #20]
 80076ee:	f10b 0b01 	add.w	fp, fp, #1
 80076f2:	e7b9      	b.n	8007668 <_printf_float+0x310>
 80076f4:	ee18 3a10 	vmov	r3, s16
 80076f8:	4652      	mov	r2, sl
 80076fa:	4631      	mov	r1, r6
 80076fc:	4628      	mov	r0, r5
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	d1be      	bne.n	8007682 <_printf_float+0x32a>
 8007704:	e689      	b.n	800741a <_printf_float+0xc2>
 8007706:	9a05      	ldr	r2, [sp, #20]
 8007708:	464b      	mov	r3, r9
 800770a:	4442      	add	r2, r8
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	d1c1      	bne.n	800769a <_printf_float+0x342>
 8007716:	e680      	b.n	800741a <_printf_float+0xc2>
 8007718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800771a:	2a01      	cmp	r2, #1
 800771c:	dc01      	bgt.n	8007722 <_printf_float+0x3ca>
 800771e:	07db      	lsls	r3, r3, #31
 8007720:	d538      	bpl.n	8007794 <_printf_float+0x43c>
 8007722:	2301      	movs	r3, #1
 8007724:	4642      	mov	r2, r8
 8007726:	4631      	mov	r1, r6
 8007728:	4628      	mov	r0, r5
 800772a:	47b8      	blx	r7
 800772c:	3001      	adds	r0, #1
 800772e:	f43f ae74 	beq.w	800741a <_printf_float+0xc2>
 8007732:	ee18 3a10 	vmov	r3, s16
 8007736:	4652      	mov	r2, sl
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	47b8      	blx	r7
 800773e:	3001      	adds	r0, #1
 8007740:	f43f ae6b 	beq.w	800741a <_printf_float+0xc2>
 8007744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007748:	2200      	movs	r2, #0
 800774a:	2300      	movs	r3, #0
 800774c:	f7f9 f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007750:	b9d8      	cbnz	r0, 800778a <_printf_float+0x432>
 8007752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007754:	f108 0201 	add.w	r2, r8, #1
 8007758:	3b01      	subs	r3, #1
 800775a:	4631      	mov	r1, r6
 800775c:	4628      	mov	r0, r5
 800775e:	47b8      	blx	r7
 8007760:	3001      	adds	r0, #1
 8007762:	d10e      	bne.n	8007782 <_printf_float+0x42a>
 8007764:	e659      	b.n	800741a <_printf_float+0xc2>
 8007766:	2301      	movs	r3, #1
 8007768:	4652      	mov	r2, sl
 800776a:	4631      	mov	r1, r6
 800776c:	4628      	mov	r0, r5
 800776e:	47b8      	blx	r7
 8007770:	3001      	adds	r0, #1
 8007772:	f43f ae52 	beq.w	800741a <_printf_float+0xc2>
 8007776:	f108 0801 	add.w	r8, r8, #1
 800777a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777c:	3b01      	subs	r3, #1
 800777e:	4543      	cmp	r3, r8
 8007780:	dcf1      	bgt.n	8007766 <_printf_float+0x40e>
 8007782:	464b      	mov	r3, r9
 8007784:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007788:	e6dc      	b.n	8007544 <_printf_float+0x1ec>
 800778a:	f04f 0800 	mov.w	r8, #0
 800778e:	f104 0a1a 	add.w	sl, r4, #26
 8007792:	e7f2      	b.n	800777a <_printf_float+0x422>
 8007794:	2301      	movs	r3, #1
 8007796:	4642      	mov	r2, r8
 8007798:	e7df      	b.n	800775a <_printf_float+0x402>
 800779a:	2301      	movs	r3, #1
 800779c:	464a      	mov	r2, r9
 800779e:	4631      	mov	r1, r6
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b8      	blx	r7
 80077a4:	3001      	adds	r0, #1
 80077a6:	f43f ae38 	beq.w	800741a <_printf_float+0xc2>
 80077aa:	f108 0801 	add.w	r8, r8, #1
 80077ae:	68e3      	ldr	r3, [r4, #12]
 80077b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077b2:	1a5b      	subs	r3, r3, r1
 80077b4:	4543      	cmp	r3, r8
 80077b6:	dcf0      	bgt.n	800779a <_printf_float+0x442>
 80077b8:	e6fa      	b.n	80075b0 <_printf_float+0x258>
 80077ba:	f04f 0800 	mov.w	r8, #0
 80077be:	f104 0919 	add.w	r9, r4, #25
 80077c2:	e7f4      	b.n	80077ae <_printf_float+0x456>

080077c4 <_printf_common>:
 80077c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	4616      	mov	r6, r2
 80077ca:	4699      	mov	r9, r3
 80077cc:	688a      	ldr	r2, [r1, #8]
 80077ce:	690b      	ldr	r3, [r1, #16]
 80077d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077d4:	4293      	cmp	r3, r2
 80077d6:	bfb8      	it	lt
 80077d8:	4613      	movlt	r3, r2
 80077da:	6033      	str	r3, [r6, #0]
 80077dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077e0:	4607      	mov	r7, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	b10a      	cbz	r2, 80077ea <_printf_common+0x26>
 80077e6:	3301      	adds	r3, #1
 80077e8:	6033      	str	r3, [r6, #0]
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	0699      	lsls	r1, r3, #26
 80077ee:	bf42      	ittt	mi
 80077f0:	6833      	ldrmi	r3, [r6, #0]
 80077f2:	3302      	addmi	r3, #2
 80077f4:	6033      	strmi	r3, [r6, #0]
 80077f6:	6825      	ldr	r5, [r4, #0]
 80077f8:	f015 0506 	ands.w	r5, r5, #6
 80077fc:	d106      	bne.n	800780c <_printf_common+0x48>
 80077fe:	f104 0a19 	add.w	sl, r4, #25
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	6832      	ldr	r2, [r6, #0]
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	42ab      	cmp	r3, r5
 800780a:	dc26      	bgt.n	800785a <_printf_common+0x96>
 800780c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007810:	1e13      	subs	r3, r2, #0
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	bf18      	it	ne
 8007816:	2301      	movne	r3, #1
 8007818:	0692      	lsls	r2, r2, #26
 800781a:	d42b      	bmi.n	8007874 <_printf_common+0xb0>
 800781c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007820:	4649      	mov	r1, r9
 8007822:	4638      	mov	r0, r7
 8007824:	47c0      	blx	r8
 8007826:	3001      	adds	r0, #1
 8007828:	d01e      	beq.n	8007868 <_printf_common+0xa4>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	68e5      	ldr	r5, [r4, #12]
 800782e:	6832      	ldr	r2, [r6, #0]
 8007830:	f003 0306 	and.w	r3, r3, #6
 8007834:	2b04      	cmp	r3, #4
 8007836:	bf08      	it	eq
 8007838:	1aad      	subeq	r5, r5, r2
 800783a:	68a3      	ldr	r3, [r4, #8]
 800783c:	6922      	ldr	r2, [r4, #16]
 800783e:	bf0c      	ite	eq
 8007840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007844:	2500      	movne	r5, #0
 8007846:	4293      	cmp	r3, r2
 8007848:	bfc4      	itt	gt
 800784a:	1a9b      	subgt	r3, r3, r2
 800784c:	18ed      	addgt	r5, r5, r3
 800784e:	2600      	movs	r6, #0
 8007850:	341a      	adds	r4, #26
 8007852:	42b5      	cmp	r5, r6
 8007854:	d11a      	bne.n	800788c <_printf_common+0xc8>
 8007856:	2000      	movs	r0, #0
 8007858:	e008      	b.n	800786c <_printf_common+0xa8>
 800785a:	2301      	movs	r3, #1
 800785c:	4652      	mov	r2, sl
 800785e:	4649      	mov	r1, r9
 8007860:	4638      	mov	r0, r7
 8007862:	47c0      	blx	r8
 8007864:	3001      	adds	r0, #1
 8007866:	d103      	bne.n	8007870 <_printf_common+0xac>
 8007868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800786c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007870:	3501      	adds	r5, #1
 8007872:	e7c6      	b.n	8007802 <_printf_common+0x3e>
 8007874:	18e1      	adds	r1, r4, r3
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	2030      	movs	r0, #48	; 0x30
 800787a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800787e:	4422      	add	r2, r4
 8007880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007888:	3302      	adds	r3, #2
 800788a:	e7c7      	b.n	800781c <_printf_common+0x58>
 800788c:	2301      	movs	r3, #1
 800788e:	4622      	mov	r2, r4
 8007890:	4649      	mov	r1, r9
 8007892:	4638      	mov	r0, r7
 8007894:	47c0      	blx	r8
 8007896:	3001      	adds	r0, #1
 8007898:	d0e6      	beq.n	8007868 <_printf_common+0xa4>
 800789a:	3601      	adds	r6, #1
 800789c:	e7d9      	b.n	8007852 <_printf_common+0x8e>
	...

080078a0 <_printf_i>:
 80078a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078a4:	7e0f      	ldrb	r7, [r1, #24]
 80078a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078a8:	2f78      	cmp	r7, #120	; 0x78
 80078aa:	4691      	mov	r9, r2
 80078ac:	4680      	mov	r8, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	469a      	mov	sl, r3
 80078b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078b6:	d807      	bhi.n	80078c8 <_printf_i+0x28>
 80078b8:	2f62      	cmp	r7, #98	; 0x62
 80078ba:	d80a      	bhi.n	80078d2 <_printf_i+0x32>
 80078bc:	2f00      	cmp	r7, #0
 80078be:	f000 80d8 	beq.w	8007a72 <_printf_i+0x1d2>
 80078c2:	2f58      	cmp	r7, #88	; 0x58
 80078c4:	f000 80a3 	beq.w	8007a0e <_printf_i+0x16e>
 80078c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078d0:	e03a      	b.n	8007948 <_printf_i+0xa8>
 80078d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078d6:	2b15      	cmp	r3, #21
 80078d8:	d8f6      	bhi.n	80078c8 <_printf_i+0x28>
 80078da:	a101      	add	r1, pc, #4	; (adr r1, 80078e0 <_printf_i+0x40>)
 80078dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078e0:	08007939 	.word	0x08007939
 80078e4:	0800794d 	.word	0x0800794d
 80078e8:	080078c9 	.word	0x080078c9
 80078ec:	080078c9 	.word	0x080078c9
 80078f0:	080078c9 	.word	0x080078c9
 80078f4:	080078c9 	.word	0x080078c9
 80078f8:	0800794d 	.word	0x0800794d
 80078fc:	080078c9 	.word	0x080078c9
 8007900:	080078c9 	.word	0x080078c9
 8007904:	080078c9 	.word	0x080078c9
 8007908:	080078c9 	.word	0x080078c9
 800790c:	08007a59 	.word	0x08007a59
 8007910:	0800797d 	.word	0x0800797d
 8007914:	08007a3b 	.word	0x08007a3b
 8007918:	080078c9 	.word	0x080078c9
 800791c:	080078c9 	.word	0x080078c9
 8007920:	08007a7b 	.word	0x08007a7b
 8007924:	080078c9 	.word	0x080078c9
 8007928:	0800797d 	.word	0x0800797d
 800792c:	080078c9 	.word	0x080078c9
 8007930:	080078c9 	.word	0x080078c9
 8007934:	08007a43 	.word	0x08007a43
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	1d1a      	adds	r2, r3, #4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	602a      	str	r2, [r5, #0]
 8007940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007948:	2301      	movs	r3, #1
 800794a:	e0a3      	b.n	8007a94 <_printf_i+0x1f4>
 800794c:	6820      	ldr	r0, [r4, #0]
 800794e:	6829      	ldr	r1, [r5, #0]
 8007950:	0606      	lsls	r6, r0, #24
 8007952:	f101 0304 	add.w	r3, r1, #4
 8007956:	d50a      	bpl.n	800796e <_printf_i+0xce>
 8007958:	680e      	ldr	r6, [r1, #0]
 800795a:	602b      	str	r3, [r5, #0]
 800795c:	2e00      	cmp	r6, #0
 800795e:	da03      	bge.n	8007968 <_printf_i+0xc8>
 8007960:	232d      	movs	r3, #45	; 0x2d
 8007962:	4276      	negs	r6, r6
 8007964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007968:	485e      	ldr	r0, [pc, #376]	; (8007ae4 <_printf_i+0x244>)
 800796a:	230a      	movs	r3, #10
 800796c:	e019      	b.n	80079a2 <_printf_i+0x102>
 800796e:	680e      	ldr	r6, [r1, #0]
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007976:	bf18      	it	ne
 8007978:	b236      	sxthne	r6, r6
 800797a:	e7ef      	b.n	800795c <_printf_i+0xbc>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	6820      	ldr	r0, [r4, #0]
 8007980:	1d19      	adds	r1, r3, #4
 8007982:	6029      	str	r1, [r5, #0]
 8007984:	0601      	lsls	r1, r0, #24
 8007986:	d501      	bpl.n	800798c <_printf_i+0xec>
 8007988:	681e      	ldr	r6, [r3, #0]
 800798a:	e002      	b.n	8007992 <_printf_i+0xf2>
 800798c:	0646      	lsls	r6, r0, #25
 800798e:	d5fb      	bpl.n	8007988 <_printf_i+0xe8>
 8007990:	881e      	ldrh	r6, [r3, #0]
 8007992:	4854      	ldr	r0, [pc, #336]	; (8007ae4 <_printf_i+0x244>)
 8007994:	2f6f      	cmp	r7, #111	; 0x6f
 8007996:	bf0c      	ite	eq
 8007998:	2308      	moveq	r3, #8
 800799a:	230a      	movne	r3, #10
 800799c:	2100      	movs	r1, #0
 800799e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079a2:	6865      	ldr	r5, [r4, #4]
 80079a4:	60a5      	str	r5, [r4, #8]
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	bfa2      	ittt	ge
 80079aa:	6821      	ldrge	r1, [r4, #0]
 80079ac:	f021 0104 	bicge.w	r1, r1, #4
 80079b0:	6021      	strge	r1, [r4, #0]
 80079b2:	b90e      	cbnz	r6, 80079b8 <_printf_i+0x118>
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	d04d      	beq.n	8007a54 <_printf_i+0x1b4>
 80079b8:	4615      	mov	r5, r2
 80079ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80079be:	fb03 6711 	mls	r7, r3, r1, r6
 80079c2:	5dc7      	ldrb	r7, [r0, r7]
 80079c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079c8:	4637      	mov	r7, r6
 80079ca:	42bb      	cmp	r3, r7
 80079cc:	460e      	mov	r6, r1
 80079ce:	d9f4      	bls.n	80079ba <_printf_i+0x11a>
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d10b      	bne.n	80079ec <_printf_i+0x14c>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	07de      	lsls	r6, r3, #31
 80079d8:	d508      	bpl.n	80079ec <_printf_i+0x14c>
 80079da:	6923      	ldr	r3, [r4, #16]
 80079dc:	6861      	ldr	r1, [r4, #4]
 80079de:	4299      	cmp	r1, r3
 80079e0:	bfde      	ittt	le
 80079e2:	2330      	movle	r3, #48	; 0x30
 80079e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80079ec:	1b52      	subs	r2, r2, r5
 80079ee:	6122      	str	r2, [r4, #16]
 80079f0:	f8cd a000 	str.w	sl, [sp]
 80079f4:	464b      	mov	r3, r9
 80079f6:	aa03      	add	r2, sp, #12
 80079f8:	4621      	mov	r1, r4
 80079fa:	4640      	mov	r0, r8
 80079fc:	f7ff fee2 	bl	80077c4 <_printf_common>
 8007a00:	3001      	adds	r0, #1
 8007a02:	d14c      	bne.n	8007a9e <_printf_i+0x1fe>
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a08:	b004      	add	sp, #16
 8007a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0e:	4835      	ldr	r0, [pc, #212]	; (8007ae4 <_printf_i+0x244>)
 8007a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a14:	6829      	ldr	r1, [r5, #0]
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a1c:	6029      	str	r1, [r5, #0]
 8007a1e:	061d      	lsls	r5, r3, #24
 8007a20:	d514      	bpl.n	8007a4c <_printf_i+0x1ac>
 8007a22:	07df      	lsls	r7, r3, #31
 8007a24:	bf44      	itt	mi
 8007a26:	f043 0320 	orrmi.w	r3, r3, #32
 8007a2a:	6023      	strmi	r3, [r4, #0]
 8007a2c:	b91e      	cbnz	r6, 8007a36 <_printf_i+0x196>
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	f023 0320 	bic.w	r3, r3, #32
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	2310      	movs	r3, #16
 8007a38:	e7b0      	b.n	800799c <_printf_i+0xfc>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	f043 0320 	orr.w	r3, r3, #32
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	2378      	movs	r3, #120	; 0x78
 8007a44:	4828      	ldr	r0, [pc, #160]	; (8007ae8 <_printf_i+0x248>)
 8007a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a4a:	e7e3      	b.n	8007a14 <_printf_i+0x174>
 8007a4c:	0659      	lsls	r1, r3, #25
 8007a4e:	bf48      	it	mi
 8007a50:	b2b6      	uxthmi	r6, r6
 8007a52:	e7e6      	b.n	8007a22 <_printf_i+0x182>
 8007a54:	4615      	mov	r5, r2
 8007a56:	e7bb      	b.n	80079d0 <_printf_i+0x130>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	6826      	ldr	r6, [r4, #0]
 8007a5c:	6961      	ldr	r1, [r4, #20]
 8007a5e:	1d18      	adds	r0, r3, #4
 8007a60:	6028      	str	r0, [r5, #0]
 8007a62:	0635      	lsls	r5, r6, #24
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	d501      	bpl.n	8007a6c <_printf_i+0x1cc>
 8007a68:	6019      	str	r1, [r3, #0]
 8007a6a:	e002      	b.n	8007a72 <_printf_i+0x1d2>
 8007a6c:	0670      	lsls	r0, r6, #25
 8007a6e:	d5fb      	bpl.n	8007a68 <_printf_i+0x1c8>
 8007a70:	8019      	strh	r1, [r3, #0]
 8007a72:	2300      	movs	r3, #0
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	4615      	mov	r5, r2
 8007a78:	e7ba      	b.n	80079f0 <_printf_i+0x150>
 8007a7a:	682b      	ldr	r3, [r5, #0]
 8007a7c:	1d1a      	adds	r2, r3, #4
 8007a7e:	602a      	str	r2, [r5, #0]
 8007a80:	681d      	ldr	r5, [r3, #0]
 8007a82:	6862      	ldr	r2, [r4, #4]
 8007a84:	2100      	movs	r1, #0
 8007a86:	4628      	mov	r0, r5
 8007a88:	f7f8 fbaa 	bl	80001e0 <memchr>
 8007a8c:	b108      	cbz	r0, 8007a92 <_printf_i+0x1f2>
 8007a8e:	1b40      	subs	r0, r0, r5
 8007a90:	6060      	str	r0, [r4, #4]
 8007a92:	6863      	ldr	r3, [r4, #4]
 8007a94:	6123      	str	r3, [r4, #16]
 8007a96:	2300      	movs	r3, #0
 8007a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a9c:	e7a8      	b.n	80079f0 <_printf_i+0x150>
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	462a      	mov	r2, r5
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	4640      	mov	r0, r8
 8007aa6:	47d0      	blx	sl
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d0ab      	beq.n	8007a04 <_printf_i+0x164>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	079b      	lsls	r3, r3, #30
 8007ab0:	d413      	bmi.n	8007ada <_printf_i+0x23a>
 8007ab2:	68e0      	ldr	r0, [r4, #12]
 8007ab4:	9b03      	ldr	r3, [sp, #12]
 8007ab6:	4298      	cmp	r0, r3
 8007ab8:	bfb8      	it	lt
 8007aba:	4618      	movlt	r0, r3
 8007abc:	e7a4      	b.n	8007a08 <_printf_i+0x168>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4632      	mov	r2, r6
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	4640      	mov	r0, r8
 8007ac6:	47d0      	blx	sl
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d09b      	beq.n	8007a04 <_printf_i+0x164>
 8007acc:	3501      	adds	r5, #1
 8007ace:	68e3      	ldr	r3, [r4, #12]
 8007ad0:	9903      	ldr	r1, [sp, #12]
 8007ad2:	1a5b      	subs	r3, r3, r1
 8007ad4:	42ab      	cmp	r3, r5
 8007ad6:	dcf2      	bgt.n	8007abe <_printf_i+0x21e>
 8007ad8:	e7eb      	b.n	8007ab2 <_printf_i+0x212>
 8007ada:	2500      	movs	r5, #0
 8007adc:	f104 0619 	add.w	r6, r4, #25
 8007ae0:	e7f5      	b.n	8007ace <_printf_i+0x22e>
 8007ae2:	bf00      	nop
 8007ae4:	0800bbe6 	.word	0x0800bbe6
 8007ae8:	0800bbf7 	.word	0x0800bbf7

08007aec <_scanf_float>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	b087      	sub	sp, #28
 8007af2:	4617      	mov	r7, r2
 8007af4:	9303      	str	r3, [sp, #12]
 8007af6:	688b      	ldr	r3, [r1, #8]
 8007af8:	1e5a      	subs	r2, r3, #1
 8007afa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007afe:	bf83      	ittte	hi
 8007b00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007b04:	195b      	addhi	r3, r3, r5
 8007b06:	9302      	strhi	r3, [sp, #8]
 8007b08:	2300      	movls	r3, #0
 8007b0a:	bf86      	itte	hi
 8007b0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007b10:	608b      	strhi	r3, [r1, #8]
 8007b12:	9302      	strls	r3, [sp, #8]
 8007b14:	680b      	ldr	r3, [r1, #0]
 8007b16:	468b      	mov	fp, r1
 8007b18:	2500      	movs	r5, #0
 8007b1a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007b1e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007b22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b26:	4680      	mov	r8, r0
 8007b28:	460c      	mov	r4, r1
 8007b2a:	465e      	mov	r6, fp
 8007b2c:	46aa      	mov	sl, r5
 8007b2e:	46a9      	mov	r9, r5
 8007b30:	9501      	str	r5, [sp, #4]
 8007b32:	68a2      	ldr	r2, [r4, #8]
 8007b34:	b152      	cbz	r2, 8007b4c <_scanf_float+0x60>
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b4e      	cmp	r3, #78	; 0x4e
 8007b3c:	d864      	bhi.n	8007c08 <_scanf_float+0x11c>
 8007b3e:	2b40      	cmp	r3, #64	; 0x40
 8007b40:	d83c      	bhi.n	8007bbc <_scanf_float+0xd0>
 8007b42:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007b46:	b2c8      	uxtb	r0, r1
 8007b48:	280e      	cmp	r0, #14
 8007b4a:	d93a      	bls.n	8007bc2 <_scanf_float+0xd6>
 8007b4c:	f1b9 0f00 	cmp.w	r9, #0
 8007b50:	d003      	beq.n	8007b5a <_scanf_float+0x6e>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b5e:	f1ba 0f01 	cmp.w	sl, #1
 8007b62:	f200 8113 	bhi.w	8007d8c <_scanf_float+0x2a0>
 8007b66:	455e      	cmp	r6, fp
 8007b68:	f200 8105 	bhi.w	8007d76 <_scanf_float+0x28a>
 8007b6c:	2501      	movs	r5, #1
 8007b6e:	4628      	mov	r0, r5
 8007b70:	b007      	add	sp, #28
 8007b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007b7a:	2a0d      	cmp	r2, #13
 8007b7c:	d8e6      	bhi.n	8007b4c <_scanf_float+0x60>
 8007b7e:	a101      	add	r1, pc, #4	; (adr r1, 8007b84 <_scanf_float+0x98>)
 8007b80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b84:	08007cc3 	.word	0x08007cc3
 8007b88:	08007b4d 	.word	0x08007b4d
 8007b8c:	08007b4d 	.word	0x08007b4d
 8007b90:	08007b4d 	.word	0x08007b4d
 8007b94:	08007d23 	.word	0x08007d23
 8007b98:	08007cfb 	.word	0x08007cfb
 8007b9c:	08007b4d 	.word	0x08007b4d
 8007ba0:	08007b4d 	.word	0x08007b4d
 8007ba4:	08007cd1 	.word	0x08007cd1
 8007ba8:	08007b4d 	.word	0x08007b4d
 8007bac:	08007b4d 	.word	0x08007b4d
 8007bb0:	08007b4d 	.word	0x08007b4d
 8007bb4:	08007b4d 	.word	0x08007b4d
 8007bb8:	08007c89 	.word	0x08007c89
 8007bbc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007bc0:	e7db      	b.n	8007b7a <_scanf_float+0x8e>
 8007bc2:	290e      	cmp	r1, #14
 8007bc4:	d8c2      	bhi.n	8007b4c <_scanf_float+0x60>
 8007bc6:	a001      	add	r0, pc, #4	; (adr r0, 8007bcc <_scanf_float+0xe0>)
 8007bc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007bcc:	08007c7b 	.word	0x08007c7b
 8007bd0:	08007b4d 	.word	0x08007b4d
 8007bd4:	08007c7b 	.word	0x08007c7b
 8007bd8:	08007d0f 	.word	0x08007d0f
 8007bdc:	08007b4d 	.word	0x08007b4d
 8007be0:	08007c29 	.word	0x08007c29
 8007be4:	08007c65 	.word	0x08007c65
 8007be8:	08007c65 	.word	0x08007c65
 8007bec:	08007c65 	.word	0x08007c65
 8007bf0:	08007c65 	.word	0x08007c65
 8007bf4:	08007c65 	.word	0x08007c65
 8007bf8:	08007c65 	.word	0x08007c65
 8007bfc:	08007c65 	.word	0x08007c65
 8007c00:	08007c65 	.word	0x08007c65
 8007c04:	08007c65 	.word	0x08007c65
 8007c08:	2b6e      	cmp	r3, #110	; 0x6e
 8007c0a:	d809      	bhi.n	8007c20 <_scanf_float+0x134>
 8007c0c:	2b60      	cmp	r3, #96	; 0x60
 8007c0e:	d8b2      	bhi.n	8007b76 <_scanf_float+0x8a>
 8007c10:	2b54      	cmp	r3, #84	; 0x54
 8007c12:	d077      	beq.n	8007d04 <_scanf_float+0x218>
 8007c14:	2b59      	cmp	r3, #89	; 0x59
 8007c16:	d199      	bne.n	8007b4c <_scanf_float+0x60>
 8007c18:	2d07      	cmp	r5, #7
 8007c1a:	d197      	bne.n	8007b4c <_scanf_float+0x60>
 8007c1c:	2508      	movs	r5, #8
 8007c1e:	e029      	b.n	8007c74 <_scanf_float+0x188>
 8007c20:	2b74      	cmp	r3, #116	; 0x74
 8007c22:	d06f      	beq.n	8007d04 <_scanf_float+0x218>
 8007c24:	2b79      	cmp	r3, #121	; 0x79
 8007c26:	e7f6      	b.n	8007c16 <_scanf_float+0x12a>
 8007c28:	6821      	ldr	r1, [r4, #0]
 8007c2a:	05c8      	lsls	r0, r1, #23
 8007c2c:	d51a      	bpl.n	8007c64 <_scanf_float+0x178>
 8007c2e:	9b02      	ldr	r3, [sp, #8]
 8007c30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c34:	6021      	str	r1, [r4, #0]
 8007c36:	f109 0901 	add.w	r9, r9, #1
 8007c3a:	b11b      	cbz	r3, 8007c44 <_scanf_float+0x158>
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	3201      	adds	r2, #1
 8007c40:	9302      	str	r3, [sp, #8]
 8007c42:	60a2      	str	r2, [r4, #8]
 8007c44:	68a3      	ldr	r3, [r4, #8]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	60a3      	str	r3, [r4, #8]
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	6123      	str	r3, [r4, #16]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	3b01      	subs	r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	607b      	str	r3, [r7, #4]
 8007c58:	f340 8084 	ble.w	8007d64 <_scanf_float+0x278>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	e766      	b.n	8007b32 <_scanf_float+0x46>
 8007c64:	eb1a 0f05 	cmn.w	sl, r5
 8007c68:	f47f af70 	bne.w	8007b4c <_scanf_float+0x60>
 8007c6c:	6822      	ldr	r2, [r4, #0]
 8007c6e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007c72:	6022      	str	r2, [r4, #0]
 8007c74:	f806 3b01 	strb.w	r3, [r6], #1
 8007c78:	e7e4      	b.n	8007c44 <_scanf_float+0x158>
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	0610      	lsls	r0, r2, #24
 8007c7e:	f57f af65 	bpl.w	8007b4c <_scanf_float+0x60>
 8007c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c86:	e7f4      	b.n	8007c72 <_scanf_float+0x186>
 8007c88:	f1ba 0f00 	cmp.w	sl, #0
 8007c8c:	d10e      	bne.n	8007cac <_scanf_float+0x1c0>
 8007c8e:	f1b9 0f00 	cmp.w	r9, #0
 8007c92:	d10e      	bne.n	8007cb2 <_scanf_float+0x1c6>
 8007c94:	6822      	ldr	r2, [r4, #0]
 8007c96:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c9e:	d108      	bne.n	8007cb2 <_scanf_float+0x1c6>
 8007ca0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ca4:	6022      	str	r2, [r4, #0]
 8007ca6:	f04f 0a01 	mov.w	sl, #1
 8007caa:	e7e3      	b.n	8007c74 <_scanf_float+0x188>
 8007cac:	f1ba 0f02 	cmp.w	sl, #2
 8007cb0:	d055      	beq.n	8007d5e <_scanf_float+0x272>
 8007cb2:	2d01      	cmp	r5, #1
 8007cb4:	d002      	beq.n	8007cbc <_scanf_float+0x1d0>
 8007cb6:	2d04      	cmp	r5, #4
 8007cb8:	f47f af48 	bne.w	8007b4c <_scanf_float+0x60>
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	b2ed      	uxtb	r5, r5
 8007cc0:	e7d8      	b.n	8007c74 <_scanf_float+0x188>
 8007cc2:	f1ba 0f01 	cmp.w	sl, #1
 8007cc6:	f47f af41 	bne.w	8007b4c <_scanf_float+0x60>
 8007cca:	f04f 0a02 	mov.w	sl, #2
 8007cce:	e7d1      	b.n	8007c74 <_scanf_float+0x188>
 8007cd0:	b97d      	cbnz	r5, 8007cf2 <_scanf_float+0x206>
 8007cd2:	f1b9 0f00 	cmp.w	r9, #0
 8007cd6:	f47f af3c 	bne.w	8007b52 <_scanf_float+0x66>
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ce0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ce4:	f47f af39 	bne.w	8007b5a <_scanf_float+0x6e>
 8007ce8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007cec:	6022      	str	r2, [r4, #0]
 8007cee:	2501      	movs	r5, #1
 8007cf0:	e7c0      	b.n	8007c74 <_scanf_float+0x188>
 8007cf2:	2d03      	cmp	r5, #3
 8007cf4:	d0e2      	beq.n	8007cbc <_scanf_float+0x1d0>
 8007cf6:	2d05      	cmp	r5, #5
 8007cf8:	e7de      	b.n	8007cb8 <_scanf_float+0x1cc>
 8007cfa:	2d02      	cmp	r5, #2
 8007cfc:	f47f af26 	bne.w	8007b4c <_scanf_float+0x60>
 8007d00:	2503      	movs	r5, #3
 8007d02:	e7b7      	b.n	8007c74 <_scanf_float+0x188>
 8007d04:	2d06      	cmp	r5, #6
 8007d06:	f47f af21 	bne.w	8007b4c <_scanf_float+0x60>
 8007d0a:	2507      	movs	r5, #7
 8007d0c:	e7b2      	b.n	8007c74 <_scanf_float+0x188>
 8007d0e:	6822      	ldr	r2, [r4, #0]
 8007d10:	0591      	lsls	r1, r2, #22
 8007d12:	f57f af1b 	bpl.w	8007b4c <_scanf_float+0x60>
 8007d16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007d1a:	6022      	str	r2, [r4, #0]
 8007d1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d20:	e7a8      	b.n	8007c74 <_scanf_float+0x188>
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007d28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007d2c:	d006      	beq.n	8007d3c <_scanf_float+0x250>
 8007d2e:	0550      	lsls	r0, r2, #21
 8007d30:	f57f af0c 	bpl.w	8007b4c <_scanf_float+0x60>
 8007d34:	f1b9 0f00 	cmp.w	r9, #0
 8007d38:	f43f af0f 	beq.w	8007b5a <_scanf_float+0x6e>
 8007d3c:	0591      	lsls	r1, r2, #22
 8007d3e:	bf58      	it	pl
 8007d40:	9901      	ldrpl	r1, [sp, #4]
 8007d42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d46:	bf58      	it	pl
 8007d48:	eba9 0101 	subpl.w	r1, r9, r1
 8007d4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007d50:	bf58      	it	pl
 8007d52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d56:	6022      	str	r2, [r4, #0]
 8007d58:	f04f 0900 	mov.w	r9, #0
 8007d5c:	e78a      	b.n	8007c74 <_scanf_float+0x188>
 8007d5e:	f04f 0a03 	mov.w	sl, #3
 8007d62:	e787      	b.n	8007c74 <_scanf_float+0x188>
 8007d64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007d68:	4639      	mov	r1, r7
 8007d6a:	4640      	mov	r0, r8
 8007d6c:	4798      	blx	r3
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f43f aedf 	beq.w	8007b32 <_scanf_float+0x46>
 8007d74:	e6ea      	b.n	8007b4c <_scanf_float+0x60>
 8007d76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d7e:	463a      	mov	r2, r7
 8007d80:	4640      	mov	r0, r8
 8007d82:	4798      	blx	r3
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	e6ec      	b.n	8007b66 <_scanf_float+0x7a>
 8007d8c:	1e6b      	subs	r3, r5, #1
 8007d8e:	2b06      	cmp	r3, #6
 8007d90:	d825      	bhi.n	8007dde <_scanf_float+0x2f2>
 8007d92:	2d02      	cmp	r5, #2
 8007d94:	d836      	bhi.n	8007e04 <_scanf_float+0x318>
 8007d96:	455e      	cmp	r6, fp
 8007d98:	f67f aee8 	bls.w	8007b6c <_scanf_float+0x80>
 8007d9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007da0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007da4:	463a      	mov	r2, r7
 8007da6:	4640      	mov	r0, r8
 8007da8:	4798      	blx	r3
 8007daa:	6923      	ldr	r3, [r4, #16]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	6123      	str	r3, [r4, #16]
 8007db0:	e7f1      	b.n	8007d96 <_scanf_float+0x2aa>
 8007db2:	9802      	ldr	r0, [sp, #8]
 8007db4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007db8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007dbc:	9002      	str	r0, [sp, #8]
 8007dbe:	463a      	mov	r2, r7
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4798      	blx	r3
 8007dc4:	6923      	ldr	r3, [r4, #16]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	6123      	str	r3, [r4, #16]
 8007dca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007dce:	fa5f fa8a 	uxtb.w	sl, sl
 8007dd2:	f1ba 0f02 	cmp.w	sl, #2
 8007dd6:	d1ec      	bne.n	8007db2 <_scanf_float+0x2c6>
 8007dd8:	3d03      	subs	r5, #3
 8007dda:	b2ed      	uxtb	r5, r5
 8007ddc:	1b76      	subs	r6, r6, r5
 8007dde:	6823      	ldr	r3, [r4, #0]
 8007de0:	05da      	lsls	r2, r3, #23
 8007de2:	d52f      	bpl.n	8007e44 <_scanf_float+0x358>
 8007de4:	055b      	lsls	r3, r3, #21
 8007de6:	d510      	bpl.n	8007e0a <_scanf_float+0x31e>
 8007de8:	455e      	cmp	r6, fp
 8007dea:	f67f aebf 	bls.w	8007b6c <_scanf_float+0x80>
 8007dee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007df2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007df6:	463a      	mov	r2, r7
 8007df8:	4640      	mov	r0, r8
 8007dfa:	4798      	blx	r3
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	6123      	str	r3, [r4, #16]
 8007e02:	e7f1      	b.n	8007de8 <_scanf_float+0x2fc>
 8007e04:	46aa      	mov	sl, r5
 8007e06:	9602      	str	r6, [sp, #8]
 8007e08:	e7df      	b.n	8007dca <_scanf_float+0x2de>
 8007e0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e0e:	6923      	ldr	r3, [r4, #16]
 8007e10:	2965      	cmp	r1, #101	; 0x65
 8007e12:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007e16:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007e1a:	6123      	str	r3, [r4, #16]
 8007e1c:	d00c      	beq.n	8007e38 <_scanf_float+0x34c>
 8007e1e:	2945      	cmp	r1, #69	; 0x45
 8007e20:	d00a      	beq.n	8007e38 <_scanf_float+0x34c>
 8007e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e26:	463a      	mov	r2, r7
 8007e28:	4640      	mov	r0, r8
 8007e2a:	4798      	blx	r3
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	1eb5      	subs	r5, r6, #2
 8007e36:	6123      	str	r3, [r4, #16]
 8007e38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e3c:	463a      	mov	r2, r7
 8007e3e:	4640      	mov	r0, r8
 8007e40:	4798      	blx	r3
 8007e42:	462e      	mov	r6, r5
 8007e44:	6825      	ldr	r5, [r4, #0]
 8007e46:	f015 0510 	ands.w	r5, r5, #16
 8007e4a:	d159      	bne.n	8007f00 <_scanf_float+0x414>
 8007e4c:	7035      	strb	r5, [r6, #0]
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e58:	d11b      	bne.n	8007e92 <_scanf_float+0x3a6>
 8007e5a:	9b01      	ldr	r3, [sp, #4]
 8007e5c:	454b      	cmp	r3, r9
 8007e5e:	eba3 0209 	sub.w	r2, r3, r9
 8007e62:	d123      	bne.n	8007eac <_scanf_float+0x3c0>
 8007e64:	2200      	movs	r2, #0
 8007e66:	4659      	mov	r1, fp
 8007e68:	4640      	mov	r0, r8
 8007e6a:	f000 feaf 	bl	8008bcc <_strtod_r>
 8007e6e:	6822      	ldr	r2, [r4, #0]
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	f012 0f02 	tst.w	r2, #2
 8007e76:	ec57 6b10 	vmov	r6, r7, d0
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	d021      	beq.n	8007ec2 <_scanf_float+0x3d6>
 8007e7e:	9903      	ldr	r1, [sp, #12]
 8007e80:	1d1a      	adds	r2, r3, #4
 8007e82:	600a      	str	r2, [r1, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	e9c3 6700 	strd	r6, r7, [r3]
 8007e8a:	68e3      	ldr	r3, [r4, #12]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	60e3      	str	r3, [r4, #12]
 8007e90:	e66d      	b.n	8007b6e <_scanf_float+0x82>
 8007e92:	9b04      	ldr	r3, [sp, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0e5      	beq.n	8007e64 <_scanf_float+0x378>
 8007e98:	9905      	ldr	r1, [sp, #20]
 8007e9a:	230a      	movs	r3, #10
 8007e9c:	462a      	mov	r2, r5
 8007e9e:	3101      	adds	r1, #1
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	f000 ff1b 	bl	8008cdc <_strtol_r>
 8007ea6:	9b04      	ldr	r3, [sp, #16]
 8007ea8:	9e05      	ldr	r6, [sp, #20]
 8007eaa:	1ac2      	subs	r2, r0, r3
 8007eac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007eb0:	429e      	cmp	r6, r3
 8007eb2:	bf28      	it	cs
 8007eb4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007eb8:	4912      	ldr	r1, [pc, #72]	; (8007f04 <_scanf_float+0x418>)
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f000 f844 	bl	8007f48 <siprintf>
 8007ec0:	e7d0      	b.n	8007e64 <_scanf_float+0x378>
 8007ec2:	9903      	ldr	r1, [sp, #12]
 8007ec4:	f012 0f04 	tst.w	r2, #4
 8007ec8:	f103 0204 	add.w	r2, r3, #4
 8007ecc:	600a      	str	r2, [r1, #0]
 8007ece:	d1d9      	bne.n	8007e84 <_scanf_float+0x398>
 8007ed0:	f8d3 8000 	ldr.w	r8, [r3]
 8007ed4:	ee10 2a10 	vmov	r2, s0
 8007ed8:	ee10 0a10 	vmov	r0, s0
 8007edc:	463b      	mov	r3, r7
 8007ede:	4639      	mov	r1, r7
 8007ee0:	f7f8 fe24 	bl	8000b2c <__aeabi_dcmpun>
 8007ee4:	b128      	cbz	r0, 8007ef2 <_scanf_float+0x406>
 8007ee6:	4808      	ldr	r0, [pc, #32]	; (8007f08 <_scanf_float+0x41c>)
 8007ee8:	f000 f828 	bl	8007f3c <nanf>
 8007eec:	ed88 0a00 	vstr	s0, [r8]
 8007ef0:	e7cb      	b.n	8007e8a <_scanf_float+0x39e>
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	f7f8 fe77 	bl	8000be8 <__aeabi_d2f>
 8007efa:	f8c8 0000 	str.w	r0, [r8]
 8007efe:	e7c4      	b.n	8007e8a <_scanf_float+0x39e>
 8007f00:	2500      	movs	r5, #0
 8007f02:	e634      	b.n	8007b6e <_scanf_float+0x82>
 8007f04:	0800bc08 	.word	0x0800bc08
 8007f08:	0800c078 	.word	0x0800c078

08007f0c <iprintf>:
 8007f0c:	b40f      	push	{r0, r1, r2, r3}
 8007f0e:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <iprintf+0x2c>)
 8007f10:	b513      	push	{r0, r1, r4, lr}
 8007f12:	681c      	ldr	r4, [r3, #0]
 8007f14:	b124      	cbz	r4, 8007f20 <iprintf+0x14>
 8007f16:	69a3      	ldr	r3, [r4, #24]
 8007f18:	b913      	cbnz	r3, 8007f20 <iprintf+0x14>
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f001 fdb2 	bl	8009a84 <__sinit>
 8007f20:	ab05      	add	r3, sp, #20
 8007f22:	9a04      	ldr	r2, [sp, #16]
 8007f24:	68a1      	ldr	r1, [r4, #8]
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f003 f925 	bl	800b178 <_vfiprintf_r>
 8007f2e:	b002      	add	sp, #8
 8007f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f34:	b004      	add	sp, #16
 8007f36:	4770      	bx	lr
 8007f38:	2000000c 	.word	0x2000000c

08007f3c <nanf>:
 8007f3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007f44 <nanf+0x8>
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	7fc00000 	.word	0x7fc00000

08007f48 <siprintf>:
 8007f48:	b40e      	push	{r1, r2, r3}
 8007f4a:	b500      	push	{lr}
 8007f4c:	b09c      	sub	sp, #112	; 0x70
 8007f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f50:	9002      	str	r0, [sp, #8]
 8007f52:	9006      	str	r0, [sp, #24]
 8007f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f58:	4809      	ldr	r0, [pc, #36]	; (8007f80 <siprintf+0x38>)
 8007f5a:	9107      	str	r1, [sp, #28]
 8007f5c:	9104      	str	r1, [sp, #16]
 8007f5e:	4909      	ldr	r1, [pc, #36]	; (8007f84 <siprintf+0x3c>)
 8007f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f64:	9105      	str	r1, [sp, #20]
 8007f66:	6800      	ldr	r0, [r0, #0]
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	a902      	add	r1, sp, #8
 8007f6c:	f002 ffda 	bl	800af24 <_svfiprintf_r>
 8007f70:	9b02      	ldr	r3, [sp, #8]
 8007f72:	2200      	movs	r2, #0
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	b01c      	add	sp, #112	; 0x70
 8007f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f7c:	b003      	add	sp, #12
 8007f7e:	4770      	bx	lr
 8007f80:	2000000c 	.word	0x2000000c
 8007f84:	ffff0208 	.word	0xffff0208

08007f88 <sulp>:
 8007f88:	b570      	push	{r4, r5, r6, lr}
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	460d      	mov	r5, r1
 8007f8e:	ec45 4b10 	vmov	d0, r4, r5
 8007f92:	4616      	mov	r6, r2
 8007f94:	f002 fd24 	bl	800a9e0 <__ulp>
 8007f98:	ec51 0b10 	vmov	r0, r1, d0
 8007f9c:	b17e      	cbz	r6, 8007fbe <sulp+0x36>
 8007f9e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007fa2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	dd09      	ble.n	8007fbe <sulp+0x36>
 8007faa:	051b      	lsls	r3, r3, #20
 8007fac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007fb0:	2400      	movs	r4, #0
 8007fb2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007fb6:	4622      	mov	r2, r4
 8007fb8:	462b      	mov	r3, r5
 8007fba:	f7f8 fb1d 	bl	80005f8 <__aeabi_dmul>
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}

08007fc0 <_strtod_l>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	ed2d 8b02 	vpush	{d8}
 8007fc8:	b09d      	sub	sp, #116	; 0x74
 8007fca:	461f      	mov	r7, r3
 8007fcc:	2300      	movs	r3, #0
 8007fce:	9318      	str	r3, [sp, #96]	; 0x60
 8007fd0:	4ba2      	ldr	r3, [pc, #648]	; (800825c <_strtod_l+0x29c>)
 8007fd2:	9213      	str	r2, [sp, #76]	; 0x4c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	9305      	str	r3, [sp, #20]
 8007fd8:	4604      	mov	r4, r0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	4688      	mov	r8, r1
 8007fde:	f7f8 f8f7 	bl	80001d0 <strlen>
 8007fe2:	f04f 0a00 	mov.w	sl, #0
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	f04f 0b00 	mov.w	fp, #0
 8007fec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007ff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ff2:	781a      	ldrb	r2, [r3, #0]
 8007ff4:	2a2b      	cmp	r2, #43	; 0x2b
 8007ff6:	d04e      	beq.n	8008096 <_strtod_l+0xd6>
 8007ff8:	d83b      	bhi.n	8008072 <_strtod_l+0xb2>
 8007ffa:	2a0d      	cmp	r2, #13
 8007ffc:	d834      	bhi.n	8008068 <_strtod_l+0xa8>
 8007ffe:	2a08      	cmp	r2, #8
 8008000:	d834      	bhi.n	800806c <_strtod_l+0xac>
 8008002:	2a00      	cmp	r2, #0
 8008004:	d03e      	beq.n	8008084 <_strtod_l+0xc4>
 8008006:	2300      	movs	r3, #0
 8008008:	930a      	str	r3, [sp, #40]	; 0x28
 800800a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800800c:	7833      	ldrb	r3, [r6, #0]
 800800e:	2b30      	cmp	r3, #48	; 0x30
 8008010:	f040 80b0 	bne.w	8008174 <_strtod_l+0x1b4>
 8008014:	7873      	ldrb	r3, [r6, #1]
 8008016:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800801a:	2b58      	cmp	r3, #88	; 0x58
 800801c:	d168      	bne.n	80080f0 <_strtod_l+0x130>
 800801e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	ab18      	add	r3, sp, #96	; 0x60
 8008024:	9702      	str	r7, [sp, #8]
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	4a8d      	ldr	r2, [pc, #564]	; (8008260 <_strtod_l+0x2a0>)
 800802a:	ab19      	add	r3, sp, #100	; 0x64
 800802c:	a917      	add	r1, sp, #92	; 0x5c
 800802e:	4620      	mov	r0, r4
 8008030:	f001 fe2c 	bl	8009c8c <__gethex>
 8008034:	f010 0707 	ands.w	r7, r0, #7
 8008038:	4605      	mov	r5, r0
 800803a:	d005      	beq.n	8008048 <_strtod_l+0x88>
 800803c:	2f06      	cmp	r7, #6
 800803e:	d12c      	bne.n	800809a <_strtod_l+0xda>
 8008040:	3601      	adds	r6, #1
 8008042:	2300      	movs	r3, #0
 8008044:	9617      	str	r6, [sp, #92]	; 0x5c
 8008046:	930a      	str	r3, [sp, #40]	; 0x28
 8008048:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800804a:	2b00      	cmp	r3, #0
 800804c:	f040 8590 	bne.w	8008b70 <_strtod_l+0xbb0>
 8008050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008052:	b1eb      	cbz	r3, 8008090 <_strtod_l+0xd0>
 8008054:	4652      	mov	r2, sl
 8008056:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800805a:	ec43 2b10 	vmov	d0, r2, r3
 800805e:	b01d      	add	sp, #116	; 0x74
 8008060:	ecbd 8b02 	vpop	{d8}
 8008064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008068:	2a20      	cmp	r2, #32
 800806a:	d1cc      	bne.n	8008006 <_strtod_l+0x46>
 800806c:	3301      	adds	r3, #1
 800806e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008070:	e7be      	b.n	8007ff0 <_strtod_l+0x30>
 8008072:	2a2d      	cmp	r2, #45	; 0x2d
 8008074:	d1c7      	bne.n	8008006 <_strtod_l+0x46>
 8008076:	2201      	movs	r2, #1
 8008078:	920a      	str	r2, [sp, #40]	; 0x28
 800807a:	1c5a      	adds	r2, r3, #1
 800807c:	9217      	str	r2, [sp, #92]	; 0x5c
 800807e:	785b      	ldrb	r3, [r3, #1]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1c2      	bne.n	800800a <_strtod_l+0x4a>
 8008084:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008086:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800808a:	2b00      	cmp	r3, #0
 800808c:	f040 856e 	bne.w	8008b6c <_strtod_l+0xbac>
 8008090:	4652      	mov	r2, sl
 8008092:	465b      	mov	r3, fp
 8008094:	e7e1      	b.n	800805a <_strtod_l+0x9a>
 8008096:	2200      	movs	r2, #0
 8008098:	e7ee      	b.n	8008078 <_strtod_l+0xb8>
 800809a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800809c:	b13a      	cbz	r2, 80080ae <_strtod_l+0xee>
 800809e:	2135      	movs	r1, #53	; 0x35
 80080a0:	a81a      	add	r0, sp, #104	; 0x68
 80080a2:	f002 fda8 	bl	800abf6 <__copybits>
 80080a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080a8:	4620      	mov	r0, r4
 80080aa:	f002 f967 	bl	800a37c <_Bfree>
 80080ae:	3f01      	subs	r7, #1
 80080b0:	2f04      	cmp	r7, #4
 80080b2:	d806      	bhi.n	80080c2 <_strtod_l+0x102>
 80080b4:	e8df f007 	tbb	[pc, r7]
 80080b8:	1714030a 	.word	0x1714030a
 80080bc:	0a          	.byte	0x0a
 80080bd:	00          	.byte	0x00
 80080be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80080c2:	0728      	lsls	r0, r5, #28
 80080c4:	d5c0      	bpl.n	8008048 <_strtod_l+0x88>
 80080c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80080ca:	e7bd      	b.n	8008048 <_strtod_l+0x88>
 80080cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80080d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80080d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80080d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80080da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80080de:	e7f0      	b.n	80080c2 <_strtod_l+0x102>
 80080e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008264 <_strtod_l+0x2a4>
 80080e4:	e7ed      	b.n	80080c2 <_strtod_l+0x102>
 80080e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80080ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80080ee:	e7e8      	b.n	80080c2 <_strtod_l+0x102>
 80080f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80080f6:	785b      	ldrb	r3, [r3, #1]
 80080f8:	2b30      	cmp	r3, #48	; 0x30
 80080fa:	d0f9      	beq.n	80080f0 <_strtod_l+0x130>
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0a3      	beq.n	8008048 <_strtod_l+0x88>
 8008100:	2301      	movs	r3, #1
 8008102:	f04f 0900 	mov.w	r9, #0
 8008106:	9304      	str	r3, [sp, #16]
 8008108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800810a:	9308      	str	r3, [sp, #32]
 800810c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008110:	464f      	mov	r7, r9
 8008112:	220a      	movs	r2, #10
 8008114:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008116:	7806      	ldrb	r6, [r0, #0]
 8008118:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800811c:	b2d9      	uxtb	r1, r3
 800811e:	2909      	cmp	r1, #9
 8008120:	d92a      	bls.n	8008178 <_strtod_l+0x1b8>
 8008122:	9905      	ldr	r1, [sp, #20]
 8008124:	462a      	mov	r2, r5
 8008126:	f003 f9b2 	bl	800b48e <strncmp>
 800812a:	b398      	cbz	r0, 8008194 <_strtod_l+0x1d4>
 800812c:	2000      	movs	r0, #0
 800812e:	4632      	mov	r2, r6
 8008130:	463d      	mov	r5, r7
 8008132:	9005      	str	r0, [sp, #20]
 8008134:	4603      	mov	r3, r0
 8008136:	2a65      	cmp	r2, #101	; 0x65
 8008138:	d001      	beq.n	800813e <_strtod_l+0x17e>
 800813a:	2a45      	cmp	r2, #69	; 0x45
 800813c:	d118      	bne.n	8008170 <_strtod_l+0x1b0>
 800813e:	b91d      	cbnz	r5, 8008148 <_strtod_l+0x188>
 8008140:	9a04      	ldr	r2, [sp, #16]
 8008142:	4302      	orrs	r2, r0
 8008144:	d09e      	beq.n	8008084 <_strtod_l+0xc4>
 8008146:	2500      	movs	r5, #0
 8008148:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800814c:	f108 0201 	add.w	r2, r8, #1
 8008150:	9217      	str	r2, [sp, #92]	; 0x5c
 8008152:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008156:	2a2b      	cmp	r2, #43	; 0x2b
 8008158:	d075      	beq.n	8008246 <_strtod_l+0x286>
 800815a:	2a2d      	cmp	r2, #45	; 0x2d
 800815c:	d07b      	beq.n	8008256 <_strtod_l+0x296>
 800815e:	f04f 0c00 	mov.w	ip, #0
 8008162:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008166:	2909      	cmp	r1, #9
 8008168:	f240 8082 	bls.w	8008270 <_strtod_l+0x2b0>
 800816c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008170:	2600      	movs	r6, #0
 8008172:	e09d      	b.n	80082b0 <_strtod_l+0x2f0>
 8008174:	2300      	movs	r3, #0
 8008176:	e7c4      	b.n	8008102 <_strtod_l+0x142>
 8008178:	2f08      	cmp	r7, #8
 800817a:	bfd8      	it	le
 800817c:	9907      	ldrle	r1, [sp, #28]
 800817e:	f100 0001 	add.w	r0, r0, #1
 8008182:	bfda      	itte	le
 8008184:	fb02 3301 	mlale	r3, r2, r1, r3
 8008188:	9307      	strle	r3, [sp, #28]
 800818a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800818e:	3701      	adds	r7, #1
 8008190:	9017      	str	r0, [sp, #92]	; 0x5c
 8008192:	e7bf      	b.n	8008114 <_strtod_l+0x154>
 8008194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008196:	195a      	adds	r2, r3, r5
 8008198:	9217      	str	r2, [sp, #92]	; 0x5c
 800819a:	5d5a      	ldrb	r2, [r3, r5]
 800819c:	2f00      	cmp	r7, #0
 800819e:	d037      	beq.n	8008210 <_strtod_l+0x250>
 80081a0:	9005      	str	r0, [sp, #20]
 80081a2:	463d      	mov	r5, r7
 80081a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80081a8:	2b09      	cmp	r3, #9
 80081aa:	d912      	bls.n	80081d2 <_strtod_l+0x212>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e7c2      	b.n	8008136 <_strtod_l+0x176>
 80081b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80081b6:	785a      	ldrb	r2, [r3, #1]
 80081b8:	3001      	adds	r0, #1
 80081ba:	2a30      	cmp	r2, #48	; 0x30
 80081bc:	d0f8      	beq.n	80081b0 <_strtod_l+0x1f0>
 80081be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80081c2:	2b08      	cmp	r3, #8
 80081c4:	f200 84d9 	bhi.w	8008b7a <_strtod_l+0xbba>
 80081c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081ca:	9005      	str	r0, [sp, #20]
 80081cc:	2000      	movs	r0, #0
 80081ce:	9308      	str	r3, [sp, #32]
 80081d0:	4605      	mov	r5, r0
 80081d2:	3a30      	subs	r2, #48	; 0x30
 80081d4:	f100 0301 	add.w	r3, r0, #1
 80081d8:	d014      	beq.n	8008204 <_strtod_l+0x244>
 80081da:	9905      	ldr	r1, [sp, #20]
 80081dc:	4419      	add	r1, r3
 80081de:	9105      	str	r1, [sp, #20]
 80081e0:	462b      	mov	r3, r5
 80081e2:	eb00 0e05 	add.w	lr, r0, r5
 80081e6:	210a      	movs	r1, #10
 80081e8:	4573      	cmp	r3, lr
 80081ea:	d113      	bne.n	8008214 <_strtod_l+0x254>
 80081ec:	182b      	adds	r3, r5, r0
 80081ee:	2b08      	cmp	r3, #8
 80081f0:	f105 0501 	add.w	r5, r5, #1
 80081f4:	4405      	add	r5, r0
 80081f6:	dc1c      	bgt.n	8008232 <_strtod_l+0x272>
 80081f8:	9907      	ldr	r1, [sp, #28]
 80081fa:	230a      	movs	r3, #10
 80081fc:	fb03 2301 	mla	r3, r3, r1, r2
 8008200:	9307      	str	r3, [sp, #28]
 8008202:	2300      	movs	r3, #0
 8008204:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008206:	1c51      	adds	r1, r2, #1
 8008208:	9117      	str	r1, [sp, #92]	; 0x5c
 800820a:	7852      	ldrb	r2, [r2, #1]
 800820c:	4618      	mov	r0, r3
 800820e:	e7c9      	b.n	80081a4 <_strtod_l+0x1e4>
 8008210:	4638      	mov	r0, r7
 8008212:	e7d2      	b.n	80081ba <_strtod_l+0x1fa>
 8008214:	2b08      	cmp	r3, #8
 8008216:	dc04      	bgt.n	8008222 <_strtod_l+0x262>
 8008218:	9e07      	ldr	r6, [sp, #28]
 800821a:	434e      	muls	r6, r1
 800821c:	9607      	str	r6, [sp, #28]
 800821e:	3301      	adds	r3, #1
 8008220:	e7e2      	b.n	80081e8 <_strtod_l+0x228>
 8008222:	f103 0c01 	add.w	ip, r3, #1
 8008226:	f1bc 0f10 	cmp.w	ip, #16
 800822a:	bfd8      	it	le
 800822c:	fb01 f909 	mulle.w	r9, r1, r9
 8008230:	e7f5      	b.n	800821e <_strtod_l+0x25e>
 8008232:	2d10      	cmp	r5, #16
 8008234:	bfdc      	itt	le
 8008236:	230a      	movle	r3, #10
 8008238:	fb03 2909 	mlale	r9, r3, r9, r2
 800823c:	e7e1      	b.n	8008202 <_strtod_l+0x242>
 800823e:	2300      	movs	r3, #0
 8008240:	9305      	str	r3, [sp, #20]
 8008242:	2301      	movs	r3, #1
 8008244:	e77c      	b.n	8008140 <_strtod_l+0x180>
 8008246:	f04f 0c00 	mov.w	ip, #0
 800824a:	f108 0202 	add.w	r2, r8, #2
 800824e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008250:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008254:	e785      	b.n	8008162 <_strtod_l+0x1a2>
 8008256:	f04f 0c01 	mov.w	ip, #1
 800825a:	e7f6      	b.n	800824a <_strtod_l+0x28a>
 800825c:	0800bebc 	.word	0x0800bebc
 8008260:	0800bc10 	.word	0x0800bc10
 8008264:	7ff00000 	.word	0x7ff00000
 8008268:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800826a:	1c51      	adds	r1, r2, #1
 800826c:	9117      	str	r1, [sp, #92]	; 0x5c
 800826e:	7852      	ldrb	r2, [r2, #1]
 8008270:	2a30      	cmp	r2, #48	; 0x30
 8008272:	d0f9      	beq.n	8008268 <_strtod_l+0x2a8>
 8008274:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008278:	2908      	cmp	r1, #8
 800827a:	f63f af79 	bhi.w	8008170 <_strtod_l+0x1b0>
 800827e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008282:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008284:	9206      	str	r2, [sp, #24]
 8008286:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008288:	1c51      	adds	r1, r2, #1
 800828a:	9117      	str	r1, [sp, #92]	; 0x5c
 800828c:	7852      	ldrb	r2, [r2, #1]
 800828e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008292:	2e09      	cmp	r6, #9
 8008294:	d937      	bls.n	8008306 <_strtod_l+0x346>
 8008296:	9e06      	ldr	r6, [sp, #24]
 8008298:	1b89      	subs	r1, r1, r6
 800829a:	2908      	cmp	r1, #8
 800829c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80082a0:	dc02      	bgt.n	80082a8 <_strtod_l+0x2e8>
 80082a2:	4576      	cmp	r6, lr
 80082a4:	bfa8      	it	ge
 80082a6:	4676      	movge	r6, lr
 80082a8:	f1bc 0f00 	cmp.w	ip, #0
 80082ac:	d000      	beq.n	80082b0 <_strtod_l+0x2f0>
 80082ae:	4276      	negs	r6, r6
 80082b0:	2d00      	cmp	r5, #0
 80082b2:	d14d      	bne.n	8008350 <_strtod_l+0x390>
 80082b4:	9904      	ldr	r1, [sp, #16]
 80082b6:	4301      	orrs	r1, r0
 80082b8:	f47f aec6 	bne.w	8008048 <_strtod_l+0x88>
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f47f aee1 	bne.w	8008084 <_strtod_l+0xc4>
 80082c2:	2a69      	cmp	r2, #105	; 0x69
 80082c4:	d027      	beq.n	8008316 <_strtod_l+0x356>
 80082c6:	dc24      	bgt.n	8008312 <_strtod_l+0x352>
 80082c8:	2a49      	cmp	r2, #73	; 0x49
 80082ca:	d024      	beq.n	8008316 <_strtod_l+0x356>
 80082cc:	2a4e      	cmp	r2, #78	; 0x4e
 80082ce:	f47f aed9 	bne.w	8008084 <_strtod_l+0xc4>
 80082d2:	499f      	ldr	r1, [pc, #636]	; (8008550 <_strtod_l+0x590>)
 80082d4:	a817      	add	r0, sp, #92	; 0x5c
 80082d6:	f001 ff31 	bl	800a13c <__match>
 80082da:	2800      	cmp	r0, #0
 80082dc:	f43f aed2 	beq.w	8008084 <_strtod_l+0xc4>
 80082e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b28      	cmp	r3, #40	; 0x28
 80082e6:	d12d      	bne.n	8008344 <_strtod_l+0x384>
 80082e8:	499a      	ldr	r1, [pc, #616]	; (8008554 <_strtod_l+0x594>)
 80082ea:	aa1a      	add	r2, sp, #104	; 0x68
 80082ec:	a817      	add	r0, sp, #92	; 0x5c
 80082ee:	f001 ff39 	bl	800a164 <__hexnan>
 80082f2:	2805      	cmp	r0, #5
 80082f4:	d126      	bne.n	8008344 <_strtod_l+0x384>
 80082f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80082fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008300:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008304:	e6a0      	b.n	8008048 <_strtod_l+0x88>
 8008306:	210a      	movs	r1, #10
 8008308:	fb01 2e0e 	mla	lr, r1, lr, r2
 800830c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008310:	e7b9      	b.n	8008286 <_strtod_l+0x2c6>
 8008312:	2a6e      	cmp	r2, #110	; 0x6e
 8008314:	e7db      	b.n	80082ce <_strtod_l+0x30e>
 8008316:	4990      	ldr	r1, [pc, #576]	; (8008558 <_strtod_l+0x598>)
 8008318:	a817      	add	r0, sp, #92	; 0x5c
 800831a:	f001 ff0f 	bl	800a13c <__match>
 800831e:	2800      	cmp	r0, #0
 8008320:	f43f aeb0 	beq.w	8008084 <_strtod_l+0xc4>
 8008324:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008326:	498d      	ldr	r1, [pc, #564]	; (800855c <_strtod_l+0x59c>)
 8008328:	3b01      	subs	r3, #1
 800832a:	a817      	add	r0, sp, #92	; 0x5c
 800832c:	9317      	str	r3, [sp, #92]	; 0x5c
 800832e:	f001 ff05 	bl	800a13c <__match>
 8008332:	b910      	cbnz	r0, 800833a <_strtod_l+0x37a>
 8008334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008336:	3301      	adds	r3, #1
 8008338:	9317      	str	r3, [sp, #92]	; 0x5c
 800833a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800856c <_strtod_l+0x5ac>
 800833e:	f04f 0a00 	mov.w	sl, #0
 8008342:	e681      	b.n	8008048 <_strtod_l+0x88>
 8008344:	4886      	ldr	r0, [pc, #536]	; (8008560 <_strtod_l+0x5a0>)
 8008346:	f003 f847 	bl	800b3d8 <nan>
 800834a:	ec5b ab10 	vmov	sl, fp, d0
 800834e:	e67b      	b.n	8008048 <_strtod_l+0x88>
 8008350:	9b05      	ldr	r3, [sp, #20]
 8008352:	9807      	ldr	r0, [sp, #28]
 8008354:	1af3      	subs	r3, r6, r3
 8008356:	2f00      	cmp	r7, #0
 8008358:	bf08      	it	eq
 800835a:	462f      	moveq	r7, r5
 800835c:	2d10      	cmp	r5, #16
 800835e:	9306      	str	r3, [sp, #24]
 8008360:	46a8      	mov	r8, r5
 8008362:	bfa8      	it	ge
 8008364:	f04f 0810 	movge.w	r8, #16
 8008368:	f7f8 f8cc 	bl	8000504 <__aeabi_ui2d>
 800836c:	2d09      	cmp	r5, #9
 800836e:	4682      	mov	sl, r0
 8008370:	468b      	mov	fp, r1
 8008372:	dd13      	ble.n	800839c <_strtod_l+0x3dc>
 8008374:	4b7b      	ldr	r3, [pc, #492]	; (8008564 <_strtod_l+0x5a4>)
 8008376:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800837a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800837e:	f7f8 f93b 	bl	80005f8 <__aeabi_dmul>
 8008382:	4682      	mov	sl, r0
 8008384:	4648      	mov	r0, r9
 8008386:	468b      	mov	fp, r1
 8008388:	f7f8 f8bc 	bl	8000504 <__aeabi_ui2d>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
 8008390:	4650      	mov	r0, sl
 8008392:	4659      	mov	r1, fp
 8008394:	f7f7 ff7a 	bl	800028c <__adddf3>
 8008398:	4682      	mov	sl, r0
 800839a:	468b      	mov	fp, r1
 800839c:	2d0f      	cmp	r5, #15
 800839e:	dc38      	bgt.n	8008412 <_strtod_l+0x452>
 80083a0:	9b06      	ldr	r3, [sp, #24]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f43f ae50 	beq.w	8008048 <_strtod_l+0x88>
 80083a8:	dd24      	ble.n	80083f4 <_strtod_l+0x434>
 80083aa:	2b16      	cmp	r3, #22
 80083ac:	dc0b      	bgt.n	80083c6 <_strtod_l+0x406>
 80083ae:	496d      	ldr	r1, [pc, #436]	; (8008564 <_strtod_l+0x5a4>)
 80083b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083b8:	4652      	mov	r2, sl
 80083ba:	465b      	mov	r3, fp
 80083bc:	f7f8 f91c 	bl	80005f8 <__aeabi_dmul>
 80083c0:	4682      	mov	sl, r0
 80083c2:	468b      	mov	fp, r1
 80083c4:	e640      	b.n	8008048 <_strtod_l+0x88>
 80083c6:	9a06      	ldr	r2, [sp, #24]
 80083c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80083cc:	4293      	cmp	r3, r2
 80083ce:	db20      	blt.n	8008412 <_strtod_l+0x452>
 80083d0:	4c64      	ldr	r4, [pc, #400]	; (8008564 <_strtod_l+0x5a4>)
 80083d2:	f1c5 050f 	rsb	r5, r5, #15
 80083d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80083da:	4652      	mov	r2, sl
 80083dc:	465b      	mov	r3, fp
 80083de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083e2:	f7f8 f909 	bl	80005f8 <__aeabi_dmul>
 80083e6:	9b06      	ldr	r3, [sp, #24]
 80083e8:	1b5d      	subs	r5, r3, r5
 80083ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80083ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80083f2:	e7e3      	b.n	80083bc <_strtod_l+0x3fc>
 80083f4:	9b06      	ldr	r3, [sp, #24]
 80083f6:	3316      	adds	r3, #22
 80083f8:	db0b      	blt.n	8008412 <_strtod_l+0x452>
 80083fa:	9b05      	ldr	r3, [sp, #20]
 80083fc:	1b9e      	subs	r6, r3, r6
 80083fe:	4b59      	ldr	r3, [pc, #356]	; (8008564 <_strtod_l+0x5a4>)
 8008400:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008404:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008408:	4650      	mov	r0, sl
 800840a:	4659      	mov	r1, fp
 800840c:	f7f8 fa1e 	bl	800084c <__aeabi_ddiv>
 8008410:	e7d6      	b.n	80083c0 <_strtod_l+0x400>
 8008412:	9b06      	ldr	r3, [sp, #24]
 8008414:	eba5 0808 	sub.w	r8, r5, r8
 8008418:	4498      	add	r8, r3
 800841a:	f1b8 0f00 	cmp.w	r8, #0
 800841e:	dd74      	ble.n	800850a <_strtod_l+0x54a>
 8008420:	f018 030f 	ands.w	r3, r8, #15
 8008424:	d00a      	beq.n	800843c <_strtod_l+0x47c>
 8008426:	494f      	ldr	r1, [pc, #316]	; (8008564 <_strtod_l+0x5a4>)
 8008428:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800842c:	4652      	mov	r2, sl
 800842e:	465b      	mov	r3, fp
 8008430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008434:	f7f8 f8e0 	bl	80005f8 <__aeabi_dmul>
 8008438:	4682      	mov	sl, r0
 800843a:	468b      	mov	fp, r1
 800843c:	f038 080f 	bics.w	r8, r8, #15
 8008440:	d04f      	beq.n	80084e2 <_strtod_l+0x522>
 8008442:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008446:	dd22      	ble.n	800848e <_strtod_l+0x4ce>
 8008448:	2500      	movs	r5, #0
 800844a:	462e      	mov	r6, r5
 800844c:	9507      	str	r5, [sp, #28]
 800844e:	9505      	str	r5, [sp, #20]
 8008450:	2322      	movs	r3, #34	; 0x22
 8008452:	f8df b118 	ldr.w	fp, [pc, #280]	; 800856c <_strtod_l+0x5ac>
 8008456:	6023      	str	r3, [r4, #0]
 8008458:	f04f 0a00 	mov.w	sl, #0
 800845c:	9b07      	ldr	r3, [sp, #28]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f43f adf2 	beq.w	8008048 <_strtod_l+0x88>
 8008464:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008466:	4620      	mov	r0, r4
 8008468:	f001 ff88 	bl	800a37c <_Bfree>
 800846c:	9905      	ldr	r1, [sp, #20]
 800846e:	4620      	mov	r0, r4
 8008470:	f001 ff84 	bl	800a37c <_Bfree>
 8008474:	4631      	mov	r1, r6
 8008476:	4620      	mov	r0, r4
 8008478:	f001 ff80 	bl	800a37c <_Bfree>
 800847c:	9907      	ldr	r1, [sp, #28]
 800847e:	4620      	mov	r0, r4
 8008480:	f001 ff7c 	bl	800a37c <_Bfree>
 8008484:	4629      	mov	r1, r5
 8008486:	4620      	mov	r0, r4
 8008488:	f001 ff78 	bl	800a37c <_Bfree>
 800848c:	e5dc      	b.n	8008048 <_strtod_l+0x88>
 800848e:	4b36      	ldr	r3, [pc, #216]	; (8008568 <_strtod_l+0x5a8>)
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	2300      	movs	r3, #0
 8008494:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008498:	4650      	mov	r0, sl
 800849a:	4659      	mov	r1, fp
 800849c:	4699      	mov	r9, r3
 800849e:	f1b8 0f01 	cmp.w	r8, #1
 80084a2:	dc21      	bgt.n	80084e8 <_strtod_l+0x528>
 80084a4:	b10b      	cbz	r3, 80084aa <_strtod_l+0x4ea>
 80084a6:	4682      	mov	sl, r0
 80084a8:	468b      	mov	fp, r1
 80084aa:	4b2f      	ldr	r3, [pc, #188]	; (8008568 <_strtod_l+0x5a8>)
 80084ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80084b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80084b4:	4652      	mov	r2, sl
 80084b6:	465b      	mov	r3, fp
 80084b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80084bc:	f7f8 f89c 	bl	80005f8 <__aeabi_dmul>
 80084c0:	4b2a      	ldr	r3, [pc, #168]	; (800856c <_strtod_l+0x5ac>)
 80084c2:	460a      	mov	r2, r1
 80084c4:	400b      	ands	r3, r1
 80084c6:	492a      	ldr	r1, [pc, #168]	; (8008570 <_strtod_l+0x5b0>)
 80084c8:	428b      	cmp	r3, r1
 80084ca:	4682      	mov	sl, r0
 80084cc:	d8bc      	bhi.n	8008448 <_strtod_l+0x488>
 80084ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80084d2:	428b      	cmp	r3, r1
 80084d4:	bf86      	itte	hi
 80084d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008574 <_strtod_l+0x5b4>
 80084da:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80084de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80084e2:	2300      	movs	r3, #0
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	e084      	b.n	80085f2 <_strtod_l+0x632>
 80084e8:	f018 0f01 	tst.w	r8, #1
 80084ec:	d005      	beq.n	80084fa <_strtod_l+0x53a>
 80084ee:	9b04      	ldr	r3, [sp, #16]
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	f7f8 f880 	bl	80005f8 <__aeabi_dmul>
 80084f8:	2301      	movs	r3, #1
 80084fa:	9a04      	ldr	r2, [sp, #16]
 80084fc:	3208      	adds	r2, #8
 80084fe:	f109 0901 	add.w	r9, r9, #1
 8008502:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008506:	9204      	str	r2, [sp, #16]
 8008508:	e7c9      	b.n	800849e <_strtod_l+0x4de>
 800850a:	d0ea      	beq.n	80084e2 <_strtod_l+0x522>
 800850c:	f1c8 0800 	rsb	r8, r8, #0
 8008510:	f018 020f 	ands.w	r2, r8, #15
 8008514:	d00a      	beq.n	800852c <_strtod_l+0x56c>
 8008516:	4b13      	ldr	r3, [pc, #76]	; (8008564 <_strtod_l+0x5a4>)
 8008518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800851c:	4650      	mov	r0, sl
 800851e:	4659      	mov	r1, fp
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f7f8 f992 	bl	800084c <__aeabi_ddiv>
 8008528:	4682      	mov	sl, r0
 800852a:	468b      	mov	fp, r1
 800852c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008530:	d0d7      	beq.n	80084e2 <_strtod_l+0x522>
 8008532:	f1b8 0f1f 	cmp.w	r8, #31
 8008536:	dd1f      	ble.n	8008578 <_strtod_l+0x5b8>
 8008538:	2500      	movs	r5, #0
 800853a:	462e      	mov	r6, r5
 800853c:	9507      	str	r5, [sp, #28]
 800853e:	9505      	str	r5, [sp, #20]
 8008540:	2322      	movs	r3, #34	; 0x22
 8008542:	f04f 0a00 	mov.w	sl, #0
 8008546:	f04f 0b00 	mov.w	fp, #0
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	e786      	b.n	800845c <_strtod_l+0x49c>
 800854e:	bf00      	nop
 8008550:	0800bbe1 	.word	0x0800bbe1
 8008554:	0800bc24 	.word	0x0800bc24
 8008558:	0800bbd9 	.word	0x0800bbd9
 800855c:	0800bd64 	.word	0x0800bd64
 8008560:	0800c078 	.word	0x0800c078
 8008564:	0800bf58 	.word	0x0800bf58
 8008568:	0800bf30 	.word	0x0800bf30
 800856c:	7ff00000 	.word	0x7ff00000
 8008570:	7ca00000 	.word	0x7ca00000
 8008574:	7fefffff 	.word	0x7fefffff
 8008578:	f018 0310 	ands.w	r3, r8, #16
 800857c:	bf18      	it	ne
 800857e:	236a      	movne	r3, #106	; 0x6a
 8008580:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008930 <_strtod_l+0x970>
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	4650      	mov	r0, sl
 8008588:	4659      	mov	r1, fp
 800858a:	2300      	movs	r3, #0
 800858c:	f018 0f01 	tst.w	r8, #1
 8008590:	d004      	beq.n	800859c <_strtod_l+0x5dc>
 8008592:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008596:	f7f8 f82f 	bl	80005f8 <__aeabi_dmul>
 800859a:	2301      	movs	r3, #1
 800859c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80085a0:	f109 0908 	add.w	r9, r9, #8
 80085a4:	d1f2      	bne.n	800858c <_strtod_l+0x5cc>
 80085a6:	b10b      	cbz	r3, 80085ac <_strtod_l+0x5ec>
 80085a8:	4682      	mov	sl, r0
 80085aa:	468b      	mov	fp, r1
 80085ac:	9b04      	ldr	r3, [sp, #16]
 80085ae:	b1c3      	cbz	r3, 80085e2 <_strtod_l+0x622>
 80085b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80085b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	4659      	mov	r1, fp
 80085bc:	dd11      	ble.n	80085e2 <_strtod_l+0x622>
 80085be:	2b1f      	cmp	r3, #31
 80085c0:	f340 8124 	ble.w	800880c <_strtod_l+0x84c>
 80085c4:	2b34      	cmp	r3, #52	; 0x34
 80085c6:	bfde      	ittt	le
 80085c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80085cc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80085d0:	fa03 f202 	lslle.w	r2, r3, r2
 80085d4:	f04f 0a00 	mov.w	sl, #0
 80085d8:	bfcc      	ite	gt
 80085da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80085de:	ea02 0b01 	andle.w	fp, r2, r1
 80085e2:	2200      	movs	r2, #0
 80085e4:	2300      	movs	r3, #0
 80085e6:	4650      	mov	r0, sl
 80085e8:	4659      	mov	r1, fp
 80085ea:	f7f8 fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d1a2      	bne.n	8008538 <_strtod_l+0x578>
 80085f2:	9b07      	ldr	r3, [sp, #28]
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	9908      	ldr	r1, [sp, #32]
 80085f8:	462b      	mov	r3, r5
 80085fa:	463a      	mov	r2, r7
 80085fc:	4620      	mov	r0, r4
 80085fe:	f001 ff25 	bl	800a44c <__s2b>
 8008602:	9007      	str	r0, [sp, #28]
 8008604:	2800      	cmp	r0, #0
 8008606:	f43f af1f 	beq.w	8008448 <_strtod_l+0x488>
 800860a:	9b05      	ldr	r3, [sp, #20]
 800860c:	1b9e      	subs	r6, r3, r6
 800860e:	9b06      	ldr	r3, [sp, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	bfb4      	ite	lt
 8008614:	4633      	movlt	r3, r6
 8008616:	2300      	movge	r3, #0
 8008618:	930c      	str	r3, [sp, #48]	; 0x30
 800861a:	9b06      	ldr	r3, [sp, #24]
 800861c:	2500      	movs	r5, #0
 800861e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008622:	9312      	str	r3, [sp, #72]	; 0x48
 8008624:	462e      	mov	r6, r5
 8008626:	9b07      	ldr	r3, [sp, #28]
 8008628:	4620      	mov	r0, r4
 800862a:	6859      	ldr	r1, [r3, #4]
 800862c:	f001 fe66 	bl	800a2fc <_Balloc>
 8008630:	9005      	str	r0, [sp, #20]
 8008632:	2800      	cmp	r0, #0
 8008634:	f43f af0c 	beq.w	8008450 <_strtod_l+0x490>
 8008638:	9b07      	ldr	r3, [sp, #28]
 800863a:	691a      	ldr	r2, [r3, #16]
 800863c:	3202      	adds	r2, #2
 800863e:	f103 010c 	add.w	r1, r3, #12
 8008642:	0092      	lsls	r2, r2, #2
 8008644:	300c      	adds	r0, #12
 8008646:	f001 fe4b 	bl	800a2e0 <memcpy>
 800864a:	ec4b ab10 	vmov	d0, sl, fp
 800864e:	aa1a      	add	r2, sp, #104	; 0x68
 8008650:	a919      	add	r1, sp, #100	; 0x64
 8008652:	4620      	mov	r0, r4
 8008654:	f002 fa40 	bl	800aad8 <__d2b>
 8008658:	ec4b ab18 	vmov	d8, sl, fp
 800865c:	9018      	str	r0, [sp, #96]	; 0x60
 800865e:	2800      	cmp	r0, #0
 8008660:	f43f aef6 	beq.w	8008450 <_strtod_l+0x490>
 8008664:	2101      	movs	r1, #1
 8008666:	4620      	mov	r0, r4
 8008668:	f001 ff8a 	bl	800a580 <__i2b>
 800866c:	4606      	mov	r6, r0
 800866e:	2800      	cmp	r0, #0
 8008670:	f43f aeee 	beq.w	8008450 <_strtod_l+0x490>
 8008674:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008676:	9904      	ldr	r1, [sp, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	bfab      	itete	ge
 800867c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800867e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008680:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008682:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008686:	bfac      	ite	ge
 8008688:	eb03 0902 	addge.w	r9, r3, r2
 800868c:	1ad7      	sublt	r7, r2, r3
 800868e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008690:	eba3 0801 	sub.w	r8, r3, r1
 8008694:	4490      	add	r8, r2
 8008696:	4ba1      	ldr	r3, [pc, #644]	; (800891c <_strtod_l+0x95c>)
 8008698:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800869c:	4598      	cmp	r8, r3
 800869e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80086a2:	f280 80c7 	bge.w	8008834 <_strtod_l+0x874>
 80086a6:	eba3 0308 	sub.w	r3, r3, r8
 80086aa:	2b1f      	cmp	r3, #31
 80086ac:	eba2 0203 	sub.w	r2, r2, r3
 80086b0:	f04f 0101 	mov.w	r1, #1
 80086b4:	f300 80b1 	bgt.w	800881a <_strtod_l+0x85a>
 80086b8:	fa01 f303 	lsl.w	r3, r1, r3
 80086bc:	930d      	str	r3, [sp, #52]	; 0x34
 80086be:	2300      	movs	r3, #0
 80086c0:	9308      	str	r3, [sp, #32]
 80086c2:	eb09 0802 	add.w	r8, r9, r2
 80086c6:	9b04      	ldr	r3, [sp, #16]
 80086c8:	45c1      	cmp	r9, r8
 80086ca:	4417      	add	r7, r2
 80086cc:	441f      	add	r7, r3
 80086ce:	464b      	mov	r3, r9
 80086d0:	bfa8      	it	ge
 80086d2:	4643      	movge	r3, r8
 80086d4:	42bb      	cmp	r3, r7
 80086d6:	bfa8      	it	ge
 80086d8:	463b      	movge	r3, r7
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bfc2      	ittt	gt
 80086de:	eba8 0803 	subgt.w	r8, r8, r3
 80086e2:	1aff      	subgt	r7, r7, r3
 80086e4:	eba9 0903 	subgt.w	r9, r9, r3
 80086e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dd17      	ble.n	800871e <_strtod_l+0x75e>
 80086ee:	4631      	mov	r1, r6
 80086f0:	461a      	mov	r2, r3
 80086f2:	4620      	mov	r0, r4
 80086f4:	f002 f804 	bl	800a700 <__pow5mult>
 80086f8:	4606      	mov	r6, r0
 80086fa:	2800      	cmp	r0, #0
 80086fc:	f43f aea8 	beq.w	8008450 <_strtod_l+0x490>
 8008700:	4601      	mov	r1, r0
 8008702:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008704:	4620      	mov	r0, r4
 8008706:	f001 ff51 	bl	800a5ac <__multiply>
 800870a:	900b      	str	r0, [sp, #44]	; 0x2c
 800870c:	2800      	cmp	r0, #0
 800870e:	f43f ae9f 	beq.w	8008450 <_strtod_l+0x490>
 8008712:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008714:	4620      	mov	r0, r4
 8008716:	f001 fe31 	bl	800a37c <_Bfree>
 800871a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800871c:	9318      	str	r3, [sp, #96]	; 0x60
 800871e:	f1b8 0f00 	cmp.w	r8, #0
 8008722:	f300 808c 	bgt.w	800883e <_strtod_l+0x87e>
 8008726:	9b06      	ldr	r3, [sp, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	dd08      	ble.n	800873e <_strtod_l+0x77e>
 800872c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800872e:	9905      	ldr	r1, [sp, #20]
 8008730:	4620      	mov	r0, r4
 8008732:	f001 ffe5 	bl	800a700 <__pow5mult>
 8008736:	9005      	str	r0, [sp, #20]
 8008738:	2800      	cmp	r0, #0
 800873a:	f43f ae89 	beq.w	8008450 <_strtod_l+0x490>
 800873e:	2f00      	cmp	r7, #0
 8008740:	dd08      	ble.n	8008754 <_strtod_l+0x794>
 8008742:	9905      	ldr	r1, [sp, #20]
 8008744:	463a      	mov	r2, r7
 8008746:	4620      	mov	r0, r4
 8008748:	f002 f834 	bl	800a7b4 <__lshift>
 800874c:	9005      	str	r0, [sp, #20]
 800874e:	2800      	cmp	r0, #0
 8008750:	f43f ae7e 	beq.w	8008450 <_strtod_l+0x490>
 8008754:	f1b9 0f00 	cmp.w	r9, #0
 8008758:	dd08      	ble.n	800876c <_strtod_l+0x7ac>
 800875a:	4631      	mov	r1, r6
 800875c:	464a      	mov	r2, r9
 800875e:	4620      	mov	r0, r4
 8008760:	f002 f828 	bl	800a7b4 <__lshift>
 8008764:	4606      	mov	r6, r0
 8008766:	2800      	cmp	r0, #0
 8008768:	f43f ae72 	beq.w	8008450 <_strtod_l+0x490>
 800876c:	9a05      	ldr	r2, [sp, #20]
 800876e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008770:	4620      	mov	r0, r4
 8008772:	f002 f8ab 	bl	800a8cc <__mdiff>
 8008776:	4605      	mov	r5, r0
 8008778:	2800      	cmp	r0, #0
 800877a:	f43f ae69 	beq.w	8008450 <_strtod_l+0x490>
 800877e:	68c3      	ldr	r3, [r0, #12]
 8008780:	930b      	str	r3, [sp, #44]	; 0x2c
 8008782:	2300      	movs	r3, #0
 8008784:	60c3      	str	r3, [r0, #12]
 8008786:	4631      	mov	r1, r6
 8008788:	f002 f884 	bl	800a894 <__mcmp>
 800878c:	2800      	cmp	r0, #0
 800878e:	da60      	bge.n	8008852 <_strtod_l+0x892>
 8008790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008792:	ea53 030a 	orrs.w	r3, r3, sl
 8008796:	f040 8082 	bne.w	800889e <_strtod_l+0x8de>
 800879a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d17d      	bne.n	800889e <_strtod_l+0x8de>
 80087a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087a6:	0d1b      	lsrs	r3, r3, #20
 80087a8:	051b      	lsls	r3, r3, #20
 80087aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80087ae:	d976      	bls.n	800889e <_strtod_l+0x8de>
 80087b0:	696b      	ldr	r3, [r5, #20]
 80087b2:	b913      	cbnz	r3, 80087ba <_strtod_l+0x7fa>
 80087b4:	692b      	ldr	r3, [r5, #16]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	dd71      	ble.n	800889e <_strtod_l+0x8de>
 80087ba:	4629      	mov	r1, r5
 80087bc:	2201      	movs	r2, #1
 80087be:	4620      	mov	r0, r4
 80087c0:	f001 fff8 	bl	800a7b4 <__lshift>
 80087c4:	4631      	mov	r1, r6
 80087c6:	4605      	mov	r5, r0
 80087c8:	f002 f864 	bl	800a894 <__mcmp>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	dd66      	ble.n	800889e <_strtod_l+0x8de>
 80087d0:	9904      	ldr	r1, [sp, #16]
 80087d2:	4a53      	ldr	r2, [pc, #332]	; (8008920 <_strtod_l+0x960>)
 80087d4:	465b      	mov	r3, fp
 80087d6:	2900      	cmp	r1, #0
 80087d8:	f000 8081 	beq.w	80088de <_strtod_l+0x91e>
 80087dc:	ea02 010b 	and.w	r1, r2, fp
 80087e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80087e4:	dc7b      	bgt.n	80088de <_strtod_l+0x91e>
 80087e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80087ea:	f77f aea9 	ble.w	8008540 <_strtod_l+0x580>
 80087ee:	4b4d      	ldr	r3, [pc, #308]	; (8008924 <_strtod_l+0x964>)
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	2200      	movs	r2, #0
 80087f6:	f7f7 feff 	bl	80005f8 <__aeabi_dmul>
 80087fa:	460b      	mov	r3, r1
 80087fc:	4303      	orrs	r3, r0
 80087fe:	bf08      	it	eq
 8008800:	2322      	moveq	r3, #34	; 0x22
 8008802:	4682      	mov	sl, r0
 8008804:	468b      	mov	fp, r1
 8008806:	bf08      	it	eq
 8008808:	6023      	streq	r3, [r4, #0]
 800880a:	e62b      	b.n	8008464 <_strtod_l+0x4a4>
 800880c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008810:	fa02 f303 	lsl.w	r3, r2, r3
 8008814:	ea03 0a0a 	and.w	sl, r3, sl
 8008818:	e6e3      	b.n	80085e2 <_strtod_l+0x622>
 800881a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800881e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008822:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008826:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800882a:	fa01 f308 	lsl.w	r3, r1, r8
 800882e:	9308      	str	r3, [sp, #32]
 8008830:	910d      	str	r1, [sp, #52]	; 0x34
 8008832:	e746      	b.n	80086c2 <_strtod_l+0x702>
 8008834:	2300      	movs	r3, #0
 8008836:	9308      	str	r3, [sp, #32]
 8008838:	2301      	movs	r3, #1
 800883a:	930d      	str	r3, [sp, #52]	; 0x34
 800883c:	e741      	b.n	80086c2 <_strtod_l+0x702>
 800883e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008840:	4642      	mov	r2, r8
 8008842:	4620      	mov	r0, r4
 8008844:	f001 ffb6 	bl	800a7b4 <__lshift>
 8008848:	9018      	str	r0, [sp, #96]	; 0x60
 800884a:	2800      	cmp	r0, #0
 800884c:	f47f af6b 	bne.w	8008726 <_strtod_l+0x766>
 8008850:	e5fe      	b.n	8008450 <_strtod_l+0x490>
 8008852:	465f      	mov	r7, fp
 8008854:	d16e      	bne.n	8008934 <_strtod_l+0x974>
 8008856:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008858:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800885c:	b342      	cbz	r2, 80088b0 <_strtod_l+0x8f0>
 800885e:	4a32      	ldr	r2, [pc, #200]	; (8008928 <_strtod_l+0x968>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d128      	bne.n	80088b6 <_strtod_l+0x8f6>
 8008864:	9b04      	ldr	r3, [sp, #16]
 8008866:	4651      	mov	r1, sl
 8008868:	b1eb      	cbz	r3, 80088a6 <_strtod_l+0x8e6>
 800886a:	4b2d      	ldr	r3, [pc, #180]	; (8008920 <_strtod_l+0x960>)
 800886c:	403b      	ands	r3, r7
 800886e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008876:	d819      	bhi.n	80088ac <_strtod_l+0x8ec>
 8008878:	0d1b      	lsrs	r3, r3, #20
 800887a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800887e:	fa02 f303 	lsl.w	r3, r2, r3
 8008882:	4299      	cmp	r1, r3
 8008884:	d117      	bne.n	80088b6 <_strtod_l+0x8f6>
 8008886:	4b29      	ldr	r3, [pc, #164]	; (800892c <_strtod_l+0x96c>)
 8008888:	429f      	cmp	r7, r3
 800888a:	d102      	bne.n	8008892 <_strtod_l+0x8d2>
 800888c:	3101      	adds	r1, #1
 800888e:	f43f addf 	beq.w	8008450 <_strtod_l+0x490>
 8008892:	4b23      	ldr	r3, [pc, #140]	; (8008920 <_strtod_l+0x960>)
 8008894:	403b      	ands	r3, r7
 8008896:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800889a:	f04f 0a00 	mov.w	sl, #0
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1a4      	bne.n	80087ee <_strtod_l+0x82e>
 80088a4:	e5de      	b.n	8008464 <_strtod_l+0x4a4>
 80088a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088aa:	e7ea      	b.n	8008882 <_strtod_l+0x8c2>
 80088ac:	4613      	mov	r3, r2
 80088ae:	e7e8      	b.n	8008882 <_strtod_l+0x8c2>
 80088b0:	ea53 030a 	orrs.w	r3, r3, sl
 80088b4:	d08c      	beq.n	80087d0 <_strtod_l+0x810>
 80088b6:	9b08      	ldr	r3, [sp, #32]
 80088b8:	b1db      	cbz	r3, 80088f2 <_strtod_l+0x932>
 80088ba:	423b      	tst	r3, r7
 80088bc:	d0ef      	beq.n	800889e <_strtod_l+0x8de>
 80088be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c0:	9a04      	ldr	r2, [sp, #16]
 80088c2:	4650      	mov	r0, sl
 80088c4:	4659      	mov	r1, fp
 80088c6:	b1c3      	cbz	r3, 80088fa <_strtod_l+0x93a>
 80088c8:	f7ff fb5e 	bl	8007f88 <sulp>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	ec51 0b18 	vmov	r0, r1, d8
 80088d4:	f7f7 fcda 	bl	800028c <__adddf3>
 80088d8:	4682      	mov	sl, r0
 80088da:	468b      	mov	fp, r1
 80088dc:	e7df      	b.n	800889e <_strtod_l+0x8de>
 80088de:	4013      	ands	r3, r2
 80088e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80088e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80088e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80088ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80088f0:	e7d5      	b.n	800889e <_strtod_l+0x8de>
 80088f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088f4:	ea13 0f0a 	tst.w	r3, sl
 80088f8:	e7e0      	b.n	80088bc <_strtod_l+0x8fc>
 80088fa:	f7ff fb45 	bl	8007f88 <sulp>
 80088fe:	4602      	mov	r2, r0
 8008900:	460b      	mov	r3, r1
 8008902:	ec51 0b18 	vmov	r0, r1, d8
 8008906:	f7f7 fcbf 	bl	8000288 <__aeabi_dsub>
 800890a:	2200      	movs	r2, #0
 800890c:	2300      	movs	r3, #0
 800890e:	4682      	mov	sl, r0
 8008910:	468b      	mov	fp, r1
 8008912:	f7f8 f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008916:	2800      	cmp	r0, #0
 8008918:	d0c1      	beq.n	800889e <_strtod_l+0x8de>
 800891a:	e611      	b.n	8008540 <_strtod_l+0x580>
 800891c:	fffffc02 	.word	0xfffffc02
 8008920:	7ff00000 	.word	0x7ff00000
 8008924:	39500000 	.word	0x39500000
 8008928:	000fffff 	.word	0x000fffff
 800892c:	7fefffff 	.word	0x7fefffff
 8008930:	0800bc38 	.word	0x0800bc38
 8008934:	4631      	mov	r1, r6
 8008936:	4628      	mov	r0, r5
 8008938:	f002 f92a 	bl	800ab90 <__ratio>
 800893c:	ec59 8b10 	vmov	r8, r9, d0
 8008940:	ee10 0a10 	vmov	r0, s0
 8008944:	2200      	movs	r2, #0
 8008946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800894a:	4649      	mov	r1, r9
 800894c:	f7f8 f8d0 	bl	8000af0 <__aeabi_dcmple>
 8008950:	2800      	cmp	r0, #0
 8008952:	d07a      	beq.n	8008a4a <_strtod_l+0xa8a>
 8008954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008956:	2b00      	cmp	r3, #0
 8008958:	d04a      	beq.n	80089f0 <_strtod_l+0xa30>
 800895a:	4b95      	ldr	r3, [pc, #596]	; (8008bb0 <_strtod_l+0xbf0>)
 800895c:	2200      	movs	r2, #0
 800895e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008962:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008bb0 <_strtod_l+0xbf0>
 8008966:	f04f 0800 	mov.w	r8, #0
 800896a:	4b92      	ldr	r3, [pc, #584]	; (8008bb4 <_strtod_l+0xbf4>)
 800896c:	403b      	ands	r3, r7
 800896e:	930d      	str	r3, [sp, #52]	; 0x34
 8008970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008972:	4b91      	ldr	r3, [pc, #580]	; (8008bb8 <_strtod_l+0xbf8>)
 8008974:	429a      	cmp	r2, r3
 8008976:	f040 80b0 	bne.w	8008ada <_strtod_l+0xb1a>
 800897a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800897e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008982:	ec4b ab10 	vmov	d0, sl, fp
 8008986:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800898a:	f002 f829 	bl	800a9e0 <__ulp>
 800898e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008992:	ec53 2b10 	vmov	r2, r3, d0
 8008996:	f7f7 fe2f 	bl	80005f8 <__aeabi_dmul>
 800899a:	4652      	mov	r2, sl
 800899c:	465b      	mov	r3, fp
 800899e:	f7f7 fc75 	bl	800028c <__adddf3>
 80089a2:	460b      	mov	r3, r1
 80089a4:	4983      	ldr	r1, [pc, #524]	; (8008bb4 <_strtod_l+0xbf4>)
 80089a6:	4a85      	ldr	r2, [pc, #532]	; (8008bbc <_strtod_l+0xbfc>)
 80089a8:	4019      	ands	r1, r3
 80089aa:	4291      	cmp	r1, r2
 80089ac:	4682      	mov	sl, r0
 80089ae:	d960      	bls.n	8008a72 <_strtod_l+0xab2>
 80089b0:	ee18 3a90 	vmov	r3, s17
 80089b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d104      	bne.n	80089c6 <_strtod_l+0xa06>
 80089bc:	ee18 3a10 	vmov	r3, s16
 80089c0:	3301      	adds	r3, #1
 80089c2:	f43f ad45 	beq.w	8008450 <_strtod_l+0x490>
 80089c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008bc8 <_strtod_l+0xc08>
 80089ca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80089ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089d0:	4620      	mov	r0, r4
 80089d2:	f001 fcd3 	bl	800a37c <_Bfree>
 80089d6:	9905      	ldr	r1, [sp, #20]
 80089d8:	4620      	mov	r0, r4
 80089da:	f001 fccf 	bl	800a37c <_Bfree>
 80089de:	4631      	mov	r1, r6
 80089e0:	4620      	mov	r0, r4
 80089e2:	f001 fccb 	bl	800a37c <_Bfree>
 80089e6:	4629      	mov	r1, r5
 80089e8:	4620      	mov	r0, r4
 80089ea:	f001 fcc7 	bl	800a37c <_Bfree>
 80089ee:	e61a      	b.n	8008626 <_strtod_l+0x666>
 80089f0:	f1ba 0f00 	cmp.w	sl, #0
 80089f4:	d11b      	bne.n	8008a2e <_strtod_l+0xa6e>
 80089f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089fa:	b9f3      	cbnz	r3, 8008a3a <_strtod_l+0xa7a>
 80089fc:	4b6c      	ldr	r3, [pc, #432]	; (8008bb0 <_strtod_l+0xbf0>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	4640      	mov	r0, r8
 8008a02:	4649      	mov	r1, r9
 8008a04:	f7f8 f86a 	bl	8000adc <__aeabi_dcmplt>
 8008a08:	b9d0      	cbnz	r0, 8008a40 <_strtod_l+0xa80>
 8008a0a:	4640      	mov	r0, r8
 8008a0c:	4649      	mov	r1, r9
 8008a0e:	4b6c      	ldr	r3, [pc, #432]	; (8008bc0 <_strtod_l+0xc00>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	f7f7 fdf1 	bl	80005f8 <__aeabi_dmul>
 8008a16:	4680      	mov	r8, r0
 8008a18:	4689      	mov	r9, r1
 8008a1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008a22:	9315      	str	r3, [sp, #84]	; 0x54
 8008a24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008a28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a2c:	e79d      	b.n	800896a <_strtod_l+0x9aa>
 8008a2e:	f1ba 0f01 	cmp.w	sl, #1
 8008a32:	d102      	bne.n	8008a3a <_strtod_l+0xa7a>
 8008a34:	2f00      	cmp	r7, #0
 8008a36:	f43f ad83 	beq.w	8008540 <_strtod_l+0x580>
 8008a3a:	4b62      	ldr	r3, [pc, #392]	; (8008bc4 <_strtod_l+0xc04>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	e78e      	b.n	800895e <_strtod_l+0x99e>
 8008a40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008bc0 <_strtod_l+0xc00>
 8008a44:	f04f 0800 	mov.w	r8, #0
 8008a48:	e7e7      	b.n	8008a1a <_strtod_l+0xa5a>
 8008a4a:	4b5d      	ldr	r3, [pc, #372]	; (8008bc0 <_strtod_l+0xc00>)
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	4649      	mov	r1, r9
 8008a50:	2200      	movs	r2, #0
 8008a52:	f7f7 fdd1 	bl	80005f8 <__aeabi_dmul>
 8008a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4689      	mov	r9, r1
 8008a5c:	b933      	cbnz	r3, 8008a6c <_strtod_l+0xaac>
 8008a5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a62:	900e      	str	r0, [sp, #56]	; 0x38
 8008a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008a6a:	e7dd      	b.n	8008a28 <_strtod_l+0xa68>
 8008a6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008a70:	e7f9      	b.n	8008a66 <_strtod_l+0xaa6>
 8008a72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1a8      	bne.n	80089ce <_strtod_l+0xa0e>
 8008a7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a82:	0d1b      	lsrs	r3, r3, #20
 8008a84:	051b      	lsls	r3, r3, #20
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d1a1      	bne.n	80089ce <_strtod_l+0xa0e>
 8008a8a:	4640      	mov	r0, r8
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	f7f8 f913 	bl	8000cb8 <__aeabi_d2lz>
 8008a92:	f7f7 fd83 	bl	800059c <__aeabi_l2d>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4640      	mov	r0, r8
 8008a9c:	4649      	mov	r1, r9
 8008a9e:	f7f7 fbf3 	bl	8000288 <__aeabi_dsub>
 8008aa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008aa8:	ea43 030a 	orr.w	r3, r3, sl
 8008aac:	4313      	orrs	r3, r2
 8008aae:	4680      	mov	r8, r0
 8008ab0:	4689      	mov	r9, r1
 8008ab2:	d055      	beq.n	8008b60 <_strtod_l+0xba0>
 8008ab4:	a336      	add	r3, pc, #216	; (adr r3, 8008b90 <_strtod_l+0xbd0>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	f7f8 f80f 	bl	8000adc <__aeabi_dcmplt>
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f47f acd0 	bne.w	8008464 <_strtod_l+0x4a4>
 8008ac4:	a334      	add	r3, pc, #208	; (adr r3, 8008b98 <_strtod_l+0xbd8>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	4640      	mov	r0, r8
 8008acc:	4649      	mov	r1, r9
 8008ace:	f7f8 f823 	bl	8000b18 <__aeabi_dcmpgt>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	f43f af7b 	beq.w	80089ce <_strtod_l+0xa0e>
 8008ad8:	e4c4      	b.n	8008464 <_strtod_l+0x4a4>
 8008ada:	9b04      	ldr	r3, [sp, #16]
 8008adc:	b333      	cbz	r3, 8008b2c <_strtod_l+0xb6c>
 8008ade:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ae4:	d822      	bhi.n	8008b2c <_strtod_l+0xb6c>
 8008ae6:	a32e      	add	r3, pc, #184	; (adr r3, 8008ba0 <_strtod_l+0xbe0>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	4640      	mov	r0, r8
 8008aee:	4649      	mov	r1, r9
 8008af0:	f7f7 fffe 	bl	8000af0 <__aeabi_dcmple>
 8008af4:	b1a0      	cbz	r0, 8008b20 <_strtod_l+0xb60>
 8008af6:	4649      	mov	r1, r9
 8008af8:	4640      	mov	r0, r8
 8008afa:	f7f8 f855 	bl	8000ba8 <__aeabi_d2uiz>
 8008afe:	2801      	cmp	r0, #1
 8008b00:	bf38      	it	cc
 8008b02:	2001      	movcc	r0, #1
 8008b04:	f7f7 fcfe 	bl	8000504 <__aeabi_ui2d>
 8008b08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b0a:	4680      	mov	r8, r0
 8008b0c:	4689      	mov	r9, r1
 8008b0e:	bb23      	cbnz	r3, 8008b5a <_strtod_l+0xb9a>
 8008b10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b14:	9010      	str	r0, [sp, #64]	; 0x40
 8008b16:	9311      	str	r3, [sp, #68]	; 0x44
 8008b18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008b28:	1a9b      	subs	r3, r3, r2
 8008b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b30:	eeb0 0a48 	vmov.f32	s0, s16
 8008b34:	eef0 0a68 	vmov.f32	s1, s17
 8008b38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b3c:	f001 ff50 	bl	800a9e0 <__ulp>
 8008b40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b44:	ec53 2b10 	vmov	r2, r3, d0
 8008b48:	f7f7 fd56 	bl	80005f8 <__aeabi_dmul>
 8008b4c:	ec53 2b18 	vmov	r2, r3, d8
 8008b50:	f7f7 fb9c 	bl	800028c <__adddf3>
 8008b54:	4682      	mov	sl, r0
 8008b56:	468b      	mov	fp, r1
 8008b58:	e78d      	b.n	8008a76 <_strtod_l+0xab6>
 8008b5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008b5e:	e7db      	b.n	8008b18 <_strtod_l+0xb58>
 8008b60:	a311      	add	r3, pc, #68	; (adr r3, 8008ba8 <_strtod_l+0xbe8>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 ffb9 	bl	8000adc <__aeabi_dcmplt>
 8008b6a:	e7b2      	b.n	8008ad2 <_strtod_l+0xb12>
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	f7ff ba6b 	b.w	8008050 <_strtod_l+0x90>
 8008b7a:	2a65      	cmp	r2, #101	; 0x65
 8008b7c:	f43f ab5f 	beq.w	800823e <_strtod_l+0x27e>
 8008b80:	2a45      	cmp	r2, #69	; 0x45
 8008b82:	f43f ab5c 	beq.w	800823e <_strtod_l+0x27e>
 8008b86:	2301      	movs	r3, #1
 8008b88:	f7ff bb94 	b.w	80082b4 <_strtod_l+0x2f4>
 8008b8c:	f3af 8000 	nop.w
 8008b90:	94a03595 	.word	0x94a03595
 8008b94:	3fdfffff 	.word	0x3fdfffff
 8008b98:	35afe535 	.word	0x35afe535
 8008b9c:	3fe00000 	.word	0x3fe00000
 8008ba0:	ffc00000 	.word	0xffc00000
 8008ba4:	41dfffff 	.word	0x41dfffff
 8008ba8:	94a03595 	.word	0x94a03595
 8008bac:	3fcfffff 	.word	0x3fcfffff
 8008bb0:	3ff00000 	.word	0x3ff00000
 8008bb4:	7ff00000 	.word	0x7ff00000
 8008bb8:	7fe00000 	.word	0x7fe00000
 8008bbc:	7c9fffff 	.word	0x7c9fffff
 8008bc0:	3fe00000 	.word	0x3fe00000
 8008bc4:	bff00000 	.word	0xbff00000
 8008bc8:	7fefffff 	.word	0x7fefffff

08008bcc <_strtod_r>:
 8008bcc:	4b01      	ldr	r3, [pc, #4]	; (8008bd4 <_strtod_r+0x8>)
 8008bce:	f7ff b9f7 	b.w	8007fc0 <_strtod_l>
 8008bd2:	bf00      	nop
 8008bd4:	20000074 	.word	0x20000074

08008bd8 <_strtol_l.constprop.0>:
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bde:	d001      	beq.n	8008be4 <_strtol_l.constprop.0+0xc>
 8008be0:	2b24      	cmp	r3, #36	; 0x24
 8008be2:	d906      	bls.n	8008bf2 <_strtol_l.constprop.0+0x1a>
 8008be4:	f7fe fae6 	bl	80071b4 <__errno>
 8008be8:	2316      	movs	r3, #22
 8008bea:	6003      	str	r3, [r0, #0]
 8008bec:	2000      	movs	r0, #0
 8008bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008cd8 <_strtol_l.constprop.0+0x100>
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	462e      	mov	r6, r5
 8008bfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bfe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008c02:	f017 0708 	ands.w	r7, r7, #8
 8008c06:	d1f7      	bne.n	8008bf8 <_strtol_l.constprop.0+0x20>
 8008c08:	2c2d      	cmp	r4, #45	; 0x2d
 8008c0a:	d132      	bne.n	8008c72 <_strtol_l.constprop.0+0x9a>
 8008c0c:	782c      	ldrb	r4, [r5, #0]
 8008c0e:	2701      	movs	r7, #1
 8008c10:	1cb5      	adds	r5, r6, #2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d05b      	beq.n	8008cce <_strtol_l.constprop.0+0xf6>
 8008c16:	2b10      	cmp	r3, #16
 8008c18:	d109      	bne.n	8008c2e <_strtol_l.constprop.0+0x56>
 8008c1a:	2c30      	cmp	r4, #48	; 0x30
 8008c1c:	d107      	bne.n	8008c2e <_strtol_l.constprop.0+0x56>
 8008c1e:	782c      	ldrb	r4, [r5, #0]
 8008c20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c24:	2c58      	cmp	r4, #88	; 0x58
 8008c26:	d14d      	bne.n	8008cc4 <_strtol_l.constprop.0+0xec>
 8008c28:	786c      	ldrb	r4, [r5, #1]
 8008c2a:	2310      	movs	r3, #16
 8008c2c:	3502      	adds	r5, #2
 8008c2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008c36:	f04f 0c00 	mov.w	ip, #0
 8008c3a:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c3e:	4666      	mov	r6, ip
 8008c40:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c48:	f1be 0f09 	cmp.w	lr, #9
 8008c4c:	d816      	bhi.n	8008c7c <_strtol_l.constprop.0+0xa4>
 8008c4e:	4674      	mov	r4, lr
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	dd24      	ble.n	8008c9e <_strtol_l.constprop.0+0xc6>
 8008c54:	f1bc 0f00 	cmp.w	ip, #0
 8008c58:	db1e      	blt.n	8008c98 <_strtol_l.constprop.0+0xc0>
 8008c5a:	45b1      	cmp	r9, r6
 8008c5c:	d31c      	bcc.n	8008c98 <_strtol_l.constprop.0+0xc0>
 8008c5e:	d101      	bne.n	8008c64 <_strtol_l.constprop.0+0x8c>
 8008c60:	45a2      	cmp	sl, r4
 8008c62:	db19      	blt.n	8008c98 <_strtol_l.constprop.0+0xc0>
 8008c64:	fb06 4603 	mla	r6, r6, r3, r4
 8008c68:	f04f 0c01 	mov.w	ip, #1
 8008c6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c70:	e7e8      	b.n	8008c44 <_strtol_l.constprop.0+0x6c>
 8008c72:	2c2b      	cmp	r4, #43	; 0x2b
 8008c74:	bf04      	itt	eq
 8008c76:	782c      	ldrbeq	r4, [r5, #0]
 8008c78:	1cb5      	addeq	r5, r6, #2
 8008c7a:	e7ca      	b.n	8008c12 <_strtol_l.constprop.0+0x3a>
 8008c7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c80:	f1be 0f19 	cmp.w	lr, #25
 8008c84:	d801      	bhi.n	8008c8a <_strtol_l.constprop.0+0xb2>
 8008c86:	3c37      	subs	r4, #55	; 0x37
 8008c88:	e7e2      	b.n	8008c50 <_strtol_l.constprop.0+0x78>
 8008c8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c8e:	f1be 0f19 	cmp.w	lr, #25
 8008c92:	d804      	bhi.n	8008c9e <_strtol_l.constprop.0+0xc6>
 8008c94:	3c57      	subs	r4, #87	; 0x57
 8008c96:	e7db      	b.n	8008c50 <_strtol_l.constprop.0+0x78>
 8008c98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008c9c:	e7e6      	b.n	8008c6c <_strtol_l.constprop.0+0x94>
 8008c9e:	f1bc 0f00 	cmp.w	ip, #0
 8008ca2:	da05      	bge.n	8008cb0 <_strtol_l.constprop.0+0xd8>
 8008ca4:	2322      	movs	r3, #34	; 0x22
 8008ca6:	6003      	str	r3, [r0, #0]
 8008ca8:	4646      	mov	r6, r8
 8008caa:	b942      	cbnz	r2, 8008cbe <_strtol_l.constprop.0+0xe6>
 8008cac:	4630      	mov	r0, r6
 8008cae:	e79e      	b.n	8008bee <_strtol_l.constprop.0+0x16>
 8008cb0:	b107      	cbz	r7, 8008cb4 <_strtol_l.constprop.0+0xdc>
 8008cb2:	4276      	negs	r6, r6
 8008cb4:	2a00      	cmp	r2, #0
 8008cb6:	d0f9      	beq.n	8008cac <_strtol_l.constprop.0+0xd4>
 8008cb8:	f1bc 0f00 	cmp.w	ip, #0
 8008cbc:	d000      	beq.n	8008cc0 <_strtol_l.constprop.0+0xe8>
 8008cbe:	1e69      	subs	r1, r5, #1
 8008cc0:	6011      	str	r1, [r2, #0]
 8008cc2:	e7f3      	b.n	8008cac <_strtol_l.constprop.0+0xd4>
 8008cc4:	2430      	movs	r4, #48	; 0x30
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1b1      	bne.n	8008c2e <_strtol_l.constprop.0+0x56>
 8008cca:	2308      	movs	r3, #8
 8008ccc:	e7af      	b.n	8008c2e <_strtol_l.constprop.0+0x56>
 8008cce:	2c30      	cmp	r4, #48	; 0x30
 8008cd0:	d0a5      	beq.n	8008c1e <_strtol_l.constprop.0+0x46>
 8008cd2:	230a      	movs	r3, #10
 8008cd4:	e7ab      	b.n	8008c2e <_strtol_l.constprop.0+0x56>
 8008cd6:	bf00      	nop
 8008cd8:	0800bc61 	.word	0x0800bc61

08008cdc <_strtol_r>:
 8008cdc:	f7ff bf7c 	b.w	8008bd8 <_strtol_l.constprop.0>

08008ce0 <quorem>:
 8008ce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	6903      	ldr	r3, [r0, #16]
 8008ce6:	690c      	ldr	r4, [r1, #16]
 8008ce8:	42a3      	cmp	r3, r4
 8008cea:	4607      	mov	r7, r0
 8008cec:	f2c0 8081 	blt.w	8008df2 <quorem+0x112>
 8008cf0:	3c01      	subs	r4, #1
 8008cf2:	f101 0814 	add.w	r8, r1, #20
 8008cf6:	f100 0514 	add.w	r5, r0, #20
 8008cfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d14:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d18:	d331      	bcc.n	8008d7e <quorem+0x9e>
 8008d1a:	f04f 0e00 	mov.w	lr, #0
 8008d1e:	4640      	mov	r0, r8
 8008d20:	46ac      	mov	ip, r5
 8008d22:	46f2      	mov	sl, lr
 8008d24:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d28:	b293      	uxth	r3, r2
 8008d2a:	fb06 e303 	mla	r3, r6, r3, lr
 8008d2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	ebaa 0303 	sub.w	r3, sl, r3
 8008d38:	f8dc a000 	ldr.w	sl, [ip]
 8008d3c:	0c12      	lsrs	r2, r2, #16
 8008d3e:	fa13 f38a 	uxtah	r3, r3, sl
 8008d42:	fb06 e202 	mla	r2, r6, r2, lr
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d4e:	b292      	uxth	r2, r2
 8008d50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d58:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d5c:	4581      	cmp	r9, r0
 8008d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d62:	f84c 3b04 	str.w	r3, [ip], #4
 8008d66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d6a:	d2db      	bcs.n	8008d24 <quorem+0x44>
 8008d6c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d70:	b92b      	cbnz	r3, 8008d7e <quorem+0x9e>
 8008d72:	9b01      	ldr	r3, [sp, #4]
 8008d74:	3b04      	subs	r3, #4
 8008d76:	429d      	cmp	r5, r3
 8008d78:	461a      	mov	r2, r3
 8008d7a:	d32e      	bcc.n	8008dda <quorem+0xfa>
 8008d7c:	613c      	str	r4, [r7, #16]
 8008d7e:	4638      	mov	r0, r7
 8008d80:	f001 fd88 	bl	800a894 <__mcmp>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	db24      	blt.n	8008dd2 <quorem+0xf2>
 8008d88:	3601      	adds	r6, #1
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	f04f 0c00 	mov.w	ip, #0
 8008d90:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d94:	f8d0 e000 	ldr.w	lr, [r0]
 8008d98:	b293      	uxth	r3, r2
 8008d9a:	ebac 0303 	sub.w	r3, ip, r3
 8008d9e:	0c12      	lsrs	r2, r2, #16
 8008da0:	fa13 f38e 	uxtah	r3, r3, lr
 8008da4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008da8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008db2:	45c1      	cmp	r9, r8
 8008db4:	f840 3b04 	str.w	r3, [r0], #4
 8008db8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008dbc:	d2e8      	bcs.n	8008d90 <quorem+0xb0>
 8008dbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dc6:	b922      	cbnz	r2, 8008dd2 <quorem+0xf2>
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	429d      	cmp	r5, r3
 8008dcc:	461a      	mov	r2, r3
 8008dce:	d30a      	bcc.n	8008de6 <quorem+0x106>
 8008dd0:	613c      	str	r4, [r7, #16]
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	b003      	add	sp, #12
 8008dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dda:	6812      	ldr	r2, [r2, #0]
 8008ddc:	3b04      	subs	r3, #4
 8008dde:	2a00      	cmp	r2, #0
 8008de0:	d1cc      	bne.n	8008d7c <quorem+0x9c>
 8008de2:	3c01      	subs	r4, #1
 8008de4:	e7c7      	b.n	8008d76 <quorem+0x96>
 8008de6:	6812      	ldr	r2, [r2, #0]
 8008de8:	3b04      	subs	r3, #4
 8008dea:	2a00      	cmp	r2, #0
 8008dec:	d1f0      	bne.n	8008dd0 <quorem+0xf0>
 8008dee:	3c01      	subs	r4, #1
 8008df0:	e7eb      	b.n	8008dca <quorem+0xea>
 8008df2:	2000      	movs	r0, #0
 8008df4:	e7ee      	b.n	8008dd4 <quorem+0xf4>
	...

08008df8 <_dtoa_r>:
 8008df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dfc:	ed2d 8b04 	vpush	{d8-d9}
 8008e00:	ec57 6b10 	vmov	r6, r7, d0
 8008e04:	b093      	sub	sp, #76	; 0x4c
 8008e06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008e08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e0c:	9106      	str	r1, [sp, #24]
 8008e0e:	ee10 aa10 	vmov	sl, s0
 8008e12:	4604      	mov	r4, r0
 8008e14:	9209      	str	r2, [sp, #36]	; 0x24
 8008e16:	930c      	str	r3, [sp, #48]	; 0x30
 8008e18:	46bb      	mov	fp, r7
 8008e1a:	b975      	cbnz	r5, 8008e3a <_dtoa_r+0x42>
 8008e1c:	2010      	movs	r0, #16
 8008e1e:	f001 fa45 	bl	800a2ac <malloc>
 8008e22:	4602      	mov	r2, r0
 8008e24:	6260      	str	r0, [r4, #36]	; 0x24
 8008e26:	b920      	cbnz	r0, 8008e32 <_dtoa_r+0x3a>
 8008e28:	4ba7      	ldr	r3, [pc, #668]	; (80090c8 <_dtoa_r+0x2d0>)
 8008e2a:	21ea      	movs	r1, #234	; 0xea
 8008e2c:	48a7      	ldr	r0, [pc, #668]	; (80090cc <_dtoa_r+0x2d4>)
 8008e2e:	f002 fc23 	bl	800b678 <__assert_func>
 8008e32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e36:	6005      	str	r5, [r0, #0]
 8008e38:	60c5      	str	r5, [r0, #12]
 8008e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e3c:	6819      	ldr	r1, [r3, #0]
 8008e3e:	b151      	cbz	r1, 8008e56 <_dtoa_r+0x5e>
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	604a      	str	r2, [r1, #4]
 8008e44:	2301      	movs	r3, #1
 8008e46:	4093      	lsls	r3, r2
 8008e48:	608b      	str	r3, [r1, #8]
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f001 fa96 	bl	800a37c <_Bfree>
 8008e50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	1e3b      	subs	r3, r7, #0
 8008e58:	bfaa      	itet	ge
 8008e5a:	2300      	movge	r3, #0
 8008e5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e60:	f8c8 3000 	strge.w	r3, [r8]
 8008e64:	4b9a      	ldr	r3, [pc, #616]	; (80090d0 <_dtoa_r+0x2d8>)
 8008e66:	bfbc      	itt	lt
 8008e68:	2201      	movlt	r2, #1
 8008e6a:	f8c8 2000 	strlt.w	r2, [r8]
 8008e6e:	ea33 030b 	bics.w	r3, r3, fp
 8008e72:	d11b      	bne.n	8008eac <_dtoa_r+0xb4>
 8008e74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e76:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e80:	4333      	orrs	r3, r6
 8008e82:	f000 8592 	beq.w	80099aa <_dtoa_r+0xbb2>
 8008e86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e88:	b963      	cbnz	r3, 8008ea4 <_dtoa_r+0xac>
 8008e8a:	4b92      	ldr	r3, [pc, #584]	; (80090d4 <_dtoa_r+0x2dc>)
 8008e8c:	e022      	b.n	8008ed4 <_dtoa_r+0xdc>
 8008e8e:	4b92      	ldr	r3, [pc, #584]	; (80090d8 <_dtoa_r+0x2e0>)
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	3308      	adds	r3, #8
 8008e94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e96:	6013      	str	r3, [r2, #0]
 8008e98:	9801      	ldr	r0, [sp, #4]
 8008e9a:	b013      	add	sp, #76	; 0x4c
 8008e9c:	ecbd 8b04 	vpop	{d8-d9}
 8008ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea4:	4b8b      	ldr	r3, [pc, #556]	; (80090d4 <_dtoa_r+0x2dc>)
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	3303      	adds	r3, #3
 8008eaa:	e7f3      	b.n	8008e94 <_dtoa_r+0x9c>
 8008eac:	2200      	movs	r2, #0
 8008eae:	2300      	movs	r3, #0
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	4659      	mov	r1, fp
 8008eb4:	f7f7 fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eb8:	ec4b ab19 	vmov	d9, sl, fp
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	b158      	cbz	r0, 8008ed8 <_dtoa_r+0xe0>
 8008ec0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 856b 	beq.w	80099a4 <_dtoa_r+0xbac>
 8008ece:	4883      	ldr	r0, [pc, #524]	; (80090dc <_dtoa_r+0x2e4>)
 8008ed0:	6018      	str	r0, [r3, #0]
 8008ed2:	1e43      	subs	r3, r0, #1
 8008ed4:	9301      	str	r3, [sp, #4]
 8008ed6:	e7df      	b.n	8008e98 <_dtoa_r+0xa0>
 8008ed8:	ec4b ab10 	vmov	d0, sl, fp
 8008edc:	aa10      	add	r2, sp, #64	; 0x40
 8008ede:	a911      	add	r1, sp, #68	; 0x44
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f001 fdf9 	bl	800aad8 <__d2b>
 8008ee6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008eea:	ee08 0a10 	vmov	s16, r0
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	f000 8084 	beq.w	8008ffc <_dtoa_r+0x204>
 8008ef4:	ee19 3a90 	vmov	r3, s19
 8008ef8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008efc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008f00:	4656      	mov	r6, sl
 8008f02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008f06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008f0e:	4b74      	ldr	r3, [pc, #464]	; (80090e0 <_dtoa_r+0x2e8>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	4630      	mov	r0, r6
 8008f14:	4639      	mov	r1, r7
 8008f16:	f7f7 f9b7 	bl	8000288 <__aeabi_dsub>
 8008f1a:	a365      	add	r3, pc, #404	; (adr r3, 80090b0 <_dtoa_r+0x2b8>)
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	f7f7 fb6a 	bl	80005f8 <__aeabi_dmul>
 8008f24:	a364      	add	r3, pc, #400	; (adr r3, 80090b8 <_dtoa_r+0x2c0>)
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	f7f7 f9af 	bl	800028c <__adddf3>
 8008f2e:	4606      	mov	r6, r0
 8008f30:	4628      	mov	r0, r5
 8008f32:	460f      	mov	r7, r1
 8008f34:	f7f7 faf6 	bl	8000524 <__aeabi_i2d>
 8008f38:	a361      	add	r3, pc, #388	; (adr r3, 80090c0 <_dtoa_r+0x2c8>)
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	f7f7 fb5b 	bl	80005f8 <__aeabi_dmul>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4630      	mov	r0, r6
 8008f48:	4639      	mov	r1, r7
 8008f4a:	f7f7 f99f 	bl	800028c <__adddf3>
 8008f4e:	4606      	mov	r6, r0
 8008f50:	460f      	mov	r7, r1
 8008f52:	f7f7 fe01 	bl	8000b58 <__aeabi_d2iz>
 8008f56:	2200      	movs	r2, #0
 8008f58:	9000      	str	r0, [sp, #0]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	4639      	mov	r1, r7
 8008f60:	f7f7 fdbc 	bl	8000adc <__aeabi_dcmplt>
 8008f64:	b150      	cbz	r0, 8008f7c <_dtoa_r+0x184>
 8008f66:	9800      	ldr	r0, [sp, #0]
 8008f68:	f7f7 fadc 	bl	8000524 <__aeabi_i2d>
 8008f6c:	4632      	mov	r2, r6
 8008f6e:	463b      	mov	r3, r7
 8008f70:	f7f7 fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f74:	b910      	cbnz	r0, 8008f7c <_dtoa_r+0x184>
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	9b00      	ldr	r3, [sp, #0]
 8008f7e:	2b16      	cmp	r3, #22
 8008f80:	d85a      	bhi.n	8009038 <_dtoa_r+0x240>
 8008f82:	9a00      	ldr	r2, [sp, #0]
 8008f84:	4b57      	ldr	r3, [pc, #348]	; (80090e4 <_dtoa_r+0x2ec>)
 8008f86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	ec51 0b19 	vmov	r0, r1, d9
 8008f92:	f7f7 fda3 	bl	8000adc <__aeabi_dcmplt>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d050      	beq.n	800903c <_dtoa_r+0x244>
 8008f9a:	9b00      	ldr	r3, [sp, #0]
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fa6:	1b5d      	subs	r5, r3, r5
 8008fa8:	1e6b      	subs	r3, r5, #1
 8008faa:	9305      	str	r3, [sp, #20]
 8008fac:	bf45      	ittet	mi
 8008fae:	f1c5 0301 	rsbmi	r3, r5, #1
 8008fb2:	9304      	strmi	r3, [sp, #16]
 8008fb4:	2300      	movpl	r3, #0
 8008fb6:	2300      	movmi	r3, #0
 8008fb8:	bf4c      	ite	mi
 8008fba:	9305      	strmi	r3, [sp, #20]
 8008fbc:	9304      	strpl	r3, [sp, #16]
 8008fbe:	9b00      	ldr	r3, [sp, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	db3d      	blt.n	8009040 <_dtoa_r+0x248>
 8008fc4:	9b05      	ldr	r3, [sp, #20]
 8008fc6:	9a00      	ldr	r2, [sp, #0]
 8008fc8:	920a      	str	r2, [sp, #40]	; 0x28
 8008fca:	4413      	add	r3, r2
 8008fcc:	9305      	str	r3, [sp, #20]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9307      	str	r3, [sp, #28]
 8008fd2:	9b06      	ldr	r3, [sp, #24]
 8008fd4:	2b09      	cmp	r3, #9
 8008fd6:	f200 8089 	bhi.w	80090ec <_dtoa_r+0x2f4>
 8008fda:	2b05      	cmp	r3, #5
 8008fdc:	bfc4      	itt	gt
 8008fde:	3b04      	subgt	r3, #4
 8008fe0:	9306      	strgt	r3, [sp, #24]
 8008fe2:	9b06      	ldr	r3, [sp, #24]
 8008fe4:	f1a3 0302 	sub.w	r3, r3, #2
 8008fe8:	bfcc      	ite	gt
 8008fea:	2500      	movgt	r5, #0
 8008fec:	2501      	movle	r5, #1
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	f200 8087 	bhi.w	8009102 <_dtoa_r+0x30a>
 8008ff4:	e8df f003 	tbb	[pc, r3]
 8008ff8:	59383a2d 	.word	0x59383a2d
 8008ffc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009000:	441d      	add	r5, r3
 8009002:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009006:	2b20      	cmp	r3, #32
 8009008:	bfc1      	itttt	gt
 800900a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800900e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009012:	fa0b f303 	lslgt.w	r3, fp, r3
 8009016:	fa26 f000 	lsrgt.w	r0, r6, r0
 800901a:	bfda      	itte	le
 800901c:	f1c3 0320 	rsble	r3, r3, #32
 8009020:	fa06 f003 	lslle.w	r0, r6, r3
 8009024:	4318      	orrgt	r0, r3
 8009026:	f7f7 fa6d 	bl	8000504 <__aeabi_ui2d>
 800902a:	2301      	movs	r3, #1
 800902c:	4606      	mov	r6, r0
 800902e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009032:	3d01      	subs	r5, #1
 8009034:	930e      	str	r3, [sp, #56]	; 0x38
 8009036:	e76a      	b.n	8008f0e <_dtoa_r+0x116>
 8009038:	2301      	movs	r3, #1
 800903a:	e7b2      	b.n	8008fa2 <_dtoa_r+0x1aa>
 800903c:	900b      	str	r0, [sp, #44]	; 0x2c
 800903e:	e7b1      	b.n	8008fa4 <_dtoa_r+0x1ac>
 8009040:	9b04      	ldr	r3, [sp, #16]
 8009042:	9a00      	ldr	r2, [sp, #0]
 8009044:	1a9b      	subs	r3, r3, r2
 8009046:	9304      	str	r3, [sp, #16]
 8009048:	4253      	negs	r3, r2
 800904a:	9307      	str	r3, [sp, #28]
 800904c:	2300      	movs	r3, #0
 800904e:	930a      	str	r3, [sp, #40]	; 0x28
 8009050:	e7bf      	b.n	8008fd2 <_dtoa_r+0x1da>
 8009052:	2300      	movs	r3, #0
 8009054:	9308      	str	r3, [sp, #32]
 8009056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009058:	2b00      	cmp	r3, #0
 800905a:	dc55      	bgt.n	8009108 <_dtoa_r+0x310>
 800905c:	2301      	movs	r3, #1
 800905e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009062:	461a      	mov	r2, r3
 8009064:	9209      	str	r2, [sp, #36]	; 0x24
 8009066:	e00c      	b.n	8009082 <_dtoa_r+0x28a>
 8009068:	2301      	movs	r3, #1
 800906a:	e7f3      	b.n	8009054 <_dtoa_r+0x25c>
 800906c:	2300      	movs	r3, #0
 800906e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009070:	9308      	str	r3, [sp, #32]
 8009072:	9b00      	ldr	r3, [sp, #0]
 8009074:	4413      	add	r3, r2
 8009076:	9302      	str	r3, [sp, #8]
 8009078:	3301      	adds	r3, #1
 800907a:	2b01      	cmp	r3, #1
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	bfb8      	it	lt
 8009080:	2301      	movlt	r3, #1
 8009082:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009084:	2200      	movs	r2, #0
 8009086:	6042      	str	r2, [r0, #4]
 8009088:	2204      	movs	r2, #4
 800908a:	f102 0614 	add.w	r6, r2, #20
 800908e:	429e      	cmp	r6, r3
 8009090:	6841      	ldr	r1, [r0, #4]
 8009092:	d93d      	bls.n	8009110 <_dtoa_r+0x318>
 8009094:	4620      	mov	r0, r4
 8009096:	f001 f931 	bl	800a2fc <_Balloc>
 800909a:	9001      	str	r0, [sp, #4]
 800909c:	2800      	cmp	r0, #0
 800909e:	d13b      	bne.n	8009118 <_dtoa_r+0x320>
 80090a0:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <_dtoa_r+0x2f0>)
 80090a2:	4602      	mov	r2, r0
 80090a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80090a8:	e6c0      	b.n	8008e2c <_dtoa_r+0x34>
 80090aa:	2301      	movs	r3, #1
 80090ac:	e7df      	b.n	800906e <_dtoa_r+0x276>
 80090ae:	bf00      	nop
 80090b0:	636f4361 	.word	0x636f4361
 80090b4:	3fd287a7 	.word	0x3fd287a7
 80090b8:	8b60c8b3 	.word	0x8b60c8b3
 80090bc:	3fc68a28 	.word	0x3fc68a28
 80090c0:	509f79fb 	.word	0x509f79fb
 80090c4:	3fd34413 	.word	0x3fd34413
 80090c8:	0800bd6e 	.word	0x0800bd6e
 80090cc:	0800bd85 	.word	0x0800bd85
 80090d0:	7ff00000 	.word	0x7ff00000
 80090d4:	0800bd6a 	.word	0x0800bd6a
 80090d8:	0800bd61 	.word	0x0800bd61
 80090dc:	0800bbe5 	.word	0x0800bbe5
 80090e0:	3ff80000 	.word	0x3ff80000
 80090e4:	0800bf58 	.word	0x0800bf58
 80090e8:	0800bde0 	.word	0x0800bde0
 80090ec:	2501      	movs	r5, #1
 80090ee:	2300      	movs	r3, #0
 80090f0:	9306      	str	r3, [sp, #24]
 80090f2:	9508      	str	r5, [sp, #32]
 80090f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090fc:	2200      	movs	r2, #0
 80090fe:	2312      	movs	r3, #18
 8009100:	e7b0      	b.n	8009064 <_dtoa_r+0x26c>
 8009102:	2301      	movs	r3, #1
 8009104:	9308      	str	r3, [sp, #32]
 8009106:	e7f5      	b.n	80090f4 <_dtoa_r+0x2fc>
 8009108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800910e:	e7b8      	b.n	8009082 <_dtoa_r+0x28a>
 8009110:	3101      	adds	r1, #1
 8009112:	6041      	str	r1, [r0, #4]
 8009114:	0052      	lsls	r2, r2, #1
 8009116:	e7b8      	b.n	800908a <_dtoa_r+0x292>
 8009118:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800911a:	9a01      	ldr	r2, [sp, #4]
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	2b0e      	cmp	r3, #14
 8009122:	f200 809d 	bhi.w	8009260 <_dtoa_r+0x468>
 8009126:	2d00      	cmp	r5, #0
 8009128:	f000 809a 	beq.w	8009260 <_dtoa_r+0x468>
 800912c:	9b00      	ldr	r3, [sp, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	dd32      	ble.n	8009198 <_dtoa_r+0x3a0>
 8009132:	4ab7      	ldr	r2, [pc, #732]	; (8009410 <_dtoa_r+0x618>)
 8009134:	f003 030f 	and.w	r3, r3, #15
 8009138:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800913c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009140:	9b00      	ldr	r3, [sp, #0]
 8009142:	05d8      	lsls	r0, r3, #23
 8009144:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009148:	d516      	bpl.n	8009178 <_dtoa_r+0x380>
 800914a:	4bb2      	ldr	r3, [pc, #712]	; (8009414 <_dtoa_r+0x61c>)
 800914c:	ec51 0b19 	vmov	r0, r1, d9
 8009150:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009154:	f7f7 fb7a 	bl	800084c <__aeabi_ddiv>
 8009158:	f007 070f 	and.w	r7, r7, #15
 800915c:	4682      	mov	sl, r0
 800915e:	468b      	mov	fp, r1
 8009160:	2503      	movs	r5, #3
 8009162:	4eac      	ldr	r6, [pc, #688]	; (8009414 <_dtoa_r+0x61c>)
 8009164:	b957      	cbnz	r7, 800917c <_dtoa_r+0x384>
 8009166:	4642      	mov	r2, r8
 8009168:	464b      	mov	r3, r9
 800916a:	4650      	mov	r0, sl
 800916c:	4659      	mov	r1, fp
 800916e:	f7f7 fb6d 	bl	800084c <__aeabi_ddiv>
 8009172:	4682      	mov	sl, r0
 8009174:	468b      	mov	fp, r1
 8009176:	e028      	b.n	80091ca <_dtoa_r+0x3d2>
 8009178:	2502      	movs	r5, #2
 800917a:	e7f2      	b.n	8009162 <_dtoa_r+0x36a>
 800917c:	07f9      	lsls	r1, r7, #31
 800917e:	d508      	bpl.n	8009192 <_dtoa_r+0x39a>
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009188:	f7f7 fa36 	bl	80005f8 <__aeabi_dmul>
 800918c:	3501      	adds	r5, #1
 800918e:	4680      	mov	r8, r0
 8009190:	4689      	mov	r9, r1
 8009192:	107f      	asrs	r7, r7, #1
 8009194:	3608      	adds	r6, #8
 8009196:	e7e5      	b.n	8009164 <_dtoa_r+0x36c>
 8009198:	f000 809b 	beq.w	80092d2 <_dtoa_r+0x4da>
 800919c:	9b00      	ldr	r3, [sp, #0]
 800919e:	4f9d      	ldr	r7, [pc, #628]	; (8009414 <_dtoa_r+0x61c>)
 80091a0:	425e      	negs	r6, r3
 80091a2:	4b9b      	ldr	r3, [pc, #620]	; (8009410 <_dtoa_r+0x618>)
 80091a4:	f006 020f 	and.w	r2, r6, #15
 80091a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b0:	ec51 0b19 	vmov	r0, r1, d9
 80091b4:	f7f7 fa20 	bl	80005f8 <__aeabi_dmul>
 80091b8:	1136      	asrs	r6, r6, #4
 80091ba:	4682      	mov	sl, r0
 80091bc:	468b      	mov	fp, r1
 80091be:	2300      	movs	r3, #0
 80091c0:	2502      	movs	r5, #2
 80091c2:	2e00      	cmp	r6, #0
 80091c4:	d17a      	bne.n	80092bc <_dtoa_r+0x4c4>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1d3      	bne.n	8009172 <_dtoa_r+0x37a>
 80091ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8082 	beq.w	80092d6 <_dtoa_r+0x4de>
 80091d2:	4b91      	ldr	r3, [pc, #580]	; (8009418 <_dtoa_r+0x620>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	4650      	mov	r0, sl
 80091d8:	4659      	mov	r1, fp
 80091da:	f7f7 fc7f 	bl	8000adc <__aeabi_dcmplt>
 80091de:	2800      	cmp	r0, #0
 80091e0:	d079      	beq.n	80092d6 <_dtoa_r+0x4de>
 80091e2:	9b03      	ldr	r3, [sp, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d076      	beq.n	80092d6 <_dtoa_r+0x4de>
 80091e8:	9b02      	ldr	r3, [sp, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	dd36      	ble.n	800925c <_dtoa_r+0x464>
 80091ee:	9b00      	ldr	r3, [sp, #0]
 80091f0:	4650      	mov	r0, sl
 80091f2:	4659      	mov	r1, fp
 80091f4:	1e5f      	subs	r7, r3, #1
 80091f6:	2200      	movs	r2, #0
 80091f8:	4b88      	ldr	r3, [pc, #544]	; (800941c <_dtoa_r+0x624>)
 80091fa:	f7f7 f9fd 	bl	80005f8 <__aeabi_dmul>
 80091fe:	9e02      	ldr	r6, [sp, #8]
 8009200:	4682      	mov	sl, r0
 8009202:	468b      	mov	fp, r1
 8009204:	3501      	adds	r5, #1
 8009206:	4628      	mov	r0, r5
 8009208:	f7f7 f98c 	bl	8000524 <__aeabi_i2d>
 800920c:	4652      	mov	r2, sl
 800920e:	465b      	mov	r3, fp
 8009210:	f7f7 f9f2 	bl	80005f8 <__aeabi_dmul>
 8009214:	4b82      	ldr	r3, [pc, #520]	; (8009420 <_dtoa_r+0x628>)
 8009216:	2200      	movs	r2, #0
 8009218:	f7f7 f838 	bl	800028c <__adddf3>
 800921c:	46d0      	mov	r8, sl
 800921e:	46d9      	mov	r9, fp
 8009220:	4682      	mov	sl, r0
 8009222:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009226:	2e00      	cmp	r6, #0
 8009228:	d158      	bne.n	80092dc <_dtoa_r+0x4e4>
 800922a:	4b7e      	ldr	r3, [pc, #504]	; (8009424 <_dtoa_r+0x62c>)
 800922c:	2200      	movs	r2, #0
 800922e:	4640      	mov	r0, r8
 8009230:	4649      	mov	r1, r9
 8009232:	f7f7 f829 	bl	8000288 <__aeabi_dsub>
 8009236:	4652      	mov	r2, sl
 8009238:	465b      	mov	r3, fp
 800923a:	4680      	mov	r8, r0
 800923c:	4689      	mov	r9, r1
 800923e:	f7f7 fc6b 	bl	8000b18 <__aeabi_dcmpgt>
 8009242:	2800      	cmp	r0, #0
 8009244:	f040 8295 	bne.w	8009772 <_dtoa_r+0x97a>
 8009248:	4652      	mov	r2, sl
 800924a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800924e:	4640      	mov	r0, r8
 8009250:	4649      	mov	r1, r9
 8009252:	f7f7 fc43 	bl	8000adc <__aeabi_dcmplt>
 8009256:	2800      	cmp	r0, #0
 8009258:	f040 8289 	bne.w	800976e <_dtoa_r+0x976>
 800925c:	ec5b ab19 	vmov	sl, fp, d9
 8009260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009262:	2b00      	cmp	r3, #0
 8009264:	f2c0 8148 	blt.w	80094f8 <_dtoa_r+0x700>
 8009268:	9a00      	ldr	r2, [sp, #0]
 800926a:	2a0e      	cmp	r2, #14
 800926c:	f300 8144 	bgt.w	80094f8 <_dtoa_r+0x700>
 8009270:	4b67      	ldr	r3, [pc, #412]	; (8009410 <_dtoa_r+0x618>)
 8009272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009276:	e9d3 8900 	ldrd	r8, r9, [r3]
 800927a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927c:	2b00      	cmp	r3, #0
 800927e:	f280 80d5 	bge.w	800942c <_dtoa_r+0x634>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	2b00      	cmp	r3, #0
 8009286:	f300 80d1 	bgt.w	800942c <_dtoa_r+0x634>
 800928a:	f040 826f 	bne.w	800976c <_dtoa_r+0x974>
 800928e:	4b65      	ldr	r3, [pc, #404]	; (8009424 <_dtoa_r+0x62c>)
 8009290:	2200      	movs	r2, #0
 8009292:	4640      	mov	r0, r8
 8009294:	4649      	mov	r1, r9
 8009296:	f7f7 f9af 	bl	80005f8 <__aeabi_dmul>
 800929a:	4652      	mov	r2, sl
 800929c:	465b      	mov	r3, fp
 800929e:	f7f7 fc31 	bl	8000b04 <__aeabi_dcmpge>
 80092a2:	9e03      	ldr	r6, [sp, #12]
 80092a4:	4637      	mov	r7, r6
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f040 8245 	bne.w	8009736 <_dtoa_r+0x93e>
 80092ac:	9d01      	ldr	r5, [sp, #4]
 80092ae:	2331      	movs	r3, #49	; 0x31
 80092b0:	f805 3b01 	strb.w	r3, [r5], #1
 80092b4:	9b00      	ldr	r3, [sp, #0]
 80092b6:	3301      	adds	r3, #1
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	e240      	b.n	800973e <_dtoa_r+0x946>
 80092bc:	07f2      	lsls	r2, r6, #31
 80092be:	d505      	bpl.n	80092cc <_dtoa_r+0x4d4>
 80092c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092c4:	f7f7 f998 	bl	80005f8 <__aeabi_dmul>
 80092c8:	3501      	adds	r5, #1
 80092ca:	2301      	movs	r3, #1
 80092cc:	1076      	asrs	r6, r6, #1
 80092ce:	3708      	adds	r7, #8
 80092d0:	e777      	b.n	80091c2 <_dtoa_r+0x3ca>
 80092d2:	2502      	movs	r5, #2
 80092d4:	e779      	b.n	80091ca <_dtoa_r+0x3d2>
 80092d6:	9f00      	ldr	r7, [sp, #0]
 80092d8:	9e03      	ldr	r6, [sp, #12]
 80092da:	e794      	b.n	8009206 <_dtoa_r+0x40e>
 80092dc:	9901      	ldr	r1, [sp, #4]
 80092de:	4b4c      	ldr	r3, [pc, #304]	; (8009410 <_dtoa_r+0x618>)
 80092e0:	4431      	add	r1, r6
 80092e2:	910d      	str	r1, [sp, #52]	; 0x34
 80092e4:	9908      	ldr	r1, [sp, #32]
 80092e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092ee:	2900      	cmp	r1, #0
 80092f0:	d043      	beq.n	800937a <_dtoa_r+0x582>
 80092f2:	494d      	ldr	r1, [pc, #308]	; (8009428 <_dtoa_r+0x630>)
 80092f4:	2000      	movs	r0, #0
 80092f6:	f7f7 faa9 	bl	800084c <__aeabi_ddiv>
 80092fa:	4652      	mov	r2, sl
 80092fc:	465b      	mov	r3, fp
 80092fe:	f7f6 ffc3 	bl	8000288 <__aeabi_dsub>
 8009302:	9d01      	ldr	r5, [sp, #4]
 8009304:	4682      	mov	sl, r0
 8009306:	468b      	mov	fp, r1
 8009308:	4649      	mov	r1, r9
 800930a:	4640      	mov	r0, r8
 800930c:	f7f7 fc24 	bl	8000b58 <__aeabi_d2iz>
 8009310:	4606      	mov	r6, r0
 8009312:	f7f7 f907 	bl	8000524 <__aeabi_i2d>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	4640      	mov	r0, r8
 800931c:	4649      	mov	r1, r9
 800931e:	f7f6 ffb3 	bl	8000288 <__aeabi_dsub>
 8009322:	3630      	adds	r6, #48	; 0x30
 8009324:	f805 6b01 	strb.w	r6, [r5], #1
 8009328:	4652      	mov	r2, sl
 800932a:	465b      	mov	r3, fp
 800932c:	4680      	mov	r8, r0
 800932e:	4689      	mov	r9, r1
 8009330:	f7f7 fbd4 	bl	8000adc <__aeabi_dcmplt>
 8009334:	2800      	cmp	r0, #0
 8009336:	d163      	bne.n	8009400 <_dtoa_r+0x608>
 8009338:	4642      	mov	r2, r8
 800933a:	464b      	mov	r3, r9
 800933c:	4936      	ldr	r1, [pc, #216]	; (8009418 <_dtoa_r+0x620>)
 800933e:	2000      	movs	r0, #0
 8009340:	f7f6 ffa2 	bl	8000288 <__aeabi_dsub>
 8009344:	4652      	mov	r2, sl
 8009346:	465b      	mov	r3, fp
 8009348:	f7f7 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800934c:	2800      	cmp	r0, #0
 800934e:	f040 80b5 	bne.w	80094bc <_dtoa_r+0x6c4>
 8009352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009354:	429d      	cmp	r5, r3
 8009356:	d081      	beq.n	800925c <_dtoa_r+0x464>
 8009358:	4b30      	ldr	r3, [pc, #192]	; (800941c <_dtoa_r+0x624>)
 800935a:	2200      	movs	r2, #0
 800935c:	4650      	mov	r0, sl
 800935e:	4659      	mov	r1, fp
 8009360:	f7f7 f94a 	bl	80005f8 <__aeabi_dmul>
 8009364:	4b2d      	ldr	r3, [pc, #180]	; (800941c <_dtoa_r+0x624>)
 8009366:	4682      	mov	sl, r0
 8009368:	468b      	mov	fp, r1
 800936a:	4640      	mov	r0, r8
 800936c:	4649      	mov	r1, r9
 800936e:	2200      	movs	r2, #0
 8009370:	f7f7 f942 	bl	80005f8 <__aeabi_dmul>
 8009374:	4680      	mov	r8, r0
 8009376:	4689      	mov	r9, r1
 8009378:	e7c6      	b.n	8009308 <_dtoa_r+0x510>
 800937a:	4650      	mov	r0, sl
 800937c:	4659      	mov	r1, fp
 800937e:	f7f7 f93b 	bl	80005f8 <__aeabi_dmul>
 8009382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009384:	9d01      	ldr	r5, [sp, #4]
 8009386:	930f      	str	r3, [sp, #60]	; 0x3c
 8009388:	4682      	mov	sl, r0
 800938a:	468b      	mov	fp, r1
 800938c:	4649      	mov	r1, r9
 800938e:	4640      	mov	r0, r8
 8009390:	f7f7 fbe2 	bl	8000b58 <__aeabi_d2iz>
 8009394:	4606      	mov	r6, r0
 8009396:	f7f7 f8c5 	bl	8000524 <__aeabi_i2d>
 800939a:	3630      	adds	r6, #48	; 0x30
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4640      	mov	r0, r8
 80093a2:	4649      	mov	r1, r9
 80093a4:	f7f6 ff70 	bl	8000288 <__aeabi_dsub>
 80093a8:	f805 6b01 	strb.w	r6, [r5], #1
 80093ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ae:	429d      	cmp	r5, r3
 80093b0:	4680      	mov	r8, r0
 80093b2:	4689      	mov	r9, r1
 80093b4:	f04f 0200 	mov.w	r2, #0
 80093b8:	d124      	bne.n	8009404 <_dtoa_r+0x60c>
 80093ba:	4b1b      	ldr	r3, [pc, #108]	; (8009428 <_dtoa_r+0x630>)
 80093bc:	4650      	mov	r0, sl
 80093be:	4659      	mov	r1, fp
 80093c0:	f7f6 ff64 	bl	800028c <__adddf3>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
 80093c8:	4640      	mov	r0, r8
 80093ca:	4649      	mov	r1, r9
 80093cc:	f7f7 fba4 	bl	8000b18 <__aeabi_dcmpgt>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d173      	bne.n	80094bc <_dtoa_r+0x6c4>
 80093d4:	4652      	mov	r2, sl
 80093d6:	465b      	mov	r3, fp
 80093d8:	4913      	ldr	r1, [pc, #76]	; (8009428 <_dtoa_r+0x630>)
 80093da:	2000      	movs	r0, #0
 80093dc:	f7f6 ff54 	bl	8000288 <__aeabi_dsub>
 80093e0:	4602      	mov	r2, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4640      	mov	r0, r8
 80093e6:	4649      	mov	r1, r9
 80093e8:	f7f7 fb78 	bl	8000adc <__aeabi_dcmplt>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f43f af35 	beq.w	800925c <_dtoa_r+0x464>
 80093f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093f4:	1e6b      	subs	r3, r5, #1
 80093f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093fc:	2b30      	cmp	r3, #48	; 0x30
 80093fe:	d0f8      	beq.n	80093f2 <_dtoa_r+0x5fa>
 8009400:	9700      	str	r7, [sp, #0]
 8009402:	e049      	b.n	8009498 <_dtoa_r+0x6a0>
 8009404:	4b05      	ldr	r3, [pc, #20]	; (800941c <_dtoa_r+0x624>)
 8009406:	f7f7 f8f7 	bl	80005f8 <__aeabi_dmul>
 800940a:	4680      	mov	r8, r0
 800940c:	4689      	mov	r9, r1
 800940e:	e7bd      	b.n	800938c <_dtoa_r+0x594>
 8009410:	0800bf58 	.word	0x0800bf58
 8009414:	0800bf30 	.word	0x0800bf30
 8009418:	3ff00000 	.word	0x3ff00000
 800941c:	40240000 	.word	0x40240000
 8009420:	401c0000 	.word	0x401c0000
 8009424:	40140000 	.word	0x40140000
 8009428:	3fe00000 	.word	0x3fe00000
 800942c:	9d01      	ldr	r5, [sp, #4]
 800942e:	4656      	mov	r6, sl
 8009430:	465f      	mov	r7, fp
 8009432:	4642      	mov	r2, r8
 8009434:	464b      	mov	r3, r9
 8009436:	4630      	mov	r0, r6
 8009438:	4639      	mov	r1, r7
 800943a:	f7f7 fa07 	bl	800084c <__aeabi_ddiv>
 800943e:	f7f7 fb8b 	bl	8000b58 <__aeabi_d2iz>
 8009442:	4682      	mov	sl, r0
 8009444:	f7f7 f86e 	bl	8000524 <__aeabi_i2d>
 8009448:	4642      	mov	r2, r8
 800944a:	464b      	mov	r3, r9
 800944c:	f7f7 f8d4 	bl	80005f8 <__aeabi_dmul>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800945c:	f7f6 ff14 	bl	8000288 <__aeabi_dsub>
 8009460:	f805 6b01 	strb.w	r6, [r5], #1
 8009464:	9e01      	ldr	r6, [sp, #4]
 8009466:	9f03      	ldr	r7, [sp, #12]
 8009468:	1bae      	subs	r6, r5, r6
 800946a:	42b7      	cmp	r7, r6
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	d135      	bne.n	80094de <_dtoa_r+0x6e6>
 8009472:	f7f6 ff0b 	bl	800028c <__adddf3>
 8009476:	4642      	mov	r2, r8
 8009478:	464b      	mov	r3, r9
 800947a:	4606      	mov	r6, r0
 800947c:	460f      	mov	r7, r1
 800947e:	f7f7 fb4b 	bl	8000b18 <__aeabi_dcmpgt>
 8009482:	b9d0      	cbnz	r0, 80094ba <_dtoa_r+0x6c2>
 8009484:	4642      	mov	r2, r8
 8009486:	464b      	mov	r3, r9
 8009488:	4630      	mov	r0, r6
 800948a:	4639      	mov	r1, r7
 800948c:	f7f7 fb1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009490:	b110      	cbz	r0, 8009498 <_dtoa_r+0x6a0>
 8009492:	f01a 0f01 	tst.w	sl, #1
 8009496:	d110      	bne.n	80094ba <_dtoa_r+0x6c2>
 8009498:	4620      	mov	r0, r4
 800949a:	ee18 1a10 	vmov	r1, s16
 800949e:	f000 ff6d 	bl	800a37c <_Bfree>
 80094a2:	2300      	movs	r3, #0
 80094a4:	9800      	ldr	r0, [sp, #0]
 80094a6:	702b      	strb	r3, [r5, #0]
 80094a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094aa:	3001      	adds	r0, #1
 80094ac:	6018      	str	r0, [r3, #0]
 80094ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f43f acf1 	beq.w	8008e98 <_dtoa_r+0xa0>
 80094b6:	601d      	str	r5, [r3, #0]
 80094b8:	e4ee      	b.n	8008e98 <_dtoa_r+0xa0>
 80094ba:	9f00      	ldr	r7, [sp, #0]
 80094bc:	462b      	mov	r3, r5
 80094be:	461d      	mov	r5, r3
 80094c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094c4:	2a39      	cmp	r2, #57	; 0x39
 80094c6:	d106      	bne.n	80094d6 <_dtoa_r+0x6de>
 80094c8:	9a01      	ldr	r2, [sp, #4]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d1f7      	bne.n	80094be <_dtoa_r+0x6c6>
 80094ce:	9901      	ldr	r1, [sp, #4]
 80094d0:	2230      	movs	r2, #48	; 0x30
 80094d2:	3701      	adds	r7, #1
 80094d4:	700a      	strb	r2, [r1, #0]
 80094d6:	781a      	ldrb	r2, [r3, #0]
 80094d8:	3201      	adds	r2, #1
 80094da:	701a      	strb	r2, [r3, #0]
 80094dc:	e790      	b.n	8009400 <_dtoa_r+0x608>
 80094de:	4ba6      	ldr	r3, [pc, #664]	; (8009778 <_dtoa_r+0x980>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	f7f7 f889 	bl	80005f8 <__aeabi_dmul>
 80094e6:	2200      	movs	r2, #0
 80094e8:	2300      	movs	r3, #0
 80094ea:	4606      	mov	r6, r0
 80094ec:	460f      	mov	r7, r1
 80094ee:	f7f7 faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d09d      	beq.n	8009432 <_dtoa_r+0x63a>
 80094f6:	e7cf      	b.n	8009498 <_dtoa_r+0x6a0>
 80094f8:	9a08      	ldr	r2, [sp, #32]
 80094fa:	2a00      	cmp	r2, #0
 80094fc:	f000 80d7 	beq.w	80096ae <_dtoa_r+0x8b6>
 8009500:	9a06      	ldr	r2, [sp, #24]
 8009502:	2a01      	cmp	r2, #1
 8009504:	f300 80ba 	bgt.w	800967c <_dtoa_r+0x884>
 8009508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800950a:	2a00      	cmp	r2, #0
 800950c:	f000 80b2 	beq.w	8009674 <_dtoa_r+0x87c>
 8009510:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009514:	9e07      	ldr	r6, [sp, #28]
 8009516:	9d04      	ldr	r5, [sp, #16]
 8009518:	9a04      	ldr	r2, [sp, #16]
 800951a:	441a      	add	r2, r3
 800951c:	9204      	str	r2, [sp, #16]
 800951e:	9a05      	ldr	r2, [sp, #20]
 8009520:	2101      	movs	r1, #1
 8009522:	441a      	add	r2, r3
 8009524:	4620      	mov	r0, r4
 8009526:	9205      	str	r2, [sp, #20]
 8009528:	f001 f82a 	bl	800a580 <__i2b>
 800952c:	4607      	mov	r7, r0
 800952e:	2d00      	cmp	r5, #0
 8009530:	dd0c      	ble.n	800954c <_dtoa_r+0x754>
 8009532:	9b05      	ldr	r3, [sp, #20]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dd09      	ble.n	800954c <_dtoa_r+0x754>
 8009538:	42ab      	cmp	r3, r5
 800953a:	9a04      	ldr	r2, [sp, #16]
 800953c:	bfa8      	it	ge
 800953e:	462b      	movge	r3, r5
 8009540:	1ad2      	subs	r2, r2, r3
 8009542:	9204      	str	r2, [sp, #16]
 8009544:	9a05      	ldr	r2, [sp, #20]
 8009546:	1aed      	subs	r5, r5, r3
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	9305      	str	r3, [sp, #20]
 800954c:	9b07      	ldr	r3, [sp, #28]
 800954e:	b31b      	cbz	r3, 8009598 <_dtoa_r+0x7a0>
 8009550:	9b08      	ldr	r3, [sp, #32]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 80af 	beq.w	80096b6 <_dtoa_r+0x8be>
 8009558:	2e00      	cmp	r6, #0
 800955a:	dd13      	ble.n	8009584 <_dtoa_r+0x78c>
 800955c:	4639      	mov	r1, r7
 800955e:	4632      	mov	r2, r6
 8009560:	4620      	mov	r0, r4
 8009562:	f001 f8cd 	bl	800a700 <__pow5mult>
 8009566:	ee18 2a10 	vmov	r2, s16
 800956a:	4601      	mov	r1, r0
 800956c:	4607      	mov	r7, r0
 800956e:	4620      	mov	r0, r4
 8009570:	f001 f81c 	bl	800a5ac <__multiply>
 8009574:	ee18 1a10 	vmov	r1, s16
 8009578:	4680      	mov	r8, r0
 800957a:	4620      	mov	r0, r4
 800957c:	f000 fefe 	bl	800a37c <_Bfree>
 8009580:	ee08 8a10 	vmov	s16, r8
 8009584:	9b07      	ldr	r3, [sp, #28]
 8009586:	1b9a      	subs	r2, r3, r6
 8009588:	d006      	beq.n	8009598 <_dtoa_r+0x7a0>
 800958a:	ee18 1a10 	vmov	r1, s16
 800958e:	4620      	mov	r0, r4
 8009590:	f001 f8b6 	bl	800a700 <__pow5mult>
 8009594:	ee08 0a10 	vmov	s16, r0
 8009598:	2101      	movs	r1, #1
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fff0 	bl	800a580 <__i2b>
 80095a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	4606      	mov	r6, r0
 80095a6:	f340 8088 	ble.w	80096ba <_dtoa_r+0x8c2>
 80095aa:	461a      	mov	r2, r3
 80095ac:	4601      	mov	r1, r0
 80095ae:	4620      	mov	r0, r4
 80095b0:	f001 f8a6 	bl	800a700 <__pow5mult>
 80095b4:	9b06      	ldr	r3, [sp, #24]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	4606      	mov	r6, r0
 80095ba:	f340 8081 	ble.w	80096c0 <_dtoa_r+0x8c8>
 80095be:	f04f 0800 	mov.w	r8, #0
 80095c2:	6933      	ldr	r3, [r6, #16]
 80095c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095c8:	6918      	ldr	r0, [r3, #16]
 80095ca:	f000 ff89 	bl	800a4e0 <__hi0bits>
 80095ce:	f1c0 0020 	rsb	r0, r0, #32
 80095d2:	9b05      	ldr	r3, [sp, #20]
 80095d4:	4418      	add	r0, r3
 80095d6:	f010 001f 	ands.w	r0, r0, #31
 80095da:	f000 8092 	beq.w	8009702 <_dtoa_r+0x90a>
 80095de:	f1c0 0320 	rsb	r3, r0, #32
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	f340 808a 	ble.w	80096fc <_dtoa_r+0x904>
 80095e8:	f1c0 001c 	rsb	r0, r0, #28
 80095ec:	9b04      	ldr	r3, [sp, #16]
 80095ee:	4403      	add	r3, r0
 80095f0:	9304      	str	r3, [sp, #16]
 80095f2:	9b05      	ldr	r3, [sp, #20]
 80095f4:	4403      	add	r3, r0
 80095f6:	4405      	add	r5, r0
 80095f8:	9305      	str	r3, [sp, #20]
 80095fa:	9b04      	ldr	r3, [sp, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dd07      	ble.n	8009610 <_dtoa_r+0x818>
 8009600:	ee18 1a10 	vmov	r1, s16
 8009604:	461a      	mov	r2, r3
 8009606:	4620      	mov	r0, r4
 8009608:	f001 f8d4 	bl	800a7b4 <__lshift>
 800960c:	ee08 0a10 	vmov	s16, r0
 8009610:	9b05      	ldr	r3, [sp, #20]
 8009612:	2b00      	cmp	r3, #0
 8009614:	dd05      	ble.n	8009622 <_dtoa_r+0x82a>
 8009616:	4631      	mov	r1, r6
 8009618:	461a      	mov	r2, r3
 800961a:	4620      	mov	r0, r4
 800961c:	f001 f8ca 	bl	800a7b4 <__lshift>
 8009620:	4606      	mov	r6, r0
 8009622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009624:	2b00      	cmp	r3, #0
 8009626:	d06e      	beq.n	8009706 <_dtoa_r+0x90e>
 8009628:	ee18 0a10 	vmov	r0, s16
 800962c:	4631      	mov	r1, r6
 800962e:	f001 f931 	bl	800a894 <__mcmp>
 8009632:	2800      	cmp	r0, #0
 8009634:	da67      	bge.n	8009706 <_dtoa_r+0x90e>
 8009636:	9b00      	ldr	r3, [sp, #0]
 8009638:	3b01      	subs	r3, #1
 800963a:	ee18 1a10 	vmov	r1, s16
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	220a      	movs	r2, #10
 8009642:	2300      	movs	r3, #0
 8009644:	4620      	mov	r0, r4
 8009646:	f000 febb 	bl	800a3c0 <__multadd>
 800964a:	9b08      	ldr	r3, [sp, #32]
 800964c:	ee08 0a10 	vmov	s16, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 81b1 	beq.w	80099b8 <_dtoa_r+0xbc0>
 8009656:	2300      	movs	r3, #0
 8009658:	4639      	mov	r1, r7
 800965a:	220a      	movs	r2, #10
 800965c:	4620      	mov	r0, r4
 800965e:	f000 feaf 	bl	800a3c0 <__multadd>
 8009662:	9b02      	ldr	r3, [sp, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	4607      	mov	r7, r0
 8009668:	f300 808e 	bgt.w	8009788 <_dtoa_r+0x990>
 800966c:	9b06      	ldr	r3, [sp, #24]
 800966e:	2b02      	cmp	r3, #2
 8009670:	dc51      	bgt.n	8009716 <_dtoa_r+0x91e>
 8009672:	e089      	b.n	8009788 <_dtoa_r+0x990>
 8009674:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009676:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800967a:	e74b      	b.n	8009514 <_dtoa_r+0x71c>
 800967c:	9b03      	ldr	r3, [sp, #12]
 800967e:	1e5e      	subs	r6, r3, #1
 8009680:	9b07      	ldr	r3, [sp, #28]
 8009682:	42b3      	cmp	r3, r6
 8009684:	bfbf      	itttt	lt
 8009686:	9b07      	ldrlt	r3, [sp, #28]
 8009688:	9607      	strlt	r6, [sp, #28]
 800968a:	1af2      	sublt	r2, r6, r3
 800968c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800968e:	bfb6      	itet	lt
 8009690:	189b      	addlt	r3, r3, r2
 8009692:	1b9e      	subge	r6, r3, r6
 8009694:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	bfb8      	it	lt
 800969a:	2600      	movlt	r6, #0
 800969c:	2b00      	cmp	r3, #0
 800969e:	bfb7      	itett	lt
 80096a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80096a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80096a8:	1a9d      	sublt	r5, r3, r2
 80096aa:	2300      	movlt	r3, #0
 80096ac:	e734      	b.n	8009518 <_dtoa_r+0x720>
 80096ae:	9e07      	ldr	r6, [sp, #28]
 80096b0:	9d04      	ldr	r5, [sp, #16]
 80096b2:	9f08      	ldr	r7, [sp, #32]
 80096b4:	e73b      	b.n	800952e <_dtoa_r+0x736>
 80096b6:	9a07      	ldr	r2, [sp, #28]
 80096b8:	e767      	b.n	800958a <_dtoa_r+0x792>
 80096ba:	9b06      	ldr	r3, [sp, #24]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	dc18      	bgt.n	80096f2 <_dtoa_r+0x8fa>
 80096c0:	f1ba 0f00 	cmp.w	sl, #0
 80096c4:	d115      	bne.n	80096f2 <_dtoa_r+0x8fa>
 80096c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096ca:	b993      	cbnz	r3, 80096f2 <_dtoa_r+0x8fa>
 80096cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096d0:	0d1b      	lsrs	r3, r3, #20
 80096d2:	051b      	lsls	r3, r3, #20
 80096d4:	b183      	cbz	r3, 80096f8 <_dtoa_r+0x900>
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	3301      	adds	r3, #1
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	9b05      	ldr	r3, [sp, #20]
 80096de:	3301      	adds	r3, #1
 80096e0:	9305      	str	r3, [sp, #20]
 80096e2:	f04f 0801 	mov.w	r8, #1
 80096e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f47f af6a 	bne.w	80095c2 <_dtoa_r+0x7ca>
 80096ee:	2001      	movs	r0, #1
 80096f0:	e76f      	b.n	80095d2 <_dtoa_r+0x7da>
 80096f2:	f04f 0800 	mov.w	r8, #0
 80096f6:	e7f6      	b.n	80096e6 <_dtoa_r+0x8ee>
 80096f8:	4698      	mov	r8, r3
 80096fa:	e7f4      	b.n	80096e6 <_dtoa_r+0x8ee>
 80096fc:	f43f af7d 	beq.w	80095fa <_dtoa_r+0x802>
 8009700:	4618      	mov	r0, r3
 8009702:	301c      	adds	r0, #28
 8009704:	e772      	b.n	80095ec <_dtoa_r+0x7f4>
 8009706:	9b03      	ldr	r3, [sp, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	dc37      	bgt.n	800977c <_dtoa_r+0x984>
 800970c:	9b06      	ldr	r3, [sp, #24]
 800970e:	2b02      	cmp	r3, #2
 8009710:	dd34      	ble.n	800977c <_dtoa_r+0x984>
 8009712:	9b03      	ldr	r3, [sp, #12]
 8009714:	9302      	str	r3, [sp, #8]
 8009716:	9b02      	ldr	r3, [sp, #8]
 8009718:	b96b      	cbnz	r3, 8009736 <_dtoa_r+0x93e>
 800971a:	4631      	mov	r1, r6
 800971c:	2205      	movs	r2, #5
 800971e:	4620      	mov	r0, r4
 8009720:	f000 fe4e 	bl	800a3c0 <__multadd>
 8009724:	4601      	mov	r1, r0
 8009726:	4606      	mov	r6, r0
 8009728:	ee18 0a10 	vmov	r0, s16
 800972c:	f001 f8b2 	bl	800a894 <__mcmp>
 8009730:	2800      	cmp	r0, #0
 8009732:	f73f adbb 	bgt.w	80092ac <_dtoa_r+0x4b4>
 8009736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009738:	9d01      	ldr	r5, [sp, #4]
 800973a:	43db      	mvns	r3, r3
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	f04f 0800 	mov.w	r8, #0
 8009742:	4631      	mov	r1, r6
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fe19 	bl	800a37c <_Bfree>
 800974a:	2f00      	cmp	r7, #0
 800974c:	f43f aea4 	beq.w	8009498 <_dtoa_r+0x6a0>
 8009750:	f1b8 0f00 	cmp.w	r8, #0
 8009754:	d005      	beq.n	8009762 <_dtoa_r+0x96a>
 8009756:	45b8      	cmp	r8, r7
 8009758:	d003      	beq.n	8009762 <_dtoa_r+0x96a>
 800975a:	4641      	mov	r1, r8
 800975c:	4620      	mov	r0, r4
 800975e:	f000 fe0d 	bl	800a37c <_Bfree>
 8009762:	4639      	mov	r1, r7
 8009764:	4620      	mov	r0, r4
 8009766:	f000 fe09 	bl	800a37c <_Bfree>
 800976a:	e695      	b.n	8009498 <_dtoa_r+0x6a0>
 800976c:	2600      	movs	r6, #0
 800976e:	4637      	mov	r7, r6
 8009770:	e7e1      	b.n	8009736 <_dtoa_r+0x93e>
 8009772:	9700      	str	r7, [sp, #0]
 8009774:	4637      	mov	r7, r6
 8009776:	e599      	b.n	80092ac <_dtoa_r+0x4b4>
 8009778:	40240000 	.word	0x40240000
 800977c:	9b08      	ldr	r3, [sp, #32]
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 80ca 	beq.w	8009918 <_dtoa_r+0xb20>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	9302      	str	r3, [sp, #8]
 8009788:	2d00      	cmp	r5, #0
 800978a:	dd05      	ble.n	8009798 <_dtoa_r+0x9a0>
 800978c:	4639      	mov	r1, r7
 800978e:	462a      	mov	r2, r5
 8009790:	4620      	mov	r0, r4
 8009792:	f001 f80f 	bl	800a7b4 <__lshift>
 8009796:	4607      	mov	r7, r0
 8009798:	f1b8 0f00 	cmp.w	r8, #0
 800979c:	d05b      	beq.n	8009856 <_dtoa_r+0xa5e>
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 fdab 	bl	800a2fc <_Balloc>
 80097a6:	4605      	mov	r5, r0
 80097a8:	b928      	cbnz	r0, 80097b6 <_dtoa_r+0x9be>
 80097aa:	4b87      	ldr	r3, [pc, #540]	; (80099c8 <_dtoa_r+0xbd0>)
 80097ac:	4602      	mov	r2, r0
 80097ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80097b2:	f7ff bb3b 	b.w	8008e2c <_dtoa_r+0x34>
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	3202      	adds	r2, #2
 80097ba:	0092      	lsls	r2, r2, #2
 80097bc:	f107 010c 	add.w	r1, r7, #12
 80097c0:	300c      	adds	r0, #12
 80097c2:	f000 fd8d 	bl	800a2e0 <memcpy>
 80097c6:	2201      	movs	r2, #1
 80097c8:	4629      	mov	r1, r5
 80097ca:	4620      	mov	r0, r4
 80097cc:	f000 fff2 	bl	800a7b4 <__lshift>
 80097d0:	9b01      	ldr	r3, [sp, #4]
 80097d2:	f103 0901 	add.w	r9, r3, #1
 80097d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80097da:	4413      	add	r3, r2
 80097dc:	9305      	str	r3, [sp, #20]
 80097de:	f00a 0301 	and.w	r3, sl, #1
 80097e2:	46b8      	mov	r8, r7
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	4607      	mov	r7, r0
 80097e8:	4631      	mov	r1, r6
 80097ea:	ee18 0a10 	vmov	r0, s16
 80097ee:	f7ff fa77 	bl	8008ce0 <quorem>
 80097f2:	4641      	mov	r1, r8
 80097f4:	9002      	str	r0, [sp, #8]
 80097f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80097fa:	ee18 0a10 	vmov	r0, s16
 80097fe:	f001 f849 	bl	800a894 <__mcmp>
 8009802:	463a      	mov	r2, r7
 8009804:	9003      	str	r0, [sp, #12]
 8009806:	4631      	mov	r1, r6
 8009808:	4620      	mov	r0, r4
 800980a:	f001 f85f 	bl	800a8cc <__mdiff>
 800980e:	68c2      	ldr	r2, [r0, #12]
 8009810:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009814:	4605      	mov	r5, r0
 8009816:	bb02      	cbnz	r2, 800985a <_dtoa_r+0xa62>
 8009818:	4601      	mov	r1, r0
 800981a:	ee18 0a10 	vmov	r0, s16
 800981e:	f001 f839 	bl	800a894 <__mcmp>
 8009822:	4602      	mov	r2, r0
 8009824:	4629      	mov	r1, r5
 8009826:	4620      	mov	r0, r4
 8009828:	9207      	str	r2, [sp, #28]
 800982a:	f000 fda7 	bl	800a37c <_Bfree>
 800982e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009832:	ea43 0102 	orr.w	r1, r3, r2
 8009836:	9b04      	ldr	r3, [sp, #16]
 8009838:	430b      	orrs	r3, r1
 800983a:	464d      	mov	r5, r9
 800983c:	d10f      	bne.n	800985e <_dtoa_r+0xa66>
 800983e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009842:	d02a      	beq.n	800989a <_dtoa_r+0xaa2>
 8009844:	9b03      	ldr	r3, [sp, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	dd02      	ble.n	8009850 <_dtoa_r+0xa58>
 800984a:	9b02      	ldr	r3, [sp, #8]
 800984c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009850:	f88b a000 	strb.w	sl, [fp]
 8009854:	e775      	b.n	8009742 <_dtoa_r+0x94a>
 8009856:	4638      	mov	r0, r7
 8009858:	e7ba      	b.n	80097d0 <_dtoa_r+0x9d8>
 800985a:	2201      	movs	r2, #1
 800985c:	e7e2      	b.n	8009824 <_dtoa_r+0xa2c>
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	db04      	blt.n	800986e <_dtoa_r+0xa76>
 8009864:	9906      	ldr	r1, [sp, #24]
 8009866:	430b      	orrs	r3, r1
 8009868:	9904      	ldr	r1, [sp, #16]
 800986a:	430b      	orrs	r3, r1
 800986c:	d122      	bne.n	80098b4 <_dtoa_r+0xabc>
 800986e:	2a00      	cmp	r2, #0
 8009870:	ddee      	ble.n	8009850 <_dtoa_r+0xa58>
 8009872:	ee18 1a10 	vmov	r1, s16
 8009876:	2201      	movs	r2, #1
 8009878:	4620      	mov	r0, r4
 800987a:	f000 ff9b 	bl	800a7b4 <__lshift>
 800987e:	4631      	mov	r1, r6
 8009880:	ee08 0a10 	vmov	s16, r0
 8009884:	f001 f806 	bl	800a894 <__mcmp>
 8009888:	2800      	cmp	r0, #0
 800988a:	dc03      	bgt.n	8009894 <_dtoa_r+0xa9c>
 800988c:	d1e0      	bne.n	8009850 <_dtoa_r+0xa58>
 800988e:	f01a 0f01 	tst.w	sl, #1
 8009892:	d0dd      	beq.n	8009850 <_dtoa_r+0xa58>
 8009894:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009898:	d1d7      	bne.n	800984a <_dtoa_r+0xa52>
 800989a:	2339      	movs	r3, #57	; 0x39
 800989c:	f88b 3000 	strb.w	r3, [fp]
 80098a0:	462b      	mov	r3, r5
 80098a2:	461d      	mov	r5, r3
 80098a4:	3b01      	subs	r3, #1
 80098a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098aa:	2a39      	cmp	r2, #57	; 0x39
 80098ac:	d071      	beq.n	8009992 <_dtoa_r+0xb9a>
 80098ae:	3201      	adds	r2, #1
 80098b0:	701a      	strb	r2, [r3, #0]
 80098b2:	e746      	b.n	8009742 <_dtoa_r+0x94a>
 80098b4:	2a00      	cmp	r2, #0
 80098b6:	dd07      	ble.n	80098c8 <_dtoa_r+0xad0>
 80098b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098bc:	d0ed      	beq.n	800989a <_dtoa_r+0xaa2>
 80098be:	f10a 0301 	add.w	r3, sl, #1
 80098c2:	f88b 3000 	strb.w	r3, [fp]
 80098c6:	e73c      	b.n	8009742 <_dtoa_r+0x94a>
 80098c8:	9b05      	ldr	r3, [sp, #20]
 80098ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80098ce:	4599      	cmp	r9, r3
 80098d0:	d047      	beq.n	8009962 <_dtoa_r+0xb6a>
 80098d2:	ee18 1a10 	vmov	r1, s16
 80098d6:	2300      	movs	r3, #0
 80098d8:	220a      	movs	r2, #10
 80098da:	4620      	mov	r0, r4
 80098dc:	f000 fd70 	bl	800a3c0 <__multadd>
 80098e0:	45b8      	cmp	r8, r7
 80098e2:	ee08 0a10 	vmov	s16, r0
 80098e6:	f04f 0300 	mov.w	r3, #0
 80098ea:	f04f 020a 	mov.w	r2, #10
 80098ee:	4641      	mov	r1, r8
 80098f0:	4620      	mov	r0, r4
 80098f2:	d106      	bne.n	8009902 <_dtoa_r+0xb0a>
 80098f4:	f000 fd64 	bl	800a3c0 <__multadd>
 80098f8:	4680      	mov	r8, r0
 80098fa:	4607      	mov	r7, r0
 80098fc:	f109 0901 	add.w	r9, r9, #1
 8009900:	e772      	b.n	80097e8 <_dtoa_r+0x9f0>
 8009902:	f000 fd5d 	bl	800a3c0 <__multadd>
 8009906:	4639      	mov	r1, r7
 8009908:	4680      	mov	r8, r0
 800990a:	2300      	movs	r3, #0
 800990c:	220a      	movs	r2, #10
 800990e:	4620      	mov	r0, r4
 8009910:	f000 fd56 	bl	800a3c0 <__multadd>
 8009914:	4607      	mov	r7, r0
 8009916:	e7f1      	b.n	80098fc <_dtoa_r+0xb04>
 8009918:	9b03      	ldr	r3, [sp, #12]
 800991a:	9302      	str	r3, [sp, #8]
 800991c:	9d01      	ldr	r5, [sp, #4]
 800991e:	ee18 0a10 	vmov	r0, s16
 8009922:	4631      	mov	r1, r6
 8009924:	f7ff f9dc 	bl	8008ce0 <quorem>
 8009928:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800992c:	9b01      	ldr	r3, [sp, #4]
 800992e:	f805 ab01 	strb.w	sl, [r5], #1
 8009932:	1aea      	subs	r2, r5, r3
 8009934:	9b02      	ldr	r3, [sp, #8]
 8009936:	4293      	cmp	r3, r2
 8009938:	dd09      	ble.n	800994e <_dtoa_r+0xb56>
 800993a:	ee18 1a10 	vmov	r1, s16
 800993e:	2300      	movs	r3, #0
 8009940:	220a      	movs	r2, #10
 8009942:	4620      	mov	r0, r4
 8009944:	f000 fd3c 	bl	800a3c0 <__multadd>
 8009948:	ee08 0a10 	vmov	s16, r0
 800994c:	e7e7      	b.n	800991e <_dtoa_r+0xb26>
 800994e:	9b02      	ldr	r3, [sp, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	bfc8      	it	gt
 8009954:	461d      	movgt	r5, r3
 8009956:	9b01      	ldr	r3, [sp, #4]
 8009958:	bfd8      	it	le
 800995a:	2501      	movle	r5, #1
 800995c:	441d      	add	r5, r3
 800995e:	f04f 0800 	mov.w	r8, #0
 8009962:	ee18 1a10 	vmov	r1, s16
 8009966:	2201      	movs	r2, #1
 8009968:	4620      	mov	r0, r4
 800996a:	f000 ff23 	bl	800a7b4 <__lshift>
 800996e:	4631      	mov	r1, r6
 8009970:	ee08 0a10 	vmov	s16, r0
 8009974:	f000 ff8e 	bl	800a894 <__mcmp>
 8009978:	2800      	cmp	r0, #0
 800997a:	dc91      	bgt.n	80098a0 <_dtoa_r+0xaa8>
 800997c:	d102      	bne.n	8009984 <_dtoa_r+0xb8c>
 800997e:	f01a 0f01 	tst.w	sl, #1
 8009982:	d18d      	bne.n	80098a0 <_dtoa_r+0xaa8>
 8009984:	462b      	mov	r3, r5
 8009986:	461d      	mov	r5, r3
 8009988:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800998c:	2a30      	cmp	r2, #48	; 0x30
 800998e:	d0fa      	beq.n	8009986 <_dtoa_r+0xb8e>
 8009990:	e6d7      	b.n	8009742 <_dtoa_r+0x94a>
 8009992:	9a01      	ldr	r2, [sp, #4]
 8009994:	429a      	cmp	r2, r3
 8009996:	d184      	bne.n	80098a2 <_dtoa_r+0xaaa>
 8009998:	9b00      	ldr	r3, [sp, #0]
 800999a:	3301      	adds	r3, #1
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	2331      	movs	r3, #49	; 0x31
 80099a0:	7013      	strb	r3, [r2, #0]
 80099a2:	e6ce      	b.n	8009742 <_dtoa_r+0x94a>
 80099a4:	4b09      	ldr	r3, [pc, #36]	; (80099cc <_dtoa_r+0xbd4>)
 80099a6:	f7ff ba95 	b.w	8008ed4 <_dtoa_r+0xdc>
 80099aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f47f aa6e 	bne.w	8008e8e <_dtoa_r+0x96>
 80099b2:	4b07      	ldr	r3, [pc, #28]	; (80099d0 <_dtoa_r+0xbd8>)
 80099b4:	f7ff ba8e 	b.w	8008ed4 <_dtoa_r+0xdc>
 80099b8:	9b02      	ldr	r3, [sp, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dcae      	bgt.n	800991c <_dtoa_r+0xb24>
 80099be:	9b06      	ldr	r3, [sp, #24]
 80099c0:	2b02      	cmp	r3, #2
 80099c2:	f73f aea8 	bgt.w	8009716 <_dtoa_r+0x91e>
 80099c6:	e7a9      	b.n	800991c <_dtoa_r+0xb24>
 80099c8:	0800bde0 	.word	0x0800bde0
 80099cc:	0800bbe4 	.word	0x0800bbe4
 80099d0:	0800bd61 	.word	0x0800bd61

080099d4 <std>:
 80099d4:	2300      	movs	r3, #0
 80099d6:	b510      	push	{r4, lr}
 80099d8:	4604      	mov	r4, r0
 80099da:	e9c0 3300 	strd	r3, r3, [r0]
 80099de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099e2:	6083      	str	r3, [r0, #8]
 80099e4:	8181      	strh	r1, [r0, #12]
 80099e6:	6643      	str	r3, [r0, #100]	; 0x64
 80099e8:	81c2      	strh	r2, [r0, #14]
 80099ea:	6183      	str	r3, [r0, #24]
 80099ec:	4619      	mov	r1, r3
 80099ee:	2208      	movs	r2, #8
 80099f0:	305c      	adds	r0, #92	; 0x5c
 80099f2:	f7fd fc09 	bl	8007208 <memset>
 80099f6:	4b05      	ldr	r3, [pc, #20]	; (8009a0c <std+0x38>)
 80099f8:	6263      	str	r3, [r4, #36]	; 0x24
 80099fa:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <std+0x3c>)
 80099fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80099fe:	4b05      	ldr	r3, [pc, #20]	; (8009a14 <std+0x40>)
 8009a00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a02:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <std+0x44>)
 8009a04:	6224      	str	r4, [r4, #32]
 8009a06:	6323      	str	r3, [r4, #48]	; 0x30
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	bf00      	nop
 8009a0c:	0800b409 	.word	0x0800b409
 8009a10:	0800b42b 	.word	0x0800b42b
 8009a14:	0800b463 	.word	0x0800b463
 8009a18:	0800b487 	.word	0x0800b487

08009a1c <_cleanup_r>:
 8009a1c:	4901      	ldr	r1, [pc, #4]	; (8009a24 <_cleanup_r+0x8>)
 8009a1e:	f000 b8af 	b.w	8009b80 <_fwalk_reent>
 8009a22:	bf00      	nop
 8009a24:	0800b7e1 	.word	0x0800b7e1

08009a28 <__sfmoreglue>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	2268      	movs	r2, #104	; 0x68
 8009a2c:	1e4d      	subs	r5, r1, #1
 8009a2e:	4355      	muls	r5, r2
 8009a30:	460e      	mov	r6, r1
 8009a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a36:	f001 f9a5 	bl	800ad84 <_malloc_r>
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	b140      	cbz	r0, 8009a50 <__sfmoreglue+0x28>
 8009a3e:	2100      	movs	r1, #0
 8009a40:	e9c0 1600 	strd	r1, r6, [r0]
 8009a44:	300c      	adds	r0, #12
 8009a46:	60a0      	str	r0, [r4, #8]
 8009a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a4c:	f7fd fbdc 	bl	8007208 <memset>
 8009a50:	4620      	mov	r0, r4
 8009a52:	bd70      	pop	{r4, r5, r6, pc}

08009a54 <__sfp_lock_acquire>:
 8009a54:	4801      	ldr	r0, [pc, #4]	; (8009a5c <__sfp_lock_acquire+0x8>)
 8009a56:	f000 bc26 	b.w	800a2a6 <__retarget_lock_acquire_recursive>
 8009a5a:	bf00      	nop
 8009a5c:	200003f5 	.word	0x200003f5

08009a60 <__sfp_lock_release>:
 8009a60:	4801      	ldr	r0, [pc, #4]	; (8009a68 <__sfp_lock_release+0x8>)
 8009a62:	f000 bc21 	b.w	800a2a8 <__retarget_lock_release_recursive>
 8009a66:	bf00      	nop
 8009a68:	200003f5 	.word	0x200003f5

08009a6c <__sinit_lock_acquire>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	; (8009a74 <__sinit_lock_acquire+0x8>)
 8009a6e:	f000 bc1a 	b.w	800a2a6 <__retarget_lock_acquire_recursive>
 8009a72:	bf00      	nop
 8009a74:	200003f6 	.word	0x200003f6

08009a78 <__sinit_lock_release>:
 8009a78:	4801      	ldr	r0, [pc, #4]	; (8009a80 <__sinit_lock_release+0x8>)
 8009a7a:	f000 bc15 	b.w	800a2a8 <__retarget_lock_release_recursive>
 8009a7e:	bf00      	nop
 8009a80:	200003f6 	.word	0x200003f6

08009a84 <__sinit>:
 8009a84:	b510      	push	{r4, lr}
 8009a86:	4604      	mov	r4, r0
 8009a88:	f7ff fff0 	bl	8009a6c <__sinit_lock_acquire>
 8009a8c:	69a3      	ldr	r3, [r4, #24]
 8009a8e:	b11b      	cbz	r3, 8009a98 <__sinit+0x14>
 8009a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a94:	f7ff bff0 	b.w	8009a78 <__sinit_lock_release>
 8009a98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a9c:	6523      	str	r3, [r4, #80]	; 0x50
 8009a9e:	4b13      	ldr	r3, [pc, #76]	; (8009aec <__sinit+0x68>)
 8009aa0:	4a13      	ldr	r2, [pc, #76]	; (8009af0 <__sinit+0x6c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009aa6:	42a3      	cmp	r3, r4
 8009aa8:	bf04      	itt	eq
 8009aaa:	2301      	moveq	r3, #1
 8009aac:	61a3      	streq	r3, [r4, #24]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f000 f820 	bl	8009af4 <__sfp>
 8009ab4:	6060      	str	r0, [r4, #4]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f000 f81c 	bl	8009af4 <__sfp>
 8009abc:	60a0      	str	r0, [r4, #8]
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f000 f818 	bl	8009af4 <__sfp>
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	60e0      	str	r0, [r4, #12]
 8009ac8:	2104      	movs	r1, #4
 8009aca:	6860      	ldr	r0, [r4, #4]
 8009acc:	f7ff ff82 	bl	80099d4 <std>
 8009ad0:	68a0      	ldr	r0, [r4, #8]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	2109      	movs	r1, #9
 8009ad6:	f7ff ff7d 	bl	80099d4 <std>
 8009ada:	68e0      	ldr	r0, [r4, #12]
 8009adc:	2202      	movs	r2, #2
 8009ade:	2112      	movs	r1, #18
 8009ae0:	f7ff ff78 	bl	80099d4 <std>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	61a3      	str	r3, [r4, #24]
 8009ae8:	e7d2      	b.n	8009a90 <__sinit+0xc>
 8009aea:	bf00      	nop
 8009aec:	0800bbd0 	.word	0x0800bbd0
 8009af0:	08009a1d 	.word	0x08009a1d

08009af4 <__sfp>:
 8009af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af6:	4607      	mov	r7, r0
 8009af8:	f7ff ffac 	bl	8009a54 <__sfp_lock_acquire>
 8009afc:	4b1e      	ldr	r3, [pc, #120]	; (8009b78 <__sfp+0x84>)
 8009afe:	681e      	ldr	r6, [r3, #0]
 8009b00:	69b3      	ldr	r3, [r6, #24]
 8009b02:	b913      	cbnz	r3, 8009b0a <__sfp+0x16>
 8009b04:	4630      	mov	r0, r6
 8009b06:	f7ff ffbd 	bl	8009a84 <__sinit>
 8009b0a:	3648      	adds	r6, #72	; 0x48
 8009b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	d503      	bpl.n	8009b1c <__sfp+0x28>
 8009b14:	6833      	ldr	r3, [r6, #0]
 8009b16:	b30b      	cbz	r3, 8009b5c <__sfp+0x68>
 8009b18:	6836      	ldr	r6, [r6, #0]
 8009b1a:	e7f7      	b.n	8009b0c <__sfp+0x18>
 8009b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b20:	b9d5      	cbnz	r5, 8009b58 <__sfp+0x64>
 8009b22:	4b16      	ldr	r3, [pc, #88]	; (8009b7c <__sfp+0x88>)
 8009b24:	60e3      	str	r3, [r4, #12]
 8009b26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b2a:	6665      	str	r5, [r4, #100]	; 0x64
 8009b2c:	f000 fbba 	bl	800a2a4 <__retarget_lock_init_recursive>
 8009b30:	f7ff ff96 	bl	8009a60 <__sfp_lock_release>
 8009b34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b3c:	6025      	str	r5, [r4, #0]
 8009b3e:	61a5      	str	r5, [r4, #24]
 8009b40:	2208      	movs	r2, #8
 8009b42:	4629      	mov	r1, r5
 8009b44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b48:	f7fd fb5e 	bl	8007208 <memset>
 8009b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b54:	4620      	mov	r0, r4
 8009b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b58:	3468      	adds	r4, #104	; 0x68
 8009b5a:	e7d9      	b.n	8009b10 <__sfp+0x1c>
 8009b5c:	2104      	movs	r1, #4
 8009b5e:	4638      	mov	r0, r7
 8009b60:	f7ff ff62 	bl	8009a28 <__sfmoreglue>
 8009b64:	4604      	mov	r4, r0
 8009b66:	6030      	str	r0, [r6, #0]
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d1d5      	bne.n	8009b18 <__sfp+0x24>
 8009b6c:	f7ff ff78 	bl	8009a60 <__sfp_lock_release>
 8009b70:	230c      	movs	r3, #12
 8009b72:	603b      	str	r3, [r7, #0]
 8009b74:	e7ee      	b.n	8009b54 <__sfp+0x60>
 8009b76:	bf00      	nop
 8009b78:	0800bbd0 	.word	0x0800bbd0
 8009b7c:	ffff0001 	.word	0xffff0001

08009b80 <_fwalk_reent>:
 8009b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b84:	4606      	mov	r6, r0
 8009b86:	4688      	mov	r8, r1
 8009b88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b8c:	2700      	movs	r7, #0
 8009b8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b92:	f1b9 0901 	subs.w	r9, r9, #1
 8009b96:	d505      	bpl.n	8009ba4 <_fwalk_reent+0x24>
 8009b98:	6824      	ldr	r4, [r4, #0]
 8009b9a:	2c00      	cmp	r4, #0
 8009b9c:	d1f7      	bne.n	8009b8e <_fwalk_reent+0xe>
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba4:	89ab      	ldrh	r3, [r5, #12]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d907      	bls.n	8009bba <_fwalk_reent+0x3a>
 8009baa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	d003      	beq.n	8009bba <_fwalk_reent+0x3a>
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	47c0      	blx	r8
 8009bb8:	4307      	orrs	r7, r0
 8009bba:	3568      	adds	r5, #104	; 0x68
 8009bbc:	e7e9      	b.n	8009b92 <_fwalk_reent+0x12>

08009bbe <rshift>:
 8009bbe:	6903      	ldr	r3, [r0, #16]
 8009bc0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bc8:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bcc:	f100 0414 	add.w	r4, r0, #20
 8009bd0:	dd45      	ble.n	8009c5e <rshift+0xa0>
 8009bd2:	f011 011f 	ands.w	r1, r1, #31
 8009bd6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009bda:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bde:	d10c      	bne.n	8009bfa <rshift+0x3c>
 8009be0:	f100 0710 	add.w	r7, r0, #16
 8009be4:	4629      	mov	r1, r5
 8009be6:	42b1      	cmp	r1, r6
 8009be8:	d334      	bcc.n	8009c54 <rshift+0x96>
 8009bea:	1a9b      	subs	r3, r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	1eea      	subs	r2, r5, #3
 8009bf0:	4296      	cmp	r6, r2
 8009bf2:	bf38      	it	cc
 8009bf4:	2300      	movcc	r3, #0
 8009bf6:	4423      	add	r3, r4
 8009bf8:	e015      	b.n	8009c26 <rshift+0x68>
 8009bfa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bfe:	f1c1 0820 	rsb	r8, r1, #32
 8009c02:	40cf      	lsrs	r7, r1
 8009c04:	f105 0e04 	add.w	lr, r5, #4
 8009c08:	46a1      	mov	r9, r4
 8009c0a:	4576      	cmp	r6, lr
 8009c0c:	46f4      	mov	ip, lr
 8009c0e:	d815      	bhi.n	8009c3c <rshift+0x7e>
 8009c10:	1a9a      	subs	r2, r3, r2
 8009c12:	0092      	lsls	r2, r2, #2
 8009c14:	3a04      	subs	r2, #4
 8009c16:	3501      	adds	r5, #1
 8009c18:	42ae      	cmp	r6, r5
 8009c1a:	bf38      	it	cc
 8009c1c:	2200      	movcc	r2, #0
 8009c1e:	18a3      	adds	r3, r4, r2
 8009c20:	50a7      	str	r7, [r4, r2]
 8009c22:	b107      	cbz	r7, 8009c26 <rshift+0x68>
 8009c24:	3304      	adds	r3, #4
 8009c26:	1b1a      	subs	r2, r3, r4
 8009c28:	42a3      	cmp	r3, r4
 8009c2a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c2e:	bf08      	it	eq
 8009c30:	2300      	moveq	r3, #0
 8009c32:	6102      	str	r2, [r0, #16]
 8009c34:	bf08      	it	eq
 8009c36:	6143      	streq	r3, [r0, #20]
 8009c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c3c:	f8dc c000 	ldr.w	ip, [ip]
 8009c40:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c44:	ea4c 0707 	orr.w	r7, ip, r7
 8009c48:	f849 7b04 	str.w	r7, [r9], #4
 8009c4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c50:	40cf      	lsrs	r7, r1
 8009c52:	e7da      	b.n	8009c0a <rshift+0x4c>
 8009c54:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c58:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c5c:	e7c3      	b.n	8009be6 <rshift+0x28>
 8009c5e:	4623      	mov	r3, r4
 8009c60:	e7e1      	b.n	8009c26 <rshift+0x68>

08009c62 <__hexdig_fun>:
 8009c62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009c66:	2b09      	cmp	r3, #9
 8009c68:	d802      	bhi.n	8009c70 <__hexdig_fun+0xe>
 8009c6a:	3820      	subs	r0, #32
 8009c6c:	b2c0      	uxtb	r0, r0
 8009c6e:	4770      	bx	lr
 8009c70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c74:	2b05      	cmp	r3, #5
 8009c76:	d801      	bhi.n	8009c7c <__hexdig_fun+0x1a>
 8009c78:	3847      	subs	r0, #71	; 0x47
 8009c7a:	e7f7      	b.n	8009c6c <__hexdig_fun+0xa>
 8009c7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c80:	2b05      	cmp	r3, #5
 8009c82:	d801      	bhi.n	8009c88 <__hexdig_fun+0x26>
 8009c84:	3827      	subs	r0, #39	; 0x27
 8009c86:	e7f1      	b.n	8009c6c <__hexdig_fun+0xa>
 8009c88:	2000      	movs	r0, #0
 8009c8a:	4770      	bx	lr

08009c8c <__gethex>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	ed2d 8b02 	vpush	{d8}
 8009c94:	b089      	sub	sp, #36	; 0x24
 8009c96:	ee08 0a10 	vmov	s16, r0
 8009c9a:	9304      	str	r3, [sp, #16]
 8009c9c:	4bb4      	ldr	r3, [pc, #720]	; (8009f70 <__gethex+0x2e4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	9301      	str	r3, [sp, #4]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	468b      	mov	fp, r1
 8009ca6:	4690      	mov	r8, r2
 8009ca8:	f7f6 fa92 	bl	80001d0 <strlen>
 8009cac:	9b01      	ldr	r3, [sp, #4]
 8009cae:	f8db 2000 	ldr.w	r2, [fp]
 8009cb2:	4403      	add	r3, r0
 8009cb4:	4682      	mov	sl, r0
 8009cb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009cba:	9305      	str	r3, [sp, #20]
 8009cbc:	1c93      	adds	r3, r2, #2
 8009cbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009cc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009cc6:	32fe      	adds	r2, #254	; 0xfe
 8009cc8:	18d1      	adds	r1, r2, r3
 8009cca:	461f      	mov	r7, r3
 8009ccc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009cd0:	9100      	str	r1, [sp, #0]
 8009cd2:	2830      	cmp	r0, #48	; 0x30
 8009cd4:	d0f8      	beq.n	8009cc8 <__gethex+0x3c>
 8009cd6:	f7ff ffc4 	bl	8009c62 <__hexdig_fun>
 8009cda:	4604      	mov	r4, r0
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d13a      	bne.n	8009d56 <__gethex+0xca>
 8009ce0:	9901      	ldr	r1, [sp, #4]
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	4638      	mov	r0, r7
 8009ce6:	f001 fbd2 	bl	800b48e <strncmp>
 8009cea:	4605      	mov	r5, r0
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d168      	bne.n	8009dc2 <__gethex+0x136>
 8009cf0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009cf4:	eb07 060a 	add.w	r6, r7, sl
 8009cf8:	f7ff ffb3 	bl	8009c62 <__hexdig_fun>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	d062      	beq.n	8009dc6 <__gethex+0x13a>
 8009d00:	4633      	mov	r3, r6
 8009d02:	7818      	ldrb	r0, [r3, #0]
 8009d04:	2830      	cmp	r0, #48	; 0x30
 8009d06:	461f      	mov	r7, r3
 8009d08:	f103 0301 	add.w	r3, r3, #1
 8009d0c:	d0f9      	beq.n	8009d02 <__gethex+0x76>
 8009d0e:	f7ff ffa8 	bl	8009c62 <__hexdig_fun>
 8009d12:	2301      	movs	r3, #1
 8009d14:	fab0 f480 	clz	r4, r0
 8009d18:	0964      	lsrs	r4, r4, #5
 8009d1a:	4635      	mov	r5, r6
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	463a      	mov	r2, r7
 8009d20:	4616      	mov	r6, r2
 8009d22:	3201      	adds	r2, #1
 8009d24:	7830      	ldrb	r0, [r6, #0]
 8009d26:	f7ff ff9c 	bl	8009c62 <__hexdig_fun>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d1f8      	bne.n	8009d20 <__gethex+0x94>
 8009d2e:	9901      	ldr	r1, [sp, #4]
 8009d30:	4652      	mov	r2, sl
 8009d32:	4630      	mov	r0, r6
 8009d34:	f001 fbab 	bl	800b48e <strncmp>
 8009d38:	b980      	cbnz	r0, 8009d5c <__gethex+0xd0>
 8009d3a:	b94d      	cbnz	r5, 8009d50 <__gethex+0xc4>
 8009d3c:	eb06 050a 	add.w	r5, r6, sl
 8009d40:	462a      	mov	r2, r5
 8009d42:	4616      	mov	r6, r2
 8009d44:	3201      	adds	r2, #1
 8009d46:	7830      	ldrb	r0, [r6, #0]
 8009d48:	f7ff ff8b 	bl	8009c62 <__hexdig_fun>
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1f8      	bne.n	8009d42 <__gethex+0xb6>
 8009d50:	1bad      	subs	r5, r5, r6
 8009d52:	00ad      	lsls	r5, r5, #2
 8009d54:	e004      	b.n	8009d60 <__gethex+0xd4>
 8009d56:	2400      	movs	r4, #0
 8009d58:	4625      	mov	r5, r4
 8009d5a:	e7e0      	b.n	8009d1e <__gethex+0x92>
 8009d5c:	2d00      	cmp	r5, #0
 8009d5e:	d1f7      	bne.n	8009d50 <__gethex+0xc4>
 8009d60:	7833      	ldrb	r3, [r6, #0]
 8009d62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d66:	2b50      	cmp	r3, #80	; 0x50
 8009d68:	d13b      	bne.n	8009de2 <__gethex+0x156>
 8009d6a:	7873      	ldrb	r3, [r6, #1]
 8009d6c:	2b2b      	cmp	r3, #43	; 0x2b
 8009d6e:	d02c      	beq.n	8009dca <__gethex+0x13e>
 8009d70:	2b2d      	cmp	r3, #45	; 0x2d
 8009d72:	d02e      	beq.n	8009dd2 <__gethex+0x146>
 8009d74:	1c71      	adds	r1, r6, #1
 8009d76:	f04f 0900 	mov.w	r9, #0
 8009d7a:	7808      	ldrb	r0, [r1, #0]
 8009d7c:	f7ff ff71 	bl	8009c62 <__hexdig_fun>
 8009d80:	1e43      	subs	r3, r0, #1
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b18      	cmp	r3, #24
 8009d86:	d82c      	bhi.n	8009de2 <__gethex+0x156>
 8009d88:	f1a0 0210 	sub.w	r2, r0, #16
 8009d8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d90:	f7ff ff67 	bl	8009c62 <__hexdig_fun>
 8009d94:	1e43      	subs	r3, r0, #1
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2b18      	cmp	r3, #24
 8009d9a:	d91d      	bls.n	8009dd8 <__gethex+0x14c>
 8009d9c:	f1b9 0f00 	cmp.w	r9, #0
 8009da0:	d000      	beq.n	8009da4 <__gethex+0x118>
 8009da2:	4252      	negs	r2, r2
 8009da4:	4415      	add	r5, r2
 8009da6:	f8cb 1000 	str.w	r1, [fp]
 8009daa:	b1e4      	cbz	r4, 8009de6 <__gethex+0x15a>
 8009dac:	9b00      	ldr	r3, [sp, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	bf14      	ite	ne
 8009db2:	2700      	movne	r7, #0
 8009db4:	2706      	moveq	r7, #6
 8009db6:	4638      	mov	r0, r7
 8009db8:	b009      	add	sp, #36	; 0x24
 8009dba:	ecbd 8b02 	vpop	{d8}
 8009dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc2:	463e      	mov	r6, r7
 8009dc4:	4625      	mov	r5, r4
 8009dc6:	2401      	movs	r4, #1
 8009dc8:	e7ca      	b.n	8009d60 <__gethex+0xd4>
 8009dca:	f04f 0900 	mov.w	r9, #0
 8009dce:	1cb1      	adds	r1, r6, #2
 8009dd0:	e7d3      	b.n	8009d7a <__gethex+0xee>
 8009dd2:	f04f 0901 	mov.w	r9, #1
 8009dd6:	e7fa      	b.n	8009dce <__gethex+0x142>
 8009dd8:	230a      	movs	r3, #10
 8009dda:	fb03 0202 	mla	r2, r3, r2, r0
 8009dde:	3a10      	subs	r2, #16
 8009de0:	e7d4      	b.n	8009d8c <__gethex+0x100>
 8009de2:	4631      	mov	r1, r6
 8009de4:	e7df      	b.n	8009da6 <__gethex+0x11a>
 8009de6:	1bf3      	subs	r3, r6, r7
 8009de8:	3b01      	subs	r3, #1
 8009dea:	4621      	mov	r1, r4
 8009dec:	2b07      	cmp	r3, #7
 8009dee:	dc0b      	bgt.n	8009e08 <__gethex+0x17c>
 8009df0:	ee18 0a10 	vmov	r0, s16
 8009df4:	f000 fa82 	bl	800a2fc <_Balloc>
 8009df8:	4604      	mov	r4, r0
 8009dfa:	b940      	cbnz	r0, 8009e0e <__gethex+0x182>
 8009dfc:	4b5d      	ldr	r3, [pc, #372]	; (8009f74 <__gethex+0x2e8>)
 8009dfe:	4602      	mov	r2, r0
 8009e00:	21de      	movs	r1, #222	; 0xde
 8009e02:	485d      	ldr	r0, [pc, #372]	; (8009f78 <__gethex+0x2ec>)
 8009e04:	f001 fc38 	bl	800b678 <__assert_func>
 8009e08:	3101      	adds	r1, #1
 8009e0a:	105b      	asrs	r3, r3, #1
 8009e0c:	e7ee      	b.n	8009dec <__gethex+0x160>
 8009e0e:	f100 0914 	add.w	r9, r0, #20
 8009e12:	f04f 0b00 	mov.w	fp, #0
 8009e16:	f1ca 0301 	rsb	r3, sl, #1
 8009e1a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e1e:	f8cd b000 	str.w	fp, [sp]
 8009e22:	9306      	str	r3, [sp, #24]
 8009e24:	42b7      	cmp	r7, r6
 8009e26:	d340      	bcc.n	8009eaa <__gethex+0x21e>
 8009e28:	9802      	ldr	r0, [sp, #8]
 8009e2a:	9b00      	ldr	r3, [sp, #0]
 8009e2c:	f840 3b04 	str.w	r3, [r0], #4
 8009e30:	eba0 0009 	sub.w	r0, r0, r9
 8009e34:	1080      	asrs	r0, r0, #2
 8009e36:	0146      	lsls	r6, r0, #5
 8009e38:	6120      	str	r0, [r4, #16]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 fb50 	bl	800a4e0 <__hi0bits>
 8009e40:	1a30      	subs	r0, r6, r0
 8009e42:	f8d8 6000 	ldr.w	r6, [r8]
 8009e46:	42b0      	cmp	r0, r6
 8009e48:	dd63      	ble.n	8009f12 <__gethex+0x286>
 8009e4a:	1b87      	subs	r7, r0, r6
 8009e4c:	4639      	mov	r1, r7
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f000 fef4 	bl	800ac3c <__any_on>
 8009e54:	4682      	mov	sl, r0
 8009e56:	b1a8      	cbz	r0, 8009e84 <__gethex+0x1f8>
 8009e58:	1e7b      	subs	r3, r7, #1
 8009e5a:	1159      	asrs	r1, r3, #5
 8009e5c:	f003 021f 	and.w	r2, r3, #31
 8009e60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009e64:	f04f 0a01 	mov.w	sl, #1
 8009e68:	fa0a f202 	lsl.w	r2, sl, r2
 8009e6c:	420a      	tst	r2, r1
 8009e6e:	d009      	beq.n	8009e84 <__gethex+0x1f8>
 8009e70:	4553      	cmp	r3, sl
 8009e72:	dd05      	ble.n	8009e80 <__gethex+0x1f4>
 8009e74:	1eb9      	subs	r1, r7, #2
 8009e76:	4620      	mov	r0, r4
 8009e78:	f000 fee0 	bl	800ac3c <__any_on>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	d145      	bne.n	8009f0c <__gethex+0x280>
 8009e80:	f04f 0a02 	mov.w	sl, #2
 8009e84:	4639      	mov	r1, r7
 8009e86:	4620      	mov	r0, r4
 8009e88:	f7ff fe99 	bl	8009bbe <rshift>
 8009e8c:	443d      	add	r5, r7
 8009e8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e92:	42ab      	cmp	r3, r5
 8009e94:	da4c      	bge.n	8009f30 <__gethex+0x2a4>
 8009e96:	ee18 0a10 	vmov	r0, s16
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	f000 fa6e 	bl	800a37c <_Bfree>
 8009ea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	6013      	str	r3, [r2, #0]
 8009ea6:	27a3      	movs	r7, #163	; 0xa3
 8009ea8:	e785      	b.n	8009db6 <__gethex+0x12a>
 8009eaa:	1e73      	subs	r3, r6, #1
 8009eac:	9a05      	ldr	r2, [sp, #20]
 8009eae:	9303      	str	r3, [sp, #12]
 8009eb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d019      	beq.n	8009eec <__gethex+0x260>
 8009eb8:	f1bb 0f20 	cmp.w	fp, #32
 8009ebc:	d107      	bne.n	8009ece <__gethex+0x242>
 8009ebe:	9b02      	ldr	r3, [sp, #8]
 8009ec0:	9a00      	ldr	r2, [sp, #0]
 8009ec2:	f843 2b04 	str.w	r2, [r3], #4
 8009ec6:	9302      	str	r3, [sp, #8]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	469b      	mov	fp, r3
 8009ece:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009ed2:	f7ff fec6 	bl	8009c62 <__hexdig_fun>
 8009ed6:	9b00      	ldr	r3, [sp, #0]
 8009ed8:	f000 000f 	and.w	r0, r0, #15
 8009edc:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ee0:	4303      	orrs	r3, r0
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	f10b 0b04 	add.w	fp, fp, #4
 8009ee8:	9b03      	ldr	r3, [sp, #12]
 8009eea:	e00d      	b.n	8009f08 <__gethex+0x27c>
 8009eec:	9b03      	ldr	r3, [sp, #12]
 8009eee:	9a06      	ldr	r2, [sp, #24]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	42bb      	cmp	r3, r7
 8009ef4:	d3e0      	bcc.n	8009eb8 <__gethex+0x22c>
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	9901      	ldr	r1, [sp, #4]
 8009efa:	9307      	str	r3, [sp, #28]
 8009efc:	4652      	mov	r2, sl
 8009efe:	f001 fac6 	bl	800b48e <strncmp>
 8009f02:	9b07      	ldr	r3, [sp, #28]
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d1d7      	bne.n	8009eb8 <__gethex+0x22c>
 8009f08:	461e      	mov	r6, r3
 8009f0a:	e78b      	b.n	8009e24 <__gethex+0x198>
 8009f0c:	f04f 0a03 	mov.w	sl, #3
 8009f10:	e7b8      	b.n	8009e84 <__gethex+0x1f8>
 8009f12:	da0a      	bge.n	8009f2a <__gethex+0x29e>
 8009f14:	1a37      	subs	r7, r6, r0
 8009f16:	4621      	mov	r1, r4
 8009f18:	ee18 0a10 	vmov	r0, s16
 8009f1c:	463a      	mov	r2, r7
 8009f1e:	f000 fc49 	bl	800a7b4 <__lshift>
 8009f22:	1bed      	subs	r5, r5, r7
 8009f24:	4604      	mov	r4, r0
 8009f26:	f100 0914 	add.w	r9, r0, #20
 8009f2a:	f04f 0a00 	mov.w	sl, #0
 8009f2e:	e7ae      	b.n	8009e8e <__gethex+0x202>
 8009f30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009f34:	42a8      	cmp	r0, r5
 8009f36:	dd72      	ble.n	800a01e <__gethex+0x392>
 8009f38:	1b45      	subs	r5, r0, r5
 8009f3a:	42ae      	cmp	r6, r5
 8009f3c:	dc36      	bgt.n	8009fac <__gethex+0x320>
 8009f3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d02a      	beq.n	8009f9c <__gethex+0x310>
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d02c      	beq.n	8009fa4 <__gethex+0x318>
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d11c      	bne.n	8009f88 <__gethex+0x2fc>
 8009f4e:	42ae      	cmp	r6, r5
 8009f50:	d11a      	bne.n	8009f88 <__gethex+0x2fc>
 8009f52:	2e01      	cmp	r6, #1
 8009f54:	d112      	bne.n	8009f7c <__gethex+0x2f0>
 8009f56:	9a04      	ldr	r2, [sp, #16]
 8009f58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f5c:	6013      	str	r3, [r2, #0]
 8009f5e:	2301      	movs	r3, #1
 8009f60:	6123      	str	r3, [r4, #16]
 8009f62:	f8c9 3000 	str.w	r3, [r9]
 8009f66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f68:	2762      	movs	r7, #98	; 0x62
 8009f6a:	601c      	str	r4, [r3, #0]
 8009f6c:	e723      	b.n	8009db6 <__gethex+0x12a>
 8009f6e:	bf00      	nop
 8009f70:	0800bebc 	.word	0x0800bebc
 8009f74:	0800bde0 	.word	0x0800bde0
 8009f78:	0800be54 	.word	0x0800be54
 8009f7c:	1e71      	subs	r1, r6, #1
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 fe5c 	bl	800ac3c <__any_on>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d1e6      	bne.n	8009f56 <__gethex+0x2ca>
 8009f88:	ee18 0a10 	vmov	r0, s16
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	f000 f9f5 	bl	800a37c <_Bfree>
 8009f92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f94:	2300      	movs	r3, #0
 8009f96:	6013      	str	r3, [r2, #0]
 8009f98:	2750      	movs	r7, #80	; 0x50
 8009f9a:	e70c      	b.n	8009db6 <__gethex+0x12a>
 8009f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1f2      	bne.n	8009f88 <__gethex+0x2fc>
 8009fa2:	e7d8      	b.n	8009f56 <__gethex+0x2ca>
 8009fa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1d5      	bne.n	8009f56 <__gethex+0x2ca>
 8009faa:	e7ed      	b.n	8009f88 <__gethex+0x2fc>
 8009fac:	1e6f      	subs	r7, r5, #1
 8009fae:	f1ba 0f00 	cmp.w	sl, #0
 8009fb2:	d131      	bne.n	800a018 <__gethex+0x38c>
 8009fb4:	b127      	cbz	r7, 8009fc0 <__gethex+0x334>
 8009fb6:	4639      	mov	r1, r7
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f000 fe3f 	bl	800ac3c <__any_on>
 8009fbe:	4682      	mov	sl, r0
 8009fc0:	117b      	asrs	r3, r7, #5
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009fc8:	f007 071f 	and.w	r7, r7, #31
 8009fcc:	fa01 f707 	lsl.w	r7, r1, r7
 8009fd0:	421f      	tst	r7, r3
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	bf18      	it	ne
 8009fd8:	f04a 0a02 	orrne.w	sl, sl, #2
 8009fdc:	1b76      	subs	r6, r6, r5
 8009fde:	f7ff fdee 	bl	8009bbe <rshift>
 8009fe2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fe6:	2702      	movs	r7, #2
 8009fe8:	f1ba 0f00 	cmp.w	sl, #0
 8009fec:	d048      	beq.n	800a080 <__gethex+0x3f4>
 8009fee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d015      	beq.n	800a022 <__gethex+0x396>
 8009ff6:	2b03      	cmp	r3, #3
 8009ff8:	d017      	beq.n	800a02a <__gethex+0x39e>
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d109      	bne.n	800a012 <__gethex+0x386>
 8009ffe:	f01a 0f02 	tst.w	sl, #2
 800a002:	d006      	beq.n	800a012 <__gethex+0x386>
 800a004:	f8d9 0000 	ldr.w	r0, [r9]
 800a008:	ea4a 0a00 	orr.w	sl, sl, r0
 800a00c:	f01a 0f01 	tst.w	sl, #1
 800a010:	d10e      	bne.n	800a030 <__gethex+0x3a4>
 800a012:	f047 0710 	orr.w	r7, r7, #16
 800a016:	e033      	b.n	800a080 <__gethex+0x3f4>
 800a018:	f04f 0a01 	mov.w	sl, #1
 800a01c:	e7d0      	b.n	8009fc0 <__gethex+0x334>
 800a01e:	2701      	movs	r7, #1
 800a020:	e7e2      	b.n	8009fe8 <__gethex+0x35c>
 800a022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a024:	f1c3 0301 	rsb	r3, r3, #1
 800a028:	9315      	str	r3, [sp, #84]	; 0x54
 800a02a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d0f0      	beq.n	800a012 <__gethex+0x386>
 800a030:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a034:	f104 0314 	add.w	r3, r4, #20
 800a038:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a03c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a040:	f04f 0c00 	mov.w	ip, #0
 800a044:	4618      	mov	r0, r3
 800a046:	f853 2b04 	ldr.w	r2, [r3], #4
 800a04a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a04e:	d01c      	beq.n	800a08a <__gethex+0x3fe>
 800a050:	3201      	adds	r2, #1
 800a052:	6002      	str	r2, [r0, #0]
 800a054:	2f02      	cmp	r7, #2
 800a056:	f104 0314 	add.w	r3, r4, #20
 800a05a:	d13f      	bne.n	800a0dc <__gethex+0x450>
 800a05c:	f8d8 2000 	ldr.w	r2, [r8]
 800a060:	3a01      	subs	r2, #1
 800a062:	42b2      	cmp	r2, r6
 800a064:	d10a      	bne.n	800a07c <__gethex+0x3f0>
 800a066:	1171      	asrs	r1, r6, #5
 800a068:	2201      	movs	r2, #1
 800a06a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a06e:	f006 061f 	and.w	r6, r6, #31
 800a072:	fa02 f606 	lsl.w	r6, r2, r6
 800a076:	421e      	tst	r6, r3
 800a078:	bf18      	it	ne
 800a07a:	4617      	movne	r7, r2
 800a07c:	f047 0720 	orr.w	r7, r7, #32
 800a080:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a082:	601c      	str	r4, [r3, #0]
 800a084:	9b04      	ldr	r3, [sp, #16]
 800a086:	601d      	str	r5, [r3, #0]
 800a088:	e695      	b.n	8009db6 <__gethex+0x12a>
 800a08a:	4299      	cmp	r1, r3
 800a08c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a090:	d8d8      	bhi.n	800a044 <__gethex+0x3b8>
 800a092:	68a3      	ldr	r3, [r4, #8]
 800a094:	459b      	cmp	fp, r3
 800a096:	db19      	blt.n	800a0cc <__gethex+0x440>
 800a098:	6861      	ldr	r1, [r4, #4]
 800a09a:	ee18 0a10 	vmov	r0, s16
 800a09e:	3101      	adds	r1, #1
 800a0a0:	f000 f92c 	bl	800a2fc <_Balloc>
 800a0a4:	4681      	mov	r9, r0
 800a0a6:	b918      	cbnz	r0, 800a0b0 <__gethex+0x424>
 800a0a8:	4b1a      	ldr	r3, [pc, #104]	; (800a114 <__gethex+0x488>)
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	2184      	movs	r1, #132	; 0x84
 800a0ae:	e6a8      	b.n	8009e02 <__gethex+0x176>
 800a0b0:	6922      	ldr	r2, [r4, #16]
 800a0b2:	3202      	adds	r2, #2
 800a0b4:	f104 010c 	add.w	r1, r4, #12
 800a0b8:	0092      	lsls	r2, r2, #2
 800a0ba:	300c      	adds	r0, #12
 800a0bc:	f000 f910 	bl	800a2e0 <memcpy>
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	ee18 0a10 	vmov	r0, s16
 800a0c6:	f000 f959 	bl	800a37c <_Bfree>
 800a0ca:	464c      	mov	r4, r9
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	1c5a      	adds	r2, r3, #1
 800a0d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0d4:	6122      	str	r2, [r4, #16]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	615a      	str	r2, [r3, #20]
 800a0da:	e7bb      	b.n	800a054 <__gethex+0x3c8>
 800a0dc:	6922      	ldr	r2, [r4, #16]
 800a0de:	455a      	cmp	r2, fp
 800a0e0:	dd0b      	ble.n	800a0fa <__gethex+0x46e>
 800a0e2:	2101      	movs	r1, #1
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	f7ff fd6a 	bl	8009bbe <rshift>
 800a0ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0ee:	3501      	adds	r5, #1
 800a0f0:	42ab      	cmp	r3, r5
 800a0f2:	f6ff aed0 	blt.w	8009e96 <__gethex+0x20a>
 800a0f6:	2701      	movs	r7, #1
 800a0f8:	e7c0      	b.n	800a07c <__gethex+0x3f0>
 800a0fa:	f016 061f 	ands.w	r6, r6, #31
 800a0fe:	d0fa      	beq.n	800a0f6 <__gethex+0x46a>
 800a100:	4453      	add	r3, sl
 800a102:	f1c6 0620 	rsb	r6, r6, #32
 800a106:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a10a:	f000 f9e9 	bl	800a4e0 <__hi0bits>
 800a10e:	42b0      	cmp	r0, r6
 800a110:	dbe7      	blt.n	800a0e2 <__gethex+0x456>
 800a112:	e7f0      	b.n	800a0f6 <__gethex+0x46a>
 800a114:	0800bde0 	.word	0x0800bde0

0800a118 <L_shift>:
 800a118:	f1c2 0208 	rsb	r2, r2, #8
 800a11c:	0092      	lsls	r2, r2, #2
 800a11e:	b570      	push	{r4, r5, r6, lr}
 800a120:	f1c2 0620 	rsb	r6, r2, #32
 800a124:	6843      	ldr	r3, [r0, #4]
 800a126:	6804      	ldr	r4, [r0, #0]
 800a128:	fa03 f506 	lsl.w	r5, r3, r6
 800a12c:	432c      	orrs	r4, r5
 800a12e:	40d3      	lsrs	r3, r2
 800a130:	6004      	str	r4, [r0, #0]
 800a132:	f840 3f04 	str.w	r3, [r0, #4]!
 800a136:	4288      	cmp	r0, r1
 800a138:	d3f4      	bcc.n	800a124 <L_shift+0xc>
 800a13a:	bd70      	pop	{r4, r5, r6, pc}

0800a13c <__match>:
 800a13c:	b530      	push	{r4, r5, lr}
 800a13e:	6803      	ldr	r3, [r0, #0]
 800a140:	3301      	adds	r3, #1
 800a142:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a146:	b914      	cbnz	r4, 800a14e <__match+0x12>
 800a148:	6003      	str	r3, [r0, #0]
 800a14a:	2001      	movs	r0, #1
 800a14c:	bd30      	pop	{r4, r5, pc}
 800a14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a152:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a156:	2d19      	cmp	r5, #25
 800a158:	bf98      	it	ls
 800a15a:	3220      	addls	r2, #32
 800a15c:	42a2      	cmp	r2, r4
 800a15e:	d0f0      	beq.n	800a142 <__match+0x6>
 800a160:	2000      	movs	r0, #0
 800a162:	e7f3      	b.n	800a14c <__match+0x10>

0800a164 <__hexnan>:
 800a164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a168:	680b      	ldr	r3, [r1, #0]
 800a16a:	115e      	asrs	r6, r3, #5
 800a16c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a170:	f013 031f 	ands.w	r3, r3, #31
 800a174:	b087      	sub	sp, #28
 800a176:	bf18      	it	ne
 800a178:	3604      	addne	r6, #4
 800a17a:	2500      	movs	r5, #0
 800a17c:	1f37      	subs	r7, r6, #4
 800a17e:	4690      	mov	r8, r2
 800a180:	6802      	ldr	r2, [r0, #0]
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	4682      	mov	sl, r0
 800a186:	f846 5c04 	str.w	r5, [r6, #-4]
 800a18a:	46b9      	mov	r9, r7
 800a18c:	463c      	mov	r4, r7
 800a18e:	9502      	str	r5, [sp, #8]
 800a190:	46ab      	mov	fp, r5
 800a192:	7851      	ldrb	r1, [r2, #1]
 800a194:	1c53      	adds	r3, r2, #1
 800a196:	9303      	str	r3, [sp, #12]
 800a198:	b341      	cbz	r1, 800a1ec <__hexnan+0x88>
 800a19a:	4608      	mov	r0, r1
 800a19c:	9205      	str	r2, [sp, #20]
 800a19e:	9104      	str	r1, [sp, #16]
 800a1a0:	f7ff fd5f 	bl	8009c62 <__hexdig_fun>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d14f      	bne.n	800a248 <__hexnan+0xe4>
 800a1a8:	9904      	ldr	r1, [sp, #16]
 800a1aa:	9a05      	ldr	r2, [sp, #20]
 800a1ac:	2920      	cmp	r1, #32
 800a1ae:	d818      	bhi.n	800a1e2 <__hexnan+0x7e>
 800a1b0:	9b02      	ldr	r3, [sp, #8]
 800a1b2:	459b      	cmp	fp, r3
 800a1b4:	dd13      	ble.n	800a1de <__hexnan+0x7a>
 800a1b6:	454c      	cmp	r4, r9
 800a1b8:	d206      	bcs.n	800a1c8 <__hexnan+0x64>
 800a1ba:	2d07      	cmp	r5, #7
 800a1bc:	dc04      	bgt.n	800a1c8 <__hexnan+0x64>
 800a1be:	462a      	mov	r2, r5
 800a1c0:	4649      	mov	r1, r9
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	f7ff ffa8 	bl	800a118 <L_shift>
 800a1c8:	4544      	cmp	r4, r8
 800a1ca:	d950      	bls.n	800a26e <__hexnan+0x10a>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f1a4 0904 	sub.w	r9, r4, #4
 800a1d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1d6:	f8cd b008 	str.w	fp, [sp, #8]
 800a1da:	464c      	mov	r4, r9
 800a1dc:	461d      	mov	r5, r3
 800a1de:	9a03      	ldr	r2, [sp, #12]
 800a1e0:	e7d7      	b.n	800a192 <__hexnan+0x2e>
 800a1e2:	2929      	cmp	r1, #41	; 0x29
 800a1e4:	d156      	bne.n	800a294 <__hexnan+0x130>
 800a1e6:	3202      	adds	r2, #2
 800a1e8:	f8ca 2000 	str.w	r2, [sl]
 800a1ec:	f1bb 0f00 	cmp.w	fp, #0
 800a1f0:	d050      	beq.n	800a294 <__hexnan+0x130>
 800a1f2:	454c      	cmp	r4, r9
 800a1f4:	d206      	bcs.n	800a204 <__hexnan+0xa0>
 800a1f6:	2d07      	cmp	r5, #7
 800a1f8:	dc04      	bgt.n	800a204 <__hexnan+0xa0>
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	4620      	mov	r0, r4
 800a200:	f7ff ff8a 	bl	800a118 <L_shift>
 800a204:	4544      	cmp	r4, r8
 800a206:	d934      	bls.n	800a272 <__hexnan+0x10e>
 800a208:	f1a8 0204 	sub.w	r2, r8, #4
 800a20c:	4623      	mov	r3, r4
 800a20e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a212:	f842 1f04 	str.w	r1, [r2, #4]!
 800a216:	429f      	cmp	r7, r3
 800a218:	d2f9      	bcs.n	800a20e <__hexnan+0xaa>
 800a21a:	1b3b      	subs	r3, r7, r4
 800a21c:	f023 0303 	bic.w	r3, r3, #3
 800a220:	3304      	adds	r3, #4
 800a222:	3401      	adds	r4, #1
 800a224:	3e03      	subs	r6, #3
 800a226:	42b4      	cmp	r4, r6
 800a228:	bf88      	it	hi
 800a22a:	2304      	movhi	r3, #4
 800a22c:	4443      	add	r3, r8
 800a22e:	2200      	movs	r2, #0
 800a230:	f843 2b04 	str.w	r2, [r3], #4
 800a234:	429f      	cmp	r7, r3
 800a236:	d2fb      	bcs.n	800a230 <__hexnan+0xcc>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	b91b      	cbnz	r3, 800a244 <__hexnan+0xe0>
 800a23c:	4547      	cmp	r7, r8
 800a23e:	d127      	bne.n	800a290 <__hexnan+0x12c>
 800a240:	2301      	movs	r3, #1
 800a242:	603b      	str	r3, [r7, #0]
 800a244:	2005      	movs	r0, #5
 800a246:	e026      	b.n	800a296 <__hexnan+0x132>
 800a248:	3501      	adds	r5, #1
 800a24a:	2d08      	cmp	r5, #8
 800a24c:	f10b 0b01 	add.w	fp, fp, #1
 800a250:	dd06      	ble.n	800a260 <__hexnan+0xfc>
 800a252:	4544      	cmp	r4, r8
 800a254:	d9c3      	bls.n	800a1de <__hexnan+0x7a>
 800a256:	2300      	movs	r3, #0
 800a258:	f844 3c04 	str.w	r3, [r4, #-4]
 800a25c:	2501      	movs	r5, #1
 800a25e:	3c04      	subs	r4, #4
 800a260:	6822      	ldr	r2, [r4, #0]
 800a262:	f000 000f 	and.w	r0, r0, #15
 800a266:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a26a:	6022      	str	r2, [r4, #0]
 800a26c:	e7b7      	b.n	800a1de <__hexnan+0x7a>
 800a26e:	2508      	movs	r5, #8
 800a270:	e7b5      	b.n	800a1de <__hexnan+0x7a>
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d0df      	beq.n	800a238 <__hexnan+0xd4>
 800a278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a27c:	f1c3 0320 	rsb	r3, r3, #32
 800a280:	fa22 f303 	lsr.w	r3, r2, r3
 800a284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a288:	401a      	ands	r2, r3
 800a28a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a28e:	e7d3      	b.n	800a238 <__hexnan+0xd4>
 800a290:	3f04      	subs	r7, #4
 800a292:	e7d1      	b.n	800a238 <__hexnan+0xd4>
 800a294:	2004      	movs	r0, #4
 800a296:	b007      	add	sp, #28
 800a298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a29c <_localeconv_r>:
 800a29c:	4800      	ldr	r0, [pc, #0]	; (800a2a0 <_localeconv_r+0x4>)
 800a29e:	4770      	bx	lr
 800a2a0:	20000164 	.word	0x20000164

0800a2a4 <__retarget_lock_init_recursive>:
 800a2a4:	4770      	bx	lr

0800a2a6 <__retarget_lock_acquire_recursive>:
 800a2a6:	4770      	bx	lr

0800a2a8 <__retarget_lock_release_recursive>:
 800a2a8:	4770      	bx	lr
	...

0800a2ac <malloc>:
 800a2ac:	4b02      	ldr	r3, [pc, #8]	; (800a2b8 <malloc+0xc>)
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	f000 bd67 	b.w	800ad84 <_malloc_r>
 800a2b6:	bf00      	nop
 800a2b8:	2000000c 	.word	0x2000000c

0800a2bc <__ascii_mbtowc>:
 800a2bc:	b082      	sub	sp, #8
 800a2be:	b901      	cbnz	r1, 800a2c2 <__ascii_mbtowc+0x6>
 800a2c0:	a901      	add	r1, sp, #4
 800a2c2:	b142      	cbz	r2, 800a2d6 <__ascii_mbtowc+0x1a>
 800a2c4:	b14b      	cbz	r3, 800a2da <__ascii_mbtowc+0x1e>
 800a2c6:	7813      	ldrb	r3, [r2, #0]
 800a2c8:	600b      	str	r3, [r1, #0]
 800a2ca:	7812      	ldrb	r2, [r2, #0]
 800a2cc:	1e10      	subs	r0, r2, #0
 800a2ce:	bf18      	it	ne
 800a2d0:	2001      	movne	r0, #1
 800a2d2:	b002      	add	sp, #8
 800a2d4:	4770      	bx	lr
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	e7fb      	b.n	800a2d2 <__ascii_mbtowc+0x16>
 800a2da:	f06f 0001 	mvn.w	r0, #1
 800a2de:	e7f8      	b.n	800a2d2 <__ascii_mbtowc+0x16>

0800a2e0 <memcpy>:
 800a2e0:	440a      	add	r2, r1
 800a2e2:	4291      	cmp	r1, r2
 800a2e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a2e8:	d100      	bne.n	800a2ec <memcpy+0xc>
 800a2ea:	4770      	bx	lr
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2f6:	4291      	cmp	r1, r2
 800a2f8:	d1f9      	bne.n	800a2ee <memcpy+0xe>
 800a2fa:	bd10      	pop	{r4, pc}

0800a2fc <_Balloc>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a300:	4604      	mov	r4, r0
 800a302:	460d      	mov	r5, r1
 800a304:	b976      	cbnz	r6, 800a324 <_Balloc+0x28>
 800a306:	2010      	movs	r0, #16
 800a308:	f7ff ffd0 	bl	800a2ac <malloc>
 800a30c:	4602      	mov	r2, r0
 800a30e:	6260      	str	r0, [r4, #36]	; 0x24
 800a310:	b920      	cbnz	r0, 800a31c <_Balloc+0x20>
 800a312:	4b18      	ldr	r3, [pc, #96]	; (800a374 <_Balloc+0x78>)
 800a314:	4818      	ldr	r0, [pc, #96]	; (800a378 <_Balloc+0x7c>)
 800a316:	2166      	movs	r1, #102	; 0x66
 800a318:	f001 f9ae 	bl	800b678 <__assert_func>
 800a31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a320:	6006      	str	r6, [r0, #0]
 800a322:	60c6      	str	r6, [r0, #12]
 800a324:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a326:	68f3      	ldr	r3, [r6, #12]
 800a328:	b183      	cbz	r3, 800a34c <_Balloc+0x50>
 800a32a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a332:	b9b8      	cbnz	r0, 800a364 <_Balloc+0x68>
 800a334:	2101      	movs	r1, #1
 800a336:	fa01 f605 	lsl.w	r6, r1, r5
 800a33a:	1d72      	adds	r2, r6, #5
 800a33c:	0092      	lsls	r2, r2, #2
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 fc9d 	bl	800ac7e <_calloc_r>
 800a344:	b160      	cbz	r0, 800a360 <_Balloc+0x64>
 800a346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a34a:	e00e      	b.n	800a36a <_Balloc+0x6e>
 800a34c:	2221      	movs	r2, #33	; 0x21
 800a34e:	2104      	movs	r1, #4
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fc94 	bl	800ac7e <_calloc_r>
 800a356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a358:	60f0      	str	r0, [r6, #12]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1e4      	bne.n	800a32a <_Balloc+0x2e>
 800a360:	2000      	movs	r0, #0
 800a362:	bd70      	pop	{r4, r5, r6, pc}
 800a364:	6802      	ldr	r2, [r0, #0]
 800a366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a36a:	2300      	movs	r3, #0
 800a36c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a370:	e7f7      	b.n	800a362 <_Balloc+0x66>
 800a372:	bf00      	nop
 800a374:	0800bd6e 	.word	0x0800bd6e
 800a378:	0800bed0 	.word	0x0800bed0

0800a37c <_Bfree>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a380:	4605      	mov	r5, r0
 800a382:	460c      	mov	r4, r1
 800a384:	b976      	cbnz	r6, 800a3a4 <_Bfree+0x28>
 800a386:	2010      	movs	r0, #16
 800a388:	f7ff ff90 	bl	800a2ac <malloc>
 800a38c:	4602      	mov	r2, r0
 800a38e:	6268      	str	r0, [r5, #36]	; 0x24
 800a390:	b920      	cbnz	r0, 800a39c <_Bfree+0x20>
 800a392:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <_Bfree+0x3c>)
 800a394:	4809      	ldr	r0, [pc, #36]	; (800a3bc <_Bfree+0x40>)
 800a396:	218a      	movs	r1, #138	; 0x8a
 800a398:	f001 f96e 	bl	800b678 <__assert_func>
 800a39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3a0:	6006      	str	r6, [r0, #0]
 800a3a2:	60c6      	str	r6, [r0, #12]
 800a3a4:	b13c      	cbz	r4, 800a3b6 <_Bfree+0x3a>
 800a3a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a3a8:	6862      	ldr	r2, [r4, #4]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3b0:	6021      	str	r1, [r4, #0]
 800a3b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	0800bd6e 	.word	0x0800bd6e
 800a3bc:	0800bed0 	.word	0x0800bed0

0800a3c0 <__multadd>:
 800a3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c4:	690d      	ldr	r5, [r1, #16]
 800a3c6:	4607      	mov	r7, r0
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	461e      	mov	r6, r3
 800a3cc:	f101 0c14 	add.w	ip, r1, #20
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	f8dc 3000 	ldr.w	r3, [ip]
 800a3d6:	b299      	uxth	r1, r3
 800a3d8:	fb02 6101 	mla	r1, r2, r1, r6
 800a3dc:	0c1e      	lsrs	r6, r3, #16
 800a3de:	0c0b      	lsrs	r3, r1, #16
 800a3e0:	fb02 3306 	mla	r3, r2, r6, r3
 800a3e4:	b289      	uxth	r1, r1
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3ec:	4285      	cmp	r5, r0
 800a3ee:	f84c 1b04 	str.w	r1, [ip], #4
 800a3f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3f6:	dcec      	bgt.n	800a3d2 <__multadd+0x12>
 800a3f8:	b30e      	cbz	r6, 800a43e <__multadd+0x7e>
 800a3fa:	68a3      	ldr	r3, [r4, #8]
 800a3fc:	42ab      	cmp	r3, r5
 800a3fe:	dc19      	bgt.n	800a434 <__multadd+0x74>
 800a400:	6861      	ldr	r1, [r4, #4]
 800a402:	4638      	mov	r0, r7
 800a404:	3101      	adds	r1, #1
 800a406:	f7ff ff79 	bl	800a2fc <_Balloc>
 800a40a:	4680      	mov	r8, r0
 800a40c:	b928      	cbnz	r0, 800a41a <__multadd+0x5a>
 800a40e:	4602      	mov	r2, r0
 800a410:	4b0c      	ldr	r3, [pc, #48]	; (800a444 <__multadd+0x84>)
 800a412:	480d      	ldr	r0, [pc, #52]	; (800a448 <__multadd+0x88>)
 800a414:	21b5      	movs	r1, #181	; 0xb5
 800a416:	f001 f92f 	bl	800b678 <__assert_func>
 800a41a:	6922      	ldr	r2, [r4, #16]
 800a41c:	3202      	adds	r2, #2
 800a41e:	f104 010c 	add.w	r1, r4, #12
 800a422:	0092      	lsls	r2, r2, #2
 800a424:	300c      	adds	r0, #12
 800a426:	f7ff ff5b 	bl	800a2e0 <memcpy>
 800a42a:	4621      	mov	r1, r4
 800a42c:	4638      	mov	r0, r7
 800a42e:	f7ff ffa5 	bl	800a37c <_Bfree>
 800a432:	4644      	mov	r4, r8
 800a434:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a438:	3501      	adds	r5, #1
 800a43a:	615e      	str	r6, [r3, #20]
 800a43c:	6125      	str	r5, [r4, #16]
 800a43e:	4620      	mov	r0, r4
 800a440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a444:	0800bde0 	.word	0x0800bde0
 800a448:	0800bed0 	.word	0x0800bed0

0800a44c <__s2b>:
 800a44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a450:	460c      	mov	r4, r1
 800a452:	4615      	mov	r5, r2
 800a454:	461f      	mov	r7, r3
 800a456:	2209      	movs	r2, #9
 800a458:	3308      	adds	r3, #8
 800a45a:	4606      	mov	r6, r0
 800a45c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a460:	2100      	movs	r1, #0
 800a462:	2201      	movs	r2, #1
 800a464:	429a      	cmp	r2, r3
 800a466:	db09      	blt.n	800a47c <__s2b+0x30>
 800a468:	4630      	mov	r0, r6
 800a46a:	f7ff ff47 	bl	800a2fc <_Balloc>
 800a46e:	b940      	cbnz	r0, 800a482 <__s2b+0x36>
 800a470:	4602      	mov	r2, r0
 800a472:	4b19      	ldr	r3, [pc, #100]	; (800a4d8 <__s2b+0x8c>)
 800a474:	4819      	ldr	r0, [pc, #100]	; (800a4dc <__s2b+0x90>)
 800a476:	21ce      	movs	r1, #206	; 0xce
 800a478:	f001 f8fe 	bl	800b678 <__assert_func>
 800a47c:	0052      	lsls	r2, r2, #1
 800a47e:	3101      	adds	r1, #1
 800a480:	e7f0      	b.n	800a464 <__s2b+0x18>
 800a482:	9b08      	ldr	r3, [sp, #32]
 800a484:	6143      	str	r3, [r0, #20]
 800a486:	2d09      	cmp	r5, #9
 800a488:	f04f 0301 	mov.w	r3, #1
 800a48c:	6103      	str	r3, [r0, #16]
 800a48e:	dd16      	ble.n	800a4be <__s2b+0x72>
 800a490:	f104 0909 	add.w	r9, r4, #9
 800a494:	46c8      	mov	r8, r9
 800a496:	442c      	add	r4, r5
 800a498:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a49c:	4601      	mov	r1, r0
 800a49e:	3b30      	subs	r3, #48	; 0x30
 800a4a0:	220a      	movs	r2, #10
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f7ff ff8c 	bl	800a3c0 <__multadd>
 800a4a8:	45a0      	cmp	r8, r4
 800a4aa:	d1f5      	bne.n	800a498 <__s2b+0x4c>
 800a4ac:	f1a5 0408 	sub.w	r4, r5, #8
 800a4b0:	444c      	add	r4, r9
 800a4b2:	1b2d      	subs	r5, r5, r4
 800a4b4:	1963      	adds	r3, r4, r5
 800a4b6:	42bb      	cmp	r3, r7
 800a4b8:	db04      	blt.n	800a4c4 <__s2b+0x78>
 800a4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4be:	340a      	adds	r4, #10
 800a4c0:	2509      	movs	r5, #9
 800a4c2:	e7f6      	b.n	800a4b2 <__s2b+0x66>
 800a4c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	3b30      	subs	r3, #48	; 0x30
 800a4cc:	220a      	movs	r2, #10
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f7ff ff76 	bl	800a3c0 <__multadd>
 800a4d4:	e7ee      	b.n	800a4b4 <__s2b+0x68>
 800a4d6:	bf00      	nop
 800a4d8:	0800bde0 	.word	0x0800bde0
 800a4dc:	0800bed0 	.word	0x0800bed0

0800a4e0 <__hi0bits>:
 800a4e0:	0c03      	lsrs	r3, r0, #16
 800a4e2:	041b      	lsls	r3, r3, #16
 800a4e4:	b9d3      	cbnz	r3, 800a51c <__hi0bits+0x3c>
 800a4e6:	0400      	lsls	r0, r0, #16
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a4ee:	bf04      	itt	eq
 800a4f0:	0200      	lsleq	r0, r0, #8
 800a4f2:	3308      	addeq	r3, #8
 800a4f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a4f8:	bf04      	itt	eq
 800a4fa:	0100      	lsleq	r0, r0, #4
 800a4fc:	3304      	addeq	r3, #4
 800a4fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a502:	bf04      	itt	eq
 800a504:	0080      	lsleq	r0, r0, #2
 800a506:	3302      	addeq	r3, #2
 800a508:	2800      	cmp	r0, #0
 800a50a:	db05      	blt.n	800a518 <__hi0bits+0x38>
 800a50c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a510:	f103 0301 	add.w	r3, r3, #1
 800a514:	bf08      	it	eq
 800a516:	2320      	moveq	r3, #32
 800a518:	4618      	mov	r0, r3
 800a51a:	4770      	bx	lr
 800a51c:	2300      	movs	r3, #0
 800a51e:	e7e4      	b.n	800a4ea <__hi0bits+0xa>

0800a520 <__lo0bits>:
 800a520:	6803      	ldr	r3, [r0, #0]
 800a522:	f013 0207 	ands.w	r2, r3, #7
 800a526:	4601      	mov	r1, r0
 800a528:	d00b      	beq.n	800a542 <__lo0bits+0x22>
 800a52a:	07da      	lsls	r2, r3, #31
 800a52c:	d423      	bmi.n	800a576 <__lo0bits+0x56>
 800a52e:	0798      	lsls	r0, r3, #30
 800a530:	bf49      	itett	mi
 800a532:	085b      	lsrmi	r3, r3, #1
 800a534:	089b      	lsrpl	r3, r3, #2
 800a536:	2001      	movmi	r0, #1
 800a538:	600b      	strmi	r3, [r1, #0]
 800a53a:	bf5c      	itt	pl
 800a53c:	600b      	strpl	r3, [r1, #0]
 800a53e:	2002      	movpl	r0, #2
 800a540:	4770      	bx	lr
 800a542:	b298      	uxth	r0, r3
 800a544:	b9a8      	cbnz	r0, 800a572 <__lo0bits+0x52>
 800a546:	0c1b      	lsrs	r3, r3, #16
 800a548:	2010      	movs	r0, #16
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	b90a      	cbnz	r2, 800a552 <__lo0bits+0x32>
 800a54e:	3008      	adds	r0, #8
 800a550:	0a1b      	lsrs	r3, r3, #8
 800a552:	071a      	lsls	r2, r3, #28
 800a554:	bf04      	itt	eq
 800a556:	091b      	lsreq	r3, r3, #4
 800a558:	3004      	addeq	r0, #4
 800a55a:	079a      	lsls	r2, r3, #30
 800a55c:	bf04      	itt	eq
 800a55e:	089b      	lsreq	r3, r3, #2
 800a560:	3002      	addeq	r0, #2
 800a562:	07da      	lsls	r2, r3, #31
 800a564:	d403      	bmi.n	800a56e <__lo0bits+0x4e>
 800a566:	085b      	lsrs	r3, r3, #1
 800a568:	f100 0001 	add.w	r0, r0, #1
 800a56c:	d005      	beq.n	800a57a <__lo0bits+0x5a>
 800a56e:	600b      	str	r3, [r1, #0]
 800a570:	4770      	bx	lr
 800a572:	4610      	mov	r0, r2
 800a574:	e7e9      	b.n	800a54a <__lo0bits+0x2a>
 800a576:	2000      	movs	r0, #0
 800a578:	4770      	bx	lr
 800a57a:	2020      	movs	r0, #32
 800a57c:	4770      	bx	lr
	...

0800a580 <__i2b>:
 800a580:	b510      	push	{r4, lr}
 800a582:	460c      	mov	r4, r1
 800a584:	2101      	movs	r1, #1
 800a586:	f7ff feb9 	bl	800a2fc <_Balloc>
 800a58a:	4602      	mov	r2, r0
 800a58c:	b928      	cbnz	r0, 800a59a <__i2b+0x1a>
 800a58e:	4b05      	ldr	r3, [pc, #20]	; (800a5a4 <__i2b+0x24>)
 800a590:	4805      	ldr	r0, [pc, #20]	; (800a5a8 <__i2b+0x28>)
 800a592:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a596:	f001 f86f 	bl	800b678 <__assert_func>
 800a59a:	2301      	movs	r3, #1
 800a59c:	6144      	str	r4, [r0, #20]
 800a59e:	6103      	str	r3, [r0, #16]
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	bf00      	nop
 800a5a4:	0800bde0 	.word	0x0800bde0
 800a5a8:	0800bed0 	.word	0x0800bed0

0800a5ac <__multiply>:
 800a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b0:	4691      	mov	r9, r2
 800a5b2:	690a      	ldr	r2, [r1, #16]
 800a5b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	bfb8      	it	lt
 800a5bc:	460b      	movlt	r3, r1
 800a5be:	460c      	mov	r4, r1
 800a5c0:	bfbc      	itt	lt
 800a5c2:	464c      	movlt	r4, r9
 800a5c4:	4699      	movlt	r9, r3
 800a5c6:	6927      	ldr	r7, [r4, #16]
 800a5c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5cc:	68a3      	ldr	r3, [r4, #8]
 800a5ce:	6861      	ldr	r1, [r4, #4]
 800a5d0:	eb07 060a 	add.w	r6, r7, sl
 800a5d4:	42b3      	cmp	r3, r6
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	bfb8      	it	lt
 800a5da:	3101      	addlt	r1, #1
 800a5dc:	f7ff fe8e 	bl	800a2fc <_Balloc>
 800a5e0:	b930      	cbnz	r0, 800a5f0 <__multiply+0x44>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	4b44      	ldr	r3, [pc, #272]	; (800a6f8 <__multiply+0x14c>)
 800a5e6:	4845      	ldr	r0, [pc, #276]	; (800a6fc <__multiply+0x150>)
 800a5e8:	f240 115d 	movw	r1, #349	; 0x15d
 800a5ec:	f001 f844 	bl	800b678 <__assert_func>
 800a5f0:	f100 0514 	add.w	r5, r0, #20
 800a5f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5f8:	462b      	mov	r3, r5
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4543      	cmp	r3, r8
 800a5fe:	d321      	bcc.n	800a644 <__multiply+0x98>
 800a600:	f104 0314 	add.w	r3, r4, #20
 800a604:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a608:	f109 0314 	add.w	r3, r9, #20
 800a60c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a610:	9202      	str	r2, [sp, #8]
 800a612:	1b3a      	subs	r2, r7, r4
 800a614:	3a15      	subs	r2, #21
 800a616:	f022 0203 	bic.w	r2, r2, #3
 800a61a:	3204      	adds	r2, #4
 800a61c:	f104 0115 	add.w	r1, r4, #21
 800a620:	428f      	cmp	r7, r1
 800a622:	bf38      	it	cc
 800a624:	2204      	movcc	r2, #4
 800a626:	9201      	str	r2, [sp, #4]
 800a628:	9a02      	ldr	r2, [sp, #8]
 800a62a:	9303      	str	r3, [sp, #12]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d80c      	bhi.n	800a64a <__multiply+0x9e>
 800a630:	2e00      	cmp	r6, #0
 800a632:	dd03      	ble.n	800a63c <__multiply+0x90>
 800a634:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d05a      	beq.n	800a6f2 <__multiply+0x146>
 800a63c:	6106      	str	r6, [r0, #16]
 800a63e:	b005      	add	sp, #20
 800a640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a644:	f843 2b04 	str.w	r2, [r3], #4
 800a648:	e7d8      	b.n	800a5fc <__multiply+0x50>
 800a64a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a64e:	f1ba 0f00 	cmp.w	sl, #0
 800a652:	d024      	beq.n	800a69e <__multiply+0xf2>
 800a654:	f104 0e14 	add.w	lr, r4, #20
 800a658:	46a9      	mov	r9, r5
 800a65a:	f04f 0c00 	mov.w	ip, #0
 800a65e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a662:	f8d9 1000 	ldr.w	r1, [r9]
 800a666:	fa1f fb82 	uxth.w	fp, r2
 800a66a:	b289      	uxth	r1, r1
 800a66c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a670:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a674:	f8d9 2000 	ldr.w	r2, [r9]
 800a678:	4461      	add	r1, ip
 800a67a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a67e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a682:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a686:	b289      	uxth	r1, r1
 800a688:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a68c:	4577      	cmp	r7, lr
 800a68e:	f849 1b04 	str.w	r1, [r9], #4
 800a692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a696:	d8e2      	bhi.n	800a65e <__multiply+0xb2>
 800a698:	9a01      	ldr	r2, [sp, #4]
 800a69a:	f845 c002 	str.w	ip, [r5, r2]
 800a69e:	9a03      	ldr	r2, [sp, #12]
 800a6a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	f1b9 0f00 	cmp.w	r9, #0
 800a6aa:	d020      	beq.n	800a6ee <__multiply+0x142>
 800a6ac:	6829      	ldr	r1, [r5, #0]
 800a6ae:	f104 0c14 	add.w	ip, r4, #20
 800a6b2:	46ae      	mov	lr, r5
 800a6b4:	f04f 0a00 	mov.w	sl, #0
 800a6b8:	f8bc b000 	ldrh.w	fp, [ip]
 800a6bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6c0:	fb09 220b 	mla	r2, r9, fp, r2
 800a6c4:	4492      	add	sl, r2
 800a6c6:	b289      	uxth	r1, r1
 800a6c8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a6cc:	f84e 1b04 	str.w	r1, [lr], #4
 800a6d0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6d4:	f8be 1000 	ldrh.w	r1, [lr]
 800a6d8:	0c12      	lsrs	r2, r2, #16
 800a6da:	fb09 1102 	mla	r1, r9, r2, r1
 800a6de:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a6e2:	4567      	cmp	r7, ip
 800a6e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6e8:	d8e6      	bhi.n	800a6b8 <__multiply+0x10c>
 800a6ea:	9a01      	ldr	r2, [sp, #4]
 800a6ec:	50a9      	str	r1, [r5, r2]
 800a6ee:	3504      	adds	r5, #4
 800a6f0:	e79a      	b.n	800a628 <__multiply+0x7c>
 800a6f2:	3e01      	subs	r6, #1
 800a6f4:	e79c      	b.n	800a630 <__multiply+0x84>
 800a6f6:	bf00      	nop
 800a6f8:	0800bde0 	.word	0x0800bde0
 800a6fc:	0800bed0 	.word	0x0800bed0

0800a700 <__pow5mult>:
 800a700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a704:	4615      	mov	r5, r2
 800a706:	f012 0203 	ands.w	r2, r2, #3
 800a70a:	4606      	mov	r6, r0
 800a70c:	460f      	mov	r7, r1
 800a70e:	d007      	beq.n	800a720 <__pow5mult+0x20>
 800a710:	4c25      	ldr	r4, [pc, #148]	; (800a7a8 <__pow5mult+0xa8>)
 800a712:	3a01      	subs	r2, #1
 800a714:	2300      	movs	r3, #0
 800a716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a71a:	f7ff fe51 	bl	800a3c0 <__multadd>
 800a71e:	4607      	mov	r7, r0
 800a720:	10ad      	asrs	r5, r5, #2
 800a722:	d03d      	beq.n	800a7a0 <__pow5mult+0xa0>
 800a724:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a726:	b97c      	cbnz	r4, 800a748 <__pow5mult+0x48>
 800a728:	2010      	movs	r0, #16
 800a72a:	f7ff fdbf 	bl	800a2ac <malloc>
 800a72e:	4602      	mov	r2, r0
 800a730:	6270      	str	r0, [r6, #36]	; 0x24
 800a732:	b928      	cbnz	r0, 800a740 <__pow5mult+0x40>
 800a734:	4b1d      	ldr	r3, [pc, #116]	; (800a7ac <__pow5mult+0xac>)
 800a736:	481e      	ldr	r0, [pc, #120]	; (800a7b0 <__pow5mult+0xb0>)
 800a738:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a73c:	f000 ff9c 	bl	800b678 <__assert_func>
 800a740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a744:	6004      	str	r4, [r0, #0]
 800a746:	60c4      	str	r4, [r0, #12]
 800a748:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a74c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a750:	b94c      	cbnz	r4, 800a766 <__pow5mult+0x66>
 800a752:	f240 2171 	movw	r1, #625	; 0x271
 800a756:	4630      	mov	r0, r6
 800a758:	f7ff ff12 	bl	800a580 <__i2b>
 800a75c:	2300      	movs	r3, #0
 800a75e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a762:	4604      	mov	r4, r0
 800a764:	6003      	str	r3, [r0, #0]
 800a766:	f04f 0900 	mov.w	r9, #0
 800a76a:	07eb      	lsls	r3, r5, #31
 800a76c:	d50a      	bpl.n	800a784 <__pow5mult+0x84>
 800a76e:	4639      	mov	r1, r7
 800a770:	4622      	mov	r2, r4
 800a772:	4630      	mov	r0, r6
 800a774:	f7ff ff1a 	bl	800a5ac <__multiply>
 800a778:	4639      	mov	r1, r7
 800a77a:	4680      	mov	r8, r0
 800a77c:	4630      	mov	r0, r6
 800a77e:	f7ff fdfd 	bl	800a37c <_Bfree>
 800a782:	4647      	mov	r7, r8
 800a784:	106d      	asrs	r5, r5, #1
 800a786:	d00b      	beq.n	800a7a0 <__pow5mult+0xa0>
 800a788:	6820      	ldr	r0, [r4, #0]
 800a78a:	b938      	cbnz	r0, 800a79c <__pow5mult+0x9c>
 800a78c:	4622      	mov	r2, r4
 800a78e:	4621      	mov	r1, r4
 800a790:	4630      	mov	r0, r6
 800a792:	f7ff ff0b 	bl	800a5ac <__multiply>
 800a796:	6020      	str	r0, [r4, #0]
 800a798:	f8c0 9000 	str.w	r9, [r0]
 800a79c:	4604      	mov	r4, r0
 800a79e:	e7e4      	b.n	800a76a <__pow5mult+0x6a>
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a6:	bf00      	nop
 800a7a8:	0800c020 	.word	0x0800c020
 800a7ac:	0800bd6e 	.word	0x0800bd6e
 800a7b0:	0800bed0 	.word	0x0800bed0

0800a7b4 <__lshift>:
 800a7b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7b8:	460c      	mov	r4, r1
 800a7ba:	6849      	ldr	r1, [r1, #4]
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7c2:	68a3      	ldr	r3, [r4, #8]
 800a7c4:	4607      	mov	r7, r0
 800a7c6:	4691      	mov	r9, r2
 800a7c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7cc:	f108 0601 	add.w	r6, r8, #1
 800a7d0:	42b3      	cmp	r3, r6
 800a7d2:	db0b      	blt.n	800a7ec <__lshift+0x38>
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	f7ff fd91 	bl	800a2fc <_Balloc>
 800a7da:	4605      	mov	r5, r0
 800a7dc:	b948      	cbnz	r0, 800a7f2 <__lshift+0x3e>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	4b2a      	ldr	r3, [pc, #168]	; (800a88c <__lshift+0xd8>)
 800a7e2:	482b      	ldr	r0, [pc, #172]	; (800a890 <__lshift+0xdc>)
 800a7e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a7e8:	f000 ff46 	bl	800b678 <__assert_func>
 800a7ec:	3101      	adds	r1, #1
 800a7ee:	005b      	lsls	r3, r3, #1
 800a7f0:	e7ee      	b.n	800a7d0 <__lshift+0x1c>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f100 0114 	add.w	r1, r0, #20
 800a7f8:	f100 0210 	add.w	r2, r0, #16
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	4553      	cmp	r3, sl
 800a800:	db37      	blt.n	800a872 <__lshift+0xbe>
 800a802:	6920      	ldr	r0, [r4, #16]
 800a804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a808:	f104 0314 	add.w	r3, r4, #20
 800a80c:	f019 091f 	ands.w	r9, r9, #31
 800a810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a814:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a818:	d02f      	beq.n	800a87a <__lshift+0xc6>
 800a81a:	f1c9 0e20 	rsb	lr, r9, #32
 800a81e:	468a      	mov	sl, r1
 800a820:	f04f 0c00 	mov.w	ip, #0
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	fa02 f209 	lsl.w	r2, r2, r9
 800a82a:	ea42 020c 	orr.w	r2, r2, ip
 800a82e:	f84a 2b04 	str.w	r2, [sl], #4
 800a832:	f853 2b04 	ldr.w	r2, [r3], #4
 800a836:	4298      	cmp	r0, r3
 800a838:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a83c:	d8f2      	bhi.n	800a824 <__lshift+0x70>
 800a83e:	1b03      	subs	r3, r0, r4
 800a840:	3b15      	subs	r3, #21
 800a842:	f023 0303 	bic.w	r3, r3, #3
 800a846:	3304      	adds	r3, #4
 800a848:	f104 0215 	add.w	r2, r4, #21
 800a84c:	4290      	cmp	r0, r2
 800a84e:	bf38      	it	cc
 800a850:	2304      	movcc	r3, #4
 800a852:	f841 c003 	str.w	ip, [r1, r3]
 800a856:	f1bc 0f00 	cmp.w	ip, #0
 800a85a:	d001      	beq.n	800a860 <__lshift+0xac>
 800a85c:	f108 0602 	add.w	r6, r8, #2
 800a860:	3e01      	subs	r6, #1
 800a862:	4638      	mov	r0, r7
 800a864:	612e      	str	r6, [r5, #16]
 800a866:	4621      	mov	r1, r4
 800a868:	f7ff fd88 	bl	800a37c <_Bfree>
 800a86c:	4628      	mov	r0, r5
 800a86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a872:	f842 0f04 	str.w	r0, [r2, #4]!
 800a876:	3301      	adds	r3, #1
 800a878:	e7c1      	b.n	800a7fe <__lshift+0x4a>
 800a87a:	3904      	subs	r1, #4
 800a87c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a880:	f841 2f04 	str.w	r2, [r1, #4]!
 800a884:	4298      	cmp	r0, r3
 800a886:	d8f9      	bhi.n	800a87c <__lshift+0xc8>
 800a888:	e7ea      	b.n	800a860 <__lshift+0xac>
 800a88a:	bf00      	nop
 800a88c:	0800bde0 	.word	0x0800bde0
 800a890:	0800bed0 	.word	0x0800bed0

0800a894 <__mcmp>:
 800a894:	b530      	push	{r4, r5, lr}
 800a896:	6902      	ldr	r2, [r0, #16]
 800a898:	690c      	ldr	r4, [r1, #16]
 800a89a:	1b12      	subs	r2, r2, r4
 800a89c:	d10e      	bne.n	800a8bc <__mcmp+0x28>
 800a89e:	f100 0314 	add.w	r3, r0, #20
 800a8a2:	3114      	adds	r1, #20
 800a8a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8b4:	42a5      	cmp	r5, r4
 800a8b6:	d003      	beq.n	800a8c0 <__mcmp+0x2c>
 800a8b8:	d305      	bcc.n	800a8c6 <__mcmp+0x32>
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	4610      	mov	r0, r2
 800a8be:	bd30      	pop	{r4, r5, pc}
 800a8c0:	4283      	cmp	r3, r0
 800a8c2:	d3f3      	bcc.n	800a8ac <__mcmp+0x18>
 800a8c4:	e7fa      	b.n	800a8bc <__mcmp+0x28>
 800a8c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8ca:	e7f7      	b.n	800a8bc <__mcmp+0x28>

0800a8cc <__mdiff>:
 800a8cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	4690      	mov	r8, r2
 800a8da:	f7ff ffdb 	bl	800a894 <__mcmp>
 800a8de:	1e05      	subs	r5, r0, #0
 800a8e0:	d110      	bne.n	800a904 <__mdiff+0x38>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	f7ff fd09 	bl	800a2fc <_Balloc>
 800a8ea:	b930      	cbnz	r0, 800a8fa <__mdiff+0x2e>
 800a8ec:	4b3a      	ldr	r3, [pc, #232]	; (800a9d8 <__mdiff+0x10c>)
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	f240 2132 	movw	r1, #562	; 0x232
 800a8f4:	4839      	ldr	r0, [pc, #228]	; (800a9dc <__mdiff+0x110>)
 800a8f6:	f000 febf 	bl	800b678 <__assert_func>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a904:	bfa4      	itt	ge
 800a906:	4643      	movge	r3, r8
 800a908:	46a0      	movge	r8, r4
 800a90a:	4630      	mov	r0, r6
 800a90c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a910:	bfa6      	itte	ge
 800a912:	461c      	movge	r4, r3
 800a914:	2500      	movge	r5, #0
 800a916:	2501      	movlt	r5, #1
 800a918:	f7ff fcf0 	bl	800a2fc <_Balloc>
 800a91c:	b920      	cbnz	r0, 800a928 <__mdiff+0x5c>
 800a91e:	4b2e      	ldr	r3, [pc, #184]	; (800a9d8 <__mdiff+0x10c>)
 800a920:	4602      	mov	r2, r0
 800a922:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a926:	e7e5      	b.n	800a8f4 <__mdiff+0x28>
 800a928:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a92c:	6926      	ldr	r6, [r4, #16]
 800a92e:	60c5      	str	r5, [r0, #12]
 800a930:	f104 0914 	add.w	r9, r4, #20
 800a934:	f108 0514 	add.w	r5, r8, #20
 800a938:	f100 0e14 	add.w	lr, r0, #20
 800a93c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a940:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a944:	f108 0210 	add.w	r2, r8, #16
 800a948:	46f2      	mov	sl, lr
 800a94a:	2100      	movs	r1, #0
 800a94c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a950:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a954:	fa1f f883 	uxth.w	r8, r3
 800a958:	fa11 f18b 	uxtah	r1, r1, fp
 800a95c:	0c1b      	lsrs	r3, r3, #16
 800a95e:	eba1 0808 	sub.w	r8, r1, r8
 800a962:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a966:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a96a:	fa1f f888 	uxth.w	r8, r8
 800a96e:	1419      	asrs	r1, r3, #16
 800a970:	454e      	cmp	r6, r9
 800a972:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a976:	f84a 3b04 	str.w	r3, [sl], #4
 800a97a:	d8e7      	bhi.n	800a94c <__mdiff+0x80>
 800a97c:	1b33      	subs	r3, r6, r4
 800a97e:	3b15      	subs	r3, #21
 800a980:	f023 0303 	bic.w	r3, r3, #3
 800a984:	3304      	adds	r3, #4
 800a986:	3415      	adds	r4, #21
 800a988:	42a6      	cmp	r6, r4
 800a98a:	bf38      	it	cc
 800a98c:	2304      	movcc	r3, #4
 800a98e:	441d      	add	r5, r3
 800a990:	4473      	add	r3, lr
 800a992:	469e      	mov	lr, r3
 800a994:	462e      	mov	r6, r5
 800a996:	4566      	cmp	r6, ip
 800a998:	d30e      	bcc.n	800a9b8 <__mdiff+0xec>
 800a99a:	f10c 0203 	add.w	r2, ip, #3
 800a99e:	1b52      	subs	r2, r2, r5
 800a9a0:	f022 0203 	bic.w	r2, r2, #3
 800a9a4:	3d03      	subs	r5, #3
 800a9a6:	45ac      	cmp	ip, r5
 800a9a8:	bf38      	it	cc
 800a9aa:	2200      	movcc	r2, #0
 800a9ac:	441a      	add	r2, r3
 800a9ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a9b2:	b17b      	cbz	r3, 800a9d4 <__mdiff+0x108>
 800a9b4:	6107      	str	r7, [r0, #16]
 800a9b6:	e7a3      	b.n	800a900 <__mdiff+0x34>
 800a9b8:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9bc:	fa11 f288 	uxtah	r2, r1, r8
 800a9c0:	1414      	asrs	r4, r2, #16
 800a9c2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9c6:	b292      	uxth	r2, r2
 800a9c8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9cc:	f84e 2b04 	str.w	r2, [lr], #4
 800a9d0:	1421      	asrs	r1, r4, #16
 800a9d2:	e7e0      	b.n	800a996 <__mdiff+0xca>
 800a9d4:	3f01      	subs	r7, #1
 800a9d6:	e7ea      	b.n	800a9ae <__mdiff+0xe2>
 800a9d8:	0800bde0 	.word	0x0800bde0
 800a9dc:	0800bed0 	.word	0x0800bed0

0800a9e0 <__ulp>:
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	ed8d 0b00 	vstr	d0, [sp]
 800a9e6:	9b01      	ldr	r3, [sp, #4]
 800a9e8:	4912      	ldr	r1, [pc, #72]	; (800aa34 <__ulp+0x54>)
 800a9ea:	4019      	ands	r1, r3
 800a9ec:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a9f0:	2900      	cmp	r1, #0
 800a9f2:	dd05      	ble.n	800aa00 <__ulp+0x20>
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	ec43 2b10 	vmov	d0, r2, r3
 800a9fc:	b002      	add	sp, #8
 800a9fe:	4770      	bx	lr
 800aa00:	4249      	negs	r1, r1
 800aa02:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aa06:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aa0a:	f04f 0200 	mov.w	r2, #0
 800aa0e:	f04f 0300 	mov.w	r3, #0
 800aa12:	da04      	bge.n	800aa1e <__ulp+0x3e>
 800aa14:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aa18:	fa41 f300 	asr.w	r3, r1, r0
 800aa1c:	e7ec      	b.n	800a9f8 <__ulp+0x18>
 800aa1e:	f1a0 0114 	sub.w	r1, r0, #20
 800aa22:	291e      	cmp	r1, #30
 800aa24:	bfda      	itte	le
 800aa26:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aa2a:	fa20 f101 	lsrle.w	r1, r0, r1
 800aa2e:	2101      	movgt	r1, #1
 800aa30:	460a      	mov	r2, r1
 800aa32:	e7e1      	b.n	800a9f8 <__ulp+0x18>
 800aa34:	7ff00000 	.word	0x7ff00000

0800aa38 <__b2d>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	6905      	ldr	r5, [r0, #16]
 800aa3c:	f100 0714 	add.w	r7, r0, #20
 800aa40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aa44:	1f2e      	subs	r6, r5, #4
 800aa46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f7ff fd48 	bl	800a4e0 <__hi0bits>
 800aa50:	f1c0 0320 	rsb	r3, r0, #32
 800aa54:	280a      	cmp	r0, #10
 800aa56:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aad4 <__b2d+0x9c>
 800aa5a:	600b      	str	r3, [r1, #0]
 800aa5c:	dc14      	bgt.n	800aa88 <__b2d+0x50>
 800aa5e:	f1c0 0e0b 	rsb	lr, r0, #11
 800aa62:	fa24 f10e 	lsr.w	r1, r4, lr
 800aa66:	42b7      	cmp	r7, r6
 800aa68:	ea41 030c 	orr.w	r3, r1, ip
 800aa6c:	bf34      	ite	cc
 800aa6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa72:	2100      	movcs	r1, #0
 800aa74:	3015      	adds	r0, #21
 800aa76:	fa04 f000 	lsl.w	r0, r4, r0
 800aa7a:	fa21 f10e 	lsr.w	r1, r1, lr
 800aa7e:	ea40 0201 	orr.w	r2, r0, r1
 800aa82:	ec43 2b10 	vmov	d0, r2, r3
 800aa86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa88:	42b7      	cmp	r7, r6
 800aa8a:	bf3a      	itte	cc
 800aa8c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aa90:	f1a5 0608 	subcc.w	r6, r5, #8
 800aa94:	2100      	movcs	r1, #0
 800aa96:	380b      	subs	r0, #11
 800aa98:	d017      	beq.n	800aaca <__b2d+0x92>
 800aa9a:	f1c0 0c20 	rsb	ip, r0, #32
 800aa9e:	fa04 f500 	lsl.w	r5, r4, r0
 800aaa2:	42be      	cmp	r6, r7
 800aaa4:	fa21 f40c 	lsr.w	r4, r1, ip
 800aaa8:	ea45 0504 	orr.w	r5, r5, r4
 800aaac:	bf8c      	ite	hi
 800aaae:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aab2:	2400      	movls	r4, #0
 800aab4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aab8:	fa01 f000 	lsl.w	r0, r1, r0
 800aabc:	fa24 f40c 	lsr.w	r4, r4, ip
 800aac0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aac4:	ea40 0204 	orr.w	r2, r0, r4
 800aac8:	e7db      	b.n	800aa82 <__b2d+0x4a>
 800aaca:	ea44 030c 	orr.w	r3, r4, ip
 800aace:	460a      	mov	r2, r1
 800aad0:	e7d7      	b.n	800aa82 <__b2d+0x4a>
 800aad2:	bf00      	nop
 800aad4:	3ff00000 	.word	0x3ff00000

0800aad8 <__d2b>:
 800aad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aadc:	4689      	mov	r9, r1
 800aade:	2101      	movs	r1, #1
 800aae0:	ec57 6b10 	vmov	r6, r7, d0
 800aae4:	4690      	mov	r8, r2
 800aae6:	f7ff fc09 	bl	800a2fc <_Balloc>
 800aaea:	4604      	mov	r4, r0
 800aaec:	b930      	cbnz	r0, 800aafc <__d2b+0x24>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	4b25      	ldr	r3, [pc, #148]	; (800ab88 <__d2b+0xb0>)
 800aaf2:	4826      	ldr	r0, [pc, #152]	; (800ab8c <__d2b+0xb4>)
 800aaf4:	f240 310a 	movw	r1, #778	; 0x30a
 800aaf8:	f000 fdbe 	bl	800b678 <__assert_func>
 800aafc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ab00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab04:	bb35      	cbnz	r5, 800ab54 <__d2b+0x7c>
 800ab06:	2e00      	cmp	r6, #0
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	d028      	beq.n	800ab5e <__d2b+0x86>
 800ab0c:	4668      	mov	r0, sp
 800ab0e:	9600      	str	r6, [sp, #0]
 800ab10:	f7ff fd06 	bl	800a520 <__lo0bits>
 800ab14:	9900      	ldr	r1, [sp, #0]
 800ab16:	b300      	cbz	r0, 800ab5a <__d2b+0x82>
 800ab18:	9a01      	ldr	r2, [sp, #4]
 800ab1a:	f1c0 0320 	rsb	r3, r0, #32
 800ab1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab22:	430b      	orrs	r3, r1
 800ab24:	40c2      	lsrs	r2, r0
 800ab26:	6163      	str	r3, [r4, #20]
 800ab28:	9201      	str	r2, [sp, #4]
 800ab2a:	9b01      	ldr	r3, [sp, #4]
 800ab2c:	61a3      	str	r3, [r4, #24]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	bf14      	ite	ne
 800ab32:	2202      	movne	r2, #2
 800ab34:	2201      	moveq	r2, #1
 800ab36:	6122      	str	r2, [r4, #16]
 800ab38:	b1d5      	cbz	r5, 800ab70 <__d2b+0x98>
 800ab3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab3e:	4405      	add	r5, r0
 800ab40:	f8c9 5000 	str.w	r5, [r9]
 800ab44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab48:	f8c8 0000 	str.w	r0, [r8]
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	b003      	add	sp, #12
 800ab50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab58:	e7d5      	b.n	800ab06 <__d2b+0x2e>
 800ab5a:	6161      	str	r1, [r4, #20]
 800ab5c:	e7e5      	b.n	800ab2a <__d2b+0x52>
 800ab5e:	a801      	add	r0, sp, #4
 800ab60:	f7ff fcde 	bl	800a520 <__lo0bits>
 800ab64:	9b01      	ldr	r3, [sp, #4]
 800ab66:	6163      	str	r3, [r4, #20]
 800ab68:	2201      	movs	r2, #1
 800ab6a:	6122      	str	r2, [r4, #16]
 800ab6c:	3020      	adds	r0, #32
 800ab6e:	e7e3      	b.n	800ab38 <__d2b+0x60>
 800ab70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab78:	f8c9 0000 	str.w	r0, [r9]
 800ab7c:	6918      	ldr	r0, [r3, #16]
 800ab7e:	f7ff fcaf 	bl	800a4e0 <__hi0bits>
 800ab82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab86:	e7df      	b.n	800ab48 <__d2b+0x70>
 800ab88:	0800bde0 	.word	0x0800bde0
 800ab8c:	0800bed0 	.word	0x0800bed0

0800ab90 <__ratio>:
 800ab90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	4688      	mov	r8, r1
 800ab96:	4669      	mov	r1, sp
 800ab98:	4681      	mov	r9, r0
 800ab9a:	f7ff ff4d 	bl	800aa38 <__b2d>
 800ab9e:	a901      	add	r1, sp, #4
 800aba0:	4640      	mov	r0, r8
 800aba2:	ec55 4b10 	vmov	r4, r5, d0
 800aba6:	f7ff ff47 	bl	800aa38 <__b2d>
 800abaa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800abae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800abb2:	eba3 0c02 	sub.w	ip, r3, r2
 800abb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abba:	1a9b      	subs	r3, r3, r2
 800abbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800abc0:	ec51 0b10 	vmov	r0, r1, d0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	bfd6      	itet	le
 800abc8:	460a      	movle	r2, r1
 800abca:	462a      	movgt	r2, r5
 800abcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abd0:	468b      	mov	fp, r1
 800abd2:	462f      	mov	r7, r5
 800abd4:	bfd4      	ite	le
 800abd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800abda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800abde:	4620      	mov	r0, r4
 800abe0:	ee10 2a10 	vmov	r2, s0
 800abe4:	465b      	mov	r3, fp
 800abe6:	4639      	mov	r1, r7
 800abe8:	f7f5 fe30 	bl	800084c <__aeabi_ddiv>
 800abec:	ec41 0b10 	vmov	d0, r0, r1
 800abf0:	b003      	add	sp, #12
 800abf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abf6 <__copybits>:
 800abf6:	3901      	subs	r1, #1
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	1149      	asrs	r1, r1, #5
 800abfc:	6914      	ldr	r4, [r2, #16]
 800abfe:	3101      	adds	r1, #1
 800ac00:	f102 0314 	add.w	r3, r2, #20
 800ac04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac08:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac0c:	1f05      	subs	r5, r0, #4
 800ac0e:	42a3      	cmp	r3, r4
 800ac10:	d30c      	bcc.n	800ac2c <__copybits+0x36>
 800ac12:	1aa3      	subs	r3, r4, r2
 800ac14:	3b11      	subs	r3, #17
 800ac16:	f023 0303 	bic.w	r3, r3, #3
 800ac1a:	3211      	adds	r2, #17
 800ac1c:	42a2      	cmp	r2, r4
 800ac1e:	bf88      	it	hi
 800ac20:	2300      	movhi	r3, #0
 800ac22:	4418      	add	r0, r3
 800ac24:	2300      	movs	r3, #0
 800ac26:	4288      	cmp	r0, r1
 800ac28:	d305      	bcc.n	800ac36 <__copybits+0x40>
 800ac2a:	bd70      	pop	{r4, r5, r6, pc}
 800ac2c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac30:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac34:	e7eb      	b.n	800ac0e <__copybits+0x18>
 800ac36:	f840 3b04 	str.w	r3, [r0], #4
 800ac3a:	e7f4      	b.n	800ac26 <__copybits+0x30>

0800ac3c <__any_on>:
 800ac3c:	f100 0214 	add.w	r2, r0, #20
 800ac40:	6900      	ldr	r0, [r0, #16]
 800ac42:	114b      	asrs	r3, r1, #5
 800ac44:	4298      	cmp	r0, r3
 800ac46:	b510      	push	{r4, lr}
 800ac48:	db11      	blt.n	800ac6e <__any_on+0x32>
 800ac4a:	dd0a      	ble.n	800ac62 <__any_on+0x26>
 800ac4c:	f011 011f 	ands.w	r1, r1, #31
 800ac50:	d007      	beq.n	800ac62 <__any_on+0x26>
 800ac52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac56:	fa24 f001 	lsr.w	r0, r4, r1
 800ac5a:	fa00 f101 	lsl.w	r1, r0, r1
 800ac5e:	428c      	cmp	r4, r1
 800ac60:	d10b      	bne.n	800ac7a <__any_on+0x3e>
 800ac62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d803      	bhi.n	800ac72 <__any_on+0x36>
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	bd10      	pop	{r4, pc}
 800ac6e:	4603      	mov	r3, r0
 800ac70:	e7f7      	b.n	800ac62 <__any_on+0x26>
 800ac72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac76:	2900      	cmp	r1, #0
 800ac78:	d0f5      	beq.n	800ac66 <__any_on+0x2a>
 800ac7a:	2001      	movs	r0, #1
 800ac7c:	e7f6      	b.n	800ac6c <__any_on+0x30>

0800ac7e <_calloc_r>:
 800ac7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac80:	fba1 2402 	umull	r2, r4, r1, r2
 800ac84:	b94c      	cbnz	r4, 800ac9a <_calloc_r+0x1c>
 800ac86:	4611      	mov	r1, r2
 800ac88:	9201      	str	r2, [sp, #4]
 800ac8a:	f000 f87b 	bl	800ad84 <_malloc_r>
 800ac8e:	9a01      	ldr	r2, [sp, #4]
 800ac90:	4605      	mov	r5, r0
 800ac92:	b930      	cbnz	r0, 800aca2 <_calloc_r+0x24>
 800ac94:	4628      	mov	r0, r5
 800ac96:	b003      	add	sp, #12
 800ac98:	bd30      	pop	{r4, r5, pc}
 800ac9a:	220c      	movs	r2, #12
 800ac9c:	6002      	str	r2, [r0, #0]
 800ac9e:	2500      	movs	r5, #0
 800aca0:	e7f8      	b.n	800ac94 <_calloc_r+0x16>
 800aca2:	4621      	mov	r1, r4
 800aca4:	f7fc fab0 	bl	8007208 <memset>
 800aca8:	e7f4      	b.n	800ac94 <_calloc_r+0x16>
	...

0800acac <_free_r>:
 800acac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acae:	2900      	cmp	r1, #0
 800acb0:	d044      	beq.n	800ad3c <_free_r+0x90>
 800acb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb6:	9001      	str	r0, [sp, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f1a1 0404 	sub.w	r4, r1, #4
 800acbe:	bfb8      	it	lt
 800acc0:	18e4      	addlt	r4, r4, r3
 800acc2:	f000 fe6d 	bl	800b9a0 <__malloc_lock>
 800acc6:	4a1e      	ldr	r2, [pc, #120]	; (800ad40 <_free_r+0x94>)
 800acc8:	9801      	ldr	r0, [sp, #4]
 800acca:	6813      	ldr	r3, [r2, #0]
 800accc:	b933      	cbnz	r3, 800acdc <_free_r+0x30>
 800acce:	6063      	str	r3, [r4, #4]
 800acd0:	6014      	str	r4, [r2, #0]
 800acd2:	b003      	add	sp, #12
 800acd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acd8:	f000 be68 	b.w	800b9ac <__malloc_unlock>
 800acdc:	42a3      	cmp	r3, r4
 800acde:	d908      	bls.n	800acf2 <_free_r+0x46>
 800ace0:	6825      	ldr	r5, [r4, #0]
 800ace2:	1961      	adds	r1, r4, r5
 800ace4:	428b      	cmp	r3, r1
 800ace6:	bf01      	itttt	eq
 800ace8:	6819      	ldreq	r1, [r3, #0]
 800acea:	685b      	ldreq	r3, [r3, #4]
 800acec:	1949      	addeq	r1, r1, r5
 800acee:	6021      	streq	r1, [r4, #0]
 800acf0:	e7ed      	b.n	800acce <_free_r+0x22>
 800acf2:	461a      	mov	r2, r3
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	b10b      	cbz	r3, 800acfc <_free_r+0x50>
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	d9fa      	bls.n	800acf2 <_free_r+0x46>
 800acfc:	6811      	ldr	r1, [r2, #0]
 800acfe:	1855      	adds	r5, r2, r1
 800ad00:	42a5      	cmp	r5, r4
 800ad02:	d10b      	bne.n	800ad1c <_free_r+0x70>
 800ad04:	6824      	ldr	r4, [r4, #0]
 800ad06:	4421      	add	r1, r4
 800ad08:	1854      	adds	r4, r2, r1
 800ad0a:	42a3      	cmp	r3, r4
 800ad0c:	6011      	str	r1, [r2, #0]
 800ad0e:	d1e0      	bne.n	800acd2 <_free_r+0x26>
 800ad10:	681c      	ldr	r4, [r3, #0]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	6053      	str	r3, [r2, #4]
 800ad16:	4421      	add	r1, r4
 800ad18:	6011      	str	r1, [r2, #0]
 800ad1a:	e7da      	b.n	800acd2 <_free_r+0x26>
 800ad1c:	d902      	bls.n	800ad24 <_free_r+0x78>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	6003      	str	r3, [r0, #0]
 800ad22:	e7d6      	b.n	800acd2 <_free_r+0x26>
 800ad24:	6825      	ldr	r5, [r4, #0]
 800ad26:	1961      	adds	r1, r4, r5
 800ad28:	428b      	cmp	r3, r1
 800ad2a:	bf04      	itt	eq
 800ad2c:	6819      	ldreq	r1, [r3, #0]
 800ad2e:	685b      	ldreq	r3, [r3, #4]
 800ad30:	6063      	str	r3, [r4, #4]
 800ad32:	bf04      	itt	eq
 800ad34:	1949      	addeq	r1, r1, r5
 800ad36:	6021      	streq	r1, [r4, #0]
 800ad38:	6054      	str	r4, [r2, #4]
 800ad3a:	e7ca      	b.n	800acd2 <_free_r+0x26>
 800ad3c:	b003      	add	sp, #12
 800ad3e:	bd30      	pop	{r4, r5, pc}
 800ad40:	200003f8 	.word	0x200003f8

0800ad44 <sbrk_aligned>:
 800ad44:	b570      	push	{r4, r5, r6, lr}
 800ad46:	4e0e      	ldr	r6, [pc, #56]	; (800ad80 <sbrk_aligned+0x3c>)
 800ad48:	460c      	mov	r4, r1
 800ad4a:	6831      	ldr	r1, [r6, #0]
 800ad4c:	4605      	mov	r5, r0
 800ad4e:	b911      	cbnz	r1, 800ad56 <sbrk_aligned+0x12>
 800ad50:	f000 fb4a 	bl	800b3e8 <_sbrk_r>
 800ad54:	6030      	str	r0, [r6, #0]
 800ad56:	4621      	mov	r1, r4
 800ad58:	4628      	mov	r0, r5
 800ad5a:	f000 fb45 	bl	800b3e8 <_sbrk_r>
 800ad5e:	1c43      	adds	r3, r0, #1
 800ad60:	d00a      	beq.n	800ad78 <sbrk_aligned+0x34>
 800ad62:	1cc4      	adds	r4, r0, #3
 800ad64:	f024 0403 	bic.w	r4, r4, #3
 800ad68:	42a0      	cmp	r0, r4
 800ad6a:	d007      	beq.n	800ad7c <sbrk_aligned+0x38>
 800ad6c:	1a21      	subs	r1, r4, r0
 800ad6e:	4628      	mov	r0, r5
 800ad70:	f000 fb3a 	bl	800b3e8 <_sbrk_r>
 800ad74:	3001      	adds	r0, #1
 800ad76:	d101      	bne.n	800ad7c <sbrk_aligned+0x38>
 800ad78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	bd70      	pop	{r4, r5, r6, pc}
 800ad80:	200003fc 	.word	0x200003fc

0800ad84 <_malloc_r>:
 800ad84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad88:	1ccd      	adds	r5, r1, #3
 800ad8a:	f025 0503 	bic.w	r5, r5, #3
 800ad8e:	3508      	adds	r5, #8
 800ad90:	2d0c      	cmp	r5, #12
 800ad92:	bf38      	it	cc
 800ad94:	250c      	movcc	r5, #12
 800ad96:	2d00      	cmp	r5, #0
 800ad98:	4607      	mov	r7, r0
 800ad9a:	db01      	blt.n	800ada0 <_malloc_r+0x1c>
 800ad9c:	42a9      	cmp	r1, r5
 800ad9e:	d905      	bls.n	800adac <_malloc_r+0x28>
 800ada0:	230c      	movs	r3, #12
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	2600      	movs	r6, #0
 800ada6:	4630      	mov	r0, r6
 800ada8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adac:	4e2e      	ldr	r6, [pc, #184]	; (800ae68 <_malloc_r+0xe4>)
 800adae:	f000 fdf7 	bl	800b9a0 <__malloc_lock>
 800adb2:	6833      	ldr	r3, [r6, #0]
 800adb4:	461c      	mov	r4, r3
 800adb6:	bb34      	cbnz	r4, 800ae06 <_malloc_r+0x82>
 800adb8:	4629      	mov	r1, r5
 800adba:	4638      	mov	r0, r7
 800adbc:	f7ff ffc2 	bl	800ad44 <sbrk_aligned>
 800adc0:	1c43      	adds	r3, r0, #1
 800adc2:	4604      	mov	r4, r0
 800adc4:	d14d      	bne.n	800ae62 <_malloc_r+0xde>
 800adc6:	6834      	ldr	r4, [r6, #0]
 800adc8:	4626      	mov	r6, r4
 800adca:	2e00      	cmp	r6, #0
 800adcc:	d140      	bne.n	800ae50 <_malloc_r+0xcc>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	4631      	mov	r1, r6
 800add2:	4638      	mov	r0, r7
 800add4:	eb04 0803 	add.w	r8, r4, r3
 800add8:	f000 fb06 	bl	800b3e8 <_sbrk_r>
 800addc:	4580      	cmp	r8, r0
 800adde:	d13a      	bne.n	800ae56 <_malloc_r+0xd2>
 800ade0:	6821      	ldr	r1, [r4, #0]
 800ade2:	3503      	adds	r5, #3
 800ade4:	1a6d      	subs	r5, r5, r1
 800ade6:	f025 0503 	bic.w	r5, r5, #3
 800adea:	3508      	adds	r5, #8
 800adec:	2d0c      	cmp	r5, #12
 800adee:	bf38      	it	cc
 800adf0:	250c      	movcc	r5, #12
 800adf2:	4629      	mov	r1, r5
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7ff ffa5 	bl	800ad44 <sbrk_aligned>
 800adfa:	3001      	adds	r0, #1
 800adfc:	d02b      	beq.n	800ae56 <_malloc_r+0xd2>
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	442b      	add	r3, r5
 800ae02:	6023      	str	r3, [r4, #0]
 800ae04:	e00e      	b.n	800ae24 <_malloc_r+0xa0>
 800ae06:	6822      	ldr	r2, [r4, #0]
 800ae08:	1b52      	subs	r2, r2, r5
 800ae0a:	d41e      	bmi.n	800ae4a <_malloc_r+0xc6>
 800ae0c:	2a0b      	cmp	r2, #11
 800ae0e:	d916      	bls.n	800ae3e <_malloc_r+0xba>
 800ae10:	1961      	adds	r1, r4, r5
 800ae12:	42a3      	cmp	r3, r4
 800ae14:	6025      	str	r5, [r4, #0]
 800ae16:	bf18      	it	ne
 800ae18:	6059      	strne	r1, [r3, #4]
 800ae1a:	6863      	ldr	r3, [r4, #4]
 800ae1c:	bf08      	it	eq
 800ae1e:	6031      	streq	r1, [r6, #0]
 800ae20:	5162      	str	r2, [r4, r5]
 800ae22:	604b      	str	r3, [r1, #4]
 800ae24:	4638      	mov	r0, r7
 800ae26:	f104 060b 	add.w	r6, r4, #11
 800ae2a:	f000 fdbf 	bl	800b9ac <__malloc_unlock>
 800ae2e:	f026 0607 	bic.w	r6, r6, #7
 800ae32:	1d23      	adds	r3, r4, #4
 800ae34:	1af2      	subs	r2, r6, r3
 800ae36:	d0b6      	beq.n	800ada6 <_malloc_r+0x22>
 800ae38:	1b9b      	subs	r3, r3, r6
 800ae3a:	50a3      	str	r3, [r4, r2]
 800ae3c:	e7b3      	b.n	800ada6 <_malloc_r+0x22>
 800ae3e:	6862      	ldr	r2, [r4, #4]
 800ae40:	42a3      	cmp	r3, r4
 800ae42:	bf0c      	ite	eq
 800ae44:	6032      	streq	r2, [r6, #0]
 800ae46:	605a      	strne	r2, [r3, #4]
 800ae48:	e7ec      	b.n	800ae24 <_malloc_r+0xa0>
 800ae4a:	4623      	mov	r3, r4
 800ae4c:	6864      	ldr	r4, [r4, #4]
 800ae4e:	e7b2      	b.n	800adb6 <_malloc_r+0x32>
 800ae50:	4634      	mov	r4, r6
 800ae52:	6876      	ldr	r6, [r6, #4]
 800ae54:	e7b9      	b.n	800adca <_malloc_r+0x46>
 800ae56:	230c      	movs	r3, #12
 800ae58:	603b      	str	r3, [r7, #0]
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	f000 fda6 	bl	800b9ac <__malloc_unlock>
 800ae60:	e7a1      	b.n	800ada6 <_malloc_r+0x22>
 800ae62:	6025      	str	r5, [r4, #0]
 800ae64:	e7de      	b.n	800ae24 <_malloc_r+0xa0>
 800ae66:	bf00      	nop
 800ae68:	200003f8 	.word	0x200003f8

0800ae6c <__ssputs_r>:
 800ae6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae70:	688e      	ldr	r6, [r1, #8]
 800ae72:	429e      	cmp	r6, r3
 800ae74:	4682      	mov	sl, r0
 800ae76:	460c      	mov	r4, r1
 800ae78:	4690      	mov	r8, r2
 800ae7a:	461f      	mov	r7, r3
 800ae7c:	d838      	bhi.n	800aef0 <__ssputs_r+0x84>
 800ae7e:	898a      	ldrh	r2, [r1, #12]
 800ae80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae84:	d032      	beq.n	800aeec <__ssputs_r+0x80>
 800ae86:	6825      	ldr	r5, [r4, #0]
 800ae88:	6909      	ldr	r1, [r1, #16]
 800ae8a:	eba5 0901 	sub.w	r9, r5, r1
 800ae8e:	6965      	ldr	r5, [r4, #20]
 800ae90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae98:	3301      	adds	r3, #1
 800ae9a:	444b      	add	r3, r9
 800ae9c:	106d      	asrs	r5, r5, #1
 800ae9e:	429d      	cmp	r5, r3
 800aea0:	bf38      	it	cc
 800aea2:	461d      	movcc	r5, r3
 800aea4:	0553      	lsls	r3, r2, #21
 800aea6:	d531      	bpl.n	800af0c <__ssputs_r+0xa0>
 800aea8:	4629      	mov	r1, r5
 800aeaa:	f7ff ff6b 	bl	800ad84 <_malloc_r>
 800aeae:	4606      	mov	r6, r0
 800aeb0:	b950      	cbnz	r0, 800aec8 <__ssputs_r+0x5c>
 800aeb2:	230c      	movs	r3, #12
 800aeb4:	f8ca 3000 	str.w	r3, [sl]
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aec8:	6921      	ldr	r1, [r4, #16]
 800aeca:	464a      	mov	r2, r9
 800aecc:	f7ff fa08 	bl	800a2e0 <memcpy>
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	6126      	str	r6, [r4, #16]
 800aede:	6165      	str	r5, [r4, #20]
 800aee0:	444e      	add	r6, r9
 800aee2:	eba5 0509 	sub.w	r5, r5, r9
 800aee6:	6026      	str	r6, [r4, #0]
 800aee8:	60a5      	str	r5, [r4, #8]
 800aeea:	463e      	mov	r6, r7
 800aeec:	42be      	cmp	r6, r7
 800aeee:	d900      	bls.n	800aef2 <__ssputs_r+0x86>
 800aef0:	463e      	mov	r6, r7
 800aef2:	6820      	ldr	r0, [r4, #0]
 800aef4:	4632      	mov	r2, r6
 800aef6:	4641      	mov	r1, r8
 800aef8:	f000 fd38 	bl	800b96c <memmove>
 800aefc:	68a3      	ldr	r3, [r4, #8]
 800aefe:	1b9b      	subs	r3, r3, r6
 800af00:	60a3      	str	r3, [r4, #8]
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	4433      	add	r3, r6
 800af06:	6023      	str	r3, [r4, #0]
 800af08:	2000      	movs	r0, #0
 800af0a:	e7db      	b.n	800aec4 <__ssputs_r+0x58>
 800af0c:	462a      	mov	r2, r5
 800af0e:	f000 fd53 	bl	800b9b8 <_realloc_r>
 800af12:	4606      	mov	r6, r0
 800af14:	2800      	cmp	r0, #0
 800af16:	d1e1      	bne.n	800aedc <__ssputs_r+0x70>
 800af18:	6921      	ldr	r1, [r4, #16]
 800af1a:	4650      	mov	r0, sl
 800af1c:	f7ff fec6 	bl	800acac <_free_r>
 800af20:	e7c7      	b.n	800aeb2 <__ssputs_r+0x46>
	...

0800af24 <_svfiprintf_r>:
 800af24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af28:	4698      	mov	r8, r3
 800af2a:	898b      	ldrh	r3, [r1, #12]
 800af2c:	061b      	lsls	r3, r3, #24
 800af2e:	b09d      	sub	sp, #116	; 0x74
 800af30:	4607      	mov	r7, r0
 800af32:	460d      	mov	r5, r1
 800af34:	4614      	mov	r4, r2
 800af36:	d50e      	bpl.n	800af56 <_svfiprintf_r+0x32>
 800af38:	690b      	ldr	r3, [r1, #16]
 800af3a:	b963      	cbnz	r3, 800af56 <_svfiprintf_r+0x32>
 800af3c:	2140      	movs	r1, #64	; 0x40
 800af3e:	f7ff ff21 	bl	800ad84 <_malloc_r>
 800af42:	6028      	str	r0, [r5, #0]
 800af44:	6128      	str	r0, [r5, #16]
 800af46:	b920      	cbnz	r0, 800af52 <_svfiprintf_r+0x2e>
 800af48:	230c      	movs	r3, #12
 800af4a:	603b      	str	r3, [r7, #0]
 800af4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af50:	e0d1      	b.n	800b0f6 <_svfiprintf_r+0x1d2>
 800af52:	2340      	movs	r3, #64	; 0x40
 800af54:	616b      	str	r3, [r5, #20]
 800af56:	2300      	movs	r3, #0
 800af58:	9309      	str	r3, [sp, #36]	; 0x24
 800af5a:	2320      	movs	r3, #32
 800af5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af60:	f8cd 800c 	str.w	r8, [sp, #12]
 800af64:	2330      	movs	r3, #48	; 0x30
 800af66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b110 <_svfiprintf_r+0x1ec>
 800af6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af6e:	f04f 0901 	mov.w	r9, #1
 800af72:	4623      	mov	r3, r4
 800af74:	469a      	mov	sl, r3
 800af76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af7a:	b10a      	cbz	r2, 800af80 <_svfiprintf_r+0x5c>
 800af7c:	2a25      	cmp	r2, #37	; 0x25
 800af7e:	d1f9      	bne.n	800af74 <_svfiprintf_r+0x50>
 800af80:	ebba 0b04 	subs.w	fp, sl, r4
 800af84:	d00b      	beq.n	800af9e <_svfiprintf_r+0x7a>
 800af86:	465b      	mov	r3, fp
 800af88:	4622      	mov	r2, r4
 800af8a:	4629      	mov	r1, r5
 800af8c:	4638      	mov	r0, r7
 800af8e:	f7ff ff6d 	bl	800ae6c <__ssputs_r>
 800af92:	3001      	adds	r0, #1
 800af94:	f000 80aa 	beq.w	800b0ec <_svfiprintf_r+0x1c8>
 800af98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af9a:	445a      	add	r2, fp
 800af9c:	9209      	str	r2, [sp, #36]	; 0x24
 800af9e:	f89a 3000 	ldrb.w	r3, [sl]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 80a2 	beq.w	800b0ec <_svfiprintf_r+0x1c8>
 800afa8:	2300      	movs	r3, #0
 800afaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afb2:	f10a 0a01 	add.w	sl, sl, #1
 800afb6:	9304      	str	r3, [sp, #16]
 800afb8:	9307      	str	r3, [sp, #28]
 800afba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afbe:	931a      	str	r3, [sp, #104]	; 0x68
 800afc0:	4654      	mov	r4, sl
 800afc2:	2205      	movs	r2, #5
 800afc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc8:	4851      	ldr	r0, [pc, #324]	; (800b110 <_svfiprintf_r+0x1ec>)
 800afca:	f7f5 f909 	bl	80001e0 <memchr>
 800afce:	9a04      	ldr	r2, [sp, #16]
 800afd0:	b9d8      	cbnz	r0, 800b00a <_svfiprintf_r+0xe6>
 800afd2:	06d0      	lsls	r0, r2, #27
 800afd4:	bf44      	itt	mi
 800afd6:	2320      	movmi	r3, #32
 800afd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afdc:	0711      	lsls	r1, r2, #28
 800afde:	bf44      	itt	mi
 800afe0:	232b      	movmi	r3, #43	; 0x2b
 800afe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afe6:	f89a 3000 	ldrb.w	r3, [sl]
 800afea:	2b2a      	cmp	r3, #42	; 0x2a
 800afec:	d015      	beq.n	800b01a <_svfiprintf_r+0xf6>
 800afee:	9a07      	ldr	r2, [sp, #28]
 800aff0:	4654      	mov	r4, sl
 800aff2:	2000      	movs	r0, #0
 800aff4:	f04f 0c0a 	mov.w	ip, #10
 800aff8:	4621      	mov	r1, r4
 800affa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800affe:	3b30      	subs	r3, #48	; 0x30
 800b000:	2b09      	cmp	r3, #9
 800b002:	d94e      	bls.n	800b0a2 <_svfiprintf_r+0x17e>
 800b004:	b1b0      	cbz	r0, 800b034 <_svfiprintf_r+0x110>
 800b006:	9207      	str	r2, [sp, #28]
 800b008:	e014      	b.n	800b034 <_svfiprintf_r+0x110>
 800b00a:	eba0 0308 	sub.w	r3, r0, r8
 800b00e:	fa09 f303 	lsl.w	r3, r9, r3
 800b012:	4313      	orrs	r3, r2
 800b014:	9304      	str	r3, [sp, #16]
 800b016:	46a2      	mov	sl, r4
 800b018:	e7d2      	b.n	800afc0 <_svfiprintf_r+0x9c>
 800b01a:	9b03      	ldr	r3, [sp, #12]
 800b01c:	1d19      	adds	r1, r3, #4
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	9103      	str	r1, [sp, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	bfbb      	ittet	lt
 800b026:	425b      	neglt	r3, r3
 800b028:	f042 0202 	orrlt.w	r2, r2, #2
 800b02c:	9307      	strge	r3, [sp, #28]
 800b02e:	9307      	strlt	r3, [sp, #28]
 800b030:	bfb8      	it	lt
 800b032:	9204      	strlt	r2, [sp, #16]
 800b034:	7823      	ldrb	r3, [r4, #0]
 800b036:	2b2e      	cmp	r3, #46	; 0x2e
 800b038:	d10c      	bne.n	800b054 <_svfiprintf_r+0x130>
 800b03a:	7863      	ldrb	r3, [r4, #1]
 800b03c:	2b2a      	cmp	r3, #42	; 0x2a
 800b03e:	d135      	bne.n	800b0ac <_svfiprintf_r+0x188>
 800b040:	9b03      	ldr	r3, [sp, #12]
 800b042:	1d1a      	adds	r2, r3, #4
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	9203      	str	r2, [sp, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	bfb8      	it	lt
 800b04c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b050:	3402      	adds	r4, #2
 800b052:	9305      	str	r3, [sp, #20]
 800b054:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b120 <_svfiprintf_r+0x1fc>
 800b058:	7821      	ldrb	r1, [r4, #0]
 800b05a:	2203      	movs	r2, #3
 800b05c:	4650      	mov	r0, sl
 800b05e:	f7f5 f8bf 	bl	80001e0 <memchr>
 800b062:	b140      	cbz	r0, 800b076 <_svfiprintf_r+0x152>
 800b064:	2340      	movs	r3, #64	; 0x40
 800b066:	eba0 000a 	sub.w	r0, r0, sl
 800b06a:	fa03 f000 	lsl.w	r0, r3, r0
 800b06e:	9b04      	ldr	r3, [sp, #16]
 800b070:	4303      	orrs	r3, r0
 800b072:	3401      	adds	r4, #1
 800b074:	9304      	str	r3, [sp, #16]
 800b076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b07a:	4826      	ldr	r0, [pc, #152]	; (800b114 <_svfiprintf_r+0x1f0>)
 800b07c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b080:	2206      	movs	r2, #6
 800b082:	f7f5 f8ad 	bl	80001e0 <memchr>
 800b086:	2800      	cmp	r0, #0
 800b088:	d038      	beq.n	800b0fc <_svfiprintf_r+0x1d8>
 800b08a:	4b23      	ldr	r3, [pc, #140]	; (800b118 <_svfiprintf_r+0x1f4>)
 800b08c:	bb1b      	cbnz	r3, 800b0d6 <_svfiprintf_r+0x1b2>
 800b08e:	9b03      	ldr	r3, [sp, #12]
 800b090:	3307      	adds	r3, #7
 800b092:	f023 0307 	bic.w	r3, r3, #7
 800b096:	3308      	adds	r3, #8
 800b098:	9303      	str	r3, [sp, #12]
 800b09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b09c:	4433      	add	r3, r6
 800b09e:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a0:	e767      	b.n	800af72 <_svfiprintf_r+0x4e>
 800b0a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	2001      	movs	r0, #1
 800b0aa:	e7a5      	b.n	800aff8 <_svfiprintf_r+0xd4>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	3401      	adds	r4, #1
 800b0b0:	9305      	str	r3, [sp, #20]
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	f04f 0c0a 	mov.w	ip, #10
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0be:	3a30      	subs	r2, #48	; 0x30
 800b0c0:	2a09      	cmp	r2, #9
 800b0c2:	d903      	bls.n	800b0cc <_svfiprintf_r+0x1a8>
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d0c5      	beq.n	800b054 <_svfiprintf_r+0x130>
 800b0c8:	9105      	str	r1, [sp, #20]
 800b0ca:	e7c3      	b.n	800b054 <_svfiprintf_r+0x130>
 800b0cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e7f0      	b.n	800b0b8 <_svfiprintf_r+0x194>
 800b0d6:	ab03      	add	r3, sp, #12
 800b0d8:	9300      	str	r3, [sp, #0]
 800b0da:	462a      	mov	r2, r5
 800b0dc:	4b0f      	ldr	r3, [pc, #60]	; (800b11c <_svfiprintf_r+0x1f8>)
 800b0de:	a904      	add	r1, sp, #16
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f7fc f939 	bl	8007358 <_printf_float>
 800b0e6:	1c42      	adds	r2, r0, #1
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	d1d6      	bne.n	800b09a <_svfiprintf_r+0x176>
 800b0ec:	89ab      	ldrh	r3, [r5, #12]
 800b0ee:	065b      	lsls	r3, r3, #25
 800b0f0:	f53f af2c 	bmi.w	800af4c <_svfiprintf_r+0x28>
 800b0f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0f6:	b01d      	add	sp, #116	; 0x74
 800b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fc:	ab03      	add	r3, sp, #12
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	462a      	mov	r2, r5
 800b102:	4b06      	ldr	r3, [pc, #24]	; (800b11c <_svfiprintf_r+0x1f8>)
 800b104:	a904      	add	r1, sp, #16
 800b106:	4638      	mov	r0, r7
 800b108:	f7fc fbca 	bl	80078a0 <_printf_i>
 800b10c:	e7eb      	b.n	800b0e6 <_svfiprintf_r+0x1c2>
 800b10e:	bf00      	nop
 800b110:	0800c02c 	.word	0x0800c02c
 800b114:	0800c036 	.word	0x0800c036
 800b118:	08007359 	.word	0x08007359
 800b11c:	0800ae6d 	.word	0x0800ae6d
 800b120:	0800c032 	.word	0x0800c032

0800b124 <__sfputc_r>:
 800b124:	6893      	ldr	r3, [r2, #8]
 800b126:	3b01      	subs	r3, #1
 800b128:	2b00      	cmp	r3, #0
 800b12a:	b410      	push	{r4}
 800b12c:	6093      	str	r3, [r2, #8]
 800b12e:	da08      	bge.n	800b142 <__sfputc_r+0x1e>
 800b130:	6994      	ldr	r4, [r2, #24]
 800b132:	42a3      	cmp	r3, r4
 800b134:	db01      	blt.n	800b13a <__sfputc_r+0x16>
 800b136:	290a      	cmp	r1, #10
 800b138:	d103      	bne.n	800b142 <__sfputc_r+0x1e>
 800b13a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b13e:	f000 b9bb 	b.w	800b4b8 <__swbuf_r>
 800b142:	6813      	ldr	r3, [r2, #0]
 800b144:	1c58      	adds	r0, r3, #1
 800b146:	6010      	str	r0, [r2, #0]
 800b148:	7019      	strb	r1, [r3, #0]
 800b14a:	4608      	mov	r0, r1
 800b14c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <__sfputs_r>:
 800b152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b154:	4606      	mov	r6, r0
 800b156:	460f      	mov	r7, r1
 800b158:	4614      	mov	r4, r2
 800b15a:	18d5      	adds	r5, r2, r3
 800b15c:	42ac      	cmp	r4, r5
 800b15e:	d101      	bne.n	800b164 <__sfputs_r+0x12>
 800b160:	2000      	movs	r0, #0
 800b162:	e007      	b.n	800b174 <__sfputs_r+0x22>
 800b164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b168:	463a      	mov	r2, r7
 800b16a:	4630      	mov	r0, r6
 800b16c:	f7ff ffda 	bl	800b124 <__sfputc_r>
 800b170:	1c43      	adds	r3, r0, #1
 800b172:	d1f3      	bne.n	800b15c <__sfputs_r+0xa>
 800b174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b178 <_vfiprintf_r>:
 800b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	460d      	mov	r5, r1
 800b17e:	b09d      	sub	sp, #116	; 0x74
 800b180:	4614      	mov	r4, r2
 800b182:	4698      	mov	r8, r3
 800b184:	4606      	mov	r6, r0
 800b186:	b118      	cbz	r0, 800b190 <_vfiprintf_r+0x18>
 800b188:	6983      	ldr	r3, [r0, #24]
 800b18a:	b90b      	cbnz	r3, 800b190 <_vfiprintf_r+0x18>
 800b18c:	f7fe fc7a 	bl	8009a84 <__sinit>
 800b190:	4b89      	ldr	r3, [pc, #548]	; (800b3b8 <_vfiprintf_r+0x240>)
 800b192:	429d      	cmp	r5, r3
 800b194:	d11b      	bne.n	800b1ce <_vfiprintf_r+0x56>
 800b196:	6875      	ldr	r5, [r6, #4]
 800b198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b19a:	07d9      	lsls	r1, r3, #31
 800b19c:	d405      	bmi.n	800b1aa <_vfiprintf_r+0x32>
 800b19e:	89ab      	ldrh	r3, [r5, #12]
 800b1a0:	059a      	lsls	r2, r3, #22
 800b1a2:	d402      	bmi.n	800b1aa <_vfiprintf_r+0x32>
 800b1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1a6:	f7ff f87e 	bl	800a2a6 <__retarget_lock_acquire_recursive>
 800b1aa:	89ab      	ldrh	r3, [r5, #12]
 800b1ac:	071b      	lsls	r3, r3, #28
 800b1ae:	d501      	bpl.n	800b1b4 <_vfiprintf_r+0x3c>
 800b1b0:	692b      	ldr	r3, [r5, #16]
 800b1b2:	b9eb      	cbnz	r3, 800b1f0 <_vfiprintf_r+0x78>
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f000 f9f0 	bl	800b59c <__swsetup_r>
 800b1bc:	b1c0      	cbz	r0, 800b1f0 <_vfiprintf_r+0x78>
 800b1be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1c0:	07dc      	lsls	r4, r3, #31
 800b1c2:	d50e      	bpl.n	800b1e2 <_vfiprintf_r+0x6a>
 800b1c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1c8:	b01d      	add	sp, #116	; 0x74
 800b1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ce:	4b7b      	ldr	r3, [pc, #492]	; (800b3bc <_vfiprintf_r+0x244>)
 800b1d0:	429d      	cmp	r5, r3
 800b1d2:	d101      	bne.n	800b1d8 <_vfiprintf_r+0x60>
 800b1d4:	68b5      	ldr	r5, [r6, #8]
 800b1d6:	e7df      	b.n	800b198 <_vfiprintf_r+0x20>
 800b1d8:	4b79      	ldr	r3, [pc, #484]	; (800b3c0 <_vfiprintf_r+0x248>)
 800b1da:	429d      	cmp	r5, r3
 800b1dc:	bf08      	it	eq
 800b1de:	68f5      	ldreq	r5, [r6, #12]
 800b1e0:	e7da      	b.n	800b198 <_vfiprintf_r+0x20>
 800b1e2:	89ab      	ldrh	r3, [r5, #12]
 800b1e4:	0598      	lsls	r0, r3, #22
 800b1e6:	d4ed      	bmi.n	800b1c4 <_vfiprintf_r+0x4c>
 800b1e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ea:	f7ff f85d 	bl	800a2a8 <__retarget_lock_release_recursive>
 800b1ee:	e7e9      	b.n	800b1c4 <_vfiprintf_r+0x4c>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1f4:	2320      	movs	r3, #32
 800b1f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1fe:	2330      	movs	r3, #48	; 0x30
 800b200:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3c4 <_vfiprintf_r+0x24c>
 800b204:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b208:	f04f 0901 	mov.w	r9, #1
 800b20c:	4623      	mov	r3, r4
 800b20e:	469a      	mov	sl, r3
 800b210:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b214:	b10a      	cbz	r2, 800b21a <_vfiprintf_r+0xa2>
 800b216:	2a25      	cmp	r2, #37	; 0x25
 800b218:	d1f9      	bne.n	800b20e <_vfiprintf_r+0x96>
 800b21a:	ebba 0b04 	subs.w	fp, sl, r4
 800b21e:	d00b      	beq.n	800b238 <_vfiprintf_r+0xc0>
 800b220:	465b      	mov	r3, fp
 800b222:	4622      	mov	r2, r4
 800b224:	4629      	mov	r1, r5
 800b226:	4630      	mov	r0, r6
 800b228:	f7ff ff93 	bl	800b152 <__sfputs_r>
 800b22c:	3001      	adds	r0, #1
 800b22e:	f000 80aa 	beq.w	800b386 <_vfiprintf_r+0x20e>
 800b232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b234:	445a      	add	r2, fp
 800b236:	9209      	str	r2, [sp, #36]	; 0x24
 800b238:	f89a 3000 	ldrb.w	r3, [sl]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 80a2 	beq.w	800b386 <_vfiprintf_r+0x20e>
 800b242:	2300      	movs	r3, #0
 800b244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b248:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b24c:	f10a 0a01 	add.w	sl, sl, #1
 800b250:	9304      	str	r3, [sp, #16]
 800b252:	9307      	str	r3, [sp, #28]
 800b254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b258:	931a      	str	r3, [sp, #104]	; 0x68
 800b25a:	4654      	mov	r4, sl
 800b25c:	2205      	movs	r2, #5
 800b25e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b262:	4858      	ldr	r0, [pc, #352]	; (800b3c4 <_vfiprintf_r+0x24c>)
 800b264:	f7f4 ffbc 	bl	80001e0 <memchr>
 800b268:	9a04      	ldr	r2, [sp, #16]
 800b26a:	b9d8      	cbnz	r0, 800b2a4 <_vfiprintf_r+0x12c>
 800b26c:	06d1      	lsls	r1, r2, #27
 800b26e:	bf44      	itt	mi
 800b270:	2320      	movmi	r3, #32
 800b272:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b276:	0713      	lsls	r3, r2, #28
 800b278:	bf44      	itt	mi
 800b27a:	232b      	movmi	r3, #43	; 0x2b
 800b27c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b280:	f89a 3000 	ldrb.w	r3, [sl]
 800b284:	2b2a      	cmp	r3, #42	; 0x2a
 800b286:	d015      	beq.n	800b2b4 <_vfiprintf_r+0x13c>
 800b288:	9a07      	ldr	r2, [sp, #28]
 800b28a:	4654      	mov	r4, sl
 800b28c:	2000      	movs	r0, #0
 800b28e:	f04f 0c0a 	mov.w	ip, #10
 800b292:	4621      	mov	r1, r4
 800b294:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b298:	3b30      	subs	r3, #48	; 0x30
 800b29a:	2b09      	cmp	r3, #9
 800b29c:	d94e      	bls.n	800b33c <_vfiprintf_r+0x1c4>
 800b29e:	b1b0      	cbz	r0, 800b2ce <_vfiprintf_r+0x156>
 800b2a0:	9207      	str	r2, [sp, #28]
 800b2a2:	e014      	b.n	800b2ce <_vfiprintf_r+0x156>
 800b2a4:	eba0 0308 	sub.w	r3, r0, r8
 800b2a8:	fa09 f303 	lsl.w	r3, r9, r3
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	9304      	str	r3, [sp, #16]
 800b2b0:	46a2      	mov	sl, r4
 800b2b2:	e7d2      	b.n	800b25a <_vfiprintf_r+0xe2>
 800b2b4:	9b03      	ldr	r3, [sp, #12]
 800b2b6:	1d19      	adds	r1, r3, #4
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	9103      	str	r1, [sp, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bfbb      	ittet	lt
 800b2c0:	425b      	neglt	r3, r3
 800b2c2:	f042 0202 	orrlt.w	r2, r2, #2
 800b2c6:	9307      	strge	r3, [sp, #28]
 800b2c8:	9307      	strlt	r3, [sp, #28]
 800b2ca:	bfb8      	it	lt
 800b2cc:	9204      	strlt	r2, [sp, #16]
 800b2ce:	7823      	ldrb	r3, [r4, #0]
 800b2d0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2d2:	d10c      	bne.n	800b2ee <_vfiprintf_r+0x176>
 800b2d4:	7863      	ldrb	r3, [r4, #1]
 800b2d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2d8:	d135      	bne.n	800b346 <_vfiprintf_r+0x1ce>
 800b2da:	9b03      	ldr	r3, [sp, #12]
 800b2dc:	1d1a      	adds	r2, r3, #4
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	9203      	str	r2, [sp, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bfb8      	it	lt
 800b2e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b2ea:	3402      	adds	r4, #2
 800b2ec:	9305      	str	r3, [sp, #20]
 800b2ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3d4 <_vfiprintf_r+0x25c>
 800b2f2:	7821      	ldrb	r1, [r4, #0]
 800b2f4:	2203      	movs	r2, #3
 800b2f6:	4650      	mov	r0, sl
 800b2f8:	f7f4 ff72 	bl	80001e0 <memchr>
 800b2fc:	b140      	cbz	r0, 800b310 <_vfiprintf_r+0x198>
 800b2fe:	2340      	movs	r3, #64	; 0x40
 800b300:	eba0 000a 	sub.w	r0, r0, sl
 800b304:	fa03 f000 	lsl.w	r0, r3, r0
 800b308:	9b04      	ldr	r3, [sp, #16]
 800b30a:	4303      	orrs	r3, r0
 800b30c:	3401      	adds	r4, #1
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b314:	482c      	ldr	r0, [pc, #176]	; (800b3c8 <_vfiprintf_r+0x250>)
 800b316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b31a:	2206      	movs	r2, #6
 800b31c:	f7f4 ff60 	bl	80001e0 <memchr>
 800b320:	2800      	cmp	r0, #0
 800b322:	d03f      	beq.n	800b3a4 <_vfiprintf_r+0x22c>
 800b324:	4b29      	ldr	r3, [pc, #164]	; (800b3cc <_vfiprintf_r+0x254>)
 800b326:	bb1b      	cbnz	r3, 800b370 <_vfiprintf_r+0x1f8>
 800b328:	9b03      	ldr	r3, [sp, #12]
 800b32a:	3307      	adds	r3, #7
 800b32c:	f023 0307 	bic.w	r3, r3, #7
 800b330:	3308      	adds	r3, #8
 800b332:	9303      	str	r3, [sp, #12]
 800b334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b336:	443b      	add	r3, r7
 800b338:	9309      	str	r3, [sp, #36]	; 0x24
 800b33a:	e767      	b.n	800b20c <_vfiprintf_r+0x94>
 800b33c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b340:	460c      	mov	r4, r1
 800b342:	2001      	movs	r0, #1
 800b344:	e7a5      	b.n	800b292 <_vfiprintf_r+0x11a>
 800b346:	2300      	movs	r3, #0
 800b348:	3401      	adds	r4, #1
 800b34a:	9305      	str	r3, [sp, #20]
 800b34c:	4619      	mov	r1, r3
 800b34e:	f04f 0c0a 	mov.w	ip, #10
 800b352:	4620      	mov	r0, r4
 800b354:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b358:	3a30      	subs	r2, #48	; 0x30
 800b35a:	2a09      	cmp	r2, #9
 800b35c:	d903      	bls.n	800b366 <_vfiprintf_r+0x1ee>
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d0c5      	beq.n	800b2ee <_vfiprintf_r+0x176>
 800b362:	9105      	str	r1, [sp, #20]
 800b364:	e7c3      	b.n	800b2ee <_vfiprintf_r+0x176>
 800b366:	fb0c 2101 	mla	r1, ip, r1, r2
 800b36a:	4604      	mov	r4, r0
 800b36c:	2301      	movs	r3, #1
 800b36e:	e7f0      	b.n	800b352 <_vfiprintf_r+0x1da>
 800b370:	ab03      	add	r3, sp, #12
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	462a      	mov	r2, r5
 800b376:	4b16      	ldr	r3, [pc, #88]	; (800b3d0 <_vfiprintf_r+0x258>)
 800b378:	a904      	add	r1, sp, #16
 800b37a:	4630      	mov	r0, r6
 800b37c:	f7fb ffec 	bl	8007358 <_printf_float>
 800b380:	4607      	mov	r7, r0
 800b382:	1c78      	adds	r0, r7, #1
 800b384:	d1d6      	bne.n	800b334 <_vfiprintf_r+0x1bc>
 800b386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b388:	07d9      	lsls	r1, r3, #31
 800b38a:	d405      	bmi.n	800b398 <_vfiprintf_r+0x220>
 800b38c:	89ab      	ldrh	r3, [r5, #12]
 800b38e:	059a      	lsls	r2, r3, #22
 800b390:	d402      	bmi.n	800b398 <_vfiprintf_r+0x220>
 800b392:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b394:	f7fe ff88 	bl	800a2a8 <__retarget_lock_release_recursive>
 800b398:	89ab      	ldrh	r3, [r5, #12]
 800b39a:	065b      	lsls	r3, r3, #25
 800b39c:	f53f af12 	bmi.w	800b1c4 <_vfiprintf_r+0x4c>
 800b3a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3a2:	e711      	b.n	800b1c8 <_vfiprintf_r+0x50>
 800b3a4:	ab03      	add	r3, sp, #12
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	462a      	mov	r2, r5
 800b3aa:	4b09      	ldr	r3, [pc, #36]	; (800b3d0 <_vfiprintf_r+0x258>)
 800b3ac:	a904      	add	r1, sp, #16
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f7fc fa76 	bl	80078a0 <_printf_i>
 800b3b4:	e7e4      	b.n	800b380 <_vfiprintf_r+0x208>
 800b3b6:	bf00      	nop
 800b3b8:	0800be14 	.word	0x0800be14
 800b3bc:	0800be34 	.word	0x0800be34
 800b3c0:	0800bdf4 	.word	0x0800bdf4
 800b3c4:	0800c02c 	.word	0x0800c02c
 800b3c8:	0800c036 	.word	0x0800c036
 800b3cc:	08007359 	.word	0x08007359
 800b3d0:	0800b153 	.word	0x0800b153
 800b3d4:	0800c032 	.word	0x0800c032

0800b3d8 <nan>:
 800b3d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b3e0 <nan+0x8>
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	00000000 	.word	0x00000000
 800b3e4:	7ff80000 	.word	0x7ff80000

0800b3e8 <_sbrk_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4d06      	ldr	r5, [pc, #24]	; (800b404 <_sbrk_r+0x1c>)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	602b      	str	r3, [r5, #0]
 800b3f4:	f7f6 fcba 	bl	8001d6c <_sbrk>
 800b3f8:	1c43      	adds	r3, r0, #1
 800b3fa:	d102      	bne.n	800b402 <_sbrk_r+0x1a>
 800b3fc:	682b      	ldr	r3, [r5, #0]
 800b3fe:	b103      	cbz	r3, 800b402 <_sbrk_r+0x1a>
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	20000400 	.word	0x20000400

0800b408 <__sread>:
 800b408:	b510      	push	{r4, lr}
 800b40a:	460c      	mov	r4, r1
 800b40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b410:	f000 fb02 	bl	800ba18 <_read_r>
 800b414:	2800      	cmp	r0, #0
 800b416:	bfab      	itete	ge
 800b418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b41a:	89a3      	ldrhlt	r3, [r4, #12]
 800b41c:	181b      	addge	r3, r3, r0
 800b41e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b422:	bfac      	ite	ge
 800b424:	6563      	strge	r3, [r4, #84]	; 0x54
 800b426:	81a3      	strhlt	r3, [r4, #12]
 800b428:	bd10      	pop	{r4, pc}

0800b42a <__swrite>:
 800b42a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b42e:	461f      	mov	r7, r3
 800b430:	898b      	ldrh	r3, [r1, #12]
 800b432:	05db      	lsls	r3, r3, #23
 800b434:	4605      	mov	r5, r0
 800b436:	460c      	mov	r4, r1
 800b438:	4616      	mov	r6, r2
 800b43a:	d505      	bpl.n	800b448 <__swrite+0x1e>
 800b43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b440:	2302      	movs	r3, #2
 800b442:	2200      	movs	r2, #0
 800b444:	f000 fa1a 	bl	800b87c <_lseek_r>
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b44e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b452:	81a3      	strh	r3, [r4, #12]
 800b454:	4632      	mov	r2, r6
 800b456:	463b      	mov	r3, r7
 800b458:	4628      	mov	r0, r5
 800b45a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b45e:	f000 b88b 	b.w	800b578 <_write_r>

0800b462 <__sseek>:
 800b462:	b510      	push	{r4, lr}
 800b464:	460c      	mov	r4, r1
 800b466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46a:	f000 fa07 	bl	800b87c <_lseek_r>
 800b46e:	1c43      	adds	r3, r0, #1
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	bf15      	itete	ne
 800b474:	6560      	strne	r0, [r4, #84]	; 0x54
 800b476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b47a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b47e:	81a3      	strheq	r3, [r4, #12]
 800b480:	bf18      	it	ne
 800b482:	81a3      	strhne	r3, [r4, #12]
 800b484:	bd10      	pop	{r4, pc}

0800b486 <__sclose>:
 800b486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b48a:	f000 b913 	b.w	800b6b4 <_close_r>

0800b48e <strncmp>:
 800b48e:	b510      	push	{r4, lr}
 800b490:	b17a      	cbz	r2, 800b4b2 <strncmp+0x24>
 800b492:	4603      	mov	r3, r0
 800b494:	3901      	subs	r1, #1
 800b496:	1884      	adds	r4, r0, r2
 800b498:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b49c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b4a0:	4290      	cmp	r0, r2
 800b4a2:	d101      	bne.n	800b4a8 <strncmp+0x1a>
 800b4a4:	42a3      	cmp	r3, r4
 800b4a6:	d101      	bne.n	800b4ac <strncmp+0x1e>
 800b4a8:	1a80      	subs	r0, r0, r2
 800b4aa:	bd10      	pop	{r4, pc}
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d1f3      	bne.n	800b498 <strncmp+0xa>
 800b4b0:	e7fa      	b.n	800b4a8 <strncmp+0x1a>
 800b4b2:	4610      	mov	r0, r2
 800b4b4:	e7f9      	b.n	800b4aa <strncmp+0x1c>
	...

0800b4b8 <__swbuf_r>:
 800b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ba:	460e      	mov	r6, r1
 800b4bc:	4614      	mov	r4, r2
 800b4be:	4605      	mov	r5, r0
 800b4c0:	b118      	cbz	r0, 800b4ca <__swbuf_r+0x12>
 800b4c2:	6983      	ldr	r3, [r0, #24]
 800b4c4:	b90b      	cbnz	r3, 800b4ca <__swbuf_r+0x12>
 800b4c6:	f7fe fadd 	bl	8009a84 <__sinit>
 800b4ca:	4b21      	ldr	r3, [pc, #132]	; (800b550 <__swbuf_r+0x98>)
 800b4cc:	429c      	cmp	r4, r3
 800b4ce:	d12b      	bne.n	800b528 <__swbuf_r+0x70>
 800b4d0:	686c      	ldr	r4, [r5, #4]
 800b4d2:	69a3      	ldr	r3, [r4, #24]
 800b4d4:	60a3      	str	r3, [r4, #8]
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	071a      	lsls	r2, r3, #28
 800b4da:	d52f      	bpl.n	800b53c <__swbuf_r+0x84>
 800b4dc:	6923      	ldr	r3, [r4, #16]
 800b4de:	b36b      	cbz	r3, 800b53c <__swbuf_r+0x84>
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	6820      	ldr	r0, [r4, #0]
 800b4e4:	1ac0      	subs	r0, r0, r3
 800b4e6:	6963      	ldr	r3, [r4, #20]
 800b4e8:	b2f6      	uxtb	r6, r6
 800b4ea:	4283      	cmp	r3, r0
 800b4ec:	4637      	mov	r7, r6
 800b4ee:	dc04      	bgt.n	800b4fa <__swbuf_r+0x42>
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f000 f974 	bl	800b7e0 <_fflush_r>
 800b4f8:	bb30      	cbnz	r0, 800b548 <__swbuf_r+0x90>
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	60a3      	str	r3, [r4, #8]
 800b500:	6823      	ldr	r3, [r4, #0]
 800b502:	1c5a      	adds	r2, r3, #1
 800b504:	6022      	str	r2, [r4, #0]
 800b506:	701e      	strb	r6, [r3, #0]
 800b508:	6963      	ldr	r3, [r4, #20]
 800b50a:	3001      	adds	r0, #1
 800b50c:	4283      	cmp	r3, r0
 800b50e:	d004      	beq.n	800b51a <__swbuf_r+0x62>
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	07db      	lsls	r3, r3, #31
 800b514:	d506      	bpl.n	800b524 <__swbuf_r+0x6c>
 800b516:	2e0a      	cmp	r6, #10
 800b518:	d104      	bne.n	800b524 <__swbuf_r+0x6c>
 800b51a:	4621      	mov	r1, r4
 800b51c:	4628      	mov	r0, r5
 800b51e:	f000 f95f 	bl	800b7e0 <_fflush_r>
 800b522:	b988      	cbnz	r0, 800b548 <__swbuf_r+0x90>
 800b524:	4638      	mov	r0, r7
 800b526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b528:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <__swbuf_r+0x9c>)
 800b52a:	429c      	cmp	r4, r3
 800b52c:	d101      	bne.n	800b532 <__swbuf_r+0x7a>
 800b52e:	68ac      	ldr	r4, [r5, #8]
 800b530:	e7cf      	b.n	800b4d2 <__swbuf_r+0x1a>
 800b532:	4b09      	ldr	r3, [pc, #36]	; (800b558 <__swbuf_r+0xa0>)
 800b534:	429c      	cmp	r4, r3
 800b536:	bf08      	it	eq
 800b538:	68ec      	ldreq	r4, [r5, #12]
 800b53a:	e7ca      	b.n	800b4d2 <__swbuf_r+0x1a>
 800b53c:	4621      	mov	r1, r4
 800b53e:	4628      	mov	r0, r5
 800b540:	f000 f82c 	bl	800b59c <__swsetup_r>
 800b544:	2800      	cmp	r0, #0
 800b546:	d0cb      	beq.n	800b4e0 <__swbuf_r+0x28>
 800b548:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b54c:	e7ea      	b.n	800b524 <__swbuf_r+0x6c>
 800b54e:	bf00      	nop
 800b550:	0800be14 	.word	0x0800be14
 800b554:	0800be34 	.word	0x0800be34
 800b558:	0800bdf4 	.word	0x0800bdf4

0800b55c <__ascii_wctomb>:
 800b55c:	b149      	cbz	r1, 800b572 <__ascii_wctomb+0x16>
 800b55e:	2aff      	cmp	r2, #255	; 0xff
 800b560:	bf85      	ittet	hi
 800b562:	238a      	movhi	r3, #138	; 0x8a
 800b564:	6003      	strhi	r3, [r0, #0]
 800b566:	700a      	strbls	r2, [r1, #0]
 800b568:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b56c:	bf98      	it	ls
 800b56e:	2001      	movls	r0, #1
 800b570:	4770      	bx	lr
 800b572:	4608      	mov	r0, r1
 800b574:	4770      	bx	lr
	...

0800b578 <_write_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d07      	ldr	r5, [pc, #28]	; (800b598 <_write_r+0x20>)
 800b57c:	4604      	mov	r4, r0
 800b57e:	4608      	mov	r0, r1
 800b580:	4611      	mov	r1, r2
 800b582:	2200      	movs	r2, #0
 800b584:	602a      	str	r2, [r5, #0]
 800b586:	461a      	mov	r2, r3
 800b588:	f7f5 fd5d 	bl	8001046 <_write>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <_write_r+0x1e>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	b103      	cbz	r3, 800b596 <_write_r+0x1e>
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	20000400 	.word	0x20000400

0800b59c <__swsetup_r>:
 800b59c:	4b32      	ldr	r3, [pc, #200]	; (800b668 <__swsetup_r+0xcc>)
 800b59e:	b570      	push	{r4, r5, r6, lr}
 800b5a0:	681d      	ldr	r5, [r3, #0]
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	b125      	cbz	r5, 800b5b2 <__swsetup_r+0x16>
 800b5a8:	69ab      	ldr	r3, [r5, #24]
 800b5aa:	b913      	cbnz	r3, 800b5b2 <__swsetup_r+0x16>
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	f7fe fa69 	bl	8009a84 <__sinit>
 800b5b2:	4b2e      	ldr	r3, [pc, #184]	; (800b66c <__swsetup_r+0xd0>)
 800b5b4:	429c      	cmp	r4, r3
 800b5b6:	d10f      	bne.n	800b5d8 <__swsetup_r+0x3c>
 800b5b8:	686c      	ldr	r4, [r5, #4]
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5c0:	0719      	lsls	r1, r3, #28
 800b5c2:	d42c      	bmi.n	800b61e <__swsetup_r+0x82>
 800b5c4:	06dd      	lsls	r5, r3, #27
 800b5c6:	d411      	bmi.n	800b5ec <__swsetup_r+0x50>
 800b5c8:	2309      	movs	r3, #9
 800b5ca:	6033      	str	r3, [r6, #0]
 800b5cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5d6:	e03e      	b.n	800b656 <__swsetup_r+0xba>
 800b5d8:	4b25      	ldr	r3, [pc, #148]	; (800b670 <__swsetup_r+0xd4>)
 800b5da:	429c      	cmp	r4, r3
 800b5dc:	d101      	bne.n	800b5e2 <__swsetup_r+0x46>
 800b5de:	68ac      	ldr	r4, [r5, #8]
 800b5e0:	e7eb      	b.n	800b5ba <__swsetup_r+0x1e>
 800b5e2:	4b24      	ldr	r3, [pc, #144]	; (800b674 <__swsetup_r+0xd8>)
 800b5e4:	429c      	cmp	r4, r3
 800b5e6:	bf08      	it	eq
 800b5e8:	68ec      	ldreq	r4, [r5, #12]
 800b5ea:	e7e6      	b.n	800b5ba <__swsetup_r+0x1e>
 800b5ec:	0758      	lsls	r0, r3, #29
 800b5ee:	d512      	bpl.n	800b616 <__swsetup_r+0x7a>
 800b5f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5f2:	b141      	cbz	r1, 800b606 <__swsetup_r+0x6a>
 800b5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5f8:	4299      	cmp	r1, r3
 800b5fa:	d002      	beq.n	800b602 <__swsetup_r+0x66>
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7ff fb55 	bl	800acac <_free_r>
 800b602:	2300      	movs	r3, #0
 800b604:	6363      	str	r3, [r4, #52]	; 0x34
 800b606:	89a3      	ldrh	r3, [r4, #12]
 800b608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b60c:	81a3      	strh	r3, [r4, #12]
 800b60e:	2300      	movs	r3, #0
 800b610:	6063      	str	r3, [r4, #4]
 800b612:	6923      	ldr	r3, [r4, #16]
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	f043 0308 	orr.w	r3, r3, #8
 800b61c:	81a3      	strh	r3, [r4, #12]
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	b94b      	cbnz	r3, 800b636 <__swsetup_r+0x9a>
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b62c:	d003      	beq.n	800b636 <__swsetup_r+0x9a>
 800b62e:	4621      	mov	r1, r4
 800b630:	4630      	mov	r0, r6
 800b632:	f000 f95b 	bl	800b8ec <__smakebuf_r>
 800b636:	89a0      	ldrh	r0, [r4, #12]
 800b638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b63c:	f010 0301 	ands.w	r3, r0, #1
 800b640:	d00a      	beq.n	800b658 <__swsetup_r+0xbc>
 800b642:	2300      	movs	r3, #0
 800b644:	60a3      	str	r3, [r4, #8]
 800b646:	6963      	ldr	r3, [r4, #20]
 800b648:	425b      	negs	r3, r3
 800b64a:	61a3      	str	r3, [r4, #24]
 800b64c:	6923      	ldr	r3, [r4, #16]
 800b64e:	b943      	cbnz	r3, 800b662 <__swsetup_r+0xc6>
 800b650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b654:	d1ba      	bne.n	800b5cc <__swsetup_r+0x30>
 800b656:	bd70      	pop	{r4, r5, r6, pc}
 800b658:	0781      	lsls	r1, r0, #30
 800b65a:	bf58      	it	pl
 800b65c:	6963      	ldrpl	r3, [r4, #20]
 800b65e:	60a3      	str	r3, [r4, #8]
 800b660:	e7f4      	b.n	800b64c <__swsetup_r+0xb0>
 800b662:	2000      	movs	r0, #0
 800b664:	e7f7      	b.n	800b656 <__swsetup_r+0xba>
 800b666:	bf00      	nop
 800b668:	2000000c 	.word	0x2000000c
 800b66c:	0800be14 	.word	0x0800be14
 800b670:	0800be34 	.word	0x0800be34
 800b674:	0800bdf4 	.word	0x0800bdf4

0800b678 <__assert_func>:
 800b678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b67a:	4614      	mov	r4, r2
 800b67c:	461a      	mov	r2, r3
 800b67e:	4b09      	ldr	r3, [pc, #36]	; (800b6a4 <__assert_func+0x2c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4605      	mov	r5, r0
 800b684:	68d8      	ldr	r0, [r3, #12]
 800b686:	b14c      	cbz	r4, 800b69c <__assert_func+0x24>
 800b688:	4b07      	ldr	r3, [pc, #28]	; (800b6a8 <__assert_func+0x30>)
 800b68a:	9100      	str	r1, [sp, #0]
 800b68c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b690:	4906      	ldr	r1, [pc, #24]	; (800b6ac <__assert_func+0x34>)
 800b692:	462b      	mov	r3, r5
 800b694:	f000 f8e0 	bl	800b858 <fiprintf>
 800b698:	f000 f9d0 	bl	800ba3c <abort>
 800b69c:	4b04      	ldr	r3, [pc, #16]	; (800b6b0 <__assert_func+0x38>)
 800b69e:	461c      	mov	r4, r3
 800b6a0:	e7f3      	b.n	800b68a <__assert_func+0x12>
 800b6a2:	bf00      	nop
 800b6a4:	2000000c 	.word	0x2000000c
 800b6a8:	0800c03d 	.word	0x0800c03d
 800b6ac:	0800c04a 	.word	0x0800c04a
 800b6b0:	0800c078 	.word	0x0800c078

0800b6b4 <_close_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d06      	ldr	r5, [pc, #24]	; (800b6d0 <_close_r+0x1c>)
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	4608      	mov	r0, r1
 800b6be:	602b      	str	r3, [r5, #0]
 800b6c0:	f7f6 fb1f 	bl	8001d02 <_close>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d102      	bne.n	800b6ce <_close_r+0x1a>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b103      	cbz	r3, 800b6ce <_close_r+0x1a>
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	20000400 	.word	0x20000400

0800b6d4 <__sflush_r>:
 800b6d4:	898a      	ldrh	r2, [r1, #12]
 800b6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6da:	4605      	mov	r5, r0
 800b6dc:	0710      	lsls	r0, r2, #28
 800b6de:	460c      	mov	r4, r1
 800b6e0:	d458      	bmi.n	800b794 <__sflush_r+0xc0>
 800b6e2:	684b      	ldr	r3, [r1, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	dc05      	bgt.n	800b6f4 <__sflush_r+0x20>
 800b6e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dc02      	bgt.n	800b6f4 <__sflush_r+0x20>
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6f6:	2e00      	cmp	r6, #0
 800b6f8:	d0f9      	beq.n	800b6ee <__sflush_r+0x1a>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b700:	682f      	ldr	r7, [r5, #0]
 800b702:	602b      	str	r3, [r5, #0]
 800b704:	d032      	beq.n	800b76c <__sflush_r+0x98>
 800b706:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	075a      	lsls	r2, r3, #29
 800b70c:	d505      	bpl.n	800b71a <__sflush_r+0x46>
 800b70e:	6863      	ldr	r3, [r4, #4]
 800b710:	1ac0      	subs	r0, r0, r3
 800b712:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b714:	b10b      	cbz	r3, 800b71a <__sflush_r+0x46>
 800b716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b718:	1ac0      	subs	r0, r0, r3
 800b71a:	2300      	movs	r3, #0
 800b71c:	4602      	mov	r2, r0
 800b71e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b720:	6a21      	ldr	r1, [r4, #32]
 800b722:	4628      	mov	r0, r5
 800b724:	47b0      	blx	r6
 800b726:	1c43      	adds	r3, r0, #1
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	d106      	bne.n	800b73a <__sflush_r+0x66>
 800b72c:	6829      	ldr	r1, [r5, #0]
 800b72e:	291d      	cmp	r1, #29
 800b730:	d82c      	bhi.n	800b78c <__sflush_r+0xb8>
 800b732:	4a2a      	ldr	r2, [pc, #168]	; (800b7dc <__sflush_r+0x108>)
 800b734:	40ca      	lsrs	r2, r1
 800b736:	07d6      	lsls	r6, r2, #31
 800b738:	d528      	bpl.n	800b78c <__sflush_r+0xb8>
 800b73a:	2200      	movs	r2, #0
 800b73c:	6062      	str	r2, [r4, #4]
 800b73e:	04d9      	lsls	r1, r3, #19
 800b740:	6922      	ldr	r2, [r4, #16]
 800b742:	6022      	str	r2, [r4, #0]
 800b744:	d504      	bpl.n	800b750 <__sflush_r+0x7c>
 800b746:	1c42      	adds	r2, r0, #1
 800b748:	d101      	bne.n	800b74e <__sflush_r+0x7a>
 800b74a:	682b      	ldr	r3, [r5, #0]
 800b74c:	b903      	cbnz	r3, 800b750 <__sflush_r+0x7c>
 800b74e:	6560      	str	r0, [r4, #84]	; 0x54
 800b750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b752:	602f      	str	r7, [r5, #0]
 800b754:	2900      	cmp	r1, #0
 800b756:	d0ca      	beq.n	800b6ee <__sflush_r+0x1a>
 800b758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b75c:	4299      	cmp	r1, r3
 800b75e:	d002      	beq.n	800b766 <__sflush_r+0x92>
 800b760:	4628      	mov	r0, r5
 800b762:	f7ff faa3 	bl	800acac <_free_r>
 800b766:	2000      	movs	r0, #0
 800b768:	6360      	str	r0, [r4, #52]	; 0x34
 800b76a:	e7c1      	b.n	800b6f0 <__sflush_r+0x1c>
 800b76c:	6a21      	ldr	r1, [r4, #32]
 800b76e:	2301      	movs	r3, #1
 800b770:	4628      	mov	r0, r5
 800b772:	47b0      	blx	r6
 800b774:	1c41      	adds	r1, r0, #1
 800b776:	d1c7      	bne.n	800b708 <__sflush_r+0x34>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d0c4      	beq.n	800b708 <__sflush_r+0x34>
 800b77e:	2b1d      	cmp	r3, #29
 800b780:	d001      	beq.n	800b786 <__sflush_r+0xb2>
 800b782:	2b16      	cmp	r3, #22
 800b784:	d101      	bne.n	800b78a <__sflush_r+0xb6>
 800b786:	602f      	str	r7, [r5, #0]
 800b788:	e7b1      	b.n	800b6ee <__sflush_r+0x1a>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b790:	81a3      	strh	r3, [r4, #12]
 800b792:	e7ad      	b.n	800b6f0 <__sflush_r+0x1c>
 800b794:	690f      	ldr	r7, [r1, #16]
 800b796:	2f00      	cmp	r7, #0
 800b798:	d0a9      	beq.n	800b6ee <__sflush_r+0x1a>
 800b79a:	0793      	lsls	r3, r2, #30
 800b79c:	680e      	ldr	r6, [r1, #0]
 800b79e:	bf08      	it	eq
 800b7a0:	694b      	ldreq	r3, [r1, #20]
 800b7a2:	600f      	str	r7, [r1, #0]
 800b7a4:	bf18      	it	ne
 800b7a6:	2300      	movne	r3, #0
 800b7a8:	eba6 0807 	sub.w	r8, r6, r7
 800b7ac:	608b      	str	r3, [r1, #8]
 800b7ae:	f1b8 0f00 	cmp.w	r8, #0
 800b7b2:	dd9c      	ble.n	800b6ee <__sflush_r+0x1a>
 800b7b4:	6a21      	ldr	r1, [r4, #32]
 800b7b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7b8:	4643      	mov	r3, r8
 800b7ba:	463a      	mov	r2, r7
 800b7bc:	4628      	mov	r0, r5
 800b7be:	47b0      	blx	r6
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	dc06      	bgt.n	800b7d2 <__sflush_r+0xfe>
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ca:	81a3      	strh	r3, [r4, #12]
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7d0:	e78e      	b.n	800b6f0 <__sflush_r+0x1c>
 800b7d2:	4407      	add	r7, r0
 800b7d4:	eba8 0800 	sub.w	r8, r8, r0
 800b7d8:	e7e9      	b.n	800b7ae <__sflush_r+0xda>
 800b7da:	bf00      	nop
 800b7dc:	20400001 	.word	0x20400001

0800b7e0 <_fflush_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	690b      	ldr	r3, [r1, #16]
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	b913      	cbnz	r3, 800b7f0 <_fflush_r+0x10>
 800b7ea:	2500      	movs	r5, #0
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	b118      	cbz	r0, 800b7fa <_fflush_r+0x1a>
 800b7f2:	6983      	ldr	r3, [r0, #24]
 800b7f4:	b90b      	cbnz	r3, 800b7fa <_fflush_r+0x1a>
 800b7f6:	f7fe f945 	bl	8009a84 <__sinit>
 800b7fa:	4b14      	ldr	r3, [pc, #80]	; (800b84c <_fflush_r+0x6c>)
 800b7fc:	429c      	cmp	r4, r3
 800b7fe:	d11b      	bne.n	800b838 <_fflush_r+0x58>
 800b800:	686c      	ldr	r4, [r5, #4]
 800b802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d0ef      	beq.n	800b7ea <_fflush_r+0xa>
 800b80a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b80c:	07d0      	lsls	r0, r2, #31
 800b80e:	d404      	bmi.n	800b81a <_fflush_r+0x3a>
 800b810:	0599      	lsls	r1, r3, #22
 800b812:	d402      	bmi.n	800b81a <_fflush_r+0x3a>
 800b814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b816:	f7fe fd46 	bl	800a2a6 <__retarget_lock_acquire_recursive>
 800b81a:	4628      	mov	r0, r5
 800b81c:	4621      	mov	r1, r4
 800b81e:	f7ff ff59 	bl	800b6d4 <__sflush_r>
 800b822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b824:	07da      	lsls	r2, r3, #31
 800b826:	4605      	mov	r5, r0
 800b828:	d4e0      	bmi.n	800b7ec <_fflush_r+0xc>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	059b      	lsls	r3, r3, #22
 800b82e:	d4dd      	bmi.n	800b7ec <_fflush_r+0xc>
 800b830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b832:	f7fe fd39 	bl	800a2a8 <__retarget_lock_release_recursive>
 800b836:	e7d9      	b.n	800b7ec <_fflush_r+0xc>
 800b838:	4b05      	ldr	r3, [pc, #20]	; (800b850 <_fflush_r+0x70>)
 800b83a:	429c      	cmp	r4, r3
 800b83c:	d101      	bne.n	800b842 <_fflush_r+0x62>
 800b83e:	68ac      	ldr	r4, [r5, #8]
 800b840:	e7df      	b.n	800b802 <_fflush_r+0x22>
 800b842:	4b04      	ldr	r3, [pc, #16]	; (800b854 <_fflush_r+0x74>)
 800b844:	429c      	cmp	r4, r3
 800b846:	bf08      	it	eq
 800b848:	68ec      	ldreq	r4, [r5, #12]
 800b84a:	e7da      	b.n	800b802 <_fflush_r+0x22>
 800b84c:	0800be14 	.word	0x0800be14
 800b850:	0800be34 	.word	0x0800be34
 800b854:	0800bdf4 	.word	0x0800bdf4

0800b858 <fiprintf>:
 800b858:	b40e      	push	{r1, r2, r3}
 800b85a:	b503      	push	{r0, r1, lr}
 800b85c:	4601      	mov	r1, r0
 800b85e:	ab03      	add	r3, sp, #12
 800b860:	4805      	ldr	r0, [pc, #20]	; (800b878 <fiprintf+0x20>)
 800b862:	f853 2b04 	ldr.w	r2, [r3], #4
 800b866:	6800      	ldr	r0, [r0, #0]
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	f7ff fc85 	bl	800b178 <_vfiprintf_r>
 800b86e:	b002      	add	sp, #8
 800b870:	f85d eb04 	ldr.w	lr, [sp], #4
 800b874:	b003      	add	sp, #12
 800b876:	4770      	bx	lr
 800b878:	2000000c 	.word	0x2000000c

0800b87c <_lseek_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4d07      	ldr	r5, [pc, #28]	; (800b89c <_lseek_r+0x20>)
 800b880:	4604      	mov	r4, r0
 800b882:	4608      	mov	r0, r1
 800b884:	4611      	mov	r1, r2
 800b886:	2200      	movs	r2, #0
 800b888:	602a      	str	r2, [r5, #0]
 800b88a:	461a      	mov	r2, r3
 800b88c:	f7f6 fa60 	bl	8001d50 <_lseek>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <_lseek_r+0x1e>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	b103      	cbz	r3, 800b89a <_lseek_r+0x1e>
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	20000400 	.word	0x20000400

0800b8a0 <__swhatbuf_r>:
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	460e      	mov	r6, r1
 800b8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a8:	2900      	cmp	r1, #0
 800b8aa:	b096      	sub	sp, #88	; 0x58
 800b8ac:	4614      	mov	r4, r2
 800b8ae:	461d      	mov	r5, r3
 800b8b0:	da08      	bge.n	800b8c4 <__swhatbuf_r+0x24>
 800b8b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	602a      	str	r2, [r5, #0]
 800b8ba:	061a      	lsls	r2, r3, #24
 800b8bc:	d410      	bmi.n	800b8e0 <__swhatbuf_r+0x40>
 800b8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8c2:	e00e      	b.n	800b8e2 <__swhatbuf_r+0x42>
 800b8c4:	466a      	mov	r2, sp
 800b8c6:	f000 f8c1 	bl	800ba4c <_fstat_r>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	dbf1      	blt.n	800b8b2 <__swhatbuf_r+0x12>
 800b8ce:	9a01      	ldr	r2, [sp, #4]
 800b8d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8d8:	425a      	negs	r2, r3
 800b8da:	415a      	adcs	r2, r3
 800b8dc:	602a      	str	r2, [r5, #0]
 800b8de:	e7ee      	b.n	800b8be <__swhatbuf_r+0x1e>
 800b8e0:	2340      	movs	r3, #64	; 0x40
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	b016      	add	sp, #88	; 0x58
 800b8e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8ec <__smakebuf_r>:
 800b8ec:	898b      	ldrh	r3, [r1, #12]
 800b8ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8f0:	079d      	lsls	r5, r3, #30
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	460c      	mov	r4, r1
 800b8f6:	d507      	bpl.n	800b908 <__smakebuf_r+0x1c>
 800b8f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	6123      	str	r3, [r4, #16]
 800b900:	2301      	movs	r3, #1
 800b902:	6163      	str	r3, [r4, #20]
 800b904:	b002      	add	sp, #8
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	ab01      	add	r3, sp, #4
 800b90a:	466a      	mov	r2, sp
 800b90c:	f7ff ffc8 	bl	800b8a0 <__swhatbuf_r>
 800b910:	9900      	ldr	r1, [sp, #0]
 800b912:	4605      	mov	r5, r0
 800b914:	4630      	mov	r0, r6
 800b916:	f7ff fa35 	bl	800ad84 <_malloc_r>
 800b91a:	b948      	cbnz	r0, 800b930 <__smakebuf_r+0x44>
 800b91c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b920:	059a      	lsls	r2, r3, #22
 800b922:	d4ef      	bmi.n	800b904 <__smakebuf_r+0x18>
 800b924:	f023 0303 	bic.w	r3, r3, #3
 800b928:	f043 0302 	orr.w	r3, r3, #2
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	e7e3      	b.n	800b8f8 <__smakebuf_r+0xc>
 800b930:	4b0d      	ldr	r3, [pc, #52]	; (800b968 <__smakebuf_r+0x7c>)
 800b932:	62b3      	str	r3, [r6, #40]	; 0x28
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	6020      	str	r0, [r4, #0]
 800b938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b93c:	81a3      	strh	r3, [r4, #12]
 800b93e:	9b00      	ldr	r3, [sp, #0]
 800b940:	6163      	str	r3, [r4, #20]
 800b942:	9b01      	ldr	r3, [sp, #4]
 800b944:	6120      	str	r0, [r4, #16]
 800b946:	b15b      	cbz	r3, 800b960 <__smakebuf_r+0x74>
 800b948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b94c:	4630      	mov	r0, r6
 800b94e:	f000 f88f 	bl	800ba70 <_isatty_r>
 800b952:	b128      	cbz	r0, 800b960 <__smakebuf_r+0x74>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f023 0303 	bic.w	r3, r3, #3
 800b95a:	f043 0301 	orr.w	r3, r3, #1
 800b95e:	81a3      	strh	r3, [r4, #12]
 800b960:	89a0      	ldrh	r0, [r4, #12]
 800b962:	4305      	orrs	r5, r0
 800b964:	81a5      	strh	r5, [r4, #12]
 800b966:	e7cd      	b.n	800b904 <__smakebuf_r+0x18>
 800b968:	08009a1d 	.word	0x08009a1d

0800b96c <memmove>:
 800b96c:	4288      	cmp	r0, r1
 800b96e:	b510      	push	{r4, lr}
 800b970:	eb01 0402 	add.w	r4, r1, r2
 800b974:	d902      	bls.n	800b97c <memmove+0x10>
 800b976:	4284      	cmp	r4, r0
 800b978:	4623      	mov	r3, r4
 800b97a:	d807      	bhi.n	800b98c <memmove+0x20>
 800b97c:	1e43      	subs	r3, r0, #1
 800b97e:	42a1      	cmp	r1, r4
 800b980:	d008      	beq.n	800b994 <memmove+0x28>
 800b982:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b98a:	e7f8      	b.n	800b97e <memmove+0x12>
 800b98c:	4402      	add	r2, r0
 800b98e:	4601      	mov	r1, r0
 800b990:	428a      	cmp	r2, r1
 800b992:	d100      	bne.n	800b996 <memmove+0x2a>
 800b994:	bd10      	pop	{r4, pc}
 800b996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b99a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b99e:	e7f7      	b.n	800b990 <memmove+0x24>

0800b9a0 <__malloc_lock>:
 800b9a0:	4801      	ldr	r0, [pc, #4]	; (800b9a8 <__malloc_lock+0x8>)
 800b9a2:	f7fe bc80 	b.w	800a2a6 <__retarget_lock_acquire_recursive>
 800b9a6:	bf00      	nop
 800b9a8:	200003f4 	.word	0x200003f4

0800b9ac <__malloc_unlock>:
 800b9ac:	4801      	ldr	r0, [pc, #4]	; (800b9b4 <__malloc_unlock+0x8>)
 800b9ae:	f7fe bc7b 	b.w	800a2a8 <__retarget_lock_release_recursive>
 800b9b2:	bf00      	nop
 800b9b4:	200003f4 	.word	0x200003f4

0800b9b8 <_realloc_r>:
 800b9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9bc:	4680      	mov	r8, r0
 800b9be:	4614      	mov	r4, r2
 800b9c0:	460e      	mov	r6, r1
 800b9c2:	b921      	cbnz	r1, 800b9ce <_realloc_r+0x16>
 800b9c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c8:	4611      	mov	r1, r2
 800b9ca:	f7ff b9db 	b.w	800ad84 <_malloc_r>
 800b9ce:	b92a      	cbnz	r2, 800b9dc <_realloc_r+0x24>
 800b9d0:	f7ff f96c 	bl	800acac <_free_r>
 800b9d4:	4625      	mov	r5, r4
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9dc:	f000 f858 	bl	800ba90 <_malloc_usable_size_r>
 800b9e0:	4284      	cmp	r4, r0
 800b9e2:	4607      	mov	r7, r0
 800b9e4:	d802      	bhi.n	800b9ec <_realloc_r+0x34>
 800b9e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9ea:	d812      	bhi.n	800ba12 <_realloc_r+0x5a>
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	4640      	mov	r0, r8
 800b9f0:	f7ff f9c8 	bl	800ad84 <_malloc_r>
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d0ed      	beq.n	800b9d6 <_realloc_r+0x1e>
 800b9fa:	42bc      	cmp	r4, r7
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	4631      	mov	r1, r6
 800ba00:	bf28      	it	cs
 800ba02:	463a      	movcs	r2, r7
 800ba04:	f7fe fc6c 	bl	800a2e0 <memcpy>
 800ba08:	4631      	mov	r1, r6
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	f7ff f94e 	bl	800acac <_free_r>
 800ba10:	e7e1      	b.n	800b9d6 <_realloc_r+0x1e>
 800ba12:	4635      	mov	r5, r6
 800ba14:	e7df      	b.n	800b9d6 <_realloc_r+0x1e>
	...

0800ba18 <_read_r>:
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	4d07      	ldr	r5, [pc, #28]	; (800ba38 <_read_r+0x20>)
 800ba1c:	4604      	mov	r4, r0
 800ba1e:	4608      	mov	r0, r1
 800ba20:	4611      	mov	r1, r2
 800ba22:	2200      	movs	r2, #0
 800ba24:	602a      	str	r2, [r5, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	f7f6 f94e 	bl	8001cc8 <_read>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	d102      	bne.n	800ba36 <_read_r+0x1e>
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	b103      	cbz	r3, 800ba36 <_read_r+0x1e>
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	20000400 	.word	0x20000400

0800ba3c <abort>:
 800ba3c:	b508      	push	{r3, lr}
 800ba3e:	2006      	movs	r0, #6
 800ba40:	f000 f856 	bl	800baf0 <raise>
 800ba44:	2001      	movs	r0, #1
 800ba46:	f7f6 f935 	bl	8001cb4 <_exit>
	...

0800ba4c <_fstat_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d07      	ldr	r5, [pc, #28]	; (800ba6c <_fstat_r+0x20>)
 800ba50:	2300      	movs	r3, #0
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	4611      	mov	r1, r2
 800ba58:	602b      	str	r3, [r5, #0]
 800ba5a:	f7f6 f95e 	bl	8001d1a <_fstat>
 800ba5e:	1c43      	adds	r3, r0, #1
 800ba60:	d102      	bne.n	800ba68 <_fstat_r+0x1c>
 800ba62:	682b      	ldr	r3, [r5, #0]
 800ba64:	b103      	cbz	r3, 800ba68 <_fstat_r+0x1c>
 800ba66:	6023      	str	r3, [r4, #0]
 800ba68:	bd38      	pop	{r3, r4, r5, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000400 	.word	0x20000400

0800ba70 <_isatty_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	4d06      	ldr	r5, [pc, #24]	; (800ba8c <_isatty_r+0x1c>)
 800ba74:	2300      	movs	r3, #0
 800ba76:	4604      	mov	r4, r0
 800ba78:	4608      	mov	r0, r1
 800ba7a:	602b      	str	r3, [r5, #0]
 800ba7c:	f7f6 f95d 	bl	8001d3a <_isatty>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_isatty_r+0x1a>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_isatty_r+0x1a>
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	20000400 	.word	0x20000400

0800ba90 <_malloc_usable_size_r>:
 800ba90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba94:	1f18      	subs	r0, r3, #4
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	bfbc      	itt	lt
 800ba9a:	580b      	ldrlt	r3, [r1, r0]
 800ba9c:	18c0      	addlt	r0, r0, r3
 800ba9e:	4770      	bx	lr

0800baa0 <_raise_r>:
 800baa0:	291f      	cmp	r1, #31
 800baa2:	b538      	push	{r3, r4, r5, lr}
 800baa4:	4604      	mov	r4, r0
 800baa6:	460d      	mov	r5, r1
 800baa8:	d904      	bls.n	800bab4 <_raise_r+0x14>
 800baaa:	2316      	movs	r3, #22
 800baac:	6003      	str	r3, [r0, #0]
 800baae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bab6:	b112      	cbz	r2, 800babe <_raise_r+0x1e>
 800bab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800babc:	b94b      	cbnz	r3, 800bad2 <_raise_r+0x32>
 800babe:	4620      	mov	r0, r4
 800bac0:	f000 f830 	bl	800bb24 <_getpid_r>
 800bac4:	462a      	mov	r2, r5
 800bac6:	4601      	mov	r1, r0
 800bac8:	4620      	mov	r0, r4
 800baca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bace:	f000 b817 	b.w	800bb00 <_kill_r>
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d00a      	beq.n	800baec <_raise_r+0x4c>
 800bad6:	1c59      	adds	r1, r3, #1
 800bad8:	d103      	bne.n	800bae2 <_raise_r+0x42>
 800bada:	2316      	movs	r3, #22
 800badc:	6003      	str	r3, [r0, #0]
 800bade:	2001      	movs	r0, #1
 800bae0:	e7e7      	b.n	800bab2 <_raise_r+0x12>
 800bae2:	2400      	movs	r4, #0
 800bae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bae8:	4628      	mov	r0, r5
 800baea:	4798      	blx	r3
 800baec:	2000      	movs	r0, #0
 800baee:	e7e0      	b.n	800bab2 <_raise_r+0x12>

0800baf0 <raise>:
 800baf0:	4b02      	ldr	r3, [pc, #8]	; (800bafc <raise+0xc>)
 800baf2:	4601      	mov	r1, r0
 800baf4:	6818      	ldr	r0, [r3, #0]
 800baf6:	f7ff bfd3 	b.w	800baa0 <_raise_r>
 800bafa:	bf00      	nop
 800bafc:	2000000c 	.word	0x2000000c

0800bb00 <_kill_r>:
 800bb00:	b538      	push	{r3, r4, r5, lr}
 800bb02:	4d07      	ldr	r5, [pc, #28]	; (800bb20 <_kill_r+0x20>)
 800bb04:	2300      	movs	r3, #0
 800bb06:	4604      	mov	r4, r0
 800bb08:	4608      	mov	r0, r1
 800bb0a:	4611      	mov	r1, r2
 800bb0c:	602b      	str	r3, [r5, #0]
 800bb0e:	f7f6 f8c1 	bl	8001c94 <_kill>
 800bb12:	1c43      	adds	r3, r0, #1
 800bb14:	d102      	bne.n	800bb1c <_kill_r+0x1c>
 800bb16:	682b      	ldr	r3, [r5, #0]
 800bb18:	b103      	cbz	r3, 800bb1c <_kill_r+0x1c>
 800bb1a:	6023      	str	r3, [r4, #0]
 800bb1c:	bd38      	pop	{r3, r4, r5, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000400 	.word	0x20000400

0800bb24 <_getpid_r>:
 800bb24:	f7f6 b8ae 	b.w	8001c84 <_getpid>

0800bb28 <_init>:
 800bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2a:	bf00      	nop
 800bb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2e:	bc08      	pop	{r3}
 800bb30:	469e      	mov	lr, r3
 800bb32:	4770      	bx	lr

0800bb34 <_fini>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	bf00      	nop
 800bb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb3a:	bc08      	pop	{r3}
 800bb3c:	469e      	mov	lr, r3
 800bb3e:	4770      	bx	lr
