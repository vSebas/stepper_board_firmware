
stepper_boards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800bd18  0800bd18  0001bd18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c254  0800c254  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c254  0800c254  0001c254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c25c  0800c25c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c25c  0800c25c  0001c25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c260  0800c260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001e0  0800c444  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800c444  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162ec  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c3  00000000  00000000  000364fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00038dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003a180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248a9  00000000  00000000  0003b448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015213  00000000  00000000  0005fcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4ad8  00000000  00000000  00074f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001599dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b90  00000000  00000000  00159a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd00 	.word	0x0800bd00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800bd00 	.word	0x0800bd00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001000:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001004:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001010:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001014:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001018:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001020:	e000      	b.n	8001024 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001022:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001024:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800102e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffc9 	bl	8000ff8 <ITM_SendChar>
	for(int i=0; i<len; i++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
	}
	return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox;

CAN_RxHeaderTypeDef RxHeader;
CAN_TxHeaderTypeDef TxHeader;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800108c:	2100      	movs	r1, #0
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f002 fd05 	bl	8003a9e <HAL_CAN_GetRxMessage>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200003ac 	.word	0x200003ac
 80010a0:	200003b8 	.word	0x200003b8
 80010a4:	00000000 	.word	0x00000000

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b5b0      	push	{r4, r5, r7, lr}
 80010aa:	b08e      	sub	sp, #56	; 0x38
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ae:	f000 fee6 	bl	8001e7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b2:	f000 f937 	bl	8001324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b6:	f000 fb69 	bl	800178c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ba:	f000 fb37 	bl	800172c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010be:	f000 fae7 	bl	8001690 <MX_TIM2_Init>
  MX_TIM1_Init();
 80010c2:	f000 fa39 	bl	8001538 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010c6:	f000 f97f 	bl	80013c8 <MX_ADC1_Init>
  MX_CAN1_Init();
 80010ca:	f000 f9e1 	bl	8001490 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // Debug
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	210f      	movs	r1, #15
 80010d2:	4887      	ldr	r0, [pc, #540]	; (80012f0 <main+0x248>)
 80010d4:	f003 faee 	bl	80046b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2103      	movs	r1, #3
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e0:	f003 fae8 	bl	80046b4 <HAL_GPIO_WritePin>

  // Stepper 1
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2104      	movs	r1, #4
 80010e8:	4882      	ldr	r0, [pc, #520]	; (80012f4 <main+0x24c>)
 80010ea:	f003 fae3 	bl	80046b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin | STPR_EN_1_Pin, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80010f4:	487e      	ldr	r0, [pc, #504]	; (80012f0 <main+0x248>)
 80010f6:	f003 fadd 	bl	80046b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STPR_PWM_1_GPIO_Port, STPR_PWM_1_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f003 fad6 	bl	80046b4 <HAL_GPIO_WritePin>

  // Stepper 2
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_PWM_2_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	f640 0105 	movw	r1, #2053	; 0x805
 800110e:	487a      	ldr	r0, [pc, #488]	; (80012f8 <main+0x250>)
 8001110:	f003 fad0 	bl	80046b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, STPR_EN_2_Pin, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111a:	4877      	ldr	r0, [pc, #476]	; (80012f8 <main+0x250>)
 800111c:	f003 faca 	bl	80046b4 <HAL_GPIO_WritePin>

  // ADC Calibration
  HAL_StatusTypeDef ret;
  ret = HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001120:	217f      	movs	r1, #127	; 0x7f
 8001122:	4876      	ldr	r0, [pc, #472]	; (80012fc <main+0x254>)
 8001124:	f002 f982 	bl	800342c <HAL_ADCEx_Calibration_Start>
 8001128:	4603      	mov	r3, r0
 800112a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if(ret != HAL_OK)
 800112e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <main+0x92>
  {
	  Error_Handler();
 8001136:	f000 fbeb 	bl	8001910 <Error_Handler>
  }

  uint8_t dataT[20] = "Hello from STM32!\n\r";
 800113a:	4b71      	ldr	r3, [pc, #452]	; (8001300 <main+0x258>)
 800113c:	f107 0408 	add.w	r4, r7, #8
 8001140:	461d      	mov	r5, r3
 8001142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001146:	682b      	ldr	r3, [r5, #0]
 8001148:	6023      	str	r3, [r4, #0]
  uint8_t dataR[1] = "";
 800114a:	2300      	movs	r3, #0
 800114c:	713b      	strb	r3, [r7, #4]

  TxHeader.DLC = 2; // Length of data to send in bytes
 800114e:	4b6d      	ldr	r3, [pc, #436]	; (8001304 <main+0x25c>)
 8001150:	2202      	movs	r2, #2
 8001152:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0; // For basic CAN protocol
 8001154:	4b6b      	ldr	r3, [pc, #428]	; (8001304 <main+0x25c>)
 8001156:	2200      	movs	r2, #0
 8001158:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 800115a:	4b6a      	ldr	r3, [pc, #424]	; (8001304 <main+0x25c>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA; // transfering data of remote frame
 8001160:	4b68      	ldr	r3, [pc, #416]	; (8001304 <main+0x25c>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446; // ID of this CAN peripheral
 8001166:	4b67      	ldr	r3, [pc, #412]	; (8001304 <main+0x25c>)
 8001168:	f240 4246 	movw	r2, #1094	; 0x446
 800116c:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime = DISABLE;
 800116e:	4b65      	ldr	r3, [pc, #404]	; (8001304 <main+0x25c>)
 8001170:	2200      	movs	r2, #0
 8001172:	751a      	strb	r2, [r3, #20]

  TxData[0] = 10;
 8001174:	4b64      	ldr	r3, [pc, #400]	; (8001308 <main+0x260>)
 8001176:	220a      	movs	r2, #10
 8001178:	701a      	strb	r2, [r3, #0]

  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800117a:	4b64      	ldr	r3, [pc, #400]	; (800130c <main+0x264>)
 800117c:	4a62      	ldr	r2, [pc, #392]	; (8001308 <main+0x260>)
 800117e:	4961      	ldr	r1, [pc, #388]	; (8001304 <main+0x25c>)
 8001180:	4863      	ldr	r0, [pc, #396]	; (8001310 <main+0x268>)
 8001182:	f002 fbbc 	bl	80038fe <HAL_CAN_AddTxMessage>

  HAL_CAN_Start(&hcan1);
 8001186:	4862      	ldr	r0, [pc, #392]	; (8001310 <main+0x268>)
 8001188:	f002 fb75 	bl	8003876 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800118c:	2102      	movs	r1, #2
 800118e:	4860      	ldr	r0, [pc, #384]	; (8001310 <main+0x268>)
 8001190:	f002 fd97 	bl	8003cc2 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t previous_t = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t current_t = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t delay = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t thermistor_reading = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30

  GPIO_PinState BRAKE;
  GPIO_PinState FAULT_1;
  GPIO_PinState FAULT_2;

  HAL_UART_Transmit(&huart1, dataT, 14, HAL_MAX_DELAY);
 80011a4:	f107 0108 	add.w	r1, r7, #8
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	220e      	movs	r2, #14
 80011ae:	4859      	ldr	r0, [pc, #356]	; (8001314 <main+0x26c>)
 80011b0:	f005 fb7a 	bl	80068a8 <HAL_UART_Transmit>

  while (1)
  {
	  current_t = HAL_GetTick();
 80011b4:	f000 fecc 	bl	8001f50 <HAL_GetTick>
 80011b8:	62b8      	str	r0, [r7, #40]	; 0x28

	  if(current_t - previous_t >= delay){
 80011ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d812      	bhi.n	80011ec <main+0x144>
		  previous_t = current_t;
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
		  HAL_GPIO_WritePin(STPR_PWM_1_GPIO_Port, STPR_PWM_1_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f003 fa6e 	bl	80046b4 <HAL_GPIO_WritePin>

		  HAL_Delay(delay);
 80011d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011da:	f000 fec5 	bl	8001f68 <HAL_Delay>

		  HAL_GPIO_WritePin(STPR_PWM_1_GPIO_Port, STPR_PWM_1_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e8:	f003 fa64 	bl	80046b4 <HAL_GPIO_WritePin>
	  }

	  ID_0 = HAL_GPIO_ReadPin(GPIOB, ID_0_Pin);
 80011ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f0:	4841      	ldr	r0, [pc, #260]	; (80012f8 <main+0x250>)
 80011f2:	f003 fa47 	bl	8004684 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  ID_1 = HAL_GPIO_ReadPin(GPIOB, ID_1_Pin);
 80011fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001200:	483d      	ldr	r0, [pc, #244]	; (80012f8 <main+0x250>)
 8001202:	f003 fa3f 	bl	8004684 <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  ID_2 = HAL_GPIO_ReadPin(GPIOB, ID_2_Pin);
 800120c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001210:	4839      	ldr	r0, [pc, #228]	; (80012f8 <main+0x250>)
 8001212:	f003 fa37 	bl	8004684 <HAL_GPIO_ReadPin>
 8001216:	4603      	mov	r3, r0
 8001218:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  ID_3 = HAL_GPIO_ReadPin(GPIOB, ID_3_Pin);
 800121c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001220:	4835      	ldr	r0, [pc, #212]	; (80012f8 <main+0x250>)
 8001222:	f003 fa2f 	bl	8004684 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	f887 3020 	strb.w	r3, [r7, #32]

	  BRAKE = HAL_GPIO_ReadPin(GPIOB, BRAKE_IN_Pin);
 800122c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001230:	4831      	ldr	r0, [pc, #196]	; (80012f8 <main+0x250>)
 8001232:	f003 fa27 	bl	8004684 <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	77fb      	strb	r3, [r7, #31]
	  FAULT_1 = HAL_GPIO_ReadPin(GPIOC, STPR_FLT_1_Pin);
 800123a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800123e:	482c      	ldr	r0, [pc, #176]	; (80012f0 <main+0x248>)
 8001240:	f003 fa20 	bl	8004684 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	77bb      	strb	r3, [r7, #30]
	  FAULT_2 = HAL_GPIO_ReadPin(GPIOB, STPR_FLT_2_Pin);
 8001248:	2102      	movs	r1, #2
 800124a:	482b      	ldr	r0, [pc, #172]	; (80012f8 <main+0x250>)
 800124c:	f003 fa1a 	bl	8004684 <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	777b      	strb	r3, [r7, #29]
	  printf("BRAKE: %d\n", BRAKE);
	  printf("FAULT 1: %d\n", FAULT_1);
	  printf("FAULT 2: %d\n", FAULT_2);
	  */

	  HAL_ADC_Start(&hadc1);
 8001254:	4829      	ldr	r0, [pc, #164]	; (80012fc <main+0x254>)
 8001256:	f001 fa09 	bl	800266c <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800125a:	2164      	movs	r1, #100	; 0x64
 800125c:	4827      	ldr	r0, [pc, #156]	; (80012fc <main+0x254>)
 800125e:	f001 fa9b 	bl	8002798 <HAL_ADC_PollForConversion>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d103      	bne.n	8001270 <main+0x1c8>
	  {
		  thermistor_reading = HAL_ADC_GetValue(&hadc1);
 8001268:	4824      	ldr	r0, [pc, #144]	; (80012fc <main+0x254>)
 800126a:	f001 fb24 	bl	80028b6 <HAL_ADC_GetValue>
 800126e:	6338      	str	r0, [r7, #48]	; 0x30
	  }
	  HAL_ADC_Stop(&hadc1);
 8001270:	4822      	ldr	r0, [pc, #136]	; (80012fc <main+0x254>)
 8001272:	f001 fa5e 	bl	8002732 <HAL_ADC_Stop>

	  printf("Thermistor Measurement: %u\n", thermistor_reading);
 8001276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001278:	4827      	ldr	r0, [pc, #156]	; (8001318 <main+0x270>)
 800127a:	f006 ff31 	bl	80080e0 <iprintf>
	  printf("Thermistor Voltage: %f\n", (float) thermistor_reading*3.3/4096);
 800127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001288:	ee17 0a90 	vmov	r0, s15
 800128c:	f7ff f95c 	bl	8000548 <__aeabi_f2d>
 8001290:	a315      	add	r3, pc, #84	; (adr r3, 80012e8 <main+0x240>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff f9af 	bl	80005f8 <__aeabi_dmul>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <main+0x274>)
 80012a8:	f7ff fad0 	bl	800084c <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	481b      	ldr	r0, [pc, #108]	; (8001320 <main+0x278>)
 80012b2:	f006 ff15 	bl	80080e0 <iprintf>

	  if(HAL_UART_Receive(&huart1, dataR, 1, HAL_MAX_DELAY) == HAL_OK)
 80012b6:	1d39      	adds	r1, r7, #4
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	2201      	movs	r2, #1
 80012be:	4815      	ldr	r0, [pc, #84]	; (8001314 <main+0x26c>)
 80012c0:	f005 fb86 	bl	80069d0 <HAL_UART_Receive>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f47f af74 	bne.w	80011b4 <main+0x10c>
	  {
		  dataR[0] = dataR[0] + 1;
 80012cc:	793b      	ldrb	r3, [r7, #4]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	713b      	strb	r3, [r7, #4]
		  HAL_UART_Transmit(&huart1, dataR, 1, HAL_MAX_DELAY);
 80012d4:	1d39      	adds	r1, r7, #4
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	2201      	movs	r2, #1
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <main+0x26c>)
 80012de:	f005 fae3 	bl	80068a8 <HAL_UART_Transmit>
	  current_t = HAL_GetTick();
 80012e2:	e767      	b.n	80011b4 <main+0x10c>
 80012e4:	f3af 8000 	nop.w
 80012e8:	66666666 	.word	0x66666666
 80012ec:	400a6666 	.word	0x400a6666
 80012f0:	48000800 	.word	0x48000800
 80012f4:	48000c00 	.word	0x48000c00
 80012f8:	48000400 	.word	0x48000400
 80012fc:	200001fc 	.word	0x200001fc
 8001300:	0800bd4c 	.word	0x0800bd4c
 8001304:	200003d4 	.word	0x200003d4
 8001308:	200003a4 	.word	0x200003a4
 800130c:	200003b4 	.word	0x200003b4
 8001310:	20000260 	.word	0x20000260
 8001314:	20000320 	.word	0x20000320
 8001318:	0800bd18 	.word	0x0800bd18
 800131c:	40b00000 	.word	0x40b00000
 8001320:	0800bd34 	.word	0x0800bd34

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b096      	sub	sp, #88	; 0x58
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2244      	movs	r2, #68	; 0x44
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f006 f852 	bl	80073dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001346:	f44f 7000 	mov.w	r0, #512	; 0x200
 800134a:	f003 f9d9 	bl	8004700 <HAL_PWREx_ControlVoltageScaling>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001354:	f000 fadc 	bl	8001910 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001358:	2310      	movs	r3, #16
 800135a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800135c:	2301      	movs	r3, #1
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001364:	2360      	movs	r3, #96	; 0x60
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001368:	2302      	movs	r3, #2
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800136c:	2301      	movs	r3, #1
 800136e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001374:	2328      	movs	r3, #40	; 0x28
 8001376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001378:	2307      	movs	r3, #7
 800137a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800137c:	2302      	movs	r3, #2
 800137e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4618      	mov	r0, r3
 800138a:	f003 fa0f 	bl	80047ac <HAL_RCC_OscConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001394:	f000 fabc 	bl	8001910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001398:	230f      	movs	r3, #15
 800139a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139c:	2303      	movs	r3, #3
 800139e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fe0f 	bl	8004fd4 <HAL_RCC_ClockConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013bc:	f000 faa8 	bl	8001910 <Error_Handler>
  }
}
 80013c0:	bf00      	nop
 80013c2:	3758      	adds	r7, #88	; 0x58
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ce:	463b      	mov	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
 80013dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013de:	4b29      	ldr	r3, [pc, #164]	; (8001484 <MX_ADC1_Init+0xbc>)
 80013e0:	4a29      	ldr	r2, [pc, #164]	; (8001488 <MX_ADC1_Init+0xc0>)
 80013e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <MX_ADC1_Init+0xbc>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <MX_ADC1_Init+0xbc>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <MX_ADC1_Init+0xbc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <MX_ADC1_Init+0xbc>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fc:	4b21      	ldr	r3, [pc, #132]	; (8001484 <MX_ADC1_Init+0xbc>)
 80013fe:	2204      	movs	r2, #4
 8001400:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_ADC1_Init+0xbc>)
 8001404:	2200      	movs	r2, #0
 8001406:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001408:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <MX_ADC1_Init+0xbc>)
 800140a:	2201      	movs	r2, #1
 800140c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800140e:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_ADC1_Init+0xbc>)
 8001410:	2201      	movs	r2, #1
 8001412:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_ADC1_Init+0xbc>)
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_ADC1_Init+0xbc>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_ADC1_Init+0xbc>)
 8001424:	2200      	movs	r2, #0
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_ADC1_Init+0xbc>)
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_ADC1_Init+0xbc>)
 8001432:	2200      	movs	r2, #0
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_ADC1_Init+0xbc>)
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800143e:	4811      	ldr	r0, [pc, #68]	; (8001484 <MX_ADC1_Init+0xbc>)
 8001440:	f000 ffcc 	bl	80023dc <HAL_ADC_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800144a:	f000 fa61 	bl	8001910 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_ADC1_Init+0xc4>)
 8001450:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001452:	2306      	movs	r3, #6
 8001454:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800145a:	237f      	movs	r3, #127	; 0x7f
 800145c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800145e:	2304      	movs	r3, #4
 8001460:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_ADC1_Init+0xbc>)
 800146c:	f001 fa30 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001476:	f000 fa4b 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200001fc 	.word	0x200001fc
 8001488:	50040000 	.word	0x50040000
 800148c:	c7520000 	.word	0xc7520000

08001490 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_CAN1_Init+0xa0>)
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <MX_CAN1_Init+0xa4>)
 800149a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 100;
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <MX_CAN1_Init+0xa0>)
 800149e:	2264      	movs	r2, #100	; 0x64
 80014a0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80014ae:	4b20      	ldr	r3, [pc, #128]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014b0:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80014b4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80014bc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014de:	2200      	movs	r2, #0
 80014e0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014e2:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_CAN1_Init+0xa0>)
 80014e4:	f002 f802 	bl	80034ec <HAL_CAN_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80014ee:	f000 fa0f 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;		// Specify filter bank to use
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0; //Incoming data is saved here
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 80014fe:	f242 0360 	movw	r3, #8288	; 0x2060
 8001502:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0x0000;
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh= 0x103<<5;
 8001508:	f242 0360 	movw	r3, #8288	; 0x2060
 800150c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001516:	2301      	movs	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800151e:	463b      	mov	r3, r7
 8001520:	4619      	mov	r1, r3
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <MX_CAN1_Init+0xa0>)
 8001524:	f002 f8dd 	bl	80036e2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000260 	.word	0x20000260
 8001534:	40006400 	.word	0x40006400

08001538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b09a      	sub	sp, #104	; 0x68
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001558:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	222c      	movs	r2, #44	; 0x2c
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f005 ff32 	bl	80073dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001578:	4b43      	ldr	r3, [pc, #268]	; (8001688 <MX_TIM1_Init+0x150>)
 800157a:	4a44      	ldr	r2, [pc, #272]	; (800168c <MX_TIM1_Init+0x154>)
 800157c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800157e:	4b42      	ldr	r3, [pc, #264]	; (8001688 <MX_TIM1_Init+0x150>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <MX_TIM1_Init+0x150>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800158a:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <MX_TIM1_Init+0x150>)
 800158c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001590:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <MX_TIM1_Init+0x150>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001598:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <MX_TIM1_Init+0x150>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159e:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <MX_TIM1_Init+0x150>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a4:	4838      	ldr	r0, [pc, #224]	; (8001688 <MX_TIM1_Init+0x150>)
 80015a6:	f004 fa41 	bl	8005a2c <HAL_TIM_Base_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80015b0:	f000 f9ae 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015be:	4619      	mov	r1, r3
 80015c0:	4831      	ldr	r0, [pc, #196]	; (8001688 <MX_TIM1_Init+0x150>)
 80015c2:	f004 fbff 	bl	8005dc4 <HAL_TIM_ConfigClockSource>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015cc:	f000 f9a0 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015d0:	482d      	ldr	r0, [pc, #180]	; (8001688 <MX_TIM1_Init+0x150>)
 80015d2:	f004 fa82 	bl	8005ada <HAL_TIM_PWM_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80015dc:	f000 f998 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e0:	2300      	movs	r3, #0
 80015e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015f0:	4619      	mov	r1, r3
 80015f2:	4825      	ldr	r0, [pc, #148]	; (8001688 <MX_TIM1_Init+0x150>)
 80015f4:	f005 f82c 	bl	8006650 <HAL_TIMEx_MasterConfigSynchronization>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015fe:	f000 f987 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001602:	2360      	movs	r3, #96	; 0x60
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800160a:	2300      	movs	r3, #0
 800160c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800160e:	2300      	movs	r3, #0
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800161e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4818      	ldr	r0, [pc, #96]	; (8001688 <MX_TIM1_Init+0x150>)
 8001628:	f004 fab8 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001632:	f000 f96d 	bl	8001910 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800164a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001658:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <MX_TIM1_Init+0x150>)
 800166c:	f005 f856 	bl	800671c <HAL_TIMEx_ConfigBreakDeadTime>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001676:	f000 f94b 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <MX_TIM1_Init+0x150>)
 800167c:	f000 fa56 	bl	8001b2c <HAL_TIM_MspPostInit>

}
 8001680:	bf00      	nop
 8001682:	3768      	adds	r7, #104	; 0x68
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000288 	.word	0x20000288
 800168c:	40012c00 	.word	0x40012c00

08001690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_TIM2_Init+0x98>)
 80016b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_TIM2_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_TIM2_Init+0x98>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_TIM2_Init+0x98>)
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_TIM2_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_TIM2_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d6:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_TIM2_Init+0x98>)
 80016d8:	f004 f9a8 	bl	8005a2c <HAL_TIM_Base_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016e2:	f000 f915 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_TIM2_Init+0x98>)
 80016f4:	f004 fb66 	bl	8005dc4 <HAL_TIM_ConfigClockSource>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016fe:	f000 f907 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_TIM2_Init+0x98>)
 8001710:	f004 ff9e 	bl	8006650 <HAL_TIMEx_MasterConfigSynchronization>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800171a:	f000 f8f9 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200002d4 	.word	0x200002d4

0800172c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001732:	4a15      	ldr	r2, [pc, #84]	; (8001788 <MX_USART1_UART_Init+0x5c>)
 8001734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001738:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800173c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_USART1_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_USART1_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_USART1_UART_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_USART1_UART_Init+0x58>)
 8001770:	f005 f84c 	bl	800680c <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800177a:	f000 f8c9 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000320 	.word	0x20000320
 8001788:	40013800 	.word	0x40013800

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017a2:	4b57      	ldr	r3, [pc, #348]	; (8001900 <MX_GPIO_Init+0x174>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a56      	ldr	r2, [pc, #344]	; (8001900 <MX_GPIO_Init+0x174>)
 80017a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b54      	ldr	r3, [pc, #336]	; (8001900 <MX_GPIO_Init+0x174>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b51      	ldr	r3, [pc, #324]	; (8001900 <MX_GPIO_Init+0x174>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a50      	ldr	r2, [pc, #320]	; (8001900 <MX_GPIO_Init+0x174>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <MX_GPIO_Init+0x174>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <MX_GPIO_Init+0x174>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a4a      	ldr	r2, [pc, #296]	; (8001900 <MX_GPIO_Init+0x174>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b48      	ldr	r3, [pc, #288]	; (8001900 <MX_GPIO_Init+0x174>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b45      	ldr	r3, [pc, #276]	; (8001900 <MX_GPIO_Init+0x174>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a44      	ldr	r2, [pc, #272]	; (8001900 <MX_GPIO_Init+0x174>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b42      	ldr	r3, [pc, #264]	; (8001900 <MX_GPIO_Init+0x174>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <MX_GPIO_Init+0x174>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a3e      	ldr	r2, [pc, #248]	; (8001900 <MX_GPIO_Init+0x174>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <MX_GPIO_Init+0x174>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 800181a:	2200      	movs	r2, #0
 800181c:	f640 410f 	movw	r1, #3087	; 0xc0f
 8001820:	4838      	ldr	r0, [pc, #224]	; (8001904 <MX_GPIO_Init+0x178>)
 8001822:	f002 ff47 	bl	80046b4 <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	f248 0103 	movw	r1, #32771	; 0x8003
 800182c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001830:	f002 ff40 	bl	80046b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin|STPR_PWM_2_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f640 4105 	movw	r1, #3077	; 0xc05
 800183a:	4833      	ldr	r0, [pc, #204]	; (8001908 <MX_GPIO_Init+0x17c>)
 800183c:	f002 ff3a 	bl	80046b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2104      	movs	r1, #4
 8001844:	4831      	ldr	r0, [pc, #196]	; (800190c <MX_GPIO_Init+0x180>)
 8001846:	f002 ff35 	bl	80046b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 800184a:	f640 430f 	movw	r3, #3087	; 0xc0f
 800184e:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4828      	ldr	r0, [pc, #160]	; (8001904 <MX_GPIO_Init+0x178>)
 8001864:	f002 fd94 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin STPR_PWM_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin;
 8001868:	f248 0303 	movw	r3, #32771	; 0x8003
 800186c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001884:	f002 fd84 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin STPR_PWM_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin|STPR_PWM_2_Pin;
 8001888:	f640 4305 	movw	r3, #3077	; 0xc05
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4819      	ldr	r0, [pc, #100]	; (8001908 <MX_GPIO_Init+0x17c>)
 80018a2:	f002 fd75 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 80018a6:	f24f 2302 	movw	r3, #61954	; 0xf202
 80018aa:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	4813      	ldr	r0, [pc, #76]	; (8001908 <MX_GPIO_Init+0x17c>)
 80018bc:	f002 fd68 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 80018c0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80018c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <MX_GPIO_Init+0x178>)
 80018d6:	f002 fd5b 	bl	8004390 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 80018da:	2304      	movs	r3, #4
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4806      	ldr	r0, [pc, #24]	; (800190c <MX_GPIO_Init+0x180>)
 80018f2:	f002 fd4d 	bl	8004390 <HAL_GPIO_Init>

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	48000800 	.word	0x48000800
 8001908:	48000400 	.word	0x48000400
 800190c:	48000c00 	.word	0x48000c00

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001918:	e7fe      	b.n	8001918 <Error_Handler+0x8>
	...

0800191c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_MspInit+0x44>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_MspInit+0x44>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6613      	str	r3, [r2, #96]	; 0x60
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <HAL_MspInit+0x44>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x44>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x44>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6593      	str	r3, [r2, #88]	; 0x58
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x44>)
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0a0      	sub	sp, #128	; 0x80
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	225c      	movs	r2, #92	; 0x5c
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f005 fd29 	bl	80073dc <memset>
  if(hadc->Instance==ADC1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <HAL_ADC_MspInit+0xc0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d142      	bne.n	8001a1a <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001994:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001998:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800199a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800199e:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80019a0:	2301      	movs	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80019a8:	2310      	movs	r3, #16
 80019aa:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019ac:	2307      	movs	r3, #7
 80019ae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019be:	f107 0310 	add.w	r3, r7, #16
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fd28 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80019ce:	f7ff ff9f 	bl	8001910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_ADC_MspInit+0xc4>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	4a14      	ldr	r2, [pc, #80]	; (8001a28 <HAL_ADC_MspInit+0xc4>)
 80019d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_ADC_MspInit+0xc4>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_ADC_MspInit+0xc4>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_ADC_MspInit+0xc4>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_ADC_MspInit+0xc4>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 8001a02:	2310      	movs	r3, #16
 8001a04:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a06:	2303      	movs	r3, #3
 8001a08:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <HAL_ADC_MspInit+0xc8>)
 8001a16:	f002 fcbb 	bl	8004390 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3780      	adds	r7, #128	; 0x80
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	50040000 	.word	0x50040000
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	48000800 	.word	0x48000800

08001a30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <HAL_CAN_MspInit+0x90>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d131      	bne.n	8001ab6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_CAN_MspInit+0x94>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <HAL_CAN_MspInit+0x94>)
 8001a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_CAN_MspInit+0x94>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <HAL_CAN_MspInit+0x94>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a15      	ldr	r2, [pc, #84]	; (8001ac4 <HAL_CAN_MspInit+0x94>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_CAN_MspInit+0x94>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a90:	2303      	movs	r3, #3
 8001a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a94:	2309      	movs	r3, #9
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f002 fc75 	bl	8004390 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2014      	movs	r0, #20
 8001aac:	f002 fc39 	bl	8004322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ab0:	2014      	movs	r0, #20
 8001ab2:	f002 fc52 	bl	800435a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40006400 	.word	0x40006400
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	; (8001b24 <HAL_TIM_Base_MspInit+0x5c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10c      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_TIM_Base_MspInit+0x60>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <HAL_TIM_Base_MspInit+0x60>)
 8001ae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_TIM_Base_MspInit+0x60>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001af2:	e010      	b.n	8001b16 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001afc:	d10b      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_TIM_Base_MspInit+0x60>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_TIM_Base_MspInit+0x60>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <HAL_TIM_Base_MspInit+0x60>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40012c00 	.word	0x40012c00
 8001b28:	40021000 	.word	0x40021000

08001b2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_TIM_MspPostInit+0x68>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d11d      	bne.n	8001b8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_TIM_MspPostInit+0x6c>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <HAL_TIM_MspPostInit+0x6c>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_TIM_MspPostInit+0x6c>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 8001b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b86:	f002 fc03 	bl	8004390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0a0      	sub	sp, #128	; 0x80
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	225c      	movs	r2, #92	; 0x5c
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f005 fc0d 	bl	80073dc <memset>
  if(huart->Instance==USART1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_UART_MspInit+0xa8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d137      	bne.n	8001c3c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f003 fc1d 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001be4:	f7ff fe94 	bl	8001910 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_UART_MspInit+0xac>)
 8001bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bec:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <HAL_UART_MspInit+0xac>)
 8001bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf2:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_UART_MspInit+0xac>)
 8001bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_UART_MspInit+0xac>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_UART_MspInit+0xac>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_UART_MspInit+0xac>)
 8001c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c38:	f002 fbaa 	bl	8004390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3780      	adds	r7, #128	; 0x80
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40021000 	.word	0x40021000

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <NMI_Handler+0x4>

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f000 f946 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <CAN1_RX0_IRQHandler+0x10>)
 8001ca6:	f002 f832 	bl	8003d0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000260 	.word	0x20000260

08001cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_kill>:

int _kill(int pid, int sig)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cce:	f005 fb5b 	bl	8007388 <__errno>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2216      	movs	r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
	return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_exit>:

void _exit (int status)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ffe7 	bl	8001cc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cf6:	e7fe      	b.n	8001cf6 <_exit+0x12>

08001cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e00a      	b.n	8001d20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d0a:	f3af 8000 	nop.w
 8001d0e:	4601      	mov	r1, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	b2ca      	uxtb	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf0      	blt.n	8001d0a <_read+0x12>
	}

return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	return -1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_isatty>:

int _isatty(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
	return 1;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da4:	4a14      	ldr	r2, [pc, #80]	; (8001df8 <_sbrk+0x5c>)
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <_sbrk+0x60>)
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <_sbrk+0x64>)
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <_sbrk+0x68>)
 8001dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d207      	bcs.n	8001ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dcc:	f005 fadc 	bl	8007388 <__errno>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dda:	e009      	b.n	8001df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <_sbrk+0x64>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <_sbrk+0x64>)
 8001dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20010000 	.word	0x20010000
 8001dfc:	00000400 	.word	0x00000400
 8001e00:	200003ec 	.word	0x200003ec
 8001e04:	20000408 	.word	0x20000408

08001e08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <SystemInit+0x20>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <SystemInit+0x20>)
 8001e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e30:	f7ff ffea 	bl	8001e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e34:	480c      	ldr	r0, [pc, #48]	; (8001e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e36:	490d      	ldr	r1, [pc, #52]	; (8001e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <LoopForever+0xe>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	; (8001e78 <LoopForever+0x16>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f005 fa9b 	bl	8007394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5e:	f7ff f923 	bl	80010a8 <main>

08001e62 <LoopForever>:

LoopForever:
    b LoopForever
 8001e62:	e7fe      	b.n	8001e62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e70:	0800c264 	.word	0x0800c264
  ldr r2, =_sbss
 8001e74:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e78:	20000404 	.word	0x20000404

08001e7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC1_IRQHandler>

08001e7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f002 fa3f 	bl	800430c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8e:	200f      	movs	r0, #15
 8001e90:	f000 f80e 	bl	8001eb0 <HAL_InitTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	71fb      	strb	r3, [r7, #7]
 8001e9e:	e001      	b.n	8001ea4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ea0:	f7ff fd3c 	bl	800191c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ebc:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_InitTick+0x6c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_InitTick+0x70>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_InitTick+0x6c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f002 fa4b 	bl	8004376 <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10f      	bne.n	8001f06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d809      	bhi.n	8001f00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f002 fa15 	bl	8004322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <HAL_InitTick+0x74>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e007      	b.n	8001f10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e004      	b.n	8001f10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	e001      	b.n	8001f10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	200003f0 	.word	0x200003f0

08001f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return uwTick;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_GetTick+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	200003f0 	.word	0x200003f0

08001f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f70:	f7ff ffee 	bl	8001f50 <HAL_GetTick>
 8001f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d005      	beq.n	8001f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_Delay+0x44>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f8e:	bf00      	nop
 8001f90:	f7ff ffde 	bl	8001f50 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d8f7      	bhi.n	8001f90 <HAL_Delay+0x28>
  {
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000008 	.word	0x20000008

08001fb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3360      	adds	r3, #96	; 0x60
 800202a:	461a      	mov	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b08      	ldr	r3, [pc, #32]	; (800205c <LL_ADC_SetOffset+0x44>)
 800203a:	4013      	ands	r3, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	4313      	orrs	r3, r2
 8002048:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002050:	bf00      	nop
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	03fff000 	.word	0x03fff000

08002060 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3360      	adds	r3, #96	; 0x60
 800206e:	461a      	mov	r2, r3
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	3360      	adds	r3, #96	; 0x60
 800209c:	461a      	mov	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	3330      	adds	r3, #48	; 0x30
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	4413      	add	r3, r2
 8002106:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	211f      	movs	r1, #31
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	401a      	ands	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	0e9b      	lsrs	r3, r3, #26
 8002120:	f003 011f 	and.w	r1, r3, #31
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	431a      	orrs	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002134:	bf00      	nop
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3314      	adds	r3, #20
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	0e5b      	lsrs	r3, r3, #25
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	0d1b      	lsrs	r3, r3, #20
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	2107      	movs	r1, #7
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	401a      	ands	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	0d1b      	lsrs	r3, r3, #20
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	431a      	orrs	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b0:	43db      	mvns	r3, r3
 80021b2:	401a      	ands	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f003 0318 	and.w	r3, r3, #24
 80021ba:	4908      	ldr	r1, [pc, #32]	; (80021dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80021bc:	40d9      	lsrs	r1, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	400b      	ands	r3, r1
 80021c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c6:	431a      	orrs	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	0007ffff 	.word	0x0007ffff

080021e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6093      	str	r3, [r2, #8]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002218:	d101      	bne.n	800221e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800223c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002240:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002268:	d101      	bne.n	800226e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800228c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b8:	f043 0202 	orr.w	r2, r3, #2
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <LL_ADC_IsEnabled+0x18>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <LL_ADC_IsEnabled+0x1a>
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d101      	bne.n	800230a <LL_ADC_IsDisableOngoing+0x18>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <LL_ADC_IsDisableOngoing+0x1a>
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800232c:	f043 0204 	orr.w	r2, r3, #4
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002350:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002354:	f043 0210 	orr.w	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d101      	bne.n	8002380 <LL_ADC_REG_IsConversionOngoing+0x18>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800239e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a2:	f043 0220 	orr.w	r2, r3, #32
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d101      	bne.n	80023ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e12c      	b.n	8002650 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff faad 	bl	8001964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fef1 	bl	8002204 <LL_ADC_IsDeepPowerDownEnabled>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fed7 	bl	80021e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff0c 	bl	8002254 <LL_ADC_IsInternalRegulatorEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fef0 	bl	800222c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244c:	4b82      	ldr	r3, [pc, #520]	; (8002658 <HAL_ADC_Init+0x27c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	4a82      	ldr	r2, [pc, #520]	; (800265c <HAL_ADC_Init+0x280>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	3301      	adds	r3, #1
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002460:	e002      	b.n	8002468 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3b01      	subs	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f9      	bne.n	8002462 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff feee 	bl	8002254 <LL_ADC_IsInternalRegulatorEnabled>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	f043 0210 	orr.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff62 	bl	8002368 <LL_ADC_REG_IsConversionOngoing>
 80024a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 80c5 	bne.w	800263e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 80c1 	bne.w	800263e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024c4:	f043 0202 	orr.w	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fefb 	bl	80022cc <LL_ADC_IsEnabled>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10b      	bne.n	80024f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024dc:	4860      	ldr	r0, [pc, #384]	; (8002660 <HAL_ADC_Init+0x284>)
 80024de:	f7ff fef5 	bl	80022cc <LL_ADC_IsEnabled>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4619      	mov	r1, r3
 80024ee:	485d      	ldr	r0, [pc, #372]	; (8002664 <HAL_ADC_Init+0x288>)
 80024f0:	f7ff fd5e 	bl	8001fb0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e5b      	ldrb	r3, [r3, #25]
 80024f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002504:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800250a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002512:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d106      	bne.n	8002530 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	3b01      	subs	r3, #1
 8002528:	045b      	lsls	r3, r3, #17
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	4b45      	ldr	r3, [pc, #276]	; (8002668 <HAL_ADC_Init+0x28c>)
 8002554:	4013      	ands	r3, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	430b      	orrs	r3, r1
 800255e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff feff 	bl	8002368 <LL_ADC_REG_IsConversionOngoing>
 800256a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff20 	bl	80023b6 <LL_ADC_INJ_IsConversionOngoing>
 8002576:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d13d      	bne.n	80025fa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d13a      	bne.n	80025fa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002588:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002590:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a0:	f023 0302 	bic.w	r3, r3, #2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	69b9      	ldr	r1, [r7, #24]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d118      	bne.n	80025ea <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025ce:	4311      	orrs	r1, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025da:	430a      	orrs	r2, r1
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	611a      	str	r2, [r3, #16]
 80025e8:	e007      	b.n	80025fa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10c      	bne.n	800261c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f023 010f 	bic.w	r1, r3, #15
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
 800261a:	e007      	b.n	800262c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 020f 	bic.w	r2, r2, #15
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	f023 0303 	bic.w	r3, r3, #3
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
 800263c:	e007      	b.n	800264e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800264e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000000 	.word	0x20000000
 800265c:	053e2d63 	.word	0x053e2d63
 8002660:	50040000 	.word	0x50040000
 8002664:	50040300 	.word	0x50040300
 8002668:	fff0c007 	.word	0xfff0c007

0800266c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fe75 	bl	8002368 <LL_ADC_REG_IsConversionOngoing>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d14f      	bne.n	8002724 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_ADC_Start+0x26>
 800268e:	2302      	movs	r3, #2
 8002690:	e04b      	b.n	800272a <HAL_ADC_Start+0xbe>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fdb4 	bl	8003208 <ADC_Enable>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d137      	bne.n	800271a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b2:	f023 0301 	bic.w	r3, r3, #1
 80026b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ca:	d106      	bne.n	80026da <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	f023 0206 	bic.w	r2, r3, #6
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	659a      	str	r2, [r3, #88]	; 0x58
 80026d8:	e002      	b.n	80026e0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	221c      	movs	r2, #28
 80026e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002706:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fe00 	bl	8002318 <LL_ADC_REG_StartConversion>
 8002718:	e006      	b.n	8002728 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002722:	e001      	b.n	8002728 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002724:	2302      	movs	r3, #2
 8002726:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_ADC_Stop+0x16>
 8002744:	2302      	movs	r3, #2
 8002746:	e023      	b.n	8002790 <HAL_ADC_Stop+0x5e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002750:	2103      	movs	r1, #3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fc9c 	bl	8003090 <ADC_ConversionStop>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d111      	bne.n	8002786 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fdd6 	bl	8003314 <ADC_Disable>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d109      	bne.n	8002786 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	f043 0201 	orr.w	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d102      	bne.n	80027b0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80027aa:	2308      	movs	r3, #8
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e010      	b.n	80027d2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f043 0220 	orr.w	r2, r3, #32
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06f      	b.n	80028ae <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80027ce:	2304      	movs	r3, #4
 80027d0:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027d2:	f7ff fbbd 	bl	8001f50 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027d8:	e021      	b.n	800281e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d01d      	beq.n	800281e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027e2:	f7ff fbb5 	bl	8001f50 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <HAL_ADC_PollForConversion+0x60>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d112      	bne.n	800281e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10b      	bne.n	800281e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f043 0204 	orr.w	r2, r3, #4
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e047      	b.n	80028ae <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0d6      	beq.n	80027da <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fc40 	bl	80020c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01c      	beq.n	8002882 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7e5b      	ldrb	r3, [r3, #25]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d118      	bne.n	8002882 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b08      	cmp	r3, #8
 800285c:	d111      	bne.n	8002882 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287a:	f043 0201 	orr.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d104      	bne.n	800289a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2208      	movs	r2, #8
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e008      	b.n	80028ac <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d103      	bne.n	80028ac <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	220c      	movs	r2, #12
 80028aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b0b6      	sub	sp, #216	; 0xd8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x22>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e3b9      	b.n	8003066 <HAL_ADC_ConfigChannel+0x796>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fd32 	bl	8002368 <LL_ADC_REG_IsConversionOngoing>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 839e 	bne.w	8003048 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b05      	cmp	r3, #5
 8002912:	d824      	bhi.n	800295e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	3b02      	subs	r3, #2
 800291a:	2b03      	cmp	r3, #3
 800291c:	d81b      	bhi.n	8002956 <HAL_ADC_ConfigChannel+0x86>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <HAL_ADC_ConfigChannel+0x54>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	08002935 	.word	0x08002935
 8002928:	0800293d 	.word	0x0800293d
 800292c:	08002945 	.word	0x08002945
 8002930:	0800294d 	.word	0x0800294d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	220c      	movs	r2, #12
 8002938:	605a      	str	r2, [r3, #4]
          break;
 800293a:	e011      	b.n	8002960 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2212      	movs	r2, #18
 8002940:	605a      	str	r2, [r3, #4]
          break;
 8002942:	e00d      	b.n	8002960 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2218      	movs	r2, #24
 8002948:	605a      	str	r2, [r3, #4]
          break;
 800294a:	e009      	b.n	8002960 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002952:	605a      	str	r2, [r3, #4]
          break;
 8002954:	e004      	b.n	8002960 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2206      	movs	r2, #6
 800295a:	605a      	str	r2, [r3, #4]
          break;
 800295c:	e000      	b.n	8002960 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800295e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	f7ff fbbb 	bl	80020e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fcf6 	bl	8002368 <LL_ADC_REG_IsConversionOngoing>
 800297c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fd16 	bl	80023b6 <LL_ADC_INJ_IsConversionOngoing>
 800298a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800298e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 81a6 	bne.w	8002ce4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002998:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 81a1 	bne.w	8002ce4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6819      	ldr	r1, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f7ff fbc6 	bl	8002140 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	08db      	lsrs	r3, r3, #3
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d00a      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6919      	ldr	r1, [r3, #16]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029e6:	f7ff fb17 	bl	8002018 <LL_ADC_SetOffset>
 80029ea:	e17b      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fb34 	bl	8002060 <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x148>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fb29 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	f003 021f 	and.w	r2, r3, #31
 8002a16:	e01e      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x186>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fb1e 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002a46:	2320      	movs	r3, #32
 8002a48:	e004      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002a4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a4e:	fab3 f383 	clz	r3, r3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d105      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x19e>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0e9b      	lsrs	r3, r3, #26
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	e018      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x1d0>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002a92:	2320      	movs	r3, #32
 8002a94:	e004      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d106      	bne.n	8002ab2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff faed 	bl	800208c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fad1 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x20e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fac6 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	0e9b      	lsrs	r3, r3, #26
 8002ad8:	f003 021f 	and.w	r2, r3, #31
 8002adc:	e01e      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x24c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fabb 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002afc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	e004      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x264>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	e018      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x296>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e004      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002b5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d106      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2101      	movs	r1, #1
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fa8a 	bl	800208c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fa6e 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x2d4>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2102      	movs	r1, #2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fa63 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	f003 021f 	and.w	r2, r3, #31
 8002ba2:	e01e      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x312>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2102      	movs	r1, #2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fa58 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	e004      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002bd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bda:	fab3 f383 	clz	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x32a>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	0e9b      	lsrs	r3, r3, #26
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	e016      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x358>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	e004      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d106      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2102      	movs	r1, #2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fa29 	bl	800208c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2103      	movs	r1, #3
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fa0d 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x396>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2103      	movs	r1, #3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fa02 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	0e9b      	lsrs	r3, r3, #26
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	e017      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x3c6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2103      	movs	r1, #3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f9f7 	bl	8002060 <LL_ADC_GetOffsetChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c80:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e003      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x3de>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	0e9b      	lsrs	r3, r3, #26
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	e011      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x402>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e003      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d106      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2103      	movs	r1, #3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f9d4 	bl	800208c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff faef 	bl	80022cc <LL_ADC_IsEnabled>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f040 813f 	bne.w	8002f74 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6819      	ldr	r1, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f7ff fa48 	bl	8002198 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a8e      	ldr	r2, [pc, #568]	; (8002f48 <HAL_ADC_ConfigChannel+0x678>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	f040 8130 	bne.w	8002f74 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x46c>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	0e9b      	lsrs	r3, r3, #26
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2b09      	cmp	r3, #9
 8002d32:	bf94      	ite	ls
 8002d34:	2301      	movls	r3, #1
 8002d36:	2300      	movhi	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e019      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x4a0>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d54:	2320      	movs	r3, #32
 8002d56:	e003      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2b09      	cmp	r3, #9
 8002d68:	bf94      	ite	ls
 8002d6a:	2301      	movls	r3, #1
 8002d6c:	2300      	movhi	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d079      	beq.n	8002e68 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x4c0>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	3301      	adds	r3, #1
 8002d88:	069b      	lsls	r3, r3, #26
 8002d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d8e:	e015      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x4ec>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002da8:	2320      	movs	r3, #32
 8002daa:	e003      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3301      	adds	r3, #1
 8002db6:	069b      	lsls	r3, r3, #26
 8002db8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x50c>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	0e9b      	lsrs	r3, r3, #26
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	e017      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x53c>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de4:	fa93 f3a3 	rbit	r3, r3
 8002de8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002df4:	2320      	movs	r3, #32
 8002df6:	e003      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	3301      	adds	r3, #1
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	2101      	movs	r1, #1
 8002e08:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0c:	ea42 0103 	orr.w	r1, r2, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x562>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	3301      	adds	r3, #1
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	051b      	lsls	r3, r3, #20
 8002e30:	e018      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x594>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	e003      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e50:	fab3 f383 	clz	r3, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e64:	430b      	orrs	r3, r1
 8002e66:	e080      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d107      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x5b4>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	069b      	lsls	r3, r3, #26
 8002e7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e82:	e015      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x5e0>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e9c:	2320      	movs	r3, #32
 8002e9e:	e003      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	069b      	lsls	r3, r3, #26
 8002eac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d109      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x600>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	2101      	movs	r1, #1
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	e017      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x630>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	fa93 f3a3 	rbit	r3, r3
 8002edc:	61fb      	str	r3, [r7, #28]
  return result;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	e003      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	fab3 f383 	clz	r3, r3
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f003 031f 	and.w	r3, r3, #31
 8002efa:	2101      	movs	r1, #1
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	ea42 0103 	orr.w	r1, r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10d      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x65c>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	3301      	adds	r3, #1
 8002f18:	f003 021f 	and.w	r2, r3, #31
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	3b1e      	subs	r3, #30
 8002f24:	051b      	lsls	r3, r3, #20
 8002f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	e01d      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x698>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	613b      	str	r3, [r7, #16]
  return result;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002f44:	2320      	movs	r3, #32
 8002f46:	e005      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x684>
 8002f48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	fab3 f383 	clz	r3, r3
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	3301      	adds	r3, #1
 8002f56:	f003 021f 	and.w	r2, r3, #31
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	3b1e      	subs	r3, #30
 8002f62:	051b      	lsls	r3, r3, #20
 8002f64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	6892      	ldr	r2, [r2, #8]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7ff f8e6 	bl	8002140 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <HAL_ADC_ConfigChannel+0x7a0>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d06c      	beq.n	800305a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f80:	483c      	ldr	r0, [pc, #240]	; (8003074 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f82:	f7ff f83b 	bl	8001ffc <LL_ADC_GetCommonPathInternalCh>
 8002f86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a3a      	ldr	r2, [pc, #232]	; (8003078 <HAL_ADC_ConfigChannel+0x7a8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d127      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d121      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a35      	ldr	r2, [pc, #212]	; (800307c <HAL_ADC_ConfigChannel+0x7ac>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d157      	bne.n	800305a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002faa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	482f      	ldr	r0, [pc, #188]	; (8003074 <HAL_ADC_ConfigChannel+0x7a4>)
 8002fb6:	f7ff f80e 	bl	8001fd6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fba:	4b31      	ldr	r3, [pc, #196]	; (8003080 <HAL_ADC_ConfigChannel+0x7b0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	099b      	lsrs	r3, r3, #6
 8002fc0:	4a30      	ldr	r2, [pc, #192]	; (8003084 <HAL_ADC_ConfigChannel+0x7b4>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	099b      	lsrs	r3, r3, #6
 8002fc8:	1c5a      	adds	r2, r3, #1
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fd4:	e002      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f9      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fe2:	e03a      	b.n	800305a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a27      	ldr	r2, [pc, #156]	; (8003088 <HAL_ADC_ConfigChannel+0x7b8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d113      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x746>
 8002fee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <HAL_ADC_ConfigChannel+0x7ac>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d12a      	bne.n	800305a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003004:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300c:	4619      	mov	r1, r3
 800300e:	4819      	ldr	r0, [pc, #100]	; (8003074 <HAL_ADC_ConfigChannel+0x7a4>)
 8003010:	f7fe ffe1 	bl	8001fd6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003014:	e021      	b.n	800305a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <HAL_ADC_ConfigChannel+0x7bc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d11c      	bne.n	800305a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d116      	bne.n	800305a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a12      	ldr	r2, [pc, #72]	; (800307c <HAL_ADC_ConfigChannel+0x7ac>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d111      	bne.n	800305a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003036:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800303a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800303e:	4619      	mov	r1, r3
 8003040:	480c      	ldr	r0, [pc, #48]	; (8003074 <HAL_ADC_ConfigChannel+0x7a4>)
 8003042:	f7fe ffc8 	bl	8001fd6 <LL_ADC_SetCommonPathInternalCh>
 8003046:	e008      	b.n	800305a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f043 0220 	orr.w	r2, r3, #32
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003062:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003066:	4618      	mov	r0, r3
 8003068:	37d8      	adds	r7, #216	; 0xd8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	80080000 	.word	0x80080000
 8003074:	50040300 	.word	0x50040300
 8003078:	c7520000 	.word	0xc7520000
 800307c:	50040000 	.word	0x50040000
 8003080:	20000000 	.word	0x20000000
 8003084:	053e2d63 	.word	0x053e2d63
 8003088:	cb840000 	.word	0xcb840000
 800308c:	80000001 	.word	0x80000001

08003090 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff f95e 	bl	8002368 <LL_ADC_REG_IsConversionOngoing>
 80030ac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f97f 	bl	80023b6 <LL_ADC_INJ_IsConversionOngoing>
 80030b8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8098 	beq.w	80031f8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d02a      	beq.n	800312c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7e5b      	ldrb	r3, [r3, #25]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d126      	bne.n	800312c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7e1b      	ldrb	r3, [r3, #24]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d122      	bne.n	800312c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80030ea:	e014      	b.n	8003116 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4a45      	ldr	r2, [pc, #276]	; (8003204 <ADC_ConversionStop+0x174>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d90d      	bls.n	8003110 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e074      	b.n	80031fa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	3301      	adds	r3, #1
 8003114:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d1e3      	bne.n	80030ec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2240      	movs	r2, #64	; 0x40
 800312a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d014      	beq.n	800315c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff f916 	bl	8002368 <LL_ADC_REG_IsConversionOngoing>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff f8d3 	bl	80022f2 <LL_ADC_IsDisableOngoing>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f8f2 	bl	8002340 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d014      	beq.n	800318c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff f925 	bl	80023b6 <LL_ADC_INJ_IsConversionOngoing>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff f8bb 	bl	80022f2 <LL_ADC_IsDisableOngoing>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff f901 	bl	800238e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d005      	beq.n	800319e <ADC_ConversionStop+0x10e>
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d105      	bne.n	80031a4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003198:	230c      	movs	r3, #12
 800319a:	617b      	str	r3, [r7, #20]
        break;
 800319c:	e005      	b.n	80031aa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800319e:	2308      	movs	r3, #8
 80031a0:	617b      	str	r3, [r7, #20]
        break;
 80031a2:	e002      	b.n	80031aa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031a4:	2304      	movs	r3, #4
 80031a6:	617b      	str	r3, [r7, #20]
        break;
 80031a8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031aa:	f7fe fed1 	bl	8001f50 <HAL_GetTick>
 80031ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031b0:	e01b      	b.n	80031ea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031b2:	f7fe fecd 	bl	8001f50 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b05      	cmp	r3, #5
 80031be:	d914      	bls.n	80031ea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	f043 0210 	orr.w	r2, r3, #16
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	f043 0201 	orr.w	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e007      	b.n	80031fa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1dc      	bne.n	80031b2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	a33fffff 	.word	0xa33fffff

08003208 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003210:	2300      	movs	r3, #0
 8003212:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff f857 	bl	80022cc <LL_ADC_IsEnabled>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d169      	bne.n	80032f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	4b36      	ldr	r3, [pc, #216]	; (8003304 <ADC_Enable+0xfc>)
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003236:	f043 0210 	orr.w	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003242:	f043 0201 	orr.w	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e055      	b.n	80032fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff f812 	bl	800227c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003258:	482b      	ldr	r0, [pc, #172]	; (8003308 <ADC_Enable+0x100>)
 800325a:	f7fe fecf 	bl	8001ffc <LL_ADC_GetCommonPathInternalCh>
 800325e:	4603      	mov	r3, r0
 8003260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <ADC_Enable+0x104>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	4a28      	ldr	r2, [pc, #160]	; (8003310 <ADC_Enable+0x108>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003282:	e002      	b.n	800328a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	3b01      	subs	r3, #1
 8003288:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f9      	bne.n	8003284 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003290:	f7fe fe5e 	bl	8001f50 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003296:	e028      	b.n	80032ea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff f815 	bl	80022cc <LL_ADC_IsEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d104      	bne.n	80032b2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fe ffe5 	bl	800227c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032b2:	f7fe fe4d 	bl	8001f50 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d914      	bls.n	80032ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00d      	beq.n	80032ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e007      	b.n	80032fa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d1cf      	bne.n	8003298 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	8000003f 	.word	0x8000003f
 8003308:	50040300 	.word	0x50040300
 800330c:	20000000 	.word	0x20000000
 8003310:	053e2d63 	.word	0x053e2d63

08003314 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7fe ffe6 	bl	80022f2 <LL_ADC_IsDisableOngoing>
 8003326:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe ffcd 	bl	80022cc <LL_ADC_IsEnabled>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d047      	beq.n	80033c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d144      	bne.n	80033c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030d 	and.w	r3, r3, #13
 8003348:	2b01      	cmp	r3, #1
 800334a:	d10c      	bne.n	8003366 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe ffa7 	bl	80022a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2203      	movs	r2, #3
 800335c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800335e:	f7fe fdf7 	bl	8001f50 <HAL_GetTick>
 8003362:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003364:	e029      	b.n	80033ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f043 0210 	orr.w	r2, r3, #16
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e023      	b.n	80033ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003382:	f7fe fde5 	bl	8001f50 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d914      	bls.n	80033ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00d      	beq.n	80033ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a2:	f043 0210 	orr.w	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e007      	b.n	80033ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1dc      	bne.n	8003382 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <LL_ADC_StartCalibration>:
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80033e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	609a      	str	r2, [r3, #8]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_ADC_IsCalibrationOnGoing>:
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003418:	d101      	bne.n	800341e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_ADCEx_Calibration_Start+0x1c>
 8003444:	2302      	movs	r3, #2
 8003446:	e04d      	b.n	80034e4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff5f 	bl	8003314 <ADC_Disable>
 8003456:	4603      	mov	r3, r0
 8003458:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d136      	bne.n	80034ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003464:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003468:	f023 0302 	bic.w	r3, r3, #2
 800346c:	f043 0202 	orr.w	r2, r3, #2
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff ffa9 	bl	80033d2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003480:	e014      	b.n	80034ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3301      	adds	r3, #1
 8003486:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800348e:	d30d      	bcc.n	80034ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f023 0312 	bic.w	r3, r3, #18
 8003498:	f043 0210 	orr.w	r2, r3, #16
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e01b      	b.n	80034e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ffa7 	bl	8003404 <LL_ADC_IsCalibrationOnGoing>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e2      	bne.n	8003482 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f023 0303 	bic.w	r3, r3, #3
 80034c4:	f043 0201 	orr.w	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	655a      	str	r2, [r3, #84]	; 0x54
 80034cc:	e005      	b.n	80034da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d2:	f043 0210 	orr.w	r2, r3, #16
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0ed      	b.n	80036da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fe fa90 	bl	8001a30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003520:	f7fe fd16 	bl	8001f50 <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003526:	e012      	b.n	800354e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003528:	f7fe fd12 	bl	8001f50 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b0a      	cmp	r3, #10
 8003534:	d90b      	bls.n	800354e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2205      	movs	r2, #5
 8003546:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0c5      	b.n	80036da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0e5      	beq.n	8003528 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0202 	bic.w	r2, r2, #2
 800356a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800356c:	f7fe fcf0 	bl	8001f50 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003572:	e012      	b.n	800359a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003574:	f7fe fcec 	bl	8001f50 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b0a      	cmp	r3, #10
 8003580:	d90b      	bls.n	800359a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2205      	movs	r2, #5
 8003592:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e09f      	b.n	80036da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e5      	bne.n	8003574 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7e1b      	ldrb	r3, [r3, #24]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e007      	b.n	80035d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	7e5b      	ldrb	r3, [r3, #25]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d108      	bne.n	80035ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	e007      	b.n	80035fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7e9b      	ldrb	r3, [r3, #26]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d108      	bne.n	8003616 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0220 	orr.w	r2, r2, #32
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e007      	b.n	8003626 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0220 	bic.w	r2, r2, #32
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7edb      	ldrb	r3, [r3, #27]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d108      	bne.n	8003640 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0210 	bic.w	r2, r2, #16
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e007      	b.n	8003650 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0210 	orr.w	r2, r2, #16
 800364e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7f1b      	ldrb	r3, [r3, #28]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d108      	bne.n	800366a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0208 	orr.w	r2, r2, #8
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e007      	b.n	800367a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0208 	bic.w	r2, r2, #8
 8003678:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	7f5b      	ldrb	r3, [r3, #29]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0204 	orr.w	r2, r2, #4
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e007      	b.n	80036a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0204 	bic.w	r2, r2, #4
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	ea42 0103 	orr.w	r1, r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	1e5a      	subs	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b087      	sub	sp, #28
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d003      	beq.n	8003708 <HAL_CAN_ConfigFilter+0x26>
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	2b02      	cmp	r3, #2
 8003704:	f040 80aa 	bne.w	800385c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800370e:	f043 0201 	orr.w	r2, r3, #1
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	2201      	movs	r2, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	43db      	mvns	r3, r3
 8003732:	401a      	ands	r2, r3
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d123      	bne.n	800378a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	43db      	mvns	r3, r3
 800374c:	401a      	ands	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003764:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3248      	adds	r2, #72	; 0x48
 800376a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800377e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003780:	6979      	ldr	r1, [r7, #20]
 8003782:	3348      	adds	r3, #72	; 0x48
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d122      	bne.n	80037d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	431a      	orrs	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3248      	adds	r2, #72	; 0x48
 80037b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037ce:	6979      	ldr	r1, [r7, #20]
 80037d0:	3348      	adds	r3, #72	; 0x48
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80037f2:	e007      	b.n	8003804 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	431a      	orrs	r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	43db      	mvns	r3, r3
 8003816:	401a      	ands	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800381e:	e007      	b.n	8003830 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	431a      	orrs	r2, r3
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d107      	bne.n	8003848 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	431a      	orrs	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800384e:	f023 0201 	bic.w	r2, r3, #1
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	e006      	b.n	800386a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d12e      	bne.n	80038e8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038a2:	f7fe fb55 	bl	8001f50 <HAL_GetTick>
 80038a6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038a8:	e012      	b.n	80038d0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038aa:	f7fe fb51 	bl	8001f50 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b0a      	cmp	r3, #10
 80038b6:	d90b      	bls.n	80038d0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2205      	movs	r2, #5
 80038c8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e012      	b.n	80038f6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e5      	bne.n	80038aa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	e006      	b.n	80038f6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80038fe:	b480      	push	{r7}
 8003900:	b089      	sub	sp, #36	; 0x24
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003912:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800391c:	7ffb      	ldrb	r3, [r7, #31]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d003      	beq.n	800392a <HAL_CAN_AddTxMessage+0x2c>
 8003922:	7ffb      	ldrb	r3, [r7, #31]
 8003924:	2b02      	cmp	r3, #2
 8003926:	f040 80ad 	bne.w	8003a84 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800393a:	2b00      	cmp	r3, #0
 800393c:	d105      	bne.n	800394a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8095 	beq.w	8003a74 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	0e1b      	lsrs	r3, r3, #24
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003954:	2201      	movs	r2, #1
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	409a      	lsls	r2, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10d      	bne.n	8003982 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003970:	68f9      	ldr	r1, [r7, #12]
 8003972:	6809      	ldr	r1, [r1, #0]
 8003974:	431a      	orrs	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3318      	adds	r3, #24
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	440b      	add	r3, r1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e00f      	b.n	80039a2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800398c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003996:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3318      	adds	r3, #24
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	440b      	add	r3, r1
 80039a0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6819      	ldr	r1, [r3, #0]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	3318      	adds	r3, #24
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	440b      	add	r3, r1
 80039b2:	3304      	adds	r3, #4
 80039b4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	7d1b      	ldrb	r3, [r3, #20]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d111      	bne.n	80039e2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3318      	adds	r3, #24
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	4413      	add	r3, r2
 80039ca:	3304      	adds	r3, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	6811      	ldr	r1, [r2, #0]
 80039d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3318      	adds	r3, #24
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	440b      	add	r3, r1
 80039de:	3304      	adds	r3, #4
 80039e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3307      	adds	r3, #7
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	061a      	lsls	r2, r3, #24
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3306      	adds	r3, #6
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3305      	adds	r3, #5
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	4313      	orrs	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	3204      	adds	r2, #4
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	4610      	mov	r0, r2
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	6811      	ldr	r1, [r2, #0]
 8003a0a:	ea43 0200 	orr.w	r2, r3, r0
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	440b      	add	r3, r1
 8003a14:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003a18:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3303      	adds	r3, #3
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	061a      	lsls	r2, r3, #24
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3302      	adds	r3, #2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	041b      	lsls	r3, r3, #16
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	4313      	orrs	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	7812      	ldrb	r2, [r2, #0]
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	6811      	ldr	r1, [r2, #0]
 8003a40:	ea43 0200 	orr.w	r2, r3, r0
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	440b      	add	r3, r1
 8003a4a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003a4e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	3318      	adds	r3, #24
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	4413      	add	r3, r2
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	6811      	ldr	r1, [r2, #0]
 8003a62:	f043 0201 	orr.w	r2, r3, #1
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	3318      	adds	r3, #24
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	440b      	add	r3, r1
 8003a6e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e00e      	b.n	8003a92 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e006      	b.n	8003a92 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
  }
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3724      	adds	r7, #36	; 0x24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b087      	sub	sp, #28
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ab2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ab4:	7dfb      	ldrb	r3, [r7, #23]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d003      	beq.n	8003ac2 <HAL_CAN_GetRxMessage+0x24>
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	f040 80f3 	bne.w	8003ca8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10e      	bne.n	8003ae6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d116      	bne.n	8003b04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0e7      	b.n	8003cb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0d8      	b.n	8003cb6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	331b      	adds	r3, #27
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	4413      	add	r3, r2
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0204 	and.w	r2, r3, #4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10c      	bne.n	8003b3c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	331b      	adds	r3, #27
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	4413      	add	r3, r2
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0d5b      	lsrs	r3, r3, #21
 8003b32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	331b      	adds	r3, #27
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	4413      	add	r3, r2
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	08db      	lsrs	r3, r3, #3
 8003b4c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	331b      	adds	r3, #27
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	4413      	add	r3, r2
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0202 	and.w	r2, r3, #2
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	331b      	adds	r3, #27
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	4413      	add	r3, r2
 8003b76:	3304      	adds	r3, #4
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 020f 	and.w	r2, r3, #15
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	331b      	adds	r3, #27
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3304      	adds	r3, #4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	331b      	adds	r3, #27
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	0c1b      	lsrs	r3, r3, #16
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0a1a      	lsrs	r2, r3, #8
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	0c1a      	lsrs	r2, r3, #16
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0e1a      	lsrs	r2, r3, #24
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	3303      	adds	r3, #3
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0a1a      	lsrs	r2, r3, #8
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	3305      	adds	r3, #5
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	0c1a      	lsrs	r2, r3, #16
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	3306      	adds	r3, #6
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	0e1a      	lsrs	r2, r3, #24
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	3307      	adds	r3, #7
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d108      	bne.n	8003c94 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68da      	ldr	r2, [r3, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0220 	orr.w	r2, r2, #32
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	e007      	b.n	8003ca4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0220 	orr.w	r2, r2, #32
 8003ca2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e006      	b.n	8003cb6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d002      	beq.n	8003ce0 <HAL_CAN_ActivateNotification+0x1e>
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d109      	bne.n	8003cf4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6959      	ldr	r1, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e006      	b.n	8003d02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
  }
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b08a      	sub	sp, #40	; 0x28
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d07c      	beq.n	8003e4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d023      	beq.n	8003da6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2201      	movs	r2, #1
 8003d64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f983 	bl	800407c <HAL_CAN_TxMailbox0CompleteCallback>
 8003d76:	e016      	b.n	8003da6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8a:	e00c      	b.n	8003da6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9e:	e002      	b.n	8003da6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f989 	bl	80040b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d024      	beq.n	8003dfa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003db8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f963 	bl	8004090 <HAL_CAN_TxMailbox1CompleteCallback>
 8003dca:	e016      	b.n	8003dfa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dde:	e00c      	b.n	8003dfa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
 8003df2:	e002      	b.n	8003dfa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f969 	bl	80040cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d024      	beq.n	8003e4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f943 	bl	80040a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8003e1e:	e016      	b.n	8003e4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
 8003e32:	e00c      	b.n	8003e4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
 8003e46:	e002      	b.n	8003e4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f949 	bl	80040e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00c      	beq.n	8003e72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2210      	movs	r2, #16
 8003e70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00b      	beq.n	8003e94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d006      	beq.n	8003e94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f930 	bl	80040f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7fd f8e7 	bl	8001080 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00c      	beq.n	8003ed6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00b      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d006      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2208      	movs	r2, #8
 8003ef0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f912 	bl	800411c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f8f9 	bl	8004108 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00b      	beq.n	8003f38 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d006      	beq.n	8003f38 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8fc 	bl	8004130 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d006      	beq.n	8003f5a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2208      	movs	r2, #8
 8003f52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8f5 	bl	8004144 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d07b      	beq.n	800405c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d072      	beq.n	8004054 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	f043 0304 	orr.w	r3, r3, #4
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d043      	beq.n	8004054 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d03e      	beq.n	8004054 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fdc:	2b60      	cmp	r3, #96	; 0x60
 8003fde:	d02b      	beq.n	8004038 <HAL_CAN_IRQHandler+0x32a>
 8003fe0:	2b60      	cmp	r3, #96	; 0x60
 8003fe2:	d82e      	bhi.n	8004042 <HAL_CAN_IRQHandler+0x334>
 8003fe4:	2b50      	cmp	r3, #80	; 0x50
 8003fe6:	d022      	beq.n	800402e <HAL_CAN_IRQHandler+0x320>
 8003fe8:	2b50      	cmp	r3, #80	; 0x50
 8003fea:	d82a      	bhi.n	8004042 <HAL_CAN_IRQHandler+0x334>
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d019      	beq.n	8004024 <HAL_CAN_IRQHandler+0x316>
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d826      	bhi.n	8004042 <HAL_CAN_IRQHandler+0x334>
 8003ff4:	2b30      	cmp	r3, #48	; 0x30
 8003ff6:	d010      	beq.n	800401a <HAL_CAN_IRQHandler+0x30c>
 8003ff8:	2b30      	cmp	r3, #48	; 0x30
 8003ffa:	d822      	bhi.n	8004042 <HAL_CAN_IRQHandler+0x334>
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	d002      	beq.n	8004006 <HAL_CAN_IRQHandler+0x2f8>
 8004000:	2b20      	cmp	r3, #32
 8004002:	d005      	beq.n	8004010 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004004:	e01d      	b.n	8004042 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	f043 0308 	orr.w	r3, r3, #8
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800400e:	e019      	b.n	8004044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	f043 0310 	orr.w	r3, r3, #16
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004018:	e014      	b.n	8004044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	f043 0320 	orr.w	r3, r3, #32
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004022:	e00f      	b.n	8004044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800402c:	e00a      	b.n	8004044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004036:	e005      	b.n	8004044 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004040:	e000      	b.n	8004044 <HAL_CAN_IRQHandler+0x336>
            break;
 8004042:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004052:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2204      	movs	r2, #4
 800405a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f872 	bl	8004158 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004074:	bf00      	nop
 8004076:	3728      	adds	r7, #40	; 0x28
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <__NVIC_SetPriorityGrouping>:
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <__NVIC_SetPriorityGrouping+0x44>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004188:	4013      	ands	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800419c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800419e:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <__NVIC_SetPriorityGrouping+0x44>)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	60d3      	str	r3, [r2, #12]
}
 80041a4:	bf00      	nop
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000ed00 	.word	0xe000ed00

080041b4 <__NVIC_GetPriorityGrouping>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041b8:	4b04      	ldr	r3, [pc, #16]	; (80041cc <__NVIC_GetPriorityGrouping+0x18>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	f003 0307 	and.w	r3, r3, #7
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <__NVIC_EnableIRQ>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	db0b      	blt.n	80041fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	f003 021f 	and.w	r2, r3, #31
 80041e8:	4907      	ldr	r1, [pc, #28]	; (8004208 <__NVIC_EnableIRQ+0x38>)
 80041ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ee:	095b      	lsrs	r3, r3, #5
 80041f0:	2001      	movs	r0, #1
 80041f2:	fa00 f202 	lsl.w	r2, r0, r2
 80041f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	e000e100 	.word	0xe000e100

0800420c <__NVIC_SetPriority>:
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421c:	2b00      	cmp	r3, #0
 800421e:	db0a      	blt.n	8004236 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	b2da      	uxtb	r2, r3
 8004224:	490c      	ldr	r1, [pc, #48]	; (8004258 <__NVIC_SetPriority+0x4c>)
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	0112      	lsls	r2, r2, #4
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	440b      	add	r3, r1
 8004230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004234:	e00a      	b.n	800424c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4908      	ldr	r1, [pc, #32]	; (800425c <__NVIC_SetPriority+0x50>)
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	3b04      	subs	r3, #4
 8004244:	0112      	lsls	r2, r2, #4
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	440b      	add	r3, r1
 800424a:	761a      	strb	r2, [r3, #24]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000e100 	.word	0xe000e100
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <NVIC_EncodePriority>:
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	; 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f1c3 0307 	rsb	r3, r3, #7
 800427a:	2b04      	cmp	r3, #4
 800427c:	bf28      	it	cs
 800427e:	2304      	movcs	r3, #4
 8004280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3304      	adds	r3, #4
 8004286:	2b06      	cmp	r3, #6
 8004288:	d902      	bls.n	8004290 <NVIC_EncodePriority+0x30>
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	3b03      	subs	r3, #3
 800428e:	e000      	b.n	8004292 <NVIC_EncodePriority+0x32>
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004294:	f04f 32ff 	mov.w	r2, #4294967295
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43da      	mvns	r2, r3
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	401a      	ands	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042a8:	f04f 31ff 	mov.w	r1, #4294967295
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	43d9      	mvns	r1, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	4313      	orrs	r3, r2
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3724      	adds	r7, #36	; 0x24
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <SysTick_Config>:
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042d8:	d301      	bcc.n	80042de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80042da:	2301      	movs	r3, #1
 80042dc:	e00f      	b.n	80042fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042de:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <SysTick_Config+0x40>)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042e6:	210f      	movs	r1, #15
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	f7ff ff8e 	bl	800420c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042f0:	4b05      	ldr	r3, [pc, #20]	; (8004308 <SysTick_Config+0x40>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042f6:	4b04      	ldr	r3, [pc, #16]	; (8004308 <SysTick_Config+0x40>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	e000e010 	.word	0xe000e010

0800430c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff29 	bl	800416c <__NVIC_SetPriorityGrouping>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b086      	sub	sp, #24
 8004326:	af00      	add	r7, sp, #0
 8004328:	4603      	mov	r3, r0
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004334:	f7ff ff3e 	bl	80041b4 <__NVIC_GetPriorityGrouping>
 8004338:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	6978      	ldr	r0, [r7, #20]
 8004340:	f7ff ff8e 	bl	8004260 <NVIC_EncodePriority>
 8004344:	4602      	mov	r2, r0
 8004346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff5d 	bl	800420c <__NVIC_SetPriority>
}
 8004352:	bf00      	nop
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff ff31 	bl	80041d0 <__NVIC_EnableIRQ>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b082      	sub	sp, #8
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff ffa2 	bl	80042c8 <SysTick_Config>
 8004384:	4603      	mov	r3, r0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800439e:	e154      	b.n	800464a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8146 	beq.w	8004644 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d005      	beq.n	80043d0 <HAL_GPIO_Init+0x40>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d130      	bne.n	8004432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	2203      	movs	r2, #3
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004406:	2201      	movs	r2, #1
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	f003 0201 	and.w	r2, r3, #1
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b03      	cmp	r3, #3
 800443c:	d017      	beq.n	800446e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	2203      	movs	r2, #3
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d123      	bne.n	80044c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	08da      	lsrs	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3208      	adds	r2, #8
 8004482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004486:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	220f      	movs	r2, #15
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	08da      	lsrs	r2, r3, #3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3208      	adds	r2, #8
 80044bc:	6939      	ldr	r1, [r7, #16]
 80044be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	2203      	movs	r2, #3
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 0203 	and.w	r2, r3, #3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80a0 	beq.w	8004644 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004504:	4b58      	ldr	r3, [pc, #352]	; (8004668 <HAL_GPIO_Init+0x2d8>)
 8004506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004508:	4a57      	ldr	r2, [pc, #348]	; (8004668 <HAL_GPIO_Init+0x2d8>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6613      	str	r3, [r2, #96]	; 0x60
 8004510:	4b55      	ldr	r3, [pc, #340]	; (8004668 <HAL_GPIO_Init+0x2d8>)
 8004512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800451c:	4a53      	ldr	r2, [pc, #332]	; (800466c <HAL_GPIO_Init+0x2dc>)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	3302      	adds	r3, #2
 8004524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	220f      	movs	r2, #15
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004546:	d019      	beq.n	800457c <HAL_GPIO_Init+0x1ec>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a49      	ldr	r2, [pc, #292]	; (8004670 <HAL_GPIO_Init+0x2e0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <HAL_GPIO_Init+0x1e8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a48      	ldr	r2, [pc, #288]	; (8004674 <HAL_GPIO_Init+0x2e4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00d      	beq.n	8004574 <HAL_GPIO_Init+0x1e4>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a47      	ldr	r2, [pc, #284]	; (8004678 <HAL_GPIO_Init+0x2e8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <HAL_GPIO_Init+0x1e0>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a46      	ldr	r2, [pc, #280]	; (800467c <HAL_GPIO_Init+0x2ec>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d101      	bne.n	800456c <HAL_GPIO_Init+0x1dc>
 8004568:	2304      	movs	r3, #4
 800456a:	e008      	b.n	800457e <HAL_GPIO_Init+0x1ee>
 800456c:	2307      	movs	r3, #7
 800456e:	e006      	b.n	800457e <HAL_GPIO_Init+0x1ee>
 8004570:	2303      	movs	r3, #3
 8004572:	e004      	b.n	800457e <HAL_GPIO_Init+0x1ee>
 8004574:	2302      	movs	r3, #2
 8004576:	e002      	b.n	800457e <HAL_GPIO_Init+0x1ee>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_GPIO_Init+0x1ee>
 800457c:	2300      	movs	r3, #0
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	f002 0203 	and.w	r2, r2, #3
 8004584:	0092      	lsls	r2, r2, #2
 8004586:	4093      	lsls	r3, r2
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800458e:	4937      	ldr	r1, [pc, #220]	; (800466c <HAL_GPIO_Init+0x2dc>)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	3302      	adds	r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800459c:	4b38      	ldr	r3, [pc, #224]	; (8004680 <HAL_GPIO_Init+0x2f0>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045c0:	4a2f      	ldr	r2, [pc, #188]	; (8004680 <HAL_GPIO_Init+0x2f0>)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045c6:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <HAL_GPIO_Init+0x2f0>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045ea:	4a25      	ldr	r2, [pc, #148]	; (8004680 <HAL_GPIO_Init+0x2f0>)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045f0:	4b23      	ldr	r3, [pc, #140]	; (8004680 <HAL_GPIO_Init+0x2f0>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004614:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <HAL_GPIO_Init+0x2f0>)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800461a:	4b19      	ldr	r3, [pc, #100]	; (8004680 <HAL_GPIO_Init+0x2f0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	43db      	mvns	r3, r3
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800463e:	4a10      	ldr	r2, [pc, #64]	; (8004680 <HAL_GPIO_Init+0x2f0>)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3301      	adds	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	f47f aea3 	bne.w	80043a0 <HAL_GPIO_Init+0x10>
  }
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40021000 	.word	0x40021000
 800466c:	40010000 	.word	0x40010000
 8004670:	48000400 	.word	0x48000400
 8004674:	48000800 	.word	0x48000800
 8004678:	48000c00 	.word	0x48000c00
 800467c:	48001000 	.word	0x48001000
 8004680:	40010400 	.word	0x40010400

08004684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	887b      	ldrh	r3, [r7, #2]
 8004696:	4013      	ands	r3, r2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	e001      	b.n	80046a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046a2:	2300      	movs	r3, #0
 80046a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	807b      	strh	r3, [r7, #2]
 80046c0:	4613      	mov	r3, r2
 80046c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046c4:	787b      	ldrb	r3, [r7, #1]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046ca:	887a      	ldrh	r2, [r7, #2]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046d0:	e002      	b.n	80046d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046d2:	887a      	ldrh	r2, [r7, #2]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046e8:	4b04      	ldr	r3, [pc, #16]	; (80046fc <HAL_PWREx_GetVoltageRange+0x18>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40007000 	.word	0x40007000

08004700 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800470e:	d130      	bne.n	8004772 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004710:	4b23      	ldr	r3, [pc, #140]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471c:	d038      	beq.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800471e:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004726:	4a1e      	ldr	r2, [pc, #120]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004728:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800472c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800472e:	4b1d      	ldr	r3, [pc, #116]	; (80047a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2232      	movs	r2, #50	; 0x32
 8004734:	fb02 f303 	mul.w	r3, r2, r3
 8004738:	4a1b      	ldr	r2, [pc, #108]	; (80047a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	0c9b      	lsrs	r3, r3, #18
 8004740:	3301      	adds	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004744:	e002      	b.n	800474c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3b01      	subs	r3, #1
 800474a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800474c:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004758:	d102      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x60>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f2      	bne.n	8004746 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004760:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476c:	d110      	bne.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e00f      	b.n	8004792 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800477a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477e:	d007      	beq.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004788:	4a05      	ldr	r2, [pc, #20]	; (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800478a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40007000 	.word	0x40007000
 80047a4:	20000000 	.word	0x20000000
 80047a8:	431bde83 	.word	0x431bde83

080047ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f000 bc02 	b.w	8004fc4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047c0:	4b96      	ldr	r3, [pc, #600]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047ca:	4b94      	ldr	r3, [pc, #592]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80e4 	beq.w	80049aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <HAL_RCC_OscConfig+0x4c>
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	f040 808b 	bne.w	8004906 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	f040 8087 	bne.w	8004906 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047f8:	4b88      	ldr	r3, [pc, #544]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_OscConfig+0x64>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e3d9      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1a      	ldr	r2, [r3, #32]
 8004814:	4b81      	ldr	r3, [pc, #516]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d004      	beq.n	800482a <HAL_RCC_OscConfig+0x7e>
 8004820:	4b7e      	ldr	r3, [pc, #504]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004828:	e005      	b.n	8004836 <HAL_RCC_OscConfig+0x8a>
 800482a:	4b7c      	ldr	r3, [pc, #496]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 800482c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004836:	4293      	cmp	r3, r2
 8004838:	d223      	bcs.n	8004882 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fd8a 	bl	8005358 <RCC_SetFlashLatencyFromMSIRange>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e3ba      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484e:	4b73      	ldr	r3, [pc, #460]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a72      	ldr	r2, [pc, #456]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004854:	f043 0308 	orr.w	r3, r3, #8
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	4b70      	ldr	r3, [pc, #448]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	496d      	ldr	r1, [pc, #436]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004868:	4313      	orrs	r3, r2
 800486a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800486c:	4b6b      	ldr	r3, [pc, #428]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	4968      	ldr	r1, [pc, #416]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 800487c:	4313      	orrs	r3, r2
 800487e:	604b      	str	r3, [r1, #4]
 8004880:	e025      	b.n	80048ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004882:	4b66      	ldr	r3, [pc, #408]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a65      	ldr	r2, [pc, #404]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004888:	f043 0308 	orr.w	r3, r3, #8
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b63      	ldr	r3, [pc, #396]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	4960      	ldr	r1, [pc, #384]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 800489c:	4313      	orrs	r3, r2
 800489e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048a0:	4b5e      	ldr	r3, [pc, #376]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	495b      	ldr	r1, [pc, #364]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fd4a 	bl	8005358 <RCC_SetFlashLatencyFromMSIRange>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e37a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048ce:	f000 fc81 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 80048d2:	4602      	mov	r2, r0
 80048d4:	4b51      	ldr	r3, [pc, #324]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	4950      	ldr	r1, [pc, #320]	; (8004a20 <HAL_RCC_OscConfig+0x274>)
 80048e0:	5ccb      	ldrb	r3, [r1, r3]
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ea:	4a4e      	ldr	r2, [pc, #312]	; (8004a24 <HAL_RCC_OscConfig+0x278>)
 80048ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048ee:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <HAL_RCC_OscConfig+0x27c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fd fadc 	bl	8001eb0 <HAL_InitTick>
 80048f8:	4603      	mov	r3, r0
 80048fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d052      	beq.n	80049a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	e35e      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d032      	beq.n	8004974 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800490e:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a42      	ldr	r2, [pc, #264]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800491a:	f7fd fb19 	bl	8001f50 <HAL_GetTick>
 800491e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004922:	f7fd fb15 	bl	8001f50 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e347      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004934:	4b39      	ldr	r3, [pc, #228]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f0      	beq.n	8004922 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004940:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a35      	ldr	r2, [pc, #212]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004946:	f043 0308 	orr.w	r3, r3, #8
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	4930      	ldr	r1, [pc, #192]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 800495a:	4313      	orrs	r3, r2
 800495c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800495e:	4b2f      	ldr	r3, [pc, #188]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	492b      	ldr	r1, [pc, #172]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
 8004972:	e01a      	b.n	80049aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004974:	4b29      	ldr	r3, [pc, #164]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a28      	ldr	r2, [pc, #160]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004980:	f7fd fae6 	bl	8001f50 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004988:	f7fd fae2 	bl	8001f50 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e314      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800499a:	4b20      	ldr	r3, [pc, #128]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x1dc>
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d073      	beq.n	8004a9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_OscConfig+0x21c>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d10e      	bne.n	80049e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b03      	cmp	r3, #3
 80049c6:	d10b      	bne.n	80049e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d063      	beq.n	8004a9c <HAL_RCC_OscConfig+0x2f0>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d15f      	bne.n	8004a9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e2f1      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e8:	d106      	bne.n	80049f8 <HAL_RCC_OscConfig+0x24c>
 80049ea:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a0b      	ldr	r2, [pc, #44]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 80049f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e025      	b.n	8004a44 <HAL_RCC_OscConfig+0x298>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a00:	d114      	bne.n	8004a2c <HAL_RCC_OscConfig+0x280>
 8004a02:	4b06      	ldr	r3, [pc, #24]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a05      	ldr	r2, [pc, #20]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a02      	ldr	r2, [pc, #8]	; (8004a1c <HAL_RCC_OscConfig+0x270>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e013      	b.n	8004a44 <HAL_RCC_OscConfig+0x298>
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	0800bd60 	.word	0x0800bd60
 8004a24:	20000000 	.word	0x20000000
 8004a28:	20000004 	.word	0x20000004
 8004a2c:	4ba0      	ldr	r3, [pc, #640]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a9f      	ldr	r2, [pc, #636]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	4b9d      	ldr	r3, [pc, #628]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a9c      	ldr	r2, [pc, #624]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d013      	beq.n	8004a74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fd fa80 	bl	8001f50 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fd fa7c 	bl	8001f50 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e2ae      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a66:	4b92      	ldr	r3, [pc, #584]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x2a8>
 8004a72:	e014      	b.n	8004a9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd fa6c 	bl	8001f50 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fd fa68 	bl	8001f50 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	; 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e29a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a8e:	4b88      	ldr	r3, [pc, #544]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x2d0>
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d060      	beq.n	8004b6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_OscConfig+0x310>
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b0c      	cmp	r3, #12
 8004ab4:	d119      	bne.n	8004aea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d116      	bne.n	8004aea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004abc:	4b7c      	ldr	r3, [pc, #496]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x328>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e277      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad4:	4b76      	ldr	r3, [pc, #472]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	061b      	lsls	r3, r3, #24
 8004ae2:	4973      	ldr	r1, [pc, #460]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae8:	e040      	b.n	8004b6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d023      	beq.n	8004b3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af2:	4b6f      	ldr	r3, [pc, #444]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6e      	ldr	r2, [pc, #440]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fd fa27 	bl	8001f50 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b06:	f7fd fa23 	bl	8001f50 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e255      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b18:	4b65      	ldr	r3, [pc, #404]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b24:	4b62      	ldr	r3, [pc, #392]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	061b      	lsls	r3, r3, #24
 8004b32:	495f      	ldr	r1, [pc, #380]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	604b      	str	r3, [r1, #4]
 8004b38:	e018      	b.n	8004b6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3a:	4b5d      	ldr	r3, [pc, #372]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5c      	ldr	r2, [pc, #368]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fd fa03 	bl	8001f50 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4e:	f7fd f9ff 	bl	8001f50 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e231      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b60:	4b53      	ldr	r3, [pc, #332]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f0      	bne.n	8004b4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d03c      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01c      	beq.n	8004bba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b80:	4b4b      	ldr	r3, [pc, #300]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b86:	4a4a      	ldr	r2, [pc, #296]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fd f9de 	bl	8001f50 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b98:	f7fd f9da 	bl	8001f50 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e20c      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004baa:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0ef      	beq.n	8004b98 <HAL_RCC_OscConfig+0x3ec>
 8004bb8:	e01b      	b.n	8004bf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bba:	4b3d      	ldr	r3, [pc, #244]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc0:	4a3b      	ldr	r2, [pc, #236]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7fd f9c1 	bl	8001f50 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd2:	f7fd f9bd 	bl	8001f50 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e1ef      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004be4:	4b32      	ldr	r3, [pc, #200]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1ef      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80a6 	beq.w	8004d4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c00:	2300      	movs	r3, #0
 8004c02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c04:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10d      	bne.n	8004c2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c14:	4a26      	ldr	r2, [pc, #152]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c1c:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2c:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <HAL_RCC_OscConfig+0x508>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d118      	bne.n	8004c6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c38:	4b1e      	ldr	r3, [pc, #120]	; (8004cb4 <HAL_RCC_OscConfig+0x508>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	; (8004cb4 <HAL_RCC_OscConfig+0x508>)
 8004c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c44:	f7fd f984 	bl	8001f50 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c4c:	f7fd f980 	bl	8001f50 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e1b2      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5e:	4b15      	ldr	r3, [pc, #84]	; (8004cb4 <HAL_RCC_OscConfig+0x508>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d108      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4d8>
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	4a0d      	ldr	r2, [pc, #52]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004c7a:	f043 0301 	orr.w	r3, r3, #1
 8004c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c82:	e029      	b.n	8004cd8 <HAL_RCC_OscConfig+0x52c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b05      	cmp	r3, #5
 8004c8a:	d115      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x50c>
 8004c8c:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	4a07      	ldr	r2, [pc, #28]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004c94:	f043 0304 	orr.w	r3, r3, #4
 8004c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c9c:	4b04      	ldr	r3, [pc, #16]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca2:	4a03      	ldr	r2, [pc, #12]	; (8004cb0 <HAL_RCC_OscConfig+0x504>)
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cac:	e014      	b.n	8004cd8 <HAL_RCC_OscConfig+0x52c>
 8004cae:	bf00      	nop
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	4b9a      	ldr	r3, [pc, #616]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	4a99      	ldr	r2, [pc, #612]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cc8:	4b96      	ldr	r3, [pc, #600]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	4a95      	ldr	r2, [pc, #596]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004cd0:	f023 0304 	bic.w	r3, r3, #4
 8004cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d016      	beq.n	8004d0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7fd f936 	bl	8001f50 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce8:	f7fd f932 	bl	8001f50 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e162      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfe:	4b89      	ldr	r3, [pc, #548]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ed      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x53c>
 8004d0c:	e015      	b.n	8004d3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0e:	f7fd f91f 	bl	8001f50 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d16:	f7fd f91b 	bl	8001f50 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e14b      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d2c:	4b7d      	ldr	r3, [pc, #500]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1ed      	bne.n	8004d16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d3a:	7ffb      	ldrb	r3, [r7, #31]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d105      	bne.n	8004d4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d40:	4b78      	ldr	r3, [pc, #480]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	4a77      	ldr	r2, [pc, #476]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d03c      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01c      	beq.n	8004d9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d60:	4b70      	ldr	r3, [pc, #448]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004d62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d66:	4a6f      	ldr	r2, [pc, #444]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d70:	f7fd f8ee 	bl	8001f50 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d78:	f7fd f8ea 	bl	8001f50 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e11c      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d8a:	4b66      	ldr	r3, [pc, #408]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ef      	beq.n	8004d78 <HAL_RCC_OscConfig+0x5cc>
 8004d98:	e01b      	b.n	8004dd2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d9a:	4b62      	ldr	r3, [pc, #392]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004d9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004da0:	4a60      	ldr	r2, [pc, #384]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004da2:	f023 0301 	bic.w	r3, r3, #1
 8004da6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004daa:	f7fd f8d1 	bl	8001f50 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004db2:	f7fd f8cd 	bl	8001f50 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e0ff      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dc4:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ef      	bne.n	8004db2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 80f3 	beq.w	8004fc2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	f040 80c9 	bne.w	8004f78 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004de6:	4b4f      	ldr	r3, [pc, #316]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 0203 	and.w	r2, r3, #3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d12c      	bne.n	8004e54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	3b01      	subs	r3, #1
 8004e06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d123      	bne.n	8004e54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d11b      	bne.n	8004e54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d113      	bne.n	8004e54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d109      	bne.n	8004e54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d06b      	beq.n	8004f2c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d062      	beq.n	8004f20 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e5a:	4b32      	ldr	r3, [pc, #200]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e0ac      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a2d      	ldr	r2, [pc, #180]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e76:	f7fd f86b 	bl	8001f50 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fd f867 	bl	8001f50 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e099      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e90:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f0      	bne.n	8004e7e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e9c:	4b21      	ldr	r3, [pc, #132]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <HAL_RCC_OscConfig+0x77c>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004eac:	3a01      	subs	r2, #1
 8004eae:	0112      	lsls	r2, r2, #4
 8004eb0:	4311      	orrs	r1, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eb6:	0212      	lsls	r2, r2, #8
 8004eb8:	4311      	orrs	r1, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ebe:	0852      	lsrs	r2, r2, #1
 8004ec0:	3a01      	subs	r2, #1
 8004ec2:	0552      	lsls	r2, r2, #21
 8004ec4:	4311      	orrs	r1, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004eca:	0852      	lsrs	r2, r2, #1
 8004ecc:	3a01      	subs	r2, #1
 8004ece:	0652      	lsls	r2, r2, #25
 8004ed0:	4311      	orrs	r1, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ed6:	06d2      	lsls	r2, r2, #27
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	4912      	ldr	r1, [pc, #72]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ee0:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a0f      	ldr	r2, [pc, #60]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ef6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ef8:	f7fd f82a 	bl	8001f50 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f00:	f7fd f826 	bl	8001f50 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e058      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <HAL_RCC_OscConfig+0x778>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f1e:	e050      	b.n	8004fc2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e04f      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
 8004f24:	40021000 	.word	0x40021000
 8004f28:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2c:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d144      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f38:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f44:	4b21      	ldr	r3, [pc, #132]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	4a20      	ldr	r2, [pc, #128]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f50:	f7fc fffe 	bl	8001f50 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fc fffa 	bl	8001f50 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e02c      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6a:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0x7ac>
 8004f76:	e024      	b.n	8004fc2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b0c      	cmp	r3, #12
 8004f7c:	d01f      	beq.n	8004fbe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7e:	4b13      	ldr	r3, [pc, #76]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a12      	ldr	r2, [pc, #72]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004f84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8a:	f7fc ffe1 	bl	8001f50 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f92:	f7fc ffdd 	bl	8001f50 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e00f      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa4:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	4905      	ldr	r1, [pc, #20]	; (8004fcc <HAL_RCC_OscConfig+0x820>)
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <HAL_RCC_OscConfig+0x824>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	60cb      	str	r3, [r1, #12]
 8004fbc:	e001      	b.n	8004fc2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	feeefffc 	.word	0xfeeefffc

08004fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0e7      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b75      	ldr	r3, [pc, #468]	; (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d910      	bls.n	8005018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b72      	ldr	r3, [pc, #456]	; (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 0207 	bic.w	r2, r3, #7
 8004ffe:	4970      	ldr	r1, [pc, #448]	; (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b6e      	ldr	r3, [pc, #440]	; (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0cf      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d010      	beq.n	8005046 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	4b66      	ldr	r3, [pc, #408]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005030:	429a      	cmp	r2, r3
 8005032:	d908      	bls.n	8005046 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005034:	4b63      	ldr	r3, [pc, #396]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4960      	ldr	r1, [pc, #384]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d04c      	beq.n	80050ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d107      	bne.n	800506a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505a:	4b5a      	ldr	r3, [pc, #360]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d121      	bne.n	80050aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0a6      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b02      	cmp	r3, #2
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005072:	4b54      	ldr	r3, [pc, #336]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d115      	bne.n	80050aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e09a      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d107      	bne.n	800509a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800508a:	4b4e      	ldr	r3, [pc, #312]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d109      	bne.n	80050aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e08e      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800509a:	4b4a      	ldr	r3, [pc, #296]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e086      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050aa:	4b46      	ldr	r3, [pc, #280]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f023 0203 	bic.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	4943      	ldr	r1, [pc, #268]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050bc:	f7fc ff48 	bl	8001f50 <HAL_GetTick>
 80050c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	e00a      	b.n	80050da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c4:	f7fc ff44 	bl	8001f50 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e06e      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050da:	4b3a      	ldr	r3, [pc, #232]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 020c 	and.w	r2, r3, #12
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d1eb      	bne.n	80050c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d010      	beq.n	800511a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	4b31      	ldr	r3, [pc, #196]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005104:	429a      	cmp	r2, r3
 8005106:	d208      	bcs.n	800511a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005108:	4b2e      	ldr	r3, [pc, #184]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	492b      	ldr	r1, [pc, #172]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511a:	4b29      	ldr	r3, [pc, #164]	; (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d210      	bcs.n	800514a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 0207 	bic.w	r2, r3, #7
 8005130:	4923      	ldr	r1, [pc, #140]	; (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	4313      	orrs	r3, r2
 8005136:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005138:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <HAL_RCC_ClockConfig+0x1ec>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d001      	beq.n	800514a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e036      	b.n	80051b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d008      	beq.n	8005168 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005156:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	4918      	ldr	r1, [pc, #96]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005164:	4313      	orrs	r3, r2
 8005166:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005174:	4b13      	ldr	r3, [pc, #76]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4910      	ldr	r1, [pc, #64]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005184:	4313      	orrs	r3, r2
 8005186:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005188:	f000 f824 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 800518c:	4602      	mov	r2, r0
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	091b      	lsrs	r3, r3, #4
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	490b      	ldr	r1, [pc, #44]	; (80051c8 <HAL_RCC_ClockConfig+0x1f4>)
 800519a:	5ccb      	ldrb	r3, [r1, r3]
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
 80051a4:	4a09      	ldr	r2, [pc, #36]	; (80051cc <HAL_RCC_ClockConfig+0x1f8>)
 80051a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051a8:	4b09      	ldr	r3, [pc, #36]	; (80051d0 <HAL_RCC_ClockConfig+0x1fc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fc fe7f 	bl	8001eb0 <HAL_InitTick>
 80051b2:	4603      	mov	r3, r0
 80051b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80051b6:	7afb      	ldrb	r3, [r7, #11]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40022000 	.word	0x40022000
 80051c4:	40021000 	.word	0x40021000
 80051c8:	0800bd60 	.word	0x0800bd60
 80051cc:	20000000 	.word	0x20000000
 80051d0:	20000004 	.word	0x20000004

080051d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	2300      	movs	r3, #0
 80051e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e2:	4b3e      	ldr	r3, [pc, #248]	; (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 030c 	and.w	r3, r3, #12
 80051ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ec:	4b3b      	ldr	r3, [pc, #236]	; (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x34>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b0c      	cmp	r3, #12
 8005200:	d121      	bne.n	8005246 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d11e      	bne.n	8005246 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005208:	4b34      	ldr	r3, [pc, #208]	; (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d107      	bne.n	8005224 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005214:	4b31      	ldr	r3, [pc, #196]	; (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800521a:	0a1b      	lsrs	r3, r3, #8
 800521c:	f003 030f 	and.w	r3, r3, #15
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	e005      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005224:	4b2d      	ldr	r3, [pc, #180]	; (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005230:	4a2b      	ldr	r2, [pc, #172]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005238:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10d      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005244:	e00a      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b04      	cmp	r3, #4
 800524a:	d102      	bne.n	8005252 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800524c:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	e004      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b08      	cmp	r3, #8
 8005256:	d101      	bne.n	800525c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005258:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800525a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d134      	bne.n	80052cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005262:	4b1e      	ldr	r3, [pc, #120]	; (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d003      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0xa6>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b03      	cmp	r3, #3
 8005276:	d003      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0xac>
 8005278:	e005      	b.n	8005286 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800527a:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800527c:	617b      	str	r3, [r7, #20]
      break;
 800527e:	e005      	b.n	800528c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005280:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005282:	617b      	str	r3, [r7, #20]
      break;
 8005284:	e002      	b.n	800528c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	617b      	str	r3, [r7, #20]
      break;
 800528a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	3301      	adds	r3, #1
 8005298:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	0a1b      	lsrs	r3, r3, #8
 80052a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	fb03 f202 	mul.w	r2, r3, r2
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <HAL_RCC_GetSysClockFreq+0x108>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	0e5b      	lsrs	r3, r3, #25
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	3301      	adds	r3, #1
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052cc:	69bb      	ldr	r3, [r7, #24]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3724      	adds	r7, #36	; 0x24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000
 80052e0:	0800bd78 	.word	0x0800bd78
 80052e4:	00f42400 	.word	0x00f42400

080052e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052ec:	4b03      	ldr	r3, [pc, #12]	; (80052fc <HAL_RCC_GetHCLKFreq+0x14>)
 80052ee:	681b      	ldr	r3, [r3, #0]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	20000000 	.word	0x20000000

08005300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005304:	f7ff fff0 	bl	80052e8 <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_RCC_GetPCLK1Freq+0x24>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	0a1b      	lsrs	r3, r3, #8
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	4904      	ldr	r1, [pc, #16]	; (8005328 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40021000 	.word	0x40021000
 8005328:	0800bd70 	.word	0x0800bd70

0800532c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005330:	f7ff ffda 	bl	80052e8 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b06      	ldr	r3, [pc, #24]	; (8005350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0adb      	lsrs	r3, r3, #11
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4904      	ldr	r1, [pc, #16]	; (8005354 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800534c:	4618      	mov	r0, r3
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40021000 	.word	0x40021000
 8005354:	0800bd70 	.word	0x0800bd70

08005358 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005360:	2300      	movs	r3, #0
 8005362:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005364:	4b2a      	ldr	r3, [pc, #168]	; (8005410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005370:	f7ff f9b8 	bl	80046e4 <HAL_PWREx_GetVoltageRange>
 8005374:	6178      	str	r0, [r7, #20]
 8005376:	e014      	b.n	80053a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005378:	4b25      	ldr	r3, [pc, #148]	; (8005410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800537a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537c:	4a24      	ldr	r2, [pc, #144]	; (8005410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800537e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005382:	6593      	str	r3, [r2, #88]	; 0x58
 8005384:	4b22      	ldr	r3, [pc, #136]	; (8005410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005390:	f7ff f9a8 	bl	80046e4 <HAL_PWREx_GetVoltageRange>
 8005394:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005396:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800539c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a8:	d10b      	bne.n	80053c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d919      	bls.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2ba0      	cmp	r3, #160	; 0xa0
 80053b4:	d902      	bls.n	80053bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053b6:	2302      	movs	r3, #2
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	e013      	b.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053bc:	2301      	movs	r3, #1
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	e010      	b.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d902      	bls.n	80053ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053c8:	2303      	movs	r3, #3
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	e00a      	b.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b80      	cmp	r3, #128	; 0x80
 80053d2:	d102      	bne.n	80053da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053d4:	2302      	movs	r3, #2
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	e004      	b.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b70      	cmp	r3, #112	; 0x70
 80053de:	d101      	bne.n	80053e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053e0:	2301      	movs	r3, #1
 80053e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053e4:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f023 0207 	bic.w	r2, r3, #7
 80053ec:	4909      	ldr	r1, [pc, #36]	; (8005414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053f4:	4b07      	ldr	r3, [pc, #28]	; (8005414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d001      	beq.n	8005406 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40021000 	.word	0x40021000
 8005414:	40022000 	.word	0x40022000

08005418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005420:	2300      	movs	r3, #0
 8005422:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005424:	2300      	movs	r3, #0
 8005426:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005430:	2b00      	cmp	r3, #0
 8005432:	d031      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005438:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800543c:	d01a      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800543e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005442:	d814      	bhi.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d009      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005448:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800544c:	d10f      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800544e:	4b5d      	ldr	r3, [pc, #372]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	4a5c      	ldr	r2, [pc, #368]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005458:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800545a:	e00c      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f000 f9f0 	bl	8005848 <RCCEx_PLLSAI1_Config>
 8005468:	4603      	mov	r3, r0
 800546a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800546c:	e003      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	74fb      	strb	r3, [r7, #19]
      break;
 8005472:	e000      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005474:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005476:	7cfb      	ldrb	r3, [r7, #19]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10b      	bne.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800547c:	4b51      	ldr	r3, [pc, #324]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005482:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	494e      	ldr	r1, [pc, #312]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005492:	e001      	b.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005494:	7cfb      	ldrb	r3, [r7, #19]
 8005496:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 809e 	beq.w	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a6:	2300      	movs	r3, #0
 80054a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054aa:	4b46      	ldr	r3, [pc, #280]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00d      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054c0:	4b40      	ldr	r3, [pc, #256]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	4a3f      	ldr	r2, [pc, #252]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ca:	6593      	str	r3, [r2, #88]	; 0x58
 80054cc:	4b3d      	ldr	r3, [pc, #244]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d8:	2301      	movs	r3, #1
 80054da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054dc:	4b3a      	ldr	r3, [pc, #232]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a39      	ldr	r2, [pc, #228]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80054e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054e8:	f7fc fd32 	bl	8001f50 <HAL_GetTick>
 80054ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80054ee:	e009      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f0:	f7fc fd2e 	bl	8001f50 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d902      	bls.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	74fb      	strb	r3, [r7, #19]
        break;
 8005502:	e005      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005504:	4b30      	ldr	r3, [pc, #192]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0ef      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005510:	7cfb      	ldrb	r3, [r7, #19]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d15a      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005516:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005520:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01e      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	429a      	cmp	r2, r3
 8005530:	d019      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005532:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800553e:	4b21      	ldr	r3, [pc, #132]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005544:	4a1f      	ldr	r2, [pc, #124]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800554a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800554e:	4b1d      	ldr	r3, [pc, #116]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800555a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800555e:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d016      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005570:	f7fc fcee 	bl	8001f50 <HAL_GetTick>
 8005574:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005576:	e00b      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fc fcea 	bl	8001f50 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	; 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d902      	bls.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	74fb      	strb	r3, [r7, #19]
            break;
 800558e:	e006      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005590:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0ec      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800559e:	7cfb      	ldrb	r3, [r7, #19]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10b      	bne.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055a4:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b2:	4904      	ldr	r1, [pc, #16]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055ba:	e009      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055bc:	7cfb      	ldrb	r3, [r7, #19]
 80055be:	74bb      	strb	r3, [r7, #18]
 80055c0:	e006      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80055c2:	bf00      	nop
 80055c4:	40021000 	.word	0x40021000
 80055c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055cc:	7cfb      	ldrb	r3, [r7, #19]
 80055ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055d0:	7c7b      	ldrb	r3, [r7, #17]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d105      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d6:	4b9b      	ldr	r3, [pc, #620]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055da:	4a9a      	ldr	r2, [pc, #616]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ee:	4b95      	ldr	r3, [pc, #596]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f4:	f023 0203 	bic.w	r2, r3, #3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	4991      	ldr	r1, [pc, #580]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005610:	4b8c      	ldr	r3, [pc, #560]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005616:	f023 020c 	bic.w	r2, r3, #12
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	4989      	ldr	r1, [pc, #548]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005632:	4b84      	ldr	r3, [pc, #528]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005638:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	4980      	ldr	r1, [pc, #512]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005654:	4b7b      	ldr	r3, [pc, #492]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	4978      	ldr	r1, [pc, #480]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005676:	4b73      	ldr	r3, [pc, #460]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	496f      	ldr	r1, [pc, #444]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005698:	4b6a      	ldr	r3, [pc, #424]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	4967      	ldr	r1, [pc, #412]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056ba:	4b62      	ldr	r3, [pc, #392]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	495e      	ldr	r1, [pc, #376]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056dc:	4b59      	ldr	r3, [pc, #356]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	4956      	ldr	r1, [pc, #344]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056fe:	4b51      	ldr	r3, [pc, #324]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	494d      	ldr	r1, [pc, #308]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d028      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005720:	4b48      	ldr	r3, [pc, #288]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800572e:	4945      	ldr	r1, [pc, #276]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800573e:	d106      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005740:	4b40      	ldr	r3, [pc, #256]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a3f      	ldr	r2, [pc, #252]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800574a:	60d3      	str	r3, [r2, #12]
 800574c:	e011      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005756:	d10c      	bne.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3304      	adds	r3, #4
 800575c:	2101      	movs	r1, #1
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f872 	bl	8005848 <RCCEx_PLLSAI1_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005768:	7cfb      	ldrb	r3, [r7, #19]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 800576e:	7cfb      	ldrb	r3, [r7, #19]
 8005770:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d028      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800577e:	4b31      	ldr	r3, [pc, #196]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005784:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578c:	492d      	ldr	r1, [pc, #180]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800579c:	d106      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800579e:	4b29      	ldr	r3, [pc, #164]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	4a28      	ldr	r2, [pc, #160]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057a8:	60d3      	str	r3, [r2, #12]
 80057aa:	e011      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3304      	adds	r3, #4
 80057ba:	2101      	movs	r1, #1
 80057bc:	4618      	mov	r0, r3
 80057be:	f000 f843 	bl	8005848 <RCCEx_PLLSAI1_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057c6:	7cfb      	ldrb	r3, [r7, #19]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80057cc:	7cfb      	ldrb	r3, [r7, #19]
 80057ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01c      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057dc:	4b19      	ldr	r3, [pc, #100]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ea:	4916      	ldr	r1, [pc, #88]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057fa:	d10c      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	3304      	adds	r3, #4
 8005800:	2102      	movs	r1, #2
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f820 	bl	8005848 <RCCEx_PLLSAI1_Config>
 8005808:	4603      	mov	r3, r0
 800580a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005822:	4b08      	ldr	r3, [pc, #32]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005828:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	4904      	ldr	r1, [pc, #16]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005838:	7cbb      	ldrb	r3, [r7, #18]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40021000 	.word	0x40021000

08005848 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005856:	4b74      	ldr	r3, [pc, #464]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d018      	beq.n	8005894 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005862:	4b71      	ldr	r3, [pc, #452]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0203 	and.w	r2, r3, #3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d10d      	bne.n	800588e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
       ||
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800587a:	4b6b      	ldr	r3, [pc, #428]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	091b      	lsrs	r3, r3, #4
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
       ||
 800588a:	429a      	cmp	r2, r3
 800588c:	d047      	beq.n	800591e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	73fb      	strb	r3, [r7, #15]
 8005892:	e044      	b.n	800591e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d018      	beq.n	80058ce <RCCEx_PLLSAI1_Config+0x86>
 800589c:	2b03      	cmp	r3, #3
 800589e:	d825      	bhi.n	80058ec <RCCEx_PLLSAI1_Config+0xa4>
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d002      	beq.n	80058aa <RCCEx_PLLSAI1_Config+0x62>
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d009      	beq.n	80058bc <RCCEx_PLLSAI1_Config+0x74>
 80058a8:	e020      	b.n	80058ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058aa:	4b5f      	ldr	r3, [pc, #380]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11d      	bne.n	80058f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ba:	e01a      	b.n	80058f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058bc:	4b5a      	ldr	r3, [pc, #360]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d116      	bne.n	80058f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058cc:	e013      	b.n	80058f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058ce:	4b56      	ldr	r3, [pc, #344]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10f      	bne.n	80058fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058da:	4b53      	ldr	r3, [pc, #332]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80058ea:	e006      	b.n	80058fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
      break;
 80058f0:	e004      	b.n	80058fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058f2:	bf00      	nop
 80058f4:	e002      	b.n	80058fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80058fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10d      	bne.n	800591e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005902:	4b49      	ldr	r3, [pc, #292]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6819      	ldr	r1, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	3b01      	subs	r3, #1
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	430b      	orrs	r3, r1
 8005918:	4943      	ldr	r1, [pc, #268]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800591a:	4313      	orrs	r3, r2
 800591c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d17c      	bne.n	8005a1e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005924:	4b40      	ldr	r3, [pc, #256]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a3f      	ldr	r2, [pc, #252]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800592a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800592e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005930:	f7fc fb0e 	bl	8001f50 <HAL_GetTick>
 8005934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005936:	e009      	b.n	800594c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005938:	f7fc fb0a 	bl	8001f50 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d902      	bls.n	800594c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	73fb      	strb	r3, [r7, #15]
        break;
 800594a:	e005      	b.n	8005958 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800594c:	4b36      	ldr	r3, [pc, #216]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1ef      	bne.n	8005938 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d15f      	bne.n	8005a1e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d110      	bne.n	8005986 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005964:	4b30      	ldr	r3, [pc, #192]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800596c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6892      	ldr	r2, [r2, #8]
 8005974:	0211      	lsls	r1, r2, #8
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68d2      	ldr	r2, [r2, #12]
 800597a:	06d2      	lsls	r2, r2, #27
 800597c:	430a      	orrs	r2, r1
 800597e:	492a      	ldr	r1, [pc, #168]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005980:	4313      	orrs	r3, r2
 8005982:	610b      	str	r3, [r1, #16]
 8005984:	e027      	b.n	80059d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d112      	bne.n	80059b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800598c:	4b26      	ldr	r3, [pc, #152]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005994:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6892      	ldr	r2, [r2, #8]
 800599c:	0211      	lsls	r1, r2, #8
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6912      	ldr	r2, [r2, #16]
 80059a2:	0852      	lsrs	r2, r2, #1
 80059a4:	3a01      	subs	r2, #1
 80059a6:	0552      	lsls	r2, r2, #21
 80059a8:	430a      	orrs	r2, r1
 80059aa:	491f      	ldr	r1, [pc, #124]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	610b      	str	r3, [r1, #16]
 80059b0:	e011      	b.n	80059d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059b2:	4b1d      	ldr	r3, [pc, #116]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6892      	ldr	r2, [r2, #8]
 80059c2:	0211      	lsls	r1, r2, #8
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6952      	ldr	r2, [r2, #20]
 80059c8:	0852      	lsrs	r2, r2, #1
 80059ca:	3a01      	subs	r2, #1
 80059cc:	0652      	lsls	r2, r2, #25
 80059ce:	430a      	orrs	r2, r1
 80059d0:	4915      	ldr	r1, [pc, #84]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e2:	f7fc fab5 	bl	8001f50 <HAL_GetTick>
 80059e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059e8:	e009      	b.n	80059fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059ea:	f7fc fab1 	bl	8001f50 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d902      	bls.n	80059fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	73fb      	strb	r3, [r7, #15]
          break;
 80059fc:	e005      	b.n	8005a0a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80059fe:	4b0a      	ldr	r3, [pc, #40]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0ef      	beq.n	80059ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d106      	bne.n	8005a1e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	4903      	ldr	r1, [pc, #12]	; (8005a28 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40021000 	.word	0x40021000

08005a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e049      	b.n	8005ad2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fc f838 	bl	8001ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3304      	adds	r3, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f000 fa74 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e049      	b.n	8005b80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d106      	bne.n	8005b06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f841 	bl	8005b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2202      	movs	r2, #2
 8005b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f000 fa1d 	bl	8005f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d101      	bne.n	8005bba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e0ff      	b.n	8005dba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b14      	cmp	r3, #20
 8005bc6:	f200 80f0 	bhi.w	8005daa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bca:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd0:	08005c25 	.word	0x08005c25
 8005bd4:	08005dab 	.word	0x08005dab
 8005bd8:	08005dab 	.word	0x08005dab
 8005bdc:	08005dab 	.word	0x08005dab
 8005be0:	08005c65 	.word	0x08005c65
 8005be4:	08005dab 	.word	0x08005dab
 8005be8:	08005dab 	.word	0x08005dab
 8005bec:	08005dab 	.word	0x08005dab
 8005bf0:	08005ca7 	.word	0x08005ca7
 8005bf4:	08005dab 	.word	0x08005dab
 8005bf8:	08005dab 	.word	0x08005dab
 8005bfc:	08005dab 	.word	0x08005dab
 8005c00:	08005ce7 	.word	0x08005ce7
 8005c04:	08005dab 	.word	0x08005dab
 8005c08:	08005dab 	.word	0x08005dab
 8005c0c:	08005dab 	.word	0x08005dab
 8005c10:	08005d29 	.word	0x08005d29
 8005c14:	08005dab 	.word	0x08005dab
 8005c18:	08005dab 	.word	0x08005dab
 8005c1c:	08005dab 	.word	0x08005dab
 8005c20:	08005d69 	.word	0x08005d69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f9f8 	bl	8006020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0208 	orr.w	r2, r2, #8
 8005c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0204 	bic.w	r2, r2, #4
 8005c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6999      	ldr	r1, [r3, #24]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	619a      	str	r2, [r3, #24]
      break;
 8005c62:	e0a5      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fa54 	bl	8006118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6999      	ldr	r1, [r3, #24]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	021a      	lsls	r2, r3, #8
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	619a      	str	r2, [r3, #24]
      break;
 8005ca4:	e084      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 faad 	bl	800620c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0208 	orr.w	r2, r2, #8
 8005cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0204 	bic.w	r2, r2, #4
 8005cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69d9      	ldr	r1, [r3, #28]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	61da      	str	r2, [r3, #28]
      break;
 8005ce4:	e064      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fb05 	bl	80062fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69d9      	ldr	r1, [r3, #28]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	021a      	lsls	r2, r3, #8
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	61da      	str	r2, [r3, #28]
      break;
 8005d26:	e043      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68b9      	ldr	r1, [r7, #8]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fb42 	bl	80063b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0208 	orr.w	r2, r2, #8
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0204 	bic.w	r2, r2, #4
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d66:	e023      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fb7a 	bl	8006468 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	021a      	lsls	r2, r3, #8
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005da8:	e002      	b.n	8005db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	75fb      	strb	r3, [r7, #23]
      break;
 8005dae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop

08005dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_TIM_ConfigClockSource+0x1c>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e0b6      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x18a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1c:	d03e      	beq.n	8005e9c <HAL_TIM_ConfigClockSource+0xd8>
 8005e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e22:	f200 8087 	bhi.w	8005f34 <HAL_TIM_ConfigClockSource+0x170>
 8005e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2a:	f000 8086 	beq.w	8005f3a <HAL_TIM_ConfigClockSource+0x176>
 8005e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e32:	d87f      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x170>
 8005e34:	2b70      	cmp	r3, #112	; 0x70
 8005e36:	d01a      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0xaa>
 8005e38:	2b70      	cmp	r3, #112	; 0x70
 8005e3a:	d87b      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x170>
 8005e3c:	2b60      	cmp	r3, #96	; 0x60
 8005e3e:	d050      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x11e>
 8005e40:	2b60      	cmp	r3, #96	; 0x60
 8005e42:	d877      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x170>
 8005e44:	2b50      	cmp	r3, #80	; 0x50
 8005e46:	d03c      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0xfe>
 8005e48:	2b50      	cmp	r3, #80	; 0x50
 8005e4a:	d873      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x170>
 8005e4c:	2b40      	cmp	r3, #64	; 0x40
 8005e4e:	d058      	beq.n	8005f02 <HAL_TIM_ConfigClockSource+0x13e>
 8005e50:	2b40      	cmp	r3, #64	; 0x40
 8005e52:	d86f      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x170>
 8005e54:	2b30      	cmp	r3, #48	; 0x30
 8005e56:	d064      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x15e>
 8005e58:	2b30      	cmp	r3, #48	; 0x30
 8005e5a:	d86b      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x170>
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d060      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x15e>
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d867      	bhi.n	8005f34 <HAL_TIM_ConfigClockSource+0x170>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d05c      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x15e>
 8005e68:	2b10      	cmp	r3, #16
 8005e6a:	d05a      	beq.n	8005f22 <HAL_TIM_ConfigClockSource+0x15e>
 8005e6c:	e062      	b.n	8005f34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6899      	ldr	r1, [r3, #8]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	f000 fbc7 	bl	8006610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	609a      	str	r2, [r3, #8]
      break;
 8005e9a:	e04f      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	6899      	ldr	r1, [r3, #8]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f000 fbb0 	bl	8006610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ebe:	609a      	str	r2, [r3, #8]
      break;
 8005ec0:	e03c      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6859      	ldr	r1, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f000 fb24 	bl	800651c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2150      	movs	r1, #80	; 0x50
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fb7d 	bl	80065da <TIM_ITRx_SetConfig>
      break;
 8005ee0:	e02c      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6859      	ldr	r1, [r3, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f000 fb43 	bl	800657a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2160      	movs	r1, #96	; 0x60
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fb6d 	bl	80065da <TIM_ITRx_SetConfig>
      break;
 8005f00:	e01c      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6818      	ldr	r0, [r3, #0]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6859      	ldr	r1, [r3, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f000 fb04 	bl	800651c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2140      	movs	r1, #64	; 0x40
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fb5d 	bl	80065da <TIM_ITRx_SetConfig>
      break;
 8005f20:	e00c      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f000 fb54 	bl	80065da <TIM_ITRx_SetConfig>
      break;
 8005f32:	e003      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	73fb      	strb	r3, [r7, #15]
      break;
 8005f38:	e000      	b.n	8005f3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a2a      	ldr	r2, [pc, #168]	; (8006014 <TIM_Base_SetConfig+0xbc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_Base_SetConfig+0x20>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f76:	d108      	bne.n	8005f8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a21      	ldr	r2, [pc, #132]	; (8006014 <TIM_Base_SetConfig+0xbc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d00b      	beq.n	8005faa <TIM_Base_SetConfig+0x52>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f98:	d007      	beq.n	8005faa <TIM_Base_SetConfig+0x52>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1e      	ldr	r2, [pc, #120]	; (8006018 <TIM_Base_SetConfig+0xc0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d003      	beq.n	8005faa <TIM_Base_SetConfig+0x52>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1d      	ldr	r2, [pc, #116]	; (800601c <TIM_Base_SetConfig+0xc4>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d108      	bne.n	8005fbc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <TIM_Base_SetConfig+0xbc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d007      	beq.n	8005ff8 <TIM_Base_SetConfig+0xa0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a0b      	ldr	r2, [pc, #44]	; (8006018 <TIM_Base_SetConfig+0xc0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <TIM_Base_SetConfig+0xa0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a0a      	ldr	r2, [pc, #40]	; (800601c <TIM_Base_SetConfig+0xc4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d103      	bne.n	8006000 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	615a      	str	r2, [r3, #20]
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40012c00 	.word	0x40012c00
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400

08006020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f023 0201 	bic.w	r2, r3, #1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f023 0302 	bic.w	r3, r3, #2
 800606c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a24      	ldr	r2, [pc, #144]	; (800610c <TIM_OC1_SetConfig+0xec>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d007      	beq.n	8006090 <TIM_OC1_SetConfig+0x70>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a23      	ldr	r2, [pc, #140]	; (8006110 <TIM_OC1_SetConfig+0xf0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_OC1_SetConfig+0x70>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a22      	ldr	r2, [pc, #136]	; (8006114 <TIM_OC1_SetConfig+0xf4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d10c      	bne.n	80060aa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f023 0308 	bic.w	r3, r3, #8
 8006096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 0304 	bic.w	r3, r3, #4
 80060a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a17      	ldr	r2, [pc, #92]	; (800610c <TIM_OC1_SetConfig+0xec>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d007      	beq.n	80060c2 <TIM_OC1_SetConfig+0xa2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a16      	ldr	r2, [pc, #88]	; (8006110 <TIM_OC1_SetConfig+0xf0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d003      	beq.n	80060c2 <TIM_OC1_SetConfig+0xa2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a15      	ldr	r2, [pc, #84]	; (8006114 <TIM_OC1_SetConfig+0xf4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d111      	bne.n	80060e6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	621a      	str	r2, [r3, #32]
}
 8006100:	bf00      	nop
 8006102:	371c      	adds	r7, #28
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40014000 	.word	0x40014000
 8006114:	40014400 	.word	0x40014400

08006118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f023 0210 	bic.w	r2, r3, #16
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f023 0320 	bic.w	r3, r3, #32
 8006166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	011b      	lsls	r3, r3, #4
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a22      	ldr	r2, [pc, #136]	; (8006200 <TIM_OC2_SetConfig+0xe8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d10d      	bne.n	8006198 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a19      	ldr	r2, [pc, #100]	; (8006200 <TIM_OC2_SetConfig+0xe8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d007      	beq.n	80061b0 <TIM_OC2_SetConfig+0x98>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a18      	ldr	r2, [pc, #96]	; (8006204 <TIM_OC2_SetConfig+0xec>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_OC2_SetConfig+0x98>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a17      	ldr	r2, [pc, #92]	; (8006208 <TIM_OC2_SetConfig+0xf0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d113      	bne.n	80061d8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	621a      	str	r2, [r3, #32]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40012c00 	.word	0x40012c00
 8006204:	40014000 	.word	0x40014000
 8006208:	40014400 	.word	0x40014400

0800620c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a21      	ldr	r2, [pc, #132]	; (80062f0 <TIM_OC3_SetConfig+0xe4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d10d      	bne.n	800628a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	021b      	lsls	r3, r3, #8
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a18      	ldr	r2, [pc, #96]	; (80062f0 <TIM_OC3_SetConfig+0xe4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC3_SetConfig+0x96>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a17      	ldr	r2, [pc, #92]	; (80062f4 <TIM_OC3_SetConfig+0xe8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC3_SetConfig+0x96>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a16      	ldr	r2, [pc, #88]	; (80062f8 <TIM_OC3_SetConfig+0xec>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d113      	bne.n	80062ca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40014400 	.word	0x40014400

080062fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	68fa      	ldr	r2, [r7, #12]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800634a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	031b      	lsls	r3, r3, #12
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a14      	ldr	r2, [pc, #80]	; (80063ac <TIM_OC4_SetConfig+0xb0>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d007      	beq.n	8006370 <TIM_OC4_SetConfig+0x74>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <TIM_OC4_SetConfig+0xb4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_OC4_SetConfig+0x74>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a12      	ldr	r2, [pc, #72]	; (80063b4 <TIM_OC4_SetConfig+0xb8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d109      	bne.n	8006384 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006376:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	019b      	lsls	r3, r3, #6
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	621a      	str	r2, [r3, #32]
}
 800639e:	bf00      	nop
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400

080063b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80063fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	041b      	lsls	r3, r3, #16
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a13      	ldr	r2, [pc, #76]	; (800645c <TIM_OC5_SetConfig+0xa4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_OC5_SetConfig+0x6a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a12      	ldr	r2, [pc, #72]	; (8006460 <TIM_OC5_SetConfig+0xa8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_OC5_SetConfig+0x6a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a11      	ldr	r2, [pc, #68]	; (8006464 <TIM_OC5_SetConfig+0xac>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d109      	bne.n	8006436 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006428:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	621a      	str	r2, [r3, #32]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	40012c00 	.word	0x40012c00
 8006460:	40014000 	.word	0x40014000
 8006464:	40014400 	.word	0x40014400

08006468 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	051b      	lsls	r3, r3, #20
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a14      	ldr	r2, [pc, #80]	; (8006510 <TIM_OC6_SetConfig+0xa8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d007      	beq.n	80064d4 <TIM_OC6_SetConfig+0x6c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a13      	ldr	r2, [pc, #76]	; (8006514 <TIM_OC6_SetConfig+0xac>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC6_SetConfig+0x6c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a12      	ldr	r2, [pc, #72]	; (8006518 <TIM_OC6_SetConfig+0xb0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d109      	bne.n	80064e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	029b      	lsls	r3, r3, #10
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40014000 	.word	0x40014000
 8006518:	40014400 	.word	0x40014400

0800651c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f023 0201 	bic.w	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f023 030a 	bic.w	r3, r3, #10
 8006558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	621a      	str	r2, [r3, #32]
}
 800656e:	bf00      	nop
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800657a:	b480      	push	{r7}
 800657c:	b087      	sub	sp, #28
 800657e:	af00      	add	r7, sp, #0
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	f023 0210 	bic.w	r2, r3, #16
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	031b      	lsls	r3, r3, #12
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	bf00      	nop
 80065d0:	371c      	adds	r7, #28
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065da:	b480      	push	{r7}
 80065dc:	b085      	sub	sp, #20
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f043 0307 	orr.w	r3, r3, #7
 80065fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	609a      	str	r2, [r3, #8]
}
 8006604:	bf00      	nop
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800662a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	021a      	lsls	r2, r3, #8
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	431a      	orrs	r2, r3
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4313      	orrs	r3, r2
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4313      	orrs	r3, r2
 800663c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	609a      	str	r2, [r3, #8]
}
 8006644:	bf00      	nop
 8006646:	371c      	adds	r7, #28
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006664:	2302      	movs	r3, #2
 8006666:	e04f      	b.n	8006708 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a21      	ldr	r2, [pc, #132]	; (8006714 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d108      	bne.n	80066a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006698:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a14      	ldr	r2, [pc, #80]	; (8006714 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d009      	beq.n	80066dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d0:	d004      	beq.n	80066dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a10      	ldr	r2, [pc, #64]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d10c      	bne.n	80066f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3714      	adds	r7, #20
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	40012c00 	.word	0x40012c00
 8006718:	40014000 	.word	0x40014000

0800671c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006734:	2302      	movs	r3, #2
 8006736:	e060      	b.n	80067fa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	4313      	orrs	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4313      	orrs	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a14      	ldr	r2, [pc, #80]	; (8006808 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d115      	bne.n	80067e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	051b      	lsls	r3, r3, #20
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40012c00 	.word	0x40012c00

0800680c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e040      	b.n	80068a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fb f9b4 	bl	8001b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2224      	movs	r2, #36	; 0x24
 8006838:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0201 	bic.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f992 	bl	8006b74 <UART_SetConfig>
 8006850:	4603      	mov	r3, r0
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e022      	b.n	80068a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fbe0 	bl	8007028 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689a      	ldr	r2, [r3, #8]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fc67 	bl	800716c <UART_CheckIdleState>
 800689e:	4603      	mov	r3, r0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08a      	sub	sp, #40	; 0x28
 80068ac:	af02      	add	r7, sp, #8
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068bc:	2b20      	cmp	r3, #32
 80068be:	f040 8082 	bne.w	80069c6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <HAL_UART_Transmit+0x26>
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e07a      	b.n	80069c8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_UART_Transmit+0x38>
 80068dc:	2302      	movs	r3, #2
 80068de:	e073      	b.n	80069c8 <HAL_UART_Transmit+0x120>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2221      	movs	r2, #33	; 0x21
 80068f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068f6:	f7fb fb2b 	bl	8001f50 <HAL_GetTick>
 80068fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	88fa      	ldrh	r2, [r7, #6]
 8006908:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006914:	d108      	bne.n	8006928 <HAL_UART_Transmit+0x80>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d104      	bne.n	8006928 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	61bb      	str	r3, [r7, #24]
 8006926:	e003      	b.n	8006930 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800692c:	2300      	movs	r3, #0
 800692e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006938:	e02d      	b.n	8006996 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2200      	movs	r2, #0
 8006942:	2180      	movs	r1, #128	; 0x80
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 fc5a 	bl	80071fe <UART_WaitOnFlagUntilTimeout>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e039      	b.n	80069c8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10b      	bne.n	8006972 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	881a      	ldrh	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006966:	b292      	uxth	r2, r2
 8006968:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	3302      	adds	r3, #2
 800696e:	61bb      	str	r3, [r7, #24]
 8006970:	e008      	b.n	8006984 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	781a      	ldrb	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	b292      	uxth	r2, r2
 800697c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3301      	adds	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1cb      	bne.n	800693a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2200      	movs	r2, #0
 80069aa:	2140      	movs	r1, #64	; 0x40
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fc26 	bl	80071fe <UART_WaitOnFlagUntilTimeout>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e005      	b.n	80069c8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e000      	b.n	80069c8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80069c6:	2302      	movs	r3, #2
  }
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3720      	adds	r7, #32
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	; 0x28
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	4613      	mov	r3, r2
 80069de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	f040 80bf 	bne.w	8006b68 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <HAL_UART_Receive+0x26>
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e0b7      	b.n	8006b6a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_UART_Receive+0x38>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e0b0      	b.n	8006b6a <HAL_UART_Receive+0x19a>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2222      	movs	r2, #34	; 0x22
 8006a1c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a24:	f7fb fa94 	bl	8001f50 <HAL_GetTick>
 8006a28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	88fa      	ldrh	r2, [r7, #6]
 8006a2e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	88fa      	ldrh	r2, [r7, #6]
 8006a36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a42:	d10e      	bne.n	8006a62 <HAL_UART_Receive+0x92>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d105      	bne.n	8006a58 <HAL_UART_Receive+0x88>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a56:	e02d      	b.n	8006ab4 <HAL_UART_Receive+0xe4>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	22ff      	movs	r2, #255	; 0xff
 8006a5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a60:	e028      	b.n	8006ab4 <HAL_UART_Receive+0xe4>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10d      	bne.n	8006a86 <HAL_UART_Receive+0xb6>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d104      	bne.n	8006a7c <HAL_UART_Receive+0xac>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a7a:	e01b      	b.n	8006ab4 <HAL_UART_Receive+0xe4>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	227f      	movs	r2, #127	; 0x7f
 8006a80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a84:	e016      	b.n	8006ab4 <HAL_UART_Receive+0xe4>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a8e:	d10d      	bne.n	8006aac <HAL_UART_Receive+0xdc>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d104      	bne.n	8006aa2 <HAL_UART_Receive+0xd2>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	227f      	movs	r2, #127	; 0x7f
 8006a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aa0:	e008      	b.n	8006ab4 <HAL_UART_Receive+0xe4>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	223f      	movs	r2, #63	; 0x3f
 8006aa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aaa:	e003      	b.n	8006ab4 <HAL_UART_Receive+0xe4>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006aba:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac4:	d108      	bne.n	8006ad8 <HAL_UART_Receive+0x108>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d104      	bne.n	8006ad8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e003      	b.n	8006ae0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006ae8:	e033      	b.n	8006b52 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2200      	movs	r2, #0
 8006af2:	2120      	movs	r1, #32
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 fb82 	bl	80071fe <UART_WaitOnFlagUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e032      	b.n	8006b6a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10c      	bne.n	8006b24 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	8a7b      	ldrh	r3, [r7, #18]
 8006b14:	4013      	ands	r3, r2
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	3302      	adds	r3, #2
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e00d      	b.n	8006b40 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	8a7b      	ldrh	r3, [r7, #18]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	4013      	ands	r3, r2
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1c5      	bne.n	8006aea <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e000      	b.n	8006b6a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006b68:	2302      	movs	r3, #2
  }
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b78:	b08a      	sub	sp, #40	; 0x28
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b9e      	ldr	r3, [pc, #632]	; (8006e1c <UART_SetConfig+0x2a8>)
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a93      	ldr	r2, [pc, #588]	; (8006e20 <UART_SetConfig+0x2ac>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a8a      	ldr	r2, [pc, #552]	; (8006e24 <UART_SetConfig+0x2b0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d126      	bne.n	8006c4c <UART_SetConfig+0xd8>
 8006bfe:	4b8a      	ldr	r3, [pc, #552]	; (8006e28 <UART_SetConfig+0x2b4>)
 8006c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c04:	f003 0303 	and.w	r3, r3, #3
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d81b      	bhi.n	8006c44 <UART_SetConfig+0xd0>
 8006c0c:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <UART_SetConfig+0xa0>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c25 	.word	0x08006c25
 8006c18:	08006c35 	.word	0x08006c35
 8006c1c:	08006c2d 	.word	0x08006c2d
 8006c20:	08006c3d 	.word	0x08006c3d
 8006c24:	2301      	movs	r3, #1
 8006c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2a:	e0ab      	b.n	8006d84 <UART_SetConfig+0x210>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c32:	e0a7      	b.n	8006d84 <UART_SetConfig+0x210>
 8006c34:	2304      	movs	r3, #4
 8006c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c3a:	e0a3      	b.n	8006d84 <UART_SetConfig+0x210>
 8006c3c:	2308      	movs	r3, #8
 8006c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c42:	e09f      	b.n	8006d84 <UART_SetConfig+0x210>
 8006c44:	2310      	movs	r3, #16
 8006c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c4a:	e09b      	b.n	8006d84 <UART_SetConfig+0x210>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a76      	ldr	r2, [pc, #472]	; (8006e2c <UART_SetConfig+0x2b8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d138      	bne.n	8006cc8 <UART_SetConfig+0x154>
 8006c56:	4b74      	ldr	r3, [pc, #464]	; (8006e28 <UART_SetConfig+0x2b4>)
 8006c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5c:	f003 030c 	and.w	r3, r3, #12
 8006c60:	2b0c      	cmp	r3, #12
 8006c62:	d82d      	bhi.n	8006cc0 <UART_SetConfig+0x14c>
 8006c64:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <UART_SetConfig+0xf8>)
 8006c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6a:	bf00      	nop
 8006c6c:	08006ca1 	.word	0x08006ca1
 8006c70:	08006cc1 	.word	0x08006cc1
 8006c74:	08006cc1 	.word	0x08006cc1
 8006c78:	08006cc1 	.word	0x08006cc1
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006cc1 	.word	0x08006cc1
 8006c84:	08006cc1 	.word	0x08006cc1
 8006c88:	08006cc1 	.word	0x08006cc1
 8006c8c:	08006ca9 	.word	0x08006ca9
 8006c90:	08006cc1 	.word	0x08006cc1
 8006c94:	08006cc1 	.word	0x08006cc1
 8006c98:	08006cc1 	.word	0x08006cc1
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ca6:	e06d      	b.n	8006d84 <UART_SetConfig+0x210>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cae:	e069      	b.n	8006d84 <UART_SetConfig+0x210>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cb6:	e065      	b.n	8006d84 <UART_SetConfig+0x210>
 8006cb8:	2308      	movs	r3, #8
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cbe:	e061      	b.n	8006d84 <UART_SetConfig+0x210>
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc6:	e05d      	b.n	8006d84 <UART_SetConfig+0x210>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a58      	ldr	r2, [pc, #352]	; (8006e30 <UART_SetConfig+0x2bc>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d125      	bne.n	8006d1e <UART_SetConfig+0x1aa>
 8006cd2:	4b55      	ldr	r3, [pc, #340]	; (8006e28 <UART_SetConfig+0x2b4>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cdc:	2b30      	cmp	r3, #48	; 0x30
 8006cde:	d016      	beq.n	8006d0e <UART_SetConfig+0x19a>
 8006ce0:	2b30      	cmp	r3, #48	; 0x30
 8006ce2:	d818      	bhi.n	8006d16 <UART_SetConfig+0x1a2>
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d00a      	beq.n	8006cfe <UART_SetConfig+0x18a>
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d814      	bhi.n	8006d16 <UART_SetConfig+0x1a2>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <UART_SetConfig+0x182>
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	d008      	beq.n	8006d06 <UART_SetConfig+0x192>
 8006cf4:	e00f      	b.n	8006d16 <UART_SetConfig+0x1a2>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cfc:	e042      	b.n	8006d84 <UART_SetConfig+0x210>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d04:	e03e      	b.n	8006d84 <UART_SetConfig+0x210>
 8006d06:	2304      	movs	r3, #4
 8006d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d0c:	e03a      	b.n	8006d84 <UART_SetConfig+0x210>
 8006d0e:	2308      	movs	r3, #8
 8006d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d14:	e036      	b.n	8006d84 <UART_SetConfig+0x210>
 8006d16:	2310      	movs	r3, #16
 8006d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d1c:	e032      	b.n	8006d84 <UART_SetConfig+0x210>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a3f      	ldr	r2, [pc, #252]	; (8006e20 <UART_SetConfig+0x2ac>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d12a      	bne.n	8006d7e <UART_SetConfig+0x20a>
 8006d28:	4b3f      	ldr	r3, [pc, #252]	; (8006e28 <UART_SetConfig+0x2b4>)
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d36:	d01a      	beq.n	8006d6e <UART_SetConfig+0x1fa>
 8006d38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d3c:	d81b      	bhi.n	8006d76 <UART_SetConfig+0x202>
 8006d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d42:	d00c      	beq.n	8006d5e <UART_SetConfig+0x1ea>
 8006d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d48:	d815      	bhi.n	8006d76 <UART_SetConfig+0x202>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <UART_SetConfig+0x1e2>
 8006d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d52:	d008      	beq.n	8006d66 <UART_SetConfig+0x1f2>
 8006d54:	e00f      	b.n	8006d76 <UART_SetConfig+0x202>
 8006d56:	2300      	movs	r3, #0
 8006d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5c:	e012      	b.n	8006d84 <UART_SetConfig+0x210>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d64:	e00e      	b.n	8006d84 <UART_SetConfig+0x210>
 8006d66:	2304      	movs	r3, #4
 8006d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d6c:	e00a      	b.n	8006d84 <UART_SetConfig+0x210>
 8006d6e:	2308      	movs	r3, #8
 8006d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d74:	e006      	b.n	8006d84 <UART_SetConfig+0x210>
 8006d76:	2310      	movs	r3, #16
 8006d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d7c:	e002      	b.n	8006d84 <UART_SetConfig+0x210>
 8006d7e:	2310      	movs	r3, #16
 8006d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a25      	ldr	r2, [pc, #148]	; (8006e20 <UART_SetConfig+0x2ac>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	f040 808a 	bne.w	8006ea4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d824      	bhi.n	8006de2 <UART_SetConfig+0x26e>
 8006d98:	a201      	add	r2, pc, #4	; (adr r2, 8006da0 <UART_SetConfig+0x22c>)
 8006d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9e:	bf00      	nop
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006de3 	.word	0x08006de3
 8006da8:	08006dcd 	.word	0x08006dcd
 8006dac:	08006de3 	.word	0x08006de3
 8006db0:	08006dd3 	.word	0x08006dd3
 8006db4:	08006de3 	.word	0x08006de3
 8006db8:	08006de3 	.word	0x08006de3
 8006dbc:	08006de3 	.word	0x08006de3
 8006dc0:	08006ddb 	.word	0x08006ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc4:	f7fe fa9c 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8006dc8:	61f8      	str	r0, [r7, #28]
        break;
 8006dca:	e010      	b.n	8006dee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dcc:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <UART_SetConfig+0x2c0>)
 8006dce:	61fb      	str	r3, [r7, #28]
        break;
 8006dd0:	e00d      	b.n	8006dee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dd2:	f7fe f9ff 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8006dd6:	61f8      	str	r0, [r7, #28]
        break;
 8006dd8:	e009      	b.n	8006dee <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dde:	61fb      	str	r3, [r7, #28]
        break;
 8006de0:	e005      	b.n	8006dee <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006dec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8109 	beq.w	8007008 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	4413      	add	r3, r2
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d305      	bcc.n	8006e12 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d912      	bls.n	8006e38 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e18:	e0f6      	b.n	8007008 <UART_SetConfig+0x494>
 8006e1a:	bf00      	nop
 8006e1c:	efff69f3 	.word	0xefff69f3
 8006e20:	40008000 	.word	0x40008000
 8006e24:	40013800 	.word	0x40013800
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	40004400 	.word	0x40004400
 8006e30:	40004800 	.word	0x40004800
 8006e34:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	461c      	mov	r4, r3
 8006e3e:	4615      	mov	r5, r2
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	022b      	lsls	r3, r5, #8
 8006e4a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e4e:	0222      	lsls	r2, r4, #8
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	6849      	ldr	r1, [r1, #4]
 8006e54:	0849      	lsrs	r1, r1, #1
 8006e56:	2000      	movs	r0, #0
 8006e58:	4688      	mov	r8, r1
 8006e5a:	4681      	mov	r9, r0
 8006e5c:	eb12 0a08 	adds.w	sl, r2, r8
 8006e60:	eb43 0b09 	adc.w	fp, r3, r9
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	607a      	str	r2, [r7, #4]
 8006e6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e72:	4650      	mov	r0, sl
 8006e74:	4659      	mov	r1, fp
 8006e76:	f7f9 ff07 	bl	8000c88 <__aeabi_uldivmod>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	4613      	mov	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e88:	d308      	bcc.n	8006e9c <UART_SetConfig+0x328>
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e90:	d204      	bcs.n	8006e9c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	60da      	str	r2, [r3, #12]
 8006e9a:	e0b5      	b.n	8007008 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ea2:	e0b1      	b.n	8007008 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eac:	d15d      	bne.n	8006f6a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d827      	bhi.n	8006f06 <UART_SetConfig+0x392>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0x348>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006ee1 	.word	0x08006ee1
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	08006f07 	.word	0x08006f07
 8006ecc:	08006ef7 	.word	0x08006ef7
 8006ed0:	08006f07 	.word	0x08006f07
 8006ed4:	08006f07 	.word	0x08006f07
 8006ed8:	08006f07 	.word	0x08006f07
 8006edc:	08006eff 	.word	0x08006eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee0:	f7fe fa0e 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8006ee4:	61f8      	str	r0, [r7, #28]
        break;
 8006ee6:	e014      	b.n	8006f12 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ee8:	f7fe fa20 	bl	800532c <HAL_RCC_GetPCLK2Freq>
 8006eec:	61f8      	str	r0, [r7, #28]
        break;
 8006eee:	e010      	b.n	8006f12 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef0:	4b4c      	ldr	r3, [pc, #304]	; (8007024 <UART_SetConfig+0x4b0>)
 8006ef2:	61fb      	str	r3, [r7, #28]
        break;
 8006ef4:	e00d      	b.n	8006f12 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef6:	f7fe f96d 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8006efa:	61f8      	str	r0, [r7, #28]
        break;
 8006efc:	e009      	b.n	8006f12 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f02:	61fb      	str	r3, [r7, #28]
        break;
 8006f04:	e005      	b.n	8006f12 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d077      	beq.n	8007008 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	005a      	lsls	r2, r3, #1
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	441a      	add	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	2b0f      	cmp	r3, #15
 8006f32:	d916      	bls.n	8006f62 <UART_SetConfig+0x3ee>
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3a:	d212      	bcs.n	8006f62 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f023 030f 	bic.w	r3, r3, #15
 8006f44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	8afb      	ldrh	r3, [r7, #22]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	8afa      	ldrh	r2, [r7, #22]
 8006f5e:	60da      	str	r2, [r3, #12]
 8006f60:	e052      	b.n	8007008 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f68:	e04e      	b.n	8007008 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d827      	bhi.n	8006fc2 <UART_SetConfig+0x44e>
 8006f72:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <UART_SetConfig+0x404>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006f9d 	.word	0x08006f9d
 8006f7c:	08006fa5 	.word	0x08006fa5
 8006f80:	08006fad 	.word	0x08006fad
 8006f84:	08006fc3 	.word	0x08006fc3
 8006f88:	08006fb3 	.word	0x08006fb3
 8006f8c:	08006fc3 	.word	0x08006fc3
 8006f90:	08006fc3 	.word	0x08006fc3
 8006f94:	08006fc3 	.word	0x08006fc3
 8006f98:	08006fbb 	.word	0x08006fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f9c:	f7fe f9b0 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8006fa0:	61f8      	str	r0, [r7, #28]
        break;
 8006fa2:	e014      	b.n	8006fce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fa4:	f7fe f9c2 	bl	800532c <HAL_RCC_GetPCLK2Freq>
 8006fa8:	61f8      	str	r0, [r7, #28]
        break;
 8006faa:	e010      	b.n	8006fce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fac:	4b1d      	ldr	r3, [pc, #116]	; (8007024 <UART_SetConfig+0x4b0>)
 8006fae:	61fb      	str	r3, [r7, #28]
        break;
 8006fb0:	e00d      	b.n	8006fce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb2:	f7fe f90f 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8006fb6:	61f8      	str	r0, [r7, #28]
        break;
 8006fb8:	e009      	b.n	8006fce <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fbe:	61fb      	str	r3, [r7, #28]
        break;
 8006fc0:	e005      	b.n	8006fce <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fcc:	bf00      	nop
    }

    if (pclk != 0U)
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d019      	beq.n	8007008 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	085a      	lsrs	r2, r3, #1
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	441a      	add	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	2b0f      	cmp	r3, #15
 8006fec:	d909      	bls.n	8007002 <UART_SetConfig+0x48e>
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff4:	d205      	bcs.n	8007002 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60da      	str	r2, [r3, #12]
 8007000:	e002      	b.n	8007008 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007014:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007018:	4618      	mov	r0, r3
 800701a:	3728      	adds	r7, #40	; 0x28
 800701c:	46bd      	mov	sp, r7
 800701e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007022:	bf00      	nop
 8007024:	00f42400 	.word	0x00f42400

08007028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00a      	beq.n	8007074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	f003 0308 	and.w	r3, r3, #8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007104:	2b00      	cmp	r3, #0
 8007106:	d01a      	beq.n	800713e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007126:	d10a      	bne.n	800713e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	605a      	str	r2, [r3, #4]
  }
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af02      	add	r7, sp, #8
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800717c:	f7fa fee8 	bl	8001f50 <HAL_GetTick>
 8007180:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b08      	cmp	r3, #8
 800718e:	d10e      	bne.n	80071ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f82d 	bl	80071fe <UART_WaitOnFlagUntilTimeout>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e023      	b.n	80071f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d10e      	bne.n	80071da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f817 	bl	80071fe <UART_WaitOnFlagUntilTimeout>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e00d      	b.n	80071f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2220      	movs	r2, #32
 80071e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b09c      	sub	sp, #112	; 0x70
 8007202:	af00      	add	r7, sp, #0
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	603b      	str	r3, [r7, #0]
 800720a:	4613      	mov	r3, r2
 800720c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800720e:	e0a5      	b.n	800735c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007216:	f000 80a1 	beq.w	800735c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800721a:	f7fa fe99 	bl	8001f50 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007226:	429a      	cmp	r2, r3
 8007228:	d302      	bcc.n	8007230 <UART_WaitOnFlagUntilTimeout+0x32>
 800722a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800722c:	2b00      	cmp	r3, #0
 800722e:	d13e      	bne.n	80072ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800723e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007240:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007244:	667b      	str	r3, [r7, #100]	; 0x64
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800724e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007250:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007254:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800725c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e6      	bne.n	8007230 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	3308      	adds	r3, #8
 8007268:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	663b      	str	r3, [r7, #96]	; 0x60
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3308      	adds	r3, #8
 8007280:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007282:	64ba      	str	r2, [r7, #72]	; 0x48
 8007284:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e5      	bne.n	8007262 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2220      	movs	r2, #32
 800729a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2220      	movs	r2, #32
 80072a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e067      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d04f      	beq.n	800735c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ca:	d147      	bne.n	800735c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	461a      	mov	r2, r3
 80072f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
 80072f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e6      	bne.n	80072d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3308      	adds	r3, #8
 800730e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	613b      	str	r3, [r7, #16]
   return(result);
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f023 0301 	bic.w	r3, r3, #1
 800731e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3308      	adds	r3, #8
 8007326:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007328:	623a      	str	r2, [r7, #32]
 800732a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	69f9      	ldr	r1, [r7, #28]
 800732e:	6a3a      	ldr	r2, [r7, #32]
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	61bb      	str	r3, [r7, #24]
   return(result);
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e5      	bne.n	8007308 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2220      	movs	r2, #32
 8007340:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e010      	b.n	800737e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	69da      	ldr	r2, [r3, #28]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	4013      	ands	r3, r2
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	429a      	cmp	r2, r3
 800736a:	bf0c      	ite	eq
 800736c:	2301      	moveq	r3, #1
 800736e:	2300      	movne	r3, #0
 8007370:	b2db      	uxtb	r3, r3
 8007372:	461a      	mov	r2, r3
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	429a      	cmp	r2, r3
 8007378:	f43f af4a 	beq.w	8007210 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3770      	adds	r7, #112	; 0x70
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <__errno>:
 8007388:	4b01      	ldr	r3, [pc, #4]	; (8007390 <__errno+0x8>)
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	2000000c 	.word	0x2000000c

08007394 <__libc_init_array>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4d0d      	ldr	r5, [pc, #52]	; (80073cc <__libc_init_array+0x38>)
 8007398:	4c0d      	ldr	r4, [pc, #52]	; (80073d0 <__libc_init_array+0x3c>)
 800739a:	1b64      	subs	r4, r4, r5
 800739c:	10a4      	asrs	r4, r4, #2
 800739e:	2600      	movs	r6, #0
 80073a0:	42a6      	cmp	r6, r4
 80073a2:	d109      	bne.n	80073b8 <__libc_init_array+0x24>
 80073a4:	4d0b      	ldr	r5, [pc, #44]	; (80073d4 <__libc_init_array+0x40>)
 80073a6:	4c0c      	ldr	r4, [pc, #48]	; (80073d8 <__libc_init_array+0x44>)
 80073a8:	f004 fcaa 	bl	800bd00 <_init>
 80073ac:	1b64      	subs	r4, r4, r5
 80073ae:	10a4      	asrs	r4, r4, #2
 80073b0:	2600      	movs	r6, #0
 80073b2:	42a6      	cmp	r6, r4
 80073b4:	d105      	bne.n	80073c2 <__libc_init_array+0x2e>
 80073b6:	bd70      	pop	{r4, r5, r6, pc}
 80073b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073bc:	4798      	blx	r3
 80073be:	3601      	adds	r6, #1
 80073c0:	e7ee      	b.n	80073a0 <__libc_init_array+0xc>
 80073c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c6:	4798      	blx	r3
 80073c8:	3601      	adds	r6, #1
 80073ca:	e7f2      	b.n	80073b2 <__libc_init_array+0x1e>
 80073cc:	0800c25c 	.word	0x0800c25c
 80073d0:	0800c25c 	.word	0x0800c25c
 80073d4:	0800c25c 	.word	0x0800c25c
 80073d8:	0800c260 	.word	0x0800c260

080073dc <memset>:
 80073dc:	4402      	add	r2, r0
 80073de:	4603      	mov	r3, r0
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d100      	bne.n	80073e6 <memset+0xa>
 80073e4:	4770      	bx	lr
 80073e6:	f803 1b01 	strb.w	r1, [r3], #1
 80073ea:	e7f9      	b.n	80073e0 <memset+0x4>

080073ec <__cvt>:
 80073ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	ec55 4b10 	vmov	r4, r5, d0
 80073f4:	2d00      	cmp	r5, #0
 80073f6:	460e      	mov	r6, r1
 80073f8:	4619      	mov	r1, r3
 80073fa:	462b      	mov	r3, r5
 80073fc:	bfbb      	ittet	lt
 80073fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007402:	461d      	movlt	r5, r3
 8007404:	2300      	movge	r3, #0
 8007406:	232d      	movlt	r3, #45	; 0x2d
 8007408:	700b      	strb	r3, [r1, #0]
 800740a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800740c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007410:	4691      	mov	r9, r2
 8007412:	f023 0820 	bic.w	r8, r3, #32
 8007416:	bfbc      	itt	lt
 8007418:	4622      	movlt	r2, r4
 800741a:	4614      	movlt	r4, r2
 800741c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007420:	d005      	beq.n	800742e <__cvt+0x42>
 8007422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007426:	d100      	bne.n	800742a <__cvt+0x3e>
 8007428:	3601      	adds	r6, #1
 800742a:	2102      	movs	r1, #2
 800742c:	e000      	b.n	8007430 <__cvt+0x44>
 800742e:	2103      	movs	r1, #3
 8007430:	ab03      	add	r3, sp, #12
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	ab02      	add	r3, sp, #8
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	ec45 4b10 	vmov	d0, r4, r5
 800743c:	4653      	mov	r3, sl
 800743e:	4632      	mov	r2, r6
 8007440:	f001 fdc6 	bl	8008fd0 <_dtoa_r>
 8007444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007448:	4607      	mov	r7, r0
 800744a:	d102      	bne.n	8007452 <__cvt+0x66>
 800744c:	f019 0f01 	tst.w	r9, #1
 8007450:	d022      	beq.n	8007498 <__cvt+0xac>
 8007452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007456:	eb07 0906 	add.w	r9, r7, r6
 800745a:	d110      	bne.n	800747e <__cvt+0x92>
 800745c:	783b      	ldrb	r3, [r7, #0]
 800745e:	2b30      	cmp	r3, #48	; 0x30
 8007460:	d10a      	bne.n	8007478 <__cvt+0x8c>
 8007462:	2200      	movs	r2, #0
 8007464:	2300      	movs	r3, #0
 8007466:	4620      	mov	r0, r4
 8007468:	4629      	mov	r1, r5
 800746a:	f7f9 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800746e:	b918      	cbnz	r0, 8007478 <__cvt+0x8c>
 8007470:	f1c6 0601 	rsb	r6, r6, #1
 8007474:	f8ca 6000 	str.w	r6, [sl]
 8007478:	f8da 3000 	ldr.w	r3, [sl]
 800747c:	4499      	add	r9, r3
 800747e:	2200      	movs	r2, #0
 8007480:	2300      	movs	r3, #0
 8007482:	4620      	mov	r0, r4
 8007484:	4629      	mov	r1, r5
 8007486:	f7f9 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800748a:	b108      	cbz	r0, 8007490 <__cvt+0xa4>
 800748c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007490:	2230      	movs	r2, #48	; 0x30
 8007492:	9b03      	ldr	r3, [sp, #12]
 8007494:	454b      	cmp	r3, r9
 8007496:	d307      	bcc.n	80074a8 <__cvt+0xbc>
 8007498:	9b03      	ldr	r3, [sp, #12]
 800749a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800749c:	1bdb      	subs	r3, r3, r7
 800749e:	4638      	mov	r0, r7
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	b004      	add	sp, #16
 80074a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a8:	1c59      	adds	r1, r3, #1
 80074aa:	9103      	str	r1, [sp, #12]
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	e7f0      	b.n	8007492 <__cvt+0xa6>

080074b0 <__exponent>:
 80074b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074b2:	4603      	mov	r3, r0
 80074b4:	2900      	cmp	r1, #0
 80074b6:	bfb8      	it	lt
 80074b8:	4249      	neglt	r1, r1
 80074ba:	f803 2b02 	strb.w	r2, [r3], #2
 80074be:	bfb4      	ite	lt
 80074c0:	222d      	movlt	r2, #45	; 0x2d
 80074c2:	222b      	movge	r2, #43	; 0x2b
 80074c4:	2909      	cmp	r1, #9
 80074c6:	7042      	strb	r2, [r0, #1]
 80074c8:	dd2a      	ble.n	8007520 <__exponent+0x70>
 80074ca:	f10d 0407 	add.w	r4, sp, #7
 80074ce:	46a4      	mov	ip, r4
 80074d0:	270a      	movs	r7, #10
 80074d2:	46a6      	mov	lr, r4
 80074d4:	460a      	mov	r2, r1
 80074d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80074da:	fb07 1516 	mls	r5, r7, r6, r1
 80074de:	3530      	adds	r5, #48	; 0x30
 80074e0:	2a63      	cmp	r2, #99	; 0x63
 80074e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80074e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80074ea:	4631      	mov	r1, r6
 80074ec:	dcf1      	bgt.n	80074d2 <__exponent+0x22>
 80074ee:	3130      	adds	r1, #48	; 0x30
 80074f0:	f1ae 0502 	sub.w	r5, lr, #2
 80074f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80074f8:	1c44      	adds	r4, r0, #1
 80074fa:	4629      	mov	r1, r5
 80074fc:	4561      	cmp	r1, ip
 80074fe:	d30a      	bcc.n	8007516 <__exponent+0x66>
 8007500:	f10d 0209 	add.w	r2, sp, #9
 8007504:	eba2 020e 	sub.w	r2, r2, lr
 8007508:	4565      	cmp	r5, ip
 800750a:	bf88      	it	hi
 800750c:	2200      	movhi	r2, #0
 800750e:	4413      	add	r3, r2
 8007510:	1a18      	subs	r0, r3, r0
 8007512:	b003      	add	sp, #12
 8007514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800751a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800751e:	e7ed      	b.n	80074fc <__exponent+0x4c>
 8007520:	2330      	movs	r3, #48	; 0x30
 8007522:	3130      	adds	r1, #48	; 0x30
 8007524:	7083      	strb	r3, [r0, #2]
 8007526:	70c1      	strb	r1, [r0, #3]
 8007528:	1d03      	adds	r3, r0, #4
 800752a:	e7f1      	b.n	8007510 <__exponent+0x60>

0800752c <_printf_float>:
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	ed2d 8b02 	vpush	{d8}
 8007534:	b08d      	sub	sp, #52	; 0x34
 8007536:	460c      	mov	r4, r1
 8007538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800753c:	4616      	mov	r6, r2
 800753e:	461f      	mov	r7, r3
 8007540:	4605      	mov	r5, r0
 8007542:	f002 ff97 	bl	800a474 <_localeconv_r>
 8007546:	f8d0 a000 	ldr.w	sl, [r0]
 800754a:	4650      	mov	r0, sl
 800754c:	f7f8 fe40 	bl	80001d0 <strlen>
 8007550:	2300      	movs	r3, #0
 8007552:	930a      	str	r3, [sp, #40]	; 0x28
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	9305      	str	r3, [sp, #20]
 8007558:	f8d8 3000 	ldr.w	r3, [r8]
 800755c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007560:	3307      	adds	r3, #7
 8007562:	f023 0307 	bic.w	r3, r3, #7
 8007566:	f103 0208 	add.w	r2, r3, #8
 800756a:	f8c8 2000 	str.w	r2, [r8]
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007576:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800757a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800757e:	9307      	str	r3, [sp, #28]
 8007580:	f8cd 8018 	str.w	r8, [sp, #24]
 8007584:	ee08 0a10 	vmov	s16, r0
 8007588:	4b9f      	ldr	r3, [pc, #636]	; (8007808 <_printf_float+0x2dc>)
 800758a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	f7f9 facb 	bl	8000b2c <__aeabi_dcmpun>
 8007596:	bb88      	cbnz	r0, 80075fc <_printf_float+0xd0>
 8007598:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800759c:	4b9a      	ldr	r3, [pc, #616]	; (8007808 <_printf_float+0x2dc>)
 800759e:	f04f 32ff 	mov.w	r2, #4294967295
 80075a2:	f7f9 faa5 	bl	8000af0 <__aeabi_dcmple>
 80075a6:	bb48      	cbnz	r0, 80075fc <_printf_float+0xd0>
 80075a8:	2200      	movs	r2, #0
 80075aa:	2300      	movs	r3, #0
 80075ac:	4640      	mov	r0, r8
 80075ae:	4649      	mov	r1, r9
 80075b0:	f7f9 fa94 	bl	8000adc <__aeabi_dcmplt>
 80075b4:	b110      	cbz	r0, 80075bc <_printf_float+0x90>
 80075b6:	232d      	movs	r3, #45	; 0x2d
 80075b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075bc:	4b93      	ldr	r3, [pc, #588]	; (800780c <_printf_float+0x2e0>)
 80075be:	4894      	ldr	r0, [pc, #592]	; (8007810 <_printf_float+0x2e4>)
 80075c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075c4:	bf94      	ite	ls
 80075c6:	4698      	movls	r8, r3
 80075c8:	4680      	movhi	r8, r0
 80075ca:	2303      	movs	r3, #3
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	9b05      	ldr	r3, [sp, #20]
 80075d0:	f023 0204 	bic.w	r2, r3, #4
 80075d4:	6022      	str	r2, [r4, #0]
 80075d6:	f04f 0900 	mov.w	r9, #0
 80075da:	9700      	str	r7, [sp, #0]
 80075dc:	4633      	mov	r3, r6
 80075de:	aa0b      	add	r2, sp, #44	; 0x2c
 80075e0:	4621      	mov	r1, r4
 80075e2:	4628      	mov	r0, r5
 80075e4:	f000 f9d8 	bl	8007998 <_printf_common>
 80075e8:	3001      	adds	r0, #1
 80075ea:	f040 8090 	bne.w	800770e <_printf_float+0x1e2>
 80075ee:	f04f 30ff 	mov.w	r0, #4294967295
 80075f2:	b00d      	add	sp, #52	; 0x34
 80075f4:	ecbd 8b02 	vpop	{d8}
 80075f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fc:	4642      	mov	r2, r8
 80075fe:	464b      	mov	r3, r9
 8007600:	4640      	mov	r0, r8
 8007602:	4649      	mov	r1, r9
 8007604:	f7f9 fa92 	bl	8000b2c <__aeabi_dcmpun>
 8007608:	b140      	cbz	r0, 800761c <_printf_float+0xf0>
 800760a:	464b      	mov	r3, r9
 800760c:	2b00      	cmp	r3, #0
 800760e:	bfbc      	itt	lt
 8007610:	232d      	movlt	r3, #45	; 0x2d
 8007612:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007616:	487f      	ldr	r0, [pc, #508]	; (8007814 <_printf_float+0x2e8>)
 8007618:	4b7f      	ldr	r3, [pc, #508]	; (8007818 <_printf_float+0x2ec>)
 800761a:	e7d1      	b.n	80075c0 <_printf_float+0x94>
 800761c:	6863      	ldr	r3, [r4, #4]
 800761e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007622:	9206      	str	r2, [sp, #24]
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	d13f      	bne.n	80076a8 <_printf_float+0x17c>
 8007628:	2306      	movs	r3, #6
 800762a:	6063      	str	r3, [r4, #4]
 800762c:	9b05      	ldr	r3, [sp, #20]
 800762e:	6861      	ldr	r1, [r4, #4]
 8007630:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007634:	2300      	movs	r3, #0
 8007636:	9303      	str	r3, [sp, #12]
 8007638:	ab0a      	add	r3, sp, #40	; 0x28
 800763a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800763e:	ab09      	add	r3, sp, #36	; 0x24
 8007640:	ec49 8b10 	vmov	d0, r8, r9
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	6022      	str	r2, [r4, #0]
 8007648:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800764c:	4628      	mov	r0, r5
 800764e:	f7ff fecd 	bl	80073ec <__cvt>
 8007652:	9b06      	ldr	r3, [sp, #24]
 8007654:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007656:	2b47      	cmp	r3, #71	; 0x47
 8007658:	4680      	mov	r8, r0
 800765a:	d108      	bne.n	800766e <_printf_float+0x142>
 800765c:	1cc8      	adds	r0, r1, #3
 800765e:	db02      	blt.n	8007666 <_printf_float+0x13a>
 8007660:	6863      	ldr	r3, [r4, #4]
 8007662:	4299      	cmp	r1, r3
 8007664:	dd41      	ble.n	80076ea <_printf_float+0x1be>
 8007666:	f1ab 0b02 	sub.w	fp, fp, #2
 800766a:	fa5f fb8b 	uxtb.w	fp, fp
 800766e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007672:	d820      	bhi.n	80076b6 <_printf_float+0x18a>
 8007674:	3901      	subs	r1, #1
 8007676:	465a      	mov	r2, fp
 8007678:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800767c:	9109      	str	r1, [sp, #36]	; 0x24
 800767e:	f7ff ff17 	bl	80074b0 <__exponent>
 8007682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007684:	1813      	adds	r3, r2, r0
 8007686:	2a01      	cmp	r2, #1
 8007688:	4681      	mov	r9, r0
 800768a:	6123      	str	r3, [r4, #16]
 800768c:	dc02      	bgt.n	8007694 <_printf_float+0x168>
 800768e:	6822      	ldr	r2, [r4, #0]
 8007690:	07d2      	lsls	r2, r2, #31
 8007692:	d501      	bpl.n	8007698 <_printf_float+0x16c>
 8007694:	3301      	adds	r3, #1
 8007696:	6123      	str	r3, [r4, #16]
 8007698:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800769c:	2b00      	cmp	r3, #0
 800769e:	d09c      	beq.n	80075da <_printf_float+0xae>
 80076a0:	232d      	movs	r3, #45	; 0x2d
 80076a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a6:	e798      	b.n	80075da <_printf_float+0xae>
 80076a8:	9a06      	ldr	r2, [sp, #24]
 80076aa:	2a47      	cmp	r2, #71	; 0x47
 80076ac:	d1be      	bne.n	800762c <_printf_float+0x100>
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1bc      	bne.n	800762c <_printf_float+0x100>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e7b9      	b.n	800762a <_printf_float+0xfe>
 80076b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076ba:	d118      	bne.n	80076ee <_printf_float+0x1c2>
 80076bc:	2900      	cmp	r1, #0
 80076be:	6863      	ldr	r3, [r4, #4]
 80076c0:	dd0b      	ble.n	80076da <_printf_float+0x1ae>
 80076c2:	6121      	str	r1, [r4, #16]
 80076c4:	b913      	cbnz	r3, 80076cc <_printf_float+0x1a0>
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	07d0      	lsls	r0, r2, #31
 80076ca:	d502      	bpl.n	80076d2 <_printf_float+0x1a6>
 80076cc:	3301      	adds	r3, #1
 80076ce:	440b      	add	r3, r1
 80076d0:	6123      	str	r3, [r4, #16]
 80076d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80076d4:	f04f 0900 	mov.w	r9, #0
 80076d8:	e7de      	b.n	8007698 <_printf_float+0x16c>
 80076da:	b913      	cbnz	r3, 80076e2 <_printf_float+0x1b6>
 80076dc:	6822      	ldr	r2, [r4, #0]
 80076de:	07d2      	lsls	r2, r2, #31
 80076e0:	d501      	bpl.n	80076e6 <_printf_float+0x1ba>
 80076e2:	3302      	adds	r3, #2
 80076e4:	e7f4      	b.n	80076d0 <_printf_float+0x1a4>
 80076e6:	2301      	movs	r3, #1
 80076e8:	e7f2      	b.n	80076d0 <_printf_float+0x1a4>
 80076ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f0:	4299      	cmp	r1, r3
 80076f2:	db05      	blt.n	8007700 <_printf_float+0x1d4>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	6121      	str	r1, [r4, #16]
 80076f8:	07d8      	lsls	r0, r3, #31
 80076fa:	d5ea      	bpl.n	80076d2 <_printf_float+0x1a6>
 80076fc:	1c4b      	adds	r3, r1, #1
 80076fe:	e7e7      	b.n	80076d0 <_printf_float+0x1a4>
 8007700:	2900      	cmp	r1, #0
 8007702:	bfd4      	ite	le
 8007704:	f1c1 0202 	rsble	r2, r1, #2
 8007708:	2201      	movgt	r2, #1
 800770a:	4413      	add	r3, r2
 800770c:	e7e0      	b.n	80076d0 <_printf_float+0x1a4>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	055a      	lsls	r2, r3, #21
 8007712:	d407      	bmi.n	8007724 <_printf_float+0x1f8>
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	4642      	mov	r2, r8
 8007718:	4631      	mov	r1, r6
 800771a:	4628      	mov	r0, r5
 800771c:	47b8      	blx	r7
 800771e:	3001      	adds	r0, #1
 8007720:	d12c      	bne.n	800777c <_printf_float+0x250>
 8007722:	e764      	b.n	80075ee <_printf_float+0xc2>
 8007724:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007728:	f240 80e0 	bls.w	80078ec <_printf_float+0x3c0>
 800772c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007730:	2200      	movs	r2, #0
 8007732:	2300      	movs	r3, #0
 8007734:	f7f9 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007738:	2800      	cmp	r0, #0
 800773a:	d034      	beq.n	80077a6 <_printf_float+0x27a>
 800773c:	4a37      	ldr	r2, [pc, #220]	; (800781c <_printf_float+0x2f0>)
 800773e:	2301      	movs	r3, #1
 8007740:	4631      	mov	r1, r6
 8007742:	4628      	mov	r0, r5
 8007744:	47b8      	blx	r7
 8007746:	3001      	adds	r0, #1
 8007748:	f43f af51 	beq.w	80075ee <_printf_float+0xc2>
 800774c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007750:	429a      	cmp	r2, r3
 8007752:	db02      	blt.n	800775a <_printf_float+0x22e>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	07d8      	lsls	r0, r3, #31
 8007758:	d510      	bpl.n	800777c <_printf_float+0x250>
 800775a:	ee18 3a10 	vmov	r3, s16
 800775e:	4652      	mov	r2, sl
 8007760:	4631      	mov	r1, r6
 8007762:	4628      	mov	r0, r5
 8007764:	47b8      	blx	r7
 8007766:	3001      	adds	r0, #1
 8007768:	f43f af41 	beq.w	80075ee <_printf_float+0xc2>
 800776c:	f04f 0800 	mov.w	r8, #0
 8007770:	f104 091a 	add.w	r9, r4, #26
 8007774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007776:	3b01      	subs	r3, #1
 8007778:	4543      	cmp	r3, r8
 800777a:	dc09      	bgt.n	8007790 <_printf_float+0x264>
 800777c:	6823      	ldr	r3, [r4, #0]
 800777e:	079b      	lsls	r3, r3, #30
 8007780:	f100 8105 	bmi.w	800798e <_printf_float+0x462>
 8007784:	68e0      	ldr	r0, [r4, #12]
 8007786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007788:	4298      	cmp	r0, r3
 800778a:	bfb8      	it	lt
 800778c:	4618      	movlt	r0, r3
 800778e:	e730      	b.n	80075f2 <_printf_float+0xc6>
 8007790:	2301      	movs	r3, #1
 8007792:	464a      	mov	r2, r9
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f af27 	beq.w	80075ee <_printf_float+0xc2>
 80077a0:	f108 0801 	add.w	r8, r8, #1
 80077a4:	e7e6      	b.n	8007774 <_printf_float+0x248>
 80077a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	dc39      	bgt.n	8007820 <_printf_float+0x2f4>
 80077ac:	4a1b      	ldr	r2, [pc, #108]	; (800781c <_printf_float+0x2f0>)
 80077ae:	2301      	movs	r3, #1
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f af19 	beq.w	80075ee <_printf_float+0xc2>
 80077bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077c0:	4313      	orrs	r3, r2
 80077c2:	d102      	bne.n	80077ca <_printf_float+0x29e>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	07d9      	lsls	r1, r3, #31
 80077c8:	d5d8      	bpl.n	800777c <_printf_float+0x250>
 80077ca:	ee18 3a10 	vmov	r3, s16
 80077ce:	4652      	mov	r2, sl
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f af09 	beq.w	80075ee <_printf_float+0xc2>
 80077dc:	f04f 0900 	mov.w	r9, #0
 80077e0:	f104 0a1a 	add.w	sl, r4, #26
 80077e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e6:	425b      	negs	r3, r3
 80077e8:	454b      	cmp	r3, r9
 80077ea:	dc01      	bgt.n	80077f0 <_printf_float+0x2c4>
 80077ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ee:	e792      	b.n	8007716 <_printf_float+0x1ea>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4652      	mov	r2, sl
 80077f4:	4631      	mov	r1, r6
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b8      	blx	r7
 80077fa:	3001      	adds	r0, #1
 80077fc:	f43f aef7 	beq.w	80075ee <_printf_float+0xc2>
 8007800:	f109 0901 	add.w	r9, r9, #1
 8007804:	e7ee      	b.n	80077e4 <_printf_float+0x2b8>
 8007806:	bf00      	nop
 8007808:	7fefffff 	.word	0x7fefffff
 800780c:	0800bdac 	.word	0x0800bdac
 8007810:	0800bdb0 	.word	0x0800bdb0
 8007814:	0800bdb8 	.word	0x0800bdb8
 8007818:	0800bdb4 	.word	0x0800bdb4
 800781c:	0800bdbc 	.word	0x0800bdbc
 8007820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007824:	429a      	cmp	r2, r3
 8007826:	bfa8      	it	ge
 8007828:	461a      	movge	r2, r3
 800782a:	2a00      	cmp	r2, #0
 800782c:	4691      	mov	r9, r2
 800782e:	dc37      	bgt.n	80078a0 <_printf_float+0x374>
 8007830:	f04f 0b00 	mov.w	fp, #0
 8007834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007838:	f104 021a 	add.w	r2, r4, #26
 800783c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800783e:	9305      	str	r3, [sp, #20]
 8007840:	eba3 0309 	sub.w	r3, r3, r9
 8007844:	455b      	cmp	r3, fp
 8007846:	dc33      	bgt.n	80078b0 <_printf_float+0x384>
 8007848:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800784c:	429a      	cmp	r2, r3
 800784e:	db3b      	blt.n	80078c8 <_printf_float+0x39c>
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	07da      	lsls	r2, r3, #31
 8007854:	d438      	bmi.n	80078c8 <_printf_float+0x39c>
 8007856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007858:	9a05      	ldr	r2, [sp, #20]
 800785a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800785c:	1a9a      	subs	r2, r3, r2
 800785e:	eba3 0901 	sub.w	r9, r3, r1
 8007862:	4591      	cmp	r9, r2
 8007864:	bfa8      	it	ge
 8007866:	4691      	movge	r9, r2
 8007868:	f1b9 0f00 	cmp.w	r9, #0
 800786c:	dc35      	bgt.n	80078da <_printf_float+0x3ae>
 800786e:	f04f 0800 	mov.w	r8, #0
 8007872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007876:	f104 0a1a 	add.w	sl, r4, #26
 800787a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	eba3 0309 	sub.w	r3, r3, r9
 8007884:	4543      	cmp	r3, r8
 8007886:	f77f af79 	ble.w	800777c <_printf_float+0x250>
 800788a:	2301      	movs	r3, #1
 800788c:	4652      	mov	r2, sl
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	47b8      	blx	r7
 8007894:	3001      	adds	r0, #1
 8007896:	f43f aeaa 	beq.w	80075ee <_printf_float+0xc2>
 800789a:	f108 0801 	add.w	r8, r8, #1
 800789e:	e7ec      	b.n	800787a <_printf_float+0x34e>
 80078a0:	4613      	mov	r3, r2
 80078a2:	4631      	mov	r1, r6
 80078a4:	4642      	mov	r2, r8
 80078a6:	4628      	mov	r0, r5
 80078a8:	47b8      	blx	r7
 80078aa:	3001      	adds	r0, #1
 80078ac:	d1c0      	bne.n	8007830 <_printf_float+0x304>
 80078ae:	e69e      	b.n	80075ee <_printf_float+0xc2>
 80078b0:	2301      	movs	r3, #1
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	9205      	str	r2, [sp, #20]
 80078b8:	47b8      	blx	r7
 80078ba:	3001      	adds	r0, #1
 80078bc:	f43f ae97 	beq.w	80075ee <_printf_float+0xc2>
 80078c0:	9a05      	ldr	r2, [sp, #20]
 80078c2:	f10b 0b01 	add.w	fp, fp, #1
 80078c6:	e7b9      	b.n	800783c <_printf_float+0x310>
 80078c8:	ee18 3a10 	vmov	r3, s16
 80078cc:	4652      	mov	r2, sl
 80078ce:	4631      	mov	r1, r6
 80078d0:	4628      	mov	r0, r5
 80078d2:	47b8      	blx	r7
 80078d4:	3001      	adds	r0, #1
 80078d6:	d1be      	bne.n	8007856 <_printf_float+0x32a>
 80078d8:	e689      	b.n	80075ee <_printf_float+0xc2>
 80078da:	9a05      	ldr	r2, [sp, #20]
 80078dc:	464b      	mov	r3, r9
 80078de:	4442      	add	r2, r8
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	d1c1      	bne.n	800786e <_printf_float+0x342>
 80078ea:	e680      	b.n	80075ee <_printf_float+0xc2>
 80078ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ee:	2a01      	cmp	r2, #1
 80078f0:	dc01      	bgt.n	80078f6 <_printf_float+0x3ca>
 80078f2:	07db      	lsls	r3, r3, #31
 80078f4:	d538      	bpl.n	8007968 <_printf_float+0x43c>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4642      	mov	r2, r8
 80078fa:	4631      	mov	r1, r6
 80078fc:	4628      	mov	r0, r5
 80078fe:	47b8      	blx	r7
 8007900:	3001      	adds	r0, #1
 8007902:	f43f ae74 	beq.w	80075ee <_printf_float+0xc2>
 8007906:	ee18 3a10 	vmov	r3, s16
 800790a:	4652      	mov	r2, sl
 800790c:	4631      	mov	r1, r6
 800790e:	4628      	mov	r0, r5
 8007910:	47b8      	blx	r7
 8007912:	3001      	adds	r0, #1
 8007914:	f43f ae6b 	beq.w	80075ee <_printf_float+0xc2>
 8007918:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800791c:	2200      	movs	r2, #0
 800791e:	2300      	movs	r3, #0
 8007920:	f7f9 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007924:	b9d8      	cbnz	r0, 800795e <_printf_float+0x432>
 8007926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007928:	f108 0201 	add.w	r2, r8, #1
 800792c:	3b01      	subs	r3, #1
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	d10e      	bne.n	8007956 <_printf_float+0x42a>
 8007938:	e659      	b.n	80075ee <_printf_float+0xc2>
 800793a:	2301      	movs	r3, #1
 800793c:	4652      	mov	r2, sl
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f ae52 	beq.w	80075ee <_printf_float+0xc2>
 800794a:	f108 0801 	add.w	r8, r8, #1
 800794e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007950:	3b01      	subs	r3, #1
 8007952:	4543      	cmp	r3, r8
 8007954:	dcf1      	bgt.n	800793a <_printf_float+0x40e>
 8007956:	464b      	mov	r3, r9
 8007958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800795c:	e6dc      	b.n	8007718 <_printf_float+0x1ec>
 800795e:	f04f 0800 	mov.w	r8, #0
 8007962:	f104 0a1a 	add.w	sl, r4, #26
 8007966:	e7f2      	b.n	800794e <_printf_float+0x422>
 8007968:	2301      	movs	r3, #1
 800796a:	4642      	mov	r2, r8
 800796c:	e7df      	b.n	800792e <_printf_float+0x402>
 800796e:	2301      	movs	r3, #1
 8007970:	464a      	mov	r2, r9
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae38 	beq.w	80075ee <_printf_float+0xc2>
 800797e:	f108 0801 	add.w	r8, r8, #1
 8007982:	68e3      	ldr	r3, [r4, #12]
 8007984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007986:	1a5b      	subs	r3, r3, r1
 8007988:	4543      	cmp	r3, r8
 800798a:	dcf0      	bgt.n	800796e <_printf_float+0x442>
 800798c:	e6fa      	b.n	8007784 <_printf_float+0x258>
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	f104 0919 	add.w	r9, r4, #25
 8007996:	e7f4      	b.n	8007982 <_printf_float+0x456>

08007998 <_printf_common>:
 8007998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799c:	4616      	mov	r6, r2
 800799e:	4699      	mov	r9, r3
 80079a0:	688a      	ldr	r2, [r1, #8]
 80079a2:	690b      	ldr	r3, [r1, #16]
 80079a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	bfb8      	it	lt
 80079ac:	4613      	movlt	r3, r2
 80079ae:	6033      	str	r3, [r6, #0]
 80079b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079b4:	4607      	mov	r7, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	b10a      	cbz	r2, 80079be <_printf_common+0x26>
 80079ba:	3301      	adds	r3, #1
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	0699      	lsls	r1, r3, #26
 80079c2:	bf42      	ittt	mi
 80079c4:	6833      	ldrmi	r3, [r6, #0]
 80079c6:	3302      	addmi	r3, #2
 80079c8:	6033      	strmi	r3, [r6, #0]
 80079ca:	6825      	ldr	r5, [r4, #0]
 80079cc:	f015 0506 	ands.w	r5, r5, #6
 80079d0:	d106      	bne.n	80079e0 <_printf_common+0x48>
 80079d2:	f104 0a19 	add.w	sl, r4, #25
 80079d6:	68e3      	ldr	r3, [r4, #12]
 80079d8:	6832      	ldr	r2, [r6, #0]
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	42ab      	cmp	r3, r5
 80079de:	dc26      	bgt.n	8007a2e <_printf_common+0x96>
 80079e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079e4:	1e13      	subs	r3, r2, #0
 80079e6:	6822      	ldr	r2, [r4, #0]
 80079e8:	bf18      	it	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	0692      	lsls	r2, r2, #26
 80079ee:	d42b      	bmi.n	8007a48 <_printf_common+0xb0>
 80079f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f4:	4649      	mov	r1, r9
 80079f6:	4638      	mov	r0, r7
 80079f8:	47c0      	blx	r8
 80079fa:	3001      	adds	r0, #1
 80079fc:	d01e      	beq.n	8007a3c <_printf_common+0xa4>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	68e5      	ldr	r5, [r4, #12]
 8007a02:	6832      	ldr	r2, [r6, #0]
 8007a04:	f003 0306 	and.w	r3, r3, #6
 8007a08:	2b04      	cmp	r3, #4
 8007a0a:	bf08      	it	eq
 8007a0c:	1aad      	subeq	r5, r5, r2
 8007a0e:	68a3      	ldr	r3, [r4, #8]
 8007a10:	6922      	ldr	r2, [r4, #16]
 8007a12:	bf0c      	ite	eq
 8007a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a18:	2500      	movne	r5, #0
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	bfc4      	itt	gt
 8007a1e:	1a9b      	subgt	r3, r3, r2
 8007a20:	18ed      	addgt	r5, r5, r3
 8007a22:	2600      	movs	r6, #0
 8007a24:	341a      	adds	r4, #26
 8007a26:	42b5      	cmp	r5, r6
 8007a28:	d11a      	bne.n	8007a60 <_printf_common+0xc8>
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e008      	b.n	8007a40 <_printf_common+0xa8>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4652      	mov	r2, sl
 8007a32:	4649      	mov	r1, r9
 8007a34:	4638      	mov	r0, r7
 8007a36:	47c0      	blx	r8
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d103      	bne.n	8007a44 <_printf_common+0xac>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a44:	3501      	adds	r5, #1
 8007a46:	e7c6      	b.n	80079d6 <_printf_common+0x3e>
 8007a48:	18e1      	adds	r1, r4, r3
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	2030      	movs	r0, #48	; 0x30
 8007a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a52:	4422      	add	r2, r4
 8007a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a5c:	3302      	adds	r3, #2
 8007a5e:	e7c7      	b.n	80079f0 <_printf_common+0x58>
 8007a60:	2301      	movs	r3, #1
 8007a62:	4622      	mov	r2, r4
 8007a64:	4649      	mov	r1, r9
 8007a66:	4638      	mov	r0, r7
 8007a68:	47c0      	blx	r8
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d0e6      	beq.n	8007a3c <_printf_common+0xa4>
 8007a6e:	3601      	adds	r6, #1
 8007a70:	e7d9      	b.n	8007a26 <_printf_common+0x8e>
	...

08007a74 <_printf_i>:
 8007a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	7e0f      	ldrb	r7, [r1, #24]
 8007a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a7c:	2f78      	cmp	r7, #120	; 0x78
 8007a7e:	4691      	mov	r9, r2
 8007a80:	4680      	mov	r8, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	469a      	mov	sl, r3
 8007a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a8a:	d807      	bhi.n	8007a9c <_printf_i+0x28>
 8007a8c:	2f62      	cmp	r7, #98	; 0x62
 8007a8e:	d80a      	bhi.n	8007aa6 <_printf_i+0x32>
 8007a90:	2f00      	cmp	r7, #0
 8007a92:	f000 80d8 	beq.w	8007c46 <_printf_i+0x1d2>
 8007a96:	2f58      	cmp	r7, #88	; 0x58
 8007a98:	f000 80a3 	beq.w	8007be2 <_printf_i+0x16e>
 8007a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007aa4:	e03a      	b.n	8007b1c <_printf_i+0xa8>
 8007aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aaa:	2b15      	cmp	r3, #21
 8007aac:	d8f6      	bhi.n	8007a9c <_printf_i+0x28>
 8007aae:	a101      	add	r1, pc, #4	; (adr r1, 8007ab4 <_printf_i+0x40>)
 8007ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ab4:	08007b0d 	.word	0x08007b0d
 8007ab8:	08007b21 	.word	0x08007b21
 8007abc:	08007a9d 	.word	0x08007a9d
 8007ac0:	08007a9d 	.word	0x08007a9d
 8007ac4:	08007a9d 	.word	0x08007a9d
 8007ac8:	08007a9d 	.word	0x08007a9d
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007a9d 	.word	0x08007a9d
 8007ad4:	08007a9d 	.word	0x08007a9d
 8007ad8:	08007a9d 	.word	0x08007a9d
 8007adc:	08007a9d 	.word	0x08007a9d
 8007ae0:	08007c2d 	.word	0x08007c2d
 8007ae4:	08007b51 	.word	0x08007b51
 8007ae8:	08007c0f 	.word	0x08007c0f
 8007aec:	08007a9d 	.word	0x08007a9d
 8007af0:	08007a9d 	.word	0x08007a9d
 8007af4:	08007c4f 	.word	0x08007c4f
 8007af8:	08007a9d 	.word	0x08007a9d
 8007afc:	08007b51 	.word	0x08007b51
 8007b00:	08007a9d 	.word	0x08007a9d
 8007b04:	08007a9d 	.word	0x08007a9d
 8007b08:	08007c17 	.word	0x08007c17
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	1d1a      	adds	r2, r3, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	602a      	str	r2, [r5, #0]
 8007b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0a3      	b.n	8007c68 <_printf_i+0x1f4>
 8007b20:	6820      	ldr	r0, [r4, #0]
 8007b22:	6829      	ldr	r1, [r5, #0]
 8007b24:	0606      	lsls	r6, r0, #24
 8007b26:	f101 0304 	add.w	r3, r1, #4
 8007b2a:	d50a      	bpl.n	8007b42 <_printf_i+0xce>
 8007b2c:	680e      	ldr	r6, [r1, #0]
 8007b2e:	602b      	str	r3, [r5, #0]
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	da03      	bge.n	8007b3c <_printf_i+0xc8>
 8007b34:	232d      	movs	r3, #45	; 0x2d
 8007b36:	4276      	negs	r6, r6
 8007b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3c:	485e      	ldr	r0, [pc, #376]	; (8007cb8 <_printf_i+0x244>)
 8007b3e:	230a      	movs	r3, #10
 8007b40:	e019      	b.n	8007b76 <_printf_i+0x102>
 8007b42:	680e      	ldr	r6, [r1, #0]
 8007b44:	602b      	str	r3, [r5, #0]
 8007b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b4a:	bf18      	it	ne
 8007b4c:	b236      	sxthne	r6, r6
 8007b4e:	e7ef      	b.n	8007b30 <_printf_i+0xbc>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	1d19      	adds	r1, r3, #4
 8007b56:	6029      	str	r1, [r5, #0]
 8007b58:	0601      	lsls	r1, r0, #24
 8007b5a:	d501      	bpl.n	8007b60 <_printf_i+0xec>
 8007b5c:	681e      	ldr	r6, [r3, #0]
 8007b5e:	e002      	b.n	8007b66 <_printf_i+0xf2>
 8007b60:	0646      	lsls	r6, r0, #25
 8007b62:	d5fb      	bpl.n	8007b5c <_printf_i+0xe8>
 8007b64:	881e      	ldrh	r6, [r3, #0]
 8007b66:	4854      	ldr	r0, [pc, #336]	; (8007cb8 <_printf_i+0x244>)
 8007b68:	2f6f      	cmp	r7, #111	; 0x6f
 8007b6a:	bf0c      	ite	eq
 8007b6c:	2308      	moveq	r3, #8
 8007b6e:	230a      	movne	r3, #10
 8007b70:	2100      	movs	r1, #0
 8007b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b76:	6865      	ldr	r5, [r4, #4]
 8007b78:	60a5      	str	r5, [r4, #8]
 8007b7a:	2d00      	cmp	r5, #0
 8007b7c:	bfa2      	ittt	ge
 8007b7e:	6821      	ldrge	r1, [r4, #0]
 8007b80:	f021 0104 	bicge.w	r1, r1, #4
 8007b84:	6021      	strge	r1, [r4, #0]
 8007b86:	b90e      	cbnz	r6, 8007b8c <_printf_i+0x118>
 8007b88:	2d00      	cmp	r5, #0
 8007b8a:	d04d      	beq.n	8007c28 <_printf_i+0x1b4>
 8007b8c:	4615      	mov	r5, r2
 8007b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b92:	fb03 6711 	mls	r7, r3, r1, r6
 8007b96:	5dc7      	ldrb	r7, [r0, r7]
 8007b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b9c:	4637      	mov	r7, r6
 8007b9e:	42bb      	cmp	r3, r7
 8007ba0:	460e      	mov	r6, r1
 8007ba2:	d9f4      	bls.n	8007b8e <_printf_i+0x11a>
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	d10b      	bne.n	8007bc0 <_printf_i+0x14c>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	07de      	lsls	r6, r3, #31
 8007bac:	d508      	bpl.n	8007bc0 <_printf_i+0x14c>
 8007bae:	6923      	ldr	r3, [r4, #16]
 8007bb0:	6861      	ldr	r1, [r4, #4]
 8007bb2:	4299      	cmp	r1, r3
 8007bb4:	bfde      	ittt	le
 8007bb6:	2330      	movle	r3, #48	; 0x30
 8007bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bc0:	1b52      	subs	r2, r2, r5
 8007bc2:	6122      	str	r2, [r4, #16]
 8007bc4:	f8cd a000 	str.w	sl, [sp]
 8007bc8:	464b      	mov	r3, r9
 8007bca:	aa03      	add	r2, sp, #12
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f7ff fee2 	bl	8007998 <_printf_common>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d14c      	bne.n	8007c72 <_printf_i+0x1fe>
 8007bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bdc:	b004      	add	sp, #16
 8007bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007be2:	4835      	ldr	r0, [pc, #212]	; (8007cb8 <_printf_i+0x244>)
 8007be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007be8:	6829      	ldr	r1, [r5, #0]
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bf0:	6029      	str	r1, [r5, #0]
 8007bf2:	061d      	lsls	r5, r3, #24
 8007bf4:	d514      	bpl.n	8007c20 <_printf_i+0x1ac>
 8007bf6:	07df      	lsls	r7, r3, #31
 8007bf8:	bf44      	itt	mi
 8007bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8007bfe:	6023      	strmi	r3, [r4, #0]
 8007c00:	b91e      	cbnz	r6, 8007c0a <_printf_i+0x196>
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	f023 0320 	bic.w	r3, r3, #32
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	2310      	movs	r3, #16
 8007c0c:	e7b0      	b.n	8007b70 <_printf_i+0xfc>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	f043 0320 	orr.w	r3, r3, #32
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	2378      	movs	r3, #120	; 0x78
 8007c18:	4828      	ldr	r0, [pc, #160]	; (8007cbc <_printf_i+0x248>)
 8007c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c1e:	e7e3      	b.n	8007be8 <_printf_i+0x174>
 8007c20:	0659      	lsls	r1, r3, #25
 8007c22:	bf48      	it	mi
 8007c24:	b2b6      	uxthmi	r6, r6
 8007c26:	e7e6      	b.n	8007bf6 <_printf_i+0x182>
 8007c28:	4615      	mov	r5, r2
 8007c2a:	e7bb      	b.n	8007ba4 <_printf_i+0x130>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	6826      	ldr	r6, [r4, #0]
 8007c30:	6961      	ldr	r1, [r4, #20]
 8007c32:	1d18      	adds	r0, r3, #4
 8007c34:	6028      	str	r0, [r5, #0]
 8007c36:	0635      	lsls	r5, r6, #24
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	d501      	bpl.n	8007c40 <_printf_i+0x1cc>
 8007c3c:	6019      	str	r1, [r3, #0]
 8007c3e:	e002      	b.n	8007c46 <_printf_i+0x1d2>
 8007c40:	0670      	lsls	r0, r6, #25
 8007c42:	d5fb      	bpl.n	8007c3c <_printf_i+0x1c8>
 8007c44:	8019      	strh	r1, [r3, #0]
 8007c46:	2300      	movs	r3, #0
 8007c48:	6123      	str	r3, [r4, #16]
 8007c4a:	4615      	mov	r5, r2
 8007c4c:	e7ba      	b.n	8007bc4 <_printf_i+0x150>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	1d1a      	adds	r2, r3, #4
 8007c52:	602a      	str	r2, [r5, #0]
 8007c54:	681d      	ldr	r5, [r3, #0]
 8007c56:	6862      	ldr	r2, [r4, #4]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f7f8 fac0 	bl	80001e0 <memchr>
 8007c60:	b108      	cbz	r0, 8007c66 <_printf_i+0x1f2>
 8007c62:	1b40      	subs	r0, r0, r5
 8007c64:	6060      	str	r0, [r4, #4]
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	6123      	str	r3, [r4, #16]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c70:	e7a8      	b.n	8007bc4 <_printf_i+0x150>
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	462a      	mov	r2, r5
 8007c76:	4649      	mov	r1, r9
 8007c78:	4640      	mov	r0, r8
 8007c7a:	47d0      	blx	sl
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d0ab      	beq.n	8007bd8 <_printf_i+0x164>
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	079b      	lsls	r3, r3, #30
 8007c84:	d413      	bmi.n	8007cae <_printf_i+0x23a>
 8007c86:	68e0      	ldr	r0, [r4, #12]
 8007c88:	9b03      	ldr	r3, [sp, #12]
 8007c8a:	4298      	cmp	r0, r3
 8007c8c:	bfb8      	it	lt
 8007c8e:	4618      	movlt	r0, r3
 8007c90:	e7a4      	b.n	8007bdc <_printf_i+0x168>
 8007c92:	2301      	movs	r3, #1
 8007c94:	4632      	mov	r2, r6
 8007c96:	4649      	mov	r1, r9
 8007c98:	4640      	mov	r0, r8
 8007c9a:	47d0      	blx	sl
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d09b      	beq.n	8007bd8 <_printf_i+0x164>
 8007ca0:	3501      	adds	r5, #1
 8007ca2:	68e3      	ldr	r3, [r4, #12]
 8007ca4:	9903      	ldr	r1, [sp, #12]
 8007ca6:	1a5b      	subs	r3, r3, r1
 8007ca8:	42ab      	cmp	r3, r5
 8007caa:	dcf2      	bgt.n	8007c92 <_printf_i+0x21e>
 8007cac:	e7eb      	b.n	8007c86 <_printf_i+0x212>
 8007cae:	2500      	movs	r5, #0
 8007cb0:	f104 0619 	add.w	r6, r4, #25
 8007cb4:	e7f5      	b.n	8007ca2 <_printf_i+0x22e>
 8007cb6:	bf00      	nop
 8007cb8:	0800bdbe 	.word	0x0800bdbe
 8007cbc:	0800bdcf 	.word	0x0800bdcf

08007cc0 <_scanf_float>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	b087      	sub	sp, #28
 8007cc6:	4617      	mov	r7, r2
 8007cc8:	9303      	str	r3, [sp, #12]
 8007cca:	688b      	ldr	r3, [r1, #8]
 8007ccc:	1e5a      	subs	r2, r3, #1
 8007cce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007cd2:	bf83      	ittte	hi
 8007cd4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007cd8:	195b      	addhi	r3, r3, r5
 8007cda:	9302      	strhi	r3, [sp, #8]
 8007cdc:	2300      	movls	r3, #0
 8007cde:	bf86      	itte	hi
 8007ce0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007ce4:	608b      	strhi	r3, [r1, #8]
 8007ce6:	9302      	strls	r3, [sp, #8]
 8007ce8:	680b      	ldr	r3, [r1, #0]
 8007cea:	468b      	mov	fp, r1
 8007cec:	2500      	movs	r5, #0
 8007cee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007cf2:	f84b 3b1c 	str.w	r3, [fp], #28
 8007cf6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007cfa:	4680      	mov	r8, r0
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	465e      	mov	r6, fp
 8007d00:	46aa      	mov	sl, r5
 8007d02:	46a9      	mov	r9, r5
 8007d04:	9501      	str	r5, [sp, #4]
 8007d06:	68a2      	ldr	r2, [r4, #8]
 8007d08:	b152      	cbz	r2, 8007d20 <_scanf_float+0x60>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	2b4e      	cmp	r3, #78	; 0x4e
 8007d10:	d864      	bhi.n	8007ddc <_scanf_float+0x11c>
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d83c      	bhi.n	8007d90 <_scanf_float+0xd0>
 8007d16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007d1a:	b2c8      	uxtb	r0, r1
 8007d1c:	280e      	cmp	r0, #14
 8007d1e:	d93a      	bls.n	8007d96 <_scanf_float+0xd6>
 8007d20:	f1b9 0f00 	cmp.w	r9, #0
 8007d24:	d003      	beq.n	8007d2e <_scanf_float+0x6e>
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d32:	f1ba 0f01 	cmp.w	sl, #1
 8007d36:	f200 8113 	bhi.w	8007f60 <_scanf_float+0x2a0>
 8007d3a:	455e      	cmp	r6, fp
 8007d3c:	f200 8105 	bhi.w	8007f4a <_scanf_float+0x28a>
 8007d40:	2501      	movs	r5, #1
 8007d42:	4628      	mov	r0, r5
 8007d44:	b007      	add	sp, #28
 8007d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007d4e:	2a0d      	cmp	r2, #13
 8007d50:	d8e6      	bhi.n	8007d20 <_scanf_float+0x60>
 8007d52:	a101      	add	r1, pc, #4	; (adr r1, 8007d58 <_scanf_float+0x98>)
 8007d54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d58:	08007e97 	.word	0x08007e97
 8007d5c:	08007d21 	.word	0x08007d21
 8007d60:	08007d21 	.word	0x08007d21
 8007d64:	08007d21 	.word	0x08007d21
 8007d68:	08007ef7 	.word	0x08007ef7
 8007d6c:	08007ecf 	.word	0x08007ecf
 8007d70:	08007d21 	.word	0x08007d21
 8007d74:	08007d21 	.word	0x08007d21
 8007d78:	08007ea5 	.word	0x08007ea5
 8007d7c:	08007d21 	.word	0x08007d21
 8007d80:	08007d21 	.word	0x08007d21
 8007d84:	08007d21 	.word	0x08007d21
 8007d88:	08007d21 	.word	0x08007d21
 8007d8c:	08007e5d 	.word	0x08007e5d
 8007d90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007d94:	e7db      	b.n	8007d4e <_scanf_float+0x8e>
 8007d96:	290e      	cmp	r1, #14
 8007d98:	d8c2      	bhi.n	8007d20 <_scanf_float+0x60>
 8007d9a:	a001      	add	r0, pc, #4	; (adr r0, 8007da0 <_scanf_float+0xe0>)
 8007d9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007da0:	08007e4f 	.word	0x08007e4f
 8007da4:	08007d21 	.word	0x08007d21
 8007da8:	08007e4f 	.word	0x08007e4f
 8007dac:	08007ee3 	.word	0x08007ee3
 8007db0:	08007d21 	.word	0x08007d21
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007e39 	.word	0x08007e39
 8007dbc:	08007e39 	.word	0x08007e39
 8007dc0:	08007e39 	.word	0x08007e39
 8007dc4:	08007e39 	.word	0x08007e39
 8007dc8:	08007e39 	.word	0x08007e39
 8007dcc:	08007e39 	.word	0x08007e39
 8007dd0:	08007e39 	.word	0x08007e39
 8007dd4:	08007e39 	.word	0x08007e39
 8007dd8:	08007e39 	.word	0x08007e39
 8007ddc:	2b6e      	cmp	r3, #110	; 0x6e
 8007dde:	d809      	bhi.n	8007df4 <_scanf_float+0x134>
 8007de0:	2b60      	cmp	r3, #96	; 0x60
 8007de2:	d8b2      	bhi.n	8007d4a <_scanf_float+0x8a>
 8007de4:	2b54      	cmp	r3, #84	; 0x54
 8007de6:	d077      	beq.n	8007ed8 <_scanf_float+0x218>
 8007de8:	2b59      	cmp	r3, #89	; 0x59
 8007dea:	d199      	bne.n	8007d20 <_scanf_float+0x60>
 8007dec:	2d07      	cmp	r5, #7
 8007dee:	d197      	bne.n	8007d20 <_scanf_float+0x60>
 8007df0:	2508      	movs	r5, #8
 8007df2:	e029      	b.n	8007e48 <_scanf_float+0x188>
 8007df4:	2b74      	cmp	r3, #116	; 0x74
 8007df6:	d06f      	beq.n	8007ed8 <_scanf_float+0x218>
 8007df8:	2b79      	cmp	r3, #121	; 0x79
 8007dfa:	e7f6      	b.n	8007dea <_scanf_float+0x12a>
 8007dfc:	6821      	ldr	r1, [r4, #0]
 8007dfe:	05c8      	lsls	r0, r1, #23
 8007e00:	d51a      	bpl.n	8007e38 <_scanf_float+0x178>
 8007e02:	9b02      	ldr	r3, [sp, #8]
 8007e04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e08:	6021      	str	r1, [r4, #0]
 8007e0a:	f109 0901 	add.w	r9, r9, #1
 8007e0e:	b11b      	cbz	r3, 8007e18 <_scanf_float+0x158>
 8007e10:	3b01      	subs	r3, #1
 8007e12:	3201      	adds	r2, #1
 8007e14:	9302      	str	r3, [sp, #8]
 8007e16:	60a2      	str	r2, [r4, #8]
 8007e18:	68a3      	ldr	r3, [r4, #8]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	60a3      	str	r3, [r4, #8]
 8007e1e:	6923      	ldr	r3, [r4, #16]
 8007e20:	3301      	adds	r3, #1
 8007e22:	6123      	str	r3, [r4, #16]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	607b      	str	r3, [r7, #4]
 8007e2c:	f340 8084 	ble.w	8007f38 <_scanf_float+0x278>
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	3301      	adds	r3, #1
 8007e34:	603b      	str	r3, [r7, #0]
 8007e36:	e766      	b.n	8007d06 <_scanf_float+0x46>
 8007e38:	eb1a 0f05 	cmn.w	sl, r5
 8007e3c:	f47f af70 	bne.w	8007d20 <_scanf_float+0x60>
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007e46:	6022      	str	r2, [r4, #0]
 8007e48:	f806 3b01 	strb.w	r3, [r6], #1
 8007e4c:	e7e4      	b.n	8007e18 <_scanf_float+0x158>
 8007e4e:	6822      	ldr	r2, [r4, #0]
 8007e50:	0610      	lsls	r0, r2, #24
 8007e52:	f57f af65 	bpl.w	8007d20 <_scanf_float+0x60>
 8007e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e5a:	e7f4      	b.n	8007e46 <_scanf_float+0x186>
 8007e5c:	f1ba 0f00 	cmp.w	sl, #0
 8007e60:	d10e      	bne.n	8007e80 <_scanf_float+0x1c0>
 8007e62:	f1b9 0f00 	cmp.w	r9, #0
 8007e66:	d10e      	bne.n	8007e86 <_scanf_float+0x1c6>
 8007e68:	6822      	ldr	r2, [r4, #0]
 8007e6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e72:	d108      	bne.n	8007e86 <_scanf_float+0x1c6>
 8007e74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e78:	6022      	str	r2, [r4, #0]
 8007e7a:	f04f 0a01 	mov.w	sl, #1
 8007e7e:	e7e3      	b.n	8007e48 <_scanf_float+0x188>
 8007e80:	f1ba 0f02 	cmp.w	sl, #2
 8007e84:	d055      	beq.n	8007f32 <_scanf_float+0x272>
 8007e86:	2d01      	cmp	r5, #1
 8007e88:	d002      	beq.n	8007e90 <_scanf_float+0x1d0>
 8007e8a:	2d04      	cmp	r5, #4
 8007e8c:	f47f af48 	bne.w	8007d20 <_scanf_float+0x60>
 8007e90:	3501      	adds	r5, #1
 8007e92:	b2ed      	uxtb	r5, r5
 8007e94:	e7d8      	b.n	8007e48 <_scanf_float+0x188>
 8007e96:	f1ba 0f01 	cmp.w	sl, #1
 8007e9a:	f47f af41 	bne.w	8007d20 <_scanf_float+0x60>
 8007e9e:	f04f 0a02 	mov.w	sl, #2
 8007ea2:	e7d1      	b.n	8007e48 <_scanf_float+0x188>
 8007ea4:	b97d      	cbnz	r5, 8007ec6 <_scanf_float+0x206>
 8007ea6:	f1b9 0f00 	cmp.w	r9, #0
 8007eaa:	f47f af3c 	bne.w	8007d26 <_scanf_float+0x66>
 8007eae:	6822      	ldr	r2, [r4, #0]
 8007eb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007eb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007eb8:	f47f af39 	bne.w	8007d2e <_scanf_float+0x6e>
 8007ebc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ec0:	6022      	str	r2, [r4, #0]
 8007ec2:	2501      	movs	r5, #1
 8007ec4:	e7c0      	b.n	8007e48 <_scanf_float+0x188>
 8007ec6:	2d03      	cmp	r5, #3
 8007ec8:	d0e2      	beq.n	8007e90 <_scanf_float+0x1d0>
 8007eca:	2d05      	cmp	r5, #5
 8007ecc:	e7de      	b.n	8007e8c <_scanf_float+0x1cc>
 8007ece:	2d02      	cmp	r5, #2
 8007ed0:	f47f af26 	bne.w	8007d20 <_scanf_float+0x60>
 8007ed4:	2503      	movs	r5, #3
 8007ed6:	e7b7      	b.n	8007e48 <_scanf_float+0x188>
 8007ed8:	2d06      	cmp	r5, #6
 8007eda:	f47f af21 	bne.w	8007d20 <_scanf_float+0x60>
 8007ede:	2507      	movs	r5, #7
 8007ee0:	e7b2      	b.n	8007e48 <_scanf_float+0x188>
 8007ee2:	6822      	ldr	r2, [r4, #0]
 8007ee4:	0591      	lsls	r1, r2, #22
 8007ee6:	f57f af1b 	bpl.w	8007d20 <_scanf_float+0x60>
 8007eea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007eee:	6022      	str	r2, [r4, #0]
 8007ef0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ef4:	e7a8      	b.n	8007e48 <_scanf_float+0x188>
 8007ef6:	6822      	ldr	r2, [r4, #0]
 8007ef8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007efc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007f00:	d006      	beq.n	8007f10 <_scanf_float+0x250>
 8007f02:	0550      	lsls	r0, r2, #21
 8007f04:	f57f af0c 	bpl.w	8007d20 <_scanf_float+0x60>
 8007f08:	f1b9 0f00 	cmp.w	r9, #0
 8007f0c:	f43f af0f 	beq.w	8007d2e <_scanf_float+0x6e>
 8007f10:	0591      	lsls	r1, r2, #22
 8007f12:	bf58      	it	pl
 8007f14:	9901      	ldrpl	r1, [sp, #4]
 8007f16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f1a:	bf58      	it	pl
 8007f1c:	eba9 0101 	subpl.w	r1, r9, r1
 8007f20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007f24:	bf58      	it	pl
 8007f26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f2a:	6022      	str	r2, [r4, #0]
 8007f2c:	f04f 0900 	mov.w	r9, #0
 8007f30:	e78a      	b.n	8007e48 <_scanf_float+0x188>
 8007f32:	f04f 0a03 	mov.w	sl, #3
 8007f36:	e787      	b.n	8007e48 <_scanf_float+0x188>
 8007f38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f3c:	4639      	mov	r1, r7
 8007f3e:	4640      	mov	r0, r8
 8007f40:	4798      	blx	r3
 8007f42:	2800      	cmp	r0, #0
 8007f44:	f43f aedf 	beq.w	8007d06 <_scanf_float+0x46>
 8007f48:	e6ea      	b.n	8007d20 <_scanf_float+0x60>
 8007f4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f52:	463a      	mov	r2, r7
 8007f54:	4640      	mov	r0, r8
 8007f56:	4798      	blx	r3
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	6123      	str	r3, [r4, #16]
 8007f5e:	e6ec      	b.n	8007d3a <_scanf_float+0x7a>
 8007f60:	1e6b      	subs	r3, r5, #1
 8007f62:	2b06      	cmp	r3, #6
 8007f64:	d825      	bhi.n	8007fb2 <_scanf_float+0x2f2>
 8007f66:	2d02      	cmp	r5, #2
 8007f68:	d836      	bhi.n	8007fd8 <_scanf_float+0x318>
 8007f6a:	455e      	cmp	r6, fp
 8007f6c:	f67f aee8 	bls.w	8007d40 <_scanf_float+0x80>
 8007f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f78:	463a      	mov	r2, r7
 8007f7a:	4640      	mov	r0, r8
 8007f7c:	4798      	blx	r3
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	3b01      	subs	r3, #1
 8007f82:	6123      	str	r3, [r4, #16]
 8007f84:	e7f1      	b.n	8007f6a <_scanf_float+0x2aa>
 8007f86:	9802      	ldr	r0, [sp, #8]
 8007f88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007f90:	9002      	str	r0, [sp, #8]
 8007f92:	463a      	mov	r2, r7
 8007f94:	4640      	mov	r0, r8
 8007f96:	4798      	blx	r3
 8007f98:	6923      	ldr	r3, [r4, #16]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	6123      	str	r3, [r4, #16]
 8007f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fa2:	fa5f fa8a 	uxtb.w	sl, sl
 8007fa6:	f1ba 0f02 	cmp.w	sl, #2
 8007faa:	d1ec      	bne.n	8007f86 <_scanf_float+0x2c6>
 8007fac:	3d03      	subs	r5, #3
 8007fae:	b2ed      	uxtb	r5, r5
 8007fb0:	1b76      	subs	r6, r6, r5
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	05da      	lsls	r2, r3, #23
 8007fb6:	d52f      	bpl.n	8008018 <_scanf_float+0x358>
 8007fb8:	055b      	lsls	r3, r3, #21
 8007fba:	d510      	bpl.n	8007fde <_scanf_float+0x31e>
 8007fbc:	455e      	cmp	r6, fp
 8007fbe:	f67f aebf 	bls.w	8007d40 <_scanf_float+0x80>
 8007fc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fca:	463a      	mov	r2, r7
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4798      	blx	r3
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	6123      	str	r3, [r4, #16]
 8007fd6:	e7f1      	b.n	8007fbc <_scanf_float+0x2fc>
 8007fd8:	46aa      	mov	sl, r5
 8007fda:	9602      	str	r6, [sp, #8]
 8007fdc:	e7df      	b.n	8007f9e <_scanf_float+0x2de>
 8007fde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007fe2:	6923      	ldr	r3, [r4, #16]
 8007fe4:	2965      	cmp	r1, #101	; 0x65
 8007fe6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fea:	f106 35ff 	add.w	r5, r6, #4294967295
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	d00c      	beq.n	800800c <_scanf_float+0x34c>
 8007ff2:	2945      	cmp	r1, #69	; 0x45
 8007ff4:	d00a      	beq.n	800800c <_scanf_float+0x34c>
 8007ff6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ffa:	463a      	mov	r2, r7
 8007ffc:	4640      	mov	r0, r8
 8007ffe:	4798      	blx	r3
 8008000:	6923      	ldr	r3, [r4, #16]
 8008002:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008006:	3b01      	subs	r3, #1
 8008008:	1eb5      	subs	r5, r6, #2
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008010:	463a      	mov	r2, r7
 8008012:	4640      	mov	r0, r8
 8008014:	4798      	blx	r3
 8008016:	462e      	mov	r6, r5
 8008018:	6825      	ldr	r5, [r4, #0]
 800801a:	f015 0510 	ands.w	r5, r5, #16
 800801e:	d159      	bne.n	80080d4 <_scanf_float+0x414>
 8008020:	7035      	strb	r5, [r6, #0]
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800802c:	d11b      	bne.n	8008066 <_scanf_float+0x3a6>
 800802e:	9b01      	ldr	r3, [sp, #4]
 8008030:	454b      	cmp	r3, r9
 8008032:	eba3 0209 	sub.w	r2, r3, r9
 8008036:	d123      	bne.n	8008080 <_scanf_float+0x3c0>
 8008038:	2200      	movs	r2, #0
 800803a:	4659      	mov	r1, fp
 800803c:	4640      	mov	r0, r8
 800803e:	f000 feb1 	bl	8008da4 <_strtod_r>
 8008042:	6822      	ldr	r2, [r4, #0]
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	f012 0f02 	tst.w	r2, #2
 800804a:	ec57 6b10 	vmov	r6, r7, d0
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	d021      	beq.n	8008096 <_scanf_float+0x3d6>
 8008052:	9903      	ldr	r1, [sp, #12]
 8008054:	1d1a      	adds	r2, r3, #4
 8008056:	600a      	str	r2, [r1, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	e9c3 6700 	strd	r6, r7, [r3]
 800805e:	68e3      	ldr	r3, [r4, #12]
 8008060:	3301      	adds	r3, #1
 8008062:	60e3      	str	r3, [r4, #12]
 8008064:	e66d      	b.n	8007d42 <_scanf_float+0x82>
 8008066:	9b04      	ldr	r3, [sp, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0e5      	beq.n	8008038 <_scanf_float+0x378>
 800806c:	9905      	ldr	r1, [sp, #20]
 800806e:	230a      	movs	r3, #10
 8008070:	462a      	mov	r2, r5
 8008072:	3101      	adds	r1, #1
 8008074:	4640      	mov	r0, r8
 8008076:	f000 ff1d 	bl	8008eb4 <_strtol_r>
 800807a:	9b04      	ldr	r3, [sp, #16]
 800807c:	9e05      	ldr	r6, [sp, #20]
 800807e:	1ac2      	subs	r2, r0, r3
 8008080:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008084:	429e      	cmp	r6, r3
 8008086:	bf28      	it	cs
 8008088:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800808c:	4912      	ldr	r1, [pc, #72]	; (80080d8 <_scanf_float+0x418>)
 800808e:	4630      	mov	r0, r6
 8008090:	f000 f844 	bl	800811c <siprintf>
 8008094:	e7d0      	b.n	8008038 <_scanf_float+0x378>
 8008096:	9903      	ldr	r1, [sp, #12]
 8008098:	f012 0f04 	tst.w	r2, #4
 800809c:	f103 0204 	add.w	r2, r3, #4
 80080a0:	600a      	str	r2, [r1, #0]
 80080a2:	d1d9      	bne.n	8008058 <_scanf_float+0x398>
 80080a4:	f8d3 8000 	ldr.w	r8, [r3]
 80080a8:	ee10 2a10 	vmov	r2, s0
 80080ac:	ee10 0a10 	vmov	r0, s0
 80080b0:	463b      	mov	r3, r7
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 fd3a 	bl	8000b2c <__aeabi_dcmpun>
 80080b8:	b128      	cbz	r0, 80080c6 <_scanf_float+0x406>
 80080ba:	4808      	ldr	r0, [pc, #32]	; (80080dc <_scanf_float+0x41c>)
 80080bc:	f000 f828 	bl	8008110 <nanf>
 80080c0:	ed88 0a00 	vstr	s0, [r8]
 80080c4:	e7cb      	b.n	800805e <_scanf_float+0x39e>
 80080c6:	4630      	mov	r0, r6
 80080c8:	4639      	mov	r1, r7
 80080ca:	f7f8 fd8d 	bl	8000be8 <__aeabi_d2f>
 80080ce:	f8c8 0000 	str.w	r0, [r8]
 80080d2:	e7c4      	b.n	800805e <_scanf_float+0x39e>
 80080d4:	2500      	movs	r5, #0
 80080d6:	e634      	b.n	8007d42 <_scanf_float+0x82>
 80080d8:	0800bde0 	.word	0x0800bde0
 80080dc:	0800c250 	.word	0x0800c250

080080e0 <iprintf>:
 80080e0:	b40f      	push	{r0, r1, r2, r3}
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <iprintf+0x2c>)
 80080e4:	b513      	push	{r0, r1, r4, lr}
 80080e6:	681c      	ldr	r4, [r3, #0]
 80080e8:	b124      	cbz	r4, 80080f4 <iprintf+0x14>
 80080ea:	69a3      	ldr	r3, [r4, #24]
 80080ec:	b913      	cbnz	r3, 80080f4 <iprintf+0x14>
 80080ee:	4620      	mov	r0, r4
 80080f0:	f001 fdb4 	bl	8009c5c <__sinit>
 80080f4:	ab05      	add	r3, sp, #20
 80080f6:	9a04      	ldr	r2, [sp, #16]
 80080f8:	68a1      	ldr	r1, [r4, #8]
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	4620      	mov	r0, r4
 80080fe:	f003 f927 	bl	800b350 <_vfiprintf_r>
 8008102:	b002      	add	sp, #8
 8008104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008108:	b004      	add	sp, #16
 800810a:	4770      	bx	lr
 800810c:	2000000c 	.word	0x2000000c

08008110 <nanf>:
 8008110:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008118 <nanf+0x8>
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	7fc00000 	.word	0x7fc00000

0800811c <siprintf>:
 800811c:	b40e      	push	{r1, r2, r3}
 800811e:	b500      	push	{lr}
 8008120:	b09c      	sub	sp, #112	; 0x70
 8008122:	ab1d      	add	r3, sp, #116	; 0x74
 8008124:	9002      	str	r0, [sp, #8]
 8008126:	9006      	str	r0, [sp, #24]
 8008128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800812c:	4809      	ldr	r0, [pc, #36]	; (8008154 <siprintf+0x38>)
 800812e:	9107      	str	r1, [sp, #28]
 8008130:	9104      	str	r1, [sp, #16]
 8008132:	4909      	ldr	r1, [pc, #36]	; (8008158 <siprintf+0x3c>)
 8008134:	f853 2b04 	ldr.w	r2, [r3], #4
 8008138:	9105      	str	r1, [sp, #20]
 800813a:	6800      	ldr	r0, [r0, #0]
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	a902      	add	r1, sp, #8
 8008140:	f002 ffdc 	bl	800b0fc <_svfiprintf_r>
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	2200      	movs	r2, #0
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	b01c      	add	sp, #112	; 0x70
 800814c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008150:	b003      	add	sp, #12
 8008152:	4770      	bx	lr
 8008154:	2000000c 	.word	0x2000000c
 8008158:	ffff0208 	.word	0xffff0208

0800815c <sulp>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4604      	mov	r4, r0
 8008160:	460d      	mov	r5, r1
 8008162:	ec45 4b10 	vmov	d0, r4, r5
 8008166:	4616      	mov	r6, r2
 8008168:	f002 fd26 	bl	800abb8 <__ulp>
 800816c:	ec51 0b10 	vmov	r0, r1, d0
 8008170:	b17e      	cbz	r6, 8008192 <sulp+0x36>
 8008172:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008176:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800817a:	2b00      	cmp	r3, #0
 800817c:	dd09      	ble.n	8008192 <sulp+0x36>
 800817e:	051b      	lsls	r3, r3, #20
 8008180:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008184:	2400      	movs	r4, #0
 8008186:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800818a:	4622      	mov	r2, r4
 800818c:	462b      	mov	r3, r5
 800818e:	f7f8 fa33 	bl	80005f8 <__aeabi_dmul>
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	0000      	movs	r0, r0
	...

08008198 <_strtod_l>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	ed2d 8b02 	vpush	{d8}
 80081a0:	b09d      	sub	sp, #116	; 0x74
 80081a2:	461f      	mov	r7, r3
 80081a4:	2300      	movs	r3, #0
 80081a6:	9318      	str	r3, [sp, #96]	; 0x60
 80081a8:	4ba2      	ldr	r3, [pc, #648]	; (8008434 <_strtod_l+0x29c>)
 80081aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	9305      	str	r3, [sp, #20]
 80081b0:	4604      	mov	r4, r0
 80081b2:	4618      	mov	r0, r3
 80081b4:	4688      	mov	r8, r1
 80081b6:	f7f8 f80b 	bl	80001d0 <strlen>
 80081ba:	f04f 0a00 	mov.w	sl, #0
 80081be:	4605      	mov	r5, r0
 80081c0:	f04f 0b00 	mov.w	fp, #0
 80081c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80081c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081ca:	781a      	ldrb	r2, [r3, #0]
 80081cc:	2a2b      	cmp	r2, #43	; 0x2b
 80081ce:	d04e      	beq.n	800826e <_strtod_l+0xd6>
 80081d0:	d83b      	bhi.n	800824a <_strtod_l+0xb2>
 80081d2:	2a0d      	cmp	r2, #13
 80081d4:	d834      	bhi.n	8008240 <_strtod_l+0xa8>
 80081d6:	2a08      	cmp	r2, #8
 80081d8:	d834      	bhi.n	8008244 <_strtod_l+0xac>
 80081da:	2a00      	cmp	r2, #0
 80081dc:	d03e      	beq.n	800825c <_strtod_l+0xc4>
 80081de:	2300      	movs	r3, #0
 80081e0:	930a      	str	r3, [sp, #40]	; 0x28
 80081e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80081e4:	7833      	ldrb	r3, [r6, #0]
 80081e6:	2b30      	cmp	r3, #48	; 0x30
 80081e8:	f040 80b0 	bne.w	800834c <_strtod_l+0x1b4>
 80081ec:	7873      	ldrb	r3, [r6, #1]
 80081ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081f2:	2b58      	cmp	r3, #88	; 0x58
 80081f4:	d168      	bne.n	80082c8 <_strtod_l+0x130>
 80081f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	ab18      	add	r3, sp, #96	; 0x60
 80081fc:	9702      	str	r7, [sp, #8]
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	4a8d      	ldr	r2, [pc, #564]	; (8008438 <_strtod_l+0x2a0>)
 8008202:	ab19      	add	r3, sp, #100	; 0x64
 8008204:	a917      	add	r1, sp, #92	; 0x5c
 8008206:	4620      	mov	r0, r4
 8008208:	f001 fe2c 	bl	8009e64 <__gethex>
 800820c:	f010 0707 	ands.w	r7, r0, #7
 8008210:	4605      	mov	r5, r0
 8008212:	d005      	beq.n	8008220 <_strtod_l+0x88>
 8008214:	2f06      	cmp	r7, #6
 8008216:	d12c      	bne.n	8008272 <_strtod_l+0xda>
 8008218:	3601      	adds	r6, #1
 800821a:	2300      	movs	r3, #0
 800821c:	9617      	str	r6, [sp, #92]	; 0x5c
 800821e:	930a      	str	r3, [sp, #40]	; 0x28
 8008220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008222:	2b00      	cmp	r3, #0
 8008224:	f040 8590 	bne.w	8008d48 <_strtod_l+0xbb0>
 8008228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800822a:	b1eb      	cbz	r3, 8008268 <_strtod_l+0xd0>
 800822c:	4652      	mov	r2, sl
 800822e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008232:	ec43 2b10 	vmov	d0, r2, r3
 8008236:	b01d      	add	sp, #116	; 0x74
 8008238:	ecbd 8b02 	vpop	{d8}
 800823c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008240:	2a20      	cmp	r2, #32
 8008242:	d1cc      	bne.n	80081de <_strtod_l+0x46>
 8008244:	3301      	adds	r3, #1
 8008246:	9317      	str	r3, [sp, #92]	; 0x5c
 8008248:	e7be      	b.n	80081c8 <_strtod_l+0x30>
 800824a:	2a2d      	cmp	r2, #45	; 0x2d
 800824c:	d1c7      	bne.n	80081de <_strtod_l+0x46>
 800824e:	2201      	movs	r2, #1
 8008250:	920a      	str	r2, [sp, #40]	; 0x28
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	9217      	str	r2, [sp, #92]	; 0x5c
 8008256:	785b      	ldrb	r3, [r3, #1]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1c2      	bne.n	80081e2 <_strtod_l+0x4a>
 800825c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800825e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008262:	2b00      	cmp	r3, #0
 8008264:	f040 856e 	bne.w	8008d44 <_strtod_l+0xbac>
 8008268:	4652      	mov	r2, sl
 800826a:	465b      	mov	r3, fp
 800826c:	e7e1      	b.n	8008232 <_strtod_l+0x9a>
 800826e:	2200      	movs	r2, #0
 8008270:	e7ee      	b.n	8008250 <_strtod_l+0xb8>
 8008272:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008274:	b13a      	cbz	r2, 8008286 <_strtod_l+0xee>
 8008276:	2135      	movs	r1, #53	; 0x35
 8008278:	a81a      	add	r0, sp, #104	; 0x68
 800827a:	f002 fda8 	bl	800adce <__copybits>
 800827e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008280:	4620      	mov	r0, r4
 8008282:	f002 f967 	bl	800a554 <_Bfree>
 8008286:	3f01      	subs	r7, #1
 8008288:	2f04      	cmp	r7, #4
 800828a:	d806      	bhi.n	800829a <_strtod_l+0x102>
 800828c:	e8df f007 	tbb	[pc, r7]
 8008290:	1714030a 	.word	0x1714030a
 8008294:	0a          	.byte	0x0a
 8008295:	00          	.byte	0x00
 8008296:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800829a:	0728      	lsls	r0, r5, #28
 800829c:	d5c0      	bpl.n	8008220 <_strtod_l+0x88>
 800829e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80082a2:	e7bd      	b.n	8008220 <_strtod_l+0x88>
 80082a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80082a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80082aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80082ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80082b6:	e7f0      	b.n	800829a <_strtod_l+0x102>
 80082b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800843c <_strtod_l+0x2a4>
 80082bc:	e7ed      	b.n	800829a <_strtod_l+0x102>
 80082be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80082c2:	f04f 3aff 	mov.w	sl, #4294967295
 80082c6:	e7e8      	b.n	800829a <_strtod_l+0x102>
 80082c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80082ce:	785b      	ldrb	r3, [r3, #1]
 80082d0:	2b30      	cmp	r3, #48	; 0x30
 80082d2:	d0f9      	beq.n	80082c8 <_strtod_l+0x130>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0a3      	beq.n	8008220 <_strtod_l+0x88>
 80082d8:	2301      	movs	r3, #1
 80082da:	f04f 0900 	mov.w	r9, #0
 80082de:	9304      	str	r3, [sp, #16]
 80082e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082e2:	9308      	str	r3, [sp, #32]
 80082e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80082e8:	464f      	mov	r7, r9
 80082ea:	220a      	movs	r2, #10
 80082ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80082ee:	7806      	ldrb	r6, [r0, #0]
 80082f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80082f4:	b2d9      	uxtb	r1, r3
 80082f6:	2909      	cmp	r1, #9
 80082f8:	d92a      	bls.n	8008350 <_strtod_l+0x1b8>
 80082fa:	9905      	ldr	r1, [sp, #20]
 80082fc:	462a      	mov	r2, r5
 80082fe:	f003 f9b2 	bl	800b666 <strncmp>
 8008302:	b398      	cbz	r0, 800836c <_strtod_l+0x1d4>
 8008304:	2000      	movs	r0, #0
 8008306:	4632      	mov	r2, r6
 8008308:	463d      	mov	r5, r7
 800830a:	9005      	str	r0, [sp, #20]
 800830c:	4603      	mov	r3, r0
 800830e:	2a65      	cmp	r2, #101	; 0x65
 8008310:	d001      	beq.n	8008316 <_strtod_l+0x17e>
 8008312:	2a45      	cmp	r2, #69	; 0x45
 8008314:	d118      	bne.n	8008348 <_strtod_l+0x1b0>
 8008316:	b91d      	cbnz	r5, 8008320 <_strtod_l+0x188>
 8008318:	9a04      	ldr	r2, [sp, #16]
 800831a:	4302      	orrs	r2, r0
 800831c:	d09e      	beq.n	800825c <_strtod_l+0xc4>
 800831e:	2500      	movs	r5, #0
 8008320:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008324:	f108 0201 	add.w	r2, r8, #1
 8008328:	9217      	str	r2, [sp, #92]	; 0x5c
 800832a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800832e:	2a2b      	cmp	r2, #43	; 0x2b
 8008330:	d075      	beq.n	800841e <_strtod_l+0x286>
 8008332:	2a2d      	cmp	r2, #45	; 0x2d
 8008334:	d07b      	beq.n	800842e <_strtod_l+0x296>
 8008336:	f04f 0c00 	mov.w	ip, #0
 800833a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800833e:	2909      	cmp	r1, #9
 8008340:	f240 8082 	bls.w	8008448 <_strtod_l+0x2b0>
 8008344:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008348:	2600      	movs	r6, #0
 800834a:	e09d      	b.n	8008488 <_strtod_l+0x2f0>
 800834c:	2300      	movs	r3, #0
 800834e:	e7c4      	b.n	80082da <_strtod_l+0x142>
 8008350:	2f08      	cmp	r7, #8
 8008352:	bfd8      	it	le
 8008354:	9907      	ldrle	r1, [sp, #28]
 8008356:	f100 0001 	add.w	r0, r0, #1
 800835a:	bfda      	itte	le
 800835c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008360:	9307      	strle	r3, [sp, #28]
 8008362:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008366:	3701      	adds	r7, #1
 8008368:	9017      	str	r0, [sp, #92]	; 0x5c
 800836a:	e7bf      	b.n	80082ec <_strtod_l+0x154>
 800836c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800836e:	195a      	adds	r2, r3, r5
 8008370:	9217      	str	r2, [sp, #92]	; 0x5c
 8008372:	5d5a      	ldrb	r2, [r3, r5]
 8008374:	2f00      	cmp	r7, #0
 8008376:	d037      	beq.n	80083e8 <_strtod_l+0x250>
 8008378:	9005      	str	r0, [sp, #20]
 800837a:	463d      	mov	r5, r7
 800837c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008380:	2b09      	cmp	r3, #9
 8008382:	d912      	bls.n	80083aa <_strtod_l+0x212>
 8008384:	2301      	movs	r3, #1
 8008386:	e7c2      	b.n	800830e <_strtod_l+0x176>
 8008388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	9217      	str	r2, [sp, #92]	; 0x5c
 800838e:	785a      	ldrb	r2, [r3, #1]
 8008390:	3001      	adds	r0, #1
 8008392:	2a30      	cmp	r2, #48	; 0x30
 8008394:	d0f8      	beq.n	8008388 <_strtod_l+0x1f0>
 8008396:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800839a:	2b08      	cmp	r3, #8
 800839c:	f200 84d9 	bhi.w	8008d52 <_strtod_l+0xbba>
 80083a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083a2:	9005      	str	r0, [sp, #20]
 80083a4:	2000      	movs	r0, #0
 80083a6:	9308      	str	r3, [sp, #32]
 80083a8:	4605      	mov	r5, r0
 80083aa:	3a30      	subs	r2, #48	; 0x30
 80083ac:	f100 0301 	add.w	r3, r0, #1
 80083b0:	d014      	beq.n	80083dc <_strtod_l+0x244>
 80083b2:	9905      	ldr	r1, [sp, #20]
 80083b4:	4419      	add	r1, r3
 80083b6:	9105      	str	r1, [sp, #20]
 80083b8:	462b      	mov	r3, r5
 80083ba:	eb00 0e05 	add.w	lr, r0, r5
 80083be:	210a      	movs	r1, #10
 80083c0:	4573      	cmp	r3, lr
 80083c2:	d113      	bne.n	80083ec <_strtod_l+0x254>
 80083c4:	182b      	adds	r3, r5, r0
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	f105 0501 	add.w	r5, r5, #1
 80083cc:	4405      	add	r5, r0
 80083ce:	dc1c      	bgt.n	800840a <_strtod_l+0x272>
 80083d0:	9907      	ldr	r1, [sp, #28]
 80083d2:	230a      	movs	r3, #10
 80083d4:	fb03 2301 	mla	r3, r3, r1, r2
 80083d8:	9307      	str	r3, [sp, #28]
 80083da:	2300      	movs	r3, #0
 80083dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083de:	1c51      	adds	r1, r2, #1
 80083e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80083e2:	7852      	ldrb	r2, [r2, #1]
 80083e4:	4618      	mov	r0, r3
 80083e6:	e7c9      	b.n	800837c <_strtod_l+0x1e4>
 80083e8:	4638      	mov	r0, r7
 80083ea:	e7d2      	b.n	8008392 <_strtod_l+0x1fa>
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	dc04      	bgt.n	80083fa <_strtod_l+0x262>
 80083f0:	9e07      	ldr	r6, [sp, #28]
 80083f2:	434e      	muls	r6, r1
 80083f4:	9607      	str	r6, [sp, #28]
 80083f6:	3301      	adds	r3, #1
 80083f8:	e7e2      	b.n	80083c0 <_strtod_l+0x228>
 80083fa:	f103 0c01 	add.w	ip, r3, #1
 80083fe:	f1bc 0f10 	cmp.w	ip, #16
 8008402:	bfd8      	it	le
 8008404:	fb01 f909 	mulle.w	r9, r1, r9
 8008408:	e7f5      	b.n	80083f6 <_strtod_l+0x25e>
 800840a:	2d10      	cmp	r5, #16
 800840c:	bfdc      	itt	le
 800840e:	230a      	movle	r3, #10
 8008410:	fb03 2909 	mlale	r9, r3, r9, r2
 8008414:	e7e1      	b.n	80083da <_strtod_l+0x242>
 8008416:	2300      	movs	r3, #0
 8008418:	9305      	str	r3, [sp, #20]
 800841a:	2301      	movs	r3, #1
 800841c:	e77c      	b.n	8008318 <_strtod_l+0x180>
 800841e:	f04f 0c00 	mov.w	ip, #0
 8008422:	f108 0202 	add.w	r2, r8, #2
 8008426:	9217      	str	r2, [sp, #92]	; 0x5c
 8008428:	f898 2002 	ldrb.w	r2, [r8, #2]
 800842c:	e785      	b.n	800833a <_strtod_l+0x1a2>
 800842e:	f04f 0c01 	mov.w	ip, #1
 8008432:	e7f6      	b.n	8008422 <_strtod_l+0x28a>
 8008434:	0800c094 	.word	0x0800c094
 8008438:	0800bde8 	.word	0x0800bde8
 800843c:	7ff00000 	.word	0x7ff00000
 8008440:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008442:	1c51      	adds	r1, r2, #1
 8008444:	9117      	str	r1, [sp, #92]	; 0x5c
 8008446:	7852      	ldrb	r2, [r2, #1]
 8008448:	2a30      	cmp	r2, #48	; 0x30
 800844a:	d0f9      	beq.n	8008440 <_strtod_l+0x2a8>
 800844c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008450:	2908      	cmp	r1, #8
 8008452:	f63f af79 	bhi.w	8008348 <_strtod_l+0x1b0>
 8008456:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800845a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800845c:	9206      	str	r2, [sp, #24]
 800845e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008460:	1c51      	adds	r1, r2, #1
 8008462:	9117      	str	r1, [sp, #92]	; 0x5c
 8008464:	7852      	ldrb	r2, [r2, #1]
 8008466:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800846a:	2e09      	cmp	r6, #9
 800846c:	d937      	bls.n	80084de <_strtod_l+0x346>
 800846e:	9e06      	ldr	r6, [sp, #24]
 8008470:	1b89      	subs	r1, r1, r6
 8008472:	2908      	cmp	r1, #8
 8008474:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008478:	dc02      	bgt.n	8008480 <_strtod_l+0x2e8>
 800847a:	4576      	cmp	r6, lr
 800847c:	bfa8      	it	ge
 800847e:	4676      	movge	r6, lr
 8008480:	f1bc 0f00 	cmp.w	ip, #0
 8008484:	d000      	beq.n	8008488 <_strtod_l+0x2f0>
 8008486:	4276      	negs	r6, r6
 8008488:	2d00      	cmp	r5, #0
 800848a:	d14d      	bne.n	8008528 <_strtod_l+0x390>
 800848c:	9904      	ldr	r1, [sp, #16]
 800848e:	4301      	orrs	r1, r0
 8008490:	f47f aec6 	bne.w	8008220 <_strtod_l+0x88>
 8008494:	2b00      	cmp	r3, #0
 8008496:	f47f aee1 	bne.w	800825c <_strtod_l+0xc4>
 800849a:	2a69      	cmp	r2, #105	; 0x69
 800849c:	d027      	beq.n	80084ee <_strtod_l+0x356>
 800849e:	dc24      	bgt.n	80084ea <_strtod_l+0x352>
 80084a0:	2a49      	cmp	r2, #73	; 0x49
 80084a2:	d024      	beq.n	80084ee <_strtod_l+0x356>
 80084a4:	2a4e      	cmp	r2, #78	; 0x4e
 80084a6:	f47f aed9 	bne.w	800825c <_strtod_l+0xc4>
 80084aa:	499f      	ldr	r1, [pc, #636]	; (8008728 <_strtod_l+0x590>)
 80084ac:	a817      	add	r0, sp, #92	; 0x5c
 80084ae:	f001 ff31 	bl	800a314 <__match>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	f43f aed2 	beq.w	800825c <_strtod_l+0xc4>
 80084b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b28      	cmp	r3, #40	; 0x28
 80084be:	d12d      	bne.n	800851c <_strtod_l+0x384>
 80084c0:	499a      	ldr	r1, [pc, #616]	; (800872c <_strtod_l+0x594>)
 80084c2:	aa1a      	add	r2, sp, #104	; 0x68
 80084c4:	a817      	add	r0, sp, #92	; 0x5c
 80084c6:	f001 ff39 	bl	800a33c <__hexnan>
 80084ca:	2805      	cmp	r0, #5
 80084cc:	d126      	bne.n	800851c <_strtod_l+0x384>
 80084ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80084d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80084d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80084dc:	e6a0      	b.n	8008220 <_strtod_l+0x88>
 80084de:	210a      	movs	r1, #10
 80084e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80084e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80084e8:	e7b9      	b.n	800845e <_strtod_l+0x2c6>
 80084ea:	2a6e      	cmp	r2, #110	; 0x6e
 80084ec:	e7db      	b.n	80084a6 <_strtod_l+0x30e>
 80084ee:	4990      	ldr	r1, [pc, #576]	; (8008730 <_strtod_l+0x598>)
 80084f0:	a817      	add	r0, sp, #92	; 0x5c
 80084f2:	f001 ff0f 	bl	800a314 <__match>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f43f aeb0 	beq.w	800825c <_strtod_l+0xc4>
 80084fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084fe:	498d      	ldr	r1, [pc, #564]	; (8008734 <_strtod_l+0x59c>)
 8008500:	3b01      	subs	r3, #1
 8008502:	a817      	add	r0, sp, #92	; 0x5c
 8008504:	9317      	str	r3, [sp, #92]	; 0x5c
 8008506:	f001 ff05 	bl	800a314 <__match>
 800850a:	b910      	cbnz	r0, 8008512 <_strtod_l+0x37a>
 800850c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800850e:	3301      	adds	r3, #1
 8008510:	9317      	str	r3, [sp, #92]	; 0x5c
 8008512:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008744 <_strtod_l+0x5ac>
 8008516:	f04f 0a00 	mov.w	sl, #0
 800851a:	e681      	b.n	8008220 <_strtod_l+0x88>
 800851c:	4886      	ldr	r0, [pc, #536]	; (8008738 <_strtod_l+0x5a0>)
 800851e:	f003 f847 	bl	800b5b0 <nan>
 8008522:	ec5b ab10 	vmov	sl, fp, d0
 8008526:	e67b      	b.n	8008220 <_strtod_l+0x88>
 8008528:	9b05      	ldr	r3, [sp, #20]
 800852a:	9807      	ldr	r0, [sp, #28]
 800852c:	1af3      	subs	r3, r6, r3
 800852e:	2f00      	cmp	r7, #0
 8008530:	bf08      	it	eq
 8008532:	462f      	moveq	r7, r5
 8008534:	2d10      	cmp	r5, #16
 8008536:	9306      	str	r3, [sp, #24]
 8008538:	46a8      	mov	r8, r5
 800853a:	bfa8      	it	ge
 800853c:	f04f 0810 	movge.w	r8, #16
 8008540:	f7f7 ffe0 	bl	8000504 <__aeabi_ui2d>
 8008544:	2d09      	cmp	r5, #9
 8008546:	4682      	mov	sl, r0
 8008548:	468b      	mov	fp, r1
 800854a:	dd13      	ble.n	8008574 <_strtod_l+0x3dc>
 800854c:	4b7b      	ldr	r3, [pc, #492]	; (800873c <_strtod_l+0x5a4>)
 800854e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008552:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008556:	f7f8 f84f 	bl	80005f8 <__aeabi_dmul>
 800855a:	4682      	mov	sl, r0
 800855c:	4648      	mov	r0, r9
 800855e:	468b      	mov	fp, r1
 8008560:	f7f7 ffd0 	bl	8000504 <__aeabi_ui2d>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4650      	mov	r0, sl
 800856a:	4659      	mov	r1, fp
 800856c:	f7f7 fe8e 	bl	800028c <__adddf3>
 8008570:	4682      	mov	sl, r0
 8008572:	468b      	mov	fp, r1
 8008574:	2d0f      	cmp	r5, #15
 8008576:	dc38      	bgt.n	80085ea <_strtod_l+0x452>
 8008578:	9b06      	ldr	r3, [sp, #24]
 800857a:	2b00      	cmp	r3, #0
 800857c:	f43f ae50 	beq.w	8008220 <_strtod_l+0x88>
 8008580:	dd24      	ble.n	80085cc <_strtod_l+0x434>
 8008582:	2b16      	cmp	r3, #22
 8008584:	dc0b      	bgt.n	800859e <_strtod_l+0x406>
 8008586:	496d      	ldr	r1, [pc, #436]	; (800873c <_strtod_l+0x5a4>)
 8008588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800858c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008590:	4652      	mov	r2, sl
 8008592:	465b      	mov	r3, fp
 8008594:	f7f8 f830 	bl	80005f8 <__aeabi_dmul>
 8008598:	4682      	mov	sl, r0
 800859a:	468b      	mov	fp, r1
 800859c:	e640      	b.n	8008220 <_strtod_l+0x88>
 800859e:	9a06      	ldr	r2, [sp, #24]
 80085a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80085a4:	4293      	cmp	r3, r2
 80085a6:	db20      	blt.n	80085ea <_strtod_l+0x452>
 80085a8:	4c64      	ldr	r4, [pc, #400]	; (800873c <_strtod_l+0x5a4>)
 80085aa:	f1c5 050f 	rsb	r5, r5, #15
 80085ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80085b2:	4652      	mov	r2, sl
 80085b4:	465b      	mov	r3, fp
 80085b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085ba:	f7f8 f81d 	bl	80005f8 <__aeabi_dmul>
 80085be:	9b06      	ldr	r3, [sp, #24]
 80085c0:	1b5d      	subs	r5, r3, r5
 80085c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80085c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80085ca:	e7e3      	b.n	8008594 <_strtod_l+0x3fc>
 80085cc:	9b06      	ldr	r3, [sp, #24]
 80085ce:	3316      	adds	r3, #22
 80085d0:	db0b      	blt.n	80085ea <_strtod_l+0x452>
 80085d2:	9b05      	ldr	r3, [sp, #20]
 80085d4:	1b9e      	subs	r6, r3, r6
 80085d6:	4b59      	ldr	r3, [pc, #356]	; (800873c <_strtod_l+0x5a4>)
 80085d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80085dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085e0:	4650      	mov	r0, sl
 80085e2:	4659      	mov	r1, fp
 80085e4:	f7f8 f932 	bl	800084c <__aeabi_ddiv>
 80085e8:	e7d6      	b.n	8008598 <_strtod_l+0x400>
 80085ea:	9b06      	ldr	r3, [sp, #24]
 80085ec:	eba5 0808 	sub.w	r8, r5, r8
 80085f0:	4498      	add	r8, r3
 80085f2:	f1b8 0f00 	cmp.w	r8, #0
 80085f6:	dd74      	ble.n	80086e2 <_strtod_l+0x54a>
 80085f8:	f018 030f 	ands.w	r3, r8, #15
 80085fc:	d00a      	beq.n	8008614 <_strtod_l+0x47c>
 80085fe:	494f      	ldr	r1, [pc, #316]	; (800873c <_strtod_l+0x5a4>)
 8008600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008604:	4652      	mov	r2, sl
 8008606:	465b      	mov	r3, fp
 8008608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800860c:	f7f7 fff4 	bl	80005f8 <__aeabi_dmul>
 8008610:	4682      	mov	sl, r0
 8008612:	468b      	mov	fp, r1
 8008614:	f038 080f 	bics.w	r8, r8, #15
 8008618:	d04f      	beq.n	80086ba <_strtod_l+0x522>
 800861a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800861e:	dd22      	ble.n	8008666 <_strtod_l+0x4ce>
 8008620:	2500      	movs	r5, #0
 8008622:	462e      	mov	r6, r5
 8008624:	9507      	str	r5, [sp, #28]
 8008626:	9505      	str	r5, [sp, #20]
 8008628:	2322      	movs	r3, #34	; 0x22
 800862a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008744 <_strtod_l+0x5ac>
 800862e:	6023      	str	r3, [r4, #0]
 8008630:	f04f 0a00 	mov.w	sl, #0
 8008634:	9b07      	ldr	r3, [sp, #28]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f43f adf2 	beq.w	8008220 <_strtod_l+0x88>
 800863c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800863e:	4620      	mov	r0, r4
 8008640:	f001 ff88 	bl	800a554 <_Bfree>
 8008644:	9905      	ldr	r1, [sp, #20]
 8008646:	4620      	mov	r0, r4
 8008648:	f001 ff84 	bl	800a554 <_Bfree>
 800864c:	4631      	mov	r1, r6
 800864e:	4620      	mov	r0, r4
 8008650:	f001 ff80 	bl	800a554 <_Bfree>
 8008654:	9907      	ldr	r1, [sp, #28]
 8008656:	4620      	mov	r0, r4
 8008658:	f001 ff7c 	bl	800a554 <_Bfree>
 800865c:	4629      	mov	r1, r5
 800865e:	4620      	mov	r0, r4
 8008660:	f001 ff78 	bl	800a554 <_Bfree>
 8008664:	e5dc      	b.n	8008220 <_strtod_l+0x88>
 8008666:	4b36      	ldr	r3, [pc, #216]	; (8008740 <_strtod_l+0x5a8>)
 8008668:	9304      	str	r3, [sp, #16]
 800866a:	2300      	movs	r3, #0
 800866c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008670:	4650      	mov	r0, sl
 8008672:	4659      	mov	r1, fp
 8008674:	4699      	mov	r9, r3
 8008676:	f1b8 0f01 	cmp.w	r8, #1
 800867a:	dc21      	bgt.n	80086c0 <_strtod_l+0x528>
 800867c:	b10b      	cbz	r3, 8008682 <_strtod_l+0x4ea>
 800867e:	4682      	mov	sl, r0
 8008680:	468b      	mov	fp, r1
 8008682:	4b2f      	ldr	r3, [pc, #188]	; (8008740 <_strtod_l+0x5a8>)
 8008684:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008688:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800868c:	4652      	mov	r2, sl
 800868e:	465b      	mov	r3, fp
 8008690:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008694:	f7f7 ffb0 	bl	80005f8 <__aeabi_dmul>
 8008698:	4b2a      	ldr	r3, [pc, #168]	; (8008744 <_strtod_l+0x5ac>)
 800869a:	460a      	mov	r2, r1
 800869c:	400b      	ands	r3, r1
 800869e:	492a      	ldr	r1, [pc, #168]	; (8008748 <_strtod_l+0x5b0>)
 80086a0:	428b      	cmp	r3, r1
 80086a2:	4682      	mov	sl, r0
 80086a4:	d8bc      	bhi.n	8008620 <_strtod_l+0x488>
 80086a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80086aa:	428b      	cmp	r3, r1
 80086ac:	bf86      	itte	hi
 80086ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800874c <_strtod_l+0x5b4>
 80086b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80086b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80086ba:	2300      	movs	r3, #0
 80086bc:	9304      	str	r3, [sp, #16]
 80086be:	e084      	b.n	80087ca <_strtod_l+0x632>
 80086c0:	f018 0f01 	tst.w	r8, #1
 80086c4:	d005      	beq.n	80086d2 <_strtod_l+0x53a>
 80086c6:	9b04      	ldr	r3, [sp, #16]
 80086c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086cc:	f7f7 ff94 	bl	80005f8 <__aeabi_dmul>
 80086d0:	2301      	movs	r3, #1
 80086d2:	9a04      	ldr	r2, [sp, #16]
 80086d4:	3208      	adds	r2, #8
 80086d6:	f109 0901 	add.w	r9, r9, #1
 80086da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80086de:	9204      	str	r2, [sp, #16]
 80086e0:	e7c9      	b.n	8008676 <_strtod_l+0x4de>
 80086e2:	d0ea      	beq.n	80086ba <_strtod_l+0x522>
 80086e4:	f1c8 0800 	rsb	r8, r8, #0
 80086e8:	f018 020f 	ands.w	r2, r8, #15
 80086ec:	d00a      	beq.n	8008704 <_strtod_l+0x56c>
 80086ee:	4b13      	ldr	r3, [pc, #76]	; (800873c <_strtod_l+0x5a4>)
 80086f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086f4:	4650      	mov	r0, sl
 80086f6:	4659      	mov	r1, fp
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	f7f8 f8a6 	bl	800084c <__aeabi_ddiv>
 8008700:	4682      	mov	sl, r0
 8008702:	468b      	mov	fp, r1
 8008704:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008708:	d0d7      	beq.n	80086ba <_strtod_l+0x522>
 800870a:	f1b8 0f1f 	cmp.w	r8, #31
 800870e:	dd1f      	ble.n	8008750 <_strtod_l+0x5b8>
 8008710:	2500      	movs	r5, #0
 8008712:	462e      	mov	r6, r5
 8008714:	9507      	str	r5, [sp, #28]
 8008716:	9505      	str	r5, [sp, #20]
 8008718:	2322      	movs	r3, #34	; 0x22
 800871a:	f04f 0a00 	mov.w	sl, #0
 800871e:	f04f 0b00 	mov.w	fp, #0
 8008722:	6023      	str	r3, [r4, #0]
 8008724:	e786      	b.n	8008634 <_strtod_l+0x49c>
 8008726:	bf00      	nop
 8008728:	0800bdb9 	.word	0x0800bdb9
 800872c:	0800bdfc 	.word	0x0800bdfc
 8008730:	0800bdb1 	.word	0x0800bdb1
 8008734:	0800bf3c 	.word	0x0800bf3c
 8008738:	0800c250 	.word	0x0800c250
 800873c:	0800c130 	.word	0x0800c130
 8008740:	0800c108 	.word	0x0800c108
 8008744:	7ff00000 	.word	0x7ff00000
 8008748:	7ca00000 	.word	0x7ca00000
 800874c:	7fefffff 	.word	0x7fefffff
 8008750:	f018 0310 	ands.w	r3, r8, #16
 8008754:	bf18      	it	ne
 8008756:	236a      	movne	r3, #106	; 0x6a
 8008758:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008b08 <_strtod_l+0x970>
 800875c:	9304      	str	r3, [sp, #16]
 800875e:	4650      	mov	r0, sl
 8008760:	4659      	mov	r1, fp
 8008762:	2300      	movs	r3, #0
 8008764:	f018 0f01 	tst.w	r8, #1
 8008768:	d004      	beq.n	8008774 <_strtod_l+0x5dc>
 800876a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800876e:	f7f7 ff43 	bl	80005f8 <__aeabi_dmul>
 8008772:	2301      	movs	r3, #1
 8008774:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008778:	f109 0908 	add.w	r9, r9, #8
 800877c:	d1f2      	bne.n	8008764 <_strtod_l+0x5cc>
 800877e:	b10b      	cbz	r3, 8008784 <_strtod_l+0x5ec>
 8008780:	4682      	mov	sl, r0
 8008782:	468b      	mov	fp, r1
 8008784:	9b04      	ldr	r3, [sp, #16]
 8008786:	b1c3      	cbz	r3, 80087ba <_strtod_l+0x622>
 8008788:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800878c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008790:	2b00      	cmp	r3, #0
 8008792:	4659      	mov	r1, fp
 8008794:	dd11      	ble.n	80087ba <_strtod_l+0x622>
 8008796:	2b1f      	cmp	r3, #31
 8008798:	f340 8124 	ble.w	80089e4 <_strtod_l+0x84c>
 800879c:	2b34      	cmp	r3, #52	; 0x34
 800879e:	bfde      	ittt	le
 80087a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80087a4:	f04f 33ff 	movle.w	r3, #4294967295
 80087a8:	fa03 f202 	lslle.w	r2, r3, r2
 80087ac:	f04f 0a00 	mov.w	sl, #0
 80087b0:	bfcc      	ite	gt
 80087b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80087b6:	ea02 0b01 	andle.w	fp, r2, r1
 80087ba:	2200      	movs	r2, #0
 80087bc:	2300      	movs	r3, #0
 80087be:	4650      	mov	r0, sl
 80087c0:	4659      	mov	r1, fp
 80087c2:	f7f8 f981 	bl	8000ac8 <__aeabi_dcmpeq>
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d1a2      	bne.n	8008710 <_strtod_l+0x578>
 80087ca:	9b07      	ldr	r3, [sp, #28]
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	9908      	ldr	r1, [sp, #32]
 80087d0:	462b      	mov	r3, r5
 80087d2:	463a      	mov	r2, r7
 80087d4:	4620      	mov	r0, r4
 80087d6:	f001 ff25 	bl	800a624 <__s2b>
 80087da:	9007      	str	r0, [sp, #28]
 80087dc:	2800      	cmp	r0, #0
 80087de:	f43f af1f 	beq.w	8008620 <_strtod_l+0x488>
 80087e2:	9b05      	ldr	r3, [sp, #20]
 80087e4:	1b9e      	subs	r6, r3, r6
 80087e6:	9b06      	ldr	r3, [sp, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	bfb4      	ite	lt
 80087ec:	4633      	movlt	r3, r6
 80087ee:	2300      	movge	r3, #0
 80087f0:	930c      	str	r3, [sp, #48]	; 0x30
 80087f2:	9b06      	ldr	r3, [sp, #24]
 80087f4:	2500      	movs	r5, #0
 80087f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80087fa:	9312      	str	r3, [sp, #72]	; 0x48
 80087fc:	462e      	mov	r6, r5
 80087fe:	9b07      	ldr	r3, [sp, #28]
 8008800:	4620      	mov	r0, r4
 8008802:	6859      	ldr	r1, [r3, #4]
 8008804:	f001 fe66 	bl	800a4d4 <_Balloc>
 8008808:	9005      	str	r0, [sp, #20]
 800880a:	2800      	cmp	r0, #0
 800880c:	f43f af0c 	beq.w	8008628 <_strtod_l+0x490>
 8008810:	9b07      	ldr	r3, [sp, #28]
 8008812:	691a      	ldr	r2, [r3, #16]
 8008814:	3202      	adds	r2, #2
 8008816:	f103 010c 	add.w	r1, r3, #12
 800881a:	0092      	lsls	r2, r2, #2
 800881c:	300c      	adds	r0, #12
 800881e:	f001 fe4b 	bl	800a4b8 <memcpy>
 8008822:	ec4b ab10 	vmov	d0, sl, fp
 8008826:	aa1a      	add	r2, sp, #104	; 0x68
 8008828:	a919      	add	r1, sp, #100	; 0x64
 800882a:	4620      	mov	r0, r4
 800882c:	f002 fa40 	bl	800acb0 <__d2b>
 8008830:	ec4b ab18 	vmov	d8, sl, fp
 8008834:	9018      	str	r0, [sp, #96]	; 0x60
 8008836:	2800      	cmp	r0, #0
 8008838:	f43f aef6 	beq.w	8008628 <_strtod_l+0x490>
 800883c:	2101      	movs	r1, #1
 800883e:	4620      	mov	r0, r4
 8008840:	f001 ff8a 	bl	800a758 <__i2b>
 8008844:	4606      	mov	r6, r0
 8008846:	2800      	cmp	r0, #0
 8008848:	f43f aeee 	beq.w	8008628 <_strtod_l+0x490>
 800884c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800884e:	9904      	ldr	r1, [sp, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	bfab      	itete	ge
 8008854:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008856:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008858:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800885a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800885e:	bfac      	ite	ge
 8008860:	eb03 0902 	addge.w	r9, r3, r2
 8008864:	1ad7      	sublt	r7, r2, r3
 8008866:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008868:	eba3 0801 	sub.w	r8, r3, r1
 800886c:	4490      	add	r8, r2
 800886e:	4ba1      	ldr	r3, [pc, #644]	; (8008af4 <_strtod_l+0x95c>)
 8008870:	f108 38ff 	add.w	r8, r8, #4294967295
 8008874:	4598      	cmp	r8, r3
 8008876:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800887a:	f280 80c7 	bge.w	8008a0c <_strtod_l+0x874>
 800887e:	eba3 0308 	sub.w	r3, r3, r8
 8008882:	2b1f      	cmp	r3, #31
 8008884:	eba2 0203 	sub.w	r2, r2, r3
 8008888:	f04f 0101 	mov.w	r1, #1
 800888c:	f300 80b1 	bgt.w	80089f2 <_strtod_l+0x85a>
 8008890:	fa01 f303 	lsl.w	r3, r1, r3
 8008894:	930d      	str	r3, [sp, #52]	; 0x34
 8008896:	2300      	movs	r3, #0
 8008898:	9308      	str	r3, [sp, #32]
 800889a:	eb09 0802 	add.w	r8, r9, r2
 800889e:	9b04      	ldr	r3, [sp, #16]
 80088a0:	45c1      	cmp	r9, r8
 80088a2:	4417      	add	r7, r2
 80088a4:	441f      	add	r7, r3
 80088a6:	464b      	mov	r3, r9
 80088a8:	bfa8      	it	ge
 80088aa:	4643      	movge	r3, r8
 80088ac:	42bb      	cmp	r3, r7
 80088ae:	bfa8      	it	ge
 80088b0:	463b      	movge	r3, r7
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bfc2      	ittt	gt
 80088b6:	eba8 0803 	subgt.w	r8, r8, r3
 80088ba:	1aff      	subgt	r7, r7, r3
 80088bc:	eba9 0903 	subgt.w	r9, r9, r3
 80088c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	dd17      	ble.n	80088f6 <_strtod_l+0x75e>
 80088c6:	4631      	mov	r1, r6
 80088c8:	461a      	mov	r2, r3
 80088ca:	4620      	mov	r0, r4
 80088cc:	f002 f804 	bl	800a8d8 <__pow5mult>
 80088d0:	4606      	mov	r6, r0
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f43f aea8 	beq.w	8008628 <_strtod_l+0x490>
 80088d8:	4601      	mov	r1, r0
 80088da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80088dc:	4620      	mov	r0, r4
 80088de:	f001 ff51 	bl	800a784 <__multiply>
 80088e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80088e4:	2800      	cmp	r0, #0
 80088e6:	f43f ae9f 	beq.w	8008628 <_strtod_l+0x490>
 80088ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80088ec:	4620      	mov	r0, r4
 80088ee:	f001 fe31 	bl	800a554 <_Bfree>
 80088f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088f4:	9318      	str	r3, [sp, #96]	; 0x60
 80088f6:	f1b8 0f00 	cmp.w	r8, #0
 80088fa:	f300 808c 	bgt.w	8008a16 <_strtod_l+0x87e>
 80088fe:	9b06      	ldr	r3, [sp, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	dd08      	ble.n	8008916 <_strtod_l+0x77e>
 8008904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008906:	9905      	ldr	r1, [sp, #20]
 8008908:	4620      	mov	r0, r4
 800890a:	f001 ffe5 	bl	800a8d8 <__pow5mult>
 800890e:	9005      	str	r0, [sp, #20]
 8008910:	2800      	cmp	r0, #0
 8008912:	f43f ae89 	beq.w	8008628 <_strtod_l+0x490>
 8008916:	2f00      	cmp	r7, #0
 8008918:	dd08      	ble.n	800892c <_strtod_l+0x794>
 800891a:	9905      	ldr	r1, [sp, #20]
 800891c:	463a      	mov	r2, r7
 800891e:	4620      	mov	r0, r4
 8008920:	f002 f834 	bl	800a98c <__lshift>
 8008924:	9005      	str	r0, [sp, #20]
 8008926:	2800      	cmp	r0, #0
 8008928:	f43f ae7e 	beq.w	8008628 <_strtod_l+0x490>
 800892c:	f1b9 0f00 	cmp.w	r9, #0
 8008930:	dd08      	ble.n	8008944 <_strtod_l+0x7ac>
 8008932:	4631      	mov	r1, r6
 8008934:	464a      	mov	r2, r9
 8008936:	4620      	mov	r0, r4
 8008938:	f002 f828 	bl	800a98c <__lshift>
 800893c:	4606      	mov	r6, r0
 800893e:	2800      	cmp	r0, #0
 8008940:	f43f ae72 	beq.w	8008628 <_strtod_l+0x490>
 8008944:	9a05      	ldr	r2, [sp, #20]
 8008946:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008948:	4620      	mov	r0, r4
 800894a:	f002 f8ab 	bl	800aaa4 <__mdiff>
 800894e:	4605      	mov	r5, r0
 8008950:	2800      	cmp	r0, #0
 8008952:	f43f ae69 	beq.w	8008628 <_strtod_l+0x490>
 8008956:	68c3      	ldr	r3, [r0, #12]
 8008958:	930b      	str	r3, [sp, #44]	; 0x2c
 800895a:	2300      	movs	r3, #0
 800895c:	60c3      	str	r3, [r0, #12]
 800895e:	4631      	mov	r1, r6
 8008960:	f002 f884 	bl	800aa6c <__mcmp>
 8008964:	2800      	cmp	r0, #0
 8008966:	da60      	bge.n	8008a2a <_strtod_l+0x892>
 8008968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800896a:	ea53 030a 	orrs.w	r3, r3, sl
 800896e:	f040 8082 	bne.w	8008a76 <_strtod_l+0x8de>
 8008972:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008976:	2b00      	cmp	r3, #0
 8008978:	d17d      	bne.n	8008a76 <_strtod_l+0x8de>
 800897a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800897e:	0d1b      	lsrs	r3, r3, #20
 8008980:	051b      	lsls	r3, r3, #20
 8008982:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008986:	d976      	bls.n	8008a76 <_strtod_l+0x8de>
 8008988:	696b      	ldr	r3, [r5, #20]
 800898a:	b913      	cbnz	r3, 8008992 <_strtod_l+0x7fa>
 800898c:	692b      	ldr	r3, [r5, #16]
 800898e:	2b01      	cmp	r3, #1
 8008990:	dd71      	ble.n	8008a76 <_strtod_l+0x8de>
 8008992:	4629      	mov	r1, r5
 8008994:	2201      	movs	r2, #1
 8008996:	4620      	mov	r0, r4
 8008998:	f001 fff8 	bl	800a98c <__lshift>
 800899c:	4631      	mov	r1, r6
 800899e:	4605      	mov	r5, r0
 80089a0:	f002 f864 	bl	800aa6c <__mcmp>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	dd66      	ble.n	8008a76 <_strtod_l+0x8de>
 80089a8:	9904      	ldr	r1, [sp, #16]
 80089aa:	4a53      	ldr	r2, [pc, #332]	; (8008af8 <_strtod_l+0x960>)
 80089ac:	465b      	mov	r3, fp
 80089ae:	2900      	cmp	r1, #0
 80089b0:	f000 8081 	beq.w	8008ab6 <_strtod_l+0x91e>
 80089b4:	ea02 010b 	and.w	r1, r2, fp
 80089b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80089bc:	dc7b      	bgt.n	8008ab6 <_strtod_l+0x91e>
 80089be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80089c2:	f77f aea9 	ble.w	8008718 <_strtod_l+0x580>
 80089c6:	4b4d      	ldr	r3, [pc, #308]	; (8008afc <_strtod_l+0x964>)
 80089c8:	4650      	mov	r0, sl
 80089ca:	4659      	mov	r1, fp
 80089cc:	2200      	movs	r2, #0
 80089ce:	f7f7 fe13 	bl	80005f8 <__aeabi_dmul>
 80089d2:	460b      	mov	r3, r1
 80089d4:	4303      	orrs	r3, r0
 80089d6:	bf08      	it	eq
 80089d8:	2322      	moveq	r3, #34	; 0x22
 80089da:	4682      	mov	sl, r0
 80089dc:	468b      	mov	fp, r1
 80089de:	bf08      	it	eq
 80089e0:	6023      	streq	r3, [r4, #0]
 80089e2:	e62b      	b.n	800863c <_strtod_l+0x4a4>
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	fa02 f303 	lsl.w	r3, r2, r3
 80089ec:	ea03 0a0a 	and.w	sl, r3, sl
 80089f0:	e6e3      	b.n	80087ba <_strtod_l+0x622>
 80089f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80089f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80089fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80089fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008a02:	fa01 f308 	lsl.w	r3, r1, r8
 8008a06:	9308      	str	r3, [sp, #32]
 8008a08:	910d      	str	r1, [sp, #52]	; 0x34
 8008a0a:	e746      	b.n	800889a <_strtod_l+0x702>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9308      	str	r3, [sp, #32]
 8008a10:	2301      	movs	r3, #1
 8008a12:	930d      	str	r3, [sp, #52]	; 0x34
 8008a14:	e741      	b.n	800889a <_strtod_l+0x702>
 8008a16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a18:	4642      	mov	r2, r8
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f001 ffb6 	bl	800a98c <__lshift>
 8008a20:	9018      	str	r0, [sp, #96]	; 0x60
 8008a22:	2800      	cmp	r0, #0
 8008a24:	f47f af6b 	bne.w	80088fe <_strtod_l+0x766>
 8008a28:	e5fe      	b.n	8008628 <_strtod_l+0x490>
 8008a2a:	465f      	mov	r7, fp
 8008a2c:	d16e      	bne.n	8008b0c <_strtod_l+0x974>
 8008a2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a34:	b342      	cbz	r2, 8008a88 <_strtod_l+0x8f0>
 8008a36:	4a32      	ldr	r2, [pc, #200]	; (8008b00 <_strtod_l+0x968>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d128      	bne.n	8008a8e <_strtod_l+0x8f6>
 8008a3c:	9b04      	ldr	r3, [sp, #16]
 8008a3e:	4651      	mov	r1, sl
 8008a40:	b1eb      	cbz	r3, 8008a7e <_strtod_l+0x8e6>
 8008a42:	4b2d      	ldr	r3, [pc, #180]	; (8008af8 <_strtod_l+0x960>)
 8008a44:	403b      	ands	r3, r7
 8008a46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4e:	d819      	bhi.n	8008a84 <_strtod_l+0x8ec>
 8008a50:	0d1b      	lsrs	r3, r3, #20
 8008a52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	d117      	bne.n	8008a8e <_strtod_l+0x8f6>
 8008a5e:	4b29      	ldr	r3, [pc, #164]	; (8008b04 <_strtod_l+0x96c>)
 8008a60:	429f      	cmp	r7, r3
 8008a62:	d102      	bne.n	8008a6a <_strtod_l+0x8d2>
 8008a64:	3101      	adds	r1, #1
 8008a66:	f43f addf 	beq.w	8008628 <_strtod_l+0x490>
 8008a6a:	4b23      	ldr	r3, [pc, #140]	; (8008af8 <_strtod_l+0x960>)
 8008a6c:	403b      	ands	r3, r7
 8008a6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008a72:	f04f 0a00 	mov.w	sl, #0
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1a4      	bne.n	80089c6 <_strtod_l+0x82e>
 8008a7c:	e5de      	b.n	800863c <_strtod_l+0x4a4>
 8008a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a82:	e7ea      	b.n	8008a5a <_strtod_l+0x8c2>
 8008a84:	4613      	mov	r3, r2
 8008a86:	e7e8      	b.n	8008a5a <_strtod_l+0x8c2>
 8008a88:	ea53 030a 	orrs.w	r3, r3, sl
 8008a8c:	d08c      	beq.n	80089a8 <_strtod_l+0x810>
 8008a8e:	9b08      	ldr	r3, [sp, #32]
 8008a90:	b1db      	cbz	r3, 8008aca <_strtod_l+0x932>
 8008a92:	423b      	tst	r3, r7
 8008a94:	d0ef      	beq.n	8008a76 <_strtod_l+0x8de>
 8008a96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a98:	9a04      	ldr	r2, [sp, #16]
 8008a9a:	4650      	mov	r0, sl
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	b1c3      	cbz	r3, 8008ad2 <_strtod_l+0x93a>
 8008aa0:	f7ff fb5c 	bl	800815c <sulp>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	ec51 0b18 	vmov	r0, r1, d8
 8008aac:	f7f7 fbee 	bl	800028c <__adddf3>
 8008ab0:	4682      	mov	sl, r0
 8008ab2:	468b      	mov	fp, r1
 8008ab4:	e7df      	b.n	8008a76 <_strtod_l+0x8de>
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008abc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008ac0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008ac4:	f04f 3aff 	mov.w	sl, #4294967295
 8008ac8:	e7d5      	b.n	8008a76 <_strtod_l+0x8de>
 8008aca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008acc:	ea13 0f0a 	tst.w	r3, sl
 8008ad0:	e7e0      	b.n	8008a94 <_strtod_l+0x8fc>
 8008ad2:	f7ff fb43 	bl	800815c <sulp>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	ec51 0b18 	vmov	r0, r1, d8
 8008ade:	f7f7 fbd3 	bl	8000288 <__aeabi_dsub>
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4682      	mov	sl, r0
 8008ae8:	468b      	mov	fp, r1
 8008aea:	f7f7 ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d0c1      	beq.n	8008a76 <_strtod_l+0x8de>
 8008af2:	e611      	b.n	8008718 <_strtod_l+0x580>
 8008af4:	fffffc02 	.word	0xfffffc02
 8008af8:	7ff00000 	.word	0x7ff00000
 8008afc:	39500000 	.word	0x39500000
 8008b00:	000fffff 	.word	0x000fffff
 8008b04:	7fefffff 	.word	0x7fefffff
 8008b08:	0800be10 	.word	0x0800be10
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f002 f92a 	bl	800ad68 <__ratio>
 8008b14:	ec59 8b10 	vmov	r8, r9, d0
 8008b18:	ee10 0a10 	vmov	r0, s0
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b22:	4649      	mov	r1, r9
 8008b24:	f7f7 ffe4 	bl	8000af0 <__aeabi_dcmple>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d07a      	beq.n	8008c22 <_strtod_l+0xa8a>
 8008b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d04a      	beq.n	8008bc8 <_strtod_l+0xa30>
 8008b32:	4b95      	ldr	r3, [pc, #596]	; (8008d88 <_strtod_l+0xbf0>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008d88 <_strtod_l+0xbf0>
 8008b3e:	f04f 0800 	mov.w	r8, #0
 8008b42:	4b92      	ldr	r3, [pc, #584]	; (8008d8c <_strtod_l+0xbf4>)
 8008b44:	403b      	ands	r3, r7
 8008b46:	930d      	str	r3, [sp, #52]	; 0x34
 8008b48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b4a:	4b91      	ldr	r3, [pc, #580]	; (8008d90 <_strtod_l+0xbf8>)
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	f040 80b0 	bne.w	8008cb2 <_strtod_l+0xb1a>
 8008b52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008b5a:	ec4b ab10 	vmov	d0, sl, fp
 8008b5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b62:	f002 f829 	bl	800abb8 <__ulp>
 8008b66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b6a:	ec53 2b10 	vmov	r2, r3, d0
 8008b6e:	f7f7 fd43 	bl	80005f8 <__aeabi_dmul>
 8008b72:	4652      	mov	r2, sl
 8008b74:	465b      	mov	r3, fp
 8008b76:	f7f7 fb89 	bl	800028c <__adddf3>
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4983      	ldr	r1, [pc, #524]	; (8008d8c <_strtod_l+0xbf4>)
 8008b7e:	4a85      	ldr	r2, [pc, #532]	; (8008d94 <_strtod_l+0xbfc>)
 8008b80:	4019      	ands	r1, r3
 8008b82:	4291      	cmp	r1, r2
 8008b84:	4682      	mov	sl, r0
 8008b86:	d960      	bls.n	8008c4a <_strtod_l+0xab2>
 8008b88:	ee18 3a90 	vmov	r3, s17
 8008b8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d104      	bne.n	8008b9e <_strtod_l+0xa06>
 8008b94:	ee18 3a10 	vmov	r3, s16
 8008b98:	3301      	adds	r3, #1
 8008b9a:	f43f ad45 	beq.w	8008628 <_strtod_l+0x490>
 8008b9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008da0 <_strtod_l+0xc08>
 8008ba2:	f04f 3aff 	mov.w	sl, #4294967295
 8008ba6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f001 fcd3 	bl	800a554 <_Bfree>
 8008bae:	9905      	ldr	r1, [sp, #20]
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f001 fccf 	bl	800a554 <_Bfree>
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f001 fccb 	bl	800a554 <_Bfree>
 8008bbe:	4629      	mov	r1, r5
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f001 fcc7 	bl	800a554 <_Bfree>
 8008bc6:	e61a      	b.n	80087fe <_strtod_l+0x666>
 8008bc8:	f1ba 0f00 	cmp.w	sl, #0
 8008bcc:	d11b      	bne.n	8008c06 <_strtod_l+0xa6e>
 8008bce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bd2:	b9f3      	cbnz	r3, 8008c12 <_strtod_l+0xa7a>
 8008bd4:	4b6c      	ldr	r3, [pc, #432]	; (8008d88 <_strtod_l+0xbf0>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	4640      	mov	r0, r8
 8008bda:	4649      	mov	r1, r9
 8008bdc:	f7f7 ff7e 	bl	8000adc <__aeabi_dcmplt>
 8008be0:	b9d0      	cbnz	r0, 8008c18 <_strtod_l+0xa80>
 8008be2:	4640      	mov	r0, r8
 8008be4:	4649      	mov	r1, r9
 8008be6:	4b6c      	ldr	r3, [pc, #432]	; (8008d98 <_strtod_l+0xc00>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	f7f7 fd05 	bl	80005f8 <__aeabi_dmul>
 8008bee:	4680      	mov	r8, r0
 8008bf0:	4689      	mov	r9, r1
 8008bf2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008bf6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008bfa:	9315      	str	r3, [sp, #84]	; 0x54
 8008bfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c04:	e79d      	b.n	8008b42 <_strtod_l+0x9aa>
 8008c06:	f1ba 0f01 	cmp.w	sl, #1
 8008c0a:	d102      	bne.n	8008c12 <_strtod_l+0xa7a>
 8008c0c:	2f00      	cmp	r7, #0
 8008c0e:	f43f ad83 	beq.w	8008718 <_strtod_l+0x580>
 8008c12:	4b62      	ldr	r3, [pc, #392]	; (8008d9c <_strtod_l+0xc04>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	e78e      	b.n	8008b36 <_strtod_l+0x99e>
 8008c18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008d98 <_strtod_l+0xc00>
 8008c1c:	f04f 0800 	mov.w	r8, #0
 8008c20:	e7e7      	b.n	8008bf2 <_strtod_l+0xa5a>
 8008c22:	4b5d      	ldr	r3, [pc, #372]	; (8008d98 <_strtod_l+0xc00>)
 8008c24:	4640      	mov	r0, r8
 8008c26:	4649      	mov	r1, r9
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f7f7 fce5 	bl	80005f8 <__aeabi_dmul>
 8008c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c30:	4680      	mov	r8, r0
 8008c32:	4689      	mov	r9, r1
 8008c34:	b933      	cbnz	r3, 8008c44 <_strtod_l+0xaac>
 8008c36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c3a:	900e      	str	r0, [sp, #56]	; 0x38
 8008c3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008c42:	e7dd      	b.n	8008c00 <_strtod_l+0xa68>
 8008c44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008c48:	e7f9      	b.n	8008c3e <_strtod_l+0xaa6>
 8008c4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008c4e:	9b04      	ldr	r3, [sp, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1a8      	bne.n	8008ba6 <_strtod_l+0xa0e>
 8008c54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c5a:	0d1b      	lsrs	r3, r3, #20
 8008c5c:	051b      	lsls	r3, r3, #20
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d1a1      	bne.n	8008ba6 <_strtod_l+0xa0e>
 8008c62:	4640      	mov	r0, r8
 8008c64:	4649      	mov	r1, r9
 8008c66:	f7f8 f827 	bl	8000cb8 <__aeabi_d2lz>
 8008c6a:	f7f7 fc97 	bl	800059c <__aeabi_l2d>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4640      	mov	r0, r8
 8008c74:	4649      	mov	r1, r9
 8008c76:	f7f7 fb07 	bl	8000288 <__aeabi_dsub>
 8008c7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c80:	ea43 030a 	orr.w	r3, r3, sl
 8008c84:	4313      	orrs	r3, r2
 8008c86:	4680      	mov	r8, r0
 8008c88:	4689      	mov	r9, r1
 8008c8a:	d055      	beq.n	8008d38 <_strtod_l+0xba0>
 8008c8c:	a336      	add	r3, pc, #216	; (adr r3, 8008d68 <_strtod_l+0xbd0>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	f7f7 ff23 	bl	8000adc <__aeabi_dcmplt>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	f47f acd0 	bne.w	800863c <_strtod_l+0x4a4>
 8008c9c:	a334      	add	r3, pc, #208	; (adr r3, 8008d70 <_strtod_l+0xbd8>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	f7f7 ff37 	bl	8000b18 <__aeabi_dcmpgt>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	f43f af7b 	beq.w	8008ba6 <_strtod_l+0xa0e>
 8008cb0:	e4c4      	b.n	800863c <_strtod_l+0x4a4>
 8008cb2:	9b04      	ldr	r3, [sp, #16]
 8008cb4:	b333      	cbz	r3, 8008d04 <_strtod_l+0xb6c>
 8008cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008cbc:	d822      	bhi.n	8008d04 <_strtod_l+0xb6c>
 8008cbe:	a32e      	add	r3, pc, #184	; (adr r3, 8008d78 <_strtod_l+0xbe0>)
 8008cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	f7f7 ff12 	bl	8000af0 <__aeabi_dcmple>
 8008ccc:	b1a0      	cbz	r0, 8008cf8 <_strtod_l+0xb60>
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	f7f7 ff69 	bl	8000ba8 <__aeabi_d2uiz>
 8008cd6:	2801      	cmp	r0, #1
 8008cd8:	bf38      	it	cc
 8008cda:	2001      	movcc	r0, #1
 8008cdc:	f7f7 fc12 	bl	8000504 <__aeabi_ui2d>
 8008ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	4689      	mov	r9, r1
 8008ce6:	bb23      	cbnz	r3, 8008d32 <_strtod_l+0xb9a>
 8008ce8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cec:	9010      	str	r0, [sp, #64]	; 0x40
 8008cee:	9311      	str	r3, [sp, #68]	; 0x44
 8008cf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cf4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cfc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	9309      	str	r3, [sp, #36]	; 0x24
 8008d04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d08:	eeb0 0a48 	vmov.f32	s0, s16
 8008d0c:	eef0 0a68 	vmov.f32	s1, s17
 8008d10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d14:	f001 ff50 	bl	800abb8 <__ulp>
 8008d18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d1c:	ec53 2b10 	vmov	r2, r3, d0
 8008d20:	f7f7 fc6a 	bl	80005f8 <__aeabi_dmul>
 8008d24:	ec53 2b18 	vmov	r2, r3, d8
 8008d28:	f7f7 fab0 	bl	800028c <__adddf3>
 8008d2c:	4682      	mov	sl, r0
 8008d2e:	468b      	mov	fp, r1
 8008d30:	e78d      	b.n	8008c4e <_strtod_l+0xab6>
 8008d32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008d36:	e7db      	b.n	8008cf0 <_strtod_l+0xb58>
 8008d38:	a311      	add	r3, pc, #68	; (adr r3, 8008d80 <_strtod_l+0xbe8>)
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	f7f7 fecd 	bl	8000adc <__aeabi_dcmplt>
 8008d42:	e7b2      	b.n	8008caa <_strtod_l+0xb12>
 8008d44:	2300      	movs	r3, #0
 8008d46:	930a      	str	r3, [sp, #40]	; 0x28
 8008d48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	f7ff ba6b 	b.w	8008228 <_strtod_l+0x90>
 8008d52:	2a65      	cmp	r2, #101	; 0x65
 8008d54:	f43f ab5f 	beq.w	8008416 <_strtod_l+0x27e>
 8008d58:	2a45      	cmp	r2, #69	; 0x45
 8008d5a:	f43f ab5c 	beq.w	8008416 <_strtod_l+0x27e>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	f7ff bb94 	b.w	800848c <_strtod_l+0x2f4>
 8008d64:	f3af 8000 	nop.w
 8008d68:	94a03595 	.word	0x94a03595
 8008d6c:	3fdfffff 	.word	0x3fdfffff
 8008d70:	35afe535 	.word	0x35afe535
 8008d74:	3fe00000 	.word	0x3fe00000
 8008d78:	ffc00000 	.word	0xffc00000
 8008d7c:	41dfffff 	.word	0x41dfffff
 8008d80:	94a03595 	.word	0x94a03595
 8008d84:	3fcfffff 	.word	0x3fcfffff
 8008d88:	3ff00000 	.word	0x3ff00000
 8008d8c:	7ff00000 	.word	0x7ff00000
 8008d90:	7fe00000 	.word	0x7fe00000
 8008d94:	7c9fffff 	.word	0x7c9fffff
 8008d98:	3fe00000 	.word	0x3fe00000
 8008d9c:	bff00000 	.word	0xbff00000
 8008da0:	7fefffff 	.word	0x7fefffff

08008da4 <_strtod_r>:
 8008da4:	4b01      	ldr	r3, [pc, #4]	; (8008dac <_strtod_r+0x8>)
 8008da6:	f7ff b9f7 	b.w	8008198 <_strtod_l>
 8008daa:	bf00      	nop
 8008dac:	20000074 	.word	0x20000074

08008db0 <_strtol_l.constprop.0>:
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db6:	d001      	beq.n	8008dbc <_strtol_l.constprop.0+0xc>
 8008db8:	2b24      	cmp	r3, #36	; 0x24
 8008dba:	d906      	bls.n	8008dca <_strtol_l.constprop.0+0x1a>
 8008dbc:	f7fe fae4 	bl	8007388 <__errno>
 8008dc0:	2316      	movs	r3, #22
 8008dc2:	6003      	str	r3, [r0, #0]
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008eb0 <_strtol_l.constprop.0+0x100>
 8008dce:	460d      	mov	r5, r1
 8008dd0:	462e      	mov	r6, r5
 8008dd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008dd6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008dda:	f017 0708 	ands.w	r7, r7, #8
 8008dde:	d1f7      	bne.n	8008dd0 <_strtol_l.constprop.0+0x20>
 8008de0:	2c2d      	cmp	r4, #45	; 0x2d
 8008de2:	d132      	bne.n	8008e4a <_strtol_l.constprop.0+0x9a>
 8008de4:	782c      	ldrb	r4, [r5, #0]
 8008de6:	2701      	movs	r7, #1
 8008de8:	1cb5      	adds	r5, r6, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d05b      	beq.n	8008ea6 <_strtol_l.constprop.0+0xf6>
 8008dee:	2b10      	cmp	r3, #16
 8008df0:	d109      	bne.n	8008e06 <_strtol_l.constprop.0+0x56>
 8008df2:	2c30      	cmp	r4, #48	; 0x30
 8008df4:	d107      	bne.n	8008e06 <_strtol_l.constprop.0+0x56>
 8008df6:	782c      	ldrb	r4, [r5, #0]
 8008df8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008dfc:	2c58      	cmp	r4, #88	; 0x58
 8008dfe:	d14d      	bne.n	8008e9c <_strtol_l.constprop.0+0xec>
 8008e00:	786c      	ldrb	r4, [r5, #1]
 8008e02:	2310      	movs	r3, #16
 8008e04:	3502      	adds	r5, #2
 8008e06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008e0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e0e:	f04f 0c00 	mov.w	ip, #0
 8008e12:	fbb8 f9f3 	udiv	r9, r8, r3
 8008e16:	4666      	mov	r6, ip
 8008e18:	fb03 8a19 	mls	sl, r3, r9, r8
 8008e1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008e20:	f1be 0f09 	cmp.w	lr, #9
 8008e24:	d816      	bhi.n	8008e54 <_strtol_l.constprop.0+0xa4>
 8008e26:	4674      	mov	r4, lr
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	dd24      	ble.n	8008e76 <_strtol_l.constprop.0+0xc6>
 8008e2c:	f1bc 0f00 	cmp.w	ip, #0
 8008e30:	db1e      	blt.n	8008e70 <_strtol_l.constprop.0+0xc0>
 8008e32:	45b1      	cmp	r9, r6
 8008e34:	d31c      	bcc.n	8008e70 <_strtol_l.constprop.0+0xc0>
 8008e36:	d101      	bne.n	8008e3c <_strtol_l.constprop.0+0x8c>
 8008e38:	45a2      	cmp	sl, r4
 8008e3a:	db19      	blt.n	8008e70 <_strtol_l.constprop.0+0xc0>
 8008e3c:	fb06 4603 	mla	r6, r6, r3, r4
 8008e40:	f04f 0c01 	mov.w	ip, #1
 8008e44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e48:	e7e8      	b.n	8008e1c <_strtol_l.constprop.0+0x6c>
 8008e4a:	2c2b      	cmp	r4, #43	; 0x2b
 8008e4c:	bf04      	itt	eq
 8008e4e:	782c      	ldrbeq	r4, [r5, #0]
 8008e50:	1cb5      	addeq	r5, r6, #2
 8008e52:	e7ca      	b.n	8008dea <_strtol_l.constprop.0+0x3a>
 8008e54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008e58:	f1be 0f19 	cmp.w	lr, #25
 8008e5c:	d801      	bhi.n	8008e62 <_strtol_l.constprop.0+0xb2>
 8008e5e:	3c37      	subs	r4, #55	; 0x37
 8008e60:	e7e2      	b.n	8008e28 <_strtol_l.constprop.0+0x78>
 8008e62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008e66:	f1be 0f19 	cmp.w	lr, #25
 8008e6a:	d804      	bhi.n	8008e76 <_strtol_l.constprop.0+0xc6>
 8008e6c:	3c57      	subs	r4, #87	; 0x57
 8008e6e:	e7db      	b.n	8008e28 <_strtol_l.constprop.0+0x78>
 8008e70:	f04f 3cff 	mov.w	ip, #4294967295
 8008e74:	e7e6      	b.n	8008e44 <_strtol_l.constprop.0+0x94>
 8008e76:	f1bc 0f00 	cmp.w	ip, #0
 8008e7a:	da05      	bge.n	8008e88 <_strtol_l.constprop.0+0xd8>
 8008e7c:	2322      	movs	r3, #34	; 0x22
 8008e7e:	6003      	str	r3, [r0, #0]
 8008e80:	4646      	mov	r6, r8
 8008e82:	b942      	cbnz	r2, 8008e96 <_strtol_l.constprop.0+0xe6>
 8008e84:	4630      	mov	r0, r6
 8008e86:	e79e      	b.n	8008dc6 <_strtol_l.constprop.0+0x16>
 8008e88:	b107      	cbz	r7, 8008e8c <_strtol_l.constprop.0+0xdc>
 8008e8a:	4276      	negs	r6, r6
 8008e8c:	2a00      	cmp	r2, #0
 8008e8e:	d0f9      	beq.n	8008e84 <_strtol_l.constprop.0+0xd4>
 8008e90:	f1bc 0f00 	cmp.w	ip, #0
 8008e94:	d000      	beq.n	8008e98 <_strtol_l.constprop.0+0xe8>
 8008e96:	1e69      	subs	r1, r5, #1
 8008e98:	6011      	str	r1, [r2, #0]
 8008e9a:	e7f3      	b.n	8008e84 <_strtol_l.constprop.0+0xd4>
 8008e9c:	2430      	movs	r4, #48	; 0x30
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1b1      	bne.n	8008e06 <_strtol_l.constprop.0+0x56>
 8008ea2:	2308      	movs	r3, #8
 8008ea4:	e7af      	b.n	8008e06 <_strtol_l.constprop.0+0x56>
 8008ea6:	2c30      	cmp	r4, #48	; 0x30
 8008ea8:	d0a5      	beq.n	8008df6 <_strtol_l.constprop.0+0x46>
 8008eaa:	230a      	movs	r3, #10
 8008eac:	e7ab      	b.n	8008e06 <_strtol_l.constprop.0+0x56>
 8008eae:	bf00      	nop
 8008eb0:	0800be39 	.word	0x0800be39

08008eb4 <_strtol_r>:
 8008eb4:	f7ff bf7c 	b.w	8008db0 <_strtol_l.constprop.0>

08008eb8 <quorem>:
 8008eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ebc:	6903      	ldr	r3, [r0, #16]
 8008ebe:	690c      	ldr	r4, [r1, #16]
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	4607      	mov	r7, r0
 8008ec4:	f2c0 8081 	blt.w	8008fca <quorem+0x112>
 8008ec8:	3c01      	subs	r4, #1
 8008eca:	f101 0814 	add.w	r8, r1, #20
 8008ece:	f100 0514 	add.w	r5, r0, #20
 8008ed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ed6:	9301      	str	r3, [sp, #4]
 8008ed8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008edc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ee8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008eec:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ef0:	d331      	bcc.n	8008f56 <quorem+0x9e>
 8008ef2:	f04f 0e00 	mov.w	lr, #0
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	46ac      	mov	ip, r5
 8008efa:	46f2      	mov	sl, lr
 8008efc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f00:	b293      	uxth	r3, r2
 8008f02:	fb06 e303 	mla	r3, r6, r3, lr
 8008f06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f10:	f8dc a000 	ldr.w	sl, [ip]
 8008f14:	0c12      	lsrs	r2, r2, #16
 8008f16:	fa13 f38a 	uxtah	r3, r3, sl
 8008f1a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	9b00      	ldr	r3, [sp, #0]
 8008f22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f26:	b292      	uxth	r2, r2
 8008f28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f30:	f8bd 3000 	ldrh.w	r3, [sp]
 8008f34:	4581      	cmp	r9, r0
 8008f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f3a:	f84c 3b04 	str.w	r3, [ip], #4
 8008f3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f42:	d2db      	bcs.n	8008efc <quorem+0x44>
 8008f44:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f48:	b92b      	cbnz	r3, 8008f56 <quorem+0x9e>
 8008f4a:	9b01      	ldr	r3, [sp, #4]
 8008f4c:	3b04      	subs	r3, #4
 8008f4e:	429d      	cmp	r5, r3
 8008f50:	461a      	mov	r2, r3
 8008f52:	d32e      	bcc.n	8008fb2 <quorem+0xfa>
 8008f54:	613c      	str	r4, [r7, #16]
 8008f56:	4638      	mov	r0, r7
 8008f58:	f001 fd88 	bl	800aa6c <__mcmp>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	db24      	blt.n	8008faa <quorem+0xf2>
 8008f60:	3601      	adds	r6, #1
 8008f62:	4628      	mov	r0, r5
 8008f64:	f04f 0c00 	mov.w	ip, #0
 8008f68:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f6c:	f8d0 e000 	ldr.w	lr, [r0]
 8008f70:	b293      	uxth	r3, r2
 8008f72:	ebac 0303 	sub.w	r3, ip, r3
 8008f76:	0c12      	lsrs	r2, r2, #16
 8008f78:	fa13 f38e 	uxtah	r3, r3, lr
 8008f7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f8a:	45c1      	cmp	r9, r8
 8008f8c:	f840 3b04 	str.w	r3, [r0], #4
 8008f90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f94:	d2e8      	bcs.n	8008f68 <quorem+0xb0>
 8008f96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f9e:	b922      	cbnz	r2, 8008faa <quorem+0xf2>
 8008fa0:	3b04      	subs	r3, #4
 8008fa2:	429d      	cmp	r5, r3
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	d30a      	bcc.n	8008fbe <quorem+0x106>
 8008fa8:	613c      	str	r4, [r7, #16]
 8008faa:	4630      	mov	r0, r6
 8008fac:	b003      	add	sp, #12
 8008fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	3b04      	subs	r3, #4
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	d1cc      	bne.n	8008f54 <quorem+0x9c>
 8008fba:	3c01      	subs	r4, #1
 8008fbc:	e7c7      	b.n	8008f4e <quorem+0x96>
 8008fbe:	6812      	ldr	r2, [r2, #0]
 8008fc0:	3b04      	subs	r3, #4
 8008fc2:	2a00      	cmp	r2, #0
 8008fc4:	d1f0      	bne.n	8008fa8 <quorem+0xf0>
 8008fc6:	3c01      	subs	r4, #1
 8008fc8:	e7eb      	b.n	8008fa2 <quorem+0xea>
 8008fca:	2000      	movs	r0, #0
 8008fcc:	e7ee      	b.n	8008fac <quorem+0xf4>
	...

08008fd0 <_dtoa_r>:
 8008fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	ed2d 8b04 	vpush	{d8-d9}
 8008fd8:	ec57 6b10 	vmov	r6, r7, d0
 8008fdc:	b093      	sub	sp, #76	; 0x4c
 8008fde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fe0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008fe4:	9106      	str	r1, [sp, #24]
 8008fe6:	ee10 aa10 	vmov	sl, s0
 8008fea:	4604      	mov	r4, r0
 8008fec:	9209      	str	r2, [sp, #36]	; 0x24
 8008fee:	930c      	str	r3, [sp, #48]	; 0x30
 8008ff0:	46bb      	mov	fp, r7
 8008ff2:	b975      	cbnz	r5, 8009012 <_dtoa_r+0x42>
 8008ff4:	2010      	movs	r0, #16
 8008ff6:	f001 fa45 	bl	800a484 <malloc>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	6260      	str	r0, [r4, #36]	; 0x24
 8008ffe:	b920      	cbnz	r0, 800900a <_dtoa_r+0x3a>
 8009000:	4ba7      	ldr	r3, [pc, #668]	; (80092a0 <_dtoa_r+0x2d0>)
 8009002:	21ea      	movs	r1, #234	; 0xea
 8009004:	48a7      	ldr	r0, [pc, #668]	; (80092a4 <_dtoa_r+0x2d4>)
 8009006:	f002 fc23 	bl	800b850 <__assert_func>
 800900a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800900e:	6005      	str	r5, [r0, #0]
 8009010:	60c5      	str	r5, [r0, #12]
 8009012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009014:	6819      	ldr	r1, [r3, #0]
 8009016:	b151      	cbz	r1, 800902e <_dtoa_r+0x5e>
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	604a      	str	r2, [r1, #4]
 800901c:	2301      	movs	r3, #1
 800901e:	4093      	lsls	r3, r2
 8009020:	608b      	str	r3, [r1, #8]
 8009022:	4620      	mov	r0, r4
 8009024:	f001 fa96 	bl	800a554 <_Bfree>
 8009028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800902a:	2200      	movs	r2, #0
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	1e3b      	subs	r3, r7, #0
 8009030:	bfaa      	itet	ge
 8009032:	2300      	movge	r3, #0
 8009034:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009038:	f8c8 3000 	strge.w	r3, [r8]
 800903c:	4b9a      	ldr	r3, [pc, #616]	; (80092a8 <_dtoa_r+0x2d8>)
 800903e:	bfbc      	itt	lt
 8009040:	2201      	movlt	r2, #1
 8009042:	f8c8 2000 	strlt.w	r2, [r8]
 8009046:	ea33 030b 	bics.w	r3, r3, fp
 800904a:	d11b      	bne.n	8009084 <_dtoa_r+0xb4>
 800904c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800904e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009058:	4333      	orrs	r3, r6
 800905a:	f000 8592 	beq.w	8009b82 <_dtoa_r+0xbb2>
 800905e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009060:	b963      	cbnz	r3, 800907c <_dtoa_r+0xac>
 8009062:	4b92      	ldr	r3, [pc, #584]	; (80092ac <_dtoa_r+0x2dc>)
 8009064:	e022      	b.n	80090ac <_dtoa_r+0xdc>
 8009066:	4b92      	ldr	r3, [pc, #584]	; (80092b0 <_dtoa_r+0x2e0>)
 8009068:	9301      	str	r3, [sp, #4]
 800906a:	3308      	adds	r3, #8
 800906c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	9801      	ldr	r0, [sp, #4]
 8009072:	b013      	add	sp, #76	; 0x4c
 8009074:	ecbd 8b04 	vpop	{d8-d9}
 8009078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907c:	4b8b      	ldr	r3, [pc, #556]	; (80092ac <_dtoa_r+0x2dc>)
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	3303      	adds	r3, #3
 8009082:	e7f3      	b.n	800906c <_dtoa_r+0x9c>
 8009084:	2200      	movs	r2, #0
 8009086:	2300      	movs	r3, #0
 8009088:	4650      	mov	r0, sl
 800908a:	4659      	mov	r1, fp
 800908c:	f7f7 fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009090:	ec4b ab19 	vmov	d9, sl, fp
 8009094:	4680      	mov	r8, r0
 8009096:	b158      	cbz	r0, 80090b0 <_dtoa_r+0xe0>
 8009098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800909a:	2301      	movs	r3, #1
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 856b 	beq.w	8009b7c <_dtoa_r+0xbac>
 80090a6:	4883      	ldr	r0, [pc, #524]	; (80092b4 <_dtoa_r+0x2e4>)
 80090a8:	6018      	str	r0, [r3, #0]
 80090aa:	1e43      	subs	r3, r0, #1
 80090ac:	9301      	str	r3, [sp, #4]
 80090ae:	e7df      	b.n	8009070 <_dtoa_r+0xa0>
 80090b0:	ec4b ab10 	vmov	d0, sl, fp
 80090b4:	aa10      	add	r2, sp, #64	; 0x40
 80090b6:	a911      	add	r1, sp, #68	; 0x44
 80090b8:	4620      	mov	r0, r4
 80090ba:	f001 fdf9 	bl	800acb0 <__d2b>
 80090be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80090c2:	ee08 0a10 	vmov	s16, r0
 80090c6:	2d00      	cmp	r5, #0
 80090c8:	f000 8084 	beq.w	80091d4 <_dtoa_r+0x204>
 80090cc:	ee19 3a90 	vmov	r3, s19
 80090d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80090d8:	4656      	mov	r6, sl
 80090da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80090de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80090e6:	4b74      	ldr	r3, [pc, #464]	; (80092b8 <_dtoa_r+0x2e8>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	4630      	mov	r0, r6
 80090ec:	4639      	mov	r1, r7
 80090ee:	f7f7 f8cb 	bl	8000288 <__aeabi_dsub>
 80090f2:	a365      	add	r3, pc, #404	; (adr r3, 8009288 <_dtoa_r+0x2b8>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 fa7e 	bl	80005f8 <__aeabi_dmul>
 80090fc:	a364      	add	r3, pc, #400	; (adr r3, 8009290 <_dtoa_r+0x2c0>)
 80090fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009102:	f7f7 f8c3 	bl	800028c <__adddf3>
 8009106:	4606      	mov	r6, r0
 8009108:	4628      	mov	r0, r5
 800910a:	460f      	mov	r7, r1
 800910c:	f7f7 fa0a 	bl	8000524 <__aeabi_i2d>
 8009110:	a361      	add	r3, pc, #388	; (adr r3, 8009298 <_dtoa_r+0x2c8>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	f7f7 fa6f 	bl	80005f8 <__aeabi_dmul>
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	4630      	mov	r0, r6
 8009120:	4639      	mov	r1, r7
 8009122:	f7f7 f8b3 	bl	800028c <__adddf3>
 8009126:	4606      	mov	r6, r0
 8009128:	460f      	mov	r7, r1
 800912a:	f7f7 fd15 	bl	8000b58 <__aeabi_d2iz>
 800912e:	2200      	movs	r2, #0
 8009130:	9000      	str	r0, [sp, #0]
 8009132:	2300      	movs	r3, #0
 8009134:	4630      	mov	r0, r6
 8009136:	4639      	mov	r1, r7
 8009138:	f7f7 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800913c:	b150      	cbz	r0, 8009154 <_dtoa_r+0x184>
 800913e:	9800      	ldr	r0, [sp, #0]
 8009140:	f7f7 f9f0 	bl	8000524 <__aeabi_i2d>
 8009144:	4632      	mov	r2, r6
 8009146:	463b      	mov	r3, r7
 8009148:	f7f7 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800914c:	b910      	cbnz	r0, 8009154 <_dtoa_r+0x184>
 800914e:	9b00      	ldr	r3, [sp, #0]
 8009150:	3b01      	subs	r3, #1
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	9b00      	ldr	r3, [sp, #0]
 8009156:	2b16      	cmp	r3, #22
 8009158:	d85a      	bhi.n	8009210 <_dtoa_r+0x240>
 800915a:	9a00      	ldr	r2, [sp, #0]
 800915c:	4b57      	ldr	r3, [pc, #348]	; (80092bc <_dtoa_r+0x2ec>)
 800915e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	ec51 0b19 	vmov	r0, r1, d9
 800916a:	f7f7 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800916e:	2800      	cmp	r0, #0
 8009170:	d050      	beq.n	8009214 <_dtoa_r+0x244>
 8009172:	9b00      	ldr	r3, [sp, #0]
 8009174:	3b01      	subs	r3, #1
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	2300      	movs	r3, #0
 800917a:	930b      	str	r3, [sp, #44]	; 0x2c
 800917c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800917e:	1b5d      	subs	r5, r3, r5
 8009180:	1e6b      	subs	r3, r5, #1
 8009182:	9305      	str	r3, [sp, #20]
 8009184:	bf45      	ittet	mi
 8009186:	f1c5 0301 	rsbmi	r3, r5, #1
 800918a:	9304      	strmi	r3, [sp, #16]
 800918c:	2300      	movpl	r3, #0
 800918e:	2300      	movmi	r3, #0
 8009190:	bf4c      	ite	mi
 8009192:	9305      	strmi	r3, [sp, #20]
 8009194:	9304      	strpl	r3, [sp, #16]
 8009196:	9b00      	ldr	r3, [sp, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	db3d      	blt.n	8009218 <_dtoa_r+0x248>
 800919c:	9b05      	ldr	r3, [sp, #20]
 800919e:	9a00      	ldr	r2, [sp, #0]
 80091a0:	920a      	str	r2, [sp, #40]	; 0x28
 80091a2:	4413      	add	r3, r2
 80091a4:	9305      	str	r3, [sp, #20]
 80091a6:	2300      	movs	r3, #0
 80091a8:	9307      	str	r3, [sp, #28]
 80091aa:	9b06      	ldr	r3, [sp, #24]
 80091ac:	2b09      	cmp	r3, #9
 80091ae:	f200 8089 	bhi.w	80092c4 <_dtoa_r+0x2f4>
 80091b2:	2b05      	cmp	r3, #5
 80091b4:	bfc4      	itt	gt
 80091b6:	3b04      	subgt	r3, #4
 80091b8:	9306      	strgt	r3, [sp, #24]
 80091ba:	9b06      	ldr	r3, [sp, #24]
 80091bc:	f1a3 0302 	sub.w	r3, r3, #2
 80091c0:	bfcc      	ite	gt
 80091c2:	2500      	movgt	r5, #0
 80091c4:	2501      	movle	r5, #1
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	f200 8087 	bhi.w	80092da <_dtoa_r+0x30a>
 80091cc:	e8df f003 	tbb	[pc, r3]
 80091d0:	59383a2d 	.word	0x59383a2d
 80091d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80091d8:	441d      	add	r5, r3
 80091da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091de:	2b20      	cmp	r3, #32
 80091e0:	bfc1      	itttt	gt
 80091e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80091ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80091ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80091f2:	bfda      	itte	le
 80091f4:	f1c3 0320 	rsble	r3, r3, #32
 80091f8:	fa06 f003 	lslle.w	r0, r6, r3
 80091fc:	4318      	orrgt	r0, r3
 80091fe:	f7f7 f981 	bl	8000504 <__aeabi_ui2d>
 8009202:	2301      	movs	r3, #1
 8009204:	4606      	mov	r6, r0
 8009206:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800920a:	3d01      	subs	r5, #1
 800920c:	930e      	str	r3, [sp, #56]	; 0x38
 800920e:	e76a      	b.n	80090e6 <_dtoa_r+0x116>
 8009210:	2301      	movs	r3, #1
 8009212:	e7b2      	b.n	800917a <_dtoa_r+0x1aa>
 8009214:	900b      	str	r0, [sp, #44]	; 0x2c
 8009216:	e7b1      	b.n	800917c <_dtoa_r+0x1ac>
 8009218:	9b04      	ldr	r3, [sp, #16]
 800921a:	9a00      	ldr	r2, [sp, #0]
 800921c:	1a9b      	subs	r3, r3, r2
 800921e:	9304      	str	r3, [sp, #16]
 8009220:	4253      	negs	r3, r2
 8009222:	9307      	str	r3, [sp, #28]
 8009224:	2300      	movs	r3, #0
 8009226:	930a      	str	r3, [sp, #40]	; 0x28
 8009228:	e7bf      	b.n	80091aa <_dtoa_r+0x1da>
 800922a:	2300      	movs	r3, #0
 800922c:	9308      	str	r3, [sp, #32]
 800922e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009230:	2b00      	cmp	r3, #0
 8009232:	dc55      	bgt.n	80092e0 <_dtoa_r+0x310>
 8009234:	2301      	movs	r3, #1
 8009236:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800923a:	461a      	mov	r2, r3
 800923c:	9209      	str	r2, [sp, #36]	; 0x24
 800923e:	e00c      	b.n	800925a <_dtoa_r+0x28a>
 8009240:	2301      	movs	r3, #1
 8009242:	e7f3      	b.n	800922c <_dtoa_r+0x25c>
 8009244:	2300      	movs	r3, #0
 8009246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009248:	9308      	str	r3, [sp, #32]
 800924a:	9b00      	ldr	r3, [sp, #0]
 800924c:	4413      	add	r3, r2
 800924e:	9302      	str	r3, [sp, #8]
 8009250:	3301      	adds	r3, #1
 8009252:	2b01      	cmp	r3, #1
 8009254:	9303      	str	r3, [sp, #12]
 8009256:	bfb8      	it	lt
 8009258:	2301      	movlt	r3, #1
 800925a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800925c:	2200      	movs	r2, #0
 800925e:	6042      	str	r2, [r0, #4]
 8009260:	2204      	movs	r2, #4
 8009262:	f102 0614 	add.w	r6, r2, #20
 8009266:	429e      	cmp	r6, r3
 8009268:	6841      	ldr	r1, [r0, #4]
 800926a:	d93d      	bls.n	80092e8 <_dtoa_r+0x318>
 800926c:	4620      	mov	r0, r4
 800926e:	f001 f931 	bl	800a4d4 <_Balloc>
 8009272:	9001      	str	r0, [sp, #4]
 8009274:	2800      	cmp	r0, #0
 8009276:	d13b      	bne.n	80092f0 <_dtoa_r+0x320>
 8009278:	4b11      	ldr	r3, [pc, #68]	; (80092c0 <_dtoa_r+0x2f0>)
 800927a:	4602      	mov	r2, r0
 800927c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009280:	e6c0      	b.n	8009004 <_dtoa_r+0x34>
 8009282:	2301      	movs	r3, #1
 8009284:	e7df      	b.n	8009246 <_dtoa_r+0x276>
 8009286:	bf00      	nop
 8009288:	636f4361 	.word	0x636f4361
 800928c:	3fd287a7 	.word	0x3fd287a7
 8009290:	8b60c8b3 	.word	0x8b60c8b3
 8009294:	3fc68a28 	.word	0x3fc68a28
 8009298:	509f79fb 	.word	0x509f79fb
 800929c:	3fd34413 	.word	0x3fd34413
 80092a0:	0800bf46 	.word	0x0800bf46
 80092a4:	0800bf5d 	.word	0x0800bf5d
 80092a8:	7ff00000 	.word	0x7ff00000
 80092ac:	0800bf42 	.word	0x0800bf42
 80092b0:	0800bf39 	.word	0x0800bf39
 80092b4:	0800bdbd 	.word	0x0800bdbd
 80092b8:	3ff80000 	.word	0x3ff80000
 80092bc:	0800c130 	.word	0x0800c130
 80092c0:	0800bfb8 	.word	0x0800bfb8
 80092c4:	2501      	movs	r5, #1
 80092c6:	2300      	movs	r3, #0
 80092c8:	9306      	str	r3, [sp, #24]
 80092ca:	9508      	str	r5, [sp, #32]
 80092cc:	f04f 33ff 	mov.w	r3, #4294967295
 80092d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092d4:	2200      	movs	r2, #0
 80092d6:	2312      	movs	r3, #18
 80092d8:	e7b0      	b.n	800923c <_dtoa_r+0x26c>
 80092da:	2301      	movs	r3, #1
 80092dc:	9308      	str	r3, [sp, #32]
 80092de:	e7f5      	b.n	80092cc <_dtoa_r+0x2fc>
 80092e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80092e6:	e7b8      	b.n	800925a <_dtoa_r+0x28a>
 80092e8:	3101      	adds	r1, #1
 80092ea:	6041      	str	r1, [r0, #4]
 80092ec:	0052      	lsls	r2, r2, #1
 80092ee:	e7b8      	b.n	8009262 <_dtoa_r+0x292>
 80092f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f2:	9a01      	ldr	r2, [sp, #4]
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	9b03      	ldr	r3, [sp, #12]
 80092f8:	2b0e      	cmp	r3, #14
 80092fa:	f200 809d 	bhi.w	8009438 <_dtoa_r+0x468>
 80092fe:	2d00      	cmp	r5, #0
 8009300:	f000 809a 	beq.w	8009438 <_dtoa_r+0x468>
 8009304:	9b00      	ldr	r3, [sp, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	dd32      	ble.n	8009370 <_dtoa_r+0x3a0>
 800930a:	4ab7      	ldr	r2, [pc, #732]	; (80095e8 <_dtoa_r+0x618>)
 800930c:	f003 030f 	and.w	r3, r3, #15
 8009310:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009314:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009318:	9b00      	ldr	r3, [sp, #0]
 800931a:	05d8      	lsls	r0, r3, #23
 800931c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009320:	d516      	bpl.n	8009350 <_dtoa_r+0x380>
 8009322:	4bb2      	ldr	r3, [pc, #712]	; (80095ec <_dtoa_r+0x61c>)
 8009324:	ec51 0b19 	vmov	r0, r1, d9
 8009328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800932c:	f7f7 fa8e 	bl	800084c <__aeabi_ddiv>
 8009330:	f007 070f 	and.w	r7, r7, #15
 8009334:	4682      	mov	sl, r0
 8009336:	468b      	mov	fp, r1
 8009338:	2503      	movs	r5, #3
 800933a:	4eac      	ldr	r6, [pc, #688]	; (80095ec <_dtoa_r+0x61c>)
 800933c:	b957      	cbnz	r7, 8009354 <_dtoa_r+0x384>
 800933e:	4642      	mov	r2, r8
 8009340:	464b      	mov	r3, r9
 8009342:	4650      	mov	r0, sl
 8009344:	4659      	mov	r1, fp
 8009346:	f7f7 fa81 	bl	800084c <__aeabi_ddiv>
 800934a:	4682      	mov	sl, r0
 800934c:	468b      	mov	fp, r1
 800934e:	e028      	b.n	80093a2 <_dtoa_r+0x3d2>
 8009350:	2502      	movs	r5, #2
 8009352:	e7f2      	b.n	800933a <_dtoa_r+0x36a>
 8009354:	07f9      	lsls	r1, r7, #31
 8009356:	d508      	bpl.n	800936a <_dtoa_r+0x39a>
 8009358:	4640      	mov	r0, r8
 800935a:	4649      	mov	r1, r9
 800935c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009360:	f7f7 f94a 	bl	80005f8 <__aeabi_dmul>
 8009364:	3501      	adds	r5, #1
 8009366:	4680      	mov	r8, r0
 8009368:	4689      	mov	r9, r1
 800936a:	107f      	asrs	r7, r7, #1
 800936c:	3608      	adds	r6, #8
 800936e:	e7e5      	b.n	800933c <_dtoa_r+0x36c>
 8009370:	f000 809b 	beq.w	80094aa <_dtoa_r+0x4da>
 8009374:	9b00      	ldr	r3, [sp, #0]
 8009376:	4f9d      	ldr	r7, [pc, #628]	; (80095ec <_dtoa_r+0x61c>)
 8009378:	425e      	negs	r6, r3
 800937a:	4b9b      	ldr	r3, [pc, #620]	; (80095e8 <_dtoa_r+0x618>)
 800937c:	f006 020f 	and.w	r2, r6, #15
 8009380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	ec51 0b19 	vmov	r0, r1, d9
 800938c:	f7f7 f934 	bl	80005f8 <__aeabi_dmul>
 8009390:	1136      	asrs	r6, r6, #4
 8009392:	4682      	mov	sl, r0
 8009394:	468b      	mov	fp, r1
 8009396:	2300      	movs	r3, #0
 8009398:	2502      	movs	r5, #2
 800939a:	2e00      	cmp	r6, #0
 800939c:	d17a      	bne.n	8009494 <_dtoa_r+0x4c4>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1d3      	bne.n	800934a <_dtoa_r+0x37a>
 80093a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 8082 	beq.w	80094ae <_dtoa_r+0x4de>
 80093aa:	4b91      	ldr	r3, [pc, #580]	; (80095f0 <_dtoa_r+0x620>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	4650      	mov	r0, sl
 80093b0:	4659      	mov	r1, fp
 80093b2:	f7f7 fb93 	bl	8000adc <__aeabi_dcmplt>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d079      	beq.n	80094ae <_dtoa_r+0x4de>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d076      	beq.n	80094ae <_dtoa_r+0x4de>
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	dd36      	ble.n	8009434 <_dtoa_r+0x464>
 80093c6:	9b00      	ldr	r3, [sp, #0]
 80093c8:	4650      	mov	r0, sl
 80093ca:	4659      	mov	r1, fp
 80093cc:	1e5f      	subs	r7, r3, #1
 80093ce:	2200      	movs	r2, #0
 80093d0:	4b88      	ldr	r3, [pc, #544]	; (80095f4 <_dtoa_r+0x624>)
 80093d2:	f7f7 f911 	bl	80005f8 <__aeabi_dmul>
 80093d6:	9e02      	ldr	r6, [sp, #8]
 80093d8:	4682      	mov	sl, r0
 80093da:	468b      	mov	fp, r1
 80093dc:	3501      	adds	r5, #1
 80093de:	4628      	mov	r0, r5
 80093e0:	f7f7 f8a0 	bl	8000524 <__aeabi_i2d>
 80093e4:	4652      	mov	r2, sl
 80093e6:	465b      	mov	r3, fp
 80093e8:	f7f7 f906 	bl	80005f8 <__aeabi_dmul>
 80093ec:	4b82      	ldr	r3, [pc, #520]	; (80095f8 <_dtoa_r+0x628>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	f7f6 ff4c 	bl	800028c <__adddf3>
 80093f4:	46d0      	mov	r8, sl
 80093f6:	46d9      	mov	r9, fp
 80093f8:	4682      	mov	sl, r0
 80093fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80093fe:	2e00      	cmp	r6, #0
 8009400:	d158      	bne.n	80094b4 <_dtoa_r+0x4e4>
 8009402:	4b7e      	ldr	r3, [pc, #504]	; (80095fc <_dtoa_r+0x62c>)
 8009404:	2200      	movs	r2, #0
 8009406:	4640      	mov	r0, r8
 8009408:	4649      	mov	r1, r9
 800940a:	f7f6 ff3d 	bl	8000288 <__aeabi_dsub>
 800940e:	4652      	mov	r2, sl
 8009410:	465b      	mov	r3, fp
 8009412:	4680      	mov	r8, r0
 8009414:	4689      	mov	r9, r1
 8009416:	f7f7 fb7f 	bl	8000b18 <__aeabi_dcmpgt>
 800941a:	2800      	cmp	r0, #0
 800941c:	f040 8295 	bne.w	800994a <_dtoa_r+0x97a>
 8009420:	4652      	mov	r2, sl
 8009422:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009426:	4640      	mov	r0, r8
 8009428:	4649      	mov	r1, r9
 800942a:	f7f7 fb57 	bl	8000adc <__aeabi_dcmplt>
 800942e:	2800      	cmp	r0, #0
 8009430:	f040 8289 	bne.w	8009946 <_dtoa_r+0x976>
 8009434:	ec5b ab19 	vmov	sl, fp, d9
 8009438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800943a:	2b00      	cmp	r3, #0
 800943c:	f2c0 8148 	blt.w	80096d0 <_dtoa_r+0x700>
 8009440:	9a00      	ldr	r2, [sp, #0]
 8009442:	2a0e      	cmp	r2, #14
 8009444:	f300 8144 	bgt.w	80096d0 <_dtoa_r+0x700>
 8009448:	4b67      	ldr	r3, [pc, #412]	; (80095e8 <_dtoa_r+0x618>)
 800944a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800944e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009454:	2b00      	cmp	r3, #0
 8009456:	f280 80d5 	bge.w	8009604 <_dtoa_r+0x634>
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	2b00      	cmp	r3, #0
 800945e:	f300 80d1 	bgt.w	8009604 <_dtoa_r+0x634>
 8009462:	f040 826f 	bne.w	8009944 <_dtoa_r+0x974>
 8009466:	4b65      	ldr	r3, [pc, #404]	; (80095fc <_dtoa_r+0x62c>)
 8009468:	2200      	movs	r2, #0
 800946a:	4640      	mov	r0, r8
 800946c:	4649      	mov	r1, r9
 800946e:	f7f7 f8c3 	bl	80005f8 <__aeabi_dmul>
 8009472:	4652      	mov	r2, sl
 8009474:	465b      	mov	r3, fp
 8009476:	f7f7 fb45 	bl	8000b04 <__aeabi_dcmpge>
 800947a:	9e03      	ldr	r6, [sp, #12]
 800947c:	4637      	mov	r7, r6
 800947e:	2800      	cmp	r0, #0
 8009480:	f040 8245 	bne.w	800990e <_dtoa_r+0x93e>
 8009484:	9d01      	ldr	r5, [sp, #4]
 8009486:	2331      	movs	r3, #49	; 0x31
 8009488:	f805 3b01 	strb.w	r3, [r5], #1
 800948c:	9b00      	ldr	r3, [sp, #0]
 800948e:	3301      	adds	r3, #1
 8009490:	9300      	str	r3, [sp, #0]
 8009492:	e240      	b.n	8009916 <_dtoa_r+0x946>
 8009494:	07f2      	lsls	r2, r6, #31
 8009496:	d505      	bpl.n	80094a4 <_dtoa_r+0x4d4>
 8009498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800949c:	f7f7 f8ac 	bl	80005f8 <__aeabi_dmul>
 80094a0:	3501      	adds	r5, #1
 80094a2:	2301      	movs	r3, #1
 80094a4:	1076      	asrs	r6, r6, #1
 80094a6:	3708      	adds	r7, #8
 80094a8:	e777      	b.n	800939a <_dtoa_r+0x3ca>
 80094aa:	2502      	movs	r5, #2
 80094ac:	e779      	b.n	80093a2 <_dtoa_r+0x3d2>
 80094ae:	9f00      	ldr	r7, [sp, #0]
 80094b0:	9e03      	ldr	r6, [sp, #12]
 80094b2:	e794      	b.n	80093de <_dtoa_r+0x40e>
 80094b4:	9901      	ldr	r1, [sp, #4]
 80094b6:	4b4c      	ldr	r3, [pc, #304]	; (80095e8 <_dtoa_r+0x618>)
 80094b8:	4431      	add	r1, r6
 80094ba:	910d      	str	r1, [sp, #52]	; 0x34
 80094bc:	9908      	ldr	r1, [sp, #32]
 80094be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80094c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094c6:	2900      	cmp	r1, #0
 80094c8:	d043      	beq.n	8009552 <_dtoa_r+0x582>
 80094ca:	494d      	ldr	r1, [pc, #308]	; (8009600 <_dtoa_r+0x630>)
 80094cc:	2000      	movs	r0, #0
 80094ce:	f7f7 f9bd 	bl	800084c <__aeabi_ddiv>
 80094d2:	4652      	mov	r2, sl
 80094d4:	465b      	mov	r3, fp
 80094d6:	f7f6 fed7 	bl	8000288 <__aeabi_dsub>
 80094da:	9d01      	ldr	r5, [sp, #4]
 80094dc:	4682      	mov	sl, r0
 80094de:	468b      	mov	fp, r1
 80094e0:	4649      	mov	r1, r9
 80094e2:	4640      	mov	r0, r8
 80094e4:	f7f7 fb38 	bl	8000b58 <__aeabi_d2iz>
 80094e8:	4606      	mov	r6, r0
 80094ea:	f7f7 f81b 	bl	8000524 <__aeabi_i2d>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	4640      	mov	r0, r8
 80094f4:	4649      	mov	r1, r9
 80094f6:	f7f6 fec7 	bl	8000288 <__aeabi_dsub>
 80094fa:	3630      	adds	r6, #48	; 0x30
 80094fc:	f805 6b01 	strb.w	r6, [r5], #1
 8009500:	4652      	mov	r2, sl
 8009502:	465b      	mov	r3, fp
 8009504:	4680      	mov	r8, r0
 8009506:	4689      	mov	r9, r1
 8009508:	f7f7 fae8 	bl	8000adc <__aeabi_dcmplt>
 800950c:	2800      	cmp	r0, #0
 800950e:	d163      	bne.n	80095d8 <_dtoa_r+0x608>
 8009510:	4642      	mov	r2, r8
 8009512:	464b      	mov	r3, r9
 8009514:	4936      	ldr	r1, [pc, #216]	; (80095f0 <_dtoa_r+0x620>)
 8009516:	2000      	movs	r0, #0
 8009518:	f7f6 feb6 	bl	8000288 <__aeabi_dsub>
 800951c:	4652      	mov	r2, sl
 800951e:	465b      	mov	r3, fp
 8009520:	f7f7 fadc 	bl	8000adc <__aeabi_dcmplt>
 8009524:	2800      	cmp	r0, #0
 8009526:	f040 80b5 	bne.w	8009694 <_dtoa_r+0x6c4>
 800952a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800952c:	429d      	cmp	r5, r3
 800952e:	d081      	beq.n	8009434 <_dtoa_r+0x464>
 8009530:	4b30      	ldr	r3, [pc, #192]	; (80095f4 <_dtoa_r+0x624>)
 8009532:	2200      	movs	r2, #0
 8009534:	4650      	mov	r0, sl
 8009536:	4659      	mov	r1, fp
 8009538:	f7f7 f85e 	bl	80005f8 <__aeabi_dmul>
 800953c:	4b2d      	ldr	r3, [pc, #180]	; (80095f4 <_dtoa_r+0x624>)
 800953e:	4682      	mov	sl, r0
 8009540:	468b      	mov	fp, r1
 8009542:	4640      	mov	r0, r8
 8009544:	4649      	mov	r1, r9
 8009546:	2200      	movs	r2, #0
 8009548:	f7f7 f856 	bl	80005f8 <__aeabi_dmul>
 800954c:	4680      	mov	r8, r0
 800954e:	4689      	mov	r9, r1
 8009550:	e7c6      	b.n	80094e0 <_dtoa_r+0x510>
 8009552:	4650      	mov	r0, sl
 8009554:	4659      	mov	r1, fp
 8009556:	f7f7 f84f 	bl	80005f8 <__aeabi_dmul>
 800955a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800955c:	9d01      	ldr	r5, [sp, #4]
 800955e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009560:	4682      	mov	sl, r0
 8009562:	468b      	mov	fp, r1
 8009564:	4649      	mov	r1, r9
 8009566:	4640      	mov	r0, r8
 8009568:	f7f7 faf6 	bl	8000b58 <__aeabi_d2iz>
 800956c:	4606      	mov	r6, r0
 800956e:	f7f6 ffd9 	bl	8000524 <__aeabi_i2d>
 8009572:	3630      	adds	r6, #48	; 0x30
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4640      	mov	r0, r8
 800957a:	4649      	mov	r1, r9
 800957c:	f7f6 fe84 	bl	8000288 <__aeabi_dsub>
 8009580:	f805 6b01 	strb.w	r6, [r5], #1
 8009584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009586:	429d      	cmp	r5, r3
 8009588:	4680      	mov	r8, r0
 800958a:	4689      	mov	r9, r1
 800958c:	f04f 0200 	mov.w	r2, #0
 8009590:	d124      	bne.n	80095dc <_dtoa_r+0x60c>
 8009592:	4b1b      	ldr	r3, [pc, #108]	; (8009600 <_dtoa_r+0x630>)
 8009594:	4650      	mov	r0, sl
 8009596:	4659      	mov	r1, fp
 8009598:	f7f6 fe78 	bl	800028c <__adddf3>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4640      	mov	r0, r8
 80095a2:	4649      	mov	r1, r9
 80095a4:	f7f7 fab8 	bl	8000b18 <__aeabi_dcmpgt>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d173      	bne.n	8009694 <_dtoa_r+0x6c4>
 80095ac:	4652      	mov	r2, sl
 80095ae:	465b      	mov	r3, fp
 80095b0:	4913      	ldr	r1, [pc, #76]	; (8009600 <_dtoa_r+0x630>)
 80095b2:	2000      	movs	r0, #0
 80095b4:	f7f6 fe68 	bl	8000288 <__aeabi_dsub>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4640      	mov	r0, r8
 80095be:	4649      	mov	r1, r9
 80095c0:	f7f7 fa8c 	bl	8000adc <__aeabi_dcmplt>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	f43f af35 	beq.w	8009434 <_dtoa_r+0x464>
 80095ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80095cc:	1e6b      	subs	r3, r5, #1
 80095ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80095d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095d4:	2b30      	cmp	r3, #48	; 0x30
 80095d6:	d0f8      	beq.n	80095ca <_dtoa_r+0x5fa>
 80095d8:	9700      	str	r7, [sp, #0]
 80095da:	e049      	b.n	8009670 <_dtoa_r+0x6a0>
 80095dc:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <_dtoa_r+0x624>)
 80095de:	f7f7 f80b 	bl	80005f8 <__aeabi_dmul>
 80095e2:	4680      	mov	r8, r0
 80095e4:	4689      	mov	r9, r1
 80095e6:	e7bd      	b.n	8009564 <_dtoa_r+0x594>
 80095e8:	0800c130 	.word	0x0800c130
 80095ec:	0800c108 	.word	0x0800c108
 80095f0:	3ff00000 	.word	0x3ff00000
 80095f4:	40240000 	.word	0x40240000
 80095f8:	401c0000 	.word	0x401c0000
 80095fc:	40140000 	.word	0x40140000
 8009600:	3fe00000 	.word	0x3fe00000
 8009604:	9d01      	ldr	r5, [sp, #4]
 8009606:	4656      	mov	r6, sl
 8009608:	465f      	mov	r7, fp
 800960a:	4642      	mov	r2, r8
 800960c:	464b      	mov	r3, r9
 800960e:	4630      	mov	r0, r6
 8009610:	4639      	mov	r1, r7
 8009612:	f7f7 f91b 	bl	800084c <__aeabi_ddiv>
 8009616:	f7f7 fa9f 	bl	8000b58 <__aeabi_d2iz>
 800961a:	4682      	mov	sl, r0
 800961c:	f7f6 ff82 	bl	8000524 <__aeabi_i2d>
 8009620:	4642      	mov	r2, r8
 8009622:	464b      	mov	r3, r9
 8009624:	f7f6 ffe8 	bl	80005f8 <__aeabi_dmul>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4630      	mov	r0, r6
 800962e:	4639      	mov	r1, r7
 8009630:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009634:	f7f6 fe28 	bl	8000288 <__aeabi_dsub>
 8009638:	f805 6b01 	strb.w	r6, [r5], #1
 800963c:	9e01      	ldr	r6, [sp, #4]
 800963e:	9f03      	ldr	r7, [sp, #12]
 8009640:	1bae      	subs	r6, r5, r6
 8009642:	42b7      	cmp	r7, r6
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	d135      	bne.n	80096b6 <_dtoa_r+0x6e6>
 800964a:	f7f6 fe1f 	bl	800028c <__adddf3>
 800964e:	4642      	mov	r2, r8
 8009650:	464b      	mov	r3, r9
 8009652:	4606      	mov	r6, r0
 8009654:	460f      	mov	r7, r1
 8009656:	f7f7 fa5f 	bl	8000b18 <__aeabi_dcmpgt>
 800965a:	b9d0      	cbnz	r0, 8009692 <_dtoa_r+0x6c2>
 800965c:	4642      	mov	r2, r8
 800965e:	464b      	mov	r3, r9
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	f7f7 fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 8009668:	b110      	cbz	r0, 8009670 <_dtoa_r+0x6a0>
 800966a:	f01a 0f01 	tst.w	sl, #1
 800966e:	d110      	bne.n	8009692 <_dtoa_r+0x6c2>
 8009670:	4620      	mov	r0, r4
 8009672:	ee18 1a10 	vmov	r1, s16
 8009676:	f000 ff6d 	bl	800a554 <_Bfree>
 800967a:	2300      	movs	r3, #0
 800967c:	9800      	ldr	r0, [sp, #0]
 800967e:	702b      	strb	r3, [r5, #0]
 8009680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009682:	3001      	adds	r0, #1
 8009684:	6018      	str	r0, [r3, #0]
 8009686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009688:	2b00      	cmp	r3, #0
 800968a:	f43f acf1 	beq.w	8009070 <_dtoa_r+0xa0>
 800968e:	601d      	str	r5, [r3, #0]
 8009690:	e4ee      	b.n	8009070 <_dtoa_r+0xa0>
 8009692:	9f00      	ldr	r7, [sp, #0]
 8009694:	462b      	mov	r3, r5
 8009696:	461d      	mov	r5, r3
 8009698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800969c:	2a39      	cmp	r2, #57	; 0x39
 800969e:	d106      	bne.n	80096ae <_dtoa_r+0x6de>
 80096a0:	9a01      	ldr	r2, [sp, #4]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d1f7      	bne.n	8009696 <_dtoa_r+0x6c6>
 80096a6:	9901      	ldr	r1, [sp, #4]
 80096a8:	2230      	movs	r2, #48	; 0x30
 80096aa:	3701      	adds	r7, #1
 80096ac:	700a      	strb	r2, [r1, #0]
 80096ae:	781a      	ldrb	r2, [r3, #0]
 80096b0:	3201      	adds	r2, #1
 80096b2:	701a      	strb	r2, [r3, #0]
 80096b4:	e790      	b.n	80095d8 <_dtoa_r+0x608>
 80096b6:	4ba6      	ldr	r3, [pc, #664]	; (8009950 <_dtoa_r+0x980>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	f7f6 ff9d 	bl	80005f8 <__aeabi_dmul>
 80096be:	2200      	movs	r2, #0
 80096c0:	2300      	movs	r3, #0
 80096c2:	4606      	mov	r6, r0
 80096c4:	460f      	mov	r7, r1
 80096c6:	f7f7 f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d09d      	beq.n	800960a <_dtoa_r+0x63a>
 80096ce:	e7cf      	b.n	8009670 <_dtoa_r+0x6a0>
 80096d0:	9a08      	ldr	r2, [sp, #32]
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	f000 80d7 	beq.w	8009886 <_dtoa_r+0x8b6>
 80096d8:	9a06      	ldr	r2, [sp, #24]
 80096da:	2a01      	cmp	r2, #1
 80096dc:	f300 80ba 	bgt.w	8009854 <_dtoa_r+0x884>
 80096e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	f000 80b2 	beq.w	800984c <_dtoa_r+0x87c>
 80096e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096ec:	9e07      	ldr	r6, [sp, #28]
 80096ee:	9d04      	ldr	r5, [sp, #16]
 80096f0:	9a04      	ldr	r2, [sp, #16]
 80096f2:	441a      	add	r2, r3
 80096f4:	9204      	str	r2, [sp, #16]
 80096f6:	9a05      	ldr	r2, [sp, #20]
 80096f8:	2101      	movs	r1, #1
 80096fa:	441a      	add	r2, r3
 80096fc:	4620      	mov	r0, r4
 80096fe:	9205      	str	r2, [sp, #20]
 8009700:	f001 f82a 	bl	800a758 <__i2b>
 8009704:	4607      	mov	r7, r0
 8009706:	2d00      	cmp	r5, #0
 8009708:	dd0c      	ble.n	8009724 <_dtoa_r+0x754>
 800970a:	9b05      	ldr	r3, [sp, #20]
 800970c:	2b00      	cmp	r3, #0
 800970e:	dd09      	ble.n	8009724 <_dtoa_r+0x754>
 8009710:	42ab      	cmp	r3, r5
 8009712:	9a04      	ldr	r2, [sp, #16]
 8009714:	bfa8      	it	ge
 8009716:	462b      	movge	r3, r5
 8009718:	1ad2      	subs	r2, r2, r3
 800971a:	9204      	str	r2, [sp, #16]
 800971c:	9a05      	ldr	r2, [sp, #20]
 800971e:	1aed      	subs	r5, r5, r3
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	9305      	str	r3, [sp, #20]
 8009724:	9b07      	ldr	r3, [sp, #28]
 8009726:	b31b      	cbz	r3, 8009770 <_dtoa_r+0x7a0>
 8009728:	9b08      	ldr	r3, [sp, #32]
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 80af 	beq.w	800988e <_dtoa_r+0x8be>
 8009730:	2e00      	cmp	r6, #0
 8009732:	dd13      	ble.n	800975c <_dtoa_r+0x78c>
 8009734:	4639      	mov	r1, r7
 8009736:	4632      	mov	r2, r6
 8009738:	4620      	mov	r0, r4
 800973a:	f001 f8cd 	bl	800a8d8 <__pow5mult>
 800973e:	ee18 2a10 	vmov	r2, s16
 8009742:	4601      	mov	r1, r0
 8009744:	4607      	mov	r7, r0
 8009746:	4620      	mov	r0, r4
 8009748:	f001 f81c 	bl	800a784 <__multiply>
 800974c:	ee18 1a10 	vmov	r1, s16
 8009750:	4680      	mov	r8, r0
 8009752:	4620      	mov	r0, r4
 8009754:	f000 fefe 	bl	800a554 <_Bfree>
 8009758:	ee08 8a10 	vmov	s16, r8
 800975c:	9b07      	ldr	r3, [sp, #28]
 800975e:	1b9a      	subs	r2, r3, r6
 8009760:	d006      	beq.n	8009770 <_dtoa_r+0x7a0>
 8009762:	ee18 1a10 	vmov	r1, s16
 8009766:	4620      	mov	r0, r4
 8009768:	f001 f8b6 	bl	800a8d8 <__pow5mult>
 800976c:	ee08 0a10 	vmov	s16, r0
 8009770:	2101      	movs	r1, #1
 8009772:	4620      	mov	r0, r4
 8009774:	f000 fff0 	bl	800a758 <__i2b>
 8009778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800977a:	2b00      	cmp	r3, #0
 800977c:	4606      	mov	r6, r0
 800977e:	f340 8088 	ble.w	8009892 <_dtoa_r+0x8c2>
 8009782:	461a      	mov	r2, r3
 8009784:	4601      	mov	r1, r0
 8009786:	4620      	mov	r0, r4
 8009788:	f001 f8a6 	bl	800a8d8 <__pow5mult>
 800978c:	9b06      	ldr	r3, [sp, #24]
 800978e:	2b01      	cmp	r3, #1
 8009790:	4606      	mov	r6, r0
 8009792:	f340 8081 	ble.w	8009898 <_dtoa_r+0x8c8>
 8009796:	f04f 0800 	mov.w	r8, #0
 800979a:	6933      	ldr	r3, [r6, #16]
 800979c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097a0:	6918      	ldr	r0, [r3, #16]
 80097a2:	f000 ff89 	bl	800a6b8 <__hi0bits>
 80097a6:	f1c0 0020 	rsb	r0, r0, #32
 80097aa:	9b05      	ldr	r3, [sp, #20]
 80097ac:	4418      	add	r0, r3
 80097ae:	f010 001f 	ands.w	r0, r0, #31
 80097b2:	f000 8092 	beq.w	80098da <_dtoa_r+0x90a>
 80097b6:	f1c0 0320 	rsb	r3, r0, #32
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	f340 808a 	ble.w	80098d4 <_dtoa_r+0x904>
 80097c0:	f1c0 001c 	rsb	r0, r0, #28
 80097c4:	9b04      	ldr	r3, [sp, #16]
 80097c6:	4403      	add	r3, r0
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	9b05      	ldr	r3, [sp, #20]
 80097cc:	4403      	add	r3, r0
 80097ce:	4405      	add	r5, r0
 80097d0:	9305      	str	r3, [sp, #20]
 80097d2:	9b04      	ldr	r3, [sp, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dd07      	ble.n	80097e8 <_dtoa_r+0x818>
 80097d8:	ee18 1a10 	vmov	r1, s16
 80097dc:	461a      	mov	r2, r3
 80097de:	4620      	mov	r0, r4
 80097e0:	f001 f8d4 	bl	800a98c <__lshift>
 80097e4:	ee08 0a10 	vmov	s16, r0
 80097e8:	9b05      	ldr	r3, [sp, #20]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	dd05      	ble.n	80097fa <_dtoa_r+0x82a>
 80097ee:	4631      	mov	r1, r6
 80097f0:	461a      	mov	r2, r3
 80097f2:	4620      	mov	r0, r4
 80097f4:	f001 f8ca 	bl	800a98c <__lshift>
 80097f8:	4606      	mov	r6, r0
 80097fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d06e      	beq.n	80098de <_dtoa_r+0x90e>
 8009800:	ee18 0a10 	vmov	r0, s16
 8009804:	4631      	mov	r1, r6
 8009806:	f001 f931 	bl	800aa6c <__mcmp>
 800980a:	2800      	cmp	r0, #0
 800980c:	da67      	bge.n	80098de <_dtoa_r+0x90e>
 800980e:	9b00      	ldr	r3, [sp, #0]
 8009810:	3b01      	subs	r3, #1
 8009812:	ee18 1a10 	vmov	r1, s16
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	220a      	movs	r2, #10
 800981a:	2300      	movs	r3, #0
 800981c:	4620      	mov	r0, r4
 800981e:	f000 febb 	bl	800a598 <__multadd>
 8009822:	9b08      	ldr	r3, [sp, #32]
 8009824:	ee08 0a10 	vmov	s16, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 81b1 	beq.w	8009b90 <_dtoa_r+0xbc0>
 800982e:	2300      	movs	r3, #0
 8009830:	4639      	mov	r1, r7
 8009832:	220a      	movs	r2, #10
 8009834:	4620      	mov	r0, r4
 8009836:	f000 feaf 	bl	800a598 <__multadd>
 800983a:	9b02      	ldr	r3, [sp, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	4607      	mov	r7, r0
 8009840:	f300 808e 	bgt.w	8009960 <_dtoa_r+0x990>
 8009844:	9b06      	ldr	r3, [sp, #24]
 8009846:	2b02      	cmp	r3, #2
 8009848:	dc51      	bgt.n	80098ee <_dtoa_r+0x91e>
 800984a:	e089      	b.n	8009960 <_dtoa_r+0x990>
 800984c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800984e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009852:	e74b      	b.n	80096ec <_dtoa_r+0x71c>
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	1e5e      	subs	r6, r3, #1
 8009858:	9b07      	ldr	r3, [sp, #28]
 800985a:	42b3      	cmp	r3, r6
 800985c:	bfbf      	itttt	lt
 800985e:	9b07      	ldrlt	r3, [sp, #28]
 8009860:	9607      	strlt	r6, [sp, #28]
 8009862:	1af2      	sublt	r2, r6, r3
 8009864:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009866:	bfb6      	itet	lt
 8009868:	189b      	addlt	r3, r3, r2
 800986a:	1b9e      	subge	r6, r3, r6
 800986c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800986e:	9b03      	ldr	r3, [sp, #12]
 8009870:	bfb8      	it	lt
 8009872:	2600      	movlt	r6, #0
 8009874:	2b00      	cmp	r3, #0
 8009876:	bfb7      	itett	lt
 8009878:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800987c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009880:	1a9d      	sublt	r5, r3, r2
 8009882:	2300      	movlt	r3, #0
 8009884:	e734      	b.n	80096f0 <_dtoa_r+0x720>
 8009886:	9e07      	ldr	r6, [sp, #28]
 8009888:	9d04      	ldr	r5, [sp, #16]
 800988a:	9f08      	ldr	r7, [sp, #32]
 800988c:	e73b      	b.n	8009706 <_dtoa_r+0x736>
 800988e:	9a07      	ldr	r2, [sp, #28]
 8009890:	e767      	b.n	8009762 <_dtoa_r+0x792>
 8009892:	9b06      	ldr	r3, [sp, #24]
 8009894:	2b01      	cmp	r3, #1
 8009896:	dc18      	bgt.n	80098ca <_dtoa_r+0x8fa>
 8009898:	f1ba 0f00 	cmp.w	sl, #0
 800989c:	d115      	bne.n	80098ca <_dtoa_r+0x8fa>
 800989e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098a2:	b993      	cbnz	r3, 80098ca <_dtoa_r+0x8fa>
 80098a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098a8:	0d1b      	lsrs	r3, r3, #20
 80098aa:	051b      	lsls	r3, r3, #20
 80098ac:	b183      	cbz	r3, 80098d0 <_dtoa_r+0x900>
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	3301      	adds	r3, #1
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	9b05      	ldr	r3, [sp, #20]
 80098b6:	3301      	adds	r3, #1
 80098b8:	9305      	str	r3, [sp, #20]
 80098ba:	f04f 0801 	mov.w	r8, #1
 80098be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f47f af6a 	bne.w	800979a <_dtoa_r+0x7ca>
 80098c6:	2001      	movs	r0, #1
 80098c8:	e76f      	b.n	80097aa <_dtoa_r+0x7da>
 80098ca:	f04f 0800 	mov.w	r8, #0
 80098ce:	e7f6      	b.n	80098be <_dtoa_r+0x8ee>
 80098d0:	4698      	mov	r8, r3
 80098d2:	e7f4      	b.n	80098be <_dtoa_r+0x8ee>
 80098d4:	f43f af7d 	beq.w	80097d2 <_dtoa_r+0x802>
 80098d8:	4618      	mov	r0, r3
 80098da:	301c      	adds	r0, #28
 80098dc:	e772      	b.n	80097c4 <_dtoa_r+0x7f4>
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	dc37      	bgt.n	8009954 <_dtoa_r+0x984>
 80098e4:	9b06      	ldr	r3, [sp, #24]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	dd34      	ble.n	8009954 <_dtoa_r+0x984>
 80098ea:	9b03      	ldr	r3, [sp, #12]
 80098ec:	9302      	str	r3, [sp, #8]
 80098ee:	9b02      	ldr	r3, [sp, #8]
 80098f0:	b96b      	cbnz	r3, 800990e <_dtoa_r+0x93e>
 80098f2:	4631      	mov	r1, r6
 80098f4:	2205      	movs	r2, #5
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 fe4e 	bl	800a598 <__multadd>
 80098fc:	4601      	mov	r1, r0
 80098fe:	4606      	mov	r6, r0
 8009900:	ee18 0a10 	vmov	r0, s16
 8009904:	f001 f8b2 	bl	800aa6c <__mcmp>
 8009908:	2800      	cmp	r0, #0
 800990a:	f73f adbb 	bgt.w	8009484 <_dtoa_r+0x4b4>
 800990e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009910:	9d01      	ldr	r5, [sp, #4]
 8009912:	43db      	mvns	r3, r3
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	f04f 0800 	mov.w	r8, #0
 800991a:	4631      	mov	r1, r6
 800991c:	4620      	mov	r0, r4
 800991e:	f000 fe19 	bl	800a554 <_Bfree>
 8009922:	2f00      	cmp	r7, #0
 8009924:	f43f aea4 	beq.w	8009670 <_dtoa_r+0x6a0>
 8009928:	f1b8 0f00 	cmp.w	r8, #0
 800992c:	d005      	beq.n	800993a <_dtoa_r+0x96a>
 800992e:	45b8      	cmp	r8, r7
 8009930:	d003      	beq.n	800993a <_dtoa_r+0x96a>
 8009932:	4641      	mov	r1, r8
 8009934:	4620      	mov	r0, r4
 8009936:	f000 fe0d 	bl	800a554 <_Bfree>
 800993a:	4639      	mov	r1, r7
 800993c:	4620      	mov	r0, r4
 800993e:	f000 fe09 	bl	800a554 <_Bfree>
 8009942:	e695      	b.n	8009670 <_dtoa_r+0x6a0>
 8009944:	2600      	movs	r6, #0
 8009946:	4637      	mov	r7, r6
 8009948:	e7e1      	b.n	800990e <_dtoa_r+0x93e>
 800994a:	9700      	str	r7, [sp, #0]
 800994c:	4637      	mov	r7, r6
 800994e:	e599      	b.n	8009484 <_dtoa_r+0x4b4>
 8009950:	40240000 	.word	0x40240000
 8009954:	9b08      	ldr	r3, [sp, #32]
 8009956:	2b00      	cmp	r3, #0
 8009958:	f000 80ca 	beq.w	8009af0 <_dtoa_r+0xb20>
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	9302      	str	r3, [sp, #8]
 8009960:	2d00      	cmp	r5, #0
 8009962:	dd05      	ble.n	8009970 <_dtoa_r+0x9a0>
 8009964:	4639      	mov	r1, r7
 8009966:	462a      	mov	r2, r5
 8009968:	4620      	mov	r0, r4
 800996a:	f001 f80f 	bl	800a98c <__lshift>
 800996e:	4607      	mov	r7, r0
 8009970:	f1b8 0f00 	cmp.w	r8, #0
 8009974:	d05b      	beq.n	8009a2e <_dtoa_r+0xa5e>
 8009976:	6879      	ldr	r1, [r7, #4]
 8009978:	4620      	mov	r0, r4
 800997a:	f000 fdab 	bl	800a4d4 <_Balloc>
 800997e:	4605      	mov	r5, r0
 8009980:	b928      	cbnz	r0, 800998e <_dtoa_r+0x9be>
 8009982:	4b87      	ldr	r3, [pc, #540]	; (8009ba0 <_dtoa_r+0xbd0>)
 8009984:	4602      	mov	r2, r0
 8009986:	f240 21ea 	movw	r1, #746	; 0x2ea
 800998a:	f7ff bb3b 	b.w	8009004 <_dtoa_r+0x34>
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	3202      	adds	r2, #2
 8009992:	0092      	lsls	r2, r2, #2
 8009994:	f107 010c 	add.w	r1, r7, #12
 8009998:	300c      	adds	r0, #12
 800999a:	f000 fd8d 	bl	800a4b8 <memcpy>
 800999e:	2201      	movs	r2, #1
 80099a0:	4629      	mov	r1, r5
 80099a2:	4620      	mov	r0, r4
 80099a4:	f000 fff2 	bl	800a98c <__lshift>
 80099a8:	9b01      	ldr	r3, [sp, #4]
 80099aa:	f103 0901 	add.w	r9, r3, #1
 80099ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80099b2:	4413      	add	r3, r2
 80099b4:	9305      	str	r3, [sp, #20]
 80099b6:	f00a 0301 	and.w	r3, sl, #1
 80099ba:	46b8      	mov	r8, r7
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	4607      	mov	r7, r0
 80099c0:	4631      	mov	r1, r6
 80099c2:	ee18 0a10 	vmov	r0, s16
 80099c6:	f7ff fa77 	bl	8008eb8 <quorem>
 80099ca:	4641      	mov	r1, r8
 80099cc:	9002      	str	r0, [sp, #8]
 80099ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80099d2:	ee18 0a10 	vmov	r0, s16
 80099d6:	f001 f849 	bl	800aa6c <__mcmp>
 80099da:	463a      	mov	r2, r7
 80099dc:	9003      	str	r0, [sp, #12]
 80099de:	4631      	mov	r1, r6
 80099e0:	4620      	mov	r0, r4
 80099e2:	f001 f85f 	bl	800aaa4 <__mdiff>
 80099e6:	68c2      	ldr	r2, [r0, #12]
 80099e8:	f109 3bff 	add.w	fp, r9, #4294967295
 80099ec:	4605      	mov	r5, r0
 80099ee:	bb02      	cbnz	r2, 8009a32 <_dtoa_r+0xa62>
 80099f0:	4601      	mov	r1, r0
 80099f2:	ee18 0a10 	vmov	r0, s16
 80099f6:	f001 f839 	bl	800aa6c <__mcmp>
 80099fa:	4602      	mov	r2, r0
 80099fc:	4629      	mov	r1, r5
 80099fe:	4620      	mov	r0, r4
 8009a00:	9207      	str	r2, [sp, #28]
 8009a02:	f000 fda7 	bl	800a554 <_Bfree>
 8009a06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009a0a:	ea43 0102 	orr.w	r1, r3, r2
 8009a0e:	9b04      	ldr	r3, [sp, #16]
 8009a10:	430b      	orrs	r3, r1
 8009a12:	464d      	mov	r5, r9
 8009a14:	d10f      	bne.n	8009a36 <_dtoa_r+0xa66>
 8009a16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a1a:	d02a      	beq.n	8009a72 <_dtoa_r+0xaa2>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	dd02      	ble.n	8009a28 <_dtoa_r+0xa58>
 8009a22:	9b02      	ldr	r3, [sp, #8]
 8009a24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009a28:	f88b a000 	strb.w	sl, [fp]
 8009a2c:	e775      	b.n	800991a <_dtoa_r+0x94a>
 8009a2e:	4638      	mov	r0, r7
 8009a30:	e7ba      	b.n	80099a8 <_dtoa_r+0x9d8>
 8009a32:	2201      	movs	r2, #1
 8009a34:	e7e2      	b.n	80099fc <_dtoa_r+0xa2c>
 8009a36:	9b03      	ldr	r3, [sp, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	db04      	blt.n	8009a46 <_dtoa_r+0xa76>
 8009a3c:	9906      	ldr	r1, [sp, #24]
 8009a3e:	430b      	orrs	r3, r1
 8009a40:	9904      	ldr	r1, [sp, #16]
 8009a42:	430b      	orrs	r3, r1
 8009a44:	d122      	bne.n	8009a8c <_dtoa_r+0xabc>
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	ddee      	ble.n	8009a28 <_dtoa_r+0xa58>
 8009a4a:	ee18 1a10 	vmov	r1, s16
 8009a4e:	2201      	movs	r2, #1
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 ff9b 	bl	800a98c <__lshift>
 8009a56:	4631      	mov	r1, r6
 8009a58:	ee08 0a10 	vmov	s16, r0
 8009a5c:	f001 f806 	bl	800aa6c <__mcmp>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	dc03      	bgt.n	8009a6c <_dtoa_r+0xa9c>
 8009a64:	d1e0      	bne.n	8009a28 <_dtoa_r+0xa58>
 8009a66:	f01a 0f01 	tst.w	sl, #1
 8009a6a:	d0dd      	beq.n	8009a28 <_dtoa_r+0xa58>
 8009a6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a70:	d1d7      	bne.n	8009a22 <_dtoa_r+0xa52>
 8009a72:	2339      	movs	r3, #57	; 0x39
 8009a74:	f88b 3000 	strb.w	r3, [fp]
 8009a78:	462b      	mov	r3, r5
 8009a7a:	461d      	mov	r5, r3
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a82:	2a39      	cmp	r2, #57	; 0x39
 8009a84:	d071      	beq.n	8009b6a <_dtoa_r+0xb9a>
 8009a86:	3201      	adds	r2, #1
 8009a88:	701a      	strb	r2, [r3, #0]
 8009a8a:	e746      	b.n	800991a <_dtoa_r+0x94a>
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	dd07      	ble.n	8009aa0 <_dtoa_r+0xad0>
 8009a90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a94:	d0ed      	beq.n	8009a72 <_dtoa_r+0xaa2>
 8009a96:	f10a 0301 	add.w	r3, sl, #1
 8009a9a:	f88b 3000 	strb.w	r3, [fp]
 8009a9e:	e73c      	b.n	800991a <_dtoa_r+0x94a>
 8009aa0:	9b05      	ldr	r3, [sp, #20]
 8009aa2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009aa6:	4599      	cmp	r9, r3
 8009aa8:	d047      	beq.n	8009b3a <_dtoa_r+0xb6a>
 8009aaa:	ee18 1a10 	vmov	r1, s16
 8009aae:	2300      	movs	r3, #0
 8009ab0:	220a      	movs	r2, #10
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f000 fd70 	bl	800a598 <__multadd>
 8009ab8:	45b8      	cmp	r8, r7
 8009aba:	ee08 0a10 	vmov	s16, r0
 8009abe:	f04f 0300 	mov.w	r3, #0
 8009ac2:	f04f 020a 	mov.w	r2, #10
 8009ac6:	4641      	mov	r1, r8
 8009ac8:	4620      	mov	r0, r4
 8009aca:	d106      	bne.n	8009ada <_dtoa_r+0xb0a>
 8009acc:	f000 fd64 	bl	800a598 <__multadd>
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	4607      	mov	r7, r0
 8009ad4:	f109 0901 	add.w	r9, r9, #1
 8009ad8:	e772      	b.n	80099c0 <_dtoa_r+0x9f0>
 8009ada:	f000 fd5d 	bl	800a598 <__multadd>
 8009ade:	4639      	mov	r1, r7
 8009ae0:	4680      	mov	r8, r0
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	220a      	movs	r2, #10
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 fd56 	bl	800a598 <__multadd>
 8009aec:	4607      	mov	r7, r0
 8009aee:	e7f1      	b.n	8009ad4 <_dtoa_r+0xb04>
 8009af0:	9b03      	ldr	r3, [sp, #12]
 8009af2:	9302      	str	r3, [sp, #8]
 8009af4:	9d01      	ldr	r5, [sp, #4]
 8009af6:	ee18 0a10 	vmov	r0, s16
 8009afa:	4631      	mov	r1, r6
 8009afc:	f7ff f9dc 	bl	8008eb8 <quorem>
 8009b00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	f805 ab01 	strb.w	sl, [r5], #1
 8009b0a:	1aea      	subs	r2, r5, r3
 8009b0c:	9b02      	ldr	r3, [sp, #8]
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	dd09      	ble.n	8009b26 <_dtoa_r+0xb56>
 8009b12:	ee18 1a10 	vmov	r1, s16
 8009b16:	2300      	movs	r3, #0
 8009b18:	220a      	movs	r2, #10
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 fd3c 	bl	800a598 <__multadd>
 8009b20:	ee08 0a10 	vmov	s16, r0
 8009b24:	e7e7      	b.n	8009af6 <_dtoa_r+0xb26>
 8009b26:	9b02      	ldr	r3, [sp, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	bfc8      	it	gt
 8009b2c:	461d      	movgt	r5, r3
 8009b2e:	9b01      	ldr	r3, [sp, #4]
 8009b30:	bfd8      	it	le
 8009b32:	2501      	movle	r5, #1
 8009b34:	441d      	add	r5, r3
 8009b36:	f04f 0800 	mov.w	r8, #0
 8009b3a:	ee18 1a10 	vmov	r1, s16
 8009b3e:	2201      	movs	r2, #1
 8009b40:	4620      	mov	r0, r4
 8009b42:	f000 ff23 	bl	800a98c <__lshift>
 8009b46:	4631      	mov	r1, r6
 8009b48:	ee08 0a10 	vmov	s16, r0
 8009b4c:	f000 ff8e 	bl	800aa6c <__mcmp>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	dc91      	bgt.n	8009a78 <_dtoa_r+0xaa8>
 8009b54:	d102      	bne.n	8009b5c <_dtoa_r+0xb8c>
 8009b56:	f01a 0f01 	tst.w	sl, #1
 8009b5a:	d18d      	bne.n	8009a78 <_dtoa_r+0xaa8>
 8009b5c:	462b      	mov	r3, r5
 8009b5e:	461d      	mov	r5, r3
 8009b60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b64:	2a30      	cmp	r2, #48	; 0x30
 8009b66:	d0fa      	beq.n	8009b5e <_dtoa_r+0xb8e>
 8009b68:	e6d7      	b.n	800991a <_dtoa_r+0x94a>
 8009b6a:	9a01      	ldr	r2, [sp, #4]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d184      	bne.n	8009a7a <_dtoa_r+0xaaa>
 8009b70:	9b00      	ldr	r3, [sp, #0]
 8009b72:	3301      	adds	r3, #1
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	2331      	movs	r3, #49	; 0x31
 8009b78:	7013      	strb	r3, [r2, #0]
 8009b7a:	e6ce      	b.n	800991a <_dtoa_r+0x94a>
 8009b7c:	4b09      	ldr	r3, [pc, #36]	; (8009ba4 <_dtoa_r+0xbd4>)
 8009b7e:	f7ff ba95 	b.w	80090ac <_dtoa_r+0xdc>
 8009b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f47f aa6e 	bne.w	8009066 <_dtoa_r+0x96>
 8009b8a:	4b07      	ldr	r3, [pc, #28]	; (8009ba8 <_dtoa_r+0xbd8>)
 8009b8c:	f7ff ba8e 	b.w	80090ac <_dtoa_r+0xdc>
 8009b90:	9b02      	ldr	r3, [sp, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	dcae      	bgt.n	8009af4 <_dtoa_r+0xb24>
 8009b96:	9b06      	ldr	r3, [sp, #24]
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	f73f aea8 	bgt.w	80098ee <_dtoa_r+0x91e>
 8009b9e:	e7a9      	b.n	8009af4 <_dtoa_r+0xb24>
 8009ba0:	0800bfb8 	.word	0x0800bfb8
 8009ba4:	0800bdbc 	.word	0x0800bdbc
 8009ba8:	0800bf39 	.word	0x0800bf39

08009bac <std>:
 8009bac:	2300      	movs	r3, #0
 8009bae:	b510      	push	{r4, lr}
 8009bb0:	4604      	mov	r4, r0
 8009bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8009bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bba:	6083      	str	r3, [r0, #8]
 8009bbc:	8181      	strh	r1, [r0, #12]
 8009bbe:	6643      	str	r3, [r0, #100]	; 0x64
 8009bc0:	81c2      	strh	r2, [r0, #14]
 8009bc2:	6183      	str	r3, [r0, #24]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	2208      	movs	r2, #8
 8009bc8:	305c      	adds	r0, #92	; 0x5c
 8009bca:	f7fd fc07 	bl	80073dc <memset>
 8009bce:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <std+0x38>)
 8009bd0:	6263      	str	r3, [r4, #36]	; 0x24
 8009bd2:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <std+0x3c>)
 8009bd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bd6:	4b05      	ldr	r3, [pc, #20]	; (8009bec <std+0x40>)
 8009bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bda:	4b05      	ldr	r3, [pc, #20]	; (8009bf0 <std+0x44>)
 8009bdc:	6224      	str	r4, [r4, #32]
 8009bde:	6323      	str	r3, [r4, #48]	; 0x30
 8009be0:	bd10      	pop	{r4, pc}
 8009be2:	bf00      	nop
 8009be4:	0800b5e1 	.word	0x0800b5e1
 8009be8:	0800b603 	.word	0x0800b603
 8009bec:	0800b63b 	.word	0x0800b63b
 8009bf0:	0800b65f 	.word	0x0800b65f

08009bf4 <_cleanup_r>:
 8009bf4:	4901      	ldr	r1, [pc, #4]	; (8009bfc <_cleanup_r+0x8>)
 8009bf6:	f000 b8af 	b.w	8009d58 <_fwalk_reent>
 8009bfa:	bf00      	nop
 8009bfc:	0800b9b9 	.word	0x0800b9b9

08009c00 <__sfmoreglue>:
 8009c00:	b570      	push	{r4, r5, r6, lr}
 8009c02:	2268      	movs	r2, #104	; 0x68
 8009c04:	1e4d      	subs	r5, r1, #1
 8009c06:	4355      	muls	r5, r2
 8009c08:	460e      	mov	r6, r1
 8009c0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c0e:	f001 f9a5 	bl	800af5c <_malloc_r>
 8009c12:	4604      	mov	r4, r0
 8009c14:	b140      	cbz	r0, 8009c28 <__sfmoreglue+0x28>
 8009c16:	2100      	movs	r1, #0
 8009c18:	e9c0 1600 	strd	r1, r6, [r0]
 8009c1c:	300c      	adds	r0, #12
 8009c1e:	60a0      	str	r0, [r4, #8]
 8009c20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c24:	f7fd fbda 	bl	80073dc <memset>
 8009c28:	4620      	mov	r0, r4
 8009c2a:	bd70      	pop	{r4, r5, r6, pc}

08009c2c <__sfp_lock_acquire>:
 8009c2c:	4801      	ldr	r0, [pc, #4]	; (8009c34 <__sfp_lock_acquire+0x8>)
 8009c2e:	f000 bc26 	b.w	800a47e <__retarget_lock_acquire_recursive>
 8009c32:	bf00      	nop
 8009c34:	200003f5 	.word	0x200003f5

08009c38 <__sfp_lock_release>:
 8009c38:	4801      	ldr	r0, [pc, #4]	; (8009c40 <__sfp_lock_release+0x8>)
 8009c3a:	f000 bc21 	b.w	800a480 <__retarget_lock_release_recursive>
 8009c3e:	bf00      	nop
 8009c40:	200003f5 	.word	0x200003f5

08009c44 <__sinit_lock_acquire>:
 8009c44:	4801      	ldr	r0, [pc, #4]	; (8009c4c <__sinit_lock_acquire+0x8>)
 8009c46:	f000 bc1a 	b.w	800a47e <__retarget_lock_acquire_recursive>
 8009c4a:	bf00      	nop
 8009c4c:	200003f6 	.word	0x200003f6

08009c50 <__sinit_lock_release>:
 8009c50:	4801      	ldr	r0, [pc, #4]	; (8009c58 <__sinit_lock_release+0x8>)
 8009c52:	f000 bc15 	b.w	800a480 <__retarget_lock_release_recursive>
 8009c56:	bf00      	nop
 8009c58:	200003f6 	.word	0x200003f6

08009c5c <__sinit>:
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	4604      	mov	r4, r0
 8009c60:	f7ff fff0 	bl	8009c44 <__sinit_lock_acquire>
 8009c64:	69a3      	ldr	r3, [r4, #24]
 8009c66:	b11b      	cbz	r3, 8009c70 <__sinit+0x14>
 8009c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c6c:	f7ff bff0 	b.w	8009c50 <__sinit_lock_release>
 8009c70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c74:	6523      	str	r3, [r4, #80]	; 0x50
 8009c76:	4b13      	ldr	r3, [pc, #76]	; (8009cc4 <__sinit+0x68>)
 8009c78:	4a13      	ldr	r2, [pc, #76]	; (8009cc8 <__sinit+0x6c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	bf04      	itt	eq
 8009c82:	2301      	moveq	r3, #1
 8009c84:	61a3      	streq	r3, [r4, #24]
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 f820 	bl	8009ccc <__sfp>
 8009c8c:	6060      	str	r0, [r4, #4]
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 f81c 	bl	8009ccc <__sfp>
 8009c94:	60a0      	str	r0, [r4, #8]
 8009c96:	4620      	mov	r0, r4
 8009c98:	f000 f818 	bl	8009ccc <__sfp>
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	60e0      	str	r0, [r4, #12]
 8009ca0:	2104      	movs	r1, #4
 8009ca2:	6860      	ldr	r0, [r4, #4]
 8009ca4:	f7ff ff82 	bl	8009bac <std>
 8009ca8:	68a0      	ldr	r0, [r4, #8]
 8009caa:	2201      	movs	r2, #1
 8009cac:	2109      	movs	r1, #9
 8009cae:	f7ff ff7d 	bl	8009bac <std>
 8009cb2:	68e0      	ldr	r0, [r4, #12]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	2112      	movs	r1, #18
 8009cb8:	f7ff ff78 	bl	8009bac <std>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	61a3      	str	r3, [r4, #24]
 8009cc0:	e7d2      	b.n	8009c68 <__sinit+0xc>
 8009cc2:	bf00      	nop
 8009cc4:	0800bda8 	.word	0x0800bda8
 8009cc8:	08009bf5 	.word	0x08009bf5

08009ccc <__sfp>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	4607      	mov	r7, r0
 8009cd0:	f7ff ffac 	bl	8009c2c <__sfp_lock_acquire>
 8009cd4:	4b1e      	ldr	r3, [pc, #120]	; (8009d50 <__sfp+0x84>)
 8009cd6:	681e      	ldr	r6, [r3, #0]
 8009cd8:	69b3      	ldr	r3, [r6, #24]
 8009cda:	b913      	cbnz	r3, 8009ce2 <__sfp+0x16>
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7ff ffbd 	bl	8009c5c <__sinit>
 8009ce2:	3648      	adds	r6, #72	; 0x48
 8009ce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	d503      	bpl.n	8009cf4 <__sfp+0x28>
 8009cec:	6833      	ldr	r3, [r6, #0]
 8009cee:	b30b      	cbz	r3, 8009d34 <__sfp+0x68>
 8009cf0:	6836      	ldr	r6, [r6, #0]
 8009cf2:	e7f7      	b.n	8009ce4 <__sfp+0x18>
 8009cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cf8:	b9d5      	cbnz	r5, 8009d30 <__sfp+0x64>
 8009cfa:	4b16      	ldr	r3, [pc, #88]	; (8009d54 <__sfp+0x88>)
 8009cfc:	60e3      	str	r3, [r4, #12]
 8009cfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d02:	6665      	str	r5, [r4, #100]	; 0x64
 8009d04:	f000 fbba 	bl	800a47c <__retarget_lock_init_recursive>
 8009d08:	f7ff ff96 	bl	8009c38 <__sfp_lock_release>
 8009d0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d14:	6025      	str	r5, [r4, #0]
 8009d16:	61a5      	str	r5, [r4, #24]
 8009d18:	2208      	movs	r2, #8
 8009d1a:	4629      	mov	r1, r5
 8009d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d20:	f7fd fb5c 	bl	80073dc <memset>
 8009d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d30:	3468      	adds	r4, #104	; 0x68
 8009d32:	e7d9      	b.n	8009ce8 <__sfp+0x1c>
 8009d34:	2104      	movs	r1, #4
 8009d36:	4638      	mov	r0, r7
 8009d38:	f7ff ff62 	bl	8009c00 <__sfmoreglue>
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	6030      	str	r0, [r6, #0]
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d1d5      	bne.n	8009cf0 <__sfp+0x24>
 8009d44:	f7ff ff78 	bl	8009c38 <__sfp_lock_release>
 8009d48:	230c      	movs	r3, #12
 8009d4a:	603b      	str	r3, [r7, #0]
 8009d4c:	e7ee      	b.n	8009d2c <__sfp+0x60>
 8009d4e:	bf00      	nop
 8009d50:	0800bda8 	.word	0x0800bda8
 8009d54:	ffff0001 	.word	0xffff0001

08009d58 <_fwalk_reent>:
 8009d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	4688      	mov	r8, r1
 8009d60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d64:	2700      	movs	r7, #0
 8009d66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d6a:	f1b9 0901 	subs.w	r9, r9, #1
 8009d6e:	d505      	bpl.n	8009d7c <_fwalk_reent+0x24>
 8009d70:	6824      	ldr	r4, [r4, #0]
 8009d72:	2c00      	cmp	r4, #0
 8009d74:	d1f7      	bne.n	8009d66 <_fwalk_reent+0xe>
 8009d76:	4638      	mov	r0, r7
 8009d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7c:	89ab      	ldrh	r3, [r5, #12]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d907      	bls.n	8009d92 <_fwalk_reent+0x3a>
 8009d82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d86:	3301      	adds	r3, #1
 8009d88:	d003      	beq.n	8009d92 <_fwalk_reent+0x3a>
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	47c0      	blx	r8
 8009d90:	4307      	orrs	r7, r0
 8009d92:	3568      	adds	r5, #104	; 0x68
 8009d94:	e7e9      	b.n	8009d6a <_fwalk_reent+0x12>

08009d96 <rshift>:
 8009d96:	6903      	ldr	r3, [r0, #16]
 8009d98:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009da0:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009da4:	f100 0414 	add.w	r4, r0, #20
 8009da8:	dd45      	ble.n	8009e36 <rshift+0xa0>
 8009daa:	f011 011f 	ands.w	r1, r1, #31
 8009dae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009db2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009db6:	d10c      	bne.n	8009dd2 <rshift+0x3c>
 8009db8:	f100 0710 	add.w	r7, r0, #16
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	42b1      	cmp	r1, r6
 8009dc0:	d334      	bcc.n	8009e2c <rshift+0x96>
 8009dc2:	1a9b      	subs	r3, r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	1eea      	subs	r2, r5, #3
 8009dc8:	4296      	cmp	r6, r2
 8009dca:	bf38      	it	cc
 8009dcc:	2300      	movcc	r3, #0
 8009dce:	4423      	add	r3, r4
 8009dd0:	e015      	b.n	8009dfe <rshift+0x68>
 8009dd2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009dd6:	f1c1 0820 	rsb	r8, r1, #32
 8009dda:	40cf      	lsrs	r7, r1
 8009ddc:	f105 0e04 	add.w	lr, r5, #4
 8009de0:	46a1      	mov	r9, r4
 8009de2:	4576      	cmp	r6, lr
 8009de4:	46f4      	mov	ip, lr
 8009de6:	d815      	bhi.n	8009e14 <rshift+0x7e>
 8009de8:	1a9a      	subs	r2, r3, r2
 8009dea:	0092      	lsls	r2, r2, #2
 8009dec:	3a04      	subs	r2, #4
 8009dee:	3501      	adds	r5, #1
 8009df0:	42ae      	cmp	r6, r5
 8009df2:	bf38      	it	cc
 8009df4:	2200      	movcc	r2, #0
 8009df6:	18a3      	adds	r3, r4, r2
 8009df8:	50a7      	str	r7, [r4, r2]
 8009dfa:	b107      	cbz	r7, 8009dfe <rshift+0x68>
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	1b1a      	subs	r2, r3, r4
 8009e00:	42a3      	cmp	r3, r4
 8009e02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e06:	bf08      	it	eq
 8009e08:	2300      	moveq	r3, #0
 8009e0a:	6102      	str	r2, [r0, #16]
 8009e0c:	bf08      	it	eq
 8009e0e:	6143      	streq	r3, [r0, #20]
 8009e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e14:	f8dc c000 	ldr.w	ip, [ip]
 8009e18:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e1c:	ea4c 0707 	orr.w	r7, ip, r7
 8009e20:	f849 7b04 	str.w	r7, [r9], #4
 8009e24:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e28:	40cf      	lsrs	r7, r1
 8009e2a:	e7da      	b.n	8009de2 <rshift+0x4c>
 8009e2c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e30:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e34:	e7c3      	b.n	8009dbe <rshift+0x28>
 8009e36:	4623      	mov	r3, r4
 8009e38:	e7e1      	b.n	8009dfe <rshift+0x68>

08009e3a <__hexdig_fun>:
 8009e3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e3e:	2b09      	cmp	r3, #9
 8009e40:	d802      	bhi.n	8009e48 <__hexdig_fun+0xe>
 8009e42:	3820      	subs	r0, #32
 8009e44:	b2c0      	uxtb	r0, r0
 8009e46:	4770      	bx	lr
 8009e48:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e4c:	2b05      	cmp	r3, #5
 8009e4e:	d801      	bhi.n	8009e54 <__hexdig_fun+0x1a>
 8009e50:	3847      	subs	r0, #71	; 0x47
 8009e52:	e7f7      	b.n	8009e44 <__hexdig_fun+0xa>
 8009e54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009e58:	2b05      	cmp	r3, #5
 8009e5a:	d801      	bhi.n	8009e60 <__hexdig_fun+0x26>
 8009e5c:	3827      	subs	r0, #39	; 0x27
 8009e5e:	e7f1      	b.n	8009e44 <__hexdig_fun+0xa>
 8009e60:	2000      	movs	r0, #0
 8009e62:	4770      	bx	lr

08009e64 <__gethex>:
 8009e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e68:	ed2d 8b02 	vpush	{d8}
 8009e6c:	b089      	sub	sp, #36	; 0x24
 8009e6e:	ee08 0a10 	vmov	s16, r0
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	4bb4      	ldr	r3, [pc, #720]	; (800a148 <__gethex+0x2e4>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	9301      	str	r3, [sp, #4]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	468b      	mov	fp, r1
 8009e7e:	4690      	mov	r8, r2
 8009e80:	f7f6 f9a6 	bl	80001d0 <strlen>
 8009e84:	9b01      	ldr	r3, [sp, #4]
 8009e86:	f8db 2000 	ldr.w	r2, [fp]
 8009e8a:	4403      	add	r3, r0
 8009e8c:	4682      	mov	sl, r0
 8009e8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009e92:	9305      	str	r3, [sp, #20]
 8009e94:	1c93      	adds	r3, r2, #2
 8009e96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009e9e:	32fe      	adds	r2, #254	; 0xfe
 8009ea0:	18d1      	adds	r1, r2, r3
 8009ea2:	461f      	mov	r7, r3
 8009ea4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009ea8:	9100      	str	r1, [sp, #0]
 8009eaa:	2830      	cmp	r0, #48	; 0x30
 8009eac:	d0f8      	beq.n	8009ea0 <__gethex+0x3c>
 8009eae:	f7ff ffc4 	bl	8009e3a <__hexdig_fun>
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d13a      	bne.n	8009f2e <__gethex+0xca>
 8009eb8:	9901      	ldr	r1, [sp, #4]
 8009eba:	4652      	mov	r2, sl
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	f001 fbd2 	bl	800b666 <strncmp>
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d168      	bne.n	8009f9a <__gethex+0x136>
 8009ec8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009ecc:	eb07 060a 	add.w	r6, r7, sl
 8009ed0:	f7ff ffb3 	bl	8009e3a <__hexdig_fun>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d062      	beq.n	8009f9e <__gethex+0x13a>
 8009ed8:	4633      	mov	r3, r6
 8009eda:	7818      	ldrb	r0, [r3, #0]
 8009edc:	2830      	cmp	r0, #48	; 0x30
 8009ede:	461f      	mov	r7, r3
 8009ee0:	f103 0301 	add.w	r3, r3, #1
 8009ee4:	d0f9      	beq.n	8009eda <__gethex+0x76>
 8009ee6:	f7ff ffa8 	bl	8009e3a <__hexdig_fun>
 8009eea:	2301      	movs	r3, #1
 8009eec:	fab0 f480 	clz	r4, r0
 8009ef0:	0964      	lsrs	r4, r4, #5
 8009ef2:	4635      	mov	r5, r6
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	463a      	mov	r2, r7
 8009ef8:	4616      	mov	r6, r2
 8009efa:	3201      	adds	r2, #1
 8009efc:	7830      	ldrb	r0, [r6, #0]
 8009efe:	f7ff ff9c 	bl	8009e3a <__hexdig_fun>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d1f8      	bne.n	8009ef8 <__gethex+0x94>
 8009f06:	9901      	ldr	r1, [sp, #4]
 8009f08:	4652      	mov	r2, sl
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f001 fbab 	bl	800b666 <strncmp>
 8009f10:	b980      	cbnz	r0, 8009f34 <__gethex+0xd0>
 8009f12:	b94d      	cbnz	r5, 8009f28 <__gethex+0xc4>
 8009f14:	eb06 050a 	add.w	r5, r6, sl
 8009f18:	462a      	mov	r2, r5
 8009f1a:	4616      	mov	r6, r2
 8009f1c:	3201      	adds	r2, #1
 8009f1e:	7830      	ldrb	r0, [r6, #0]
 8009f20:	f7ff ff8b 	bl	8009e3a <__hexdig_fun>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d1f8      	bne.n	8009f1a <__gethex+0xb6>
 8009f28:	1bad      	subs	r5, r5, r6
 8009f2a:	00ad      	lsls	r5, r5, #2
 8009f2c:	e004      	b.n	8009f38 <__gethex+0xd4>
 8009f2e:	2400      	movs	r4, #0
 8009f30:	4625      	mov	r5, r4
 8009f32:	e7e0      	b.n	8009ef6 <__gethex+0x92>
 8009f34:	2d00      	cmp	r5, #0
 8009f36:	d1f7      	bne.n	8009f28 <__gethex+0xc4>
 8009f38:	7833      	ldrb	r3, [r6, #0]
 8009f3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f3e:	2b50      	cmp	r3, #80	; 0x50
 8009f40:	d13b      	bne.n	8009fba <__gethex+0x156>
 8009f42:	7873      	ldrb	r3, [r6, #1]
 8009f44:	2b2b      	cmp	r3, #43	; 0x2b
 8009f46:	d02c      	beq.n	8009fa2 <__gethex+0x13e>
 8009f48:	2b2d      	cmp	r3, #45	; 0x2d
 8009f4a:	d02e      	beq.n	8009faa <__gethex+0x146>
 8009f4c:	1c71      	adds	r1, r6, #1
 8009f4e:	f04f 0900 	mov.w	r9, #0
 8009f52:	7808      	ldrb	r0, [r1, #0]
 8009f54:	f7ff ff71 	bl	8009e3a <__hexdig_fun>
 8009f58:	1e43      	subs	r3, r0, #1
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	2b18      	cmp	r3, #24
 8009f5e:	d82c      	bhi.n	8009fba <__gethex+0x156>
 8009f60:	f1a0 0210 	sub.w	r2, r0, #16
 8009f64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f68:	f7ff ff67 	bl	8009e3a <__hexdig_fun>
 8009f6c:	1e43      	subs	r3, r0, #1
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b18      	cmp	r3, #24
 8009f72:	d91d      	bls.n	8009fb0 <__gethex+0x14c>
 8009f74:	f1b9 0f00 	cmp.w	r9, #0
 8009f78:	d000      	beq.n	8009f7c <__gethex+0x118>
 8009f7a:	4252      	negs	r2, r2
 8009f7c:	4415      	add	r5, r2
 8009f7e:	f8cb 1000 	str.w	r1, [fp]
 8009f82:	b1e4      	cbz	r4, 8009fbe <__gethex+0x15a>
 8009f84:	9b00      	ldr	r3, [sp, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bf14      	ite	ne
 8009f8a:	2700      	movne	r7, #0
 8009f8c:	2706      	moveq	r7, #6
 8009f8e:	4638      	mov	r0, r7
 8009f90:	b009      	add	sp, #36	; 0x24
 8009f92:	ecbd 8b02 	vpop	{d8}
 8009f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9a:	463e      	mov	r6, r7
 8009f9c:	4625      	mov	r5, r4
 8009f9e:	2401      	movs	r4, #1
 8009fa0:	e7ca      	b.n	8009f38 <__gethex+0xd4>
 8009fa2:	f04f 0900 	mov.w	r9, #0
 8009fa6:	1cb1      	adds	r1, r6, #2
 8009fa8:	e7d3      	b.n	8009f52 <__gethex+0xee>
 8009faa:	f04f 0901 	mov.w	r9, #1
 8009fae:	e7fa      	b.n	8009fa6 <__gethex+0x142>
 8009fb0:	230a      	movs	r3, #10
 8009fb2:	fb03 0202 	mla	r2, r3, r2, r0
 8009fb6:	3a10      	subs	r2, #16
 8009fb8:	e7d4      	b.n	8009f64 <__gethex+0x100>
 8009fba:	4631      	mov	r1, r6
 8009fbc:	e7df      	b.n	8009f7e <__gethex+0x11a>
 8009fbe:	1bf3      	subs	r3, r6, r7
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	2b07      	cmp	r3, #7
 8009fc6:	dc0b      	bgt.n	8009fe0 <__gethex+0x17c>
 8009fc8:	ee18 0a10 	vmov	r0, s16
 8009fcc:	f000 fa82 	bl	800a4d4 <_Balloc>
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	b940      	cbnz	r0, 8009fe6 <__gethex+0x182>
 8009fd4:	4b5d      	ldr	r3, [pc, #372]	; (800a14c <__gethex+0x2e8>)
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	21de      	movs	r1, #222	; 0xde
 8009fda:	485d      	ldr	r0, [pc, #372]	; (800a150 <__gethex+0x2ec>)
 8009fdc:	f001 fc38 	bl	800b850 <__assert_func>
 8009fe0:	3101      	adds	r1, #1
 8009fe2:	105b      	asrs	r3, r3, #1
 8009fe4:	e7ee      	b.n	8009fc4 <__gethex+0x160>
 8009fe6:	f100 0914 	add.w	r9, r0, #20
 8009fea:	f04f 0b00 	mov.w	fp, #0
 8009fee:	f1ca 0301 	rsb	r3, sl, #1
 8009ff2:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ff6:	f8cd b000 	str.w	fp, [sp]
 8009ffa:	9306      	str	r3, [sp, #24]
 8009ffc:	42b7      	cmp	r7, r6
 8009ffe:	d340      	bcc.n	800a082 <__gethex+0x21e>
 800a000:	9802      	ldr	r0, [sp, #8]
 800a002:	9b00      	ldr	r3, [sp, #0]
 800a004:	f840 3b04 	str.w	r3, [r0], #4
 800a008:	eba0 0009 	sub.w	r0, r0, r9
 800a00c:	1080      	asrs	r0, r0, #2
 800a00e:	0146      	lsls	r6, r0, #5
 800a010:	6120      	str	r0, [r4, #16]
 800a012:	4618      	mov	r0, r3
 800a014:	f000 fb50 	bl	800a6b8 <__hi0bits>
 800a018:	1a30      	subs	r0, r6, r0
 800a01a:	f8d8 6000 	ldr.w	r6, [r8]
 800a01e:	42b0      	cmp	r0, r6
 800a020:	dd63      	ble.n	800a0ea <__gethex+0x286>
 800a022:	1b87      	subs	r7, r0, r6
 800a024:	4639      	mov	r1, r7
 800a026:	4620      	mov	r0, r4
 800a028:	f000 fef4 	bl	800ae14 <__any_on>
 800a02c:	4682      	mov	sl, r0
 800a02e:	b1a8      	cbz	r0, 800a05c <__gethex+0x1f8>
 800a030:	1e7b      	subs	r3, r7, #1
 800a032:	1159      	asrs	r1, r3, #5
 800a034:	f003 021f 	and.w	r2, r3, #31
 800a038:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a03c:	f04f 0a01 	mov.w	sl, #1
 800a040:	fa0a f202 	lsl.w	r2, sl, r2
 800a044:	420a      	tst	r2, r1
 800a046:	d009      	beq.n	800a05c <__gethex+0x1f8>
 800a048:	4553      	cmp	r3, sl
 800a04a:	dd05      	ble.n	800a058 <__gethex+0x1f4>
 800a04c:	1eb9      	subs	r1, r7, #2
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 fee0 	bl	800ae14 <__any_on>
 800a054:	2800      	cmp	r0, #0
 800a056:	d145      	bne.n	800a0e4 <__gethex+0x280>
 800a058:	f04f 0a02 	mov.w	sl, #2
 800a05c:	4639      	mov	r1, r7
 800a05e:	4620      	mov	r0, r4
 800a060:	f7ff fe99 	bl	8009d96 <rshift>
 800a064:	443d      	add	r5, r7
 800a066:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a06a:	42ab      	cmp	r3, r5
 800a06c:	da4c      	bge.n	800a108 <__gethex+0x2a4>
 800a06e:	ee18 0a10 	vmov	r0, s16
 800a072:	4621      	mov	r1, r4
 800a074:	f000 fa6e 	bl	800a554 <_Bfree>
 800a078:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a07a:	2300      	movs	r3, #0
 800a07c:	6013      	str	r3, [r2, #0]
 800a07e:	27a3      	movs	r7, #163	; 0xa3
 800a080:	e785      	b.n	8009f8e <__gethex+0x12a>
 800a082:	1e73      	subs	r3, r6, #1
 800a084:	9a05      	ldr	r2, [sp, #20]
 800a086:	9303      	str	r3, [sp, #12]
 800a088:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d019      	beq.n	800a0c4 <__gethex+0x260>
 800a090:	f1bb 0f20 	cmp.w	fp, #32
 800a094:	d107      	bne.n	800a0a6 <__gethex+0x242>
 800a096:	9b02      	ldr	r3, [sp, #8]
 800a098:	9a00      	ldr	r2, [sp, #0]
 800a09a:	f843 2b04 	str.w	r2, [r3], #4
 800a09e:	9302      	str	r3, [sp, #8]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	469b      	mov	fp, r3
 800a0a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a0aa:	f7ff fec6 	bl	8009e3a <__hexdig_fun>
 800a0ae:	9b00      	ldr	r3, [sp, #0]
 800a0b0:	f000 000f 	and.w	r0, r0, #15
 800a0b4:	fa00 f00b 	lsl.w	r0, r0, fp
 800a0b8:	4303      	orrs	r3, r0
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	f10b 0b04 	add.w	fp, fp, #4
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	e00d      	b.n	800a0e0 <__gethex+0x27c>
 800a0c4:	9b03      	ldr	r3, [sp, #12]
 800a0c6:	9a06      	ldr	r2, [sp, #24]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	42bb      	cmp	r3, r7
 800a0cc:	d3e0      	bcc.n	800a090 <__gethex+0x22c>
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	9901      	ldr	r1, [sp, #4]
 800a0d2:	9307      	str	r3, [sp, #28]
 800a0d4:	4652      	mov	r2, sl
 800a0d6:	f001 fac6 	bl	800b666 <strncmp>
 800a0da:	9b07      	ldr	r3, [sp, #28]
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d1d7      	bne.n	800a090 <__gethex+0x22c>
 800a0e0:	461e      	mov	r6, r3
 800a0e2:	e78b      	b.n	8009ffc <__gethex+0x198>
 800a0e4:	f04f 0a03 	mov.w	sl, #3
 800a0e8:	e7b8      	b.n	800a05c <__gethex+0x1f8>
 800a0ea:	da0a      	bge.n	800a102 <__gethex+0x29e>
 800a0ec:	1a37      	subs	r7, r6, r0
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	ee18 0a10 	vmov	r0, s16
 800a0f4:	463a      	mov	r2, r7
 800a0f6:	f000 fc49 	bl	800a98c <__lshift>
 800a0fa:	1bed      	subs	r5, r5, r7
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	f100 0914 	add.w	r9, r0, #20
 800a102:	f04f 0a00 	mov.w	sl, #0
 800a106:	e7ae      	b.n	800a066 <__gethex+0x202>
 800a108:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a10c:	42a8      	cmp	r0, r5
 800a10e:	dd72      	ble.n	800a1f6 <__gethex+0x392>
 800a110:	1b45      	subs	r5, r0, r5
 800a112:	42ae      	cmp	r6, r5
 800a114:	dc36      	bgt.n	800a184 <__gethex+0x320>
 800a116:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d02a      	beq.n	800a174 <__gethex+0x310>
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d02c      	beq.n	800a17c <__gethex+0x318>
 800a122:	2b01      	cmp	r3, #1
 800a124:	d11c      	bne.n	800a160 <__gethex+0x2fc>
 800a126:	42ae      	cmp	r6, r5
 800a128:	d11a      	bne.n	800a160 <__gethex+0x2fc>
 800a12a:	2e01      	cmp	r6, #1
 800a12c:	d112      	bne.n	800a154 <__gethex+0x2f0>
 800a12e:	9a04      	ldr	r2, [sp, #16]
 800a130:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	2301      	movs	r3, #1
 800a138:	6123      	str	r3, [r4, #16]
 800a13a:	f8c9 3000 	str.w	r3, [r9]
 800a13e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a140:	2762      	movs	r7, #98	; 0x62
 800a142:	601c      	str	r4, [r3, #0]
 800a144:	e723      	b.n	8009f8e <__gethex+0x12a>
 800a146:	bf00      	nop
 800a148:	0800c094 	.word	0x0800c094
 800a14c:	0800bfb8 	.word	0x0800bfb8
 800a150:	0800c02c 	.word	0x0800c02c
 800a154:	1e71      	subs	r1, r6, #1
 800a156:	4620      	mov	r0, r4
 800a158:	f000 fe5c 	bl	800ae14 <__any_on>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d1e6      	bne.n	800a12e <__gethex+0x2ca>
 800a160:	ee18 0a10 	vmov	r0, s16
 800a164:	4621      	mov	r1, r4
 800a166:	f000 f9f5 	bl	800a554 <_Bfree>
 800a16a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a16c:	2300      	movs	r3, #0
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	2750      	movs	r7, #80	; 0x50
 800a172:	e70c      	b.n	8009f8e <__gethex+0x12a>
 800a174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1f2      	bne.n	800a160 <__gethex+0x2fc>
 800a17a:	e7d8      	b.n	800a12e <__gethex+0x2ca>
 800a17c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1d5      	bne.n	800a12e <__gethex+0x2ca>
 800a182:	e7ed      	b.n	800a160 <__gethex+0x2fc>
 800a184:	1e6f      	subs	r7, r5, #1
 800a186:	f1ba 0f00 	cmp.w	sl, #0
 800a18a:	d131      	bne.n	800a1f0 <__gethex+0x38c>
 800a18c:	b127      	cbz	r7, 800a198 <__gethex+0x334>
 800a18e:	4639      	mov	r1, r7
 800a190:	4620      	mov	r0, r4
 800a192:	f000 fe3f 	bl	800ae14 <__any_on>
 800a196:	4682      	mov	sl, r0
 800a198:	117b      	asrs	r3, r7, #5
 800a19a:	2101      	movs	r1, #1
 800a19c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a1a0:	f007 071f 	and.w	r7, r7, #31
 800a1a4:	fa01 f707 	lsl.w	r7, r1, r7
 800a1a8:	421f      	tst	r7, r3
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	4620      	mov	r0, r4
 800a1ae:	bf18      	it	ne
 800a1b0:	f04a 0a02 	orrne.w	sl, sl, #2
 800a1b4:	1b76      	subs	r6, r6, r5
 800a1b6:	f7ff fdee 	bl	8009d96 <rshift>
 800a1ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1be:	2702      	movs	r7, #2
 800a1c0:	f1ba 0f00 	cmp.w	sl, #0
 800a1c4:	d048      	beq.n	800a258 <__gethex+0x3f4>
 800a1c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d015      	beq.n	800a1fa <__gethex+0x396>
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d017      	beq.n	800a202 <__gethex+0x39e>
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d109      	bne.n	800a1ea <__gethex+0x386>
 800a1d6:	f01a 0f02 	tst.w	sl, #2
 800a1da:	d006      	beq.n	800a1ea <__gethex+0x386>
 800a1dc:	f8d9 0000 	ldr.w	r0, [r9]
 800a1e0:	ea4a 0a00 	orr.w	sl, sl, r0
 800a1e4:	f01a 0f01 	tst.w	sl, #1
 800a1e8:	d10e      	bne.n	800a208 <__gethex+0x3a4>
 800a1ea:	f047 0710 	orr.w	r7, r7, #16
 800a1ee:	e033      	b.n	800a258 <__gethex+0x3f4>
 800a1f0:	f04f 0a01 	mov.w	sl, #1
 800a1f4:	e7d0      	b.n	800a198 <__gethex+0x334>
 800a1f6:	2701      	movs	r7, #1
 800a1f8:	e7e2      	b.n	800a1c0 <__gethex+0x35c>
 800a1fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1fc:	f1c3 0301 	rsb	r3, r3, #1
 800a200:	9315      	str	r3, [sp, #84]	; 0x54
 800a202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a204:	2b00      	cmp	r3, #0
 800a206:	d0f0      	beq.n	800a1ea <__gethex+0x386>
 800a208:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a20c:	f104 0314 	add.w	r3, r4, #20
 800a210:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a214:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a218:	f04f 0c00 	mov.w	ip, #0
 800a21c:	4618      	mov	r0, r3
 800a21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a222:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a226:	d01c      	beq.n	800a262 <__gethex+0x3fe>
 800a228:	3201      	adds	r2, #1
 800a22a:	6002      	str	r2, [r0, #0]
 800a22c:	2f02      	cmp	r7, #2
 800a22e:	f104 0314 	add.w	r3, r4, #20
 800a232:	d13f      	bne.n	800a2b4 <__gethex+0x450>
 800a234:	f8d8 2000 	ldr.w	r2, [r8]
 800a238:	3a01      	subs	r2, #1
 800a23a:	42b2      	cmp	r2, r6
 800a23c:	d10a      	bne.n	800a254 <__gethex+0x3f0>
 800a23e:	1171      	asrs	r1, r6, #5
 800a240:	2201      	movs	r2, #1
 800a242:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a246:	f006 061f 	and.w	r6, r6, #31
 800a24a:	fa02 f606 	lsl.w	r6, r2, r6
 800a24e:	421e      	tst	r6, r3
 800a250:	bf18      	it	ne
 800a252:	4617      	movne	r7, r2
 800a254:	f047 0720 	orr.w	r7, r7, #32
 800a258:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a25a:	601c      	str	r4, [r3, #0]
 800a25c:	9b04      	ldr	r3, [sp, #16]
 800a25e:	601d      	str	r5, [r3, #0]
 800a260:	e695      	b.n	8009f8e <__gethex+0x12a>
 800a262:	4299      	cmp	r1, r3
 800a264:	f843 cc04 	str.w	ip, [r3, #-4]
 800a268:	d8d8      	bhi.n	800a21c <__gethex+0x3b8>
 800a26a:	68a3      	ldr	r3, [r4, #8]
 800a26c:	459b      	cmp	fp, r3
 800a26e:	db19      	blt.n	800a2a4 <__gethex+0x440>
 800a270:	6861      	ldr	r1, [r4, #4]
 800a272:	ee18 0a10 	vmov	r0, s16
 800a276:	3101      	adds	r1, #1
 800a278:	f000 f92c 	bl	800a4d4 <_Balloc>
 800a27c:	4681      	mov	r9, r0
 800a27e:	b918      	cbnz	r0, 800a288 <__gethex+0x424>
 800a280:	4b1a      	ldr	r3, [pc, #104]	; (800a2ec <__gethex+0x488>)
 800a282:	4602      	mov	r2, r0
 800a284:	2184      	movs	r1, #132	; 0x84
 800a286:	e6a8      	b.n	8009fda <__gethex+0x176>
 800a288:	6922      	ldr	r2, [r4, #16]
 800a28a:	3202      	adds	r2, #2
 800a28c:	f104 010c 	add.w	r1, r4, #12
 800a290:	0092      	lsls	r2, r2, #2
 800a292:	300c      	adds	r0, #12
 800a294:	f000 f910 	bl	800a4b8 <memcpy>
 800a298:	4621      	mov	r1, r4
 800a29a:	ee18 0a10 	vmov	r0, s16
 800a29e:	f000 f959 	bl	800a554 <_Bfree>
 800a2a2:	464c      	mov	r4, r9
 800a2a4:	6923      	ldr	r3, [r4, #16]
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2ac:	6122      	str	r2, [r4, #16]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	615a      	str	r2, [r3, #20]
 800a2b2:	e7bb      	b.n	800a22c <__gethex+0x3c8>
 800a2b4:	6922      	ldr	r2, [r4, #16]
 800a2b6:	455a      	cmp	r2, fp
 800a2b8:	dd0b      	ble.n	800a2d2 <__gethex+0x46e>
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f7ff fd6a 	bl	8009d96 <rshift>
 800a2c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2c6:	3501      	adds	r5, #1
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	f6ff aed0 	blt.w	800a06e <__gethex+0x20a>
 800a2ce:	2701      	movs	r7, #1
 800a2d0:	e7c0      	b.n	800a254 <__gethex+0x3f0>
 800a2d2:	f016 061f 	ands.w	r6, r6, #31
 800a2d6:	d0fa      	beq.n	800a2ce <__gethex+0x46a>
 800a2d8:	4453      	add	r3, sl
 800a2da:	f1c6 0620 	rsb	r6, r6, #32
 800a2de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a2e2:	f000 f9e9 	bl	800a6b8 <__hi0bits>
 800a2e6:	42b0      	cmp	r0, r6
 800a2e8:	dbe7      	blt.n	800a2ba <__gethex+0x456>
 800a2ea:	e7f0      	b.n	800a2ce <__gethex+0x46a>
 800a2ec:	0800bfb8 	.word	0x0800bfb8

0800a2f0 <L_shift>:
 800a2f0:	f1c2 0208 	rsb	r2, r2, #8
 800a2f4:	0092      	lsls	r2, r2, #2
 800a2f6:	b570      	push	{r4, r5, r6, lr}
 800a2f8:	f1c2 0620 	rsb	r6, r2, #32
 800a2fc:	6843      	ldr	r3, [r0, #4]
 800a2fe:	6804      	ldr	r4, [r0, #0]
 800a300:	fa03 f506 	lsl.w	r5, r3, r6
 800a304:	432c      	orrs	r4, r5
 800a306:	40d3      	lsrs	r3, r2
 800a308:	6004      	str	r4, [r0, #0]
 800a30a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a30e:	4288      	cmp	r0, r1
 800a310:	d3f4      	bcc.n	800a2fc <L_shift+0xc>
 800a312:	bd70      	pop	{r4, r5, r6, pc}

0800a314 <__match>:
 800a314:	b530      	push	{r4, r5, lr}
 800a316:	6803      	ldr	r3, [r0, #0]
 800a318:	3301      	adds	r3, #1
 800a31a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a31e:	b914      	cbnz	r4, 800a326 <__match+0x12>
 800a320:	6003      	str	r3, [r0, #0]
 800a322:	2001      	movs	r0, #1
 800a324:	bd30      	pop	{r4, r5, pc}
 800a326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a32a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a32e:	2d19      	cmp	r5, #25
 800a330:	bf98      	it	ls
 800a332:	3220      	addls	r2, #32
 800a334:	42a2      	cmp	r2, r4
 800a336:	d0f0      	beq.n	800a31a <__match+0x6>
 800a338:	2000      	movs	r0, #0
 800a33a:	e7f3      	b.n	800a324 <__match+0x10>

0800a33c <__hexnan>:
 800a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a340:	680b      	ldr	r3, [r1, #0]
 800a342:	115e      	asrs	r6, r3, #5
 800a344:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a348:	f013 031f 	ands.w	r3, r3, #31
 800a34c:	b087      	sub	sp, #28
 800a34e:	bf18      	it	ne
 800a350:	3604      	addne	r6, #4
 800a352:	2500      	movs	r5, #0
 800a354:	1f37      	subs	r7, r6, #4
 800a356:	4690      	mov	r8, r2
 800a358:	6802      	ldr	r2, [r0, #0]
 800a35a:	9301      	str	r3, [sp, #4]
 800a35c:	4682      	mov	sl, r0
 800a35e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a362:	46b9      	mov	r9, r7
 800a364:	463c      	mov	r4, r7
 800a366:	9502      	str	r5, [sp, #8]
 800a368:	46ab      	mov	fp, r5
 800a36a:	7851      	ldrb	r1, [r2, #1]
 800a36c:	1c53      	adds	r3, r2, #1
 800a36e:	9303      	str	r3, [sp, #12]
 800a370:	b341      	cbz	r1, 800a3c4 <__hexnan+0x88>
 800a372:	4608      	mov	r0, r1
 800a374:	9205      	str	r2, [sp, #20]
 800a376:	9104      	str	r1, [sp, #16]
 800a378:	f7ff fd5f 	bl	8009e3a <__hexdig_fun>
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d14f      	bne.n	800a420 <__hexnan+0xe4>
 800a380:	9904      	ldr	r1, [sp, #16]
 800a382:	9a05      	ldr	r2, [sp, #20]
 800a384:	2920      	cmp	r1, #32
 800a386:	d818      	bhi.n	800a3ba <__hexnan+0x7e>
 800a388:	9b02      	ldr	r3, [sp, #8]
 800a38a:	459b      	cmp	fp, r3
 800a38c:	dd13      	ble.n	800a3b6 <__hexnan+0x7a>
 800a38e:	454c      	cmp	r4, r9
 800a390:	d206      	bcs.n	800a3a0 <__hexnan+0x64>
 800a392:	2d07      	cmp	r5, #7
 800a394:	dc04      	bgt.n	800a3a0 <__hexnan+0x64>
 800a396:	462a      	mov	r2, r5
 800a398:	4649      	mov	r1, r9
 800a39a:	4620      	mov	r0, r4
 800a39c:	f7ff ffa8 	bl	800a2f0 <L_shift>
 800a3a0:	4544      	cmp	r4, r8
 800a3a2:	d950      	bls.n	800a446 <__hexnan+0x10a>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f1a4 0904 	sub.w	r9, r4, #4
 800a3aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3ae:	f8cd b008 	str.w	fp, [sp, #8]
 800a3b2:	464c      	mov	r4, r9
 800a3b4:	461d      	mov	r5, r3
 800a3b6:	9a03      	ldr	r2, [sp, #12]
 800a3b8:	e7d7      	b.n	800a36a <__hexnan+0x2e>
 800a3ba:	2929      	cmp	r1, #41	; 0x29
 800a3bc:	d156      	bne.n	800a46c <__hexnan+0x130>
 800a3be:	3202      	adds	r2, #2
 800a3c0:	f8ca 2000 	str.w	r2, [sl]
 800a3c4:	f1bb 0f00 	cmp.w	fp, #0
 800a3c8:	d050      	beq.n	800a46c <__hexnan+0x130>
 800a3ca:	454c      	cmp	r4, r9
 800a3cc:	d206      	bcs.n	800a3dc <__hexnan+0xa0>
 800a3ce:	2d07      	cmp	r5, #7
 800a3d0:	dc04      	bgt.n	800a3dc <__hexnan+0xa0>
 800a3d2:	462a      	mov	r2, r5
 800a3d4:	4649      	mov	r1, r9
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f7ff ff8a 	bl	800a2f0 <L_shift>
 800a3dc:	4544      	cmp	r4, r8
 800a3de:	d934      	bls.n	800a44a <__hexnan+0x10e>
 800a3e0:	f1a8 0204 	sub.w	r2, r8, #4
 800a3e4:	4623      	mov	r3, r4
 800a3e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800a3ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800a3ee:	429f      	cmp	r7, r3
 800a3f0:	d2f9      	bcs.n	800a3e6 <__hexnan+0xaa>
 800a3f2:	1b3b      	subs	r3, r7, r4
 800a3f4:	f023 0303 	bic.w	r3, r3, #3
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	3401      	adds	r4, #1
 800a3fc:	3e03      	subs	r6, #3
 800a3fe:	42b4      	cmp	r4, r6
 800a400:	bf88      	it	hi
 800a402:	2304      	movhi	r3, #4
 800a404:	4443      	add	r3, r8
 800a406:	2200      	movs	r2, #0
 800a408:	f843 2b04 	str.w	r2, [r3], #4
 800a40c:	429f      	cmp	r7, r3
 800a40e:	d2fb      	bcs.n	800a408 <__hexnan+0xcc>
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	b91b      	cbnz	r3, 800a41c <__hexnan+0xe0>
 800a414:	4547      	cmp	r7, r8
 800a416:	d127      	bne.n	800a468 <__hexnan+0x12c>
 800a418:	2301      	movs	r3, #1
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	2005      	movs	r0, #5
 800a41e:	e026      	b.n	800a46e <__hexnan+0x132>
 800a420:	3501      	adds	r5, #1
 800a422:	2d08      	cmp	r5, #8
 800a424:	f10b 0b01 	add.w	fp, fp, #1
 800a428:	dd06      	ble.n	800a438 <__hexnan+0xfc>
 800a42a:	4544      	cmp	r4, r8
 800a42c:	d9c3      	bls.n	800a3b6 <__hexnan+0x7a>
 800a42e:	2300      	movs	r3, #0
 800a430:	f844 3c04 	str.w	r3, [r4, #-4]
 800a434:	2501      	movs	r5, #1
 800a436:	3c04      	subs	r4, #4
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	f000 000f 	and.w	r0, r0, #15
 800a43e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a442:	6022      	str	r2, [r4, #0]
 800a444:	e7b7      	b.n	800a3b6 <__hexnan+0x7a>
 800a446:	2508      	movs	r5, #8
 800a448:	e7b5      	b.n	800a3b6 <__hexnan+0x7a>
 800a44a:	9b01      	ldr	r3, [sp, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0df      	beq.n	800a410 <__hexnan+0xd4>
 800a450:	f04f 32ff 	mov.w	r2, #4294967295
 800a454:	f1c3 0320 	rsb	r3, r3, #32
 800a458:	fa22 f303 	lsr.w	r3, r2, r3
 800a45c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a460:	401a      	ands	r2, r3
 800a462:	f846 2c04 	str.w	r2, [r6, #-4]
 800a466:	e7d3      	b.n	800a410 <__hexnan+0xd4>
 800a468:	3f04      	subs	r7, #4
 800a46a:	e7d1      	b.n	800a410 <__hexnan+0xd4>
 800a46c:	2004      	movs	r0, #4
 800a46e:	b007      	add	sp, #28
 800a470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a474 <_localeconv_r>:
 800a474:	4800      	ldr	r0, [pc, #0]	; (800a478 <_localeconv_r+0x4>)
 800a476:	4770      	bx	lr
 800a478:	20000164 	.word	0x20000164

0800a47c <__retarget_lock_init_recursive>:
 800a47c:	4770      	bx	lr

0800a47e <__retarget_lock_acquire_recursive>:
 800a47e:	4770      	bx	lr

0800a480 <__retarget_lock_release_recursive>:
 800a480:	4770      	bx	lr
	...

0800a484 <malloc>:
 800a484:	4b02      	ldr	r3, [pc, #8]	; (800a490 <malloc+0xc>)
 800a486:	4601      	mov	r1, r0
 800a488:	6818      	ldr	r0, [r3, #0]
 800a48a:	f000 bd67 	b.w	800af5c <_malloc_r>
 800a48e:	bf00      	nop
 800a490:	2000000c 	.word	0x2000000c

0800a494 <__ascii_mbtowc>:
 800a494:	b082      	sub	sp, #8
 800a496:	b901      	cbnz	r1, 800a49a <__ascii_mbtowc+0x6>
 800a498:	a901      	add	r1, sp, #4
 800a49a:	b142      	cbz	r2, 800a4ae <__ascii_mbtowc+0x1a>
 800a49c:	b14b      	cbz	r3, 800a4b2 <__ascii_mbtowc+0x1e>
 800a49e:	7813      	ldrb	r3, [r2, #0]
 800a4a0:	600b      	str	r3, [r1, #0]
 800a4a2:	7812      	ldrb	r2, [r2, #0]
 800a4a4:	1e10      	subs	r0, r2, #0
 800a4a6:	bf18      	it	ne
 800a4a8:	2001      	movne	r0, #1
 800a4aa:	b002      	add	sp, #8
 800a4ac:	4770      	bx	lr
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	e7fb      	b.n	800a4aa <__ascii_mbtowc+0x16>
 800a4b2:	f06f 0001 	mvn.w	r0, #1
 800a4b6:	e7f8      	b.n	800a4aa <__ascii_mbtowc+0x16>

0800a4b8 <memcpy>:
 800a4b8:	440a      	add	r2, r1
 800a4ba:	4291      	cmp	r1, r2
 800a4bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4c0:	d100      	bne.n	800a4c4 <memcpy+0xc>
 800a4c2:	4770      	bx	lr
 800a4c4:	b510      	push	{r4, lr}
 800a4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ce:	4291      	cmp	r1, r2
 800a4d0:	d1f9      	bne.n	800a4c6 <memcpy+0xe>
 800a4d2:	bd10      	pop	{r4, pc}

0800a4d4 <_Balloc>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4d8:	4604      	mov	r4, r0
 800a4da:	460d      	mov	r5, r1
 800a4dc:	b976      	cbnz	r6, 800a4fc <_Balloc+0x28>
 800a4de:	2010      	movs	r0, #16
 800a4e0:	f7ff ffd0 	bl	800a484 <malloc>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	6260      	str	r0, [r4, #36]	; 0x24
 800a4e8:	b920      	cbnz	r0, 800a4f4 <_Balloc+0x20>
 800a4ea:	4b18      	ldr	r3, [pc, #96]	; (800a54c <_Balloc+0x78>)
 800a4ec:	4818      	ldr	r0, [pc, #96]	; (800a550 <_Balloc+0x7c>)
 800a4ee:	2166      	movs	r1, #102	; 0x66
 800a4f0:	f001 f9ae 	bl	800b850 <__assert_func>
 800a4f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4f8:	6006      	str	r6, [r0, #0]
 800a4fa:	60c6      	str	r6, [r0, #12]
 800a4fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4fe:	68f3      	ldr	r3, [r6, #12]
 800a500:	b183      	cbz	r3, 800a524 <_Balloc+0x50>
 800a502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a50a:	b9b8      	cbnz	r0, 800a53c <_Balloc+0x68>
 800a50c:	2101      	movs	r1, #1
 800a50e:	fa01 f605 	lsl.w	r6, r1, r5
 800a512:	1d72      	adds	r2, r6, #5
 800a514:	0092      	lsls	r2, r2, #2
 800a516:	4620      	mov	r0, r4
 800a518:	f000 fc9d 	bl	800ae56 <_calloc_r>
 800a51c:	b160      	cbz	r0, 800a538 <_Balloc+0x64>
 800a51e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a522:	e00e      	b.n	800a542 <_Balloc+0x6e>
 800a524:	2221      	movs	r2, #33	; 0x21
 800a526:	2104      	movs	r1, #4
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fc94 	bl	800ae56 <_calloc_r>
 800a52e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a530:	60f0      	str	r0, [r6, #12]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1e4      	bne.n	800a502 <_Balloc+0x2e>
 800a538:	2000      	movs	r0, #0
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	6802      	ldr	r2, [r0, #0]
 800a53e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a542:	2300      	movs	r3, #0
 800a544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a548:	e7f7      	b.n	800a53a <_Balloc+0x66>
 800a54a:	bf00      	nop
 800a54c:	0800bf46 	.word	0x0800bf46
 800a550:	0800c0a8 	.word	0x0800c0a8

0800a554 <_Bfree>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a558:	4605      	mov	r5, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	b976      	cbnz	r6, 800a57c <_Bfree+0x28>
 800a55e:	2010      	movs	r0, #16
 800a560:	f7ff ff90 	bl	800a484 <malloc>
 800a564:	4602      	mov	r2, r0
 800a566:	6268      	str	r0, [r5, #36]	; 0x24
 800a568:	b920      	cbnz	r0, 800a574 <_Bfree+0x20>
 800a56a:	4b09      	ldr	r3, [pc, #36]	; (800a590 <_Bfree+0x3c>)
 800a56c:	4809      	ldr	r0, [pc, #36]	; (800a594 <_Bfree+0x40>)
 800a56e:	218a      	movs	r1, #138	; 0x8a
 800a570:	f001 f96e 	bl	800b850 <__assert_func>
 800a574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a578:	6006      	str	r6, [r0, #0]
 800a57a:	60c6      	str	r6, [r0, #12]
 800a57c:	b13c      	cbz	r4, 800a58e <_Bfree+0x3a>
 800a57e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a580:	6862      	ldr	r2, [r4, #4]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a588:	6021      	str	r1, [r4, #0]
 800a58a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	0800bf46 	.word	0x0800bf46
 800a594:	0800c0a8 	.word	0x0800c0a8

0800a598 <__multadd>:
 800a598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59c:	690d      	ldr	r5, [r1, #16]
 800a59e:	4607      	mov	r7, r0
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	461e      	mov	r6, r3
 800a5a4:	f101 0c14 	add.w	ip, r1, #20
 800a5a8:	2000      	movs	r0, #0
 800a5aa:	f8dc 3000 	ldr.w	r3, [ip]
 800a5ae:	b299      	uxth	r1, r3
 800a5b0:	fb02 6101 	mla	r1, r2, r1, r6
 800a5b4:	0c1e      	lsrs	r6, r3, #16
 800a5b6:	0c0b      	lsrs	r3, r1, #16
 800a5b8:	fb02 3306 	mla	r3, r2, r6, r3
 800a5bc:	b289      	uxth	r1, r1
 800a5be:	3001      	adds	r0, #1
 800a5c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5c4:	4285      	cmp	r5, r0
 800a5c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a5ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5ce:	dcec      	bgt.n	800a5aa <__multadd+0x12>
 800a5d0:	b30e      	cbz	r6, 800a616 <__multadd+0x7e>
 800a5d2:	68a3      	ldr	r3, [r4, #8]
 800a5d4:	42ab      	cmp	r3, r5
 800a5d6:	dc19      	bgt.n	800a60c <__multadd+0x74>
 800a5d8:	6861      	ldr	r1, [r4, #4]
 800a5da:	4638      	mov	r0, r7
 800a5dc:	3101      	adds	r1, #1
 800a5de:	f7ff ff79 	bl	800a4d4 <_Balloc>
 800a5e2:	4680      	mov	r8, r0
 800a5e4:	b928      	cbnz	r0, 800a5f2 <__multadd+0x5a>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	4b0c      	ldr	r3, [pc, #48]	; (800a61c <__multadd+0x84>)
 800a5ea:	480d      	ldr	r0, [pc, #52]	; (800a620 <__multadd+0x88>)
 800a5ec:	21b5      	movs	r1, #181	; 0xb5
 800a5ee:	f001 f92f 	bl	800b850 <__assert_func>
 800a5f2:	6922      	ldr	r2, [r4, #16]
 800a5f4:	3202      	adds	r2, #2
 800a5f6:	f104 010c 	add.w	r1, r4, #12
 800a5fa:	0092      	lsls	r2, r2, #2
 800a5fc:	300c      	adds	r0, #12
 800a5fe:	f7ff ff5b 	bl	800a4b8 <memcpy>
 800a602:	4621      	mov	r1, r4
 800a604:	4638      	mov	r0, r7
 800a606:	f7ff ffa5 	bl	800a554 <_Bfree>
 800a60a:	4644      	mov	r4, r8
 800a60c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a610:	3501      	adds	r5, #1
 800a612:	615e      	str	r6, [r3, #20]
 800a614:	6125      	str	r5, [r4, #16]
 800a616:	4620      	mov	r0, r4
 800a618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61c:	0800bfb8 	.word	0x0800bfb8
 800a620:	0800c0a8 	.word	0x0800c0a8

0800a624 <__s2b>:
 800a624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a628:	460c      	mov	r4, r1
 800a62a:	4615      	mov	r5, r2
 800a62c:	461f      	mov	r7, r3
 800a62e:	2209      	movs	r2, #9
 800a630:	3308      	adds	r3, #8
 800a632:	4606      	mov	r6, r0
 800a634:	fb93 f3f2 	sdiv	r3, r3, r2
 800a638:	2100      	movs	r1, #0
 800a63a:	2201      	movs	r2, #1
 800a63c:	429a      	cmp	r2, r3
 800a63e:	db09      	blt.n	800a654 <__s2b+0x30>
 800a640:	4630      	mov	r0, r6
 800a642:	f7ff ff47 	bl	800a4d4 <_Balloc>
 800a646:	b940      	cbnz	r0, 800a65a <__s2b+0x36>
 800a648:	4602      	mov	r2, r0
 800a64a:	4b19      	ldr	r3, [pc, #100]	; (800a6b0 <__s2b+0x8c>)
 800a64c:	4819      	ldr	r0, [pc, #100]	; (800a6b4 <__s2b+0x90>)
 800a64e:	21ce      	movs	r1, #206	; 0xce
 800a650:	f001 f8fe 	bl	800b850 <__assert_func>
 800a654:	0052      	lsls	r2, r2, #1
 800a656:	3101      	adds	r1, #1
 800a658:	e7f0      	b.n	800a63c <__s2b+0x18>
 800a65a:	9b08      	ldr	r3, [sp, #32]
 800a65c:	6143      	str	r3, [r0, #20]
 800a65e:	2d09      	cmp	r5, #9
 800a660:	f04f 0301 	mov.w	r3, #1
 800a664:	6103      	str	r3, [r0, #16]
 800a666:	dd16      	ble.n	800a696 <__s2b+0x72>
 800a668:	f104 0909 	add.w	r9, r4, #9
 800a66c:	46c8      	mov	r8, r9
 800a66e:	442c      	add	r4, r5
 800a670:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a674:	4601      	mov	r1, r0
 800a676:	3b30      	subs	r3, #48	; 0x30
 800a678:	220a      	movs	r2, #10
 800a67a:	4630      	mov	r0, r6
 800a67c:	f7ff ff8c 	bl	800a598 <__multadd>
 800a680:	45a0      	cmp	r8, r4
 800a682:	d1f5      	bne.n	800a670 <__s2b+0x4c>
 800a684:	f1a5 0408 	sub.w	r4, r5, #8
 800a688:	444c      	add	r4, r9
 800a68a:	1b2d      	subs	r5, r5, r4
 800a68c:	1963      	adds	r3, r4, r5
 800a68e:	42bb      	cmp	r3, r7
 800a690:	db04      	blt.n	800a69c <__s2b+0x78>
 800a692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a696:	340a      	adds	r4, #10
 800a698:	2509      	movs	r5, #9
 800a69a:	e7f6      	b.n	800a68a <__s2b+0x66>
 800a69c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6a0:	4601      	mov	r1, r0
 800a6a2:	3b30      	subs	r3, #48	; 0x30
 800a6a4:	220a      	movs	r2, #10
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	f7ff ff76 	bl	800a598 <__multadd>
 800a6ac:	e7ee      	b.n	800a68c <__s2b+0x68>
 800a6ae:	bf00      	nop
 800a6b0:	0800bfb8 	.word	0x0800bfb8
 800a6b4:	0800c0a8 	.word	0x0800c0a8

0800a6b8 <__hi0bits>:
 800a6b8:	0c03      	lsrs	r3, r0, #16
 800a6ba:	041b      	lsls	r3, r3, #16
 800a6bc:	b9d3      	cbnz	r3, 800a6f4 <__hi0bits+0x3c>
 800a6be:	0400      	lsls	r0, r0, #16
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a6c6:	bf04      	itt	eq
 800a6c8:	0200      	lsleq	r0, r0, #8
 800a6ca:	3308      	addeq	r3, #8
 800a6cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a6d0:	bf04      	itt	eq
 800a6d2:	0100      	lsleq	r0, r0, #4
 800a6d4:	3304      	addeq	r3, #4
 800a6d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a6da:	bf04      	itt	eq
 800a6dc:	0080      	lsleq	r0, r0, #2
 800a6de:	3302      	addeq	r3, #2
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	db05      	blt.n	800a6f0 <__hi0bits+0x38>
 800a6e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a6e8:	f103 0301 	add.w	r3, r3, #1
 800a6ec:	bf08      	it	eq
 800a6ee:	2320      	moveq	r3, #32
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	4770      	bx	lr
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	e7e4      	b.n	800a6c2 <__hi0bits+0xa>

0800a6f8 <__lo0bits>:
 800a6f8:	6803      	ldr	r3, [r0, #0]
 800a6fa:	f013 0207 	ands.w	r2, r3, #7
 800a6fe:	4601      	mov	r1, r0
 800a700:	d00b      	beq.n	800a71a <__lo0bits+0x22>
 800a702:	07da      	lsls	r2, r3, #31
 800a704:	d423      	bmi.n	800a74e <__lo0bits+0x56>
 800a706:	0798      	lsls	r0, r3, #30
 800a708:	bf49      	itett	mi
 800a70a:	085b      	lsrmi	r3, r3, #1
 800a70c:	089b      	lsrpl	r3, r3, #2
 800a70e:	2001      	movmi	r0, #1
 800a710:	600b      	strmi	r3, [r1, #0]
 800a712:	bf5c      	itt	pl
 800a714:	600b      	strpl	r3, [r1, #0]
 800a716:	2002      	movpl	r0, #2
 800a718:	4770      	bx	lr
 800a71a:	b298      	uxth	r0, r3
 800a71c:	b9a8      	cbnz	r0, 800a74a <__lo0bits+0x52>
 800a71e:	0c1b      	lsrs	r3, r3, #16
 800a720:	2010      	movs	r0, #16
 800a722:	b2da      	uxtb	r2, r3
 800a724:	b90a      	cbnz	r2, 800a72a <__lo0bits+0x32>
 800a726:	3008      	adds	r0, #8
 800a728:	0a1b      	lsrs	r3, r3, #8
 800a72a:	071a      	lsls	r2, r3, #28
 800a72c:	bf04      	itt	eq
 800a72e:	091b      	lsreq	r3, r3, #4
 800a730:	3004      	addeq	r0, #4
 800a732:	079a      	lsls	r2, r3, #30
 800a734:	bf04      	itt	eq
 800a736:	089b      	lsreq	r3, r3, #2
 800a738:	3002      	addeq	r0, #2
 800a73a:	07da      	lsls	r2, r3, #31
 800a73c:	d403      	bmi.n	800a746 <__lo0bits+0x4e>
 800a73e:	085b      	lsrs	r3, r3, #1
 800a740:	f100 0001 	add.w	r0, r0, #1
 800a744:	d005      	beq.n	800a752 <__lo0bits+0x5a>
 800a746:	600b      	str	r3, [r1, #0]
 800a748:	4770      	bx	lr
 800a74a:	4610      	mov	r0, r2
 800a74c:	e7e9      	b.n	800a722 <__lo0bits+0x2a>
 800a74e:	2000      	movs	r0, #0
 800a750:	4770      	bx	lr
 800a752:	2020      	movs	r0, #32
 800a754:	4770      	bx	lr
	...

0800a758 <__i2b>:
 800a758:	b510      	push	{r4, lr}
 800a75a:	460c      	mov	r4, r1
 800a75c:	2101      	movs	r1, #1
 800a75e:	f7ff feb9 	bl	800a4d4 <_Balloc>
 800a762:	4602      	mov	r2, r0
 800a764:	b928      	cbnz	r0, 800a772 <__i2b+0x1a>
 800a766:	4b05      	ldr	r3, [pc, #20]	; (800a77c <__i2b+0x24>)
 800a768:	4805      	ldr	r0, [pc, #20]	; (800a780 <__i2b+0x28>)
 800a76a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a76e:	f001 f86f 	bl	800b850 <__assert_func>
 800a772:	2301      	movs	r3, #1
 800a774:	6144      	str	r4, [r0, #20]
 800a776:	6103      	str	r3, [r0, #16]
 800a778:	bd10      	pop	{r4, pc}
 800a77a:	bf00      	nop
 800a77c:	0800bfb8 	.word	0x0800bfb8
 800a780:	0800c0a8 	.word	0x0800c0a8

0800a784 <__multiply>:
 800a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	4691      	mov	r9, r2
 800a78a:	690a      	ldr	r2, [r1, #16]
 800a78c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a790:	429a      	cmp	r2, r3
 800a792:	bfb8      	it	lt
 800a794:	460b      	movlt	r3, r1
 800a796:	460c      	mov	r4, r1
 800a798:	bfbc      	itt	lt
 800a79a:	464c      	movlt	r4, r9
 800a79c:	4699      	movlt	r9, r3
 800a79e:	6927      	ldr	r7, [r4, #16]
 800a7a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7a4:	68a3      	ldr	r3, [r4, #8]
 800a7a6:	6861      	ldr	r1, [r4, #4]
 800a7a8:	eb07 060a 	add.w	r6, r7, sl
 800a7ac:	42b3      	cmp	r3, r6
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	bfb8      	it	lt
 800a7b2:	3101      	addlt	r1, #1
 800a7b4:	f7ff fe8e 	bl	800a4d4 <_Balloc>
 800a7b8:	b930      	cbnz	r0, 800a7c8 <__multiply+0x44>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	4b44      	ldr	r3, [pc, #272]	; (800a8d0 <__multiply+0x14c>)
 800a7be:	4845      	ldr	r0, [pc, #276]	; (800a8d4 <__multiply+0x150>)
 800a7c0:	f240 115d 	movw	r1, #349	; 0x15d
 800a7c4:	f001 f844 	bl	800b850 <__assert_func>
 800a7c8:	f100 0514 	add.w	r5, r0, #20
 800a7cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7d0:	462b      	mov	r3, r5
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	4543      	cmp	r3, r8
 800a7d6:	d321      	bcc.n	800a81c <__multiply+0x98>
 800a7d8:	f104 0314 	add.w	r3, r4, #20
 800a7dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a7e0:	f109 0314 	add.w	r3, r9, #20
 800a7e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a7e8:	9202      	str	r2, [sp, #8]
 800a7ea:	1b3a      	subs	r2, r7, r4
 800a7ec:	3a15      	subs	r2, #21
 800a7ee:	f022 0203 	bic.w	r2, r2, #3
 800a7f2:	3204      	adds	r2, #4
 800a7f4:	f104 0115 	add.w	r1, r4, #21
 800a7f8:	428f      	cmp	r7, r1
 800a7fa:	bf38      	it	cc
 800a7fc:	2204      	movcc	r2, #4
 800a7fe:	9201      	str	r2, [sp, #4]
 800a800:	9a02      	ldr	r2, [sp, #8]
 800a802:	9303      	str	r3, [sp, #12]
 800a804:	429a      	cmp	r2, r3
 800a806:	d80c      	bhi.n	800a822 <__multiply+0x9e>
 800a808:	2e00      	cmp	r6, #0
 800a80a:	dd03      	ble.n	800a814 <__multiply+0x90>
 800a80c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a810:	2b00      	cmp	r3, #0
 800a812:	d05a      	beq.n	800a8ca <__multiply+0x146>
 800a814:	6106      	str	r6, [r0, #16]
 800a816:	b005      	add	sp, #20
 800a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81c:	f843 2b04 	str.w	r2, [r3], #4
 800a820:	e7d8      	b.n	800a7d4 <__multiply+0x50>
 800a822:	f8b3 a000 	ldrh.w	sl, [r3]
 800a826:	f1ba 0f00 	cmp.w	sl, #0
 800a82a:	d024      	beq.n	800a876 <__multiply+0xf2>
 800a82c:	f104 0e14 	add.w	lr, r4, #20
 800a830:	46a9      	mov	r9, r5
 800a832:	f04f 0c00 	mov.w	ip, #0
 800a836:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a83a:	f8d9 1000 	ldr.w	r1, [r9]
 800a83e:	fa1f fb82 	uxth.w	fp, r2
 800a842:	b289      	uxth	r1, r1
 800a844:	fb0a 110b 	mla	r1, sl, fp, r1
 800a848:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a84c:	f8d9 2000 	ldr.w	r2, [r9]
 800a850:	4461      	add	r1, ip
 800a852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a856:	fb0a c20b 	mla	r2, sl, fp, ip
 800a85a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a85e:	b289      	uxth	r1, r1
 800a860:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a864:	4577      	cmp	r7, lr
 800a866:	f849 1b04 	str.w	r1, [r9], #4
 800a86a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a86e:	d8e2      	bhi.n	800a836 <__multiply+0xb2>
 800a870:	9a01      	ldr	r2, [sp, #4]
 800a872:	f845 c002 	str.w	ip, [r5, r2]
 800a876:	9a03      	ldr	r2, [sp, #12]
 800a878:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a87c:	3304      	adds	r3, #4
 800a87e:	f1b9 0f00 	cmp.w	r9, #0
 800a882:	d020      	beq.n	800a8c6 <__multiply+0x142>
 800a884:	6829      	ldr	r1, [r5, #0]
 800a886:	f104 0c14 	add.w	ip, r4, #20
 800a88a:	46ae      	mov	lr, r5
 800a88c:	f04f 0a00 	mov.w	sl, #0
 800a890:	f8bc b000 	ldrh.w	fp, [ip]
 800a894:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a898:	fb09 220b 	mla	r2, r9, fp, r2
 800a89c:	4492      	add	sl, r2
 800a89e:	b289      	uxth	r1, r1
 800a8a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a8a4:	f84e 1b04 	str.w	r1, [lr], #4
 800a8a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a8ac:	f8be 1000 	ldrh.w	r1, [lr]
 800a8b0:	0c12      	lsrs	r2, r2, #16
 800a8b2:	fb09 1102 	mla	r1, r9, r2, r1
 800a8b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a8ba:	4567      	cmp	r7, ip
 800a8bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8c0:	d8e6      	bhi.n	800a890 <__multiply+0x10c>
 800a8c2:	9a01      	ldr	r2, [sp, #4]
 800a8c4:	50a9      	str	r1, [r5, r2]
 800a8c6:	3504      	adds	r5, #4
 800a8c8:	e79a      	b.n	800a800 <__multiply+0x7c>
 800a8ca:	3e01      	subs	r6, #1
 800a8cc:	e79c      	b.n	800a808 <__multiply+0x84>
 800a8ce:	bf00      	nop
 800a8d0:	0800bfb8 	.word	0x0800bfb8
 800a8d4:	0800c0a8 	.word	0x0800c0a8

0800a8d8 <__pow5mult>:
 800a8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8dc:	4615      	mov	r5, r2
 800a8de:	f012 0203 	ands.w	r2, r2, #3
 800a8e2:	4606      	mov	r6, r0
 800a8e4:	460f      	mov	r7, r1
 800a8e6:	d007      	beq.n	800a8f8 <__pow5mult+0x20>
 800a8e8:	4c25      	ldr	r4, [pc, #148]	; (800a980 <__pow5mult+0xa8>)
 800a8ea:	3a01      	subs	r2, #1
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8f2:	f7ff fe51 	bl	800a598 <__multadd>
 800a8f6:	4607      	mov	r7, r0
 800a8f8:	10ad      	asrs	r5, r5, #2
 800a8fa:	d03d      	beq.n	800a978 <__pow5mult+0xa0>
 800a8fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a8fe:	b97c      	cbnz	r4, 800a920 <__pow5mult+0x48>
 800a900:	2010      	movs	r0, #16
 800a902:	f7ff fdbf 	bl	800a484 <malloc>
 800a906:	4602      	mov	r2, r0
 800a908:	6270      	str	r0, [r6, #36]	; 0x24
 800a90a:	b928      	cbnz	r0, 800a918 <__pow5mult+0x40>
 800a90c:	4b1d      	ldr	r3, [pc, #116]	; (800a984 <__pow5mult+0xac>)
 800a90e:	481e      	ldr	r0, [pc, #120]	; (800a988 <__pow5mult+0xb0>)
 800a910:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a914:	f000 ff9c 	bl	800b850 <__assert_func>
 800a918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a91c:	6004      	str	r4, [r0, #0]
 800a91e:	60c4      	str	r4, [r0, #12]
 800a920:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a928:	b94c      	cbnz	r4, 800a93e <__pow5mult+0x66>
 800a92a:	f240 2171 	movw	r1, #625	; 0x271
 800a92e:	4630      	mov	r0, r6
 800a930:	f7ff ff12 	bl	800a758 <__i2b>
 800a934:	2300      	movs	r3, #0
 800a936:	f8c8 0008 	str.w	r0, [r8, #8]
 800a93a:	4604      	mov	r4, r0
 800a93c:	6003      	str	r3, [r0, #0]
 800a93e:	f04f 0900 	mov.w	r9, #0
 800a942:	07eb      	lsls	r3, r5, #31
 800a944:	d50a      	bpl.n	800a95c <__pow5mult+0x84>
 800a946:	4639      	mov	r1, r7
 800a948:	4622      	mov	r2, r4
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7ff ff1a 	bl	800a784 <__multiply>
 800a950:	4639      	mov	r1, r7
 800a952:	4680      	mov	r8, r0
 800a954:	4630      	mov	r0, r6
 800a956:	f7ff fdfd 	bl	800a554 <_Bfree>
 800a95a:	4647      	mov	r7, r8
 800a95c:	106d      	asrs	r5, r5, #1
 800a95e:	d00b      	beq.n	800a978 <__pow5mult+0xa0>
 800a960:	6820      	ldr	r0, [r4, #0]
 800a962:	b938      	cbnz	r0, 800a974 <__pow5mult+0x9c>
 800a964:	4622      	mov	r2, r4
 800a966:	4621      	mov	r1, r4
 800a968:	4630      	mov	r0, r6
 800a96a:	f7ff ff0b 	bl	800a784 <__multiply>
 800a96e:	6020      	str	r0, [r4, #0]
 800a970:	f8c0 9000 	str.w	r9, [r0]
 800a974:	4604      	mov	r4, r0
 800a976:	e7e4      	b.n	800a942 <__pow5mult+0x6a>
 800a978:	4638      	mov	r0, r7
 800a97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a97e:	bf00      	nop
 800a980:	0800c1f8 	.word	0x0800c1f8
 800a984:	0800bf46 	.word	0x0800bf46
 800a988:	0800c0a8 	.word	0x0800c0a8

0800a98c <__lshift>:
 800a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	460c      	mov	r4, r1
 800a992:	6849      	ldr	r1, [r1, #4]
 800a994:	6923      	ldr	r3, [r4, #16]
 800a996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a99a:	68a3      	ldr	r3, [r4, #8]
 800a99c:	4607      	mov	r7, r0
 800a99e:	4691      	mov	r9, r2
 800a9a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9a4:	f108 0601 	add.w	r6, r8, #1
 800a9a8:	42b3      	cmp	r3, r6
 800a9aa:	db0b      	blt.n	800a9c4 <__lshift+0x38>
 800a9ac:	4638      	mov	r0, r7
 800a9ae:	f7ff fd91 	bl	800a4d4 <_Balloc>
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	b948      	cbnz	r0, 800a9ca <__lshift+0x3e>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	4b2a      	ldr	r3, [pc, #168]	; (800aa64 <__lshift+0xd8>)
 800a9ba:	482b      	ldr	r0, [pc, #172]	; (800aa68 <__lshift+0xdc>)
 800a9bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a9c0:	f000 ff46 	bl	800b850 <__assert_func>
 800a9c4:	3101      	adds	r1, #1
 800a9c6:	005b      	lsls	r3, r3, #1
 800a9c8:	e7ee      	b.n	800a9a8 <__lshift+0x1c>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	f100 0114 	add.w	r1, r0, #20
 800a9d0:	f100 0210 	add.w	r2, r0, #16
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	4553      	cmp	r3, sl
 800a9d8:	db37      	blt.n	800aa4a <__lshift+0xbe>
 800a9da:	6920      	ldr	r0, [r4, #16]
 800a9dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9e0:	f104 0314 	add.w	r3, r4, #20
 800a9e4:	f019 091f 	ands.w	r9, r9, #31
 800a9e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a9f0:	d02f      	beq.n	800aa52 <__lshift+0xc6>
 800a9f2:	f1c9 0e20 	rsb	lr, r9, #32
 800a9f6:	468a      	mov	sl, r1
 800a9f8:	f04f 0c00 	mov.w	ip, #0
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	fa02 f209 	lsl.w	r2, r2, r9
 800aa02:	ea42 020c 	orr.w	r2, r2, ip
 800aa06:	f84a 2b04 	str.w	r2, [sl], #4
 800aa0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa0e:	4298      	cmp	r0, r3
 800aa10:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aa14:	d8f2      	bhi.n	800a9fc <__lshift+0x70>
 800aa16:	1b03      	subs	r3, r0, r4
 800aa18:	3b15      	subs	r3, #21
 800aa1a:	f023 0303 	bic.w	r3, r3, #3
 800aa1e:	3304      	adds	r3, #4
 800aa20:	f104 0215 	add.w	r2, r4, #21
 800aa24:	4290      	cmp	r0, r2
 800aa26:	bf38      	it	cc
 800aa28:	2304      	movcc	r3, #4
 800aa2a:	f841 c003 	str.w	ip, [r1, r3]
 800aa2e:	f1bc 0f00 	cmp.w	ip, #0
 800aa32:	d001      	beq.n	800aa38 <__lshift+0xac>
 800aa34:	f108 0602 	add.w	r6, r8, #2
 800aa38:	3e01      	subs	r6, #1
 800aa3a:	4638      	mov	r0, r7
 800aa3c:	612e      	str	r6, [r5, #16]
 800aa3e:	4621      	mov	r1, r4
 800aa40:	f7ff fd88 	bl	800a554 <_Bfree>
 800aa44:	4628      	mov	r0, r5
 800aa46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa4e:	3301      	adds	r3, #1
 800aa50:	e7c1      	b.n	800a9d6 <__lshift+0x4a>
 800aa52:	3904      	subs	r1, #4
 800aa54:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa58:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa5c:	4298      	cmp	r0, r3
 800aa5e:	d8f9      	bhi.n	800aa54 <__lshift+0xc8>
 800aa60:	e7ea      	b.n	800aa38 <__lshift+0xac>
 800aa62:	bf00      	nop
 800aa64:	0800bfb8 	.word	0x0800bfb8
 800aa68:	0800c0a8 	.word	0x0800c0a8

0800aa6c <__mcmp>:
 800aa6c:	b530      	push	{r4, r5, lr}
 800aa6e:	6902      	ldr	r2, [r0, #16]
 800aa70:	690c      	ldr	r4, [r1, #16]
 800aa72:	1b12      	subs	r2, r2, r4
 800aa74:	d10e      	bne.n	800aa94 <__mcmp+0x28>
 800aa76:	f100 0314 	add.w	r3, r0, #20
 800aa7a:	3114      	adds	r1, #20
 800aa7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa8c:	42a5      	cmp	r5, r4
 800aa8e:	d003      	beq.n	800aa98 <__mcmp+0x2c>
 800aa90:	d305      	bcc.n	800aa9e <__mcmp+0x32>
 800aa92:	2201      	movs	r2, #1
 800aa94:	4610      	mov	r0, r2
 800aa96:	bd30      	pop	{r4, r5, pc}
 800aa98:	4283      	cmp	r3, r0
 800aa9a:	d3f3      	bcc.n	800aa84 <__mcmp+0x18>
 800aa9c:	e7fa      	b.n	800aa94 <__mcmp+0x28>
 800aa9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa2:	e7f7      	b.n	800aa94 <__mcmp+0x28>

0800aaa4 <__mdiff>:
 800aaa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	4606      	mov	r6, r0
 800aaac:	4611      	mov	r1, r2
 800aaae:	4620      	mov	r0, r4
 800aab0:	4690      	mov	r8, r2
 800aab2:	f7ff ffdb 	bl	800aa6c <__mcmp>
 800aab6:	1e05      	subs	r5, r0, #0
 800aab8:	d110      	bne.n	800aadc <__mdiff+0x38>
 800aaba:	4629      	mov	r1, r5
 800aabc:	4630      	mov	r0, r6
 800aabe:	f7ff fd09 	bl	800a4d4 <_Balloc>
 800aac2:	b930      	cbnz	r0, 800aad2 <__mdiff+0x2e>
 800aac4:	4b3a      	ldr	r3, [pc, #232]	; (800abb0 <__mdiff+0x10c>)
 800aac6:	4602      	mov	r2, r0
 800aac8:	f240 2132 	movw	r1, #562	; 0x232
 800aacc:	4839      	ldr	r0, [pc, #228]	; (800abb4 <__mdiff+0x110>)
 800aace:	f000 febf 	bl	800b850 <__assert_func>
 800aad2:	2301      	movs	r3, #1
 800aad4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aadc:	bfa4      	itt	ge
 800aade:	4643      	movge	r3, r8
 800aae0:	46a0      	movge	r8, r4
 800aae2:	4630      	mov	r0, r6
 800aae4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aae8:	bfa6      	itte	ge
 800aaea:	461c      	movge	r4, r3
 800aaec:	2500      	movge	r5, #0
 800aaee:	2501      	movlt	r5, #1
 800aaf0:	f7ff fcf0 	bl	800a4d4 <_Balloc>
 800aaf4:	b920      	cbnz	r0, 800ab00 <__mdiff+0x5c>
 800aaf6:	4b2e      	ldr	r3, [pc, #184]	; (800abb0 <__mdiff+0x10c>)
 800aaf8:	4602      	mov	r2, r0
 800aafa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aafe:	e7e5      	b.n	800aacc <__mdiff+0x28>
 800ab00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab04:	6926      	ldr	r6, [r4, #16]
 800ab06:	60c5      	str	r5, [r0, #12]
 800ab08:	f104 0914 	add.w	r9, r4, #20
 800ab0c:	f108 0514 	add.w	r5, r8, #20
 800ab10:	f100 0e14 	add.w	lr, r0, #20
 800ab14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab1c:	f108 0210 	add.w	r2, r8, #16
 800ab20:	46f2      	mov	sl, lr
 800ab22:	2100      	movs	r1, #0
 800ab24:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab2c:	fa1f f883 	uxth.w	r8, r3
 800ab30:	fa11 f18b 	uxtah	r1, r1, fp
 800ab34:	0c1b      	lsrs	r3, r3, #16
 800ab36:	eba1 0808 	sub.w	r8, r1, r8
 800ab3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab42:	fa1f f888 	uxth.w	r8, r8
 800ab46:	1419      	asrs	r1, r3, #16
 800ab48:	454e      	cmp	r6, r9
 800ab4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab4e:	f84a 3b04 	str.w	r3, [sl], #4
 800ab52:	d8e7      	bhi.n	800ab24 <__mdiff+0x80>
 800ab54:	1b33      	subs	r3, r6, r4
 800ab56:	3b15      	subs	r3, #21
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	3415      	adds	r4, #21
 800ab60:	42a6      	cmp	r6, r4
 800ab62:	bf38      	it	cc
 800ab64:	2304      	movcc	r3, #4
 800ab66:	441d      	add	r5, r3
 800ab68:	4473      	add	r3, lr
 800ab6a:	469e      	mov	lr, r3
 800ab6c:	462e      	mov	r6, r5
 800ab6e:	4566      	cmp	r6, ip
 800ab70:	d30e      	bcc.n	800ab90 <__mdiff+0xec>
 800ab72:	f10c 0203 	add.w	r2, ip, #3
 800ab76:	1b52      	subs	r2, r2, r5
 800ab78:	f022 0203 	bic.w	r2, r2, #3
 800ab7c:	3d03      	subs	r5, #3
 800ab7e:	45ac      	cmp	ip, r5
 800ab80:	bf38      	it	cc
 800ab82:	2200      	movcc	r2, #0
 800ab84:	441a      	add	r2, r3
 800ab86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ab8a:	b17b      	cbz	r3, 800abac <__mdiff+0x108>
 800ab8c:	6107      	str	r7, [r0, #16]
 800ab8e:	e7a3      	b.n	800aad8 <__mdiff+0x34>
 800ab90:	f856 8b04 	ldr.w	r8, [r6], #4
 800ab94:	fa11 f288 	uxtah	r2, r1, r8
 800ab98:	1414      	asrs	r4, r2, #16
 800ab9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab9e:	b292      	uxth	r2, r2
 800aba0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aba4:	f84e 2b04 	str.w	r2, [lr], #4
 800aba8:	1421      	asrs	r1, r4, #16
 800abaa:	e7e0      	b.n	800ab6e <__mdiff+0xca>
 800abac:	3f01      	subs	r7, #1
 800abae:	e7ea      	b.n	800ab86 <__mdiff+0xe2>
 800abb0:	0800bfb8 	.word	0x0800bfb8
 800abb4:	0800c0a8 	.word	0x0800c0a8

0800abb8 <__ulp>:
 800abb8:	b082      	sub	sp, #8
 800abba:	ed8d 0b00 	vstr	d0, [sp]
 800abbe:	9b01      	ldr	r3, [sp, #4]
 800abc0:	4912      	ldr	r1, [pc, #72]	; (800ac0c <__ulp+0x54>)
 800abc2:	4019      	ands	r1, r3
 800abc4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800abc8:	2900      	cmp	r1, #0
 800abca:	dd05      	ble.n	800abd8 <__ulp+0x20>
 800abcc:	2200      	movs	r2, #0
 800abce:	460b      	mov	r3, r1
 800abd0:	ec43 2b10 	vmov	d0, r2, r3
 800abd4:	b002      	add	sp, #8
 800abd6:	4770      	bx	lr
 800abd8:	4249      	negs	r1, r1
 800abda:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800abde:	ea4f 5021 	mov.w	r0, r1, asr #20
 800abe2:	f04f 0200 	mov.w	r2, #0
 800abe6:	f04f 0300 	mov.w	r3, #0
 800abea:	da04      	bge.n	800abf6 <__ulp+0x3e>
 800abec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800abf0:	fa41 f300 	asr.w	r3, r1, r0
 800abf4:	e7ec      	b.n	800abd0 <__ulp+0x18>
 800abf6:	f1a0 0114 	sub.w	r1, r0, #20
 800abfa:	291e      	cmp	r1, #30
 800abfc:	bfda      	itte	le
 800abfe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ac02:	fa20 f101 	lsrle.w	r1, r0, r1
 800ac06:	2101      	movgt	r1, #1
 800ac08:	460a      	mov	r2, r1
 800ac0a:	e7e1      	b.n	800abd0 <__ulp+0x18>
 800ac0c:	7ff00000 	.word	0x7ff00000

0800ac10 <__b2d>:
 800ac10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac12:	6905      	ldr	r5, [r0, #16]
 800ac14:	f100 0714 	add.w	r7, r0, #20
 800ac18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ac1c:	1f2e      	subs	r6, r5, #4
 800ac1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ac22:	4620      	mov	r0, r4
 800ac24:	f7ff fd48 	bl	800a6b8 <__hi0bits>
 800ac28:	f1c0 0320 	rsb	r3, r0, #32
 800ac2c:	280a      	cmp	r0, #10
 800ac2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800acac <__b2d+0x9c>
 800ac32:	600b      	str	r3, [r1, #0]
 800ac34:	dc14      	bgt.n	800ac60 <__b2d+0x50>
 800ac36:	f1c0 0e0b 	rsb	lr, r0, #11
 800ac3a:	fa24 f10e 	lsr.w	r1, r4, lr
 800ac3e:	42b7      	cmp	r7, r6
 800ac40:	ea41 030c 	orr.w	r3, r1, ip
 800ac44:	bf34      	ite	cc
 800ac46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ac4a:	2100      	movcs	r1, #0
 800ac4c:	3015      	adds	r0, #21
 800ac4e:	fa04 f000 	lsl.w	r0, r4, r0
 800ac52:	fa21 f10e 	lsr.w	r1, r1, lr
 800ac56:	ea40 0201 	orr.w	r2, r0, r1
 800ac5a:	ec43 2b10 	vmov	d0, r2, r3
 800ac5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac60:	42b7      	cmp	r7, r6
 800ac62:	bf3a      	itte	cc
 800ac64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ac68:	f1a5 0608 	subcc.w	r6, r5, #8
 800ac6c:	2100      	movcs	r1, #0
 800ac6e:	380b      	subs	r0, #11
 800ac70:	d017      	beq.n	800aca2 <__b2d+0x92>
 800ac72:	f1c0 0c20 	rsb	ip, r0, #32
 800ac76:	fa04 f500 	lsl.w	r5, r4, r0
 800ac7a:	42be      	cmp	r6, r7
 800ac7c:	fa21 f40c 	lsr.w	r4, r1, ip
 800ac80:	ea45 0504 	orr.w	r5, r5, r4
 800ac84:	bf8c      	ite	hi
 800ac86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ac8a:	2400      	movls	r4, #0
 800ac8c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ac90:	fa01 f000 	lsl.w	r0, r1, r0
 800ac94:	fa24 f40c 	lsr.w	r4, r4, ip
 800ac98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ac9c:	ea40 0204 	orr.w	r2, r0, r4
 800aca0:	e7db      	b.n	800ac5a <__b2d+0x4a>
 800aca2:	ea44 030c 	orr.w	r3, r4, ip
 800aca6:	460a      	mov	r2, r1
 800aca8:	e7d7      	b.n	800ac5a <__b2d+0x4a>
 800acaa:	bf00      	nop
 800acac:	3ff00000 	.word	0x3ff00000

0800acb0 <__d2b>:
 800acb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	4689      	mov	r9, r1
 800acb6:	2101      	movs	r1, #1
 800acb8:	ec57 6b10 	vmov	r6, r7, d0
 800acbc:	4690      	mov	r8, r2
 800acbe:	f7ff fc09 	bl	800a4d4 <_Balloc>
 800acc2:	4604      	mov	r4, r0
 800acc4:	b930      	cbnz	r0, 800acd4 <__d2b+0x24>
 800acc6:	4602      	mov	r2, r0
 800acc8:	4b25      	ldr	r3, [pc, #148]	; (800ad60 <__d2b+0xb0>)
 800acca:	4826      	ldr	r0, [pc, #152]	; (800ad64 <__d2b+0xb4>)
 800accc:	f240 310a 	movw	r1, #778	; 0x30a
 800acd0:	f000 fdbe 	bl	800b850 <__assert_func>
 800acd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800acd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800acdc:	bb35      	cbnz	r5, 800ad2c <__d2b+0x7c>
 800acde:	2e00      	cmp	r6, #0
 800ace0:	9301      	str	r3, [sp, #4]
 800ace2:	d028      	beq.n	800ad36 <__d2b+0x86>
 800ace4:	4668      	mov	r0, sp
 800ace6:	9600      	str	r6, [sp, #0]
 800ace8:	f7ff fd06 	bl	800a6f8 <__lo0bits>
 800acec:	9900      	ldr	r1, [sp, #0]
 800acee:	b300      	cbz	r0, 800ad32 <__d2b+0x82>
 800acf0:	9a01      	ldr	r2, [sp, #4]
 800acf2:	f1c0 0320 	rsb	r3, r0, #32
 800acf6:	fa02 f303 	lsl.w	r3, r2, r3
 800acfa:	430b      	orrs	r3, r1
 800acfc:	40c2      	lsrs	r2, r0
 800acfe:	6163      	str	r3, [r4, #20]
 800ad00:	9201      	str	r2, [sp, #4]
 800ad02:	9b01      	ldr	r3, [sp, #4]
 800ad04:	61a3      	str	r3, [r4, #24]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	bf14      	ite	ne
 800ad0a:	2202      	movne	r2, #2
 800ad0c:	2201      	moveq	r2, #1
 800ad0e:	6122      	str	r2, [r4, #16]
 800ad10:	b1d5      	cbz	r5, 800ad48 <__d2b+0x98>
 800ad12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad16:	4405      	add	r5, r0
 800ad18:	f8c9 5000 	str.w	r5, [r9]
 800ad1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad20:	f8c8 0000 	str.w	r0, [r8]
 800ad24:	4620      	mov	r0, r4
 800ad26:	b003      	add	sp, #12
 800ad28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad30:	e7d5      	b.n	800acde <__d2b+0x2e>
 800ad32:	6161      	str	r1, [r4, #20]
 800ad34:	e7e5      	b.n	800ad02 <__d2b+0x52>
 800ad36:	a801      	add	r0, sp, #4
 800ad38:	f7ff fcde 	bl	800a6f8 <__lo0bits>
 800ad3c:	9b01      	ldr	r3, [sp, #4]
 800ad3e:	6163      	str	r3, [r4, #20]
 800ad40:	2201      	movs	r2, #1
 800ad42:	6122      	str	r2, [r4, #16]
 800ad44:	3020      	adds	r0, #32
 800ad46:	e7e3      	b.n	800ad10 <__d2b+0x60>
 800ad48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad50:	f8c9 0000 	str.w	r0, [r9]
 800ad54:	6918      	ldr	r0, [r3, #16]
 800ad56:	f7ff fcaf 	bl	800a6b8 <__hi0bits>
 800ad5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad5e:	e7df      	b.n	800ad20 <__d2b+0x70>
 800ad60:	0800bfb8 	.word	0x0800bfb8
 800ad64:	0800c0a8 	.word	0x0800c0a8

0800ad68 <__ratio>:
 800ad68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	4688      	mov	r8, r1
 800ad6e:	4669      	mov	r1, sp
 800ad70:	4681      	mov	r9, r0
 800ad72:	f7ff ff4d 	bl	800ac10 <__b2d>
 800ad76:	a901      	add	r1, sp, #4
 800ad78:	4640      	mov	r0, r8
 800ad7a:	ec55 4b10 	vmov	r4, r5, d0
 800ad7e:	f7ff ff47 	bl	800ac10 <__b2d>
 800ad82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ad8a:	eba3 0c02 	sub.w	ip, r3, r2
 800ad8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad92:	1a9b      	subs	r3, r3, r2
 800ad94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ad98:	ec51 0b10 	vmov	r0, r1, d0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	bfd6      	itet	le
 800ada0:	460a      	movle	r2, r1
 800ada2:	462a      	movgt	r2, r5
 800ada4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ada8:	468b      	mov	fp, r1
 800adaa:	462f      	mov	r7, r5
 800adac:	bfd4      	ite	le
 800adae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800adb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800adb6:	4620      	mov	r0, r4
 800adb8:	ee10 2a10 	vmov	r2, s0
 800adbc:	465b      	mov	r3, fp
 800adbe:	4639      	mov	r1, r7
 800adc0:	f7f5 fd44 	bl	800084c <__aeabi_ddiv>
 800adc4:	ec41 0b10 	vmov	d0, r0, r1
 800adc8:	b003      	add	sp, #12
 800adca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800adce <__copybits>:
 800adce:	3901      	subs	r1, #1
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	1149      	asrs	r1, r1, #5
 800add4:	6914      	ldr	r4, [r2, #16]
 800add6:	3101      	adds	r1, #1
 800add8:	f102 0314 	add.w	r3, r2, #20
 800addc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ade0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ade4:	1f05      	subs	r5, r0, #4
 800ade6:	42a3      	cmp	r3, r4
 800ade8:	d30c      	bcc.n	800ae04 <__copybits+0x36>
 800adea:	1aa3      	subs	r3, r4, r2
 800adec:	3b11      	subs	r3, #17
 800adee:	f023 0303 	bic.w	r3, r3, #3
 800adf2:	3211      	adds	r2, #17
 800adf4:	42a2      	cmp	r2, r4
 800adf6:	bf88      	it	hi
 800adf8:	2300      	movhi	r3, #0
 800adfa:	4418      	add	r0, r3
 800adfc:	2300      	movs	r3, #0
 800adfe:	4288      	cmp	r0, r1
 800ae00:	d305      	bcc.n	800ae0e <__copybits+0x40>
 800ae02:	bd70      	pop	{r4, r5, r6, pc}
 800ae04:	f853 6b04 	ldr.w	r6, [r3], #4
 800ae08:	f845 6f04 	str.w	r6, [r5, #4]!
 800ae0c:	e7eb      	b.n	800ade6 <__copybits+0x18>
 800ae0e:	f840 3b04 	str.w	r3, [r0], #4
 800ae12:	e7f4      	b.n	800adfe <__copybits+0x30>

0800ae14 <__any_on>:
 800ae14:	f100 0214 	add.w	r2, r0, #20
 800ae18:	6900      	ldr	r0, [r0, #16]
 800ae1a:	114b      	asrs	r3, r1, #5
 800ae1c:	4298      	cmp	r0, r3
 800ae1e:	b510      	push	{r4, lr}
 800ae20:	db11      	blt.n	800ae46 <__any_on+0x32>
 800ae22:	dd0a      	ble.n	800ae3a <__any_on+0x26>
 800ae24:	f011 011f 	ands.w	r1, r1, #31
 800ae28:	d007      	beq.n	800ae3a <__any_on+0x26>
 800ae2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae2e:	fa24 f001 	lsr.w	r0, r4, r1
 800ae32:	fa00 f101 	lsl.w	r1, r0, r1
 800ae36:	428c      	cmp	r4, r1
 800ae38:	d10b      	bne.n	800ae52 <__any_on+0x3e>
 800ae3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d803      	bhi.n	800ae4a <__any_on+0x36>
 800ae42:	2000      	movs	r0, #0
 800ae44:	bd10      	pop	{r4, pc}
 800ae46:	4603      	mov	r3, r0
 800ae48:	e7f7      	b.n	800ae3a <__any_on+0x26>
 800ae4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae4e:	2900      	cmp	r1, #0
 800ae50:	d0f5      	beq.n	800ae3e <__any_on+0x2a>
 800ae52:	2001      	movs	r0, #1
 800ae54:	e7f6      	b.n	800ae44 <__any_on+0x30>

0800ae56 <_calloc_r>:
 800ae56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae58:	fba1 2402 	umull	r2, r4, r1, r2
 800ae5c:	b94c      	cbnz	r4, 800ae72 <_calloc_r+0x1c>
 800ae5e:	4611      	mov	r1, r2
 800ae60:	9201      	str	r2, [sp, #4]
 800ae62:	f000 f87b 	bl	800af5c <_malloc_r>
 800ae66:	9a01      	ldr	r2, [sp, #4]
 800ae68:	4605      	mov	r5, r0
 800ae6a:	b930      	cbnz	r0, 800ae7a <_calloc_r+0x24>
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	b003      	add	sp, #12
 800ae70:	bd30      	pop	{r4, r5, pc}
 800ae72:	220c      	movs	r2, #12
 800ae74:	6002      	str	r2, [r0, #0]
 800ae76:	2500      	movs	r5, #0
 800ae78:	e7f8      	b.n	800ae6c <_calloc_r+0x16>
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	f7fc faae 	bl	80073dc <memset>
 800ae80:	e7f4      	b.n	800ae6c <_calloc_r+0x16>
	...

0800ae84 <_free_r>:
 800ae84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae86:	2900      	cmp	r1, #0
 800ae88:	d044      	beq.n	800af14 <_free_r+0x90>
 800ae8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae8e:	9001      	str	r0, [sp, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f1a1 0404 	sub.w	r4, r1, #4
 800ae96:	bfb8      	it	lt
 800ae98:	18e4      	addlt	r4, r4, r3
 800ae9a:	f000 fe6d 	bl	800bb78 <__malloc_lock>
 800ae9e:	4a1e      	ldr	r2, [pc, #120]	; (800af18 <_free_r+0x94>)
 800aea0:	9801      	ldr	r0, [sp, #4]
 800aea2:	6813      	ldr	r3, [r2, #0]
 800aea4:	b933      	cbnz	r3, 800aeb4 <_free_r+0x30>
 800aea6:	6063      	str	r3, [r4, #4]
 800aea8:	6014      	str	r4, [r2, #0]
 800aeaa:	b003      	add	sp, #12
 800aeac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeb0:	f000 be68 	b.w	800bb84 <__malloc_unlock>
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	d908      	bls.n	800aeca <_free_r+0x46>
 800aeb8:	6825      	ldr	r5, [r4, #0]
 800aeba:	1961      	adds	r1, r4, r5
 800aebc:	428b      	cmp	r3, r1
 800aebe:	bf01      	itttt	eq
 800aec0:	6819      	ldreq	r1, [r3, #0]
 800aec2:	685b      	ldreq	r3, [r3, #4]
 800aec4:	1949      	addeq	r1, r1, r5
 800aec6:	6021      	streq	r1, [r4, #0]
 800aec8:	e7ed      	b.n	800aea6 <_free_r+0x22>
 800aeca:	461a      	mov	r2, r3
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	b10b      	cbz	r3, 800aed4 <_free_r+0x50>
 800aed0:	42a3      	cmp	r3, r4
 800aed2:	d9fa      	bls.n	800aeca <_free_r+0x46>
 800aed4:	6811      	ldr	r1, [r2, #0]
 800aed6:	1855      	adds	r5, r2, r1
 800aed8:	42a5      	cmp	r5, r4
 800aeda:	d10b      	bne.n	800aef4 <_free_r+0x70>
 800aedc:	6824      	ldr	r4, [r4, #0]
 800aede:	4421      	add	r1, r4
 800aee0:	1854      	adds	r4, r2, r1
 800aee2:	42a3      	cmp	r3, r4
 800aee4:	6011      	str	r1, [r2, #0]
 800aee6:	d1e0      	bne.n	800aeaa <_free_r+0x26>
 800aee8:	681c      	ldr	r4, [r3, #0]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	6053      	str	r3, [r2, #4]
 800aeee:	4421      	add	r1, r4
 800aef0:	6011      	str	r1, [r2, #0]
 800aef2:	e7da      	b.n	800aeaa <_free_r+0x26>
 800aef4:	d902      	bls.n	800aefc <_free_r+0x78>
 800aef6:	230c      	movs	r3, #12
 800aef8:	6003      	str	r3, [r0, #0]
 800aefa:	e7d6      	b.n	800aeaa <_free_r+0x26>
 800aefc:	6825      	ldr	r5, [r4, #0]
 800aefe:	1961      	adds	r1, r4, r5
 800af00:	428b      	cmp	r3, r1
 800af02:	bf04      	itt	eq
 800af04:	6819      	ldreq	r1, [r3, #0]
 800af06:	685b      	ldreq	r3, [r3, #4]
 800af08:	6063      	str	r3, [r4, #4]
 800af0a:	bf04      	itt	eq
 800af0c:	1949      	addeq	r1, r1, r5
 800af0e:	6021      	streq	r1, [r4, #0]
 800af10:	6054      	str	r4, [r2, #4]
 800af12:	e7ca      	b.n	800aeaa <_free_r+0x26>
 800af14:	b003      	add	sp, #12
 800af16:	bd30      	pop	{r4, r5, pc}
 800af18:	200003f8 	.word	0x200003f8

0800af1c <sbrk_aligned>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	4e0e      	ldr	r6, [pc, #56]	; (800af58 <sbrk_aligned+0x3c>)
 800af20:	460c      	mov	r4, r1
 800af22:	6831      	ldr	r1, [r6, #0]
 800af24:	4605      	mov	r5, r0
 800af26:	b911      	cbnz	r1, 800af2e <sbrk_aligned+0x12>
 800af28:	f000 fb4a 	bl	800b5c0 <_sbrk_r>
 800af2c:	6030      	str	r0, [r6, #0]
 800af2e:	4621      	mov	r1, r4
 800af30:	4628      	mov	r0, r5
 800af32:	f000 fb45 	bl	800b5c0 <_sbrk_r>
 800af36:	1c43      	adds	r3, r0, #1
 800af38:	d00a      	beq.n	800af50 <sbrk_aligned+0x34>
 800af3a:	1cc4      	adds	r4, r0, #3
 800af3c:	f024 0403 	bic.w	r4, r4, #3
 800af40:	42a0      	cmp	r0, r4
 800af42:	d007      	beq.n	800af54 <sbrk_aligned+0x38>
 800af44:	1a21      	subs	r1, r4, r0
 800af46:	4628      	mov	r0, r5
 800af48:	f000 fb3a 	bl	800b5c0 <_sbrk_r>
 800af4c:	3001      	adds	r0, #1
 800af4e:	d101      	bne.n	800af54 <sbrk_aligned+0x38>
 800af50:	f04f 34ff 	mov.w	r4, #4294967295
 800af54:	4620      	mov	r0, r4
 800af56:	bd70      	pop	{r4, r5, r6, pc}
 800af58:	200003fc 	.word	0x200003fc

0800af5c <_malloc_r>:
 800af5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af60:	1ccd      	adds	r5, r1, #3
 800af62:	f025 0503 	bic.w	r5, r5, #3
 800af66:	3508      	adds	r5, #8
 800af68:	2d0c      	cmp	r5, #12
 800af6a:	bf38      	it	cc
 800af6c:	250c      	movcc	r5, #12
 800af6e:	2d00      	cmp	r5, #0
 800af70:	4607      	mov	r7, r0
 800af72:	db01      	blt.n	800af78 <_malloc_r+0x1c>
 800af74:	42a9      	cmp	r1, r5
 800af76:	d905      	bls.n	800af84 <_malloc_r+0x28>
 800af78:	230c      	movs	r3, #12
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	2600      	movs	r6, #0
 800af7e:	4630      	mov	r0, r6
 800af80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af84:	4e2e      	ldr	r6, [pc, #184]	; (800b040 <_malloc_r+0xe4>)
 800af86:	f000 fdf7 	bl	800bb78 <__malloc_lock>
 800af8a:	6833      	ldr	r3, [r6, #0]
 800af8c:	461c      	mov	r4, r3
 800af8e:	bb34      	cbnz	r4, 800afde <_malloc_r+0x82>
 800af90:	4629      	mov	r1, r5
 800af92:	4638      	mov	r0, r7
 800af94:	f7ff ffc2 	bl	800af1c <sbrk_aligned>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	4604      	mov	r4, r0
 800af9c:	d14d      	bne.n	800b03a <_malloc_r+0xde>
 800af9e:	6834      	ldr	r4, [r6, #0]
 800afa0:	4626      	mov	r6, r4
 800afa2:	2e00      	cmp	r6, #0
 800afa4:	d140      	bne.n	800b028 <_malloc_r+0xcc>
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	4631      	mov	r1, r6
 800afaa:	4638      	mov	r0, r7
 800afac:	eb04 0803 	add.w	r8, r4, r3
 800afb0:	f000 fb06 	bl	800b5c0 <_sbrk_r>
 800afb4:	4580      	cmp	r8, r0
 800afb6:	d13a      	bne.n	800b02e <_malloc_r+0xd2>
 800afb8:	6821      	ldr	r1, [r4, #0]
 800afba:	3503      	adds	r5, #3
 800afbc:	1a6d      	subs	r5, r5, r1
 800afbe:	f025 0503 	bic.w	r5, r5, #3
 800afc2:	3508      	adds	r5, #8
 800afc4:	2d0c      	cmp	r5, #12
 800afc6:	bf38      	it	cc
 800afc8:	250c      	movcc	r5, #12
 800afca:	4629      	mov	r1, r5
 800afcc:	4638      	mov	r0, r7
 800afce:	f7ff ffa5 	bl	800af1c <sbrk_aligned>
 800afd2:	3001      	adds	r0, #1
 800afd4:	d02b      	beq.n	800b02e <_malloc_r+0xd2>
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	442b      	add	r3, r5
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	e00e      	b.n	800affc <_malloc_r+0xa0>
 800afde:	6822      	ldr	r2, [r4, #0]
 800afe0:	1b52      	subs	r2, r2, r5
 800afe2:	d41e      	bmi.n	800b022 <_malloc_r+0xc6>
 800afe4:	2a0b      	cmp	r2, #11
 800afe6:	d916      	bls.n	800b016 <_malloc_r+0xba>
 800afe8:	1961      	adds	r1, r4, r5
 800afea:	42a3      	cmp	r3, r4
 800afec:	6025      	str	r5, [r4, #0]
 800afee:	bf18      	it	ne
 800aff0:	6059      	strne	r1, [r3, #4]
 800aff2:	6863      	ldr	r3, [r4, #4]
 800aff4:	bf08      	it	eq
 800aff6:	6031      	streq	r1, [r6, #0]
 800aff8:	5162      	str	r2, [r4, r5]
 800affa:	604b      	str	r3, [r1, #4]
 800affc:	4638      	mov	r0, r7
 800affe:	f104 060b 	add.w	r6, r4, #11
 800b002:	f000 fdbf 	bl	800bb84 <__malloc_unlock>
 800b006:	f026 0607 	bic.w	r6, r6, #7
 800b00a:	1d23      	adds	r3, r4, #4
 800b00c:	1af2      	subs	r2, r6, r3
 800b00e:	d0b6      	beq.n	800af7e <_malloc_r+0x22>
 800b010:	1b9b      	subs	r3, r3, r6
 800b012:	50a3      	str	r3, [r4, r2]
 800b014:	e7b3      	b.n	800af7e <_malloc_r+0x22>
 800b016:	6862      	ldr	r2, [r4, #4]
 800b018:	42a3      	cmp	r3, r4
 800b01a:	bf0c      	ite	eq
 800b01c:	6032      	streq	r2, [r6, #0]
 800b01e:	605a      	strne	r2, [r3, #4]
 800b020:	e7ec      	b.n	800affc <_malloc_r+0xa0>
 800b022:	4623      	mov	r3, r4
 800b024:	6864      	ldr	r4, [r4, #4]
 800b026:	e7b2      	b.n	800af8e <_malloc_r+0x32>
 800b028:	4634      	mov	r4, r6
 800b02a:	6876      	ldr	r6, [r6, #4]
 800b02c:	e7b9      	b.n	800afa2 <_malloc_r+0x46>
 800b02e:	230c      	movs	r3, #12
 800b030:	603b      	str	r3, [r7, #0]
 800b032:	4638      	mov	r0, r7
 800b034:	f000 fda6 	bl	800bb84 <__malloc_unlock>
 800b038:	e7a1      	b.n	800af7e <_malloc_r+0x22>
 800b03a:	6025      	str	r5, [r4, #0]
 800b03c:	e7de      	b.n	800affc <_malloc_r+0xa0>
 800b03e:	bf00      	nop
 800b040:	200003f8 	.word	0x200003f8

0800b044 <__ssputs_r>:
 800b044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b048:	688e      	ldr	r6, [r1, #8]
 800b04a:	429e      	cmp	r6, r3
 800b04c:	4682      	mov	sl, r0
 800b04e:	460c      	mov	r4, r1
 800b050:	4690      	mov	r8, r2
 800b052:	461f      	mov	r7, r3
 800b054:	d838      	bhi.n	800b0c8 <__ssputs_r+0x84>
 800b056:	898a      	ldrh	r2, [r1, #12]
 800b058:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b05c:	d032      	beq.n	800b0c4 <__ssputs_r+0x80>
 800b05e:	6825      	ldr	r5, [r4, #0]
 800b060:	6909      	ldr	r1, [r1, #16]
 800b062:	eba5 0901 	sub.w	r9, r5, r1
 800b066:	6965      	ldr	r5, [r4, #20]
 800b068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b06c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b070:	3301      	adds	r3, #1
 800b072:	444b      	add	r3, r9
 800b074:	106d      	asrs	r5, r5, #1
 800b076:	429d      	cmp	r5, r3
 800b078:	bf38      	it	cc
 800b07a:	461d      	movcc	r5, r3
 800b07c:	0553      	lsls	r3, r2, #21
 800b07e:	d531      	bpl.n	800b0e4 <__ssputs_r+0xa0>
 800b080:	4629      	mov	r1, r5
 800b082:	f7ff ff6b 	bl	800af5c <_malloc_r>
 800b086:	4606      	mov	r6, r0
 800b088:	b950      	cbnz	r0, 800b0a0 <__ssputs_r+0x5c>
 800b08a:	230c      	movs	r3, #12
 800b08c:	f8ca 3000 	str.w	r3, [sl]
 800b090:	89a3      	ldrh	r3, [r4, #12]
 800b092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b096:	81a3      	strh	r3, [r4, #12]
 800b098:	f04f 30ff 	mov.w	r0, #4294967295
 800b09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0a0:	6921      	ldr	r1, [r4, #16]
 800b0a2:	464a      	mov	r2, r9
 800b0a4:	f7ff fa08 	bl	800a4b8 <memcpy>
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b0ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	6126      	str	r6, [r4, #16]
 800b0b6:	6165      	str	r5, [r4, #20]
 800b0b8:	444e      	add	r6, r9
 800b0ba:	eba5 0509 	sub.w	r5, r5, r9
 800b0be:	6026      	str	r6, [r4, #0]
 800b0c0:	60a5      	str	r5, [r4, #8]
 800b0c2:	463e      	mov	r6, r7
 800b0c4:	42be      	cmp	r6, r7
 800b0c6:	d900      	bls.n	800b0ca <__ssputs_r+0x86>
 800b0c8:	463e      	mov	r6, r7
 800b0ca:	6820      	ldr	r0, [r4, #0]
 800b0cc:	4632      	mov	r2, r6
 800b0ce:	4641      	mov	r1, r8
 800b0d0:	f000 fd38 	bl	800bb44 <memmove>
 800b0d4:	68a3      	ldr	r3, [r4, #8]
 800b0d6:	1b9b      	subs	r3, r3, r6
 800b0d8:	60a3      	str	r3, [r4, #8]
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	4433      	add	r3, r6
 800b0de:	6023      	str	r3, [r4, #0]
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	e7db      	b.n	800b09c <__ssputs_r+0x58>
 800b0e4:	462a      	mov	r2, r5
 800b0e6:	f000 fd53 	bl	800bb90 <_realloc_r>
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d1e1      	bne.n	800b0b4 <__ssputs_r+0x70>
 800b0f0:	6921      	ldr	r1, [r4, #16]
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	f7ff fec6 	bl	800ae84 <_free_r>
 800b0f8:	e7c7      	b.n	800b08a <__ssputs_r+0x46>
	...

0800b0fc <_svfiprintf_r>:
 800b0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b100:	4698      	mov	r8, r3
 800b102:	898b      	ldrh	r3, [r1, #12]
 800b104:	061b      	lsls	r3, r3, #24
 800b106:	b09d      	sub	sp, #116	; 0x74
 800b108:	4607      	mov	r7, r0
 800b10a:	460d      	mov	r5, r1
 800b10c:	4614      	mov	r4, r2
 800b10e:	d50e      	bpl.n	800b12e <_svfiprintf_r+0x32>
 800b110:	690b      	ldr	r3, [r1, #16]
 800b112:	b963      	cbnz	r3, 800b12e <_svfiprintf_r+0x32>
 800b114:	2140      	movs	r1, #64	; 0x40
 800b116:	f7ff ff21 	bl	800af5c <_malloc_r>
 800b11a:	6028      	str	r0, [r5, #0]
 800b11c:	6128      	str	r0, [r5, #16]
 800b11e:	b920      	cbnz	r0, 800b12a <_svfiprintf_r+0x2e>
 800b120:	230c      	movs	r3, #12
 800b122:	603b      	str	r3, [r7, #0]
 800b124:	f04f 30ff 	mov.w	r0, #4294967295
 800b128:	e0d1      	b.n	800b2ce <_svfiprintf_r+0x1d2>
 800b12a:	2340      	movs	r3, #64	; 0x40
 800b12c:	616b      	str	r3, [r5, #20]
 800b12e:	2300      	movs	r3, #0
 800b130:	9309      	str	r3, [sp, #36]	; 0x24
 800b132:	2320      	movs	r3, #32
 800b134:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b138:	f8cd 800c 	str.w	r8, [sp, #12]
 800b13c:	2330      	movs	r3, #48	; 0x30
 800b13e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b2e8 <_svfiprintf_r+0x1ec>
 800b142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b146:	f04f 0901 	mov.w	r9, #1
 800b14a:	4623      	mov	r3, r4
 800b14c:	469a      	mov	sl, r3
 800b14e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b152:	b10a      	cbz	r2, 800b158 <_svfiprintf_r+0x5c>
 800b154:	2a25      	cmp	r2, #37	; 0x25
 800b156:	d1f9      	bne.n	800b14c <_svfiprintf_r+0x50>
 800b158:	ebba 0b04 	subs.w	fp, sl, r4
 800b15c:	d00b      	beq.n	800b176 <_svfiprintf_r+0x7a>
 800b15e:	465b      	mov	r3, fp
 800b160:	4622      	mov	r2, r4
 800b162:	4629      	mov	r1, r5
 800b164:	4638      	mov	r0, r7
 800b166:	f7ff ff6d 	bl	800b044 <__ssputs_r>
 800b16a:	3001      	adds	r0, #1
 800b16c:	f000 80aa 	beq.w	800b2c4 <_svfiprintf_r+0x1c8>
 800b170:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b172:	445a      	add	r2, fp
 800b174:	9209      	str	r2, [sp, #36]	; 0x24
 800b176:	f89a 3000 	ldrb.w	r3, [sl]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	f000 80a2 	beq.w	800b2c4 <_svfiprintf_r+0x1c8>
 800b180:	2300      	movs	r3, #0
 800b182:	f04f 32ff 	mov.w	r2, #4294967295
 800b186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b18a:	f10a 0a01 	add.w	sl, sl, #1
 800b18e:	9304      	str	r3, [sp, #16]
 800b190:	9307      	str	r3, [sp, #28]
 800b192:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b196:	931a      	str	r3, [sp, #104]	; 0x68
 800b198:	4654      	mov	r4, sl
 800b19a:	2205      	movs	r2, #5
 800b19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a0:	4851      	ldr	r0, [pc, #324]	; (800b2e8 <_svfiprintf_r+0x1ec>)
 800b1a2:	f7f5 f81d 	bl	80001e0 <memchr>
 800b1a6:	9a04      	ldr	r2, [sp, #16]
 800b1a8:	b9d8      	cbnz	r0, 800b1e2 <_svfiprintf_r+0xe6>
 800b1aa:	06d0      	lsls	r0, r2, #27
 800b1ac:	bf44      	itt	mi
 800b1ae:	2320      	movmi	r3, #32
 800b1b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1b4:	0711      	lsls	r1, r2, #28
 800b1b6:	bf44      	itt	mi
 800b1b8:	232b      	movmi	r3, #43	; 0x2b
 800b1ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1be:	f89a 3000 	ldrb.w	r3, [sl]
 800b1c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c4:	d015      	beq.n	800b1f2 <_svfiprintf_r+0xf6>
 800b1c6:	9a07      	ldr	r2, [sp, #28]
 800b1c8:	4654      	mov	r4, sl
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	f04f 0c0a 	mov.w	ip, #10
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1d6:	3b30      	subs	r3, #48	; 0x30
 800b1d8:	2b09      	cmp	r3, #9
 800b1da:	d94e      	bls.n	800b27a <_svfiprintf_r+0x17e>
 800b1dc:	b1b0      	cbz	r0, 800b20c <_svfiprintf_r+0x110>
 800b1de:	9207      	str	r2, [sp, #28]
 800b1e0:	e014      	b.n	800b20c <_svfiprintf_r+0x110>
 800b1e2:	eba0 0308 	sub.w	r3, r0, r8
 800b1e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	9304      	str	r3, [sp, #16]
 800b1ee:	46a2      	mov	sl, r4
 800b1f0:	e7d2      	b.n	800b198 <_svfiprintf_r+0x9c>
 800b1f2:	9b03      	ldr	r3, [sp, #12]
 800b1f4:	1d19      	adds	r1, r3, #4
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	9103      	str	r1, [sp, #12]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bfbb      	ittet	lt
 800b1fe:	425b      	neglt	r3, r3
 800b200:	f042 0202 	orrlt.w	r2, r2, #2
 800b204:	9307      	strge	r3, [sp, #28]
 800b206:	9307      	strlt	r3, [sp, #28]
 800b208:	bfb8      	it	lt
 800b20a:	9204      	strlt	r2, [sp, #16]
 800b20c:	7823      	ldrb	r3, [r4, #0]
 800b20e:	2b2e      	cmp	r3, #46	; 0x2e
 800b210:	d10c      	bne.n	800b22c <_svfiprintf_r+0x130>
 800b212:	7863      	ldrb	r3, [r4, #1]
 800b214:	2b2a      	cmp	r3, #42	; 0x2a
 800b216:	d135      	bne.n	800b284 <_svfiprintf_r+0x188>
 800b218:	9b03      	ldr	r3, [sp, #12]
 800b21a:	1d1a      	adds	r2, r3, #4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	9203      	str	r2, [sp, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	bfb8      	it	lt
 800b224:	f04f 33ff 	movlt.w	r3, #4294967295
 800b228:	3402      	adds	r4, #2
 800b22a:	9305      	str	r3, [sp, #20]
 800b22c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2f8 <_svfiprintf_r+0x1fc>
 800b230:	7821      	ldrb	r1, [r4, #0]
 800b232:	2203      	movs	r2, #3
 800b234:	4650      	mov	r0, sl
 800b236:	f7f4 ffd3 	bl	80001e0 <memchr>
 800b23a:	b140      	cbz	r0, 800b24e <_svfiprintf_r+0x152>
 800b23c:	2340      	movs	r3, #64	; 0x40
 800b23e:	eba0 000a 	sub.w	r0, r0, sl
 800b242:	fa03 f000 	lsl.w	r0, r3, r0
 800b246:	9b04      	ldr	r3, [sp, #16]
 800b248:	4303      	orrs	r3, r0
 800b24a:	3401      	adds	r4, #1
 800b24c:	9304      	str	r3, [sp, #16]
 800b24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b252:	4826      	ldr	r0, [pc, #152]	; (800b2ec <_svfiprintf_r+0x1f0>)
 800b254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b258:	2206      	movs	r2, #6
 800b25a:	f7f4 ffc1 	bl	80001e0 <memchr>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d038      	beq.n	800b2d4 <_svfiprintf_r+0x1d8>
 800b262:	4b23      	ldr	r3, [pc, #140]	; (800b2f0 <_svfiprintf_r+0x1f4>)
 800b264:	bb1b      	cbnz	r3, 800b2ae <_svfiprintf_r+0x1b2>
 800b266:	9b03      	ldr	r3, [sp, #12]
 800b268:	3307      	adds	r3, #7
 800b26a:	f023 0307 	bic.w	r3, r3, #7
 800b26e:	3308      	adds	r3, #8
 800b270:	9303      	str	r3, [sp, #12]
 800b272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b274:	4433      	add	r3, r6
 800b276:	9309      	str	r3, [sp, #36]	; 0x24
 800b278:	e767      	b.n	800b14a <_svfiprintf_r+0x4e>
 800b27a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b27e:	460c      	mov	r4, r1
 800b280:	2001      	movs	r0, #1
 800b282:	e7a5      	b.n	800b1d0 <_svfiprintf_r+0xd4>
 800b284:	2300      	movs	r3, #0
 800b286:	3401      	adds	r4, #1
 800b288:	9305      	str	r3, [sp, #20]
 800b28a:	4619      	mov	r1, r3
 800b28c:	f04f 0c0a 	mov.w	ip, #10
 800b290:	4620      	mov	r0, r4
 800b292:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b296:	3a30      	subs	r2, #48	; 0x30
 800b298:	2a09      	cmp	r2, #9
 800b29a:	d903      	bls.n	800b2a4 <_svfiprintf_r+0x1a8>
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d0c5      	beq.n	800b22c <_svfiprintf_r+0x130>
 800b2a0:	9105      	str	r1, [sp, #20]
 800b2a2:	e7c3      	b.n	800b22c <_svfiprintf_r+0x130>
 800b2a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e7f0      	b.n	800b290 <_svfiprintf_r+0x194>
 800b2ae:	ab03      	add	r3, sp, #12
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	462a      	mov	r2, r5
 800b2b4:	4b0f      	ldr	r3, [pc, #60]	; (800b2f4 <_svfiprintf_r+0x1f8>)
 800b2b6:	a904      	add	r1, sp, #16
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7fc f937 	bl	800752c <_printf_float>
 800b2be:	1c42      	adds	r2, r0, #1
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	d1d6      	bne.n	800b272 <_svfiprintf_r+0x176>
 800b2c4:	89ab      	ldrh	r3, [r5, #12]
 800b2c6:	065b      	lsls	r3, r3, #25
 800b2c8:	f53f af2c 	bmi.w	800b124 <_svfiprintf_r+0x28>
 800b2cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2ce:	b01d      	add	sp, #116	; 0x74
 800b2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d4:	ab03      	add	r3, sp, #12
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	462a      	mov	r2, r5
 800b2da:	4b06      	ldr	r3, [pc, #24]	; (800b2f4 <_svfiprintf_r+0x1f8>)
 800b2dc:	a904      	add	r1, sp, #16
 800b2de:	4638      	mov	r0, r7
 800b2e0:	f7fc fbc8 	bl	8007a74 <_printf_i>
 800b2e4:	e7eb      	b.n	800b2be <_svfiprintf_r+0x1c2>
 800b2e6:	bf00      	nop
 800b2e8:	0800c204 	.word	0x0800c204
 800b2ec:	0800c20e 	.word	0x0800c20e
 800b2f0:	0800752d 	.word	0x0800752d
 800b2f4:	0800b045 	.word	0x0800b045
 800b2f8:	0800c20a 	.word	0x0800c20a

0800b2fc <__sfputc_r>:
 800b2fc:	6893      	ldr	r3, [r2, #8]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	2b00      	cmp	r3, #0
 800b302:	b410      	push	{r4}
 800b304:	6093      	str	r3, [r2, #8]
 800b306:	da08      	bge.n	800b31a <__sfputc_r+0x1e>
 800b308:	6994      	ldr	r4, [r2, #24]
 800b30a:	42a3      	cmp	r3, r4
 800b30c:	db01      	blt.n	800b312 <__sfputc_r+0x16>
 800b30e:	290a      	cmp	r1, #10
 800b310:	d103      	bne.n	800b31a <__sfputc_r+0x1e>
 800b312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b316:	f000 b9bb 	b.w	800b690 <__swbuf_r>
 800b31a:	6813      	ldr	r3, [r2, #0]
 800b31c:	1c58      	adds	r0, r3, #1
 800b31e:	6010      	str	r0, [r2, #0]
 800b320:	7019      	strb	r1, [r3, #0]
 800b322:	4608      	mov	r0, r1
 800b324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <__sfputs_r>:
 800b32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32c:	4606      	mov	r6, r0
 800b32e:	460f      	mov	r7, r1
 800b330:	4614      	mov	r4, r2
 800b332:	18d5      	adds	r5, r2, r3
 800b334:	42ac      	cmp	r4, r5
 800b336:	d101      	bne.n	800b33c <__sfputs_r+0x12>
 800b338:	2000      	movs	r0, #0
 800b33a:	e007      	b.n	800b34c <__sfputs_r+0x22>
 800b33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b340:	463a      	mov	r2, r7
 800b342:	4630      	mov	r0, r6
 800b344:	f7ff ffda 	bl	800b2fc <__sfputc_r>
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	d1f3      	bne.n	800b334 <__sfputs_r+0xa>
 800b34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b350 <_vfiprintf_r>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	460d      	mov	r5, r1
 800b356:	b09d      	sub	sp, #116	; 0x74
 800b358:	4614      	mov	r4, r2
 800b35a:	4698      	mov	r8, r3
 800b35c:	4606      	mov	r6, r0
 800b35e:	b118      	cbz	r0, 800b368 <_vfiprintf_r+0x18>
 800b360:	6983      	ldr	r3, [r0, #24]
 800b362:	b90b      	cbnz	r3, 800b368 <_vfiprintf_r+0x18>
 800b364:	f7fe fc7a 	bl	8009c5c <__sinit>
 800b368:	4b89      	ldr	r3, [pc, #548]	; (800b590 <_vfiprintf_r+0x240>)
 800b36a:	429d      	cmp	r5, r3
 800b36c:	d11b      	bne.n	800b3a6 <_vfiprintf_r+0x56>
 800b36e:	6875      	ldr	r5, [r6, #4]
 800b370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b372:	07d9      	lsls	r1, r3, #31
 800b374:	d405      	bmi.n	800b382 <_vfiprintf_r+0x32>
 800b376:	89ab      	ldrh	r3, [r5, #12]
 800b378:	059a      	lsls	r2, r3, #22
 800b37a:	d402      	bmi.n	800b382 <_vfiprintf_r+0x32>
 800b37c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b37e:	f7ff f87e 	bl	800a47e <__retarget_lock_acquire_recursive>
 800b382:	89ab      	ldrh	r3, [r5, #12]
 800b384:	071b      	lsls	r3, r3, #28
 800b386:	d501      	bpl.n	800b38c <_vfiprintf_r+0x3c>
 800b388:	692b      	ldr	r3, [r5, #16]
 800b38a:	b9eb      	cbnz	r3, 800b3c8 <_vfiprintf_r+0x78>
 800b38c:	4629      	mov	r1, r5
 800b38e:	4630      	mov	r0, r6
 800b390:	f000 f9f0 	bl	800b774 <__swsetup_r>
 800b394:	b1c0      	cbz	r0, 800b3c8 <_vfiprintf_r+0x78>
 800b396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b398:	07dc      	lsls	r4, r3, #31
 800b39a:	d50e      	bpl.n	800b3ba <_vfiprintf_r+0x6a>
 800b39c:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a0:	b01d      	add	sp, #116	; 0x74
 800b3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a6:	4b7b      	ldr	r3, [pc, #492]	; (800b594 <_vfiprintf_r+0x244>)
 800b3a8:	429d      	cmp	r5, r3
 800b3aa:	d101      	bne.n	800b3b0 <_vfiprintf_r+0x60>
 800b3ac:	68b5      	ldr	r5, [r6, #8]
 800b3ae:	e7df      	b.n	800b370 <_vfiprintf_r+0x20>
 800b3b0:	4b79      	ldr	r3, [pc, #484]	; (800b598 <_vfiprintf_r+0x248>)
 800b3b2:	429d      	cmp	r5, r3
 800b3b4:	bf08      	it	eq
 800b3b6:	68f5      	ldreq	r5, [r6, #12]
 800b3b8:	e7da      	b.n	800b370 <_vfiprintf_r+0x20>
 800b3ba:	89ab      	ldrh	r3, [r5, #12]
 800b3bc:	0598      	lsls	r0, r3, #22
 800b3be:	d4ed      	bmi.n	800b39c <_vfiprintf_r+0x4c>
 800b3c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3c2:	f7ff f85d 	bl	800a480 <__retarget_lock_release_recursive>
 800b3c6:	e7e9      	b.n	800b39c <_vfiprintf_r+0x4c>
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b3cc:	2320      	movs	r3, #32
 800b3ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3d6:	2330      	movs	r3, #48	; 0x30
 800b3d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b59c <_vfiprintf_r+0x24c>
 800b3dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3e0:	f04f 0901 	mov.w	r9, #1
 800b3e4:	4623      	mov	r3, r4
 800b3e6:	469a      	mov	sl, r3
 800b3e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3ec:	b10a      	cbz	r2, 800b3f2 <_vfiprintf_r+0xa2>
 800b3ee:	2a25      	cmp	r2, #37	; 0x25
 800b3f0:	d1f9      	bne.n	800b3e6 <_vfiprintf_r+0x96>
 800b3f2:	ebba 0b04 	subs.w	fp, sl, r4
 800b3f6:	d00b      	beq.n	800b410 <_vfiprintf_r+0xc0>
 800b3f8:	465b      	mov	r3, fp
 800b3fa:	4622      	mov	r2, r4
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	4630      	mov	r0, r6
 800b400:	f7ff ff93 	bl	800b32a <__sfputs_r>
 800b404:	3001      	adds	r0, #1
 800b406:	f000 80aa 	beq.w	800b55e <_vfiprintf_r+0x20e>
 800b40a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b40c:	445a      	add	r2, fp
 800b40e:	9209      	str	r2, [sp, #36]	; 0x24
 800b410:	f89a 3000 	ldrb.w	r3, [sl]
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 80a2 	beq.w	800b55e <_vfiprintf_r+0x20e>
 800b41a:	2300      	movs	r3, #0
 800b41c:	f04f 32ff 	mov.w	r2, #4294967295
 800b420:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b424:	f10a 0a01 	add.w	sl, sl, #1
 800b428:	9304      	str	r3, [sp, #16]
 800b42a:	9307      	str	r3, [sp, #28]
 800b42c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b430:	931a      	str	r3, [sp, #104]	; 0x68
 800b432:	4654      	mov	r4, sl
 800b434:	2205      	movs	r2, #5
 800b436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b43a:	4858      	ldr	r0, [pc, #352]	; (800b59c <_vfiprintf_r+0x24c>)
 800b43c:	f7f4 fed0 	bl	80001e0 <memchr>
 800b440:	9a04      	ldr	r2, [sp, #16]
 800b442:	b9d8      	cbnz	r0, 800b47c <_vfiprintf_r+0x12c>
 800b444:	06d1      	lsls	r1, r2, #27
 800b446:	bf44      	itt	mi
 800b448:	2320      	movmi	r3, #32
 800b44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b44e:	0713      	lsls	r3, r2, #28
 800b450:	bf44      	itt	mi
 800b452:	232b      	movmi	r3, #43	; 0x2b
 800b454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b458:	f89a 3000 	ldrb.w	r3, [sl]
 800b45c:	2b2a      	cmp	r3, #42	; 0x2a
 800b45e:	d015      	beq.n	800b48c <_vfiprintf_r+0x13c>
 800b460:	9a07      	ldr	r2, [sp, #28]
 800b462:	4654      	mov	r4, sl
 800b464:	2000      	movs	r0, #0
 800b466:	f04f 0c0a 	mov.w	ip, #10
 800b46a:	4621      	mov	r1, r4
 800b46c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b470:	3b30      	subs	r3, #48	; 0x30
 800b472:	2b09      	cmp	r3, #9
 800b474:	d94e      	bls.n	800b514 <_vfiprintf_r+0x1c4>
 800b476:	b1b0      	cbz	r0, 800b4a6 <_vfiprintf_r+0x156>
 800b478:	9207      	str	r2, [sp, #28]
 800b47a:	e014      	b.n	800b4a6 <_vfiprintf_r+0x156>
 800b47c:	eba0 0308 	sub.w	r3, r0, r8
 800b480:	fa09 f303 	lsl.w	r3, r9, r3
 800b484:	4313      	orrs	r3, r2
 800b486:	9304      	str	r3, [sp, #16]
 800b488:	46a2      	mov	sl, r4
 800b48a:	e7d2      	b.n	800b432 <_vfiprintf_r+0xe2>
 800b48c:	9b03      	ldr	r3, [sp, #12]
 800b48e:	1d19      	adds	r1, r3, #4
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	9103      	str	r1, [sp, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	bfbb      	ittet	lt
 800b498:	425b      	neglt	r3, r3
 800b49a:	f042 0202 	orrlt.w	r2, r2, #2
 800b49e:	9307      	strge	r3, [sp, #28]
 800b4a0:	9307      	strlt	r3, [sp, #28]
 800b4a2:	bfb8      	it	lt
 800b4a4:	9204      	strlt	r2, [sp, #16]
 800b4a6:	7823      	ldrb	r3, [r4, #0]
 800b4a8:	2b2e      	cmp	r3, #46	; 0x2e
 800b4aa:	d10c      	bne.n	800b4c6 <_vfiprintf_r+0x176>
 800b4ac:	7863      	ldrb	r3, [r4, #1]
 800b4ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b0:	d135      	bne.n	800b51e <_vfiprintf_r+0x1ce>
 800b4b2:	9b03      	ldr	r3, [sp, #12]
 800b4b4:	1d1a      	adds	r2, r3, #4
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	9203      	str	r2, [sp, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	bfb8      	it	lt
 800b4be:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4c2:	3402      	adds	r4, #2
 800b4c4:	9305      	str	r3, [sp, #20]
 800b4c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5ac <_vfiprintf_r+0x25c>
 800b4ca:	7821      	ldrb	r1, [r4, #0]
 800b4cc:	2203      	movs	r2, #3
 800b4ce:	4650      	mov	r0, sl
 800b4d0:	f7f4 fe86 	bl	80001e0 <memchr>
 800b4d4:	b140      	cbz	r0, 800b4e8 <_vfiprintf_r+0x198>
 800b4d6:	2340      	movs	r3, #64	; 0x40
 800b4d8:	eba0 000a 	sub.w	r0, r0, sl
 800b4dc:	fa03 f000 	lsl.w	r0, r3, r0
 800b4e0:	9b04      	ldr	r3, [sp, #16]
 800b4e2:	4303      	orrs	r3, r0
 800b4e4:	3401      	adds	r4, #1
 800b4e6:	9304      	str	r3, [sp, #16]
 800b4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ec:	482c      	ldr	r0, [pc, #176]	; (800b5a0 <_vfiprintf_r+0x250>)
 800b4ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4f2:	2206      	movs	r2, #6
 800b4f4:	f7f4 fe74 	bl	80001e0 <memchr>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d03f      	beq.n	800b57c <_vfiprintf_r+0x22c>
 800b4fc:	4b29      	ldr	r3, [pc, #164]	; (800b5a4 <_vfiprintf_r+0x254>)
 800b4fe:	bb1b      	cbnz	r3, 800b548 <_vfiprintf_r+0x1f8>
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	3307      	adds	r3, #7
 800b504:	f023 0307 	bic.w	r3, r3, #7
 800b508:	3308      	adds	r3, #8
 800b50a:	9303      	str	r3, [sp, #12]
 800b50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b50e:	443b      	add	r3, r7
 800b510:	9309      	str	r3, [sp, #36]	; 0x24
 800b512:	e767      	b.n	800b3e4 <_vfiprintf_r+0x94>
 800b514:	fb0c 3202 	mla	r2, ip, r2, r3
 800b518:	460c      	mov	r4, r1
 800b51a:	2001      	movs	r0, #1
 800b51c:	e7a5      	b.n	800b46a <_vfiprintf_r+0x11a>
 800b51e:	2300      	movs	r3, #0
 800b520:	3401      	adds	r4, #1
 800b522:	9305      	str	r3, [sp, #20]
 800b524:	4619      	mov	r1, r3
 800b526:	f04f 0c0a 	mov.w	ip, #10
 800b52a:	4620      	mov	r0, r4
 800b52c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b530:	3a30      	subs	r2, #48	; 0x30
 800b532:	2a09      	cmp	r2, #9
 800b534:	d903      	bls.n	800b53e <_vfiprintf_r+0x1ee>
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0c5      	beq.n	800b4c6 <_vfiprintf_r+0x176>
 800b53a:	9105      	str	r1, [sp, #20]
 800b53c:	e7c3      	b.n	800b4c6 <_vfiprintf_r+0x176>
 800b53e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b542:	4604      	mov	r4, r0
 800b544:	2301      	movs	r3, #1
 800b546:	e7f0      	b.n	800b52a <_vfiprintf_r+0x1da>
 800b548:	ab03      	add	r3, sp, #12
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	462a      	mov	r2, r5
 800b54e:	4b16      	ldr	r3, [pc, #88]	; (800b5a8 <_vfiprintf_r+0x258>)
 800b550:	a904      	add	r1, sp, #16
 800b552:	4630      	mov	r0, r6
 800b554:	f7fb ffea 	bl	800752c <_printf_float>
 800b558:	4607      	mov	r7, r0
 800b55a:	1c78      	adds	r0, r7, #1
 800b55c:	d1d6      	bne.n	800b50c <_vfiprintf_r+0x1bc>
 800b55e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b560:	07d9      	lsls	r1, r3, #31
 800b562:	d405      	bmi.n	800b570 <_vfiprintf_r+0x220>
 800b564:	89ab      	ldrh	r3, [r5, #12]
 800b566:	059a      	lsls	r2, r3, #22
 800b568:	d402      	bmi.n	800b570 <_vfiprintf_r+0x220>
 800b56a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b56c:	f7fe ff88 	bl	800a480 <__retarget_lock_release_recursive>
 800b570:	89ab      	ldrh	r3, [r5, #12]
 800b572:	065b      	lsls	r3, r3, #25
 800b574:	f53f af12 	bmi.w	800b39c <_vfiprintf_r+0x4c>
 800b578:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b57a:	e711      	b.n	800b3a0 <_vfiprintf_r+0x50>
 800b57c:	ab03      	add	r3, sp, #12
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	462a      	mov	r2, r5
 800b582:	4b09      	ldr	r3, [pc, #36]	; (800b5a8 <_vfiprintf_r+0x258>)
 800b584:	a904      	add	r1, sp, #16
 800b586:	4630      	mov	r0, r6
 800b588:	f7fc fa74 	bl	8007a74 <_printf_i>
 800b58c:	e7e4      	b.n	800b558 <_vfiprintf_r+0x208>
 800b58e:	bf00      	nop
 800b590:	0800bfec 	.word	0x0800bfec
 800b594:	0800c00c 	.word	0x0800c00c
 800b598:	0800bfcc 	.word	0x0800bfcc
 800b59c:	0800c204 	.word	0x0800c204
 800b5a0:	0800c20e 	.word	0x0800c20e
 800b5a4:	0800752d 	.word	0x0800752d
 800b5a8:	0800b32b 	.word	0x0800b32b
 800b5ac:	0800c20a 	.word	0x0800c20a

0800b5b0 <nan>:
 800b5b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b5b8 <nan+0x8>
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	00000000 	.word	0x00000000
 800b5bc:	7ff80000 	.word	0x7ff80000

0800b5c0 <_sbrk_r>:
 800b5c0:	b538      	push	{r3, r4, r5, lr}
 800b5c2:	4d06      	ldr	r5, [pc, #24]	; (800b5dc <_sbrk_r+0x1c>)
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	4608      	mov	r0, r1
 800b5ca:	602b      	str	r3, [r5, #0]
 800b5cc:	f7f6 fbe6 	bl	8001d9c <_sbrk>
 800b5d0:	1c43      	adds	r3, r0, #1
 800b5d2:	d102      	bne.n	800b5da <_sbrk_r+0x1a>
 800b5d4:	682b      	ldr	r3, [r5, #0]
 800b5d6:	b103      	cbz	r3, 800b5da <_sbrk_r+0x1a>
 800b5d8:	6023      	str	r3, [r4, #0]
 800b5da:	bd38      	pop	{r3, r4, r5, pc}
 800b5dc:	20000400 	.word	0x20000400

0800b5e0 <__sread>:
 800b5e0:	b510      	push	{r4, lr}
 800b5e2:	460c      	mov	r4, r1
 800b5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e8:	f000 fb02 	bl	800bbf0 <_read_r>
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	bfab      	itete	ge
 800b5f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5f2:	89a3      	ldrhlt	r3, [r4, #12]
 800b5f4:	181b      	addge	r3, r3, r0
 800b5f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5fa:	bfac      	ite	ge
 800b5fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5fe:	81a3      	strhlt	r3, [r4, #12]
 800b600:	bd10      	pop	{r4, pc}

0800b602 <__swrite>:
 800b602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b606:	461f      	mov	r7, r3
 800b608:	898b      	ldrh	r3, [r1, #12]
 800b60a:	05db      	lsls	r3, r3, #23
 800b60c:	4605      	mov	r5, r0
 800b60e:	460c      	mov	r4, r1
 800b610:	4616      	mov	r6, r2
 800b612:	d505      	bpl.n	800b620 <__swrite+0x1e>
 800b614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b618:	2302      	movs	r3, #2
 800b61a:	2200      	movs	r2, #0
 800b61c:	f000 fa1a 	bl	800ba54 <_lseek_r>
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b62a:	81a3      	strh	r3, [r4, #12]
 800b62c:	4632      	mov	r2, r6
 800b62e:	463b      	mov	r3, r7
 800b630:	4628      	mov	r0, r5
 800b632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b636:	f000 b88b 	b.w	800b750 <_write_r>

0800b63a <__sseek>:
 800b63a:	b510      	push	{r4, lr}
 800b63c:	460c      	mov	r4, r1
 800b63e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b642:	f000 fa07 	bl	800ba54 <_lseek_r>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	bf15      	itete	ne
 800b64c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b64e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b656:	81a3      	strheq	r3, [r4, #12]
 800b658:	bf18      	it	ne
 800b65a:	81a3      	strhne	r3, [r4, #12]
 800b65c:	bd10      	pop	{r4, pc}

0800b65e <__sclose>:
 800b65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b662:	f000 b913 	b.w	800b88c <_close_r>

0800b666 <strncmp>:
 800b666:	b510      	push	{r4, lr}
 800b668:	b17a      	cbz	r2, 800b68a <strncmp+0x24>
 800b66a:	4603      	mov	r3, r0
 800b66c:	3901      	subs	r1, #1
 800b66e:	1884      	adds	r4, r0, r2
 800b670:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b674:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b678:	4290      	cmp	r0, r2
 800b67a:	d101      	bne.n	800b680 <strncmp+0x1a>
 800b67c:	42a3      	cmp	r3, r4
 800b67e:	d101      	bne.n	800b684 <strncmp+0x1e>
 800b680:	1a80      	subs	r0, r0, r2
 800b682:	bd10      	pop	{r4, pc}
 800b684:	2800      	cmp	r0, #0
 800b686:	d1f3      	bne.n	800b670 <strncmp+0xa>
 800b688:	e7fa      	b.n	800b680 <strncmp+0x1a>
 800b68a:	4610      	mov	r0, r2
 800b68c:	e7f9      	b.n	800b682 <strncmp+0x1c>
	...

0800b690 <__swbuf_r>:
 800b690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b692:	460e      	mov	r6, r1
 800b694:	4614      	mov	r4, r2
 800b696:	4605      	mov	r5, r0
 800b698:	b118      	cbz	r0, 800b6a2 <__swbuf_r+0x12>
 800b69a:	6983      	ldr	r3, [r0, #24]
 800b69c:	b90b      	cbnz	r3, 800b6a2 <__swbuf_r+0x12>
 800b69e:	f7fe fadd 	bl	8009c5c <__sinit>
 800b6a2:	4b21      	ldr	r3, [pc, #132]	; (800b728 <__swbuf_r+0x98>)
 800b6a4:	429c      	cmp	r4, r3
 800b6a6:	d12b      	bne.n	800b700 <__swbuf_r+0x70>
 800b6a8:	686c      	ldr	r4, [r5, #4]
 800b6aa:	69a3      	ldr	r3, [r4, #24]
 800b6ac:	60a3      	str	r3, [r4, #8]
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	071a      	lsls	r2, r3, #28
 800b6b2:	d52f      	bpl.n	800b714 <__swbuf_r+0x84>
 800b6b4:	6923      	ldr	r3, [r4, #16]
 800b6b6:	b36b      	cbz	r3, 800b714 <__swbuf_r+0x84>
 800b6b8:	6923      	ldr	r3, [r4, #16]
 800b6ba:	6820      	ldr	r0, [r4, #0]
 800b6bc:	1ac0      	subs	r0, r0, r3
 800b6be:	6963      	ldr	r3, [r4, #20]
 800b6c0:	b2f6      	uxtb	r6, r6
 800b6c2:	4283      	cmp	r3, r0
 800b6c4:	4637      	mov	r7, r6
 800b6c6:	dc04      	bgt.n	800b6d2 <__swbuf_r+0x42>
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f000 f974 	bl	800b9b8 <_fflush_r>
 800b6d0:	bb30      	cbnz	r0, 800b720 <__swbuf_r+0x90>
 800b6d2:	68a3      	ldr	r3, [r4, #8]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	60a3      	str	r3, [r4, #8]
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	6022      	str	r2, [r4, #0]
 800b6de:	701e      	strb	r6, [r3, #0]
 800b6e0:	6963      	ldr	r3, [r4, #20]
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	4283      	cmp	r3, r0
 800b6e6:	d004      	beq.n	800b6f2 <__swbuf_r+0x62>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	07db      	lsls	r3, r3, #31
 800b6ec:	d506      	bpl.n	800b6fc <__swbuf_r+0x6c>
 800b6ee:	2e0a      	cmp	r6, #10
 800b6f0:	d104      	bne.n	800b6fc <__swbuf_r+0x6c>
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	f000 f95f 	bl	800b9b8 <_fflush_r>
 800b6fa:	b988      	cbnz	r0, 800b720 <__swbuf_r+0x90>
 800b6fc:	4638      	mov	r0, r7
 800b6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b700:	4b0a      	ldr	r3, [pc, #40]	; (800b72c <__swbuf_r+0x9c>)
 800b702:	429c      	cmp	r4, r3
 800b704:	d101      	bne.n	800b70a <__swbuf_r+0x7a>
 800b706:	68ac      	ldr	r4, [r5, #8]
 800b708:	e7cf      	b.n	800b6aa <__swbuf_r+0x1a>
 800b70a:	4b09      	ldr	r3, [pc, #36]	; (800b730 <__swbuf_r+0xa0>)
 800b70c:	429c      	cmp	r4, r3
 800b70e:	bf08      	it	eq
 800b710:	68ec      	ldreq	r4, [r5, #12]
 800b712:	e7ca      	b.n	800b6aa <__swbuf_r+0x1a>
 800b714:	4621      	mov	r1, r4
 800b716:	4628      	mov	r0, r5
 800b718:	f000 f82c 	bl	800b774 <__swsetup_r>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d0cb      	beq.n	800b6b8 <__swbuf_r+0x28>
 800b720:	f04f 37ff 	mov.w	r7, #4294967295
 800b724:	e7ea      	b.n	800b6fc <__swbuf_r+0x6c>
 800b726:	bf00      	nop
 800b728:	0800bfec 	.word	0x0800bfec
 800b72c:	0800c00c 	.word	0x0800c00c
 800b730:	0800bfcc 	.word	0x0800bfcc

0800b734 <__ascii_wctomb>:
 800b734:	b149      	cbz	r1, 800b74a <__ascii_wctomb+0x16>
 800b736:	2aff      	cmp	r2, #255	; 0xff
 800b738:	bf85      	ittet	hi
 800b73a:	238a      	movhi	r3, #138	; 0x8a
 800b73c:	6003      	strhi	r3, [r0, #0]
 800b73e:	700a      	strbls	r2, [r1, #0]
 800b740:	f04f 30ff 	movhi.w	r0, #4294967295
 800b744:	bf98      	it	ls
 800b746:	2001      	movls	r0, #1
 800b748:	4770      	bx	lr
 800b74a:	4608      	mov	r0, r1
 800b74c:	4770      	bx	lr
	...

0800b750 <_write_r>:
 800b750:	b538      	push	{r3, r4, r5, lr}
 800b752:	4d07      	ldr	r5, [pc, #28]	; (800b770 <_write_r+0x20>)
 800b754:	4604      	mov	r4, r0
 800b756:	4608      	mov	r0, r1
 800b758:	4611      	mov	r1, r2
 800b75a:	2200      	movs	r2, #0
 800b75c:	602a      	str	r2, [r5, #0]
 800b75e:	461a      	mov	r2, r3
 800b760:	f7f5 fc71 	bl	8001046 <_write>
 800b764:	1c43      	adds	r3, r0, #1
 800b766:	d102      	bne.n	800b76e <_write_r+0x1e>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	b103      	cbz	r3, 800b76e <_write_r+0x1e>
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	20000400 	.word	0x20000400

0800b774 <__swsetup_r>:
 800b774:	4b32      	ldr	r3, [pc, #200]	; (800b840 <__swsetup_r+0xcc>)
 800b776:	b570      	push	{r4, r5, r6, lr}
 800b778:	681d      	ldr	r5, [r3, #0]
 800b77a:	4606      	mov	r6, r0
 800b77c:	460c      	mov	r4, r1
 800b77e:	b125      	cbz	r5, 800b78a <__swsetup_r+0x16>
 800b780:	69ab      	ldr	r3, [r5, #24]
 800b782:	b913      	cbnz	r3, 800b78a <__swsetup_r+0x16>
 800b784:	4628      	mov	r0, r5
 800b786:	f7fe fa69 	bl	8009c5c <__sinit>
 800b78a:	4b2e      	ldr	r3, [pc, #184]	; (800b844 <__swsetup_r+0xd0>)
 800b78c:	429c      	cmp	r4, r3
 800b78e:	d10f      	bne.n	800b7b0 <__swsetup_r+0x3c>
 800b790:	686c      	ldr	r4, [r5, #4]
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b798:	0719      	lsls	r1, r3, #28
 800b79a:	d42c      	bmi.n	800b7f6 <__swsetup_r+0x82>
 800b79c:	06dd      	lsls	r5, r3, #27
 800b79e:	d411      	bmi.n	800b7c4 <__swsetup_r+0x50>
 800b7a0:	2309      	movs	r3, #9
 800b7a2:	6033      	str	r3, [r6, #0]
 800b7a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7a8:	81a3      	strh	r3, [r4, #12]
 800b7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ae:	e03e      	b.n	800b82e <__swsetup_r+0xba>
 800b7b0:	4b25      	ldr	r3, [pc, #148]	; (800b848 <__swsetup_r+0xd4>)
 800b7b2:	429c      	cmp	r4, r3
 800b7b4:	d101      	bne.n	800b7ba <__swsetup_r+0x46>
 800b7b6:	68ac      	ldr	r4, [r5, #8]
 800b7b8:	e7eb      	b.n	800b792 <__swsetup_r+0x1e>
 800b7ba:	4b24      	ldr	r3, [pc, #144]	; (800b84c <__swsetup_r+0xd8>)
 800b7bc:	429c      	cmp	r4, r3
 800b7be:	bf08      	it	eq
 800b7c0:	68ec      	ldreq	r4, [r5, #12]
 800b7c2:	e7e6      	b.n	800b792 <__swsetup_r+0x1e>
 800b7c4:	0758      	lsls	r0, r3, #29
 800b7c6:	d512      	bpl.n	800b7ee <__swsetup_r+0x7a>
 800b7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ca:	b141      	cbz	r1, 800b7de <__swsetup_r+0x6a>
 800b7cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7d0:	4299      	cmp	r1, r3
 800b7d2:	d002      	beq.n	800b7da <__swsetup_r+0x66>
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f7ff fb55 	bl	800ae84 <_free_r>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	6363      	str	r3, [r4, #52]	; 0x34
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7e4:	81a3      	strh	r3, [r4, #12]
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	6063      	str	r3, [r4, #4]
 800b7ea:	6923      	ldr	r3, [r4, #16]
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	89a3      	ldrh	r3, [r4, #12]
 800b7f0:	f043 0308 	orr.w	r3, r3, #8
 800b7f4:	81a3      	strh	r3, [r4, #12]
 800b7f6:	6923      	ldr	r3, [r4, #16]
 800b7f8:	b94b      	cbnz	r3, 800b80e <__swsetup_r+0x9a>
 800b7fa:	89a3      	ldrh	r3, [r4, #12]
 800b7fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b804:	d003      	beq.n	800b80e <__swsetup_r+0x9a>
 800b806:	4621      	mov	r1, r4
 800b808:	4630      	mov	r0, r6
 800b80a:	f000 f95b 	bl	800bac4 <__smakebuf_r>
 800b80e:	89a0      	ldrh	r0, [r4, #12]
 800b810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b814:	f010 0301 	ands.w	r3, r0, #1
 800b818:	d00a      	beq.n	800b830 <__swsetup_r+0xbc>
 800b81a:	2300      	movs	r3, #0
 800b81c:	60a3      	str	r3, [r4, #8]
 800b81e:	6963      	ldr	r3, [r4, #20]
 800b820:	425b      	negs	r3, r3
 800b822:	61a3      	str	r3, [r4, #24]
 800b824:	6923      	ldr	r3, [r4, #16]
 800b826:	b943      	cbnz	r3, 800b83a <__swsetup_r+0xc6>
 800b828:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b82c:	d1ba      	bne.n	800b7a4 <__swsetup_r+0x30>
 800b82e:	bd70      	pop	{r4, r5, r6, pc}
 800b830:	0781      	lsls	r1, r0, #30
 800b832:	bf58      	it	pl
 800b834:	6963      	ldrpl	r3, [r4, #20]
 800b836:	60a3      	str	r3, [r4, #8]
 800b838:	e7f4      	b.n	800b824 <__swsetup_r+0xb0>
 800b83a:	2000      	movs	r0, #0
 800b83c:	e7f7      	b.n	800b82e <__swsetup_r+0xba>
 800b83e:	bf00      	nop
 800b840:	2000000c 	.word	0x2000000c
 800b844:	0800bfec 	.word	0x0800bfec
 800b848:	0800c00c 	.word	0x0800c00c
 800b84c:	0800bfcc 	.word	0x0800bfcc

0800b850 <__assert_func>:
 800b850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b852:	4614      	mov	r4, r2
 800b854:	461a      	mov	r2, r3
 800b856:	4b09      	ldr	r3, [pc, #36]	; (800b87c <__assert_func+0x2c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4605      	mov	r5, r0
 800b85c:	68d8      	ldr	r0, [r3, #12]
 800b85e:	b14c      	cbz	r4, 800b874 <__assert_func+0x24>
 800b860:	4b07      	ldr	r3, [pc, #28]	; (800b880 <__assert_func+0x30>)
 800b862:	9100      	str	r1, [sp, #0]
 800b864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b868:	4906      	ldr	r1, [pc, #24]	; (800b884 <__assert_func+0x34>)
 800b86a:	462b      	mov	r3, r5
 800b86c:	f000 f8e0 	bl	800ba30 <fiprintf>
 800b870:	f000 f9d0 	bl	800bc14 <abort>
 800b874:	4b04      	ldr	r3, [pc, #16]	; (800b888 <__assert_func+0x38>)
 800b876:	461c      	mov	r4, r3
 800b878:	e7f3      	b.n	800b862 <__assert_func+0x12>
 800b87a:	bf00      	nop
 800b87c:	2000000c 	.word	0x2000000c
 800b880:	0800c215 	.word	0x0800c215
 800b884:	0800c222 	.word	0x0800c222
 800b888:	0800c250 	.word	0x0800c250

0800b88c <_close_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d06      	ldr	r5, [pc, #24]	; (800b8a8 <_close_r+0x1c>)
 800b890:	2300      	movs	r3, #0
 800b892:	4604      	mov	r4, r0
 800b894:	4608      	mov	r0, r1
 800b896:	602b      	str	r3, [r5, #0]
 800b898:	f7f6 fa4b 	bl	8001d32 <_close>
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d102      	bne.n	800b8a6 <_close_r+0x1a>
 800b8a0:	682b      	ldr	r3, [r5, #0]
 800b8a2:	b103      	cbz	r3, 800b8a6 <_close_r+0x1a>
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	20000400 	.word	0x20000400

0800b8ac <__sflush_r>:
 800b8ac:	898a      	ldrh	r2, [r1, #12]
 800b8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	0710      	lsls	r0, r2, #28
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	d458      	bmi.n	800b96c <__sflush_r+0xc0>
 800b8ba:	684b      	ldr	r3, [r1, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	dc05      	bgt.n	800b8cc <__sflush_r+0x20>
 800b8c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	dc02      	bgt.n	800b8cc <__sflush_r+0x20>
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8ce:	2e00      	cmp	r6, #0
 800b8d0:	d0f9      	beq.n	800b8c6 <__sflush_r+0x1a>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8d8:	682f      	ldr	r7, [r5, #0]
 800b8da:	602b      	str	r3, [r5, #0]
 800b8dc:	d032      	beq.n	800b944 <__sflush_r+0x98>
 800b8de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	075a      	lsls	r2, r3, #29
 800b8e4:	d505      	bpl.n	800b8f2 <__sflush_r+0x46>
 800b8e6:	6863      	ldr	r3, [r4, #4]
 800b8e8:	1ac0      	subs	r0, r0, r3
 800b8ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8ec:	b10b      	cbz	r3, 800b8f2 <__sflush_r+0x46>
 800b8ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8f0:	1ac0      	subs	r0, r0, r3
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8f8:	6a21      	ldr	r1, [r4, #32]
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	47b0      	blx	r6
 800b8fe:	1c43      	adds	r3, r0, #1
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	d106      	bne.n	800b912 <__sflush_r+0x66>
 800b904:	6829      	ldr	r1, [r5, #0]
 800b906:	291d      	cmp	r1, #29
 800b908:	d82c      	bhi.n	800b964 <__sflush_r+0xb8>
 800b90a:	4a2a      	ldr	r2, [pc, #168]	; (800b9b4 <__sflush_r+0x108>)
 800b90c:	40ca      	lsrs	r2, r1
 800b90e:	07d6      	lsls	r6, r2, #31
 800b910:	d528      	bpl.n	800b964 <__sflush_r+0xb8>
 800b912:	2200      	movs	r2, #0
 800b914:	6062      	str	r2, [r4, #4]
 800b916:	04d9      	lsls	r1, r3, #19
 800b918:	6922      	ldr	r2, [r4, #16]
 800b91a:	6022      	str	r2, [r4, #0]
 800b91c:	d504      	bpl.n	800b928 <__sflush_r+0x7c>
 800b91e:	1c42      	adds	r2, r0, #1
 800b920:	d101      	bne.n	800b926 <__sflush_r+0x7a>
 800b922:	682b      	ldr	r3, [r5, #0]
 800b924:	b903      	cbnz	r3, 800b928 <__sflush_r+0x7c>
 800b926:	6560      	str	r0, [r4, #84]	; 0x54
 800b928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b92a:	602f      	str	r7, [r5, #0]
 800b92c:	2900      	cmp	r1, #0
 800b92e:	d0ca      	beq.n	800b8c6 <__sflush_r+0x1a>
 800b930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b934:	4299      	cmp	r1, r3
 800b936:	d002      	beq.n	800b93e <__sflush_r+0x92>
 800b938:	4628      	mov	r0, r5
 800b93a:	f7ff faa3 	bl	800ae84 <_free_r>
 800b93e:	2000      	movs	r0, #0
 800b940:	6360      	str	r0, [r4, #52]	; 0x34
 800b942:	e7c1      	b.n	800b8c8 <__sflush_r+0x1c>
 800b944:	6a21      	ldr	r1, [r4, #32]
 800b946:	2301      	movs	r3, #1
 800b948:	4628      	mov	r0, r5
 800b94a:	47b0      	blx	r6
 800b94c:	1c41      	adds	r1, r0, #1
 800b94e:	d1c7      	bne.n	800b8e0 <__sflush_r+0x34>
 800b950:	682b      	ldr	r3, [r5, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d0c4      	beq.n	800b8e0 <__sflush_r+0x34>
 800b956:	2b1d      	cmp	r3, #29
 800b958:	d001      	beq.n	800b95e <__sflush_r+0xb2>
 800b95a:	2b16      	cmp	r3, #22
 800b95c:	d101      	bne.n	800b962 <__sflush_r+0xb6>
 800b95e:	602f      	str	r7, [r5, #0]
 800b960:	e7b1      	b.n	800b8c6 <__sflush_r+0x1a>
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	e7ad      	b.n	800b8c8 <__sflush_r+0x1c>
 800b96c:	690f      	ldr	r7, [r1, #16]
 800b96e:	2f00      	cmp	r7, #0
 800b970:	d0a9      	beq.n	800b8c6 <__sflush_r+0x1a>
 800b972:	0793      	lsls	r3, r2, #30
 800b974:	680e      	ldr	r6, [r1, #0]
 800b976:	bf08      	it	eq
 800b978:	694b      	ldreq	r3, [r1, #20]
 800b97a:	600f      	str	r7, [r1, #0]
 800b97c:	bf18      	it	ne
 800b97e:	2300      	movne	r3, #0
 800b980:	eba6 0807 	sub.w	r8, r6, r7
 800b984:	608b      	str	r3, [r1, #8]
 800b986:	f1b8 0f00 	cmp.w	r8, #0
 800b98a:	dd9c      	ble.n	800b8c6 <__sflush_r+0x1a>
 800b98c:	6a21      	ldr	r1, [r4, #32]
 800b98e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b990:	4643      	mov	r3, r8
 800b992:	463a      	mov	r2, r7
 800b994:	4628      	mov	r0, r5
 800b996:	47b0      	blx	r6
 800b998:	2800      	cmp	r0, #0
 800b99a:	dc06      	bgt.n	800b9aa <__sflush_r+0xfe>
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9a2:	81a3      	strh	r3, [r4, #12]
 800b9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a8:	e78e      	b.n	800b8c8 <__sflush_r+0x1c>
 800b9aa:	4407      	add	r7, r0
 800b9ac:	eba8 0800 	sub.w	r8, r8, r0
 800b9b0:	e7e9      	b.n	800b986 <__sflush_r+0xda>
 800b9b2:	bf00      	nop
 800b9b4:	20400001 	.word	0x20400001

0800b9b8 <_fflush_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	690b      	ldr	r3, [r1, #16]
 800b9bc:	4605      	mov	r5, r0
 800b9be:	460c      	mov	r4, r1
 800b9c0:	b913      	cbnz	r3, 800b9c8 <_fflush_r+0x10>
 800b9c2:	2500      	movs	r5, #0
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	bd38      	pop	{r3, r4, r5, pc}
 800b9c8:	b118      	cbz	r0, 800b9d2 <_fflush_r+0x1a>
 800b9ca:	6983      	ldr	r3, [r0, #24]
 800b9cc:	b90b      	cbnz	r3, 800b9d2 <_fflush_r+0x1a>
 800b9ce:	f7fe f945 	bl	8009c5c <__sinit>
 800b9d2:	4b14      	ldr	r3, [pc, #80]	; (800ba24 <_fflush_r+0x6c>)
 800b9d4:	429c      	cmp	r4, r3
 800b9d6:	d11b      	bne.n	800ba10 <_fflush_r+0x58>
 800b9d8:	686c      	ldr	r4, [r5, #4]
 800b9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0ef      	beq.n	800b9c2 <_fflush_r+0xa>
 800b9e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9e4:	07d0      	lsls	r0, r2, #31
 800b9e6:	d404      	bmi.n	800b9f2 <_fflush_r+0x3a>
 800b9e8:	0599      	lsls	r1, r3, #22
 800b9ea:	d402      	bmi.n	800b9f2 <_fflush_r+0x3a>
 800b9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ee:	f7fe fd46 	bl	800a47e <__retarget_lock_acquire_recursive>
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	f7ff ff59 	bl	800b8ac <__sflush_r>
 800b9fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9fc:	07da      	lsls	r2, r3, #31
 800b9fe:	4605      	mov	r5, r0
 800ba00:	d4e0      	bmi.n	800b9c4 <_fflush_r+0xc>
 800ba02:	89a3      	ldrh	r3, [r4, #12]
 800ba04:	059b      	lsls	r3, r3, #22
 800ba06:	d4dd      	bmi.n	800b9c4 <_fflush_r+0xc>
 800ba08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba0a:	f7fe fd39 	bl	800a480 <__retarget_lock_release_recursive>
 800ba0e:	e7d9      	b.n	800b9c4 <_fflush_r+0xc>
 800ba10:	4b05      	ldr	r3, [pc, #20]	; (800ba28 <_fflush_r+0x70>)
 800ba12:	429c      	cmp	r4, r3
 800ba14:	d101      	bne.n	800ba1a <_fflush_r+0x62>
 800ba16:	68ac      	ldr	r4, [r5, #8]
 800ba18:	e7df      	b.n	800b9da <_fflush_r+0x22>
 800ba1a:	4b04      	ldr	r3, [pc, #16]	; (800ba2c <_fflush_r+0x74>)
 800ba1c:	429c      	cmp	r4, r3
 800ba1e:	bf08      	it	eq
 800ba20:	68ec      	ldreq	r4, [r5, #12]
 800ba22:	e7da      	b.n	800b9da <_fflush_r+0x22>
 800ba24:	0800bfec 	.word	0x0800bfec
 800ba28:	0800c00c 	.word	0x0800c00c
 800ba2c:	0800bfcc 	.word	0x0800bfcc

0800ba30 <fiprintf>:
 800ba30:	b40e      	push	{r1, r2, r3}
 800ba32:	b503      	push	{r0, r1, lr}
 800ba34:	4601      	mov	r1, r0
 800ba36:	ab03      	add	r3, sp, #12
 800ba38:	4805      	ldr	r0, [pc, #20]	; (800ba50 <fiprintf+0x20>)
 800ba3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba3e:	6800      	ldr	r0, [r0, #0]
 800ba40:	9301      	str	r3, [sp, #4]
 800ba42:	f7ff fc85 	bl	800b350 <_vfiprintf_r>
 800ba46:	b002      	add	sp, #8
 800ba48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba4c:	b003      	add	sp, #12
 800ba4e:	4770      	bx	lr
 800ba50:	2000000c 	.word	0x2000000c

0800ba54 <_lseek_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4d07      	ldr	r5, [pc, #28]	; (800ba74 <_lseek_r+0x20>)
 800ba58:	4604      	mov	r4, r0
 800ba5a:	4608      	mov	r0, r1
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	2200      	movs	r2, #0
 800ba60:	602a      	str	r2, [r5, #0]
 800ba62:	461a      	mov	r2, r3
 800ba64:	f7f6 f98c 	bl	8001d80 <_lseek>
 800ba68:	1c43      	adds	r3, r0, #1
 800ba6a:	d102      	bne.n	800ba72 <_lseek_r+0x1e>
 800ba6c:	682b      	ldr	r3, [r5, #0]
 800ba6e:	b103      	cbz	r3, 800ba72 <_lseek_r+0x1e>
 800ba70:	6023      	str	r3, [r4, #0]
 800ba72:	bd38      	pop	{r3, r4, r5, pc}
 800ba74:	20000400 	.word	0x20000400

0800ba78 <__swhatbuf_r>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	460e      	mov	r6, r1
 800ba7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba80:	2900      	cmp	r1, #0
 800ba82:	b096      	sub	sp, #88	; 0x58
 800ba84:	4614      	mov	r4, r2
 800ba86:	461d      	mov	r5, r3
 800ba88:	da08      	bge.n	800ba9c <__swhatbuf_r+0x24>
 800ba8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	602a      	str	r2, [r5, #0]
 800ba92:	061a      	lsls	r2, r3, #24
 800ba94:	d410      	bmi.n	800bab8 <__swhatbuf_r+0x40>
 800ba96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba9a:	e00e      	b.n	800baba <__swhatbuf_r+0x42>
 800ba9c:	466a      	mov	r2, sp
 800ba9e:	f000 f8c1 	bl	800bc24 <_fstat_r>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	dbf1      	blt.n	800ba8a <__swhatbuf_r+0x12>
 800baa6:	9a01      	ldr	r2, [sp, #4]
 800baa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bab0:	425a      	negs	r2, r3
 800bab2:	415a      	adcs	r2, r3
 800bab4:	602a      	str	r2, [r5, #0]
 800bab6:	e7ee      	b.n	800ba96 <__swhatbuf_r+0x1e>
 800bab8:	2340      	movs	r3, #64	; 0x40
 800baba:	2000      	movs	r0, #0
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	b016      	add	sp, #88	; 0x58
 800bac0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bac4 <__smakebuf_r>:
 800bac4:	898b      	ldrh	r3, [r1, #12]
 800bac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bac8:	079d      	lsls	r5, r3, #30
 800baca:	4606      	mov	r6, r0
 800bacc:	460c      	mov	r4, r1
 800bace:	d507      	bpl.n	800bae0 <__smakebuf_r+0x1c>
 800bad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	6123      	str	r3, [r4, #16]
 800bad8:	2301      	movs	r3, #1
 800bada:	6163      	str	r3, [r4, #20]
 800badc:	b002      	add	sp, #8
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	ab01      	add	r3, sp, #4
 800bae2:	466a      	mov	r2, sp
 800bae4:	f7ff ffc8 	bl	800ba78 <__swhatbuf_r>
 800bae8:	9900      	ldr	r1, [sp, #0]
 800baea:	4605      	mov	r5, r0
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff fa35 	bl	800af5c <_malloc_r>
 800baf2:	b948      	cbnz	r0, 800bb08 <__smakebuf_r+0x44>
 800baf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf8:	059a      	lsls	r2, r3, #22
 800bafa:	d4ef      	bmi.n	800badc <__smakebuf_r+0x18>
 800bafc:	f023 0303 	bic.w	r3, r3, #3
 800bb00:	f043 0302 	orr.w	r3, r3, #2
 800bb04:	81a3      	strh	r3, [r4, #12]
 800bb06:	e7e3      	b.n	800bad0 <__smakebuf_r+0xc>
 800bb08:	4b0d      	ldr	r3, [pc, #52]	; (800bb40 <__smakebuf_r+0x7c>)
 800bb0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb0c:	89a3      	ldrh	r3, [r4, #12]
 800bb0e:	6020      	str	r0, [r4, #0]
 800bb10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb14:	81a3      	strh	r3, [r4, #12]
 800bb16:	9b00      	ldr	r3, [sp, #0]
 800bb18:	6163      	str	r3, [r4, #20]
 800bb1a:	9b01      	ldr	r3, [sp, #4]
 800bb1c:	6120      	str	r0, [r4, #16]
 800bb1e:	b15b      	cbz	r3, 800bb38 <__smakebuf_r+0x74>
 800bb20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb24:	4630      	mov	r0, r6
 800bb26:	f000 f88f 	bl	800bc48 <_isatty_r>
 800bb2a:	b128      	cbz	r0, 800bb38 <__smakebuf_r+0x74>
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	f023 0303 	bic.w	r3, r3, #3
 800bb32:	f043 0301 	orr.w	r3, r3, #1
 800bb36:	81a3      	strh	r3, [r4, #12]
 800bb38:	89a0      	ldrh	r0, [r4, #12]
 800bb3a:	4305      	orrs	r5, r0
 800bb3c:	81a5      	strh	r5, [r4, #12]
 800bb3e:	e7cd      	b.n	800badc <__smakebuf_r+0x18>
 800bb40:	08009bf5 	.word	0x08009bf5

0800bb44 <memmove>:
 800bb44:	4288      	cmp	r0, r1
 800bb46:	b510      	push	{r4, lr}
 800bb48:	eb01 0402 	add.w	r4, r1, r2
 800bb4c:	d902      	bls.n	800bb54 <memmove+0x10>
 800bb4e:	4284      	cmp	r4, r0
 800bb50:	4623      	mov	r3, r4
 800bb52:	d807      	bhi.n	800bb64 <memmove+0x20>
 800bb54:	1e43      	subs	r3, r0, #1
 800bb56:	42a1      	cmp	r1, r4
 800bb58:	d008      	beq.n	800bb6c <memmove+0x28>
 800bb5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb62:	e7f8      	b.n	800bb56 <memmove+0x12>
 800bb64:	4402      	add	r2, r0
 800bb66:	4601      	mov	r1, r0
 800bb68:	428a      	cmp	r2, r1
 800bb6a:	d100      	bne.n	800bb6e <memmove+0x2a>
 800bb6c:	bd10      	pop	{r4, pc}
 800bb6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb76:	e7f7      	b.n	800bb68 <memmove+0x24>

0800bb78 <__malloc_lock>:
 800bb78:	4801      	ldr	r0, [pc, #4]	; (800bb80 <__malloc_lock+0x8>)
 800bb7a:	f7fe bc80 	b.w	800a47e <__retarget_lock_acquire_recursive>
 800bb7e:	bf00      	nop
 800bb80:	200003f4 	.word	0x200003f4

0800bb84 <__malloc_unlock>:
 800bb84:	4801      	ldr	r0, [pc, #4]	; (800bb8c <__malloc_unlock+0x8>)
 800bb86:	f7fe bc7b 	b.w	800a480 <__retarget_lock_release_recursive>
 800bb8a:	bf00      	nop
 800bb8c:	200003f4 	.word	0x200003f4

0800bb90 <_realloc_r>:
 800bb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb94:	4680      	mov	r8, r0
 800bb96:	4614      	mov	r4, r2
 800bb98:	460e      	mov	r6, r1
 800bb9a:	b921      	cbnz	r1, 800bba6 <_realloc_r+0x16>
 800bb9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bba0:	4611      	mov	r1, r2
 800bba2:	f7ff b9db 	b.w	800af5c <_malloc_r>
 800bba6:	b92a      	cbnz	r2, 800bbb4 <_realloc_r+0x24>
 800bba8:	f7ff f96c 	bl	800ae84 <_free_r>
 800bbac:	4625      	mov	r5, r4
 800bbae:	4628      	mov	r0, r5
 800bbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb4:	f000 f858 	bl	800bc68 <_malloc_usable_size_r>
 800bbb8:	4284      	cmp	r4, r0
 800bbba:	4607      	mov	r7, r0
 800bbbc:	d802      	bhi.n	800bbc4 <_realloc_r+0x34>
 800bbbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbc2:	d812      	bhi.n	800bbea <_realloc_r+0x5a>
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	4640      	mov	r0, r8
 800bbc8:	f7ff f9c8 	bl	800af5c <_malloc_r>
 800bbcc:	4605      	mov	r5, r0
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d0ed      	beq.n	800bbae <_realloc_r+0x1e>
 800bbd2:	42bc      	cmp	r4, r7
 800bbd4:	4622      	mov	r2, r4
 800bbd6:	4631      	mov	r1, r6
 800bbd8:	bf28      	it	cs
 800bbda:	463a      	movcs	r2, r7
 800bbdc:	f7fe fc6c 	bl	800a4b8 <memcpy>
 800bbe0:	4631      	mov	r1, r6
 800bbe2:	4640      	mov	r0, r8
 800bbe4:	f7ff f94e 	bl	800ae84 <_free_r>
 800bbe8:	e7e1      	b.n	800bbae <_realloc_r+0x1e>
 800bbea:	4635      	mov	r5, r6
 800bbec:	e7df      	b.n	800bbae <_realloc_r+0x1e>
	...

0800bbf0 <_read_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	4d07      	ldr	r5, [pc, #28]	; (800bc10 <_read_r+0x20>)
 800bbf4:	4604      	mov	r4, r0
 800bbf6:	4608      	mov	r0, r1
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	602a      	str	r2, [r5, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f7f6 f87a 	bl	8001cf8 <_read>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	d102      	bne.n	800bc0e <_read_r+0x1e>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	b103      	cbz	r3, 800bc0e <_read_r+0x1e>
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	bd38      	pop	{r3, r4, r5, pc}
 800bc10:	20000400 	.word	0x20000400

0800bc14 <abort>:
 800bc14:	b508      	push	{r3, lr}
 800bc16:	2006      	movs	r0, #6
 800bc18:	f000 f856 	bl	800bcc8 <raise>
 800bc1c:	2001      	movs	r0, #1
 800bc1e:	f7f6 f861 	bl	8001ce4 <_exit>
	...

0800bc24 <_fstat_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4d07      	ldr	r5, [pc, #28]	; (800bc44 <_fstat_r+0x20>)
 800bc28:	2300      	movs	r3, #0
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	4608      	mov	r0, r1
 800bc2e:	4611      	mov	r1, r2
 800bc30:	602b      	str	r3, [r5, #0]
 800bc32:	f7f6 f88a 	bl	8001d4a <_fstat>
 800bc36:	1c43      	adds	r3, r0, #1
 800bc38:	d102      	bne.n	800bc40 <_fstat_r+0x1c>
 800bc3a:	682b      	ldr	r3, [r5, #0]
 800bc3c:	b103      	cbz	r3, 800bc40 <_fstat_r+0x1c>
 800bc3e:	6023      	str	r3, [r4, #0]
 800bc40:	bd38      	pop	{r3, r4, r5, pc}
 800bc42:	bf00      	nop
 800bc44:	20000400 	.word	0x20000400

0800bc48 <_isatty_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4d06      	ldr	r5, [pc, #24]	; (800bc64 <_isatty_r+0x1c>)
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	4604      	mov	r4, r0
 800bc50:	4608      	mov	r0, r1
 800bc52:	602b      	str	r3, [r5, #0]
 800bc54:	f7f6 f889 	bl	8001d6a <_isatty>
 800bc58:	1c43      	adds	r3, r0, #1
 800bc5a:	d102      	bne.n	800bc62 <_isatty_r+0x1a>
 800bc5c:	682b      	ldr	r3, [r5, #0]
 800bc5e:	b103      	cbz	r3, 800bc62 <_isatty_r+0x1a>
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	bd38      	pop	{r3, r4, r5, pc}
 800bc64:	20000400 	.word	0x20000400

0800bc68 <_malloc_usable_size_r>:
 800bc68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc6c:	1f18      	subs	r0, r3, #4
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	bfbc      	itt	lt
 800bc72:	580b      	ldrlt	r3, [r1, r0]
 800bc74:	18c0      	addlt	r0, r0, r3
 800bc76:	4770      	bx	lr

0800bc78 <_raise_r>:
 800bc78:	291f      	cmp	r1, #31
 800bc7a:	b538      	push	{r3, r4, r5, lr}
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	d904      	bls.n	800bc8c <_raise_r+0x14>
 800bc82:	2316      	movs	r3, #22
 800bc84:	6003      	str	r3, [r0, #0]
 800bc86:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc8e:	b112      	cbz	r2, 800bc96 <_raise_r+0x1e>
 800bc90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc94:	b94b      	cbnz	r3, 800bcaa <_raise_r+0x32>
 800bc96:	4620      	mov	r0, r4
 800bc98:	f000 f830 	bl	800bcfc <_getpid_r>
 800bc9c:	462a      	mov	r2, r5
 800bc9e:	4601      	mov	r1, r0
 800bca0:	4620      	mov	r0, r4
 800bca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bca6:	f000 b817 	b.w	800bcd8 <_kill_r>
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d00a      	beq.n	800bcc4 <_raise_r+0x4c>
 800bcae:	1c59      	adds	r1, r3, #1
 800bcb0:	d103      	bne.n	800bcba <_raise_r+0x42>
 800bcb2:	2316      	movs	r3, #22
 800bcb4:	6003      	str	r3, [r0, #0]
 800bcb6:	2001      	movs	r0, #1
 800bcb8:	e7e7      	b.n	800bc8a <_raise_r+0x12>
 800bcba:	2400      	movs	r4, #0
 800bcbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	4798      	blx	r3
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	e7e0      	b.n	800bc8a <_raise_r+0x12>

0800bcc8 <raise>:
 800bcc8:	4b02      	ldr	r3, [pc, #8]	; (800bcd4 <raise+0xc>)
 800bcca:	4601      	mov	r1, r0
 800bccc:	6818      	ldr	r0, [r3, #0]
 800bcce:	f7ff bfd3 	b.w	800bc78 <_raise_r>
 800bcd2:	bf00      	nop
 800bcd4:	2000000c 	.word	0x2000000c

0800bcd8 <_kill_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4d07      	ldr	r5, [pc, #28]	; (800bcf8 <_kill_r+0x20>)
 800bcdc:	2300      	movs	r3, #0
 800bcde:	4604      	mov	r4, r0
 800bce0:	4608      	mov	r0, r1
 800bce2:	4611      	mov	r1, r2
 800bce4:	602b      	str	r3, [r5, #0]
 800bce6:	f7f5 ffed 	bl	8001cc4 <_kill>
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	d102      	bne.n	800bcf4 <_kill_r+0x1c>
 800bcee:	682b      	ldr	r3, [r5, #0]
 800bcf0:	b103      	cbz	r3, 800bcf4 <_kill_r+0x1c>
 800bcf2:	6023      	str	r3, [r4, #0]
 800bcf4:	bd38      	pop	{r3, r4, r5, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20000400 	.word	0x20000400

0800bcfc <_getpid_r>:
 800bcfc:	f7f5 bfda 	b.w	8001cb4 <_getpid>

0800bd00 <_init>:
 800bd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd02:	bf00      	nop
 800bd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd06:	bc08      	pop	{r3}
 800bd08:	469e      	mov	lr, r3
 800bd0a:	4770      	bx	lr

0800bd0c <_fini>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	bf00      	nop
 800bd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd12:	bc08      	pop	{r3}
 800bd14:	469e      	mov	lr, r3
 800bd16:	4770      	bx	lr
