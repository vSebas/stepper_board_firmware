
stepper_boards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e50c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800e6a0  0800e6a0  0001e6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecc4  0800ecc4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ecc4  0800ecc4  0001ecc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eccc  0800eccc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eccc  0800eccc  0001eccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ecd0  0800ecd0  0001ecd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ecd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c60  200001e4  0800eeb8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e44  0800eeb8  00021e44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021799  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e69  00000000  00000000  000419ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  00045818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000271dd  00000000  00000000  00047320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001d6ea  00000000  00000000  0006e4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ef248  00000000  00000000  0008bbe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0017ae2f  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001978  00000000  00000000  0017ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000088bc  00000000  00000000  0017c7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e684 	.word	0x0800e684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800e684 	.word	0x0800e684

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
	/*
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	DWT->CTRL |= 1;
	DWT->CYCCNT = 0;
	*/
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
//return DWT->CYCCNT;
	return 0;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001022:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	d013      	beq.n	8001056 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800102e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001032:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001036:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00b      	beq.n	8001056 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800103e:	e000      	b.n	8001042 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001040:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001042:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f9      	beq.n	8001040 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800104c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001056:	687b      	ldr	r3, [r7, #4]
}
 8001058:	4618      	mov	r0, r3
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	e009      	b.n	800108a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	60ba      	str	r2, [r7, #8]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffc9 	bl	8001016 <ITM_SendChar>
	for(int i=0; i<len; i++)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	429a      	cmp	r2, r3
 8001090:	dbf1      	blt.n	8001076 <_write+0x12>
	}
	return len;
 8001092:	687b      	ldr	r3, [r7, #4]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_TxHeaderTypeDef TxHeader;

//uint8_t count = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	//osSemaphoreRelease(canRxSemHandle);
	  if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	480b      	ldr	r0, [pc, #44]	; (80010d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80010ac:	f002 f938 	bl	8003320 <HAL_CAN_GetRxMessage>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d104      	bne.n	80010c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
		  HAL_GPIO_TogglePin(GPIOA, DEBUG_2_Pin);
 80010b6:	2101      	movs	r1, #1
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f002 ff0c 	bl	8003ed8 <HAL_GPIO_TogglePin>
	  osDelay(50);
 80010c0:	2032      	movs	r0, #50	; 0x32
 80010c2:	f005 ff1b 	bl	8006efc <osDelay>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200003bc 	.word	0x200003bc
 80010d4:	200003cc 	.word	0x200003cc
 80010d8:	20000264 	.word	0x20000264

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f000 feff 	bl	8001ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 f858 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e8:	f000 fa86 	bl	80015f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010ec:	f000 fa54 	bl	8001598 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010f0:	f000 fa04 	bl	80014fc <MX_TIM2_Init>
  MX_TIM1_Init();
 80010f4:	f000 f956 	bl	80013a4 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010f8:	f000 f89e 	bl	8001238 <MX_ADC1_Init>
  MX_CAN1_Init();
 80010fc:	f000 f900 	bl	8001300 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // Debug
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	210f      	movs	r1, #15
 8001104:	4818      	ldr	r0, [pc, #96]	; (8001168 <main+0x8c>)
 8001106:	f002 fecf 	bl	8003ea8 <HAL_GPIO_WritePin>
  {
	  Error_Handler();
  }

*/
  if(HAL_CAN_Start(&hcan1) == HAL_OK)
 800110a:	4818      	ldr	r0, [pc, #96]	; (800116c <main+0x90>)
 800110c:	f001 ff9b 	bl	8003046 <HAL_CAN_Start>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d103      	bne.n	800111e <main+0x42>
	  printf("CAN started correctly\n");
 8001116:	4816      	ldr	r0, [pc, #88]	; (8001170 <main+0x94>)
 8001118:	f009 fde6 	bl	800ace8 <puts>
 800111c:	e002      	b.n	8001124 <main+0x48>
  else
	  printf("CAN error\n");
 800111e:	4815      	ldr	r0, [pc, #84]	; (8001174 <main+0x98>)
 8001120:	f009 fde2 	bl	800ace8 <puts>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001124:	2102      	movs	r1, #2
 8001126:	4811      	ldr	r0, [pc, #68]	; (800116c <main+0x90>)
 8001128:	f002 fa0c 	bl	8003544 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800112c:	f005 fe0a 	bl	8006d44 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of canRxSem */
  canRxSemHandle = osSemaphoreNew(1, 1, &canRxSem_attributes);
 8001130:	4a11      	ldr	r2, [pc, #68]	; (8001178 <main+0x9c>)
 8001132:	2101      	movs	r1, #1
 8001134:	2001      	movs	r0, #1
 8001136:	f005 fefc 	bl	8006f32 <osSemaphoreNew>
 800113a:	4603      	mov	r3, r0
 800113c:	4a0f      	ldr	r2, [pc, #60]	; (800117c <main+0xa0>)
 800113e:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of canRxTask */
  //canRxTaskHandle = osThreadNew(can_rx_task, NULL, &canRxTask_attributes);

  /* creation of canTxTask */
  canTxTaskHandle = osThreadNew(can_tx_task, NULL, &canTxTask_attributes);
 8001140:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <main+0xa4>)
 8001142:	2100      	movs	r1, #0
 8001144:	480f      	ldr	r0, [pc, #60]	; (8001184 <main+0xa8>)
 8001146:	f005 fe47 	bl	8006dd8 <osThreadNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <main+0xac>)
 800114e:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(led_task, NULL, &ledTask_attributes);
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <main+0xb0>)
 8001152:	2100      	movs	r1, #0
 8001154:	480e      	ldr	r0, [pc, #56]	; (8001190 <main+0xb4>)
 8001156:	f005 fe3f 	bl	8006dd8 <osThreadNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <main+0xb8>)
 800115e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001160:	f005 fe14 	bl	8006d8c <osKernelStart>
  GPIO_PinState FAULT_2;
  */

  //HAL_UART_Transmit(&huart1, dataT, 14, HAL_MAX_DELAY);

  while (1)
 8001164:	e7fe      	b.n	8001164 <main+0x88>
 8001166:	bf00      	nop
 8001168:	48000800 	.word	0x48000800
 800116c:	20000264 	.word	0x20000264
 8001170:	0800e6cc 	.word	0x0800e6cc
 8001174:	0800e6e4 	.word	0x0800e6e4
 8001178:	0800e7c4 	.word	0x0800e7c4
 800117c:	200003b0 	.word	0x200003b0
 8001180:	0800e77c 	.word	0x0800e77c
 8001184:	0800177d 	.word	0x0800177d
 8001188:	200003a8 	.word	0x200003a8
 800118c:	0800e7a0 	.word	0x0800e7a0
 8001190:	08001829 	.word	0x08001829
 8001194:	200003ac 	.word	0x200003ac

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	2244      	movs	r2, #68	; 0x44
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f008 fe19 	bl	8009dde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011be:	f002 feb3 	bl	8003f28 <HAL_PWREx_ControlVoltageScaling>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011c8:	f000 fb4e 	bl	8001868 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d6:	2302      	movs	r3, #2
 80011d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011da:	2303      	movs	r3, #3
 80011dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80011e2:	2314      	movs	r3, #20
 80011e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011e6:	2307      	movs	r3, #7
 80011e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80011ee:	2304      	movs	r3, #4
 80011f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 feec 	bl	8003fd4 <HAL_RCC_OscConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001202:	f000 fb31 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120a:	2303      	movs	r3, #3
 800120c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	2104      	movs	r1, #4
 800121e:	4618      	mov	r0, r3
 8001220:	f003 faec 	bl	80047fc <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800122a:	f000 fb1d 	bl	8001868 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3758      	adds	r7, #88	; 0x58
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800123e:	463b      	mov	r3, r7
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800124e:	4b29      	ldr	r3, [pc, #164]	; (80012f4 <MX_ADC1_Init+0xbc>)
 8001250:	4a29      	ldr	r2, [pc, #164]	; (80012f8 <MX_ADC1_Init+0xc0>)
 8001252:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <MX_ADC1_Init+0xbc>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_ADC1_Init+0xbc>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_ADC1_Init+0xbc>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_ADC1_Init+0xbc>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_ADC1_Init+0xbc>)
 800126e:	2204      	movs	r2, #4
 8001270:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <MX_ADC1_Init+0xbc>)
 8001274:	2200      	movs	r2, #0
 8001276:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_ADC1_Init+0xbc>)
 800127a:	2201      	movs	r2, #1
 800127c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_ADC1_Init+0xbc>)
 8001280:	2201      	movs	r2, #1
 8001282:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_ADC1_Init+0xbc>)
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_ADC1_Init+0xbc>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_ADC1_Init+0xbc>)
 8001294:	2200      	movs	r2, #0
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_ADC1_Init+0xbc>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_ADC1_Init+0xbc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_ADC1_Init+0xbc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <MX_ADC1_Init+0xbc>)
 80012b0:	f000 ffdc 	bl	800226c <HAL_ADC_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80012ba:	f000 fad5 	bl	8001868 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_ADC1_Init+0xc4>)
 80012c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c2:	2306      	movs	r3, #6
 80012c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012ca:	237f      	movs	r3, #127	; 0x7f
 80012cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012ce:	2304      	movs	r3, #4
 80012d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <MX_ADC1_Init+0xbc>)
 80012dc:	f001 f90e 	bl	80024fc <HAL_ADC_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80012e6:	f000 fabf 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000200 	.word	0x20000200
 80012f8:	50040000 	.word	0x50040000
 80012fc:	c7520000 	.word	0xc7520000

08001300 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001306:	4b25      	ldr	r3, [pc, #148]	; (800139c <MX_CAN1_Init+0x9c>)
 8001308:	4a25      	ldr	r2, [pc, #148]	; (80013a0 <MX_CAN1_Init+0xa0>)
 800130a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_CAN1_Init+0x9c>)
 800130e:	2228      	movs	r2, #40	; 0x28
 8001310:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <MX_CAN1_Init+0x9c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001318:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_CAN1_Init+0x9c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_CAN1_Init+0x9c>)
 8001320:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001324:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_CAN1_Init+0x9c>)
 8001328:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800132c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_CAN1_Init+0x9c>)
 8001330:	2200      	movs	r2, #0
 8001332:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_CAN1_Init+0x9c>)
 8001336:	2200      	movs	r2, #0
 8001338:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_CAN1_Init+0x9c>)
 800133c:	2200      	movs	r2, #0
 800133e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_CAN1_Init+0x9c>)
 8001342:	2200      	movs	r2, #0
 8001344:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_CAN1_Init+0x9c>)
 8001348:	2200      	movs	r2, #0
 800134a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_CAN1_Init+0x9c>)
 800134e:	2200      	movs	r2, #0
 8001350:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001352:	4812      	ldr	r0, [pc, #72]	; (800139c <MX_CAN1_Init+0x9c>)
 8001354:	f001 fcb2 	bl	8002cbc <HAL_CAN_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800135e:	f000 fa83 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001362:	2301      	movs	r3, #1
 8001364:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;		// Specify filter bank to use
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0; //Incoming data is saved here
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh= 0;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001382:	2301      	movs	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800138a:	463b      	mov	r3, r7
 800138c:	4619      	mov	r1, r3
 800138e:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_CAN1_Init+0x9c>)
 8001390:	f001 fd8f 	bl	8002eb2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000264 	.word	0x20000264
 80013a0:	40006400 	.word	0x40006400

080013a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b09a      	sub	sp, #104	; 0x68
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
 80013d4:	615a      	str	r2, [r3, #20]
 80013d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	222c      	movs	r2, #44	; 0x2c
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 fcfd 	bl	8009dde <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e4:	4b43      	ldr	r3, [pc, #268]	; (80014f4 <MX_TIM1_Init+0x150>)
 80013e6:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <MX_TIM1_Init+0x154>)
 80013e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013ea:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <MX_TIM1_Init+0x150>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <MX_TIM1_Init+0x150>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013f6:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <MX_TIM1_Init+0x150>)
 80013f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <MX_TIM1_Init+0x150>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001404:	4b3b      	ldr	r3, [pc, #236]	; (80014f4 <MX_TIM1_Init+0x150>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b3a      	ldr	r3, [pc, #232]	; (80014f4 <MX_TIM1_Init+0x150>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001410:	4838      	ldr	r0, [pc, #224]	; (80014f4 <MX_TIM1_Init+0x150>)
 8001412:	f003 ff51 	bl	80052b8 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800141c:	f000 fa24 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001426:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800142a:	4619      	mov	r1, r3
 800142c:	4831      	ldr	r0, [pc, #196]	; (80014f4 <MX_TIM1_Init+0x150>)
 800142e:	f004 fa83 	bl	8005938 <HAL_TIM_ConfigClockSource>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001438:	f000 fa16 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800143c:	482d      	ldr	r0, [pc, #180]	; (80014f4 <MX_TIM1_Init+0x150>)
 800143e:	f003 ffe7 	bl	8005410 <HAL_TIM_PWM_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001448:	f000 fa0e 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001458:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800145c:	4619      	mov	r1, r3
 800145e:	4825      	ldr	r0, [pc, #148]	; (80014f4 <MX_TIM1_Init+0x150>)
 8001460:	f004 fed8 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800146a:	f000 f9fd 	bl	8001868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146e:	2360      	movs	r3, #96	; 0x60
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001476:	2300      	movs	r3, #0
 8001478:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800147a:	2300      	movs	r3, #0
 800147c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800148a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	4818      	ldr	r0, [pc, #96]	; (80014f4 <MX_TIM1_Init+0x150>)
 8001494:	f004 f93c 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800149e:	f000 f9e3 	bl	8001868 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	4807      	ldr	r0, [pc, #28]	; (80014f4 <MX_TIM1_Init+0x150>)
 80014d8:	f004 ff02 	bl	80062e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80014e2:	f000 f9c1 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <MX_TIM1_Init+0x150>)
 80014e8:	f000 fad8 	bl	8001a9c <HAL_TIM_MspPostInit>

}
 80014ec:	bf00      	nop
 80014ee:	3768      	adds	r7, #104	; 0x68
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2000028c 	.word	0x2000028c
 80014f8:	40012c00 	.word	0x40012c00

080014fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <MX_TIM2_Init+0x98>)
 800151c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001520:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <MX_TIM2_Init+0x98>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <MX_TIM2_Init+0x98>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <MX_TIM2_Init+0x98>)
 8001530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001534:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b17      	ldr	r3, [pc, #92]	; (8001594 <MX_TIM2_Init+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <MX_TIM2_Init+0x98>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001542:	4814      	ldr	r0, [pc, #80]	; (8001594 <MX_TIM2_Init+0x98>)
 8001544:	f003 feb8 	bl	80052b8 <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800154e:	f000 f98b 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001556:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4619      	mov	r1, r3
 800155e:	480d      	ldr	r0, [pc, #52]	; (8001594 <MX_TIM2_Init+0x98>)
 8001560:	f004 f9ea 	bl	8005938 <HAL_TIM_ConfigClockSource>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800156a:	f000 f97d 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4806      	ldr	r0, [pc, #24]	; (8001594 <MX_TIM2_Init+0x98>)
 800157c:	f004 fe4a 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001586:	f000 f96f 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800158a:	bf00      	nop
 800158c:	3720      	adds	r7, #32
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002d8 	.word	0x200002d8

08001598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 800159e:	4a15      	ldr	r2, [pc, #84]	; (80015f4 <MX_USART1_UART_Init+0x5c>)
 80015a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015be:	220c      	movs	r2, #12
 80015c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_USART1_UART_Init+0x58>)
 80015dc:	f004 ff16 	bl	800640c <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015e6:	f000 f93f 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000324 	.word	0x20000324
 80015f4:	40013800 	.word	0x40013800

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800160e:	4b57      	ldr	r3, [pc, #348]	; (800176c <MX_GPIO_Init+0x174>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a56      	ldr	r2, [pc, #344]	; (800176c <MX_GPIO_Init+0x174>)
 8001614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b54      	ldr	r3, [pc, #336]	; (800176c <MX_GPIO_Init+0x174>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	4b51      	ldr	r3, [pc, #324]	; (800176c <MX_GPIO_Init+0x174>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a50      	ldr	r2, [pc, #320]	; (800176c <MX_GPIO_Init+0x174>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b4e      	ldr	r3, [pc, #312]	; (800176c <MX_GPIO_Init+0x174>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b4b      	ldr	r3, [pc, #300]	; (800176c <MX_GPIO_Init+0x174>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a4a      	ldr	r2, [pc, #296]	; (800176c <MX_GPIO_Init+0x174>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b48      	ldr	r3, [pc, #288]	; (800176c <MX_GPIO_Init+0x174>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b45      	ldr	r3, [pc, #276]	; (800176c <MX_GPIO_Init+0x174>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a44      	ldr	r2, [pc, #272]	; (800176c <MX_GPIO_Init+0x174>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <MX_GPIO_Init+0x174>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	4b3f      	ldr	r3, [pc, #252]	; (800176c <MX_GPIO_Init+0x174>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a3e      	ldr	r2, [pc, #248]	; (800176c <MX_GPIO_Init+0x174>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b3c      	ldr	r3, [pc, #240]	; (800176c <MX_GPIO_Init+0x174>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8001686:	2200      	movs	r2, #0
 8001688:	f640 410f 	movw	r1, #3087	; 0xc0f
 800168c:	4838      	ldr	r0, [pc, #224]	; (8001770 <MX_GPIO_Init+0x178>)
 800168e:	f002 fc0b 	bl	8003ea8 <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f248 0103 	movw	r1, #32771	; 0x8003
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f002 fc04 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin|STPR_PWM_2_Pin, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f640 4105 	movw	r1, #3077	; 0xc05
 80016a6:	4833      	ldr	r0, [pc, #204]	; (8001774 <MX_GPIO_Init+0x17c>)
 80016a8:	f002 fbfe 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2104      	movs	r1, #4
 80016b0:	4831      	ldr	r0, [pc, #196]	; (8001778 <MX_GPIO_Init+0x180>)
 80016b2:	f002 fbf9 	bl	8003ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 80016b6:	f640 430f 	movw	r3, #3087	; 0xc0f
 80016ba:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4828      	ldr	r0, [pc, #160]	; (8001770 <MX_GPIO_Init+0x178>)
 80016d0:	f002 fa70 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin STPR_PWM_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin|STPR_PWM_1_Pin;
 80016d4:	f248 0303 	movw	r3, #32771	; 0x8003
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	2301      	movs	r3, #1
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f0:	f002 fa60 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin STPR_PWM_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin|STPR_PWM_2_Pin;
 80016f4:	f640 4305 	movw	r3, #3077	; 0xc05
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4819      	ldr	r0, [pc, #100]	; (8001774 <MX_GPIO_Init+0x17c>)
 800170e:	f002 fa51 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 8001712:	f24f 2302 	movw	r3, #61954	; 0xf202
 8001716:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4813      	ldr	r0, [pc, #76]	; (8001774 <MX_GPIO_Init+0x17c>)
 8001728:	f002 fa44 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 800172c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <MX_GPIO_Init+0x178>)
 8001742:	f002 fa37 	bl	8003bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 8001746:	2304      	movs	r3, #4
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4806      	ldr	r0, [pc, #24]	; (8001778 <MX_GPIO_Init+0x180>)
 800175e:	f002 fa29 	bl	8003bb4 <HAL_GPIO_Init>

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	48000800 	.word	0x48000800
 8001774:	48000400 	.word	0x48000400
 8001778:	48000c00 	.word	0x48000c00

0800177c <can_tx_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_can_tx_task */
void can_tx_task(void *argument)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN can_tx_task */
  /* Infinite loop */
  for(;;)
  {
	  TxHeader.DLC = 1; // Length of data to send in bytes
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <can_tx_task+0x88>)
 8001786:	2201      	movs	r2, #1
 8001788:	611a      	str	r2, [r3, #16]
		TxHeader.ExtId = 0; // For basic CAN protocol
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <can_tx_task+0x88>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
		TxHeader.IDE = CAN_ID_STD;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <can_tx_task+0x88>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
		TxHeader.RTR = CAN_RTR_DATA; // transfering data of remote frame
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <can_tx_task+0x88>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
		TxHeader.StdId = 0x600; // ID of this CAN peripheral
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <can_tx_task+0x88>)
 800179e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80017a2:	601a      	str	r2, [r3, #0]
		TxHeader.TransmitGlobalTime = DISABLE;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <can_tx_task+0x88>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	751a      	strb	r2, [r3, #20]

		TxData[0] = 0x11;
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <can_tx_task+0x8c>)
 80017ac:	2211      	movs	r2, #17
 80017ae:	701a      	strb	r2, [r3, #0]

		FreeMailBoxes = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 80017b0:	4816      	ldr	r0, [pc, #88]	; (800180c <can_tx_task+0x90>)
 80017b2:	f001 fd5c 	bl	800326e <HAL_CAN_GetTxMailboxesFreeLevel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4a15      	ldr	r2, [pc, #84]	; (8001810 <can_tx_task+0x94>)
 80017ba:	6013      	str	r3, [r2, #0]

		if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, &TxData[0], &TxMailbox) == HAL_OK) {
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <can_tx_task+0x98>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <can_tx_task+0x8c>)
 80017c0:	4910      	ldr	r1, [pc, #64]	; (8001804 <can_tx_task+0x88>)
 80017c2:	4812      	ldr	r0, [pc, #72]	; (800180c <can_tx_task+0x90>)
 80017c4:	f001 fc83 	bl	80030ce <HAL_CAN_AddTxMessage>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d113      	bne.n	80017f6 <can_tx_task+0x7a>
		  printf("Transmission requested 1\n");
 80017ce:	4812      	ldr	r0, [pc, #72]	; (8001818 <can_tx_task+0x9c>)
 80017d0:	f009 fa8a 	bl	800ace8 <puts>
				  if(!HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox))
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <can_tx_task+0x98>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	480c      	ldr	r0, [pc, #48]	; (800180c <can_tx_task+0x90>)
 80017dc:	f001 fd7c 	bl	80032d8 <HAL_CAN_IsTxMessagePending>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <can_tx_task+0x72>
					  printf("Message sent 1\n");
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <can_tx_task+0xa0>)
 80017e8:	f009 fa7e 	bl	800ace8 <puts>
 80017ec:	e006      	b.n	80017fc <can_tx_task+0x80>
				  else
					  printf("Message pending 1\n");
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <can_tx_task+0xa4>)
 80017f0:	f009 fa7a 	bl	800ace8 <puts>
 80017f4:	e002      	b.n	80017fc <can_tx_task+0x80>
			  } else
				  printf("Error 1\n");
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <can_tx_task+0xa8>)
 80017f8:	f009 fa76 	bl	800ace8 <puts>
		osDelay(50);
 80017fc:	2032      	movs	r0, #50	; 0x32
 80017fe:	f005 fb7d 	bl	8006efc <osDelay>
	  TxHeader.DLC = 1; // Length of data to send in bytes
 8001802:	e7bf      	b.n	8001784 <can_tx_task+0x8>
 8001804:	200003e8 	.word	0x200003e8
 8001808:	200003b4 	.word	0x200003b4
 800180c:	20000264 	.word	0x20000264
 8001810:	200003c8 	.word	0x200003c8
 8001814:	200003c4 	.word	0x200003c4
 8001818:	0800e6f0 	.word	0x0800e6f0
 800181c:	0800e70c 	.word	0x0800e70c
 8001820:	0800e71c 	.word	0x0800e71c
 8001824:	0800e730 	.word	0x0800e730

08001828 <led_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_task */
void led_task(void *argument)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, DEBUG_1_Pin);
 8001830:	2102      	movs	r1, #2
 8001832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001836:	f002 fb4f 	bl	8003ed8 <HAL_GPIO_TogglePin>
	osDelay(600);
 800183a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800183e:	f005 fb5d 	bl	8006efc <osDelay>
	HAL_GPIO_TogglePin(GPIOA, DEBUG_1_Pin);
 8001842:	e7f5      	b.n	8001830 <led_task+0x8>

08001844 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a04      	ldr	r2, [pc, #16]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001856:	f000 fb5d 	bl	8001f14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40001000 	.word	0x40001000

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_MspInit+0x4c>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_MspInit+0x4c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6613      	str	r3, [r2, #96]	; 0x60
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_MspInit+0x4c>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_MspInit+0x4c>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_MspInit+0x4c>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	6593      	str	r3, [r2, #88]	; 0x58
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_MspInit+0x4c>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	210f      	movs	r1, #15
 80018ae:	f06f 0001 	mvn.w	r0, #1
 80018b2:	f002 f955 	bl	8003b60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0a0      	sub	sp, #128	; 0x80
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	225c      	movs	r2, #92	; 0x5c
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f008 fa7a 	bl	8009dde <memset>
  if(hadc->Instance==ADC1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a25      	ldr	r2, [pc, #148]	; (8001984 <HAL_ADC_MspInit+0xc0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d142      	bne.n	800197a <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018fe:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001900:	2303      	movs	r3, #3
 8001902:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8001908:	2314      	movs	r3, #20
 800190a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800190c:	2307      	movs	r3, #7
 800190e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001910:	2302      	movs	r3, #2
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8001914:	2304      	movs	r3, #4
 8001916:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191e:	f107 0310 	add.w	r3, r7, #16
 8001922:	4618      	mov	r0, r3
 8001924:	f003 f9be 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800192e:	f7ff ff9b 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_ADC_MspInit+0xc4>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a14      	ldr	r2, [pc, #80]	; (8001988 <HAL_ADC_MspInit+0xc4>)
 8001938:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_ADC_MspInit+0xc4>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_ADC_MspInit+0xc4>)
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_ADC_MspInit+0xc4>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_ADC_MspInit+0xc4>)
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 8001962:	2310      	movs	r3, #16
 8001964:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001966:	2303      	movs	r3, #3
 8001968:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <HAL_ADC_MspInit+0xc8>)
 8001976:	f002 f91d 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3780      	adds	r7, #128	; 0x80
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	50040000 	.word	0x50040000
 8001988:	40021000 	.word	0x40021000
 800198c:	48000800 	.word	0x48000800

08001990 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a20      	ldr	r2, [pc, #128]	; (8001a30 <HAL_CAN_MspInit+0xa0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d139      	bne.n	8001a26 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_CAN_MspInit+0xa4>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b6:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <HAL_CAN_MspInit+0xa4>)
 80019b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019bc:	6593      	str	r3, [r2, #88]	; 0x58
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_CAN_MspInit+0xa4>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_CAN_MspInit+0xa4>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_CAN_MspInit+0xa4>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <HAL_CAN_MspInit+0xa4>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019f4:	2309      	movs	r3, #9
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a02:	f002 f8d7 	bl	8003bb4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2105      	movs	r1, #5
 8001a0a:	2014      	movs	r0, #20
 8001a0c:	f002 f8a8 	bl	8003b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a10:	2014      	movs	r0, #20
 8001a12:	f002 f8c1 	bl	8003b98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2105      	movs	r1, #5
 8001a1a:	2015      	movs	r0, #21
 8001a1c:	f002 f8a0 	bl	8003b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001a20:	2015      	movs	r0, #21
 8001a22:	f002 f8b9 	bl	8003b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40006400 	.word	0x40006400
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <HAL_TIM_Base_MspInit+0x5c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10c      	bne.n	8001a64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a54:	6613      	str	r3, [r2, #96]	; 0x60
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a62:	e010      	b.n	8001a86 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6c:	d10b      	bne.n	8001a86 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40012c00 	.word	0x40012c00
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_TIM_MspPostInit+0x68>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d11d      	bne.n	8001afa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	4a11      	ldr	r2, [pc, #68]	; (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aca:	4b0f      	ldr	r3, [pc, #60]	; (8001b08 <HAL_TIM_MspPostInit+0x6c>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 8001ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ada:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	4619      	mov	r1, r3
 8001af2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af6:	f002 f85d 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001afa:	bf00      	nop
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40012c00 	.word	0x40012c00
 8001b08:	40021000 	.word	0x40021000

08001b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0a0      	sub	sp, #128	; 0x80
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	225c      	movs	r2, #92	; 0x5c
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f008 f956 	bl	8009dde <memset>
  if(huart->Instance==USART1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_UART_MspInit+0xa8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d137      	bne.n	8001bac <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 f8ab 	bl	8004ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b54:	f7ff fe88 	bl	8001868 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_UART_MspInit+0xac>)
 8001b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5c:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <HAL_UART_MspInit+0xac>)
 8001b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b62:	6613      	str	r3, [r2, #96]	; 0x60
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_UART_MspInit+0xac>)
 8001b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_UART_MspInit+0xac>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_UART_MspInit+0xac>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_UART_MspInit+0xac>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba8:	f002 f804 	bl	8003bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bac:	bf00      	nop
 8001bae:	3780      	adds	r7, #128	; 0x80
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40021000 	.word	0x40021000

08001bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bca:	4b34      	ldr	r3, [pc, #208]	; (8001c9c <HAL_InitTick+0xe0>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	4a33      	ldr	r2, [pc, #204]	; (8001c9c <HAL_InitTick+0xe0>)
 8001bd0:	f043 0310 	orr.w	r3, r3, #16
 8001bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_InitTick+0xe0>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be2:	f107 0210 	add.w	r2, r7, #16
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 ffc7 	bl	8004b80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d103      	bne.n	8001c04 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001bfc:	f002 ff94 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8001c00:	6378      	str	r0, [r7, #52]	; 0x34
 8001c02:	e004      	b.n	8001c0e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c04:	f002 ff90 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c10:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_InitTick+0xe4>)
 8001c12:	fba2 2303 	umull	r2, r3, r2, r3
 8001c16:	0c9b      	lsrs	r3, r3, #18
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <HAL_InitTick+0xec>)
 8001c20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c22:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001c24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c28:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c42:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001c44:	f003 fb38 	bl	80052b8 <HAL_TIM_Base_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d11b      	bne.n	8001c8e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c56:	4813      	ldr	r0, [pc, #76]	; (8001ca4 <HAL_InitTick+0xe8>)
 8001c58:	f003 fb86 	bl	8005368 <HAL_TIM_Base_Start_IT>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001c62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d111      	bne.n	8001c8e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c6a:	2036      	movs	r0, #54	; 0x36
 8001c6c:	f001 ff94 	bl	8003b98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b0f      	cmp	r3, #15
 8001c74:	d808      	bhi.n	8001c88 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001c76:	2200      	movs	r2, #0
 8001c78:	6879      	ldr	r1, [r7, #4]
 8001c7a:	2036      	movs	r0, #54	; 0x36
 8001c7c:	f001 ff70 	bl	8003b60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_InitTick+0xf0>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e002      	b.n	8001c8e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001c8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3738      	adds	r7, #56	; 0x38
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	431bde83 	.word	0x431bde83
 8001ca4:	20000400 	.word	0x20000400
 8001ca8:	40001000 	.word	0x40001000
 8001cac:	20000004 	.word	0x20000004

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <CAN1_RX0_IRQHandler+0x10>)
 8001ce2:	f001 fc55 	bl	8003590 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000264 	.word	0x20000264

08001cf0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <CAN1_RX1_IRQHandler+0x10>)
 8001cf6:	f001 fc4b 	bl	8003590 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000264 	.word	0x20000264

08001d04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <TIM6_DAC_IRQHandler+0x10>)
 8001d0a:	f003 fbe2 	bl	80054d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000400 	.word	0x20000400

08001d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
	return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_kill>:

int _kill(int pid, int sig)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d32:	f007 ff23 	bl	8009b7c <__errno>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2216      	movs	r2, #22
 8001d3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <_exit>:

void _exit (int status)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ffe7 	bl	8001d28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d5a:	e7fe      	b.n	8001d5a <_exit+0x12>

08001d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e00a      	b.n	8001d84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d6e:	f3af 8000 	nop.w
 8001d72:	4601      	mov	r1, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	60ba      	str	r2, [r7, #8]
 8001d7a:	b2ca      	uxtb	r2, r1
 8001d7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3301      	adds	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	dbf0      	blt.n	8001d6e <_read+0x12>
	}

return len;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_isatty>:

int _isatty(int file)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
	return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e30:	f007 fea4 	bl	8009b7c <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e3e:	e009      	b.n	8001e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e40:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <_sbrk+0x64>)
 8001e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20010000 	.word	0x20010000
 8001e60:	00000400 	.word	0x00000400
 8001e64:	2000044c 	.word	0x2000044c
 8001e68:	20001e48 	.word	0x20001e48

08001e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <SystemInit+0x20>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e76:	4a05      	ldr	r2, [pc, #20]	; (8001e8c <SystemInit+0x20>)
 8001e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e94:	f7ff ffea 	bl	8001e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e98:	480c      	ldr	r0, [pc, #48]	; (8001ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8001e9a:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ed4 <LoopForever+0xe>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	; (8001edc <LoopForever+0x16>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f007 ff59 	bl	8009d74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ec2:	f7ff f90b 	bl	80010dc <main>

08001ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec6:	e7fe      	b.n	8001ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ed4:	0800ecd4 	.word	0x0800ecd4
  ldr r2, =_sbss
 8001ed8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001edc:	20001e44 	.word	0x20001e44

08001ee0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC1_IRQHandler>

08001ee2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f001 fe2c 	bl	8003b4a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef2:	200f      	movs	r0, #15
 8001ef4:	f7ff fe62 	bl	8001bbc <HAL_InitTick>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	e001      	b.n	8001f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f04:	f7ff fcb6 	bl	8001874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f08:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_IncTick+0x20>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x24>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_IncTick+0x24>)
 8001f26:	6013      	str	r3, [r2, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000008 	.word	0x20000008
 8001f38:	20000450 	.word	0x20000450

08001f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b03      	ldr	r3, [pc, #12]	; (8001f50 <HAL_GetTick+0x14>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000450 	.word	0x20000450

08001f54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3360      	adds	r3, #96	; 0x60
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <LL_ADC_SetOffset+0x44>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ff4:	bf00      	nop
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	03fff000 	.word	0x03fff000

08002004 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3360      	adds	r3, #96	; 0x60
 8002012:	461a      	mov	r2, r3
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3360      	adds	r3, #96	; 0x60
 8002040:	461a      	mov	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	431a      	orrs	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800205a:	bf00      	nop
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002066:	b480      	push	{r7}
 8002068:	b087      	sub	sp, #28
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	3330      	adds	r3, #48	; 0x30
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	0a1b      	lsrs	r3, r3, #8
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	4413      	add	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	211f      	movs	r1, #31
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	401a      	ands	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	f003 011f 	and.w	r1, r3, #31
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	431a      	orrs	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020be:	b480      	push	{r7}
 80020c0:	b087      	sub	sp, #28
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3314      	adds	r3, #20
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	0e5b      	lsrs	r3, r3, #25
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	4413      	add	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	0d1b      	lsrs	r3, r3, #20
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	2107      	movs	r1, #7
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	401a      	ands	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	0d1b      	lsrs	r3, r3, #20
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	431a      	orrs	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002108:	bf00      	nop
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0318 	and.w	r3, r3, #24
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002138:	40d9      	lsrs	r1, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	400b      	ands	r3, r1
 800213e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002142:	431a      	orrs	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	0007ffff 	.word	0x0007ffff

0800215c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800216c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6093      	str	r3, [r2, #8]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002194:	d101      	bne.n	800219a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021e4:	d101      	bne.n	80021ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <LL_ADC_IsEnabled+0x18>
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <LL_ADC_IsEnabled+0x1a>
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d101      	bne.n	8002236 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b08      	cmp	r3, #8
 8002256:	d101      	bne.n	800225c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e12c      	b.n	80024e0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	2b00      	cmp	r3, #0
 8002292:	d109      	bne.n	80022a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fb15 	bl	80018c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff67 	bl	8002180 <LL_ADC_IsDeepPowerDownEnabled>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff4d 	bl	800215c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff82 	bl	80021d0 <LL_ADC_IsInternalRegulatorEnabled>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d115      	bne.n	80022fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff ff66 	bl	80021a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022dc:	4b82      	ldr	r3, [pc, #520]	; (80024e8 <HAL_ADC_Init+0x27c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	099b      	lsrs	r3, r3, #6
 80022e2:	4a82      	ldr	r2, [pc, #520]	; (80024ec <HAL_ADC_Init+0x280>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	099b      	lsrs	r3, r3, #6
 80022ea:	3301      	adds	r3, #1
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022f0:	e002      	b.n	80022f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f9      	bne.n	80022f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff64 	bl	80021d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f043 0201 	orr.w	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff75 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 8002334:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 80c5 	bne.w	80024ce <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 80c1 	bne.w	80024ce <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002354:	f043 0202 	orr.w	r2, r3, #2
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff49 	bl	80021f8 <LL_ADC_IsEnabled>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10b      	bne.n	8002384 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800236c:	4860      	ldr	r0, [pc, #384]	; (80024f0 <HAL_ADC_Init+0x284>)
 800236e:	f7ff ff43 	bl	80021f8 <LL_ADC_IsEnabled>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4619      	mov	r1, r3
 800237e:	485d      	ldr	r0, [pc, #372]	; (80024f4 <HAL_ADC_Init+0x288>)
 8002380:	f7ff fde8 	bl	8001f54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7e5b      	ldrb	r3, [r3, #25]
 8002388:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800238e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002394:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800239a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d106      	bne.n	80023c0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	3b01      	subs	r3, #1
 80023b8:	045b      	lsls	r3, r3, #17
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d009      	beq.n	80023dc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	4b45      	ldr	r3, [pc, #276]	; (80024f8 <HAL_ADC_Init+0x28c>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	69b9      	ldr	r1, [r7, #24]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff12 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 80023fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff1f 	bl	8002244 <LL_ADC_INJ_IsConversionOngoing>
 8002406:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d13d      	bne.n	800248a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d13a      	bne.n	800248a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002418:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002420:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002430:	f023 0302 	bic.w	r3, r3, #2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	69b9      	ldr	r1, [r7, #24]
 800243a:	430b      	orrs	r3, r1
 800243c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002444:	2b01      	cmp	r3, #1
 8002446:	d118      	bne.n	800247a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002452:	f023 0304 	bic.w	r3, r3, #4
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800245e:	4311      	orrs	r1, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002464:	4311      	orrs	r1, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800246a:	430a      	orrs	r2, r1
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0201 	orr.w	r2, r2, #1
 8002476:	611a      	str	r2, [r3, #16]
 8002478:	e007      	b.n	800248a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d10c      	bne.n	80024ac <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002498:	f023 010f 	bic.w	r1, r3, #15
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	1e5a      	subs	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
 80024aa:	e007      	b.n	80024bc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 020f 	bic.w	r2, r2, #15
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	f023 0303 	bic.w	r3, r3, #3
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	655a      	str	r2, [r3, #84]	; 0x54
 80024cc:	e007      	b.n	80024de <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	f043 0210 	orr.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024de:	7ffb      	ldrb	r3, [r7, #31]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000000 	.word	0x20000000
 80024ec:	053e2d63 	.word	0x053e2d63
 80024f0:	50040000 	.word	0x50040000
 80024f4:	50040300 	.word	0x50040300
 80024f8:	fff0c007 	.word	0xfff0c007

080024fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0b6      	sub	sp, #216	; 0xd8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x22>
 800251a:	2302      	movs	r3, #2
 800251c:	e3b9      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x796>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fe77 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 839e 	bne.w	8002c74 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b05      	cmp	r3, #5
 800253e:	d824      	bhi.n	800258a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	3b02      	subs	r3, #2
 8002546:	2b03      	cmp	r3, #3
 8002548:	d81b      	bhi.n	8002582 <HAL_ADC_ConfigChannel+0x86>
 800254a:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <HAL_ADC_ConfigChannel+0x54>)
 800254c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002550:	08002561 	.word	0x08002561
 8002554:	08002569 	.word	0x08002569
 8002558:	08002571 	.word	0x08002571
 800255c:	08002579 	.word	0x08002579
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	220c      	movs	r2, #12
 8002564:	605a      	str	r2, [r3, #4]
          break;
 8002566:	e011      	b.n	800258c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2212      	movs	r2, #18
 800256c:	605a      	str	r2, [r3, #4]
          break;
 800256e:	e00d      	b.n	800258c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2218      	movs	r2, #24
 8002574:	605a      	str	r2, [r3, #4]
          break;
 8002576:	e009      	b.n	800258c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257e:	605a      	str	r2, [r3, #4]
          break;
 8002580:	e004      	b.n	800258c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2206      	movs	r2, #6
 8002586:	605a      	str	r2, [r3, #4]
          break;
 8002588:	e000      	b.n	800258c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800258a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	f7ff fd64 	bl	8002066 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fe3b 	bl	800221e <LL_ADC_REG_IsConversionOngoing>
 80025a8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fe47 	bl	8002244 <LL_ADC_INJ_IsConversionOngoing>
 80025b6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f040 81a6 	bne.w	8002910 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f040 81a1 	bne.w	8002910 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	461a      	mov	r2, r3
 80025dc:	f7ff fd6f 	bl	80020be <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d00a      	beq.n	8002618 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6919      	ldr	r1, [r3, #16]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002612:	f7ff fcd3 	bl	8001fbc <LL_ADC_SetOffset>
 8002616:	e17b      	b.n	8002910 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fcf0 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x148>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fce5 	bl	8002004 <LL_ADC_GetOffsetChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	f003 021f 	and.w	r2, r3, #31
 8002642:	e01e      	b.n	8002682 <HAL_ADC_ConfigChannel+0x186>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2100      	movs	r1, #0
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fcda 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800266a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002672:	2320      	movs	r3, #32
 8002674:	e004      	b.n	8002680 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002676:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268a:	2b00      	cmp	r3, #0
 800268c:	d105      	bne.n	800269a <HAL_ADC_ConfigChannel+0x19e>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	0e9b      	lsrs	r3, r3, #26
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	e018      	b.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80026ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80026b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80026be:	2320      	movs	r3, #32
 80026c0:	e004      	b.n	80026cc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80026c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026c6:	fab3 f383 	clz	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d106      	bne.n	80026de <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fca9 	bl	8002030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fc8d 	bl	8002004 <LL_ADC_GetOffsetChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <HAL_ADC_ConfigChannel+0x20e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2101      	movs	r1, #1
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fc82 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	0e9b      	lsrs	r3, r3, #26
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	e01e      	b.n	8002748 <HAL_ADC_ConfigChannel+0x24c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2101      	movs	r1, #1
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fc77 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002728:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800272c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002730:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002738:	2320      	movs	r3, #32
 800273a:	e004      	b.n	8002746 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800273c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002740:	fab3 f383 	clz	r3, r3
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x264>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	f003 031f 	and.w	r3, r3, #31
 800275e:	e018      	b.n	8002792 <HAL_ADC_ConfigChannel+0x296>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002774:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002778:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800277c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002784:	2320      	movs	r3, #32
 8002786:	e004      	b.n	8002792 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002788:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800278c:	fab3 f383 	clz	r3, r3
 8002790:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002792:	429a      	cmp	r2, r3
 8002794:	d106      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2200      	movs	r2, #0
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fc46 	bl	8002030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2102      	movs	r1, #2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fc2a 	bl	8002004 <LL_ADC_GetOffsetChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x2d4>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2102      	movs	r1, #2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fc1f 	bl	8002004 <LL_ADC_GetOffsetChannel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	f003 021f 	and.w	r2, r3, #31
 80027ce:	e01e      	b.n	800280e <HAL_ADC_ConfigChannel+0x312>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fc14 	bl	8002004 <LL_ADC_GetOffsetChannel>
 80027dc:	4603      	mov	r3, r0
 80027de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80027ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80027f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80027fe:	2320      	movs	r3, #32
 8002800:	e004      	b.n	800280c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002802:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x32a>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	0e9b      	lsrs	r3, r3, #26
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	e016      	b.n	8002854 <HAL_ADC_ConfigChannel+0x358>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002838:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800283a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800283e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002846:	2320      	movs	r3, #32
 8002848:	e004      	b.n	8002854 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800284a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002854:	429a      	cmp	r2, r3
 8002856:	d106      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2200      	movs	r2, #0
 800285e:	2102      	movs	r1, #2
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fbe5 	bl	8002030 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2103      	movs	r1, #3
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fbc9 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8002872:	4603      	mov	r3, r0
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x396>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2103      	movs	r1, #3
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fbbe 	bl	8002004 <LL_ADC_GetOffsetChannel>
 8002888:	4603      	mov	r3, r0
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	f003 021f 	and.w	r2, r3, #31
 8002890:	e017      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x3c6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2103      	movs	r1, #3
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fbb3 	bl	8002004 <LL_ADC_GetOffsetChannel>
 800289e:	4603      	mov	r3, r0
 80028a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80028aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80028ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80028b4:	2320      	movs	r3, #32
 80028b6:	e003      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80028b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_ADC_ConfigChannel+0x3de>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	e011      	b.n	80028fe <HAL_ADC_ConfigChannel+0x402>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80028ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e003      	b.n	80028fe <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80028f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028fe:	429a      	cmp	r2, r3
 8002900:	d106      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	2103      	movs	r1, #3
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fb90 	bl	8002030 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fc6f 	bl	80021f8 <LL_ADC_IsEnabled>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	f040 813f 	bne.w	8002ba0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	461a      	mov	r2, r3
 8002930:	f7ff fbf0 	bl	8002114 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a8e      	ldr	r2, [pc, #568]	; (8002b74 <HAL_ADC_ConfigChannel+0x678>)
 800293a:	4293      	cmp	r3, r2
 800293c:	f040 8130 	bne.w	8002ba0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x46c>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	0e9b      	lsrs	r3, r3, #26
 8002956:	3301      	adds	r3, #1
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2b09      	cmp	r3, #9
 800295e:	bf94      	ite	ls
 8002960:	2301      	movls	r3, #1
 8002962:	2300      	movhi	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e019      	b.n	800299c <HAL_ADC_ConfigChannel+0x4a0>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002978:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800297a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002980:	2320      	movs	r3, #32
 8002982:	e003      	b.n	800298c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002984:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002986:	fab3 f383 	clz	r3, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	3301      	adds	r3, #1
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	2b09      	cmp	r3, #9
 8002994:	bf94      	ite	ls
 8002996:	2301      	movls	r3, #1
 8002998:	2300      	movhi	r3, #0
 800299a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800299c:	2b00      	cmp	r3, #0
 800299e:	d079      	beq.n	8002a94 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d107      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x4c0>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	3301      	adds	r3, #1
 80029b4:	069b      	lsls	r3, r3, #26
 80029b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ba:	e015      	b.n	80029e8 <HAL_ADC_ConfigChannel+0x4ec>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80029ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e003      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80029d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029da:	fab3 f383 	clz	r3, r3
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	069b      	lsls	r3, r3, #26
 80029e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x50c>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	0e9b      	lsrs	r3, r3, #26
 80029fa:	3301      	adds	r3, #1
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	e017      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x53c>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a10:	fa93 f3a3 	rbit	r3, r3
 8002a14:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a18:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002a1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e003      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f003 031f 	and.w	r3, r3, #31
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	ea42 0103 	orr.w	r1, r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x562>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0e9b      	lsrs	r3, r3, #26
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	051b      	lsls	r3, r3, #20
 8002a5c:	e018      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x594>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002a76:	2320      	movs	r3, #32
 8002a78:	e003      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7c:	fab3 f383 	clz	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a90:	430b      	orrs	r3, r1
 8002a92:	e080      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x5b4>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	0e9b      	lsrs	r3, r3, #26
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	069b      	lsls	r3, r3, #26
 8002aaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aae:	e015      	b.n	8002adc <HAL_ADC_ConfigChannel+0x5e0>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	fa93 f3a3 	rbit	r3, r3
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002ac8:	2320      	movs	r3, #32
 8002aca:	e003      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	069b      	lsls	r3, r3, #26
 8002ad8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x600>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	3301      	adds	r3, #1
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	2101      	movs	r1, #1
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	e017      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x630>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	61fb      	str	r3, [r7, #28]
  return result;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002b14:	2320      	movs	r3, #32
 8002b16:	e003      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	3301      	adds	r3, #1
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2c:	ea42 0103 	orr.w	r1, r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10d      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x65c>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	3301      	adds	r3, #1
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b1e      	subs	r3, #30
 8002b50:	051b      	lsls	r3, r3, #20
 8002b52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b56:	e01d      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x698>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	613b      	str	r3, [r7, #16]
  return result;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002b70:	2320      	movs	r3, #32
 8002b72:	e005      	b.n	8002b80 <HAL_ADC_ConfigChannel+0x684>
 8002b74:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	3301      	adds	r3, #1
 8002b82:	f003 021f 	and.w	r2, r3, #31
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3b1e      	subs	r3, #30
 8002b8e:	051b      	lsls	r3, r3, #20
 8002b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b94:	430b      	orrs	r3, r1
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	6892      	ldr	r2, [r2, #8]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7ff fa8f 	bl	80020be <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b3d      	ldr	r3, [pc, #244]	; (8002c9c <HAL_ADC_ConfigChannel+0x7a0>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d06c      	beq.n	8002c86 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bac:	483c      	ldr	r0, [pc, #240]	; (8002ca0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002bae:	f7ff f9f7 	bl	8001fa0 <LL_ADC_GetCommonPathInternalCh>
 8002bb2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a3a      	ldr	r2, [pc, #232]	; (8002ca4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d127      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d121      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a35      	ldr	r2, [pc, #212]	; (8002ca8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d157      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bde:	4619      	mov	r1, r3
 8002be0:	482f      	ldr	r0, [pc, #188]	; (8002ca0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002be2:	f7ff f9ca 	bl	8001f7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002be6:	4b31      	ldr	r3, [pc, #196]	; (8002cac <HAL_ADC_ConfigChannel+0x7b0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	099b      	lsrs	r3, r3, #6
 8002bec:	4a30      	ldr	r2, [pc, #192]	; (8002cb0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	099b      	lsrs	r3, r3, #6
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c00:	e002      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f9      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c0e:	e03a      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a27      	ldr	r2, [pc, #156]	; (8002cb4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d113      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x746>
 8002c1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10d      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d12a      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4819      	ldr	r0, [pc, #100]	; (8002ca0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002c3c:	f7ff f99d 	bl	8001f7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c40:	e021      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d11c      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d116      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_ADC_ConfigChannel+0x7ac>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d111      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <HAL_ADC_ConfigChannel+0x7a4>)
 8002c6e:	f7ff f984 	bl	8001f7a <LL_ADC_SetCommonPathInternalCh>
 8002c72:	e008      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c78:	f043 0220 	orr.w	r2, r3, #32
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c8e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	37d8      	adds	r7, #216	; 0xd8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	80080000 	.word	0x80080000
 8002ca0:	50040300 	.word	0x50040300
 8002ca4:	c7520000 	.word	0xc7520000
 8002ca8:	50040000 	.word	0x50040000
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	053e2d63 	.word	0x053e2d63
 8002cb4:	cb840000 	.word	0xcb840000
 8002cb8:	80000001 	.word	0x80000001

08002cbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0ed      	b.n	8002eaa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe fe58 	bl	8001990 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf0:	f7ff f924 	bl	8001f3c <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cf6:	e012      	b.n	8002d1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cf8:	f7ff f920 	bl	8001f3c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b0a      	cmp	r3, #10
 8002d04:	d90b      	bls.n	8002d1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2205      	movs	r2, #5
 8002d16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0c5      	b.n	8002eaa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0e5      	beq.n	8002cf8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0202 	bic.w	r2, r2, #2
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d3c:	f7ff f8fe 	bl	8001f3c <HAL_GetTick>
 8002d40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d42:	e012      	b.n	8002d6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d44:	f7ff f8fa 	bl	8001f3c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b0a      	cmp	r3, #10
 8002d50:	d90b      	bls.n	8002d6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2205      	movs	r2, #5
 8002d62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e09f      	b.n	8002eaa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e5      	bne.n	8002d44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	7e1b      	ldrb	r3, [r3, #24]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d108      	bne.n	8002d92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	e007      	b.n	8002da2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7e5b      	ldrb	r3, [r3, #25]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d108      	bne.n	8002dbc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e007      	b.n	8002dcc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7e9b      	ldrb	r3, [r3, #26]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d108      	bne.n	8002de6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0220 	orr.w	r2, r2, #32
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e007      	b.n	8002df6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 0220 	bic.w	r2, r2, #32
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7edb      	ldrb	r3, [r3, #27]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d108      	bne.n	8002e10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0210 	bic.w	r2, r2, #16
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e007      	b.n	8002e20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0210 	orr.w	r2, r2, #16
 8002e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7f1b      	ldrb	r3, [r3, #28]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d108      	bne.n	8002e3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0208 	orr.w	r2, r2, #8
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e007      	b.n	8002e4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0208 	bic.w	r2, r2, #8
 8002e48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7f5b      	ldrb	r3, [r3, #29]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d108      	bne.n	8002e64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0204 	orr.w	r2, r2, #4
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e007      	b.n	8002e74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0204 	bic.w	r2, r2, #4
 8002e72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	ea42 0103 	orr.w	r1, r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	1e5a      	subs	r2, r3, #1
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002eca:	7cfb      	ldrb	r3, [r7, #19]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d003      	beq.n	8002ed8 <HAL_CAN_ConfigFilter+0x26>
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	f040 80aa 	bne.w	800302c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d123      	bne.n	8002f5a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	401a      	ands	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f34:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3248      	adds	r2, #72	; 0x48
 8002f3a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f4e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f50:	6979      	ldr	r1, [r7, #20]
 8002f52:	3348      	adds	r3, #72	; 0x48
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d122      	bne.n	8002fa8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3248      	adds	r2, #72	; 0x48
 8002f88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f9e:	6979      	ldr	r1, [r7, #20]
 8002fa0:	3348      	adds	r3, #72	; 0x48
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	401a      	ands	r2, r3
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002fc2:	e007      	b.n	8002fd4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002fee:	e007      	b.n	8003000 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d107      	bne.n	8003018 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	431a      	orrs	r2, r3
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800301e:	f023 0201 	bic.w	r2, r3, #1
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	e006      	b.n	800303a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d12e      	bne.n	80030b8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2202      	movs	r2, #2
 800305e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003072:	f7fe ff63 	bl	8001f3c <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003078:	e012      	b.n	80030a0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800307a:	f7fe ff5f 	bl	8001f3c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b0a      	cmp	r3, #10
 8003086:	d90b      	bls.n	80030a0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2205      	movs	r2, #5
 8003098:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e012      	b.n	80030c6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1e5      	bne.n	800307a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	e006      	b.n	80030c6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b089      	sub	sp, #36	; 0x24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	607a      	str	r2, [r7, #4]
 80030da:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80030ec:	7ffb      	ldrb	r3, [r7, #31]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d003      	beq.n	80030fa <HAL_CAN_AddTxMessage+0x2c>
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	f040 80ad 	bne.w	8003254 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10a      	bne.n	800311a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8095 	beq.w	8003244 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	0e1b      	lsrs	r3, r3, #24
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003124:	2201      	movs	r2, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	409a      	lsls	r2, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003140:	68f9      	ldr	r1, [r7, #12]
 8003142:	6809      	ldr	r1, [r1, #0]
 8003144:	431a      	orrs	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	3318      	adds	r3, #24
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	440b      	add	r3, r1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e00f      	b.n	8003172 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800315c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003162:	68f9      	ldr	r1, [r7, #12]
 8003164:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003166:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3318      	adds	r3, #24
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	440b      	add	r3, r1
 8003170:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6819      	ldr	r1, [r3, #0]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	3318      	adds	r3, #24
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	440b      	add	r3, r1
 8003182:	3304      	adds	r3, #4
 8003184:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	7d1b      	ldrb	r3, [r3, #20]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d111      	bne.n	80031b2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	3318      	adds	r3, #24
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	6811      	ldr	r1, [r2, #0]
 80031a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3318      	adds	r3, #24
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	440b      	add	r3, r1
 80031ae:	3304      	adds	r3, #4
 80031b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3307      	adds	r3, #7
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	061a      	lsls	r2, r3, #24
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3306      	adds	r3, #6
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3305      	adds	r3, #5
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	4313      	orrs	r3, r2
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	3204      	adds	r2, #4
 80031d2:	7812      	ldrb	r2, [r2, #0]
 80031d4:	4610      	mov	r0, r2
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	6811      	ldr	r1, [r2, #0]
 80031da:	ea43 0200 	orr.w	r2, r3, r0
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	440b      	add	r3, r1
 80031e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80031e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3303      	adds	r3, #3
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	061a      	lsls	r2, r3, #24
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3302      	adds	r3, #2
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3301      	adds	r3, #1
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	021b      	lsls	r3, r3, #8
 8003204:	4313      	orrs	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	7812      	ldrb	r2, [r2, #0]
 800320a:	4610      	mov	r0, r2
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	6811      	ldr	r1, [r2, #0]
 8003210:	ea43 0200 	orr.w	r2, r3, r0
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	440b      	add	r3, r1
 800321a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800321e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3318      	adds	r3, #24
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	4413      	add	r3, r2
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	6811      	ldr	r1, [r2, #0]
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	3318      	adds	r3, #24
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	440b      	add	r3, r1
 800323e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	e00e      	b.n	8003262 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e006      	b.n	8003262 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
  }
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800326e:	b480      	push	{r7}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003280:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003282:	7afb      	ldrb	r3, [r7, #11]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d002      	beq.n	800328e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003288:	7afb      	ldrb	r3, [r7, #11]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d11d      	bne.n	80032ca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3301      	adds	r3, #1
 80032a0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3301      	adds	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80032ca:	68fb      	ldr	r3, [r7, #12]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ec:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80032ee:	7afb      	ldrb	r3, [r7, #11]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d002      	beq.n	80032fa <HAL_CAN_IsTxMessagePending+0x22>
 80032f4:	7afb      	ldrb	r3, [r7, #11]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d10b      	bne.n	8003312 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	069b      	lsls	r3, r3, #26
 8003304:	401a      	ands	r2, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	069b      	lsls	r3, r3, #26
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800330e:	2301      	movs	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8003312:	68fb      	ldr	r3, [r7, #12]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003334:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d003      	beq.n	8003344 <HAL_CAN_GetRxMessage+0x24>
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b02      	cmp	r3, #2
 8003340:	f040 80f3 	bne.w	800352a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10e      	bne.n	8003368 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d116      	bne.n	8003386 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0e7      	b.n	8003538 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d107      	bne.n	8003386 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0d8      	b.n	8003538 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	331b      	adds	r3, #27
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	4413      	add	r3, r2
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0204 	and.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10c      	bne.n	80033be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	331b      	adds	r3, #27
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	4413      	add	r3, r2
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	0d5b      	lsrs	r3, r3, #21
 80033b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e00b      	b.n	80033d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	331b      	adds	r3, #27
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	4413      	add	r3, r2
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	08db      	lsrs	r3, r3, #3
 80033ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	331b      	adds	r3, #27
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4413      	add	r3, r2
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0202 	and.w	r2, r3, #2
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	331b      	adds	r3, #27
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	4413      	add	r3, r2
 80033f8:	3304      	adds	r3, #4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 020f 	and.w	r2, r3, #15
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	331b      	adds	r3, #27
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	b2da      	uxtb	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	331b      	adds	r3, #27
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	4413      	add	r3, r2
 8003428:	3304      	adds	r3, #4
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	0c1b      	lsrs	r3, r3, #16
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	4413      	add	r3, r2
 800343e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	4413      	add	r3, r2
 8003454:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	0a1a      	lsrs	r2, r3, #8
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	3301      	adds	r3, #1
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	4413      	add	r3, r2
 800346e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0c1a      	lsrs	r2, r3, #16
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	3302      	adds	r3, #2
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	4413      	add	r3, r2
 8003488:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	0e1a      	lsrs	r2, r3, #24
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	3303      	adds	r3, #3
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	3304      	adds	r3, #4
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0a1a      	lsrs	r2, r3, #8
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	3305      	adds	r3, #5
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	0c1a      	lsrs	r2, r3, #16
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	3306      	adds	r3, #6
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0e1a      	lsrs	r2, r3, #24
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	3307      	adds	r3, #7
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0220 	orr.w	r2, r2, #32
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	e007      	b.n	8003526 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0220 	orr.w	r2, r2, #32
 8003524:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	e006      	b.n	8003538 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
  }
}
 8003538:	4618      	mov	r0, r3
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003554:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d002      	beq.n	8003562 <HAL_CAN_ActivateNotification+0x1e>
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d109      	bne.n	8003576 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6959      	ldr	r1, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e006      	b.n	8003584 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
  }
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08a      	sub	sp, #40	; 0x28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d07c      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d023      	beq.n	8003628 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f983 	bl	80038fe <HAL_CAN_TxMailbox0CompleteCallback>
 80035f8:	e016      	b.n	8003628 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
 800360c:	e00c      	b.n	8003628 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
 8003620:	e002      	b.n	8003628 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f989 	bl	800393a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d024      	beq.n	800367c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800363a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f963 	bl	8003912 <HAL_CAN_TxMailbox1CompleteCallback>
 800364c:	e016      	b.n	800367c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
 8003660:	e00c      	b.n	800367c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003668:	2b00      	cmp	r3, #0
 800366a:	d004      	beq.n	8003676 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
 8003674:	e002      	b.n	800367c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f969 	bl	800394e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d024      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800368e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f943 	bl	8003926 <HAL_CAN_TxMailbox2CompleteCallback>
 80036a0:	e016      	b.n	80036d0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	e00c      	b.n	80036d0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
 80036c8:	e002      	b.n	80036d0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f949 	bl	8003962 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00c      	beq.n	80036f4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d007      	beq.n	80036f4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2210      	movs	r2, #16
 80036f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d006      	beq.n	8003716 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2208      	movs	r2, #8
 800370e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f930 	bl	8003976 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d009      	beq.n	8003734 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d002      	beq.n	8003734 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd fcb4 	bl	800109c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00c      	beq.n	8003758 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800374e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2210      	movs	r2, #16
 8003756:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d006      	beq.n	800377a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2208      	movs	r2, #8
 8003772:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f912 	bl	800399e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f8f9 	bl	800398a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00b      	beq.n	80037ba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d006      	beq.n	80037ba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2210      	movs	r2, #16
 80037b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8fc 	bl	80039b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d006      	beq.n	80037dc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2208      	movs	r2, #8
 80037d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f8f5 	bl	80039c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d07b      	beq.n	80038de <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d072      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d008      	beq.n	800380c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	f043 0302 	orr.w	r3, r3, #2
 8003826:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f043 0304 	orr.w	r3, r3, #4
 8003842:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800384a:	2b00      	cmp	r3, #0
 800384c:	d043      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003854:	2b00      	cmp	r3, #0
 8003856:	d03e      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800385e:	2b60      	cmp	r3, #96	; 0x60
 8003860:	d02b      	beq.n	80038ba <HAL_CAN_IRQHandler+0x32a>
 8003862:	2b60      	cmp	r3, #96	; 0x60
 8003864:	d82e      	bhi.n	80038c4 <HAL_CAN_IRQHandler+0x334>
 8003866:	2b50      	cmp	r3, #80	; 0x50
 8003868:	d022      	beq.n	80038b0 <HAL_CAN_IRQHandler+0x320>
 800386a:	2b50      	cmp	r3, #80	; 0x50
 800386c:	d82a      	bhi.n	80038c4 <HAL_CAN_IRQHandler+0x334>
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d019      	beq.n	80038a6 <HAL_CAN_IRQHandler+0x316>
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d826      	bhi.n	80038c4 <HAL_CAN_IRQHandler+0x334>
 8003876:	2b30      	cmp	r3, #48	; 0x30
 8003878:	d010      	beq.n	800389c <HAL_CAN_IRQHandler+0x30c>
 800387a:	2b30      	cmp	r3, #48	; 0x30
 800387c:	d822      	bhi.n	80038c4 <HAL_CAN_IRQHandler+0x334>
 800387e:	2b10      	cmp	r3, #16
 8003880:	d002      	beq.n	8003888 <HAL_CAN_IRQHandler+0x2f8>
 8003882:	2b20      	cmp	r3, #32
 8003884:	d005      	beq.n	8003892 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003886:	e01d      	b.n	80038c4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f043 0308 	orr.w	r3, r3, #8
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003890:	e019      	b.n	80038c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	f043 0310 	orr.w	r3, r3, #16
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800389a:	e014      	b.n	80038c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	f043 0320 	orr.w	r3, r3, #32
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038a4:	e00f      	b.n	80038c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038ae:	e00a      	b.n	80038c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038b8:	e005      	b.n	80038c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80038c2:	e000      	b.n	80038c6 <HAL_CAN_IRQHandler+0x336>
            break;
 80038c4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80038d4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2204      	movs	r2, #4
 80038dc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f872 	bl	80039da <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80038f6:	bf00      	nop
 80038f8:	3728      	adds	r7, #40	; 0x28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80039ba:	bf00      	nop
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <__NVIC_SetPriorityGrouping>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <__NVIC_SetPriorityGrouping+0x44>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a22:	4a04      	ldr	r2, [pc, #16]	; (8003a34 <__NVIC_SetPriorityGrouping+0x44>)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	60d3      	str	r3, [r2, #12]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <__NVIC_GetPriorityGrouping>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <__NVIC_GetPriorityGrouping+0x18>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	0a1b      	lsrs	r3, r3, #8
 8003a42:	f003 0307 	and.w	r3, r3, #7
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <__NVIC_EnableIRQ>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	db0b      	blt.n	8003a7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	f003 021f 	and.w	r2, r3, #31
 8003a6c:	4907      	ldr	r1, [pc, #28]	; (8003a8c <__NVIC_EnableIRQ+0x38>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	2001      	movs	r0, #1
 8003a76:	fa00 f202 	lsl.w	r2, r0, r2
 8003a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	e000e100 	.word	0xe000e100

08003a90 <__NVIC_SetPriority>:
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	6039      	str	r1, [r7, #0]
 8003a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	db0a      	blt.n	8003aba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	490c      	ldr	r1, [pc, #48]	; (8003adc <__NVIC_SetPriority+0x4c>)
 8003aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aae:	0112      	lsls	r2, r2, #4
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ab8:	e00a      	b.n	8003ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	4908      	ldr	r1, [pc, #32]	; (8003ae0 <__NVIC_SetPriority+0x50>)
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	3b04      	subs	r3, #4
 8003ac8:	0112      	lsls	r2, r2, #4
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	440b      	add	r3, r1
 8003ace:	761a      	strb	r2, [r3, #24]
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000e100 	.word	0xe000e100
 8003ae0:	e000ed00 	.word	0xe000ed00

08003ae4 <NVIC_EncodePriority>:
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	; 0x24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f1c3 0307 	rsb	r3, r3, #7
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	bf28      	it	cs
 8003b02:	2304      	movcs	r3, #4
 8003b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3304      	adds	r3, #4
 8003b0a:	2b06      	cmp	r3, #6
 8003b0c:	d902      	bls.n	8003b14 <NVIC_EncodePriority+0x30>
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3b03      	subs	r3, #3
 8003b12:	e000      	b.n	8003b16 <NVIC_EncodePriority+0x32>
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	43da      	mvns	r2, r3
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	401a      	ands	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	43d9      	mvns	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b3c:	4313      	orrs	r3, r2
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3724      	adds	r7, #36	; 0x24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ff4c 	bl	80039f0 <__NVIC_SetPriorityGrouping>
}
 8003b58:	bf00      	nop
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b72:	f7ff ff61 	bl	8003a38 <__NVIC_GetPriorityGrouping>
 8003b76:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f7ff ffb1 	bl	8003ae4 <NVIC_EncodePriority>
 8003b82:	4602      	mov	r2, r0
 8003b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7ff ff80 	bl	8003a90 <__NVIC_SetPriority>
}
 8003b90:	bf00      	nop
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ff54 	bl	8003a54 <__NVIC_EnableIRQ>
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bc2:	e154      	b.n	8003e6e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2101      	movs	r1, #1
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8146 	beq.w	8003e68 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d005      	beq.n	8003bf4 <HAL_GPIO_Init+0x40>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d130      	bne.n	8003c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 0201 	and.w	r2, r3, #1
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d017      	beq.n	8003c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d123      	bne.n	8003ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	08da      	lsrs	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3208      	adds	r2, #8
 8003ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	08da      	lsrs	r2, r3, #3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3208      	adds	r2, #8
 8003ce0:	6939      	ldr	r1, [r7, #16]
 8003ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 0203 	and.w	r2, r3, #3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 80a0 	beq.w	8003e68 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d28:	4b58      	ldr	r3, [pc, #352]	; (8003e8c <HAL_GPIO_Init+0x2d8>)
 8003d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2c:	4a57      	ldr	r2, [pc, #348]	; (8003e8c <HAL_GPIO_Init+0x2d8>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6613      	str	r3, [r2, #96]	; 0x60
 8003d34:	4b55      	ldr	r3, [pc, #340]	; (8003e8c <HAL_GPIO_Init+0x2d8>)
 8003d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d40:	4a53      	ldr	r2, [pc, #332]	; (8003e90 <HAL_GPIO_Init+0x2dc>)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	220f      	movs	r2, #15
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4013      	ands	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d6a:	d019      	beq.n	8003da0 <HAL_GPIO_Init+0x1ec>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a49      	ldr	r2, [pc, #292]	; (8003e94 <HAL_GPIO_Init+0x2e0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d013      	beq.n	8003d9c <HAL_GPIO_Init+0x1e8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a48      	ldr	r2, [pc, #288]	; (8003e98 <HAL_GPIO_Init+0x2e4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d00d      	beq.n	8003d98 <HAL_GPIO_Init+0x1e4>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a47      	ldr	r2, [pc, #284]	; (8003e9c <HAL_GPIO_Init+0x2e8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d007      	beq.n	8003d94 <HAL_GPIO_Init+0x1e0>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a46      	ldr	r2, [pc, #280]	; (8003ea0 <HAL_GPIO_Init+0x2ec>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_GPIO_Init+0x1dc>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	e008      	b.n	8003da2 <HAL_GPIO_Init+0x1ee>
 8003d90:	2307      	movs	r3, #7
 8003d92:	e006      	b.n	8003da2 <HAL_GPIO_Init+0x1ee>
 8003d94:	2303      	movs	r3, #3
 8003d96:	e004      	b.n	8003da2 <HAL_GPIO_Init+0x1ee>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e002      	b.n	8003da2 <HAL_GPIO_Init+0x1ee>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_GPIO_Init+0x1ee>
 8003da0:	2300      	movs	r3, #0
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	f002 0203 	and.w	r2, r2, #3
 8003da8:	0092      	lsls	r2, r2, #2
 8003daa:	4093      	lsls	r3, r2
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003db2:	4937      	ldr	r1, [pc, #220]	; (8003e90 <HAL_GPIO_Init+0x2dc>)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	3302      	adds	r3, #2
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dc0:	4b38      	ldr	r3, [pc, #224]	; (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003de4:	4a2f      	ldr	r2, [pc, #188]	; (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dea:	4b2e      	ldr	r3, [pc, #184]	; (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e0e:	4a25      	ldr	r2, [pc, #148]	; (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e14:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e38:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e3e:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e62:	4a10      	ldr	r2, [pc, #64]	; (8003ea4 <HAL_GPIO_Init+0x2f0>)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa22 f303 	lsr.w	r3, r2, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f47f aea3 	bne.w	8003bc4 <HAL_GPIO_Init+0x10>
  }
}
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40010000 	.word	0x40010000
 8003e94:	48000400 	.word	0x48000400
 8003e98:	48000800 	.word	0x48000800
 8003e9c:	48000c00 	.word	0x48000c00
 8003ea0:	48001000 	.word	0x48001000
 8003ea4:	40010400 	.word	0x40010400

08003ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	807b      	strh	r3, [r7, #2]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb8:	787b      	ldrb	r3, [r7, #1]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ec4:	e002      	b.n	8003ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ec6:	887a      	ldrh	r2, [r7, #2]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eea:	887a      	ldrh	r2, [r7, #2]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	041a      	lsls	r2, r3, #16
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	43d9      	mvns	r1, r3
 8003ef6:	887b      	ldrh	r3, [r7, #2]
 8003ef8:	400b      	ands	r3, r1
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	619a      	str	r2, [r3, #24]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40007000 	.word	0x40007000

08003f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f36:	d130      	bne.n	8003f9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f38:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f44:	d038      	beq.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f4e:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f56:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2232      	movs	r2, #50	; 0x32
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	0c9b      	lsrs	r3, r3, #18
 8003f68:	3301      	adds	r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f6c:	e002      	b.n	8003f74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3b01      	subs	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f74:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f80:	d102      	bne.n	8003f88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f2      	bne.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f94:	d110      	bne.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e00f      	b.n	8003fba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f9a:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa6:	d007      	beq.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fb0:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	20000000 	.word	0x20000000
 8003fd0:	431bde83 	.word	0x431bde83

08003fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f000 bc02 	b.w	80047ec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fe8:	4b96      	ldr	r3, [pc, #600]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ff2:	4b94      	ldr	r3, [pc, #592]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80e4 	beq.w	80041d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <HAL_RCC_OscConfig+0x4c>
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	f040 808b 	bne.w	800412e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2b01      	cmp	r3, #1
 800401c:	f040 8087 	bne.w	800412e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004020:	4b88      	ldr	r3, [pc, #544]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_OscConfig+0x64>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e3d9      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1a      	ldr	r2, [r3, #32]
 800403c:	4b81      	ldr	r3, [pc, #516]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d004      	beq.n	8004052 <HAL_RCC_OscConfig+0x7e>
 8004048:	4b7e      	ldr	r3, [pc, #504]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004050:	e005      	b.n	800405e <HAL_RCC_OscConfig+0x8a>
 8004052:	4b7c      	ldr	r3, [pc, #496]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800405e:	4293      	cmp	r3, r2
 8004060:	d223      	bcs.n	80040aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fdbc 	bl	8004be4 <RCC_SetFlashLatencyFromMSIRange>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e3ba      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004076:	4b73      	ldr	r3, [pc, #460]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a72      	ldr	r2, [pc, #456]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 800407c:	f043 0308 	orr.w	r3, r3, #8
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b70      	ldr	r3, [pc, #448]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	496d      	ldr	r1, [pc, #436]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004090:	4313      	orrs	r3, r2
 8004092:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004094:	4b6b      	ldr	r3, [pc, #428]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	4968      	ldr	r1, [pc, #416]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
 80040a8:	e025      	b.n	80040f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040aa:	4b66      	ldr	r3, [pc, #408]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a65      	ldr	r2, [pc, #404]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80040b0:	f043 0308 	orr.w	r3, r3, #8
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b63      	ldr	r3, [pc, #396]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	4960      	ldr	r1, [pc, #384]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040c8:	4b5e      	ldr	r3, [pc, #376]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	495b      	ldr	r1, [pc, #364]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fd7c 	bl	8004be4 <RCC_SetFlashLatencyFromMSIRange>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e37a      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040f6:	f000 fc81 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80040fa:	4602      	mov	r2, r0
 80040fc:	4b51      	ldr	r3, [pc, #324]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	4950      	ldr	r1, [pc, #320]	; (8004248 <HAL_RCC_OscConfig+0x274>)
 8004108:	5ccb      	ldrb	r3, [r1, r3]
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	fa22 f303 	lsr.w	r3, r2, r3
 8004112:	4a4e      	ldr	r2, [pc, #312]	; (800424c <HAL_RCC_OscConfig+0x278>)
 8004114:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004116:	4b4e      	ldr	r3, [pc, #312]	; (8004250 <HAL_RCC_OscConfig+0x27c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd fd4e 	bl	8001bbc <HAL_InitTick>
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d052      	beq.n	80041d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	e35e      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d032      	beq.n	800419c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004136:	4b43      	ldr	r3, [pc, #268]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a42      	ldr	r2, [pc, #264]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004142:	f7fd fefb 	bl	8001f3c <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800414a:	f7fd fef7 	bl	8001f3c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e347      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800415c:	4b39      	ldr	r3, [pc, #228]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004168:	4b36      	ldr	r3, [pc, #216]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a35      	ldr	r2, [pc, #212]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 800416e:	f043 0308 	orr.w	r3, r3, #8
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4b33      	ldr	r3, [pc, #204]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	4930      	ldr	r1, [pc, #192]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004186:	4b2f      	ldr	r3, [pc, #188]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	492b      	ldr	r1, [pc, #172]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
 800419a:	e01a      	b.n	80041d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800419c:	4b29      	ldr	r3, [pc, #164]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a28      	ldr	r2, [pc, #160]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041a8:	f7fd fec8 	bl	8001f3c <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041b0:	f7fd fec4 	bl	8001f3c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e314      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041c2:	4b20      	ldr	r3, [pc, #128]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x1dc>
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d073      	beq.n	80042c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d005      	beq.n	80041f0 <HAL_RCC_OscConfig+0x21c>
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b0c      	cmp	r3, #12
 80041e8:	d10e      	bne.n	8004208 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d10b      	bne.n	8004208 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d063      	beq.n	80042c4 <HAL_RCC_OscConfig+0x2f0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d15f      	bne.n	80042c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e2f1      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d106      	bne.n	8004220 <HAL_RCC_OscConfig+0x24c>
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a0b      	ldr	r2, [pc, #44]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e025      	b.n	800426c <HAL_RCC_OscConfig+0x298>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004228:	d114      	bne.n	8004254 <HAL_RCC_OscConfig+0x280>
 800422a:	4b06      	ldr	r3, [pc, #24]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a05      	ldr	r2, [pc, #20]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a02      	ldr	r2, [pc, #8]	; (8004244 <HAL_RCC_OscConfig+0x270>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e013      	b.n	800426c <HAL_RCC_OscConfig+0x298>
 8004244:	40021000 	.word	0x40021000
 8004248:	0800e7d4 	.word	0x0800e7d4
 800424c:	20000000 	.word	0x20000000
 8004250:	20000004 	.word	0x20000004
 8004254:	4ba0      	ldr	r3, [pc, #640]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a9f      	ldr	r2, [pc, #636]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800425a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	4b9d      	ldr	r3, [pc, #628]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a9c      	ldr	r2, [pc, #624]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 8004266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd fe62 	bl	8001f3c <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427c:	f7fd fe5e 	bl	8001f3c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e2ae      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800428e:	4b92      	ldr	r3, [pc, #584]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x2a8>
 800429a:	e014      	b.n	80042c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fd fe4e 	bl	8001f3c <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fd fe4a 	bl	8001f3c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e29a      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042b6:	4b88      	ldr	r3, [pc, #544]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x2d0>
 80042c2:	e000      	b.n	80042c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d060      	beq.n	8004394 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_OscConfig+0x310>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	d119      	bne.n	8004312 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d116      	bne.n	8004312 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e4:	4b7c      	ldr	r3, [pc, #496]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_OscConfig+0x328>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e277      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fc:	4b76      	ldr	r3, [pc, #472]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	4973      	ldr	r1, [pc, #460]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004310:	e040      	b.n	8004394 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d023      	beq.n	8004362 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800431a:	4b6f      	ldr	r3, [pc, #444]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6e      	ldr	r2, [pc, #440]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004326:	f7fd fe09 	bl	8001f3c <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800432e:	f7fd fe05 	bl	8001f3c <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e255      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004340:	4b65      	ldr	r3, [pc, #404]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434c:	4b62      	ldr	r3, [pc, #392]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	495f      	ldr	r1, [pc, #380]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800435c:	4313      	orrs	r3, r2
 800435e:	604b      	str	r3, [r1, #4]
 8004360:	e018      	b.n	8004394 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004362:	4b5d      	ldr	r3, [pc, #372]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a5c      	ldr	r2, [pc, #368]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 8004368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800436c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436e:	f7fd fde5 	bl	8001f3c <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004376:	f7fd fde1 	bl	8001f3c <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e231      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004388:	4b53      	ldr	r3, [pc, #332]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f0      	bne.n	8004376 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d03c      	beq.n	800441a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01c      	beq.n	80043e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043a8:	4b4b      	ldr	r3, [pc, #300]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80043aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ae:	4a4a      	ldr	r2, [pc, #296]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fd fdc0 	bl	8001f3c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fd fdbc 	bl	8001f3c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e20c      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043d2:	4b41      	ldr	r3, [pc, #260]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80043d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ef      	beq.n	80043c0 <HAL_RCC_OscConfig+0x3ec>
 80043e0:	e01b      	b.n	800441a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e2:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80043e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e8:	4a3b      	ldr	r2, [pc, #236]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80043ea:	f023 0301 	bic.w	r3, r3, #1
 80043ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f2:	f7fd fda3 	bl	8001f3c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fd fd9f 	bl	8001f3c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e1ef      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800440c:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800440e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1ef      	bne.n	80043fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80a6 	beq.w	8004574 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004428:	2300      	movs	r3, #0
 800442a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800442c:	4b2a      	ldr	r3, [pc, #168]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10d      	bne.n	8004454 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800443e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004442:	6593      	str	r3, [r2, #88]	; 0x58
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 8004446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004450:	2301      	movs	r3, #1
 8004452:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004454:	4b21      	ldr	r3, [pc, #132]	; (80044dc <HAL_RCC_OscConfig+0x508>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445c:	2b00      	cmp	r3, #0
 800445e:	d118      	bne.n	8004492 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004460:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <HAL_RCC_OscConfig+0x508>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1d      	ldr	r2, [pc, #116]	; (80044dc <HAL_RCC_OscConfig+0x508>)
 8004466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446c:	f7fd fd66 	bl	8001f3c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004474:	f7fd fd62 	bl	8001f3c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e1b2      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004486:	4b15      	ldr	r3, [pc, #84]	; (80044dc <HAL_RCC_OscConfig+0x508>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d108      	bne.n	80044ac <HAL_RCC_OscConfig+0x4d8>
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 800449c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a0:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044aa:	e029      	b.n	8004500 <HAL_RCC_OscConfig+0x52c>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d115      	bne.n	80044e0 <HAL_RCC_OscConfig+0x50c>
 80044b4:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044c4:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	4a03      	ldr	r2, [pc, #12]	; (80044d8 <HAL_RCC_OscConfig+0x504>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044d4:	e014      	b.n	8004500 <HAL_RCC_OscConfig+0x52c>
 80044d6:	bf00      	nop
 80044d8:	40021000 	.word	0x40021000
 80044dc:	40007000 	.word	0x40007000
 80044e0:	4b9a      	ldr	r3, [pc, #616]	; (800474c <HAL_RCC_OscConfig+0x778>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	4a99      	ldr	r2, [pc, #612]	; (800474c <HAL_RCC_OscConfig+0x778>)
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f0:	4b96      	ldr	r3, [pc, #600]	; (800474c <HAL_RCC_OscConfig+0x778>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	4a95      	ldr	r2, [pc, #596]	; (800474c <HAL_RCC_OscConfig+0x778>)
 80044f8:	f023 0304 	bic.w	r3, r3, #4
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d016      	beq.n	8004536 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fd fd18 	bl	8001f3c <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800450e:	e00a      	b.n	8004526 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004510:	f7fd fd14 	bl	8001f3c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f241 3288 	movw	r2, #5000	; 0x1388
 800451e:	4293      	cmp	r3, r2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e162      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004526:	4b89      	ldr	r3, [pc, #548]	; (800474c <HAL_RCC_OscConfig+0x778>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ed      	beq.n	8004510 <HAL_RCC_OscConfig+0x53c>
 8004534:	e015      	b.n	8004562 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004536:	f7fd fd01 	bl	8001f3c <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fd fcfd 	bl	8001f3c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e14b      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004554:	4b7d      	ldr	r3, [pc, #500]	; (800474c <HAL_RCC_OscConfig+0x778>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1ed      	bne.n	800453e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004562:	7ffb      	ldrb	r3, [r7, #31]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004568:	4b78      	ldr	r3, [pc, #480]	; (800474c <HAL_RCC_OscConfig+0x778>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	4a77      	ldr	r2, [pc, #476]	; (800474c <HAL_RCC_OscConfig+0x778>)
 800456e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004572:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d03c      	beq.n	80045fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01c      	beq.n	80045c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004588:	4b70      	ldr	r3, [pc, #448]	; (800474c <HAL_RCC_OscConfig+0x778>)
 800458a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800458e:	4a6f      	ldr	r2, [pc, #444]	; (800474c <HAL_RCC_OscConfig+0x778>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fd fcd0 	bl	8001f3c <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045a0:	f7fd fccc 	bl	8001f3c <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e11c      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80045b2:	4b66      	ldr	r3, [pc, #408]	; (800474c <HAL_RCC_OscConfig+0x778>)
 80045b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ef      	beq.n	80045a0 <HAL_RCC_OscConfig+0x5cc>
 80045c0:	e01b      	b.n	80045fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045c2:	4b62      	ldr	r3, [pc, #392]	; (800474c <HAL_RCC_OscConfig+0x778>)
 80045c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c8:	4a60      	ldr	r2, [pc, #384]	; (800474c <HAL_RCC_OscConfig+0x778>)
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d2:	f7fd fcb3 	bl	8001f3c <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045da:	f7fd fcaf 	bl	8001f3c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e0ff      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045ec:	4b57      	ldr	r3, [pc, #348]	; (800474c <HAL_RCC_OscConfig+0x778>)
 80045ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ef      	bne.n	80045da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 80f3 	beq.w	80047ea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	2b02      	cmp	r3, #2
 800460a:	f040 80c9 	bne.w	80047a0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800460e:	4b4f      	ldr	r3, [pc, #316]	; (800474c <HAL_RCC_OscConfig+0x778>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0203 	and.w	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	429a      	cmp	r2, r3
 8004620:	d12c      	bne.n	800467c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	3b01      	subs	r3, #1
 800462e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d123      	bne.n	800467c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004640:	429a      	cmp	r2, r3
 8004642:	d11b      	bne.n	800467c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004650:	429a      	cmp	r2, r3
 8004652:	d113      	bne.n	800467c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465e:	085b      	lsrs	r3, r3, #1
 8004660:	3b01      	subs	r3, #1
 8004662:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d109      	bne.n	800467c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	3b01      	subs	r3, #1
 8004676:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d06b      	beq.n	8004754 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b0c      	cmp	r3, #12
 8004680:	d062      	beq.n	8004748 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004682:	4b32      	ldr	r3, [pc, #200]	; (800474c <HAL_RCC_OscConfig+0x778>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e0ac      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004692:	4b2e      	ldr	r3, [pc, #184]	; (800474c <HAL_RCC_OscConfig+0x778>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2d      	ldr	r2, [pc, #180]	; (800474c <HAL_RCC_OscConfig+0x778>)
 8004698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800469c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800469e:	f7fd fc4d 	bl	8001f3c <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a6:	f7fd fc49 	bl	8001f3c <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e099      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_RCC_OscConfig+0x778>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f0      	bne.n	80046a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <HAL_RCC_OscConfig+0x778>)
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	4b21      	ldr	r3, [pc, #132]	; (8004750 <HAL_RCC_OscConfig+0x77c>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046d4:	3a01      	subs	r2, #1
 80046d6:	0112      	lsls	r2, r2, #4
 80046d8:	4311      	orrs	r1, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046de:	0212      	lsls	r2, r2, #8
 80046e0:	4311      	orrs	r1, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046e6:	0852      	lsrs	r2, r2, #1
 80046e8:	3a01      	subs	r2, #1
 80046ea:	0552      	lsls	r2, r2, #21
 80046ec:	4311      	orrs	r1, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046f2:	0852      	lsrs	r2, r2, #1
 80046f4:	3a01      	subs	r2, #1
 80046f6:	0652      	lsls	r2, r2, #25
 80046f8:	4311      	orrs	r1, r2
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046fe:	06d2      	lsls	r2, r2, #27
 8004700:	430a      	orrs	r2, r1
 8004702:	4912      	ldr	r1, [pc, #72]	; (800474c <HAL_RCC_OscConfig+0x778>)
 8004704:	4313      	orrs	r3, r2
 8004706:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004708:	4b10      	ldr	r3, [pc, #64]	; (800474c <HAL_RCC_OscConfig+0x778>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0f      	ldr	r2, [pc, #60]	; (800474c <HAL_RCC_OscConfig+0x778>)
 800470e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004712:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <HAL_RCC_OscConfig+0x778>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a0c      	ldr	r2, [pc, #48]	; (800474c <HAL_RCC_OscConfig+0x778>)
 800471a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800471e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004720:	f7fd fc0c 	bl	8001f3c <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7fd fc08 	bl	8001f3c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e058      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473a:	4b04      	ldr	r3, [pc, #16]	; (800474c <HAL_RCC_OscConfig+0x778>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004746:	e050      	b.n	80047ea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04f      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
 800474c:	40021000 	.word	0x40021000
 8004750:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004754:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d144      	bne.n	80047ea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004760:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a23      	ldr	r2, [pc, #140]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 8004766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800476a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800476c:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 8004772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004776:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004778:	f7fd fbe0 	bl	8001f3c <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004780:	f7fd fbdc 	bl	8001f3c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e02c      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x7ac>
 800479e:	e024      	b.n	80047ea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d01f      	beq.n	80047e6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a12      	ldr	r2, [pc, #72]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 80047ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fd fbc3 	bl	8001f3c <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ba:	f7fd fbbf 	bl	8001f3c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e00f      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f0      	bne.n	80047ba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80047d8:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	4905      	ldr	r1, [pc, #20]	; (80047f4 <HAL_RCC_OscConfig+0x820>)
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <HAL_RCC_OscConfig+0x824>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	60cb      	str	r3, [r1, #12]
 80047e4:	e001      	b.n	80047ea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000
 80047f8:	feeefffc 	.word	0xfeeefffc

080047fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0e7      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004810:	4b75      	ldr	r3, [pc, #468]	; (80049e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d910      	bls.n	8004840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b72      	ldr	r3, [pc, #456]	; (80049e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 0207 	bic.w	r2, r3, #7
 8004826:	4970      	ldr	r1, [pc, #448]	; (80049e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482e:	4b6e      	ldr	r3, [pc, #440]	; (80049e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0cf      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d010      	beq.n	800486e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004858:	429a      	cmp	r2, r3
 800485a:	d908      	bls.n	800486e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485c:	4b63      	ldr	r3, [pc, #396]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4960      	ldr	r1, [pc, #384]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d04c      	beq.n	8004914 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b03      	cmp	r3, #3
 8004880:	d107      	bne.n	8004892 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004882:	4b5a      	ldr	r3, [pc, #360]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d121      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e0a6      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800489a:	4b54      	ldr	r3, [pc, #336]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d115      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e09a      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048b2:	4b4e      	ldr	r3, [pc, #312]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e08e      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048c2:	4b4a      	ldr	r3, [pc, #296]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e086      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048d2:	4b46      	ldr	r3, [pc, #280]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f023 0203 	bic.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4943      	ldr	r1, [pc, #268]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e4:	f7fd fb2a 	bl	8001f3c <HAL_GetTick>
 80048e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ea:	e00a      	b.n	8004902 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ec:	f7fd fb26 	bl	8001f3c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e06e      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	4b3a      	ldr	r3, [pc, #232]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 020c 	and.w	r2, r3, #12
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	429a      	cmp	r2, r3
 8004912:	d1eb      	bne.n	80048ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d010      	beq.n	8004942 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	4b31      	ldr	r3, [pc, #196]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800492c:	429a      	cmp	r2, r3
 800492e:	d208      	bcs.n	8004942 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004930:	4b2e      	ldr	r3, [pc, #184]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	492b      	ldr	r1, [pc, #172]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004942:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d210      	bcs.n	8004972 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004950:	4b25      	ldr	r3, [pc, #148]	; (80049e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 0207 	bic.w	r2, r3, #7
 8004958:	4923      	ldr	r1, [pc, #140]	; (80049e8 <HAL_RCC_ClockConfig+0x1ec>)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	4313      	orrs	r3, r2
 800495e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004960:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d001      	beq.n	8004972 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e036      	b.n	80049e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0304 	and.w	r3, r3, #4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800497e:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	4918      	ldr	r1, [pc, #96]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 800498c:	4313      	orrs	r3, r2
 800498e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d009      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800499c:	4b13      	ldr	r3, [pc, #76]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4910      	ldr	r1, [pc, #64]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049b0:	f000 f824 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <HAL_RCC_ClockConfig+0x1f0>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	490b      	ldr	r1, [pc, #44]	; (80049f0 <HAL_RCC_ClockConfig+0x1f4>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
 80049cc:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <HAL_RCC_ClockConfig+0x1f8>)
 80049ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_RCC_ClockConfig+0x1fc>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fd f8f1 	bl	8001bbc <HAL_InitTick>
 80049da:	4603      	mov	r3, r0
 80049dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80049de:	7afb      	ldrb	r3, [r7, #11]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40022000 	.word	0x40022000
 80049ec:	40021000 	.word	0x40021000
 80049f0:	0800e7d4 	.word	0x0800e7d4
 80049f4:	20000000 	.word	0x20000000
 80049f8:	20000004 	.word	0x20000004

080049fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b089      	sub	sp, #36	; 0x24
 8004a00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a0a:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a14:	4b3b      	ldr	r3, [pc, #236]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0303 	and.w	r3, r3, #3
 8004a1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x34>
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	d121      	bne.n	8004a6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d11e      	bne.n	8004a6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a30:	4b34      	ldr	r3, [pc, #208]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a3c:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a4c:	4b2d      	ldr	r3, [pc, #180]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a58:	4a2b      	ldr	r2, [pc, #172]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10d      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d102      	bne.n	8004a7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a74:	4b25      	ldr	r3, [pc, #148]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8004a76:	61bb      	str	r3, [r7, #24]
 8004a78:	e004      	b.n	8004a84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a80:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8004a82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b0c      	cmp	r3, #12
 8004a88:	d134      	bne.n	8004af4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d003      	beq.n	8004aa8 <HAL_RCC_GetSysClockFreq+0xac>
 8004aa0:	e005      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004aa2:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8004aa4:	617b      	str	r3, [r7, #20]
      break;
 8004aa6:	e005      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004aa8:	4b18      	ldr	r3, [pc, #96]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8004aaa:	617b      	str	r3, [r7, #20]
      break;
 8004aac:	e002      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	617b      	str	r3, [r7, #20]
      break;
 8004ab2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	091b      	lsrs	r3, r3, #4
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	3301      	adds	r3, #1
 8004ac0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ac2:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	fb03 f202 	mul.w	r2, r3, r2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	0e5b      	lsrs	r3, r3, #25
 8004ae0:	f003 0303 	and.w	r3, r3, #3
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004af4:	69bb      	ldr	r3, [r7, #24]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3724      	adds	r7, #36	; 0x24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000
 8004b08:	0800e7ec 	.word	0x0800e7ec
 8004b0c:	00f42400 	.word	0x00f42400

08004b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b14:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b16:	681b      	ldr	r3, [r3, #0]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000000 	.word	0x20000000

08004b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b2c:	f7ff fff0 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0a1b      	lsrs	r3, r3, #8
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4904      	ldr	r1, [pc, #16]	; (8004b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	f003 031f 	and.w	r3, r3, #31
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	0800e7e4 	.word	0x0800e7e4

08004b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b58:	f7ff ffda 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	0adb      	lsrs	r3, r3, #11
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	4904      	ldr	r1, [pc, #16]	; (8004b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b6a:	5ccb      	ldrb	r3, [r1, r3]
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	0800e7e4 	.word	0x0800e7e4

08004b80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	220f      	movs	r2, #15
 8004b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004b90:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <HAL_RCC_GetClockConfig+0x5c>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0203 	and.w	r2, r3, #3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	; (8004bdc <HAL_RCC_GetClockConfig+0x5c>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_RCC_GetClockConfig+0x5c>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004bb4:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <HAL_RCC_GetClockConfig+0x5c>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	08db      	lsrs	r3, r3, #3
 8004bba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <HAL_RCC_GetClockConfig+0x60>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0207 	and.w	r2, r3, #7
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	601a      	str	r2, [r3, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40022000 	.word	0x40022000

08004be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004bf0:	4b2a      	ldr	r3, [pc, #168]	; (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004bfc:	f7ff f986 	bl	8003f0c <HAL_PWREx_GetVoltageRange>
 8004c00:	6178      	str	r0, [r7, #20]
 8004c02:	e014      	b.n	8004c2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c04:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c08:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c10:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c1c:	f7ff f976 	bl	8003f0c <HAL_PWREx_GetVoltageRange>
 8004c20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c22:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c26:	4a1d      	ldr	r2, [pc, #116]	; (8004c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c34:	d10b      	bne.n	8004c4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b80      	cmp	r3, #128	; 0x80
 8004c3a:	d919      	bls.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2ba0      	cmp	r3, #160	; 0xa0
 8004c40:	d902      	bls.n	8004c48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c42:	2302      	movs	r3, #2
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e013      	b.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c48:	2301      	movs	r3, #1
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	e010      	b.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b80      	cmp	r3, #128	; 0x80
 8004c52:	d902      	bls.n	8004c5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004c54:	2303      	movs	r3, #3
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e00a      	b.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b80      	cmp	r3, #128	; 0x80
 8004c5e:	d102      	bne.n	8004c66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c60:	2302      	movs	r3, #2
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	e004      	b.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b70      	cmp	r3, #112	; 0x70
 8004c6a:	d101      	bne.n	8004c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f023 0207 	bic.w	r2, r3, #7
 8004c78:	4909      	ldr	r1, [pc, #36]	; (8004ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d001      	beq.n	8004c92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e000      	b.n	8004c94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40022000 	.word	0x40022000

08004ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cac:	2300      	movs	r3, #0
 8004cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d031      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cc8:	d01a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004cca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cce:	d814      	bhi.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cd8:	d10f      	bne.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004cda:	4b5d      	ldr	r3, [pc, #372]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	4a5c      	ldr	r2, [pc, #368]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ce6:	e00c      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3304      	adds	r3, #4
 8004cec:	2100      	movs	r1, #0
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f9f0 	bl	80050d4 <RCCEx_PLLSAI1_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004cf8:	e003      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8004cfe:	e000      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d02:	7cfb      	ldrb	r3, [r7, #19]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d08:	4b51      	ldr	r3, [pc, #324]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	494e      	ldr	r1, [pc, #312]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d1e:	e001      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 809e 	beq.w	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d36:	4b46      	ldr	r3, [pc, #280]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004d46:	2300      	movs	r3, #0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00d      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4c:	4b40      	ldr	r3, [pc, #256]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d50:	4a3f      	ldr	r2, [pc, #252]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d56:	6593      	str	r3, [r2, #88]	; 0x58
 8004d58:	4b3d      	ldr	r3, [pc, #244]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d64:	2301      	movs	r3, #1
 8004d66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d68:	4b3a      	ldr	r3, [pc, #232]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a39      	ldr	r2, [pc, #228]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d74:	f7fd f8e2 	bl	8001f3c <HAL_GetTick>
 8004d78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d7a:	e009      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7c:	f7fd f8de 	bl	8001f3c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d902      	bls.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	74fb      	strb	r3, [r7, #19]
        break;
 8004d8e:	e005      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d90:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ef      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d15a      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004da2:	4b2b      	ldr	r3, [pc, #172]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01e      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d019      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dca:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dda:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de0:	4a1b      	ldr	r2, [pc, #108]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dea:	4a19      	ldr	r2, [pc, #100]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d016      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fd f89e 	bl	8001f3c <HAL_GetTick>
 8004e00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e02:	e00b      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e04:	f7fd f89a 	bl	8001f3c <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d902      	bls.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	74fb      	strb	r3, [r7, #19]
            break;
 8004e1a:	e006      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0ec      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004e2a:	7cfb      	ldrb	r3, [r7, #19]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10b      	bne.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3e:	4904      	ldr	r1, [pc, #16]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e46:	e009      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	74bb      	strb	r3, [r7, #18]
 8004e4c:	e006      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	7cfb      	ldrb	r3, [r7, #19]
 8004e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e5c:	7c7b      	ldrb	r3, [r7, #17]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e62:	4b9b      	ldr	r3, [pc, #620]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	4a9a      	ldr	r2, [pc, #616]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e7a:	4b95      	ldr	r3, [pc, #596]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e80:	f023 0203 	bic.w	r2, r3, #3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	4991      	ldr	r1, [pc, #580]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e9c:	4b8c      	ldr	r3, [pc, #560]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f023 020c 	bic.w	r2, r3, #12
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	4989      	ldr	r1, [pc, #548]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ebe:	4b84      	ldr	r3, [pc, #528]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	4980      	ldr	r1, [pc, #512]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ee0:	4b7b      	ldr	r3, [pc, #492]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	4978      	ldr	r1, [pc, #480]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f02:	4b73      	ldr	r3, [pc, #460]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	496f      	ldr	r1, [pc, #444]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f24:	4b6a      	ldr	r3, [pc, #424]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	4967      	ldr	r1, [pc, #412]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f46:	4b62      	ldr	r3, [pc, #392]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	495e      	ldr	r1, [pc, #376]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f68:	4b59      	ldr	r3, [pc, #356]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	4956      	ldr	r1, [pc, #344]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f8a:	4b51      	ldr	r3, [pc, #324]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	494d      	ldr	r1, [pc, #308]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d028      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fac:	4b48      	ldr	r3, [pc, #288]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fba:	4945      	ldr	r1, [pc, #276]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fca:	d106      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fcc:	4b40      	ldr	r3, [pc, #256]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	4a3f      	ldr	r2, [pc, #252]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd6:	60d3      	str	r3, [r2, #12]
 8004fd8:	e011      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fe2:	d10c      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	2101      	movs	r1, #1
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f872 	bl	80050d4 <RCCEx_PLLSAI1_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004ffa:	7cfb      	ldrb	r3, [r7, #19]
 8004ffc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d028      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800500a:	4b31      	ldr	r3, [pc, #196]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005018:	492d      	ldr	r1, [pc, #180]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005024:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005028:	d106      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800502a:	4b29      	ldr	r3, [pc, #164]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	4a28      	ldr	r2, [pc, #160]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005030:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005034:	60d3      	str	r3, [r2, #12]
 8005036:	e011      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005040:	d10c      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3304      	adds	r3, #4
 8005046:	2101      	movs	r1, #1
 8005048:	4618      	mov	r0, r3
 800504a:	f000 f843 	bl	80050d4 <RCCEx_PLLSAI1_Config>
 800504e:	4603      	mov	r3, r0
 8005050:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005052:	7cfb      	ldrb	r3, [r7, #19]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01c      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005068:	4b19      	ldr	r3, [pc, #100]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005076:	4916      	ldr	r1, [pc, #88]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005086:	d10c      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	2102      	movs	r1, #2
 800508e:	4618      	mov	r0, r3
 8005090:	f000 f820 	bl	80050d4 <RCCEx_PLLSAI1_Config>
 8005094:	4603      	mov	r3, r0
 8005096:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800509e:	7cfb      	ldrb	r3, [r7, #19]
 80050a0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050ae:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050bc:	4904      	ldr	r1, [pc, #16]	; (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40021000 	.word	0x40021000

080050d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80050e2:	4b74      	ldr	r3, [pc, #464]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d018      	beq.n	8005120 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050ee:	4b71      	ldr	r3, [pc, #452]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0203 	and.w	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d10d      	bne.n	800511a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
       ||
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005106:	4b6b      	ldr	r3, [pc, #428]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	091b      	lsrs	r3, r3, #4
 800510c:	f003 0307 	and.w	r3, r3, #7
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
       ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d047      	beq.n	80051aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	73fb      	strb	r3, [r7, #15]
 800511e:	e044      	b.n	80051aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d018      	beq.n	800515a <RCCEx_PLLSAI1_Config+0x86>
 8005128:	2b03      	cmp	r3, #3
 800512a:	d825      	bhi.n	8005178 <RCCEx_PLLSAI1_Config+0xa4>
 800512c:	2b01      	cmp	r3, #1
 800512e:	d002      	beq.n	8005136 <RCCEx_PLLSAI1_Config+0x62>
 8005130:	2b02      	cmp	r3, #2
 8005132:	d009      	beq.n	8005148 <RCCEx_PLLSAI1_Config+0x74>
 8005134:	e020      	b.n	8005178 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005136:	4b5f      	ldr	r3, [pc, #380]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d11d      	bne.n	800517e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005146:	e01a      	b.n	800517e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005148:	4b5a      	ldr	r3, [pc, #360]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005150:	2b00      	cmp	r3, #0
 8005152:	d116      	bne.n	8005182 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005158:	e013      	b.n	8005182 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800515a:	4b56      	ldr	r3, [pc, #344]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10f      	bne.n	8005186 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005166:	4b53      	ldr	r3, [pc, #332]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d109      	bne.n	8005186 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005176:	e006      	b.n	8005186 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
      break;
 800517c:	e004      	b.n	8005188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800517e:	bf00      	nop
 8005180:	e002      	b.n	8005188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005182:	bf00      	nop
 8005184:	e000      	b.n	8005188 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005186:	bf00      	nop
    }

    if(status == HAL_OK)
 8005188:	7bfb      	ldrb	r3, [r7, #15]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10d      	bne.n	80051aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800518e:	4b49      	ldr	r3, [pc, #292]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6819      	ldr	r1, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	3b01      	subs	r3, #1
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	430b      	orrs	r3, r1
 80051a4:	4943      	ldr	r1, [pc, #268]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d17c      	bne.n	80052aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051b0:	4b40      	ldr	r3, [pc, #256]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a3f      	ldr	r2, [pc, #252]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051bc:	f7fc febe 	bl	8001f3c <HAL_GetTick>
 80051c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051c2:	e009      	b.n	80051d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051c4:	f7fc feba 	bl	8001f3c <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d902      	bls.n	80051d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	73fb      	strb	r3, [r7, #15]
        break;
 80051d6:	e005      	b.n	80051e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051d8:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ef      	bne.n	80051c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d15f      	bne.n	80052aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d110      	bne.n	8005212 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051f0:	4b30      	ldr	r3, [pc, #192]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80051f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6892      	ldr	r2, [r2, #8]
 8005200:	0211      	lsls	r1, r2, #8
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68d2      	ldr	r2, [r2, #12]
 8005206:	06d2      	lsls	r2, r2, #27
 8005208:	430a      	orrs	r2, r1
 800520a:	492a      	ldr	r1, [pc, #168]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800520c:	4313      	orrs	r3, r2
 800520e:	610b      	str	r3, [r1, #16]
 8005210:	e027      	b.n	8005262 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d112      	bne.n	800523e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005218:	4b26      	ldr	r3, [pc, #152]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005220:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6892      	ldr	r2, [r2, #8]
 8005228:	0211      	lsls	r1, r2, #8
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6912      	ldr	r2, [r2, #16]
 800522e:	0852      	lsrs	r2, r2, #1
 8005230:	3a01      	subs	r2, #1
 8005232:	0552      	lsls	r2, r2, #21
 8005234:	430a      	orrs	r2, r1
 8005236:	491f      	ldr	r1, [pc, #124]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005238:	4313      	orrs	r3, r2
 800523a:	610b      	str	r3, [r1, #16]
 800523c:	e011      	b.n	8005262 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800523e:	4b1d      	ldr	r3, [pc, #116]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005246:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6892      	ldr	r2, [r2, #8]
 800524e:	0211      	lsls	r1, r2, #8
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6952      	ldr	r2, [r2, #20]
 8005254:	0852      	lsrs	r2, r2, #1
 8005256:	3a01      	subs	r2, #1
 8005258:	0652      	lsls	r2, r2, #25
 800525a:	430a      	orrs	r2, r1
 800525c:	4915      	ldr	r1, [pc, #84]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800525e:	4313      	orrs	r3, r2
 8005260:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005262:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a13      	ldr	r2, [pc, #76]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005268:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800526c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526e:	f7fc fe65 	bl	8001f3c <HAL_GetTick>
 8005272:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005274:	e009      	b.n	800528a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005276:	f7fc fe61 	bl	8001f3c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d902      	bls.n	800528a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	73fb      	strb	r3, [r7, #15]
          break;
 8005288:	e005      	b.n	8005296 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800528a:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0ef      	beq.n	8005276 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005296:	7bfb      	ldrb	r3, [r7, #15]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d106      	bne.n	80052aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	4903      	ldr	r1, [pc, #12]	; (80052b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40021000 	.word	0x40021000

080052b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e049      	b.n	800535e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc fbaa 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f000 fc10 	bl	8005b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	d001      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e03b      	b.n	80053f8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a19      	ldr	r2, [pc, #100]	; (8005404 <HAL_TIM_Base_Start_IT+0x9c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d009      	beq.n	80053b6 <HAL_TIM_Base_Start_IT+0x4e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053aa:	d004      	beq.n	80053b6 <HAL_TIM_Base_Start_IT+0x4e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a15      	ldr	r2, [pc, #84]	; (8005408 <HAL_TIM_Base_Start_IT+0xa0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d115      	bne.n	80053e2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <HAL_TIM_Base_Start_IT+0xa4>)
 80053be:	4013      	ands	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b06      	cmp	r3, #6
 80053c6:	d015      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x8c>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ce:	d011      	beq.n	80053f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	e008      	b.n	80053f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0201 	orr.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	e000      	b.n	80053f6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40014000 	.word	0x40014000
 800540c:	00010007 	.word	0x00010007

08005410 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e049      	b.n	80054b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f841 	bl	80054be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f000 fb64 	bl	8005b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d122      	bne.n	800552e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d11b      	bne.n	800552e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f06f 0202 	mvn.w	r2, #2
 80054fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fae2 	bl	8005ade <HAL_TIM_IC_CaptureCallback>
 800551a:	e005      	b.n	8005528 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fad4 	bl	8005aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fae5 	bl	8005af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d122      	bne.n	8005582 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b04      	cmp	r3, #4
 8005548:	d11b      	bne.n	8005582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f06f 0204 	mvn.w	r2, #4
 8005552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fab8 	bl	8005ade <HAL_TIM_IC_CaptureCallback>
 800556e:	e005      	b.n	800557c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 faaa 	bl	8005aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fabb 	bl	8005af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f003 0308 	and.w	r3, r3, #8
 800558c:	2b08      	cmp	r3, #8
 800558e:	d122      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b08      	cmp	r3, #8
 800559c:	d11b      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f06f 0208 	mvn.w	r2, #8
 80055a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2204      	movs	r2, #4
 80055ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f003 0303 	and.w	r3, r3, #3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fa8e 	bl	8005ade <HAL_TIM_IC_CaptureCallback>
 80055c2:	e005      	b.n	80055d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fa80 	bl	8005aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fa91 	bl	8005af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d122      	bne.n	800562a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d11b      	bne.n	800562a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f06f 0210 	mvn.w	r2, #16
 80055fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2208      	movs	r2, #8
 8005600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa64 	bl	8005ade <HAL_TIM_IC_CaptureCallback>
 8005616:	e005      	b.n	8005624 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa56 	bl	8005aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa67 	bl	8005af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10e      	bne.n	8005656 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d107      	bne.n	8005656 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f06f 0201 	mvn.w	r2, #1
 800564e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7fc f8f7 	bl	8001844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005660:	2b80      	cmp	r3, #128	; 0x80
 8005662:	d10e      	bne.n	8005682 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566e:	2b80      	cmp	r3, #128	; 0x80
 8005670:	d107      	bne.n	8005682 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800567a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 feb1 	bl	80063e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005690:	d10e      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569c:	2b80      	cmp	r3, #128	; 0x80
 800569e:	d107      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fea4 	bl	80063f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d10e      	bne.n	80056dc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d107      	bne.n	80056dc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fa15 	bl	8005b06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b20      	cmp	r3, #32
 80056e8:	d10e      	bne.n	8005708 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0320 	and.w	r3, r3, #32
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d107      	bne.n	8005708 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0220 	mvn.w	r2, #32
 8005700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fe64 	bl	80063d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800572a:	2302      	movs	r3, #2
 800572c:	e0ff      	b.n	800592e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b14      	cmp	r3, #20
 800573a:	f200 80f0 	bhi.w	800591e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005799 	.word	0x08005799
 8005748:	0800591f 	.word	0x0800591f
 800574c:	0800591f 	.word	0x0800591f
 8005750:	0800591f 	.word	0x0800591f
 8005754:	080057d9 	.word	0x080057d9
 8005758:	0800591f 	.word	0x0800591f
 800575c:	0800591f 	.word	0x0800591f
 8005760:	0800591f 	.word	0x0800591f
 8005764:	0800581b 	.word	0x0800581b
 8005768:	0800591f 	.word	0x0800591f
 800576c:	0800591f 	.word	0x0800591f
 8005770:	0800591f 	.word	0x0800591f
 8005774:	0800585b 	.word	0x0800585b
 8005778:	0800591f 	.word	0x0800591f
 800577c:	0800591f 	.word	0x0800591f
 8005780:	0800591f 	.word	0x0800591f
 8005784:	0800589d 	.word	0x0800589d
 8005788:	0800591f 	.word	0x0800591f
 800578c:	0800591f 	.word	0x0800591f
 8005790:	0800591f 	.word	0x0800591f
 8005794:	080058dd 	.word	0x080058dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fa20 	bl	8005be4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0208 	orr.w	r2, r2, #8
 80057b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0204 	bic.w	r2, r2, #4
 80057c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6999      	ldr	r1, [r3, #24]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	619a      	str	r2, [r3, #24]
      break;
 80057d6:	e0a5      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fa7c 	bl	8005cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6999      	ldr	r1, [r3, #24]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	619a      	str	r2, [r3, #24]
      break;
 8005818:	e084      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fad5 	bl	8005dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0208 	orr.w	r2, r2, #8
 8005834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0204 	bic.w	r2, r2, #4
 8005844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69d9      	ldr	r1, [r3, #28]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	61da      	str	r2, [r3, #28]
      break;
 8005858:	e064      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fb2d 	bl	8005ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69d9      	ldr	r1, [r3, #28]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	021a      	lsls	r2, r3, #8
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	61da      	str	r2, [r3, #28]
      break;
 800589a:	e043      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fb6a 	bl	8005f7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0208 	orr.w	r2, r2, #8
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0204 	bic.w	r2, r2, #4
 80058c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058da:	e023      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fba2 	bl	800602c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005906:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	021a      	lsls	r2, r3, #8
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800591c:	e002      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	75fb      	strb	r3, [r7, #23]
      break;
 8005922:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800592c:	7dfb      	ldrb	r3, [r7, #23]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop

08005938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIM_ConfigClockSource+0x1c>
 8005950:	2302      	movs	r3, #2
 8005952:	e0b6      	b.n	8005ac2 <HAL_TIM_ConfigClockSource+0x18a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800597e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005990:	d03e      	beq.n	8005a10 <HAL_TIM_ConfigClockSource+0xd8>
 8005992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005996:	f200 8087 	bhi.w	8005aa8 <HAL_TIM_ConfigClockSource+0x170>
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	f000 8086 	beq.w	8005aae <HAL_TIM_ConfigClockSource+0x176>
 80059a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a6:	d87f      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x170>
 80059a8:	2b70      	cmp	r3, #112	; 0x70
 80059aa:	d01a      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0xaa>
 80059ac:	2b70      	cmp	r3, #112	; 0x70
 80059ae:	d87b      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x170>
 80059b0:	2b60      	cmp	r3, #96	; 0x60
 80059b2:	d050      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x11e>
 80059b4:	2b60      	cmp	r3, #96	; 0x60
 80059b6:	d877      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x170>
 80059b8:	2b50      	cmp	r3, #80	; 0x50
 80059ba:	d03c      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0xfe>
 80059bc:	2b50      	cmp	r3, #80	; 0x50
 80059be:	d873      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x170>
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	d058      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x13e>
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d86f      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x170>
 80059c8:	2b30      	cmp	r3, #48	; 0x30
 80059ca:	d064      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15e>
 80059cc:	2b30      	cmp	r3, #48	; 0x30
 80059ce:	d86b      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x170>
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d060      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15e>
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d867      	bhi.n	8005aa8 <HAL_TIM_ConfigClockSource+0x170>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d05c      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15e>
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d05a      	beq.n	8005a96 <HAL_TIM_ConfigClockSource+0x15e>
 80059e0:	e062      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f000 fbef 	bl	80061d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	609a      	str	r2, [r3, #8]
      break;
 8005a0e:	e04f      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	6899      	ldr	r1, [r3, #8]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f000 fbd8 	bl	80061d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a32:	609a      	str	r2, [r3, #8]
      break;
 8005a34:	e03c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f000 fb4c 	bl	80060e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2150      	movs	r1, #80	; 0x50
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fba5 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005a54:	e02c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6859      	ldr	r1, [r3, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f000 fb6b 	bl	800613e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2160      	movs	r1, #96	; 0x60
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fb95 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005a74:	e01c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6859      	ldr	r1, [r3, #4]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f000 fb2c 	bl	80060e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2140      	movs	r1, #64	; 0x40
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fb85 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005a94:	e00c      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f000 fb7c 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005aa6:	e003      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005aac:	e000      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
	...

08005b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <TIM_Base_SetConfig+0xbc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0x20>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3a:	d108      	bne.n	8005b4e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <TIM_Base_SetConfig+0xbc>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <TIM_Base_SetConfig+0x52>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5c:	d007      	beq.n	8005b6e <TIM_Base_SetConfig+0x52>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1e      	ldr	r2, [pc, #120]	; (8005bdc <TIM_Base_SetConfig+0xc0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_Base_SetConfig+0x52>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1d      	ldr	r2, [pc, #116]	; (8005be0 <TIM_Base_SetConfig+0xc4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d108      	bne.n	8005b80 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a0c      	ldr	r2, [pc, #48]	; (8005bd8 <TIM_Base_SetConfig+0xbc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <TIM_Base_SetConfig+0xa0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a0b      	ldr	r2, [pc, #44]	; (8005bdc <TIM_Base_SetConfig+0xc0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_Base_SetConfig+0xa0>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a0a      	ldr	r2, [pc, #40]	; (8005be0 <TIM_Base_SetConfig+0xc4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d103      	bne.n	8005bc4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	615a      	str	r2, [r3, #20]
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400

08005be4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	f023 0201 	bic.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0303 	bic.w	r3, r3, #3
 8005c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f023 0302 	bic.w	r3, r3, #2
 8005c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a24      	ldr	r2, [pc, #144]	; (8005cd0 <TIM_OC1_SetConfig+0xec>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_OC1_SetConfig+0x70>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a23      	ldr	r2, [pc, #140]	; (8005cd4 <TIM_OC1_SetConfig+0xf0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_OC1_SetConfig+0x70>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <TIM_OC1_SetConfig+0xf4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d10c      	bne.n	8005c6e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0308 	bic.w	r3, r3, #8
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 0304 	bic.w	r3, r3, #4
 8005c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <TIM_OC1_SetConfig+0xec>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d007      	beq.n	8005c86 <TIM_OC1_SetConfig+0xa2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a16      	ldr	r2, [pc, #88]	; (8005cd4 <TIM_OC1_SetConfig+0xf0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d003      	beq.n	8005c86 <TIM_OC1_SetConfig+0xa2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <TIM_OC1_SetConfig+0xf4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d111      	bne.n	8005caa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	693a      	ldr	r2, [r7, #16]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	621a      	str	r2, [r3, #32]
}
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	40012c00 	.word	0x40012c00
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400

08005cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f023 0210 	bic.w	r2, r3, #16
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0320 	bic.w	r3, r3, #32
 8005d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a22      	ldr	r2, [pc, #136]	; (8005dc4 <TIM_OC2_SetConfig+0xe8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d10d      	bne.n	8005d5c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a19      	ldr	r2, [pc, #100]	; (8005dc4 <TIM_OC2_SetConfig+0xe8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d007      	beq.n	8005d74 <TIM_OC2_SetConfig+0x98>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <TIM_OC2_SetConfig+0xec>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_OC2_SetConfig+0x98>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a17      	ldr	r2, [pc, #92]	; (8005dcc <TIM_OC2_SetConfig+0xf0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d113      	bne.n	8005d9c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40014000 	.word	0x40014000
 8005dcc:	40014400 	.word	0x40014400

08005dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a21      	ldr	r2, [pc, #132]	; (8005eb4 <TIM_OC3_SetConfig+0xe4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d10d      	bne.n	8005e4e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <TIM_OC3_SetConfig+0xe4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <TIM_OC3_SetConfig+0x96>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <TIM_OC3_SetConfig+0xe8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <TIM_OC3_SetConfig+0x96>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a16      	ldr	r2, [pc, #88]	; (8005ebc <TIM_OC3_SetConfig+0xec>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d113      	bne.n	8005e8e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	621a      	str	r2, [r3, #32]
}
 8005ea8:	bf00      	nop
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	40012c00 	.word	0x40012c00
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400

08005ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	021b      	lsls	r3, r3, #8
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	031b      	lsls	r3, r3, #12
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a14      	ldr	r2, [pc, #80]	; (8005f70 <TIM_OC4_SetConfig+0xb0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d007      	beq.n	8005f34 <TIM_OC4_SetConfig+0x74>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a13      	ldr	r2, [pc, #76]	; (8005f74 <TIM_OC4_SetConfig+0xb4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d003      	beq.n	8005f34 <TIM_OC4_SetConfig+0x74>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a12      	ldr	r2, [pc, #72]	; (8005f78 <TIM_OC4_SetConfig+0xb8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d109      	bne.n	8005f48 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	695b      	ldr	r3, [r3, #20]
 8005f40:	019b      	lsls	r3, r3, #6
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	621a      	str	r2, [r3, #32]
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40014000 	.word	0x40014000
 8005f78:	40014400 	.word	0x40014400

08005f7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a13      	ldr	r2, [pc, #76]	; (8006020 <TIM_OC5_SetConfig+0xa4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d007      	beq.n	8005fe6 <TIM_OC5_SetConfig+0x6a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a12      	ldr	r2, [pc, #72]	; (8006024 <TIM_OC5_SetConfig+0xa8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_OC5_SetConfig+0x6a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a11      	ldr	r2, [pc, #68]	; (8006028 <TIM_OC5_SetConfig+0xac>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d109      	bne.n	8005ffa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	621a      	str	r2, [r3, #32]
}
 8006014:	bf00      	nop
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40014000 	.word	0x40014000
 8006028:	40014400 	.word	0x40014400

0800602c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800605a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	051b      	lsls	r3, r3, #20
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a14      	ldr	r2, [pc, #80]	; (80060d4 <TIM_OC6_SetConfig+0xa8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d007      	beq.n	8006098 <TIM_OC6_SetConfig+0x6c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <TIM_OC6_SetConfig+0xac>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d003      	beq.n	8006098 <TIM_OC6_SetConfig+0x6c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a12      	ldr	r2, [pc, #72]	; (80060dc <TIM_OC6_SetConfig+0xb0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d109      	bne.n	80060ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800609e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	029b      	lsls	r3, r3, #10
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40012c00 	.word	0x40012c00
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400

080060e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800610a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f023 030a 	bic.w	r3, r3, #10
 800611c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f023 0210 	bic.w	r2, r3, #16
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800617a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f043 0307 	orr.w	r3, r3, #7
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	021a      	lsls	r2, r3, #8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e04f      	b.n	80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d108      	bne.n	8006268 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800625c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4313      	orrs	r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a14      	ldr	r2, [pc, #80]	; (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006294:	d004      	beq.n	80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a10      	ldr	r2, [pc, #64]	; (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d10c      	bne.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40014000 	.word	0x40014000

080062e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e060      	b.n	80063be <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	4313      	orrs	r3, r2
 800631e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a14      	ldr	r2, [pc, #80]	; (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d115      	bne.n	80063ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	051b      	lsls	r3, r3, #20
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40012c00 	.word	0x40012c00

080063d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e040      	b.n	80064a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fb fb6c 	bl	8001b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2224      	movs	r2, #36	; 0x24
 8006438:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 f82c 	bl	80064a8 <UART_SetConfig>
 8006450:	4603      	mov	r3, r0
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e022      	b.n	80064a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa7a 	bl	800695c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689a      	ldr	r2, [r3, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fb01 	bl	8006aa0 <UART_CheckIdleState>
 800649e:	4603      	mov	r3, r0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064ac:	b08a      	sub	sp, #40	; 0x28
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	431a      	orrs	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	431a      	orrs	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b9e      	ldr	r3, [pc, #632]	; (8006750 <UART_SetConfig+0x2a8>)
 80064d8:	4013      	ands	r3, r2
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064e0:	430b      	orrs	r3, r1
 80064e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a93      	ldr	r2, [pc, #588]	; (8006754 <UART_SetConfig+0x2ac>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d004      	beq.n	8006514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006510:	4313      	orrs	r3, r2
 8006512:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006524:	430a      	orrs	r2, r1
 8006526:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a8a      	ldr	r2, [pc, #552]	; (8006758 <UART_SetConfig+0x2b0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d126      	bne.n	8006580 <UART_SetConfig+0xd8>
 8006532:	4b8a      	ldr	r3, [pc, #552]	; (800675c <UART_SetConfig+0x2b4>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b03      	cmp	r3, #3
 800653e:	d81b      	bhi.n	8006578 <UART_SetConfig+0xd0>
 8006540:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <UART_SetConfig+0xa0>)
 8006542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	08006559 	.word	0x08006559
 800654c:	08006569 	.word	0x08006569
 8006550:	08006561 	.word	0x08006561
 8006554:	08006571 	.word	0x08006571
 8006558:	2301      	movs	r3, #1
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800655e:	e0ab      	b.n	80066b8 <UART_SetConfig+0x210>
 8006560:	2302      	movs	r3, #2
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006566:	e0a7      	b.n	80066b8 <UART_SetConfig+0x210>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800656e:	e0a3      	b.n	80066b8 <UART_SetConfig+0x210>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006576:	e09f      	b.n	80066b8 <UART_SetConfig+0x210>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800657e:	e09b      	b.n	80066b8 <UART_SetConfig+0x210>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a76      	ldr	r2, [pc, #472]	; (8006760 <UART_SetConfig+0x2b8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d138      	bne.n	80065fc <UART_SetConfig+0x154>
 800658a:	4b74      	ldr	r3, [pc, #464]	; (800675c <UART_SetConfig+0x2b4>)
 800658c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006590:	f003 030c 	and.w	r3, r3, #12
 8006594:	2b0c      	cmp	r3, #12
 8006596:	d82d      	bhi.n	80065f4 <UART_SetConfig+0x14c>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <UART_SetConfig+0xf8>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065d5 	.word	0x080065d5
 80065a4:	080065f5 	.word	0x080065f5
 80065a8:	080065f5 	.word	0x080065f5
 80065ac:	080065f5 	.word	0x080065f5
 80065b0:	080065e5 	.word	0x080065e5
 80065b4:	080065f5 	.word	0x080065f5
 80065b8:	080065f5 	.word	0x080065f5
 80065bc:	080065f5 	.word	0x080065f5
 80065c0:	080065dd 	.word	0x080065dd
 80065c4:	080065f5 	.word	0x080065f5
 80065c8:	080065f5 	.word	0x080065f5
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	080065ed 	.word	0x080065ed
 80065d4:	2300      	movs	r3, #0
 80065d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065da:	e06d      	b.n	80066b8 <UART_SetConfig+0x210>
 80065dc:	2302      	movs	r3, #2
 80065de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065e2:	e069      	b.n	80066b8 <UART_SetConfig+0x210>
 80065e4:	2304      	movs	r3, #4
 80065e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ea:	e065      	b.n	80066b8 <UART_SetConfig+0x210>
 80065ec:	2308      	movs	r3, #8
 80065ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f2:	e061      	b.n	80066b8 <UART_SetConfig+0x210>
 80065f4:	2310      	movs	r3, #16
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065fa:	e05d      	b.n	80066b8 <UART_SetConfig+0x210>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a58      	ldr	r2, [pc, #352]	; (8006764 <UART_SetConfig+0x2bc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d125      	bne.n	8006652 <UART_SetConfig+0x1aa>
 8006606:	4b55      	ldr	r3, [pc, #340]	; (800675c <UART_SetConfig+0x2b4>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006610:	2b30      	cmp	r3, #48	; 0x30
 8006612:	d016      	beq.n	8006642 <UART_SetConfig+0x19a>
 8006614:	2b30      	cmp	r3, #48	; 0x30
 8006616:	d818      	bhi.n	800664a <UART_SetConfig+0x1a2>
 8006618:	2b20      	cmp	r3, #32
 800661a:	d00a      	beq.n	8006632 <UART_SetConfig+0x18a>
 800661c:	2b20      	cmp	r3, #32
 800661e:	d814      	bhi.n	800664a <UART_SetConfig+0x1a2>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <UART_SetConfig+0x182>
 8006624:	2b10      	cmp	r3, #16
 8006626:	d008      	beq.n	800663a <UART_SetConfig+0x192>
 8006628:	e00f      	b.n	800664a <UART_SetConfig+0x1a2>
 800662a:	2300      	movs	r3, #0
 800662c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006630:	e042      	b.n	80066b8 <UART_SetConfig+0x210>
 8006632:	2302      	movs	r3, #2
 8006634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006638:	e03e      	b.n	80066b8 <UART_SetConfig+0x210>
 800663a:	2304      	movs	r3, #4
 800663c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006640:	e03a      	b.n	80066b8 <UART_SetConfig+0x210>
 8006642:	2308      	movs	r3, #8
 8006644:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006648:	e036      	b.n	80066b8 <UART_SetConfig+0x210>
 800664a:	2310      	movs	r3, #16
 800664c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006650:	e032      	b.n	80066b8 <UART_SetConfig+0x210>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a3f      	ldr	r2, [pc, #252]	; (8006754 <UART_SetConfig+0x2ac>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d12a      	bne.n	80066b2 <UART_SetConfig+0x20a>
 800665c:	4b3f      	ldr	r3, [pc, #252]	; (800675c <UART_SetConfig+0x2b4>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006662:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800666a:	d01a      	beq.n	80066a2 <UART_SetConfig+0x1fa>
 800666c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006670:	d81b      	bhi.n	80066aa <UART_SetConfig+0x202>
 8006672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006676:	d00c      	beq.n	8006692 <UART_SetConfig+0x1ea>
 8006678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667c:	d815      	bhi.n	80066aa <UART_SetConfig+0x202>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <UART_SetConfig+0x1e2>
 8006682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006686:	d008      	beq.n	800669a <UART_SetConfig+0x1f2>
 8006688:	e00f      	b.n	80066aa <UART_SetConfig+0x202>
 800668a:	2300      	movs	r3, #0
 800668c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006690:	e012      	b.n	80066b8 <UART_SetConfig+0x210>
 8006692:	2302      	movs	r3, #2
 8006694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006698:	e00e      	b.n	80066b8 <UART_SetConfig+0x210>
 800669a:	2304      	movs	r3, #4
 800669c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a0:	e00a      	b.n	80066b8 <UART_SetConfig+0x210>
 80066a2:	2308      	movs	r3, #8
 80066a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a8:	e006      	b.n	80066b8 <UART_SetConfig+0x210>
 80066aa:	2310      	movs	r3, #16
 80066ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b0:	e002      	b.n	80066b8 <UART_SetConfig+0x210>
 80066b2:	2310      	movs	r3, #16
 80066b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a25      	ldr	r2, [pc, #148]	; (8006754 <UART_SetConfig+0x2ac>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	f040 808a 	bne.w	80067d8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d824      	bhi.n	8006716 <UART_SetConfig+0x26e>
 80066cc:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <UART_SetConfig+0x22c>)
 80066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d2:	bf00      	nop
 80066d4:	080066f9 	.word	0x080066f9
 80066d8:	08006717 	.word	0x08006717
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006717 	.word	0x08006717
 80066e4:	08006707 	.word	0x08006707
 80066e8:	08006717 	.word	0x08006717
 80066ec:	08006717 	.word	0x08006717
 80066f0:	08006717 	.word	0x08006717
 80066f4:	0800670f 	.word	0x0800670f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f8:	f7fe fa16 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 80066fc:	61f8      	str	r0, [r7, #28]
        break;
 80066fe:	e010      	b.n	8006722 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006700:	4b19      	ldr	r3, [pc, #100]	; (8006768 <UART_SetConfig+0x2c0>)
 8006702:	61fb      	str	r3, [r7, #28]
        break;
 8006704:	e00d      	b.n	8006722 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006706:	f7fe f979 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800670a:	61f8      	str	r0, [r7, #28]
        break;
 800670c:	e009      	b.n	8006722 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006712:	61fb      	str	r3, [r7, #28]
        break;
 8006714:	e005      	b.n	8006722 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006720:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8109 	beq.w	800693c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	4413      	add	r3, r2
 8006734:	69fa      	ldr	r2, [r7, #28]
 8006736:	429a      	cmp	r2, r3
 8006738:	d305      	bcc.n	8006746 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	429a      	cmp	r2, r3
 8006744:	d912      	bls.n	800676c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800674c:	e0f6      	b.n	800693c <UART_SetConfig+0x494>
 800674e:	bf00      	nop
 8006750:	efff69f3 	.word	0xefff69f3
 8006754:	40008000 	.word	0x40008000
 8006758:	40013800 	.word	0x40013800
 800675c:	40021000 	.word	0x40021000
 8006760:	40004400 	.word	0x40004400
 8006764:	40004800 	.word	0x40004800
 8006768:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	2200      	movs	r2, #0
 8006770:	461c      	mov	r4, r3
 8006772:	4615      	mov	r5, r2
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	f04f 0300 	mov.w	r3, #0
 800677c:	022b      	lsls	r3, r5, #8
 800677e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006782:	0222      	lsls	r2, r4, #8
 8006784:	68f9      	ldr	r1, [r7, #12]
 8006786:	6849      	ldr	r1, [r1, #4]
 8006788:	0849      	lsrs	r1, r1, #1
 800678a:	2000      	movs	r0, #0
 800678c:	4688      	mov	r8, r1
 800678e:	4681      	mov	r9, r0
 8006790:	eb12 0a08 	adds.w	sl, r2, r8
 8006794:	eb43 0b09 	adc.w	fp, r3, r9
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067a6:	4650      	mov	r0, sl
 80067a8:	4659      	mov	r1, fp
 80067aa:	f7fa fa6d 	bl	8000c88 <__aeabi_uldivmod>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4613      	mov	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067bc:	d308      	bcc.n	80067d0 <UART_SetConfig+0x328>
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c4:	d204      	bcs.n	80067d0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69ba      	ldr	r2, [r7, #24]
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	e0b5      	b.n	800693c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80067d6:	e0b1      	b.n	800693c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e0:	d15d      	bne.n	800689e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80067e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d827      	bhi.n	800683a <UART_SetConfig+0x392>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <UART_SetConfig+0x348>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006815 	.word	0x08006815
 80067f4:	0800681d 	.word	0x0800681d
 80067f8:	08006825 	.word	0x08006825
 80067fc:	0800683b 	.word	0x0800683b
 8006800:	0800682b 	.word	0x0800682b
 8006804:	0800683b 	.word	0x0800683b
 8006808:	0800683b 	.word	0x0800683b
 800680c:	0800683b 	.word	0x0800683b
 8006810:	08006833 	.word	0x08006833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006814:	f7fe f988 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8006818:	61f8      	str	r0, [r7, #28]
        break;
 800681a:	e014      	b.n	8006846 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800681c:	f7fe f99a 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8006820:	61f8      	str	r0, [r7, #28]
        break;
 8006822:	e010      	b.n	8006846 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006824:	4b4c      	ldr	r3, [pc, #304]	; (8006958 <UART_SetConfig+0x4b0>)
 8006826:	61fb      	str	r3, [r7, #28]
        break;
 8006828:	e00d      	b.n	8006846 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800682a:	f7fe f8e7 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 800682e:	61f8      	str	r0, [r7, #28]
        break;
 8006830:	e009      	b.n	8006846 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006836:	61fb      	str	r3, [r7, #28]
        break;
 8006838:	e005      	b.n	8006846 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d077      	beq.n	800693c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	005a      	lsls	r2, r3, #1
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	085b      	lsrs	r3, r3, #1
 8006856:	441a      	add	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006860:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b0f      	cmp	r3, #15
 8006866:	d916      	bls.n	8006896 <UART_SetConfig+0x3ee>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800686e:	d212      	bcs.n	8006896 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f023 030f 	bic.w	r3, r3, #15
 8006878:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	b29b      	uxth	r3, r3
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	b29a      	uxth	r2, r3
 8006886:	8afb      	ldrh	r3, [r7, #22]
 8006888:	4313      	orrs	r3, r2
 800688a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	8afa      	ldrh	r2, [r7, #22]
 8006892:	60da      	str	r2, [r3, #12]
 8006894:	e052      	b.n	800693c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800689c:	e04e      	b.n	800693c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800689e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d827      	bhi.n	80068f6 <UART_SetConfig+0x44e>
 80068a6:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <UART_SetConfig+0x404>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	080068d9 	.word	0x080068d9
 80068b4:	080068e1 	.word	0x080068e1
 80068b8:	080068f7 	.word	0x080068f7
 80068bc:	080068e7 	.word	0x080068e7
 80068c0:	080068f7 	.word	0x080068f7
 80068c4:	080068f7 	.word	0x080068f7
 80068c8:	080068f7 	.word	0x080068f7
 80068cc:	080068ef 	.word	0x080068ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068d0:	f7fe f92a 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 80068d4:	61f8      	str	r0, [r7, #28]
        break;
 80068d6:	e014      	b.n	8006902 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068d8:	f7fe f93c 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 80068dc:	61f8      	str	r0, [r7, #28]
        break;
 80068de:	e010      	b.n	8006902 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068e0:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <UART_SetConfig+0x4b0>)
 80068e2:	61fb      	str	r3, [r7, #28]
        break;
 80068e4:	e00d      	b.n	8006902 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068e6:	f7fe f889 	bl	80049fc <HAL_RCC_GetSysClockFreq>
 80068ea:	61f8      	str	r0, [r7, #28]
        break;
 80068ec:	e009      	b.n	8006902 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068f2:	61fb      	str	r3, [r7, #28]
        break;
 80068f4:	e005      	b.n	8006902 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006900:	bf00      	nop
    }

    if (pclk != 0U)
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d019      	beq.n	800693c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	085a      	lsrs	r2, r3, #1
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	441a      	add	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	fbb2 f3f3 	udiv	r3, r2, r3
 800691a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2b0f      	cmp	r3, #15
 8006920:	d909      	bls.n	8006936 <UART_SetConfig+0x48e>
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006928:	d205      	bcs.n	8006936 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	b29a      	uxth	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60da      	str	r2, [r3, #12]
 8006934:	e002      	b.n	800693c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006948:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800694c:	4618      	mov	r0, r3
 800694e:	3728      	adds	r7, #40	; 0x28
 8006950:	46bd      	mov	sp, r7
 8006952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006956:	bf00      	nop
 8006958:	00f42400 	.word	0x00f42400

0800695c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00a      	beq.n	8006a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01a      	beq.n	8006a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a5a:	d10a      	bne.n	8006a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
  }
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ab0:	f7fb fa44 	bl	8001f3c <HAL_GetTick>
 8006ab4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d10e      	bne.n	8006ae2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f82d 	bl	8006b32 <UART_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e023      	b.n	8006b2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d10e      	bne.n	8006b0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f817 	bl	8006b32 <UART_WaitOnFlagUntilTimeout>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e00d      	b.n	8006b2a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b09c      	sub	sp, #112	; 0x70
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	603b      	str	r3, [r7, #0]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b42:	e0a5      	b.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b4a:	f000 80a1 	beq.w	8006c90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4e:	f7fb f9f5 	bl	8001f3c <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d302      	bcc.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d13e      	bne.n	8006be2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b6c:	e853 3f00 	ldrex	r3, [r3]
 8006b70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b78:	667b      	str	r3, [r7, #100]	; 0x64
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b8a:	e841 2300 	strex	r3, r2, [r1]
 8006b8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1e6      	bne.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	663b      	str	r3, [r7, #96]	; 0x60
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bbe:	e841 2300 	strex	r3, r2, [r1]
 8006bc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1e5      	bne.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e067      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d04f      	beq.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bfe:	d147      	bne.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e6      	bne.n	8006c0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3308      	adds	r3, #8
 8006c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c5c:	623a      	str	r2, [r7, #32]
 8006c5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	69f9      	ldr	r1, [r7, #28]
 8006c62:	6a3a      	ldr	r2, [r7, #32]
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e5      	bne.n	8006c3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2220      	movs	r2, #32
 8006c74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2220      	movs	r2, #32
 8006c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e010      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	69da      	ldr	r2, [r3, #28]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	4013      	ands	r3, r2
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2301      	moveq	r3, #1
 8006ca2:	2300      	movne	r3, #0
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	f43f af4a 	beq.w	8006b44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3770      	adds	r7, #112	; 0x70
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <__NVIC_SetPriority>:
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	6039      	str	r1, [r7, #0]
 8006cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	db0a      	blt.n	8006ce6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	490c      	ldr	r1, [pc, #48]	; (8006d08 <__NVIC_SetPriority+0x4c>)
 8006cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cda:	0112      	lsls	r2, r2, #4
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	440b      	add	r3, r1
 8006ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ce4:	e00a      	b.n	8006cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	4908      	ldr	r1, [pc, #32]	; (8006d0c <__NVIC_SetPriority+0x50>)
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	3b04      	subs	r3, #4
 8006cf4:	0112      	lsls	r2, r2, #4
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	761a      	strb	r2, [r3, #24]
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	e000e100 	.word	0xe000e100
 8006d0c:	e000ed00 	.word	0xe000ed00

08006d10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <SysTick_Handler+0x1c>)
 8006d16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006d18:	f001 fec6 	bl	8008aa8 <xTaskGetSchedulerState>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d001      	beq.n	8006d26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006d22:	f002 fcb1 	bl	8009688 <xPortSysTickHandler>
  }
}
 8006d26:	bf00      	nop
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	e000e010 	.word	0xe000e010

08006d30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d34:	2100      	movs	r1, #0
 8006d36:	f06f 0004 	mvn.w	r0, #4
 8006d3a:	f7ff ffbf 	bl	8006cbc <__NVIC_SetPriority>
#endif
}
 8006d3e:	bf00      	nop
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d4a:	f3ef 8305 	mrs	r3, IPSR
 8006d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d56:	f06f 0305 	mvn.w	r3, #5
 8006d5a:	607b      	str	r3, [r7, #4]
 8006d5c:	e00c      	b.n	8006d78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d5e:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <osKernelInitialize+0x44>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d105      	bne.n	8006d72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d66:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <osKernelInitialize+0x44>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	e002      	b.n	8006d78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d78:	687b      	ldr	r3, [r7, #4]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	20000454 	.word	0x20000454

08006d8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d92:	f3ef 8305 	mrs	r3, IPSR
 8006d96:	603b      	str	r3, [r7, #0]
  return(result);
 8006d98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d9e:	f06f 0305 	mvn.w	r3, #5
 8006da2:	607b      	str	r3, [r7, #4]
 8006da4:	e010      	b.n	8006dc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <osKernelStart+0x48>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d109      	bne.n	8006dc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006dae:	f7ff ffbf 	bl	8006d30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006db2:	4b08      	ldr	r3, [pc, #32]	; (8006dd4 <osKernelStart+0x48>)
 8006db4:	2202      	movs	r2, #2
 8006db6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006db8:	f001 f9fc 	bl	80081b4 <vTaskStartScheduler>
      stat = osOK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	607b      	str	r3, [r7, #4]
 8006dc0:	e002      	b.n	8006dc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006dc8:	687b      	ldr	r3, [r7, #4]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000454 	.word	0x20000454

08006dd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08e      	sub	sp, #56	; 0x38
 8006ddc:	af04      	add	r7, sp, #16
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006de4:	2300      	movs	r3, #0
 8006de6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de8:	f3ef 8305 	mrs	r3, IPSR
 8006dec:	617b      	str	r3, [r7, #20]
  return(result);
 8006dee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d17e      	bne.n	8006ef2 <osThreadNew+0x11a>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d07b      	beq.n	8006ef2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006dfe:	2318      	movs	r3, #24
 8006e00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d045      	beq.n	8006e9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <osThreadNew+0x48>
        name = attr->name;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d008      	beq.n	8006e46 <osThreadNew+0x6e>
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	2b38      	cmp	r3, #56	; 0x38
 8006e38:	d805      	bhi.n	8006e46 <osThreadNew+0x6e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <osThreadNew+0x72>
        return (NULL);
 8006e46:	2300      	movs	r3, #0
 8006e48:	e054      	b.n	8006ef4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	089b      	lsrs	r3, r3, #2
 8006e58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00e      	beq.n	8006e80 <osThreadNew+0xa8>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	2bc3      	cmp	r3, #195	; 0xc3
 8006e68:	d90a      	bls.n	8006e80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d006      	beq.n	8006e80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <osThreadNew+0xa8>
        mem = 1;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	61bb      	str	r3, [r7, #24]
 8006e7e:	e010      	b.n	8006ea2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10c      	bne.n	8006ea2 <osThreadNew+0xca>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d108      	bne.n	8006ea2 <osThreadNew+0xca>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <osThreadNew+0xca>
          mem = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61bb      	str	r3, [r7, #24]
 8006e9c:	e001      	b.n	8006ea2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d110      	bne.n	8006eca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006eb0:	9202      	str	r2, [sp, #8]
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	6a3a      	ldr	r2, [r7, #32]
 8006ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 ff86 	bl	8007dd0 <xTaskCreateStatic>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	e013      	b.n	8006ef2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d110      	bne.n	8006ef2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f107 0310 	add.w	r3, r7, #16
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 ffd1 	bl	8007e8a <xTaskCreate>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d001      	beq.n	8006ef2 <osThreadNew+0x11a>
            hTask = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ef2:	693b      	ldr	r3, [r7, #16]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3728      	adds	r7, #40	; 0x28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f04:	f3ef 8305 	mrs	r3, IPSR
 8006f08:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <osDelay+0x1c>
    stat = osErrorISR;
 8006f10:	f06f 0305 	mvn.w	r3, #5
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	e007      	b.n	8006f28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 f912 	bl	800814c <vTaskDelay>
    }
  }

  return (stat);
 8006f28:	68fb      	ldr	r3, [r7, #12]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b08a      	sub	sp, #40	; 0x28
 8006f36:	af02      	add	r7, sp, #8
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f42:	f3ef 8305 	mrs	r3, IPSR
 8006f46:	613b      	str	r3, [r7, #16]
  return(result);
 8006f48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d175      	bne.n	800703a <osSemaphoreNew+0x108>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d072      	beq.n	800703a <osSemaphoreNew+0x108>
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d86e      	bhi.n	800703a <osSemaphoreNew+0x108>
    mem = -1;
 8006f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f60:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d015      	beq.n	8006f94 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d006      	beq.n	8006f7e <osSemaphoreNew+0x4c>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	2b4f      	cmp	r3, #79	; 0x4f
 8006f76:	d902      	bls.n	8006f7e <osSemaphoreNew+0x4c>
        mem = 1;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	e00c      	b.n	8006f98 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d108      	bne.n	8006f98 <osSemaphoreNew+0x66>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <osSemaphoreNew+0x66>
          mem = 0;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	e001      	b.n	8006f98 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f9e:	d04c      	beq.n	800703a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d128      	bne.n	8006ff8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d10a      	bne.n	8006fc2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	9200      	str	r2, [sp, #0]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	2001      	movs	r0, #1
 8006fba:	f000 f993 	bl	80072e4 <xQueueGenericCreateStatic>
 8006fbe:	61f8      	str	r0, [r7, #28]
 8006fc0:	e005      	b.n	8006fce <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	2001      	movs	r0, #1
 8006fc8:	f000 fa04 	bl	80073d4 <xQueueGenericCreate>
 8006fcc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d022      	beq.n	800701a <osSemaphoreNew+0xe8>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d01f      	beq.n	800701a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006fda:	2300      	movs	r3, #0
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2100      	movs	r1, #0
 8006fe0:	69f8      	ldr	r0, [r7, #28]
 8006fe2:	f000 fabf 	bl	8007564 <xQueueGenericSend>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d016      	beq.n	800701a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006fec:	69f8      	ldr	r0, [r7, #28]
 8006fee:	f000 fd33 	bl	8007a58 <vQueueDelete>
            hSemaphore = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61fb      	str	r3, [r7, #28]
 8006ff6:	e010      	b.n	800701a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d108      	bne.n	8007010 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	461a      	mov	r2, r3
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fa41 	bl	800748e <xQueueCreateCountingSemaphoreStatic>
 800700c:	61f8      	str	r0, [r7, #28]
 800700e:	e004      	b.n	800701a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 fa72 	bl	80074fc <xQueueCreateCountingSemaphore>
 8007018:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00c      	beq.n	800703a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <osSemaphoreNew+0xfc>
          name = attr->name;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e001      	b.n	8007032 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007032:	6979      	ldr	r1, [r7, #20]
 8007034:	69f8      	ldr	r0, [r7, #28]
 8007036:	f000 fe43 	bl	8007cc0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800703a:	69fb      	ldr	r3, [r7, #28]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3720      	adds	r7, #32
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4a07      	ldr	r2, [pc, #28]	; (8007070 <vApplicationGetIdleTaskMemory+0x2c>)
 8007054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4a06      	ldr	r2, [pc, #24]	; (8007074 <vApplicationGetIdleTaskMemory+0x30>)
 800705a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2280      	movs	r2, #128	; 0x80
 8007060:	601a      	str	r2, [r3, #0]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20000458 	.word	0x20000458
 8007074:	2000051c 	.word	0x2000051c

08007078 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a07      	ldr	r2, [pc, #28]	; (80070a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007088:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	4a06      	ldr	r2, [pc, #24]	; (80070a8 <vApplicationGetTimerTaskMemory+0x30>)
 800708e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007096:	601a      	str	r2, [r3, #0]
}
 8007098:	bf00      	nop
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	2000071c 	.word	0x2000071c
 80070a8:	200007e0 	.word	0x200007e0

080070ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f103 0208 	add.w	r2, r3, #8
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f103 0208 	add.w	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f103 0208 	add.w	r2, r3, #8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007106:	b480      	push	{r7}
 8007108:	b085      	sub	sp, #20
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
 800710e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]
}
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007164:	d103      	bne.n	800716e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	60fb      	str	r3, [r7, #12]
 800716c:	e00c      	b.n	8007188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	3308      	adds	r3, #8
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	e002      	b.n	800717c <vListInsert+0x2e>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	429a      	cmp	r2, r3
 8007186:	d2f6      	bcs.n	8007176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	601a      	str	r2, [r3, #0]
}
 80071b4:	bf00      	nop
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6892      	ldr	r2, [r2, #8]
 80071d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6852      	ldr	r2, [r2, #4]
 80071e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d103      	bne.n	80071f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	1e5a      	subs	r2, r3, #1
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3714      	adds	r7, #20
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722c:	f383 8811 	msr	BASEPRI, r3
 8007230:	f3bf 8f6f 	isb	sy
 8007234:	f3bf 8f4f 	dsb	sy
 8007238:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800723a:	bf00      	nop
 800723c:	e7fe      	b.n	800723c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800723e:	f002 f991 	bl	8009564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724a:	68f9      	ldr	r1, [r7, #12]
 800724c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800724e:	fb01 f303 	mul.w	r3, r1, r3
 8007252:	441a      	add	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726e:	3b01      	subs	r3, #1
 8007270:	68f9      	ldr	r1, [r7, #12]
 8007272:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	441a      	add	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	22ff      	movs	r2, #255	; 0xff
 8007282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	22ff      	movs	r2, #255	; 0xff
 800728a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d114      	bne.n	80072be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01a      	beq.n	80072d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3310      	adds	r3, #16
 80072a0:	4618      	mov	r0, r3
 80072a2:	f001 fa3f 	bl	8008724 <xTaskRemoveFromEventList>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d012      	beq.n	80072d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072ac:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <xQueueGenericReset+0xcc>)
 80072ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	e009      	b.n	80072d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3310      	adds	r3, #16
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff fef2 	bl	80070ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3324      	adds	r3, #36	; 0x24
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff feed 	bl	80070ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80072d2:	f002 f977 	bl	80095c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80072d6:	2301      	movs	r3, #1
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08e      	sub	sp, #56	; 0x38
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800730a:	bf00      	nop
 800730c:	e7fe      	b.n	800730c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10a      	bne.n	800732a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <xQueueGenericCreateStatic+0x52>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d001      	beq.n	800733a <xQueueGenericCreateStatic+0x56>
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <xQueueGenericCreateStatic+0x58>
 800733a:	2300      	movs	r3, #0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	623b      	str	r3, [r7, #32]
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d102      	bne.n	8007362 <xQueueGenericCreateStatic+0x7e>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <xQueueGenericCreateStatic+0x82>
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <xQueueGenericCreateStatic+0x84>
 8007366:	2300      	movs	r3, #0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10a      	bne.n	8007382 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	61fb      	str	r3, [r7, #28]
}
 800737e:	bf00      	nop
 8007380:	e7fe      	b.n	8007380 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007382:	2350      	movs	r3, #80	; 0x50
 8007384:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b50      	cmp	r3, #80	; 0x50
 800738a:	d00a      	beq.n	80073a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	61bb      	str	r3, [r7, #24]
}
 800739e:	bf00      	nop
 80073a0:	e7fe      	b.n	80073a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00d      	beq.n	80073ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	4613      	mov	r3, r2
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	68b9      	ldr	r1, [r7, #8]
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 f83f 	bl	8007448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3730      	adds	r7, #48	; 0x30
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08a      	sub	sp, #40	; 0x28
 80073d8:	af02      	add	r7, sp, #8
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	4613      	mov	r3, r2
 80073e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	613b      	str	r3, [r7, #16]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	3350      	adds	r3, #80	; 0x50
 800740c:	4618      	mov	r0, r3
 800740e:	f002 f9cb 	bl	80097a8 <pvPortMalloc>
 8007412:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d011      	beq.n	800743e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	3350      	adds	r3, #80	; 0x50
 8007422:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800742c:	79fa      	ldrb	r2, [r7, #7]
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	4613      	mov	r3, r2
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	68b9      	ldr	r1, [r7, #8]
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 f805 	bl	8007448 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800743e:	69bb      	ldr	r3, [r7, #24]
	}
 8007440:	4618      	mov	r0, r3
 8007442:	3720      	adds	r7, #32
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e002      	b.n	800746a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007476:	2101      	movs	r1, #1
 8007478:	69b8      	ldr	r0, [r7, #24]
 800747a:	f7ff fecb 	bl	8007214 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007486:	bf00      	nop
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800748e:	b580      	push	{r7, lr}
 8007490:	b08a      	sub	sp, #40	; 0x28
 8007492:	af02      	add	r7, sp, #8
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	61bb      	str	r3, [r7, #24]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d90a      	bls.n	80074d4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	617b      	str	r3, [r7, #20]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80074d4:	2302      	movs	r3, #2
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	2100      	movs	r1, #0
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff ff00 	bl	80072e4 <xQueueGenericCreateStatic>
 80074e4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d002      	beq.n	80074f2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80074f2:	69fb      	ldr	r3, [r7, #28]
	}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3720      	adds	r7, #32
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10a      	bne.n	8007522 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	613b      	str	r3, [r7, #16]
}
 800751e:	bf00      	nop
 8007520:	e7fe      	b.n	8007520 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	429a      	cmp	r2, r3
 8007528:	d90a      	bls.n	8007540 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	60fb      	str	r3, [r7, #12]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007540:	2202      	movs	r2, #2
 8007542:	2100      	movs	r1, #0
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff ff45 	bl	80073d4 <xQueueGenericCreate>
 800754a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007558:	697b      	ldr	r3, [r7, #20]
	}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
	...

08007564 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08e      	sub	sp, #56	; 0x38
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007572:	2300      	movs	r3, #0
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10a      	bne.n	8007596 <xQueueGenericSend+0x32>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007592:	bf00      	nop
 8007594:	e7fe      	b.n	8007594 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d103      	bne.n	80075a4 <xQueueGenericSend+0x40>
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <xQueueGenericSend+0x44>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <xQueueGenericSend+0x46>
 80075a8:	2300      	movs	r3, #0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <xQueueGenericSend+0x60>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d103      	bne.n	80075d2 <xQueueGenericSend+0x6e>
 80075ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <xQueueGenericSend+0x72>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e000      	b.n	80075d8 <xQueueGenericSend+0x74>
 80075d6:	2300      	movs	r3, #0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	623b      	str	r3, [r7, #32]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075f2:	f001 fa59 	bl	8008aa8 <xTaskGetSchedulerState>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <xQueueGenericSend+0x9e>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <xQueueGenericSend+0xa2>
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <xQueueGenericSend+0xa4>
 8007606:	2300      	movs	r3, #0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10a      	bne.n	8007622 <xQueueGenericSend+0xbe>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	61fb      	str	r3, [r7, #28]
}
 800761e:	bf00      	nop
 8007620:	e7fe      	b.n	8007620 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007622:	f001 ff9f 	bl	8009564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762e:	429a      	cmp	r2, r3
 8007630:	d302      	bcc.n	8007638 <xQueueGenericSend+0xd4>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	2b02      	cmp	r3, #2
 8007636:	d129      	bne.n	800768c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800763e:	f000 fa2e 	bl	8007a9e <prvCopyDataToQueue>
 8007642:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	2b00      	cmp	r3, #0
 800764a:	d010      	beq.n	800766e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	3324      	adds	r3, #36	; 0x24
 8007650:	4618      	mov	r0, r3
 8007652:	f001 f867 	bl	8008724 <xTaskRemoveFromEventList>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d013      	beq.n	8007684 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800765c:	4b3f      	ldr	r3, [pc, #252]	; (800775c <xQueueGenericSend+0x1f8>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	e00a      	b.n	8007684 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d007      	beq.n	8007684 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007674:	4b39      	ldr	r3, [pc, #228]	; (800775c <xQueueGenericSend+0x1f8>)
 8007676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007684:	f001 ff9e 	bl	80095c4 <vPortExitCritical>
				return pdPASS;
 8007688:	2301      	movs	r3, #1
 800768a:	e063      	b.n	8007754 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d103      	bne.n	800769a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007692:	f001 ff97 	bl	80095c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007696:	2300      	movs	r3, #0
 8007698:	e05c      	b.n	8007754 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	2b00      	cmp	r3, #0
 800769e:	d106      	bne.n	80076ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076a0:	f107 0314 	add.w	r3, r7, #20
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 f8a1 	bl	80087ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076aa:	2301      	movs	r3, #1
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076ae:	f001 ff89 	bl	80095c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076b2:	f000 fdf1 	bl	8008298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076b6:	f001 ff55 	bl	8009564 <vPortEnterCritical>
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076c0:	b25b      	sxtb	r3, r3
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076c6:	d103      	bne.n	80076d0 <xQueueGenericSend+0x16c>
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076d6:	b25b      	sxtb	r3, r3
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076dc:	d103      	bne.n	80076e6 <xQueueGenericSend+0x182>
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076e6:	f001 ff6d 	bl	80095c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076ea:	1d3a      	adds	r2, r7, #4
 80076ec:	f107 0314 	add.w	r3, r7, #20
 80076f0:	4611      	mov	r1, r2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f001 f890 	bl	8008818 <xTaskCheckForTimeOut>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d124      	bne.n	8007748 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007700:	f000 fac5 	bl	8007c8e <prvIsQueueFull>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d018      	beq.n	800773c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	3310      	adds	r3, #16
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	4611      	mov	r1, r2
 8007712:	4618      	mov	r0, r3
 8007714:	f000 ffb6 	bl	8008684 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800771a:	f000 fa50 	bl	8007bbe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800771e:	f000 fdc9 	bl	80082b4 <xTaskResumeAll>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	f47f af7c 	bne.w	8007622 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800772a:	4b0c      	ldr	r3, [pc, #48]	; (800775c <xQueueGenericSend+0x1f8>)
 800772c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	e772      	b.n	8007622 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800773c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800773e:	f000 fa3e 	bl	8007bbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007742:	f000 fdb7 	bl	80082b4 <xTaskResumeAll>
 8007746:	e76c      	b.n	8007622 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007748:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800774a:	f000 fa38 	bl	8007bbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800774e:	f000 fdb1 	bl	80082b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007752:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007754:	4618      	mov	r0, r3
 8007756:	3738      	adds	r7, #56	; 0x38
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	e000ed04 	.word	0xe000ed04

08007760 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b090      	sub	sp, #64	; 0x40
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
 800776c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d103      	bne.n	800779c <xQueueGenericSendFromISR+0x3c>
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <xQueueGenericSendFromISR+0x40>
 800779c:	2301      	movs	r3, #1
 800779e:	e000      	b.n	80077a2 <xQueueGenericSendFromISR+0x42>
 80077a0:	2300      	movs	r3, #0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10a      	bne.n	80077bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077b8:	bf00      	nop
 80077ba:	e7fe      	b.n	80077ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d103      	bne.n	80077ca <xQueueGenericSendFromISR+0x6a>
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d101      	bne.n	80077ce <xQueueGenericSendFromISR+0x6e>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <xQueueGenericSendFromISR+0x70>
 80077ce:	2300      	movs	r3, #0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	623b      	str	r3, [r7, #32]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077ea:	f001 ff9d 	bl	8009728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077ee:	f3ef 8211 	mrs	r2, BASEPRI
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	61fa      	str	r2, [r7, #28]
 8007804:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007806:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800780a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <xQueueGenericSendFromISR+0xbc>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d12f      	bne.n	800787c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800781c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	68b9      	ldr	r1, [r7, #8]
 8007830:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007832:	f000 f934 	bl	8007a9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007836:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800783a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800783e:	d112      	bne.n	8007866 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d016      	beq.n	8007876 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784a:	3324      	adds	r3, #36	; 0x24
 800784c:	4618      	mov	r0, r3
 800784e:	f000 ff69 	bl	8008724 <xTaskRemoveFromEventList>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00e      	beq.n	8007876 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e007      	b.n	8007876 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007866:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800786a:	3301      	adds	r3, #1
 800786c:	b2db      	uxtb	r3, r3
 800786e:	b25a      	sxtb	r2, r3
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007876:	2301      	movs	r3, #1
 8007878:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800787a:	e001      	b.n	8007880 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800787c:	2300      	movs	r3, #0
 800787e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007882:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800788a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800788c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800788e:	4618      	mov	r0, r3
 8007890:	3740      	adds	r7, #64	; 0x40
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08c      	sub	sp, #48	; 0x30
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80078a4:	2300      	movs	r3, #0
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d10a      	bne.n	80078c8 <xQueueReceive+0x30>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	623b      	str	r3, [r7, #32]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <xQueueReceive+0x3e>
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <xQueueReceive+0x42>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <xQueueReceive+0x44>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10a      	bne.n	80078f6 <xQueueReceive+0x5e>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	61fb      	str	r3, [r7, #28]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078f6:	f001 f8d7 	bl	8008aa8 <xTaskGetSchedulerState>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <xQueueReceive+0x6e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <xQueueReceive+0x72>
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <xQueueReceive+0x74>
 800790a:	2300      	movs	r3, #0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <xQueueReceive+0x8e>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	61bb      	str	r3, [r7, #24]
}
 8007922:	bf00      	nop
 8007924:	e7fe      	b.n	8007924 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007926:	f001 fe1d 	bl	8009564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	2b00      	cmp	r3, #0
 8007934:	d01f      	beq.n	8007976 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007936:	68b9      	ldr	r1, [r7, #8]
 8007938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793a:	f000 f91a 	bl	8007b72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	1e5a      	subs	r2, r3, #1
 8007942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007944:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00f      	beq.n	800796e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	3310      	adds	r3, #16
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fee6 	bl	8008724 <xTaskRemoveFromEventList>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d007      	beq.n	800796e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800795e:	4b3d      	ldr	r3, [pc, #244]	; (8007a54 <xQueueReceive+0x1bc>)
 8007960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800796e:	f001 fe29 	bl	80095c4 <vPortExitCritical>
				return pdPASS;
 8007972:	2301      	movs	r3, #1
 8007974:	e069      	b.n	8007a4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800797c:	f001 fe22 	bl	80095c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007980:	2300      	movs	r3, #0
 8007982:	e062      	b.n	8007a4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d106      	bne.n	8007998 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800798a:	f107 0310 	add.w	r3, r7, #16
 800798e:	4618      	mov	r0, r3
 8007990:	f000 ff2c 	bl	80087ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007994:	2301      	movs	r3, #1
 8007996:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007998:	f001 fe14 	bl	80095c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800799c:	f000 fc7c 	bl	8008298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079a0:	f001 fde0 	bl	8009564 <vPortEnterCritical>
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079aa:	b25b      	sxtb	r3, r3
 80079ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079b0:	d103      	bne.n	80079ba <xQueueReceive+0x122>
 80079b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079c0:	b25b      	sxtb	r3, r3
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079c6:	d103      	bne.n	80079d0 <xQueueReceive+0x138>
 80079c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079d0:	f001 fdf8 	bl	80095c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079d4:	1d3a      	adds	r2, r7, #4
 80079d6:	f107 0310 	add.w	r3, r7, #16
 80079da:	4611      	mov	r1, r2
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 ff1b 	bl	8008818 <xTaskCheckForTimeOut>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d123      	bne.n	8007a30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079ea:	f000 f93a 	bl	8007c62 <prvIsQueueEmpty>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d017      	beq.n	8007a24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	3324      	adds	r3, #36	; 0x24
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 fe41 	bl	8008684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a04:	f000 f8db 	bl	8007bbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a08:	f000 fc54 	bl	80082b4 <xTaskResumeAll>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d189      	bne.n	8007926 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007a12:	4b10      	ldr	r3, [pc, #64]	; (8007a54 <xQueueReceive+0x1bc>)
 8007a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	e780      	b.n	8007926 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a26:	f000 f8ca 	bl	8007bbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a2a:	f000 fc43 	bl	80082b4 <xTaskResumeAll>
 8007a2e:	e77a      	b.n	8007926 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a32:	f000 f8c4 	bl	8007bbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a36:	f000 fc3d 	bl	80082b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a3c:	f000 f911 	bl	8007c62 <prvIsQueueEmpty>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f43f af6f 	beq.w	8007926 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3730      	adds	r7, #48	; 0x30
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	e000ed04 	.word	0xe000ed04

08007a58 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10a      	bne.n	8007a80 <vQueueDelete+0x28>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	60bb      	str	r3, [r7, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	e7fe      	b.n	8007a7e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 f947 	bl	8007d14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f001 ff55 	bl	8009940 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b086      	sub	sp, #24
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10d      	bne.n	8007ad8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d14d      	bne.n	8007b60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 f80b 	bl	8008ae4 <xTaskPriorityDisinherit>
 8007ace:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	609a      	str	r2, [r3, #8]
 8007ad6:	e043      	b.n	8007b60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d119      	bne.n	8007b12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6858      	ldr	r0, [r3, #4]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	f002 f96a 	bl	8009dc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	441a      	add	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d32b      	bcc.n	8007b60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	605a      	str	r2, [r3, #4]
 8007b10:	e026      	b.n	8007b60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	68d8      	ldr	r0, [r3, #12]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	68b9      	ldr	r1, [r7, #8]
 8007b1e:	f002 f950 	bl	8009dc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	425b      	negs	r3, r3
 8007b2c:	441a      	add	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68da      	ldr	r2, [r3, #12]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d207      	bcs.n	8007b4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	425b      	negs	r3, r3
 8007b48:	441a      	add	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d105      	bne.n	8007b60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	1c5a      	adds	r2, r3, #1
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b68:	697b      	ldr	r3, [r7, #20]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d018      	beq.n	8007bb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	441a      	add	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d303      	bcc.n	8007ba6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68d9      	ldr	r1, [r3, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	461a      	mov	r2, r3
 8007bb0:	6838      	ldr	r0, [r7, #0]
 8007bb2:	f002 f906 	bl	8009dc2 <memcpy>
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007bc6:	f001 fccd 	bl	8009564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bd0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bd2:	e011      	b.n	8007bf8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d012      	beq.n	8007c02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3324      	adds	r3, #36	; 0x24
 8007be0:	4618      	mov	r0, r3
 8007be2:	f000 fd9f 	bl	8008724 <xTaskRemoveFromEventList>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bec:	f000 fe76 	bl	80088dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dce9      	bgt.n	8007bd4 <prvUnlockQueue+0x16>
 8007c00:	e000      	b.n	8007c04 <prvUnlockQueue+0x46>
					break;
 8007c02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	22ff      	movs	r2, #255	; 0xff
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c0c:	f001 fcda 	bl	80095c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c10:	f001 fca8 	bl	8009564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c1c:	e011      	b.n	8007c42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d012      	beq.n	8007c4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3310      	adds	r3, #16
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fd7a 	bl	8008724 <xTaskRemoveFromEventList>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c36:	f000 fe51 	bl	80088dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dce9      	bgt.n	8007c1e <prvUnlockQueue+0x60>
 8007c4a:	e000      	b.n	8007c4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	22ff      	movs	r2, #255	; 0xff
 8007c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c56:	f001 fcb5 	bl	80095c4 <vPortExitCritical>
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c6a:	f001 fc7b 	bl	8009564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d102      	bne.n	8007c7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c76:	2301      	movs	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]
 8007c7a:	e001      	b.n	8007c80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c80:	f001 fca0 	bl	80095c4 <vPortExitCritical>

	return xReturn;
 8007c84:	68fb      	ldr	r3, [r7, #12]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c96:	f001 fc65 	bl	8009564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d102      	bne.n	8007cac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	e001      	b.n	8007cb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cb0:	f001 fc88 	bl	80095c4 <vPortExitCritical>

	return xReturn;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	e014      	b.n	8007cfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007cd0:	4a0f      	ldr	r2, [pc, #60]	; (8007d10 <vQueueAddToRegistry+0x50>)
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10b      	bne.n	8007cf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007cdc:	490c      	ldr	r1, [pc, #48]	; (8007d10 <vQueueAddToRegistry+0x50>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ce6:	4a0a      	ldr	r2, [pc, #40]	; (8007d10 <vQueueAddToRegistry+0x50>)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	4413      	add	r3, r2
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007cf2:	e006      	b.n	8007d02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b07      	cmp	r3, #7
 8007cfe:	d9e7      	bls.n	8007cd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	20000be0 	.word	0x20000be0

08007d14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	e016      	b.n	8007d50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d22:	4a10      	ldr	r2, [pc, #64]	; (8007d64 <vQueueUnregisterQueue+0x50>)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	00db      	lsls	r3, r3, #3
 8007d28:	4413      	add	r3, r2
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d10b      	bne.n	8007d4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d32:	4a0c      	ldr	r2, [pc, #48]	; (8007d64 <vQueueUnregisterQueue+0x50>)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2100      	movs	r1, #0
 8007d38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d3c:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <vQueueUnregisterQueue+0x50>)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	00db      	lsls	r3, r3, #3
 8007d42:	4413      	add	r3, r2
 8007d44:	2200      	movs	r2, #0
 8007d46:	605a      	str	r2, [r3, #4]
				break;
 8007d48:	e006      	b.n	8007d58 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2b07      	cmp	r3, #7
 8007d54:	d9e5      	bls.n	8007d22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007d56:	bf00      	nop
 8007d58:	bf00      	nop
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	20000be0 	.word	0x20000be0

08007d68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d78:	f001 fbf4 	bl	8009564 <vPortEnterCritical>
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d82:	b25b      	sxtb	r3, r3
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d88:	d103      	bne.n	8007d92 <vQueueWaitForMessageRestricted+0x2a>
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d98:	b25b      	sxtb	r3, r3
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d9e:	d103      	bne.n	8007da8 <vQueueWaitForMessageRestricted+0x40>
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007da8:	f001 fc0c 	bl	80095c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	3324      	adds	r3, #36	; 0x24
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 fc85 	bl	80086cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007dc2:	6978      	ldr	r0, [r7, #20]
 8007dc4:	f7ff fefb 	bl	8007bbe <prvUnlockQueue>
	}
 8007dc8:	bf00      	nop
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08e      	sub	sp, #56	; 0x38
 8007dd4:	af04      	add	r7, sp, #16
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	623b      	str	r3, [r7, #32]
}
 8007df6:	bf00      	nop
 8007df8:	e7fe      	b.n	8007df8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xTaskCreateStatic+0x46>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	61fb      	str	r3, [r7, #28]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e16:	23c4      	movs	r3, #196	; 0xc4
 8007e18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2bc4      	cmp	r3, #196	; 0xc4
 8007e1e:	d00a      	beq.n	8007e36 <xTaskCreateStatic+0x66>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	61bb      	str	r3, [r7, #24]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d01e      	beq.n	8007e7c <xTaskCreateStatic+0xac>
 8007e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01b      	beq.n	8007e7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	2202      	movs	r2, #2
 8007e52:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e56:	2300      	movs	r3, #0
 8007e58:	9303      	str	r3, [sp, #12]
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	9302      	str	r3, [sp, #8]
 8007e5e:	f107 0314 	add.w	r3, r7, #20
 8007e62:	9301      	str	r3, [sp, #4]
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f850 	bl	8007f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e76:	f000 f8f9 	bl	800806c <prvAddNewTaskToReadyList>
 8007e7a:	e001      	b.n	8007e80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e80:	697b      	ldr	r3, [r7, #20]
	}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3728      	adds	r7, #40	; 0x28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b08c      	sub	sp, #48	; 0x30
 8007e8e:	af04      	add	r7, sp, #16
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	603b      	str	r3, [r7, #0]
 8007e96:	4613      	mov	r3, r2
 8007e98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e9a:	88fb      	ldrh	r3, [r7, #6]
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f001 fc82 	bl	80097a8 <pvPortMalloc>
 8007ea4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00e      	beq.n	8007eca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007eac:	20c4      	movs	r0, #196	; 0xc4
 8007eae:	f001 fc7b 	bl	80097a8 <pvPortMalloc>
 8007eb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	631a      	str	r2, [r3, #48]	; 0x30
 8007ec0:	e005      	b.n	8007ece <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ec2:	6978      	ldr	r0, [r7, #20]
 8007ec4:	f001 fd3c 	bl	8009940 <vPortFree>
 8007ec8:	e001      	b.n	8007ece <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d017      	beq.n	8007f04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007edc:	88fa      	ldrh	r2, [r7, #6]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	9303      	str	r3, [sp, #12]
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	9302      	str	r3, [sp, #8]
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	9301      	str	r3, [sp, #4]
 8007eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68b9      	ldr	r1, [r7, #8]
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 f80e 	bl	8007f14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ef8:	69f8      	ldr	r0, [r7, #28]
 8007efa:	f000 f8b7 	bl	800806c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007efe:	2301      	movs	r3, #1
 8007f00:	61bb      	str	r3, [r7, #24]
 8007f02:	e002      	b.n	8007f0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	21a5      	movs	r1, #165	; 0xa5
 8007f2e:	f001 ff56 	bl	8009dde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f023 0307 	bic.w	r3, r3, #7
 8007f4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	f003 0307 	and.w	r3, r3, #7
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	617b      	str	r3, [r7, #20]
}
 8007f68:	bf00      	nop
 8007f6a:	e7fe      	b.n	8007f6a <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d01f      	beq.n	8007fb8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f78:	2300      	movs	r3, #0
 8007f7a:	61fb      	str	r3, [r7, #28]
 8007f7c:	e012      	b.n	8007fa4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	4413      	add	r3, r2
 8007f84:	7819      	ldrb	r1, [r3, #0]
 8007f86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	3334      	adds	r3, #52	; 0x34
 8007f8e:	460a      	mov	r2, r1
 8007f90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	4413      	add	r3, r2
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d006      	beq.n	8007fac <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	2b0f      	cmp	r3, #15
 8007fa8:	d9e9      	bls.n	8007f7e <prvInitialiseNewTask+0x6a>
 8007faa:	e000      	b.n	8007fae <prvInitialiseNewTask+0x9a>
			{
				break;
 8007fac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fb6:	e003      	b.n	8007fc0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	2b37      	cmp	r3, #55	; 0x37
 8007fc4:	d901      	bls.n	8007fca <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fc6:	2337      	movs	r3, #55	; 0x37
 8007fc8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fd4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	2200      	movs	r2, #0
 8007fda:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	3304      	adds	r3, #4
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff f883 	bl	80070ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	3318      	adds	r3, #24
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff f87e 	bl	80070ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008004:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	2200      	movs	r2, #0
 800800a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	2200      	movs	r2, #0
 8008010:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	2200      	movs	r2, #0
 8008018:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	335c      	adds	r3, #92	; 0x5c
 8008020:	2260      	movs	r2, #96	; 0x60
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f001 feda 	bl	8009dde <memset>
 800802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802c:	4a0c      	ldr	r2, [pc, #48]	; (8008060 <prvInitialiseNewTask+0x14c>)
 800802e:	661a      	str	r2, [r3, #96]	; 0x60
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	4a0c      	ldr	r2, [pc, #48]	; (8008064 <prvInitialiseNewTask+0x150>)
 8008034:	665a      	str	r2, [r3, #100]	; 0x64
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	4a0b      	ldr	r2, [pc, #44]	; (8008068 <prvInitialiseNewTask+0x154>)
 800803a:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	68f9      	ldr	r1, [r7, #12]
 8008040:	69b8      	ldr	r0, [r7, #24]
 8008042:	f001 f95f 	bl	8009304 <pxPortInitialiseStack>
 8008046:	4602      	mov	r2, r0
 8008048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800804c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008056:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008058:	bf00      	nop
 800805a:	3720      	adds	r7, #32
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	0800e83c 	.word	0x0800e83c
 8008064:	0800e85c 	.word	0x0800e85c
 8008068:	0800e81c 	.word	0x0800e81c

0800806c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008074:	f001 fa76 	bl	8009564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008078:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <prvAddNewTaskToReadyList+0xc4>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3301      	adds	r3, #1
 800807e:	4a2c      	ldr	r2, [pc, #176]	; (8008130 <prvAddNewTaskToReadyList+0xc4>)
 8008080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008082:	4b2c      	ldr	r3, [pc, #176]	; (8008134 <prvAddNewTaskToReadyList+0xc8>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800808a:	4a2a      	ldr	r2, [pc, #168]	; (8008134 <prvAddNewTaskToReadyList+0xc8>)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008090:	4b27      	ldr	r3, [pc, #156]	; (8008130 <prvAddNewTaskToReadyList+0xc4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d110      	bne.n	80080ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008098:	f000 fc44 	bl	8008924 <prvInitialiseTaskLists>
 800809c:	e00d      	b.n	80080ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800809e:	4b26      	ldr	r3, [pc, #152]	; (8008138 <prvAddNewTaskToReadyList+0xcc>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080a6:	4b23      	ldr	r3, [pc, #140]	; (8008134 <prvAddNewTaskToReadyList+0xc8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d802      	bhi.n	80080ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080b4:	4a1f      	ldr	r2, [pc, #124]	; (8008134 <prvAddNewTaskToReadyList+0xc8>)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080ba:	4b20      	ldr	r3, [pc, #128]	; (800813c <prvAddNewTaskToReadyList+0xd0>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3301      	adds	r3, #1
 80080c0:	4a1e      	ldr	r2, [pc, #120]	; (800813c <prvAddNewTaskToReadyList+0xd0>)
 80080c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080c4:	4b1d      	ldr	r3, [pc, #116]	; (800813c <prvAddNewTaskToReadyList+0xd0>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d0:	4b1b      	ldr	r3, [pc, #108]	; (8008140 <prvAddNewTaskToReadyList+0xd4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d903      	bls.n	80080e0 <prvAddNewTaskToReadyList+0x74>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	4a18      	ldr	r2, [pc, #96]	; (8008140 <prvAddNewTaskToReadyList+0xd4>)
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e4:	4613      	mov	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4a15      	ldr	r2, [pc, #84]	; (8008144 <prvAddNewTaskToReadyList+0xd8>)
 80080ee:	441a      	add	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3304      	adds	r3, #4
 80080f4:	4619      	mov	r1, r3
 80080f6:	4610      	mov	r0, r2
 80080f8:	f7ff f805 	bl	8007106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080fc:	f001 fa62 	bl	80095c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008100:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <prvAddNewTaskToReadyList+0xcc>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00e      	beq.n	8008126 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <prvAddNewTaskToReadyList+0xc8>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008112:	429a      	cmp	r2, r3
 8008114:	d207      	bcs.n	8008126 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008116:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <prvAddNewTaskToReadyList+0xdc>)
 8008118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800811c:	601a      	str	r2, [r3, #0]
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	200010f4 	.word	0x200010f4
 8008134:	20000c20 	.word	0x20000c20
 8008138:	20001100 	.word	0x20001100
 800813c:	20001110 	.word	0x20001110
 8008140:	200010fc 	.word	0x200010fc
 8008144:	20000c24 	.word	0x20000c24
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d017      	beq.n	800818e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800815e:	4b13      	ldr	r3, [pc, #76]	; (80081ac <vTaskDelay+0x60>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <vTaskDelay+0x30>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	60bb      	str	r3, [r7, #8]
}
 8008178:	bf00      	nop
 800817a:	e7fe      	b.n	800817a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800817c:	f000 f88c 	bl	8008298 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008180:	2100      	movs	r1, #0
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fd1c 	bl	8008bc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008188:	f000 f894 	bl	80082b4 <xTaskResumeAll>
 800818c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d107      	bne.n	80081a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008194:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <vTaskDelay+0x64>)
 8008196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	2000111c 	.word	0x2000111c
 80081b0:	e000ed04 	.word	0xe000ed04

080081b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08a      	sub	sp, #40	; 0x28
 80081b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081c2:	463a      	mov	r2, r7
 80081c4:	1d39      	adds	r1, r7, #4
 80081c6:	f107 0308 	add.w	r3, r7, #8
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe ff3a 	bl	8007044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	9202      	str	r2, [sp, #8]
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	2300      	movs	r3, #0
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	2300      	movs	r3, #0
 80081e0:	460a      	mov	r2, r1
 80081e2:	4925      	ldr	r1, [pc, #148]	; (8008278 <vTaskStartScheduler+0xc4>)
 80081e4:	4825      	ldr	r0, [pc, #148]	; (800827c <vTaskStartScheduler+0xc8>)
 80081e6:	f7ff fdf3 	bl	8007dd0 <xTaskCreateStatic>
 80081ea:	4603      	mov	r3, r0
 80081ec:	4a24      	ldr	r2, [pc, #144]	; (8008280 <vTaskStartScheduler+0xcc>)
 80081ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081f0:	4b23      	ldr	r3, [pc, #140]	; (8008280 <vTaskStartScheduler+0xcc>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d002      	beq.n	80081fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e001      	b.n	8008202 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d102      	bne.n	800820e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008208:	f000 fd2e 	bl	8008c68 <xTimerCreateTimerTask>
 800820c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d11d      	bne.n	8008250 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	613b      	str	r3, [r7, #16]
}
 8008226:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008228:	4b16      	ldr	r3, [pc, #88]	; (8008284 <vTaskStartScheduler+0xd0>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	335c      	adds	r3, #92	; 0x5c
 800822e:	4a16      	ldr	r2, [pc, #88]	; (8008288 <vTaskStartScheduler+0xd4>)
 8008230:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008232:	4b16      	ldr	r3, [pc, #88]	; (800828c <vTaskStartScheduler+0xd8>)
 8008234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008238:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800823a:	4b15      	ldr	r3, [pc, #84]	; (8008290 <vTaskStartScheduler+0xdc>)
 800823c:	2201      	movs	r2, #1
 800823e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008240:	4b14      	ldr	r3, [pc, #80]	; (8008294 <vTaskStartScheduler+0xe0>)
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008246:	f7f8 fed7 	bl	8000ff8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800824a:	f001 f8e9 	bl	8009420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800824e:	e00e      	b.n	800826e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008256:	d10a      	bne.n	800826e <vTaskStartScheduler+0xba>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	60fb      	str	r3, [r7, #12]
}
 800826a:	bf00      	nop
 800826c:	e7fe      	b.n	800826c <vTaskStartScheduler+0xb8>
}
 800826e:	bf00      	nop
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	0800e738 	.word	0x0800e738
 800827c:	080088f5 	.word	0x080088f5
 8008280:	20001118 	.word	0x20001118
 8008284:	20000c20 	.word	0x20000c20
 8008288:	20000010 	.word	0x20000010
 800828c:	20001114 	.word	0x20001114
 8008290:	20001100 	.word	0x20001100
 8008294:	200010f8 	.word	0x200010f8

08008298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008298:	b480      	push	{r7}
 800829a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800829c:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <vTaskSuspendAll+0x18>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3301      	adds	r3, #1
 80082a2:	4a03      	ldr	r2, [pc, #12]	; (80082b0 <vTaskSuspendAll+0x18>)
 80082a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80082a6:	bf00      	nop
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	2000111c 	.word	0x2000111c

080082b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082be:	2300      	movs	r3, #0
 80082c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082c2:	4b42      	ldr	r3, [pc, #264]	; (80083cc <xTaskResumeAll+0x118>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10a      	bne.n	80082e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	603b      	str	r3, [r7, #0]
}
 80082dc:	bf00      	nop
 80082de:	e7fe      	b.n	80082de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082e0:	f001 f940 	bl	8009564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082e4:	4b39      	ldr	r3, [pc, #228]	; (80083cc <xTaskResumeAll+0x118>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	4a38      	ldr	r2, [pc, #224]	; (80083cc <xTaskResumeAll+0x118>)
 80082ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ee:	4b37      	ldr	r3, [pc, #220]	; (80083cc <xTaskResumeAll+0x118>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d162      	bne.n	80083bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082f6:	4b36      	ldr	r3, [pc, #216]	; (80083d0 <xTaskResumeAll+0x11c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d05e      	beq.n	80083bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082fe:	e02f      	b.n	8008360 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008300:	4b34      	ldr	r3, [pc, #208]	; (80083d4 <xTaskResumeAll+0x120>)
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3318      	adds	r3, #24
 800830c:	4618      	mov	r0, r3
 800830e:	f7fe ff57 	bl	80071c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3304      	adds	r3, #4
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe ff52 	bl	80071c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008320:	4b2d      	ldr	r3, [pc, #180]	; (80083d8 <xTaskResumeAll+0x124>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d903      	bls.n	8008330 <xTaskResumeAll+0x7c>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	4a2a      	ldr	r2, [pc, #168]	; (80083d8 <xTaskResumeAll+0x124>)
 800832e:	6013      	str	r3, [r2, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008334:	4613      	mov	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4a27      	ldr	r2, [pc, #156]	; (80083dc <xTaskResumeAll+0x128>)
 800833e:	441a      	add	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3304      	adds	r3, #4
 8008344:	4619      	mov	r1, r3
 8008346:	4610      	mov	r0, r2
 8008348:	f7fe fedd 	bl	8007106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008350:	4b23      	ldr	r3, [pc, #140]	; (80083e0 <xTaskResumeAll+0x12c>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008356:	429a      	cmp	r2, r3
 8008358:	d302      	bcc.n	8008360 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800835a:	4b22      	ldr	r3, [pc, #136]	; (80083e4 <xTaskResumeAll+0x130>)
 800835c:	2201      	movs	r2, #1
 800835e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008360:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <xTaskResumeAll+0x120>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1cb      	bne.n	8008300 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800836e:	f000 fb7b 	bl	8008a68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008372:	4b1d      	ldr	r3, [pc, #116]	; (80083e8 <xTaskResumeAll+0x134>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d010      	beq.n	80083a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800837e:	f000 f847 	bl	8008410 <xTaskIncrementTick>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008388:	4b16      	ldr	r3, [pc, #88]	; (80083e4 <xTaskResumeAll+0x130>)
 800838a:	2201      	movs	r2, #1
 800838c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3b01      	subs	r3, #1
 8008392:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1f1      	bne.n	800837e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800839a:	4b13      	ldr	r3, [pc, #76]	; (80083e8 <xTaskResumeAll+0x134>)
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083a0:	4b10      	ldr	r3, [pc, #64]	; (80083e4 <xTaskResumeAll+0x130>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d009      	beq.n	80083bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083a8:	2301      	movs	r3, #1
 80083aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083ac:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <xTaskResumeAll+0x138>)
 80083ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b2:	601a      	str	r2, [r3, #0]
 80083b4:	f3bf 8f4f 	dsb	sy
 80083b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083bc:	f001 f902 	bl	80095c4 <vPortExitCritical>

	return xAlreadyYielded;
 80083c0:	68bb      	ldr	r3, [r7, #8]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	2000111c 	.word	0x2000111c
 80083d0:	200010f4 	.word	0x200010f4
 80083d4:	200010b4 	.word	0x200010b4
 80083d8:	200010fc 	.word	0x200010fc
 80083dc:	20000c24 	.word	0x20000c24
 80083e0:	20000c20 	.word	0x20000c20
 80083e4:	20001108 	.word	0x20001108
 80083e8:	20001104 	.word	0x20001104
 80083ec:	e000ed04 	.word	0xe000ed04

080083f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083f6:	4b05      	ldr	r3, [pc, #20]	; (800840c <xTaskGetTickCount+0x1c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083fc:	687b      	ldr	r3, [r7, #4]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	200010f8 	.word	0x200010f8

08008410 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008416:	2300      	movs	r3, #0
 8008418:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800841a:	4b4f      	ldr	r3, [pc, #316]	; (8008558 <xTaskIncrementTick+0x148>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	f040 808f 	bne.w	8008542 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008424:	4b4d      	ldr	r3, [pc, #308]	; (800855c <xTaskIncrementTick+0x14c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3301      	adds	r3, #1
 800842a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800842c:	4a4b      	ldr	r2, [pc, #300]	; (800855c <xTaskIncrementTick+0x14c>)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d120      	bne.n	800847a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008438:	4b49      	ldr	r3, [pc, #292]	; (8008560 <xTaskIncrementTick+0x150>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00a      	beq.n	8008458 <xTaskIncrementTick+0x48>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	603b      	str	r3, [r7, #0]
}
 8008454:	bf00      	nop
 8008456:	e7fe      	b.n	8008456 <xTaskIncrementTick+0x46>
 8008458:	4b41      	ldr	r3, [pc, #260]	; (8008560 <xTaskIncrementTick+0x150>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	4b41      	ldr	r3, [pc, #260]	; (8008564 <xTaskIncrementTick+0x154>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a3f      	ldr	r2, [pc, #252]	; (8008560 <xTaskIncrementTick+0x150>)
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	4a3f      	ldr	r2, [pc, #252]	; (8008564 <xTaskIncrementTick+0x154>)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6013      	str	r3, [r2, #0]
 800846c:	4b3e      	ldr	r3, [pc, #248]	; (8008568 <xTaskIncrementTick+0x158>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	4a3d      	ldr	r2, [pc, #244]	; (8008568 <xTaskIncrementTick+0x158>)
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	f000 faf7 	bl	8008a68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800847a:	4b3c      	ldr	r3, [pc, #240]	; (800856c <xTaskIncrementTick+0x15c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	429a      	cmp	r2, r3
 8008482:	d349      	bcc.n	8008518 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008484:	4b36      	ldr	r3, [pc, #216]	; (8008560 <xTaskIncrementTick+0x150>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d104      	bne.n	8008498 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848e:	4b37      	ldr	r3, [pc, #220]	; (800856c <xTaskIncrementTick+0x15c>)
 8008490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008494:	601a      	str	r2, [r3, #0]
					break;
 8008496:	e03f      	b.n	8008518 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008498:	4b31      	ldr	r3, [pc, #196]	; (8008560 <xTaskIncrementTick+0x150>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d203      	bcs.n	80084b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084b0:	4a2e      	ldr	r2, [pc, #184]	; (800856c <xTaskIncrementTick+0x15c>)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084b6:	e02f      	b.n	8008518 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	3304      	adds	r3, #4
 80084bc:	4618      	mov	r0, r3
 80084be:	f7fe fe7f 	bl	80071c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d004      	beq.n	80084d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3318      	adds	r3, #24
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe fe76 	bl	80071c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d8:	4b25      	ldr	r3, [pc, #148]	; (8008570 <xTaskIncrementTick+0x160>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d903      	bls.n	80084e8 <xTaskIncrementTick+0xd8>
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e4:	4a22      	ldr	r2, [pc, #136]	; (8008570 <xTaskIncrementTick+0x160>)
 80084e6:	6013      	str	r3, [r2, #0]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4a1f      	ldr	r2, [pc, #124]	; (8008574 <xTaskIncrementTick+0x164>)
 80084f6:	441a      	add	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	3304      	adds	r3, #4
 80084fc:	4619      	mov	r1, r3
 80084fe:	4610      	mov	r0, r2
 8008500:	f7fe fe01 	bl	8007106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008508:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <xTaskIncrementTick+0x168>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	429a      	cmp	r2, r3
 8008510:	d3b8      	bcc.n	8008484 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008512:	2301      	movs	r3, #1
 8008514:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008516:	e7b5      	b.n	8008484 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008518:	4b17      	ldr	r3, [pc, #92]	; (8008578 <xTaskIncrementTick+0x168>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851e:	4915      	ldr	r1, [pc, #84]	; (8008574 <xTaskIncrementTick+0x164>)
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d901      	bls.n	8008534 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008530:	2301      	movs	r3, #1
 8008532:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008534:	4b11      	ldr	r3, [pc, #68]	; (800857c <xTaskIncrementTick+0x16c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d007      	beq.n	800854c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800853c:	2301      	movs	r3, #1
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	e004      	b.n	800854c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <xTaskIncrementTick+0x170>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3301      	adds	r3, #1
 8008548:	4a0d      	ldr	r2, [pc, #52]	; (8008580 <xTaskIncrementTick+0x170>)
 800854a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800854c:	697b      	ldr	r3, [r7, #20]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	2000111c 	.word	0x2000111c
 800855c:	200010f8 	.word	0x200010f8
 8008560:	200010ac 	.word	0x200010ac
 8008564:	200010b0 	.word	0x200010b0
 8008568:	2000110c 	.word	0x2000110c
 800856c:	20001114 	.word	0x20001114
 8008570:	200010fc 	.word	0x200010fc
 8008574:	20000c24 	.word	0x20000c24
 8008578:	20000c20 	.word	0x20000c20
 800857c:	20001108 	.word	0x20001108
 8008580:	20001104 	.word	0x20001104

08008584 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800858a:	4b36      	ldr	r3, [pc, #216]	; (8008664 <vTaskSwitchContext+0xe0>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008592:	4b35      	ldr	r3, [pc, #212]	; (8008668 <vTaskSwitchContext+0xe4>)
 8008594:	2201      	movs	r2, #1
 8008596:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008598:	e05f      	b.n	800865a <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800859a:	4b33      	ldr	r3, [pc, #204]	; (8008668 <vTaskSwitchContext+0xe4>)
 800859c:	2200      	movs	r2, #0
 800859e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80085a0:	f7f8 fd31 	bl	8001006 <getRunTimeCounterValue>
 80085a4:	4603      	mov	r3, r0
 80085a6:	4a31      	ldr	r2, [pc, #196]	; (800866c <vTaskSwitchContext+0xe8>)
 80085a8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80085aa:	4b30      	ldr	r3, [pc, #192]	; (800866c <vTaskSwitchContext+0xe8>)
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	4b30      	ldr	r3, [pc, #192]	; (8008670 <vTaskSwitchContext+0xec>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d909      	bls.n	80085ca <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80085b6:	4b2f      	ldr	r3, [pc, #188]	; (8008674 <vTaskSwitchContext+0xf0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80085bc:	4a2b      	ldr	r2, [pc, #172]	; (800866c <vTaskSwitchContext+0xe8>)
 80085be:	6810      	ldr	r0, [r2, #0]
 80085c0:	4a2b      	ldr	r2, [pc, #172]	; (8008670 <vTaskSwitchContext+0xec>)
 80085c2:	6812      	ldr	r2, [r2, #0]
 80085c4:	1a82      	subs	r2, r0, r2
 80085c6:	440a      	add	r2, r1
 80085c8:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 80085ca:	4b28      	ldr	r3, [pc, #160]	; (800866c <vTaskSwitchContext+0xe8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a28      	ldr	r2, [pc, #160]	; (8008670 <vTaskSwitchContext+0xec>)
 80085d0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d2:	4b29      	ldr	r3, [pc, #164]	; (8008678 <vTaskSwitchContext+0xf4>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e010      	b.n	80085fc <vTaskSwitchContext+0x78>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <vTaskSwitchContext+0x72>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	607b      	str	r3, [r7, #4]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <vTaskSwitchContext+0x70>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	491f      	ldr	r1, [pc, #124]	; (800867c <vTaskSwitchContext+0xf8>)
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4613      	mov	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4413      	add	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	440b      	add	r3, r1
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d0e4      	beq.n	80085da <vTaskSwitchContext+0x56>
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4613      	mov	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4a18      	ldr	r2, [pc, #96]	; (800867c <vTaskSwitchContext+0xf8>)
 800861c:	4413      	add	r3, r2
 800861e:	60bb      	str	r3, [r7, #8]
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	605a      	str	r2, [r3, #4]
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	3308      	adds	r3, #8
 8008632:	429a      	cmp	r2, r3
 8008634:	d104      	bne.n	8008640 <vTaskSwitchContext+0xbc>
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	685a      	ldr	r2, [r3, #4]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	605a      	str	r2, [r3, #4]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	4a0b      	ldr	r2, [pc, #44]	; (8008674 <vTaskSwitchContext+0xf0>)
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	4a0b      	ldr	r2, [pc, #44]	; (8008678 <vTaskSwitchContext+0xf4>)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008650:	4b08      	ldr	r3, [pc, #32]	; (8008674 <vTaskSwitchContext+0xf0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	335c      	adds	r3, #92	; 0x5c
 8008656:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <vTaskSwitchContext+0xfc>)
 8008658:	6013      	str	r3, [r2, #0]
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	2000111c 	.word	0x2000111c
 8008668:	20001108 	.word	0x20001108
 800866c:	20001124 	.word	0x20001124
 8008670:	20001120 	.word	0x20001120
 8008674:	20000c20 	.word	0x20000c20
 8008678:	200010fc 	.word	0x200010fc
 800867c:	20000c24 	.word	0x20000c24
 8008680:	20000010 	.word	0x20000010

08008684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	60fb      	str	r3, [r7, #12]
}
 80086a6:	bf00      	nop
 80086a8:	e7fe      	b.n	80086a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086aa:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <vTaskPlaceOnEventList+0x44>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3318      	adds	r3, #24
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f7fe fd4b 	bl	800714e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086b8:	2101      	movs	r1, #1
 80086ba:	6838      	ldr	r0, [r7, #0]
 80086bc:	f000 fa80 	bl	8008bc0 <prvAddCurrentTaskToDelayedList>
}
 80086c0:	bf00      	nop
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000c20 	.word	0x20000c20

080086cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	617b      	str	r3, [r7, #20]
}
 80086f0:	bf00      	nop
 80086f2:	e7fe      	b.n	80086f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <vTaskPlaceOnEventListRestricted+0x54>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3318      	adds	r3, #24
 80086fa:	4619      	mov	r1, r3
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7fe fd02 	bl	8007106 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800870c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	68b8      	ldr	r0, [r7, #8]
 8008712:	f000 fa55 	bl	8008bc0 <prvAddCurrentTaskToDelayedList>
	}
 8008716:	bf00      	nop
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20000c20 	.word	0x20000c20

08008724 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10a      	bne.n	8008750 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	60fb      	str	r3, [r7, #12]
}
 800874c:	bf00      	nop
 800874e:	e7fe      	b.n	800874e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	3318      	adds	r3, #24
 8008754:	4618      	mov	r0, r3
 8008756:	f7fe fd33 	bl	80071c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800875a:	4b1e      	ldr	r3, [pc, #120]	; (80087d4 <xTaskRemoveFromEventList+0xb0>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d11d      	bne.n	800879e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	3304      	adds	r3, #4
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fd2a 	bl	80071c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008770:	4b19      	ldr	r3, [pc, #100]	; (80087d8 <xTaskRemoveFromEventList+0xb4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d903      	bls.n	8008780 <xTaskRemoveFromEventList+0x5c>
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	4a16      	ldr	r2, [pc, #88]	; (80087d8 <xTaskRemoveFromEventList+0xb4>)
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4a13      	ldr	r2, [pc, #76]	; (80087dc <xTaskRemoveFromEventList+0xb8>)
 800878e:	441a      	add	r2, r3
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	3304      	adds	r3, #4
 8008794:	4619      	mov	r1, r3
 8008796:	4610      	mov	r0, r2
 8008798:	f7fe fcb5 	bl	8007106 <vListInsertEnd>
 800879c:	e005      	b.n	80087aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	3318      	adds	r3, #24
 80087a2:	4619      	mov	r1, r3
 80087a4:	480e      	ldr	r0, [pc, #56]	; (80087e0 <xTaskRemoveFromEventList+0xbc>)
 80087a6:	f7fe fcae 	bl	8007106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ae:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <xTaskRemoveFromEventList+0xc0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d905      	bls.n	80087c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80087b8:	2301      	movs	r3, #1
 80087ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80087bc:	4b0a      	ldr	r3, [pc, #40]	; (80087e8 <xTaskRemoveFromEventList+0xc4>)
 80087be:	2201      	movs	r2, #1
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e001      	b.n	80087c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80087c8:	697b      	ldr	r3, [r7, #20]
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3718      	adds	r7, #24
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	2000111c 	.word	0x2000111c
 80087d8:	200010fc 	.word	0x200010fc
 80087dc:	20000c24 	.word	0x20000c24
 80087e0:	200010b4 	.word	0x200010b4
 80087e4:	20000c20 	.word	0x20000c20
 80087e8:	20001108 	.word	0x20001108

080087ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087f4:	4b06      	ldr	r3, [pc, #24]	; (8008810 <vTaskInternalSetTimeOutState+0x24>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <vTaskInternalSetTimeOutState+0x28>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	605a      	str	r2, [r3, #4]
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	2000110c 	.word	0x2000110c
 8008814:	200010f8 	.word	0x200010f8

08008818 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10a      	bne.n	800883e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	613b      	str	r3, [r7, #16]
}
 800883a:	bf00      	nop
 800883c:	e7fe      	b.n	800883c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	60fb      	str	r3, [r7, #12]
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800885a:	f000 fe83 	bl	8009564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800885e:	4b1d      	ldr	r3, [pc, #116]	; (80088d4 <xTaskCheckForTimeOut+0xbc>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008876:	d102      	bne.n	800887e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008878:	2300      	movs	r3, #0
 800887a:	61fb      	str	r3, [r7, #28]
 800887c:	e023      	b.n	80088c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	4b15      	ldr	r3, [pc, #84]	; (80088d8 <xTaskCheckForTimeOut+0xc0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	429a      	cmp	r2, r3
 8008888:	d007      	beq.n	800889a <xTaskCheckForTimeOut+0x82>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	429a      	cmp	r2, r3
 8008892:	d302      	bcc.n	800889a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008894:	2301      	movs	r3, #1
 8008896:	61fb      	str	r3, [r7, #28]
 8008898:	e015      	b.n	80088c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d20b      	bcs.n	80088bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	1ad2      	subs	r2, r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff ff9b 	bl	80087ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61fb      	str	r3, [r7, #28]
 80088ba:	e004      	b.n	80088c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2200      	movs	r2, #0
 80088c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80088c2:	2301      	movs	r3, #1
 80088c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80088c6:	f000 fe7d 	bl	80095c4 <vPortExitCritical>

	return xReturn;
 80088ca:	69fb      	ldr	r3, [r7, #28]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3720      	adds	r7, #32
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	200010f8 	.word	0x200010f8
 80088d8:	2000110c 	.word	0x2000110c

080088dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088e0:	4b03      	ldr	r3, [pc, #12]	; (80088f0 <vTaskMissedYield+0x14>)
 80088e2:	2201      	movs	r2, #1
 80088e4:	601a      	str	r2, [r3, #0]
}
 80088e6:	bf00      	nop
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20001108 	.word	0x20001108

080088f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088fc:	f000 f852 	bl	80089a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008900:	4b06      	ldr	r3, [pc, #24]	; (800891c <prvIdleTask+0x28>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d9f9      	bls.n	80088fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008908:	4b05      	ldr	r3, [pc, #20]	; (8008920 <prvIdleTask+0x2c>)
 800890a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008918:	e7f0      	b.n	80088fc <prvIdleTask+0x8>
 800891a:	bf00      	nop
 800891c:	20000c24 	.word	0x20000c24
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800892a:	2300      	movs	r3, #0
 800892c:	607b      	str	r3, [r7, #4]
 800892e:	e00c      	b.n	800894a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4a12      	ldr	r2, [pc, #72]	; (8008984 <prvInitialiseTaskLists+0x60>)
 800893c:	4413      	add	r3, r2
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fbb4 	bl	80070ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3301      	adds	r3, #1
 8008948:	607b      	str	r3, [r7, #4]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b37      	cmp	r3, #55	; 0x37
 800894e:	d9ef      	bls.n	8008930 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008950:	480d      	ldr	r0, [pc, #52]	; (8008988 <prvInitialiseTaskLists+0x64>)
 8008952:	f7fe fbab 	bl	80070ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008956:	480d      	ldr	r0, [pc, #52]	; (800898c <prvInitialiseTaskLists+0x68>)
 8008958:	f7fe fba8 	bl	80070ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800895c:	480c      	ldr	r0, [pc, #48]	; (8008990 <prvInitialiseTaskLists+0x6c>)
 800895e:	f7fe fba5 	bl	80070ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008962:	480c      	ldr	r0, [pc, #48]	; (8008994 <prvInitialiseTaskLists+0x70>)
 8008964:	f7fe fba2 	bl	80070ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008968:	480b      	ldr	r0, [pc, #44]	; (8008998 <prvInitialiseTaskLists+0x74>)
 800896a:	f7fe fb9f 	bl	80070ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800896e:	4b0b      	ldr	r3, [pc, #44]	; (800899c <prvInitialiseTaskLists+0x78>)
 8008970:	4a05      	ldr	r2, [pc, #20]	; (8008988 <prvInitialiseTaskLists+0x64>)
 8008972:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008974:	4b0a      	ldr	r3, [pc, #40]	; (80089a0 <prvInitialiseTaskLists+0x7c>)
 8008976:	4a05      	ldr	r2, [pc, #20]	; (800898c <prvInitialiseTaskLists+0x68>)
 8008978:	601a      	str	r2, [r3, #0]
}
 800897a:	bf00      	nop
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000c24 	.word	0x20000c24
 8008988:	20001084 	.word	0x20001084
 800898c:	20001098 	.word	0x20001098
 8008990:	200010b4 	.word	0x200010b4
 8008994:	200010c8 	.word	0x200010c8
 8008998:	200010e0 	.word	0x200010e0
 800899c:	200010ac 	.word	0x200010ac
 80089a0:	200010b0 	.word	0x200010b0

080089a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089aa:	e019      	b.n	80089e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80089ac:	f000 fdda 	bl	8009564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b0:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <prvCheckTasksWaitingTermination+0x50>)
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe fbff 	bl	80071c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80089c2:	4b0d      	ldr	r3, [pc, #52]	; (80089f8 <prvCheckTasksWaitingTermination+0x54>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	4a0b      	ldr	r2, [pc, #44]	; (80089f8 <prvCheckTasksWaitingTermination+0x54>)
 80089ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089cc:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <prvCheckTasksWaitingTermination+0x58>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3b01      	subs	r3, #1
 80089d2:	4a0a      	ldr	r2, [pc, #40]	; (80089fc <prvCheckTasksWaitingTermination+0x58>)
 80089d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089d6:	f000 fdf5 	bl	80095c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f810 	bl	8008a00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089e0:	4b06      	ldr	r3, [pc, #24]	; (80089fc <prvCheckTasksWaitingTermination+0x58>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1e1      	bne.n	80089ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	200010c8 	.word	0x200010c8
 80089f8:	200010f4 	.word	0x200010f4
 80089fc:	200010dc 	.word	0x200010dc

08008a00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	335c      	adds	r3, #92	; 0x5c
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f002 f981 	bl	800ad14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d108      	bne.n	8008a2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 ff8d 	bl	8009940 <vPortFree>
				vPortFree( pxTCB );
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 ff8a 	bl	8009940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a2c:	e018      	b.n	8008a60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d103      	bne.n	8008a40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 ff81 	bl	8009940 <vPortFree>
	}
 8008a3e:	e00f      	b.n	8008a60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d00a      	beq.n	8008a60 <prvDeleteTCB+0x60>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	60fb      	str	r3, [r7, #12]
}
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <prvDeleteTCB+0x5e>
	}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a6e:	4b0c      	ldr	r3, [pc, #48]	; (8008aa0 <prvResetNextTaskUnblockTime+0x38>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d104      	bne.n	8008a82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a78:	4b0a      	ldr	r3, [pc, #40]	; (8008aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8008a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a80:	e008      	b.n	8008a94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a82:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <prvResetNextTaskUnblockTime+0x38>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	4a04      	ldr	r2, [pc, #16]	; (8008aa4 <prvResetNextTaskUnblockTime+0x3c>)
 8008a92:	6013      	str	r3, [r2, #0]
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	200010ac 	.word	0x200010ac
 8008aa4:	20001114 	.word	0x20001114

08008aa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008aae:	4b0b      	ldr	r3, [pc, #44]	; (8008adc <xTaskGetSchedulerState+0x34>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d102      	bne.n	8008abc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	607b      	str	r3, [r7, #4]
 8008aba:	e008      	b.n	8008ace <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008abc:	4b08      	ldr	r3, [pc, #32]	; (8008ae0 <xTaskGetSchedulerState+0x38>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	607b      	str	r3, [r7, #4]
 8008ac8:	e001      	b.n	8008ace <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008aca:	2300      	movs	r3, #0
 8008acc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ace:	687b      	ldr	r3, [r7, #4]
	}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr
 8008adc:	20001100 	.word	0x20001100
 8008ae0:	2000111c 	.word	0x2000111c

08008ae4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d056      	beq.n	8008ba8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008afa:	4b2e      	ldr	r3, [pc, #184]	; (8008bb4 <xTaskPriorityDisinherit+0xd0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d00a      	beq.n	8008b1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	60fb      	str	r3, [r7, #12]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10a      	bne.n	8008b38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	60bb      	str	r3, [r7, #8]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3c:	1e5a      	subs	r2, r3, #1
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d02c      	beq.n	8008ba8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d128      	bne.n	8008ba8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fe fb30 	bl	80071c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b78:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <xTaskPriorityDisinherit+0xd4>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d903      	bls.n	8008b88 <xTaskPriorityDisinherit+0xa4>
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	4a0c      	ldr	r2, [pc, #48]	; (8008bb8 <xTaskPriorityDisinherit+0xd4>)
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	4a09      	ldr	r2, [pc, #36]	; (8008bbc <xTaskPriorityDisinherit+0xd8>)
 8008b96:	441a      	add	r2, r3
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4610      	mov	r0, r2
 8008ba0:	f7fe fab1 	bl	8007106 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ba8:	697b      	ldr	r3, [r7, #20]
	}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000c20 	.word	0x20000c20
 8008bb8:	200010fc 	.word	0x200010fc
 8008bbc:	20000c24 	.word	0x20000c24

08008bc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bca:	4b21      	ldr	r3, [pc, #132]	; (8008c50 <prvAddCurrentTaskToDelayedList+0x90>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bd0:	4b20      	ldr	r3, [pc, #128]	; (8008c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe faf2 	bl	80071c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be2:	d10a      	bne.n	8008bfa <prvAddCurrentTaskToDelayedList+0x3a>
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d007      	beq.n	8008bfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bea:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4819      	ldr	r0, [pc, #100]	; (8008c58 <prvAddCurrentTaskToDelayedList+0x98>)
 8008bf4:	f7fe fa87 	bl	8007106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bf8:	e026      	b.n	8008c48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4413      	add	r3, r2
 8008c00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c02:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d209      	bcs.n	8008c26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c12:	4b12      	ldr	r3, [pc, #72]	; (8008c5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	4b0f      	ldr	r3, [pc, #60]	; (8008c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	4610      	mov	r0, r2
 8008c20:	f7fe fa95 	bl	800714e <vListInsert>
}
 8008c24:	e010      	b.n	8008c48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c26:	4b0e      	ldr	r3, [pc, #56]	; (8008c60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3304      	adds	r3, #4
 8008c30:	4619      	mov	r1, r3
 8008c32:	4610      	mov	r0, r2
 8008c34:	f7fe fa8b 	bl	800714e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c38:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d202      	bcs.n	8008c48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c42:	4a08      	ldr	r2, [pc, #32]	; (8008c64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	6013      	str	r3, [r2, #0]
}
 8008c48:	bf00      	nop
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	200010f8 	.word	0x200010f8
 8008c54:	20000c20 	.word	0x20000c20
 8008c58:	200010e0 	.word	0x200010e0
 8008c5c:	200010b0 	.word	0x200010b0
 8008c60:	200010ac 	.word	0x200010ac
 8008c64:	20001114 	.word	0x20001114

08008c68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c72:	f000 fb07 	bl	8009284 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c76:	4b1c      	ldr	r3, [pc, #112]	; (8008ce8 <xTimerCreateTimerTask+0x80>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d021      	beq.n	8008cc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c86:	1d3a      	adds	r2, r7, #4
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	f107 030c 	add.w	r3, r7, #12
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fe f9f1 	bl	8007078 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	9202      	str	r2, [sp, #8]
 8008c9e:	9301      	str	r3, [sp, #4]
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	460a      	mov	r2, r1
 8008ca8:	4910      	ldr	r1, [pc, #64]	; (8008cec <xTimerCreateTimerTask+0x84>)
 8008caa:	4811      	ldr	r0, [pc, #68]	; (8008cf0 <xTimerCreateTimerTask+0x88>)
 8008cac:	f7ff f890 	bl	8007dd0 <xTaskCreateStatic>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	4a10      	ldr	r2, [pc, #64]	; (8008cf4 <xTimerCreateTimerTask+0x8c>)
 8008cb4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008cb6:	4b0f      	ldr	r3, [pc, #60]	; (8008cf4 <xTimerCreateTimerTask+0x8c>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10a      	bne.n	8008cde <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	613b      	str	r3, [r7, #16]
}
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008cde:	697b      	ldr	r3, [r7, #20]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3718      	adds	r7, #24
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20001158 	.word	0x20001158
 8008cec:	0800e768 	.word	0x0800e768
 8008cf0:	08008e2d 	.word	0x08008e2d
 8008cf4:	2000115c 	.word	0x2000115c

08008cf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08a      	sub	sp, #40	; 0x28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	623b      	str	r3, [r7, #32]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008d26:	4b1a      	ldr	r3, [pc, #104]	; (8008d90 <xTimerGenericCommand+0x98>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d02a      	beq.n	8008d84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b05      	cmp	r3, #5
 8008d3e:	dc18      	bgt.n	8008d72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d40:	f7ff feb2 	bl	8008aa8 <xTaskGetSchedulerState>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d109      	bne.n	8008d5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d4a:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <xTimerGenericCommand+0x98>)
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	f107 0110 	add.w	r1, r7, #16
 8008d52:	2300      	movs	r3, #0
 8008d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d56:	f7fe fc05 	bl	8007564 <xQueueGenericSend>
 8008d5a:	6278      	str	r0, [r7, #36]	; 0x24
 8008d5c:	e012      	b.n	8008d84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <xTimerGenericCommand+0x98>)
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	f107 0110 	add.w	r1, r7, #16
 8008d66:	2300      	movs	r3, #0
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f7fe fbfb 	bl	8007564 <xQueueGenericSend>
 8008d6e:	6278      	str	r0, [r7, #36]	; 0x24
 8008d70:	e008      	b.n	8008d84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d72:	4b07      	ldr	r3, [pc, #28]	; (8008d90 <xTimerGenericCommand+0x98>)
 8008d74:	6818      	ldr	r0, [r3, #0]
 8008d76:	f107 0110 	add.w	r1, r7, #16
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	f7fe fcef 	bl	8007760 <xQueueGenericSendFromISR>
 8008d82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3728      	adds	r7, #40	; 0x28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20001158 	.word	0x20001158

08008d94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b088      	sub	sp, #32
 8008d98:	af02      	add	r7, sp, #8
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d9e:	4b22      	ldr	r3, [pc, #136]	; (8008e28 <prvProcessExpiredTimer+0x94>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	3304      	adds	r3, #4
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fe fa07 	bl	80071c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008db8:	f003 0304 	and.w	r3, r3, #4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d022      	beq.n	8008e06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	699a      	ldr	r2, [r3, #24]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	18d1      	adds	r1, r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	6978      	ldr	r0, [r7, #20]
 8008dce:	f000 f8d1 	bl	8008f74 <prvInsertTimerInActiveList>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d01f      	beq.n	8008e18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dd8:	2300      	movs	r3, #0
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	2100      	movs	r1, #0
 8008de2:	6978      	ldr	r0, [r7, #20]
 8008de4:	f7ff ff88 	bl	8008cf8 <xTimerGenericCommand>
 8008de8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d113      	bne.n	8008e18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	60fb      	str	r3, [r7, #12]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e0c:	f023 0301 	bic.w	r3, r3, #1
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	6a1b      	ldr	r3, [r3, #32]
 8008e1c:	6978      	ldr	r0, [r7, #20]
 8008e1e:	4798      	blx	r3
}
 8008e20:	bf00      	nop
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	20001150 	.word	0x20001150

08008e2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e34:	f107 0308 	add.w	r3, r7, #8
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 f857 	bl	8008eec <prvGetNextExpireTime>
 8008e3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	4619      	mov	r1, r3
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f803 	bl	8008e50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e4a:	f000 f8d5 	bl	8008ff8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e4e:	e7f1      	b.n	8008e34 <prvTimerTask+0x8>

08008e50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e5a:	f7ff fa1d 	bl	8008298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e5e:	f107 0308 	add.w	r3, r7, #8
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 f866 	bl	8008f34 <prvSampleTimeNow>
 8008e68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d130      	bne.n	8008ed2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10a      	bne.n	8008e8c <prvProcessTimerOrBlockTask+0x3c>
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d806      	bhi.n	8008e8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e7e:	f7ff fa19 	bl	80082b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e82:	68f9      	ldr	r1, [r7, #12]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f7ff ff85 	bl	8008d94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e8a:	e024      	b.n	8008ed6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d008      	beq.n	8008ea4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e92:	4b13      	ldr	r3, [pc, #76]	; (8008ee0 <prvProcessTimerOrBlockTask+0x90>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d101      	bne.n	8008ea0 <prvProcessTimerOrBlockTask+0x50>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e000      	b.n	8008ea2 <prvProcessTimerOrBlockTask+0x52>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ea4:	4b0f      	ldr	r3, [pc, #60]	; (8008ee4 <prvProcessTimerOrBlockTask+0x94>)
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	683a      	ldr	r2, [r7, #0]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f7fe ff59 	bl	8007d68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008eb6:	f7ff f9fd 	bl	80082b4 <xTaskResumeAll>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ec0:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <prvProcessTimerOrBlockTask+0x98>)
 8008ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
}
 8008ed0:	e001      	b.n	8008ed6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ed2:	f7ff f9ef 	bl	80082b4 <xTaskResumeAll>
}
 8008ed6:	bf00      	nop
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20001154 	.word	0x20001154
 8008ee4:	20001158 	.word	0x20001158
 8008ee8:	e000ed04 	.word	0xe000ed04

08008eec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ef4:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <prvGetNextExpireTime+0x44>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <prvGetNextExpireTime+0x16>
 8008efe:	2201      	movs	r2, #1
 8008f00:	e000      	b.n	8008f04 <prvGetNextExpireTime+0x18>
 8008f02:	2200      	movs	r2, #0
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d105      	bne.n	8008f1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f10:	4b07      	ldr	r3, [pc, #28]	; (8008f30 <prvGetNextExpireTime+0x44>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	e001      	b.n	8008f20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008f20:	68fb      	ldr	r3, [r7, #12]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	20001150 	.word	0x20001150

08008f34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f3c:	f7ff fa58 	bl	80083f0 <xTaskGetTickCount>
 8008f40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f42:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <prvSampleTimeNow+0x3c>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d205      	bcs.n	8008f58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f4c:	f000 f936 	bl	80091bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	e002      	b.n	8008f5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f5e:	4a04      	ldr	r2, [pc, #16]	; (8008f70 <prvSampleTimeNow+0x3c>)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f64:	68fb      	ldr	r3, [r7, #12]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20001160 	.word	0x20001160

08008f74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f82:	2300      	movs	r3, #0
 8008f84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d812      	bhi.n	8008fc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	1ad2      	subs	r2, r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d302      	bcc.n	8008fae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	617b      	str	r3, [r7, #20]
 8008fac:	e01b      	b.n	8008fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008fae:	4b10      	ldr	r3, [pc, #64]	; (8008ff0 <prvInsertTimerInActiveList+0x7c>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	f7fe f8c8 	bl	800714e <vListInsert>
 8008fbe:	e012      	b.n	8008fe6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d206      	bcs.n	8008fd6 <prvInsertTimerInActiveList+0x62>
 8008fc8:	68ba      	ldr	r2, [r7, #8]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d302      	bcc.n	8008fd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	e007      	b.n	8008fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fd6:	4b07      	ldr	r3, [pc, #28]	; (8008ff4 <prvInsertTimerInActiveList+0x80>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	4619      	mov	r1, r3
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	f7fe f8b4 	bl	800714e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fe6:	697b      	ldr	r3, [r7, #20]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	20001154 	.word	0x20001154
 8008ff4:	20001150 	.word	0x20001150

08008ff8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08e      	sub	sp, #56	; 0x38
 8008ffc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ffe:	e0ca      	b.n	8009196 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	da18      	bge.n	8009038 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009006:	1d3b      	adds	r3, r7, #4
 8009008:	3304      	adds	r3, #4
 800900a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800900c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10a      	bne.n	8009028 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	61fb      	str	r3, [r7, #28]
}
 8009024:	bf00      	nop
 8009026:	e7fe      	b.n	8009026 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800902e:	6850      	ldr	r0, [r2, #4]
 8009030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009032:	6892      	ldr	r2, [r2, #8]
 8009034:	4611      	mov	r1, r2
 8009036:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	f2c0 80aa 	blt.w	8009194 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d004      	beq.n	8009056 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800904c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904e:	3304      	adds	r3, #4
 8009050:	4618      	mov	r0, r3
 8009052:	f7fe f8b5 	bl	80071c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009056:	463b      	mov	r3, r7
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff ff6b 	bl	8008f34 <prvSampleTimeNow>
 800905e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b09      	cmp	r3, #9
 8009064:	f200 8097 	bhi.w	8009196 <prvProcessReceivedCommands+0x19e>
 8009068:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <prvProcessReceivedCommands+0x78>)
 800906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906e:	bf00      	nop
 8009070:	08009099 	.word	0x08009099
 8009074:	08009099 	.word	0x08009099
 8009078:	08009099 	.word	0x08009099
 800907c:	0800910d 	.word	0x0800910d
 8009080:	08009121 	.word	0x08009121
 8009084:	0800916b 	.word	0x0800916b
 8009088:	08009099 	.word	0x08009099
 800908c:	08009099 	.word	0x08009099
 8009090:	0800910d 	.word	0x0800910d
 8009094:	08009121 	.word	0x08009121
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800909e:	f043 0301 	orr.w	r3, r3, #1
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	18d1      	adds	r1, r2, r3
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b8:	f7ff ff5c 	bl	8008f74 <prvInsertTimerInActiveList>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d069      	beq.n	8009196 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d05e      	beq.n	8009196 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	441a      	add	r2, r3
 80090e0:	2300      	movs	r3, #0
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	2300      	movs	r3, #0
 80090e6:	2100      	movs	r1, #0
 80090e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ea:	f7ff fe05 	bl	8008cf8 <xTimerGenericCommand>
 80090ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d14f      	bne.n	8009196 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	f383 8811 	msr	BASEPRI, r3
 80090fe:	f3bf 8f6f 	isb	sy
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	61bb      	str	r3, [r7, #24]
}
 8009108:	bf00      	nop
 800910a:	e7fe      	b.n	800910a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009112:	f023 0301 	bic.w	r3, r3, #1
 8009116:	b2da      	uxtb	r2, r3
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800911e:	e03a      	b.n	8009196 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009126:	f043 0301 	orr.w	r3, r3, #1
 800912a:	b2da      	uxtb	r2, r3
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009136:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	617b      	str	r3, [r7, #20]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	18d1      	adds	r1, r2, r3
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009164:	f7ff ff06 	bl	8008f74 <prvInsertTimerInActiveList>
					break;
 8009168:	e015      	b.n	8009196 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009170:	f003 0302 	and.w	r3, r3, #2
 8009174:	2b00      	cmp	r3, #0
 8009176:	d103      	bne.n	8009180 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800917a:	f000 fbe1 	bl	8009940 <vPortFree>
 800917e:	e00a      	b.n	8009196 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009186:	f023 0301 	bic.w	r3, r3, #1
 800918a:	b2da      	uxtb	r2, r3
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009192:	e000      	b.n	8009196 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009194:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009196:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <prvProcessReceivedCommands+0x1c0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	1d39      	adds	r1, r7, #4
 800919c:	2200      	movs	r2, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fb7a 	bl	8007898 <xQueueReceive>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f47f af2a 	bne.w	8009000 <prvProcessReceivedCommands+0x8>
	}
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	3730      	adds	r7, #48	; 0x30
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20001158 	.word	0x20001158

080091bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091c2:	e048      	b.n	8009256 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091c4:	4b2d      	ldr	r3, [pc, #180]	; (800927c <prvSwitchTimerLists+0xc0>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091ce:	4b2b      	ldr	r3, [pc, #172]	; (800927c <prvSwitchTimerLists+0xc0>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3304      	adds	r3, #4
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fd ffef 	bl	80071c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d02e      	beq.n	8009256 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	4413      	add	r3, r2
 8009200:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	429a      	cmp	r2, r3
 8009208:	d90e      	bls.n	8009228 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	68ba      	ldr	r2, [r7, #8]
 800920e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009216:	4b19      	ldr	r3, [pc, #100]	; (800927c <prvSwitchTimerLists+0xc0>)
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3304      	adds	r3, #4
 800921e:	4619      	mov	r1, r3
 8009220:	4610      	mov	r0, r2
 8009222:	f7fd ff94 	bl	800714e <vListInsert>
 8009226:	e016      	b.n	8009256 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009228:	2300      	movs	r3, #0
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	2300      	movs	r3, #0
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	2100      	movs	r1, #0
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff fd60 	bl	8008cf8 <xTimerGenericCommand>
 8009238:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10a      	bne.n	8009256 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	603b      	str	r3, [r7, #0]
}
 8009252:	bf00      	nop
 8009254:	e7fe      	b.n	8009254 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009256:	4b09      	ldr	r3, [pc, #36]	; (800927c <prvSwitchTimerLists+0xc0>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1b1      	bne.n	80091c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009260:	4b06      	ldr	r3, [pc, #24]	; (800927c <prvSwitchTimerLists+0xc0>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009266:	4b06      	ldr	r3, [pc, #24]	; (8009280 <prvSwitchTimerLists+0xc4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a04      	ldr	r2, [pc, #16]	; (800927c <prvSwitchTimerLists+0xc0>)
 800926c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800926e:	4a04      	ldr	r2, [pc, #16]	; (8009280 <prvSwitchTimerLists+0xc4>)
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	6013      	str	r3, [r2, #0]
}
 8009274:	bf00      	nop
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20001150 	.word	0x20001150
 8009280:	20001154 	.word	0x20001154

08009284 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800928a:	f000 f96b 	bl	8009564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800928e:	4b15      	ldr	r3, [pc, #84]	; (80092e4 <prvCheckForValidListAndQueue+0x60>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d120      	bne.n	80092d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009296:	4814      	ldr	r0, [pc, #80]	; (80092e8 <prvCheckForValidListAndQueue+0x64>)
 8009298:	f7fd ff08 	bl	80070ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800929c:	4813      	ldr	r0, [pc, #76]	; (80092ec <prvCheckForValidListAndQueue+0x68>)
 800929e:	f7fd ff05 	bl	80070ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80092a2:	4b13      	ldr	r3, [pc, #76]	; (80092f0 <prvCheckForValidListAndQueue+0x6c>)
 80092a4:	4a10      	ldr	r2, [pc, #64]	; (80092e8 <prvCheckForValidListAndQueue+0x64>)
 80092a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80092a8:	4b12      	ldr	r3, [pc, #72]	; (80092f4 <prvCheckForValidListAndQueue+0x70>)
 80092aa:	4a10      	ldr	r2, [pc, #64]	; (80092ec <prvCheckForValidListAndQueue+0x68>)
 80092ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092ae:	2300      	movs	r3, #0
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	4b11      	ldr	r3, [pc, #68]	; (80092f8 <prvCheckForValidListAndQueue+0x74>)
 80092b4:	4a11      	ldr	r2, [pc, #68]	; (80092fc <prvCheckForValidListAndQueue+0x78>)
 80092b6:	2110      	movs	r1, #16
 80092b8:	200a      	movs	r0, #10
 80092ba:	f7fe f813 	bl	80072e4 <xQueueGenericCreateStatic>
 80092be:	4603      	mov	r3, r0
 80092c0:	4a08      	ldr	r2, [pc, #32]	; (80092e4 <prvCheckForValidListAndQueue+0x60>)
 80092c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80092c4:	4b07      	ldr	r3, [pc, #28]	; (80092e4 <prvCheckForValidListAndQueue+0x60>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d005      	beq.n	80092d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092cc:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <prvCheckForValidListAndQueue+0x60>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	490b      	ldr	r1, [pc, #44]	; (8009300 <prvCheckForValidListAndQueue+0x7c>)
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fcf4 	bl	8007cc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092d8:	f000 f974 	bl	80095c4 <vPortExitCritical>
}
 80092dc:	bf00      	nop
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	20001158 	.word	0x20001158
 80092e8:	20001128 	.word	0x20001128
 80092ec:	2000113c 	.word	0x2000113c
 80092f0:	20001150 	.word	0x20001150
 80092f4:	20001154 	.word	0x20001154
 80092f8:	20001204 	.word	0x20001204
 80092fc:	20001164 	.word	0x20001164
 8009300:	0800e770 	.word	0x0800e770

08009304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	3b04      	subs	r3, #4
 8009314:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800931c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3b04      	subs	r3, #4
 8009322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f023 0201 	bic.w	r2, r3, #1
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3b04      	subs	r3, #4
 8009332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009334:	4a0c      	ldr	r2, [pc, #48]	; (8009368 <pxPortInitialiseStack+0x64>)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3b14      	subs	r3, #20
 800933e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3b04      	subs	r3, #4
 800934a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f06f 0202 	mvn.w	r2, #2
 8009352:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3b20      	subs	r3, #32
 8009358:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800935a:	68fb      	ldr	r3, [r7, #12]
}
 800935c:	4618      	mov	r0, r3
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	0800936d 	.word	0x0800936d

0800936c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009376:	4b12      	ldr	r3, [pc, #72]	; (80093c0 <prvTaskExitError+0x54>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800937e:	d00a      	beq.n	8009396 <prvTaskExitError+0x2a>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	60fb      	str	r3, [r7, #12]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <prvTaskExitError+0x28>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	60bb      	str	r3, [r7, #8]
}
 80093a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80093aa:	bf00      	nop
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0fc      	beq.n	80093ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093b2:	bf00      	nop
 80093b4:	bf00      	nop
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	2000000c 	.word	0x2000000c
	...

080093d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093d0:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <pxCurrentTCBConst2>)
 80093d2:	6819      	ldr	r1, [r3, #0]
 80093d4:	6808      	ldr	r0, [r1, #0]
 80093d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093da:	f380 8809 	msr	PSP, r0
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f04f 0000 	mov.w	r0, #0
 80093e6:	f380 8811 	msr	BASEPRI, r0
 80093ea:	4770      	bx	lr
 80093ec:	f3af 8000 	nop.w

080093f0 <pxCurrentTCBConst2>:
 80093f0:	20000c20 	.word	0x20000c20
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093f4:	bf00      	nop
 80093f6:	bf00      	nop

080093f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093f8:	4808      	ldr	r0, [pc, #32]	; (800941c <prvPortStartFirstTask+0x24>)
 80093fa:	6800      	ldr	r0, [r0, #0]
 80093fc:	6800      	ldr	r0, [r0, #0]
 80093fe:	f380 8808 	msr	MSP, r0
 8009402:	f04f 0000 	mov.w	r0, #0
 8009406:	f380 8814 	msr	CONTROL, r0
 800940a:	b662      	cpsie	i
 800940c:	b661      	cpsie	f
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	df00      	svc	0
 8009418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800941a:	bf00      	nop
 800941c:	e000ed08 	.word	0xe000ed08

08009420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009426:	4b46      	ldr	r3, [pc, #280]	; (8009540 <xPortStartScheduler+0x120>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a46      	ldr	r2, [pc, #280]	; (8009544 <xPortStartScheduler+0x124>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d10a      	bne.n	8009446 <xPortStartScheduler+0x26>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	613b      	str	r3, [r7, #16]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009446:	4b3e      	ldr	r3, [pc, #248]	; (8009540 <xPortStartScheduler+0x120>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a3f      	ldr	r2, [pc, #252]	; (8009548 <xPortStartScheduler+0x128>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d10a      	bne.n	8009466 <xPortStartScheduler+0x46>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	60fb      	str	r3, [r7, #12]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009466:	4b39      	ldr	r3, [pc, #228]	; (800954c <xPortStartScheduler+0x12c>)
 8009468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	22ff      	movs	r2, #255	; 0xff
 8009476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	b2db      	uxtb	r3, r3
 800947e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009488:	b2da      	uxtb	r2, r3
 800948a:	4b31      	ldr	r3, [pc, #196]	; (8009550 <xPortStartScheduler+0x130>)
 800948c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800948e:	4b31      	ldr	r3, [pc, #196]	; (8009554 <xPortStartScheduler+0x134>)
 8009490:	2207      	movs	r2, #7
 8009492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009494:	e009      	b.n	80094aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009496:	4b2f      	ldr	r3, [pc, #188]	; (8009554 <xPortStartScheduler+0x134>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3b01      	subs	r3, #1
 800949c:	4a2d      	ldr	r2, [pc, #180]	; (8009554 <xPortStartScheduler+0x134>)
 800949e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80094a0:	78fb      	ldrb	r3, [r7, #3]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094aa:	78fb      	ldrb	r3, [r7, #3]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b2:	2b80      	cmp	r3, #128	; 0x80
 80094b4:	d0ef      	beq.n	8009496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094b6:	4b27      	ldr	r3, [pc, #156]	; (8009554 <xPortStartScheduler+0x134>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f1c3 0307 	rsb	r3, r3, #7
 80094be:	2b04      	cmp	r3, #4
 80094c0:	d00a      	beq.n	80094d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	60bb      	str	r3, [r7, #8]
}
 80094d4:	bf00      	nop
 80094d6:	e7fe      	b.n	80094d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094d8:	4b1e      	ldr	r3, [pc, #120]	; (8009554 <xPortStartScheduler+0x134>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	4a1d      	ldr	r2, [pc, #116]	; (8009554 <xPortStartScheduler+0x134>)
 80094e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094e2:	4b1c      	ldr	r3, [pc, #112]	; (8009554 <xPortStartScheduler+0x134>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094ea:	4a1a      	ldr	r2, [pc, #104]	; (8009554 <xPortStartScheduler+0x134>)
 80094ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094f6:	4b18      	ldr	r3, [pc, #96]	; (8009558 <xPortStartScheduler+0x138>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a17      	ldr	r2, [pc, #92]	; (8009558 <xPortStartScheduler+0x138>)
 80094fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009502:	4b15      	ldr	r3, [pc, #84]	; (8009558 <xPortStartScheduler+0x138>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a14      	ldr	r2, [pc, #80]	; (8009558 <xPortStartScheduler+0x138>)
 8009508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800950c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800950e:	f000 f8dd 	bl	80096cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009512:	4b12      	ldr	r3, [pc, #72]	; (800955c <xPortStartScheduler+0x13c>)
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009518:	f000 f8fc 	bl	8009714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800951c:	4b10      	ldr	r3, [pc, #64]	; (8009560 <xPortStartScheduler+0x140>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a0f      	ldr	r2, [pc, #60]	; (8009560 <xPortStartScheduler+0x140>)
 8009522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009528:	f7ff ff66 	bl	80093f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800952c:	f7ff f82a 	bl	8008584 <vTaskSwitchContext>
	prvTaskExitError();
 8009530:	f7ff ff1c 	bl	800936c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	e000ed00 	.word	0xe000ed00
 8009544:	410fc271 	.word	0x410fc271
 8009548:	410fc270 	.word	0x410fc270
 800954c:	e000e400 	.word	0xe000e400
 8009550:	20001254 	.word	0x20001254
 8009554:	20001258 	.word	0x20001258
 8009558:	e000ed20 	.word	0xe000ed20
 800955c:	2000000c 	.word	0x2000000c
 8009560:	e000ef34 	.word	0xe000ef34

08009564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	607b      	str	r3, [r7, #4]
}
 800957c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800957e:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <vPortEnterCritical+0x58>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3301      	adds	r3, #1
 8009584:	4a0d      	ldr	r2, [pc, #52]	; (80095bc <vPortEnterCritical+0x58>)
 8009586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009588:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <vPortEnterCritical+0x58>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d10f      	bne.n	80095b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009590:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <vPortEnterCritical+0x5c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	603b      	str	r3, [r7, #0]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <vPortEnterCritical+0x4a>
	}
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	2000000c 	.word	0x2000000c
 80095c0:	e000ed04 	.word	0xe000ed04

080095c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095ca:	4b12      	ldr	r3, [pc, #72]	; (8009614 <vPortExitCritical+0x50>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <vPortExitCritical+0x24>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	607b      	str	r3, [r7, #4]
}
 80095e4:	bf00      	nop
 80095e6:	e7fe      	b.n	80095e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095e8:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <vPortExitCritical+0x50>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	4a09      	ldr	r2, [pc, #36]	; (8009614 <vPortExitCritical+0x50>)
 80095f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095f2:	4b08      	ldr	r3, [pc, #32]	; (8009614 <vPortExitCritical+0x50>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d105      	bne.n	8009606 <vPortExitCritical+0x42>
 80095fa:	2300      	movs	r3, #0
 80095fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	f383 8811 	msr	BASEPRI, r3
}
 8009604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009606:	bf00      	nop
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	2000000c 	.word	0x2000000c
	...

08009620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009620:	f3ef 8009 	mrs	r0, PSP
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	4b15      	ldr	r3, [pc, #84]	; (8009680 <pxCurrentTCBConst>)
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	f01e 0f10 	tst.w	lr, #16
 8009630:	bf08      	it	eq
 8009632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	6010      	str	r0, [r2, #0]
 800963c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009644:	f380 8811 	msr	BASEPRI, r0
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f7fe ff98 	bl	8008584 <vTaskSwitchContext>
 8009654:	f04f 0000 	mov.w	r0, #0
 8009658:	f380 8811 	msr	BASEPRI, r0
 800965c:	bc09      	pop	{r0, r3}
 800965e:	6819      	ldr	r1, [r3, #0]
 8009660:	6808      	ldr	r0, [r1, #0]
 8009662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009666:	f01e 0f10 	tst.w	lr, #16
 800966a:	bf08      	it	eq
 800966c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009670:	f380 8809 	msr	PSP, r0
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	f3af 8000 	nop.w

08009680 <pxCurrentTCBConst>:
 8009680:	20000c20 	.word	0x20000c20
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop

08009688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	607b      	str	r3, [r7, #4]
}
 80096a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80096a2:	f7fe feb5 	bl	8008410 <xTaskIncrementTick>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096ac:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <xPortSysTickHandler+0x40>)
 80096ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	2300      	movs	r3, #0
 80096b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	f383 8811 	msr	BASEPRI, r3
}
 80096be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096c0:	bf00      	nop
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	e000ed04 	.word	0xe000ed04

080096cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096cc:	b480      	push	{r7}
 80096ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096d0:	4b0b      	ldr	r3, [pc, #44]	; (8009700 <vPortSetupTimerInterrupt+0x34>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096d6:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <vPortSetupTimerInterrupt+0x38>)
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <vPortSetupTimerInterrupt+0x3c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a0a      	ldr	r2, [pc, #40]	; (800970c <vPortSetupTimerInterrupt+0x40>)
 80096e2:	fba2 2303 	umull	r2, r3, r2, r3
 80096e6:	099b      	lsrs	r3, r3, #6
 80096e8:	4a09      	ldr	r2, [pc, #36]	; (8009710 <vPortSetupTimerInterrupt+0x44>)
 80096ea:	3b01      	subs	r3, #1
 80096ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096ee:	4b04      	ldr	r3, [pc, #16]	; (8009700 <vPortSetupTimerInterrupt+0x34>)
 80096f0:	2207      	movs	r2, #7
 80096f2:	601a      	str	r2, [r3, #0]
}
 80096f4:	bf00      	nop
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	e000e010 	.word	0xe000e010
 8009704:	e000e018 	.word	0xe000e018
 8009708:	20000000 	.word	0x20000000
 800970c:	10624dd3 	.word	0x10624dd3
 8009710:	e000e014 	.word	0xe000e014

08009714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009724 <vPortEnableVFP+0x10>
 8009718:	6801      	ldr	r1, [r0, #0]
 800971a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800971e:	6001      	str	r1, [r0, #0]
 8009720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009722:	bf00      	nop
 8009724:	e000ed88 	.word	0xe000ed88

08009728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800972e:	f3ef 8305 	mrs	r3, IPSR
 8009732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b0f      	cmp	r3, #15
 8009738:	d914      	bls.n	8009764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800973a:	4a17      	ldr	r2, [pc, #92]	; (8009798 <vPortValidateInterruptPriority+0x70>)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009744:	4b15      	ldr	r3, [pc, #84]	; (800979c <vPortValidateInterruptPriority+0x74>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	7afa      	ldrb	r2, [r7, #11]
 800974a:	429a      	cmp	r2, r3
 800974c:	d20a      	bcs.n	8009764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	607b      	str	r3, [r7, #4]
}
 8009760:	bf00      	nop
 8009762:	e7fe      	b.n	8009762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009764:	4b0e      	ldr	r3, [pc, #56]	; (80097a0 <vPortValidateInterruptPriority+0x78>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800976c:	4b0d      	ldr	r3, [pc, #52]	; (80097a4 <vPortValidateInterruptPriority+0x7c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	429a      	cmp	r2, r3
 8009772:	d90a      	bls.n	800978a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	603b      	str	r3, [r7, #0]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <vPortValidateInterruptPriority+0x60>
	}
 800978a:	bf00      	nop
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	e000e3f0 	.word	0xe000e3f0
 800979c:	20001254 	.word	0x20001254
 80097a0:	e000ed0c 	.word	0xe000ed0c
 80097a4:	20001258 	.word	0x20001258

080097a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08a      	sub	sp, #40	; 0x28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097b4:	f7fe fd70 	bl	8008298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097b8:	4b5b      	ldr	r3, [pc, #364]	; (8009928 <pvPortMalloc+0x180>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097c0:	f000 f920 	bl	8009a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097c4:	4b59      	ldr	r3, [pc, #356]	; (800992c <pvPortMalloc+0x184>)
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f040 8093 	bne.w	80098f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d01d      	beq.n	8009814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097d8:	2208      	movs	r2, #8
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4413      	add	r3, r2
 80097de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d014      	beq.n	8009814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f023 0307 	bic.w	r3, r3, #7
 80097f0:	3308      	adds	r3, #8
 80097f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f003 0307 	and.w	r3, r3, #7
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00a      	beq.n	8009814 <pvPortMalloc+0x6c>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	617b      	str	r3, [r7, #20]
}
 8009810:	bf00      	nop
 8009812:	e7fe      	b.n	8009812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d06e      	beq.n	80098f8 <pvPortMalloc+0x150>
 800981a:	4b45      	ldr	r3, [pc, #276]	; (8009930 <pvPortMalloc+0x188>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	429a      	cmp	r2, r3
 8009822:	d869      	bhi.n	80098f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009824:	4b43      	ldr	r3, [pc, #268]	; (8009934 <pvPortMalloc+0x18c>)
 8009826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009828:	4b42      	ldr	r3, [pc, #264]	; (8009934 <pvPortMalloc+0x18c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800982e:	e004      	b.n	800983a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	429a      	cmp	r2, r3
 8009842:	d903      	bls.n	800984c <pvPortMalloc+0xa4>
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1f1      	bne.n	8009830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800984c:	4b36      	ldr	r3, [pc, #216]	; (8009928 <pvPortMalloc+0x180>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009852:	429a      	cmp	r2, r3
 8009854:	d050      	beq.n	80098f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2208      	movs	r2, #8
 800985c:	4413      	add	r3, r2
 800985e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	1ad2      	subs	r2, r2, r3
 8009870:	2308      	movs	r3, #8
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	429a      	cmp	r2, r3
 8009876:	d91f      	bls.n	80098b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4413      	add	r3, r2
 800987e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <pvPortMalloc+0xf8>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	613b      	str	r3, [r7, #16]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098b2:	69b8      	ldr	r0, [r7, #24]
 80098b4:	f000 f908 	bl	8009ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098b8:	4b1d      	ldr	r3, [pc, #116]	; (8009930 <pvPortMalloc+0x188>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	4a1b      	ldr	r2, [pc, #108]	; (8009930 <pvPortMalloc+0x188>)
 80098c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098c6:	4b1a      	ldr	r3, [pc, #104]	; (8009930 <pvPortMalloc+0x188>)
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	4b1b      	ldr	r3, [pc, #108]	; (8009938 <pvPortMalloc+0x190>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d203      	bcs.n	80098da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098d2:	4b17      	ldr	r3, [pc, #92]	; (8009930 <pvPortMalloc+0x188>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a18      	ldr	r2, [pc, #96]	; (8009938 <pvPortMalloc+0x190>)
 80098d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	4b13      	ldr	r3, [pc, #76]	; (800992c <pvPortMalloc+0x184>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	431a      	orrs	r2, r3
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <pvPortMalloc+0x194>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	4a11      	ldr	r2, [pc, #68]	; (800993c <pvPortMalloc+0x194>)
 80098f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098f8:	f7fe fcdc 	bl	80082b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	f003 0307 	and.w	r3, r3, #7
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00a      	beq.n	800991c <pvPortMalloc+0x174>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60fb      	str	r3, [r7, #12]
}
 8009918:	bf00      	nop
 800991a:	e7fe      	b.n	800991a <pvPortMalloc+0x172>
	return pvReturn;
 800991c:	69fb      	ldr	r3, [r7, #28]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3728      	adds	r7, #40	; 0x28
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20001e1c 	.word	0x20001e1c
 800992c:	20001e30 	.word	0x20001e30
 8009930:	20001e20 	.word	0x20001e20
 8009934:	20001e14 	.word	0x20001e14
 8009938:	20001e24 	.word	0x20001e24
 800993c:	20001e28 	.word	0x20001e28

08009940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d04d      	beq.n	80099ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009952:	2308      	movs	r3, #8
 8009954:	425b      	negs	r3, r3
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	4413      	add	r3, r2
 800995a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	4b24      	ldr	r3, [pc, #144]	; (80099f8 <vPortFree+0xb8>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4013      	ands	r3, r2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10a      	bne.n	8009984 <vPortFree+0x44>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	60fb      	str	r3, [r7, #12]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00a      	beq.n	80099a2 <vPortFree+0x62>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	60bb      	str	r3, [r7, #8]
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	4b14      	ldr	r3, [pc, #80]	; (80099f8 <vPortFree+0xb8>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4013      	ands	r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d01e      	beq.n	80099ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d11a      	bne.n	80099ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <vPortFree+0xb8>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	43db      	mvns	r3, r3
 80099c2:	401a      	ands	r2, r3
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099c8:	f7fe fc66 	bl	8008298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	4b0a      	ldr	r3, [pc, #40]	; (80099fc <vPortFree+0xbc>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4413      	add	r3, r2
 80099d6:	4a09      	ldr	r2, [pc, #36]	; (80099fc <vPortFree+0xbc>)
 80099d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099da:	6938      	ldr	r0, [r7, #16]
 80099dc:	f000 f874 	bl	8009ac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <vPortFree+0xc0>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3301      	adds	r3, #1
 80099e6:	4a06      	ldr	r2, [pc, #24]	; (8009a00 <vPortFree+0xc0>)
 80099e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099ea:	f7fe fc63 	bl	80082b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099ee:	bf00      	nop
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20001e30 	.word	0x20001e30
 80099fc:	20001e20 	.word	0x20001e20
 8009a00:	20001e2c 	.word	0x20001e2c

08009a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a10:	4b27      	ldr	r3, [pc, #156]	; (8009ab0 <prvHeapInit+0xac>)
 8009a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f003 0307 	and.w	r3, r3, #7
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00c      	beq.n	8009a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3307      	adds	r3, #7
 8009a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f023 0307 	bic.w	r3, r3, #7
 8009a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	4a1f      	ldr	r2, [pc, #124]	; (8009ab0 <prvHeapInit+0xac>)
 8009a34:	4413      	add	r3, r2
 8009a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a3c:	4a1d      	ldr	r2, [pc, #116]	; (8009ab4 <prvHeapInit+0xb0>)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a42:	4b1c      	ldr	r3, [pc, #112]	; (8009ab4 <prvHeapInit+0xb0>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a50:	2208      	movs	r2, #8
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	1a9b      	subs	r3, r3, r2
 8009a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f023 0307 	bic.w	r3, r3, #7
 8009a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4a15      	ldr	r2, [pc, #84]	; (8009ab8 <prvHeapInit+0xb4>)
 8009a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a66:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <prvHeapInit+0xb4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a6e:	4b12      	ldr	r3, [pc, #72]	; (8009ab8 <prvHeapInit+0xb4>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	1ad2      	subs	r2, r2, r3
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a84:	4b0c      	ldr	r3, [pc, #48]	; (8009ab8 <prvHeapInit+0xb4>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	4a0a      	ldr	r2, [pc, #40]	; (8009abc <prvHeapInit+0xb8>)
 8009a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	4a09      	ldr	r2, [pc, #36]	; (8009ac0 <prvHeapInit+0xbc>)
 8009a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a9c:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <prvHeapInit+0xc0>)
 8009a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009aa2:	601a      	str	r2, [r3, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	2000125c 	.word	0x2000125c
 8009ab4:	20001e14 	.word	0x20001e14
 8009ab8:	20001e1c 	.word	0x20001e1c
 8009abc:	20001e24 	.word	0x20001e24
 8009ac0:	20001e20 	.word	0x20001e20
 8009ac4:	20001e30 	.word	0x20001e30

08009ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ad0:	4b28      	ldr	r3, [pc, #160]	; (8009b74 <prvInsertBlockIntoFreeList+0xac>)
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	e002      	b.n	8009adc <prvInsertBlockIntoFreeList+0x14>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d8f7      	bhi.n	8009ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4413      	add	r3, r2
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d108      	bne.n	8009b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	441a      	add	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	441a      	add	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d118      	bne.n	8009b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	4b15      	ldr	r3, [pc, #84]	; (8009b78 <prvInsertBlockIntoFreeList+0xb0>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d00d      	beq.n	8009b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	441a      	add	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	e008      	b.n	8009b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b46:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <prvInsertBlockIntoFreeList+0xb0>)
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	e003      	b.n	8009b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d002      	beq.n	8009b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b66:	bf00      	nop
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20001e14 	.word	0x20001e14
 8009b78:	20001e1c 	.word	0x20001e1c

08009b7c <__errno>:
 8009b7c:	4b01      	ldr	r3, [pc, #4]	; (8009b84 <__errno+0x8>)
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	20000010 	.word	0x20000010

08009b88 <std>:
 8009b88:	2300      	movs	r3, #0
 8009b8a:	b510      	push	{r4, lr}
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b96:	6083      	str	r3, [r0, #8]
 8009b98:	8181      	strh	r1, [r0, #12]
 8009b9a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b9c:	81c2      	strh	r2, [r0, #14]
 8009b9e:	6183      	str	r3, [r0, #24]
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	2208      	movs	r2, #8
 8009ba4:	305c      	adds	r0, #92	; 0x5c
 8009ba6:	f000 f91a 	bl	8009dde <memset>
 8009baa:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <std+0x38>)
 8009bac:	6263      	str	r3, [r4, #36]	; 0x24
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <std+0x3c>)
 8009bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bb2:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <std+0x40>)
 8009bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bb6:	4b05      	ldr	r3, [pc, #20]	; (8009bcc <std+0x44>)
 8009bb8:	6224      	str	r4, [r4, #32]
 8009bba:	6323      	str	r3, [r4, #48]	; 0x30
 8009bbc:	bd10      	pop	{r4, pc}
 8009bbe:	bf00      	nop
 8009bc0:	0800ae39 	.word	0x0800ae39
 8009bc4:	0800ae5b 	.word	0x0800ae5b
 8009bc8:	0800ae93 	.word	0x0800ae93
 8009bcc:	0800aeb7 	.word	0x0800aeb7

08009bd0 <_cleanup_r>:
 8009bd0:	4901      	ldr	r1, [pc, #4]	; (8009bd8 <_cleanup_r+0x8>)
 8009bd2:	f000 b8af 	b.w	8009d34 <_fwalk_reent>
 8009bd6:	bf00      	nop
 8009bd8:	0800cbe1 	.word	0x0800cbe1

08009bdc <__sfmoreglue>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	2268      	movs	r2, #104	; 0x68
 8009be0:	1e4d      	subs	r5, r1, #1
 8009be2:	4355      	muls	r5, r2
 8009be4:	460e      	mov	r6, r1
 8009be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bea:	f000 f921 	bl	8009e30 <_malloc_r>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	b140      	cbz	r0, 8009c04 <__sfmoreglue+0x28>
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8009bf8:	300c      	adds	r0, #12
 8009bfa:	60a0      	str	r0, [r4, #8]
 8009bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c00:	f000 f8ed 	bl	8009dde <memset>
 8009c04:	4620      	mov	r0, r4
 8009c06:	bd70      	pop	{r4, r5, r6, pc}

08009c08 <__sfp_lock_acquire>:
 8009c08:	4801      	ldr	r0, [pc, #4]	; (8009c10 <__sfp_lock_acquire+0x8>)
 8009c0a:	f000 b8d8 	b.w	8009dbe <__retarget_lock_acquire_recursive>
 8009c0e:	bf00      	nop
 8009c10:	20001e35 	.word	0x20001e35

08009c14 <__sfp_lock_release>:
 8009c14:	4801      	ldr	r0, [pc, #4]	; (8009c1c <__sfp_lock_release+0x8>)
 8009c16:	f000 b8d3 	b.w	8009dc0 <__retarget_lock_release_recursive>
 8009c1a:	bf00      	nop
 8009c1c:	20001e35 	.word	0x20001e35

08009c20 <__sinit_lock_acquire>:
 8009c20:	4801      	ldr	r0, [pc, #4]	; (8009c28 <__sinit_lock_acquire+0x8>)
 8009c22:	f000 b8cc 	b.w	8009dbe <__retarget_lock_acquire_recursive>
 8009c26:	bf00      	nop
 8009c28:	20001e36 	.word	0x20001e36

08009c2c <__sinit_lock_release>:
 8009c2c:	4801      	ldr	r0, [pc, #4]	; (8009c34 <__sinit_lock_release+0x8>)
 8009c2e:	f000 b8c7 	b.w	8009dc0 <__retarget_lock_release_recursive>
 8009c32:	bf00      	nop
 8009c34:	20001e36 	.word	0x20001e36

08009c38 <__sinit>:
 8009c38:	b510      	push	{r4, lr}
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	f7ff fff0 	bl	8009c20 <__sinit_lock_acquire>
 8009c40:	69a3      	ldr	r3, [r4, #24]
 8009c42:	b11b      	cbz	r3, 8009c4c <__sinit+0x14>
 8009c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c48:	f7ff bff0 	b.w	8009c2c <__sinit_lock_release>
 8009c4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c50:	6523      	str	r3, [r4, #80]	; 0x50
 8009c52:	4b13      	ldr	r3, [pc, #76]	; (8009ca0 <__sinit+0x68>)
 8009c54:	4a13      	ldr	r2, [pc, #76]	; (8009ca4 <__sinit+0x6c>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c5a:	42a3      	cmp	r3, r4
 8009c5c:	bf04      	itt	eq
 8009c5e:	2301      	moveq	r3, #1
 8009c60:	61a3      	streq	r3, [r4, #24]
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 f820 	bl	8009ca8 <__sfp>
 8009c68:	6060      	str	r0, [r4, #4]
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 f81c 	bl	8009ca8 <__sfp>
 8009c70:	60a0      	str	r0, [r4, #8]
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 f818 	bl	8009ca8 <__sfp>
 8009c78:	2200      	movs	r2, #0
 8009c7a:	60e0      	str	r0, [r4, #12]
 8009c7c:	2104      	movs	r1, #4
 8009c7e:	6860      	ldr	r0, [r4, #4]
 8009c80:	f7ff ff82 	bl	8009b88 <std>
 8009c84:	68a0      	ldr	r0, [r4, #8]
 8009c86:	2201      	movs	r2, #1
 8009c88:	2109      	movs	r1, #9
 8009c8a:	f7ff ff7d 	bl	8009b88 <std>
 8009c8e:	68e0      	ldr	r0, [r4, #12]
 8009c90:	2202      	movs	r2, #2
 8009c92:	2112      	movs	r1, #18
 8009c94:	f7ff ff78 	bl	8009b88 <std>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	61a3      	str	r3, [r4, #24]
 8009c9c:	e7d2      	b.n	8009c44 <__sinit+0xc>
 8009c9e:	bf00      	nop
 8009ca0:	0800e87c 	.word	0x0800e87c
 8009ca4:	08009bd1 	.word	0x08009bd1

08009ca8 <__sfp>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	4607      	mov	r7, r0
 8009cac:	f7ff ffac 	bl	8009c08 <__sfp_lock_acquire>
 8009cb0:	4b1e      	ldr	r3, [pc, #120]	; (8009d2c <__sfp+0x84>)
 8009cb2:	681e      	ldr	r6, [r3, #0]
 8009cb4:	69b3      	ldr	r3, [r6, #24]
 8009cb6:	b913      	cbnz	r3, 8009cbe <__sfp+0x16>
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f7ff ffbd 	bl	8009c38 <__sinit>
 8009cbe:	3648      	adds	r6, #72	; 0x48
 8009cc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	d503      	bpl.n	8009cd0 <__sfp+0x28>
 8009cc8:	6833      	ldr	r3, [r6, #0]
 8009cca:	b30b      	cbz	r3, 8009d10 <__sfp+0x68>
 8009ccc:	6836      	ldr	r6, [r6, #0]
 8009cce:	e7f7      	b.n	8009cc0 <__sfp+0x18>
 8009cd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cd4:	b9d5      	cbnz	r5, 8009d0c <__sfp+0x64>
 8009cd6:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <__sfp+0x88>)
 8009cd8:	60e3      	str	r3, [r4, #12]
 8009cda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cde:	6665      	str	r5, [r4, #100]	; 0x64
 8009ce0:	f000 f86c 	bl	8009dbc <__retarget_lock_init_recursive>
 8009ce4:	f7ff ff96 	bl	8009c14 <__sfp_lock_release>
 8009ce8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009cf0:	6025      	str	r5, [r4, #0]
 8009cf2:	61a5      	str	r5, [r4, #24]
 8009cf4:	2208      	movs	r2, #8
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cfc:	f000 f86f 	bl	8009dde <memset>
 8009d00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d08:	4620      	mov	r0, r4
 8009d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d0c:	3468      	adds	r4, #104	; 0x68
 8009d0e:	e7d9      	b.n	8009cc4 <__sfp+0x1c>
 8009d10:	2104      	movs	r1, #4
 8009d12:	4638      	mov	r0, r7
 8009d14:	f7ff ff62 	bl	8009bdc <__sfmoreglue>
 8009d18:	4604      	mov	r4, r0
 8009d1a:	6030      	str	r0, [r6, #0]
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d1d5      	bne.n	8009ccc <__sfp+0x24>
 8009d20:	f7ff ff78 	bl	8009c14 <__sfp_lock_release>
 8009d24:	230c      	movs	r3, #12
 8009d26:	603b      	str	r3, [r7, #0]
 8009d28:	e7ee      	b.n	8009d08 <__sfp+0x60>
 8009d2a:	bf00      	nop
 8009d2c:	0800e87c 	.word	0x0800e87c
 8009d30:	ffff0001 	.word	0xffff0001

08009d34 <_fwalk_reent>:
 8009d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d38:	4606      	mov	r6, r0
 8009d3a:	4688      	mov	r8, r1
 8009d3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d40:	2700      	movs	r7, #0
 8009d42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d46:	f1b9 0901 	subs.w	r9, r9, #1
 8009d4a:	d505      	bpl.n	8009d58 <_fwalk_reent+0x24>
 8009d4c:	6824      	ldr	r4, [r4, #0]
 8009d4e:	2c00      	cmp	r4, #0
 8009d50:	d1f7      	bne.n	8009d42 <_fwalk_reent+0xe>
 8009d52:	4638      	mov	r0, r7
 8009d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d58:	89ab      	ldrh	r3, [r5, #12]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	d907      	bls.n	8009d6e <_fwalk_reent+0x3a>
 8009d5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d62:	3301      	adds	r3, #1
 8009d64:	d003      	beq.n	8009d6e <_fwalk_reent+0x3a>
 8009d66:	4629      	mov	r1, r5
 8009d68:	4630      	mov	r0, r6
 8009d6a:	47c0      	blx	r8
 8009d6c:	4307      	orrs	r7, r0
 8009d6e:	3568      	adds	r5, #104	; 0x68
 8009d70:	e7e9      	b.n	8009d46 <_fwalk_reent+0x12>
	...

08009d74 <__libc_init_array>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	4d0d      	ldr	r5, [pc, #52]	; (8009dac <__libc_init_array+0x38>)
 8009d78:	4c0d      	ldr	r4, [pc, #52]	; (8009db0 <__libc_init_array+0x3c>)
 8009d7a:	1b64      	subs	r4, r4, r5
 8009d7c:	10a4      	asrs	r4, r4, #2
 8009d7e:	2600      	movs	r6, #0
 8009d80:	42a6      	cmp	r6, r4
 8009d82:	d109      	bne.n	8009d98 <__libc_init_array+0x24>
 8009d84:	4d0b      	ldr	r5, [pc, #44]	; (8009db4 <__libc_init_array+0x40>)
 8009d86:	4c0c      	ldr	r4, [pc, #48]	; (8009db8 <__libc_init_array+0x44>)
 8009d88:	f004 fc7c 	bl	800e684 <_init>
 8009d8c:	1b64      	subs	r4, r4, r5
 8009d8e:	10a4      	asrs	r4, r4, #2
 8009d90:	2600      	movs	r6, #0
 8009d92:	42a6      	cmp	r6, r4
 8009d94:	d105      	bne.n	8009da2 <__libc_init_array+0x2e>
 8009d96:	bd70      	pop	{r4, r5, r6, pc}
 8009d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d9c:	4798      	blx	r3
 8009d9e:	3601      	adds	r6, #1
 8009da0:	e7ee      	b.n	8009d80 <__libc_init_array+0xc>
 8009da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da6:	4798      	blx	r3
 8009da8:	3601      	adds	r6, #1
 8009daa:	e7f2      	b.n	8009d92 <__libc_init_array+0x1e>
 8009dac:	0800eccc 	.word	0x0800eccc
 8009db0:	0800eccc 	.word	0x0800eccc
 8009db4:	0800eccc 	.word	0x0800eccc
 8009db8:	0800ecd0 	.word	0x0800ecd0

08009dbc <__retarget_lock_init_recursive>:
 8009dbc:	4770      	bx	lr

08009dbe <__retarget_lock_acquire_recursive>:
 8009dbe:	4770      	bx	lr

08009dc0 <__retarget_lock_release_recursive>:
 8009dc0:	4770      	bx	lr

08009dc2 <memcpy>:
 8009dc2:	440a      	add	r2, r1
 8009dc4:	4291      	cmp	r1, r2
 8009dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009dca:	d100      	bne.n	8009dce <memcpy+0xc>
 8009dcc:	4770      	bx	lr
 8009dce:	b510      	push	{r4, lr}
 8009dd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dd8:	4291      	cmp	r1, r2
 8009dda:	d1f9      	bne.n	8009dd0 <memcpy+0xe>
 8009ddc:	bd10      	pop	{r4, pc}

08009dde <memset>:
 8009dde:	4402      	add	r2, r0
 8009de0:	4603      	mov	r3, r0
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d100      	bne.n	8009de8 <memset+0xa>
 8009de6:	4770      	bx	lr
 8009de8:	f803 1b01 	strb.w	r1, [r3], #1
 8009dec:	e7f9      	b.n	8009de2 <memset+0x4>
	...

08009df0 <sbrk_aligned>:
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	4e0e      	ldr	r6, [pc, #56]	; (8009e2c <sbrk_aligned+0x3c>)
 8009df4:	460c      	mov	r4, r1
 8009df6:	6831      	ldr	r1, [r6, #0]
 8009df8:	4605      	mov	r5, r0
 8009dfa:	b911      	cbnz	r1, 8009e02 <sbrk_aligned+0x12>
 8009dfc:	f000 ffe6 	bl	800adcc <_sbrk_r>
 8009e00:	6030      	str	r0, [r6, #0]
 8009e02:	4621      	mov	r1, r4
 8009e04:	4628      	mov	r0, r5
 8009e06:	f000 ffe1 	bl	800adcc <_sbrk_r>
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	d00a      	beq.n	8009e24 <sbrk_aligned+0x34>
 8009e0e:	1cc4      	adds	r4, r0, #3
 8009e10:	f024 0403 	bic.w	r4, r4, #3
 8009e14:	42a0      	cmp	r0, r4
 8009e16:	d007      	beq.n	8009e28 <sbrk_aligned+0x38>
 8009e18:	1a21      	subs	r1, r4, r0
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f000 ffd6 	bl	800adcc <_sbrk_r>
 8009e20:	3001      	adds	r0, #1
 8009e22:	d101      	bne.n	8009e28 <sbrk_aligned+0x38>
 8009e24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009e28:	4620      	mov	r0, r4
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	20001e3c 	.word	0x20001e3c

08009e30 <_malloc_r>:
 8009e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e34:	1ccd      	adds	r5, r1, #3
 8009e36:	f025 0503 	bic.w	r5, r5, #3
 8009e3a:	3508      	adds	r5, #8
 8009e3c:	2d0c      	cmp	r5, #12
 8009e3e:	bf38      	it	cc
 8009e40:	250c      	movcc	r5, #12
 8009e42:	2d00      	cmp	r5, #0
 8009e44:	4607      	mov	r7, r0
 8009e46:	db01      	blt.n	8009e4c <_malloc_r+0x1c>
 8009e48:	42a9      	cmp	r1, r5
 8009e4a:	d905      	bls.n	8009e58 <_malloc_r+0x28>
 8009e4c:	230c      	movs	r3, #12
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	2600      	movs	r6, #0
 8009e52:	4630      	mov	r0, r6
 8009e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e58:	4e2e      	ldr	r6, [pc, #184]	; (8009f14 <_malloc_r+0xe4>)
 8009e5a:	f003 fb03 	bl	800d464 <__malloc_lock>
 8009e5e:	6833      	ldr	r3, [r6, #0]
 8009e60:	461c      	mov	r4, r3
 8009e62:	bb34      	cbnz	r4, 8009eb2 <_malloc_r+0x82>
 8009e64:	4629      	mov	r1, r5
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7ff ffc2 	bl	8009df0 <sbrk_aligned>
 8009e6c:	1c43      	adds	r3, r0, #1
 8009e6e:	4604      	mov	r4, r0
 8009e70:	d14d      	bne.n	8009f0e <_malloc_r+0xde>
 8009e72:	6834      	ldr	r4, [r6, #0]
 8009e74:	4626      	mov	r6, r4
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	d140      	bne.n	8009efc <_malloc_r+0xcc>
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	4631      	mov	r1, r6
 8009e7e:	4638      	mov	r0, r7
 8009e80:	eb04 0803 	add.w	r8, r4, r3
 8009e84:	f000 ffa2 	bl	800adcc <_sbrk_r>
 8009e88:	4580      	cmp	r8, r0
 8009e8a:	d13a      	bne.n	8009f02 <_malloc_r+0xd2>
 8009e8c:	6821      	ldr	r1, [r4, #0]
 8009e8e:	3503      	adds	r5, #3
 8009e90:	1a6d      	subs	r5, r5, r1
 8009e92:	f025 0503 	bic.w	r5, r5, #3
 8009e96:	3508      	adds	r5, #8
 8009e98:	2d0c      	cmp	r5, #12
 8009e9a:	bf38      	it	cc
 8009e9c:	250c      	movcc	r5, #12
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7ff ffa5 	bl	8009df0 <sbrk_aligned>
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	d02b      	beq.n	8009f02 <_malloc_r+0xd2>
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	442b      	add	r3, r5
 8009eae:	6023      	str	r3, [r4, #0]
 8009eb0:	e00e      	b.n	8009ed0 <_malloc_r+0xa0>
 8009eb2:	6822      	ldr	r2, [r4, #0]
 8009eb4:	1b52      	subs	r2, r2, r5
 8009eb6:	d41e      	bmi.n	8009ef6 <_malloc_r+0xc6>
 8009eb8:	2a0b      	cmp	r2, #11
 8009eba:	d916      	bls.n	8009eea <_malloc_r+0xba>
 8009ebc:	1961      	adds	r1, r4, r5
 8009ebe:	42a3      	cmp	r3, r4
 8009ec0:	6025      	str	r5, [r4, #0]
 8009ec2:	bf18      	it	ne
 8009ec4:	6059      	strne	r1, [r3, #4]
 8009ec6:	6863      	ldr	r3, [r4, #4]
 8009ec8:	bf08      	it	eq
 8009eca:	6031      	streq	r1, [r6, #0]
 8009ecc:	5162      	str	r2, [r4, r5]
 8009ece:	604b      	str	r3, [r1, #4]
 8009ed0:	4638      	mov	r0, r7
 8009ed2:	f104 060b 	add.w	r6, r4, #11
 8009ed6:	f003 facb 	bl	800d470 <__malloc_unlock>
 8009eda:	f026 0607 	bic.w	r6, r6, #7
 8009ede:	1d23      	adds	r3, r4, #4
 8009ee0:	1af2      	subs	r2, r6, r3
 8009ee2:	d0b6      	beq.n	8009e52 <_malloc_r+0x22>
 8009ee4:	1b9b      	subs	r3, r3, r6
 8009ee6:	50a3      	str	r3, [r4, r2]
 8009ee8:	e7b3      	b.n	8009e52 <_malloc_r+0x22>
 8009eea:	6862      	ldr	r2, [r4, #4]
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	bf0c      	ite	eq
 8009ef0:	6032      	streq	r2, [r6, #0]
 8009ef2:	605a      	strne	r2, [r3, #4]
 8009ef4:	e7ec      	b.n	8009ed0 <_malloc_r+0xa0>
 8009ef6:	4623      	mov	r3, r4
 8009ef8:	6864      	ldr	r4, [r4, #4]
 8009efa:	e7b2      	b.n	8009e62 <_malloc_r+0x32>
 8009efc:	4634      	mov	r4, r6
 8009efe:	6876      	ldr	r6, [r6, #4]
 8009f00:	e7b9      	b.n	8009e76 <_malloc_r+0x46>
 8009f02:	230c      	movs	r3, #12
 8009f04:	603b      	str	r3, [r7, #0]
 8009f06:	4638      	mov	r0, r7
 8009f08:	f003 fab2 	bl	800d470 <__malloc_unlock>
 8009f0c:	e7a1      	b.n	8009e52 <_malloc_r+0x22>
 8009f0e:	6025      	str	r5, [r4, #0]
 8009f10:	e7de      	b.n	8009ed0 <_malloc_r+0xa0>
 8009f12:	bf00      	nop
 8009f14:	20001e38 	.word	0x20001e38

08009f18 <__cvt>:
 8009f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	ec55 4b10 	vmov	r4, r5, d0
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	460e      	mov	r6, r1
 8009f24:	4619      	mov	r1, r3
 8009f26:	462b      	mov	r3, r5
 8009f28:	bfbb      	ittet	lt
 8009f2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f2e:	461d      	movlt	r5, r3
 8009f30:	2300      	movge	r3, #0
 8009f32:	232d      	movlt	r3, #45	; 0x2d
 8009f34:	700b      	strb	r3, [r1, #0]
 8009f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f3c:	4691      	mov	r9, r2
 8009f3e:	f023 0820 	bic.w	r8, r3, #32
 8009f42:	bfbc      	itt	lt
 8009f44:	4622      	movlt	r2, r4
 8009f46:	4614      	movlt	r4, r2
 8009f48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f4c:	d005      	beq.n	8009f5a <__cvt+0x42>
 8009f4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f52:	d100      	bne.n	8009f56 <__cvt+0x3e>
 8009f54:	3601      	adds	r6, #1
 8009f56:	2102      	movs	r1, #2
 8009f58:	e000      	b.n	8009f5c <__cvt+0x44>
 8009f5a:	2103      	movs	r1, #3
 8009f5c:	ab03      	add	r3, sp, #12
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	ab02      	add	r3, sp, #8
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	ec45 4b10 	vmov	d0, r4, r5
 8009f68:	4653      	mov	r3, sl
 8009f6a:	4632      	mov	r2, r6
 8009f6c:	f001 ffc4 	bl	800bef8 <_dtoa_r>
 8009f70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f74:	4607      	mov	r7, r0
 8009f76:	d102      	bne.n	8009f7e <__cvt+0x66>
 8009f78:	f019 0f01 	tst.w	r9, #1
 8009f7c:	d022      	beq.n	8009fc4 <__cvt+0xac>
 8009f7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f82:	eb07 0906 	add.w	r9, r7, r6
 8009f86:	d110      	bne.n	8009faa <__cvt+0x92>
 8009f88:	783b      	ldrb	r3, [r7, #0]
 8009f8a:	2b30      	cmp	r3, #48	; 0x30
 8009f8c:	d10a      	bne.n	8009fa4 <__cvt+0x8c>
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2300      	movs	r3, #0
 8009f92:	4620      	mov	r0, r4
 8009f94:	4629      	mov	r1, r5
 8009f96:	f7f6 fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f9a:	b918      	cbnz	r0, 8009fa4 <__cvt+0x8c>
 8009f9c:	f1c6 0601 	rsb	r6, r6, #1
 8009fa0:	f8ca 6000 	str.w	r6, [sl]
 8009fa4:	f8da 3000 	ldr.w	r3, [sl]
 8009fa8:	4499      	add	r9, r3
 8009faa:	2200      	movs	r2, #0
 8009fac:	2300      	movs	r3, #0
 8009fae:	4620      	mov	r0, r4
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	f7f6 fd89 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fb6:	b108      	cbz	r0, 8009fbc <__cvt+0xa4>
 8009fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fbc:	2230      	movs	r2, #48	; 0x30
 8009fbe:	9b03      	ldr	r3, [sp, #12]
 8009fc0:	454b      	cmp	r3, r9
 8009fc2:	d307      	bcc.n	8009fd4 <__cvt+0xbc>
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fc8:	1bdb      	subs	r3, r3, r7
 8009fca:	4638      	mov	r0, r7
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	b004      	add	sp, #16
 8009fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd4:	1c59      	adds	r1, r3, #1
 8009fd6:	9103      	str	r1, [sp, #12]
 8009fd8:	701a      	strb	r2, [r3, #0]
 8009fda:	e7f0      	b.n	8009fbe <__cvt+0xa6>

08009fdc <__exponent>:
 8009fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fde:	4603      	mov	r3, r0
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	bfb8      	it	lt
 8009fe4:	4249      	neglt	r1, r1
 8009fe6:	f803 2b02 	strb.w	r2, [r3], #2
 8009fea:	bfb4      	ite	lt
 8009fec:	222d      	movlt	r2, #45	; 0x2d
 8009fee:	222b      	movge	r2, #43	; 0x2b
 8009ff0:	2909      	cmp	r1, #9
 8009ff2:	7042      	strb	r2, [r0, #1]
 8009ff4:	dd2a      	ble.n	800a04c <__exponent+0x70>
 8009ff6:	f10d 0407 	add.w	r4, sp, #7
 8009ffa:	46a4      	mov	ip, r4
 8009ffc:	270a      	movs	r7, #10
 8009ffe:	46a6      	mov	lr, r4
 800a000:	460a      	mov	r2, r1
 800a002:	fb91 f6f7 	sdiv	r6, r1, r7
 800a006:	fb07 1516 	mls	r5, r7, r6, r1
 800a00a:	3530      	adds	r5, #48	; 0x30
 800a00c:	2a63      	cmp	r2, #99	; 0x63
 800a00e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a012:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a016:	4631      	mov	r1, r6
 800a018:	dcf1      	bgt.n	8009ffe <__exponent+0x22>
 800a01a:	3130      	adds	r1, #48	; 0x30
 800a01c:	f1ae 0502 	sub.w	r5, lr, #2
 800a020:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a024:	1c44      	adds	r4, r0, #1
 800a026:	4629      	mov	r1, r5
 800a028:	4561      	cmp	r1, ip
 800a02a:	d30a      	bcc.n	800a042 <__exponent+0x66>
 800a02c:	f10d 0209 	add.w	r2, sp, #9
 800a030:	eba2 020e 	sub.w	r2, r2, lr
 800a034:	4565      	cmp	r5, ip
 800a036:	bf88      	it	hi
 800a038:	2200      	movhi	r2, #0
 800a03a:	4413      	add	r3, r2
 800a03c:	1a18      	subs	r0, r3, r0
 800a03e:	b003      	add	sp, #12
 800a040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a042:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a046:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a04a:	e7ed      	b.n	800a028 <__exponent+0x4c>
 800a04c:	2330      	movs	r3, #48	; 0x30
 800a04e:	3130      	adds	r1, #48	; 0x30
 800a050:	7083      	strb	r3, [r0, #2]
 800a052:	70c1      	strb	r1, [r0, #3]
 800a054:	1d03      	adds	r3, r0, #4
 800a056:	e7f1      	b.n	800a03c <__exponent+0x60>

0800a058 <_printf_float>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	ed2d 8b02 	vpush	{d8}
 800a060:	b08d      	sub	sp, #52	; 0x34
 800a062:	460c      	mov	r4, r1
 800a064:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a068:	4616      	mov	r6, r2
 800a06a:	461f      	mov	r7, r3
 800a06c:	4605      	mov	r5, r0
 800a06e:	f003 f963 	bl	800d338 <_localeconv_r>
 800a072:	f8d0 a000 	ldr.w	sl, [r0]
 800a076:	4650      	mov	r0, sl
 800a078:	f7f6 f8aa 	bl	80001d0 <strlen>
 800a07c:	2300      	movs	r3, #0
 800a07e:	930a      	str	r3, [sp, #40]	; 0x28
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	9305      	str	r3, [sp, #20]
 800a084:	f8d8 3000 	ldr.w	r3, [r8]
 800a088:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a08c:	3307      	adds	r3, #7
 800a08e:	f023 0307 	bic.w	r3, r3, #7
 800a092:	f103 0208 	add.w	r2, r3, #8
 800a096:	f8c8 2000 	str.w	r2, [r8]
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a0a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a0a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0aa:	9307      	str	r3, [sp, #28]
 800a0ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0b0:	ee08 0a10 	vmov	s16, r0
 800a0b4:	4b9f      	ldr	r3, [pc, #636]	; (800a334 <_printf_float+0x2dc>)
 800a0b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0be:	f7f6 fd35 	bl	8000b2c <__aeabi_dcmpun>
 800a0c2:	bb88      	cbnz	r0, 800a128 <_printf_float+0xd0>
 800a0c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0c8:	4b9a      	ldr	r3, [pc, #616]	; (800a334 <_printf_float+0x2dc>)
 800a0ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0ce:	f7f6 fd0f 	bl	8000af0 <__aeabi_dcmple>
 800a0d2:	bb48      	cbnz	r0, 800a128 <_printf_float+0xd0>
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	4640      	mov	r0, r8
 800a0da:	4649      	mov	r1, r9
 800a0dc:	f7f6 fcfe 	bl	8000adc <__aeabi_dcmplt>
 800a0e0:	b110      	cbz	r0, 800a0e8 <_printf_float+0x90>
 800a0e2:	232d      	movs	r3, #45	; 0x2d
 800a0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0e8:	4b93      	ldr	r3, [pc, #588]	; (800a338 <_printf_float+0x2e0>)
 800a0ea:	4894      	ldr	r0, [pc, #592]	; (800a33c <_printf_float+0x2e4>)
 800a0ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a0f0:	bf94      	ite	ls
 800a0f2:	4698      	movls	r8, r3
 800a0f4:	4680      	movhi	r8, r0
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	6123      	str	r3, [r4, #16]
 800a0fa:	9b05      	ldr	r3, [sp, #20]
 800a0fc:	f023 0204 	bic.w	r2, r3, #4
 800a100:	6022      	str	r2, [r4, #0]
 800a102:	f04f 0900 	mov.w	r9, #0
 800a106:	9700      	str	r7, [sp, #0]
 800a108:	4633      	mov	r3, r6
 800a10a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a10c:	4621      	mov	r1, r4
 800a10e:	4628      	mov	r0, r5
 800a110:	f000 f9d8 	bl	800a4c4 <_printf_common>
 800a114:	3001      	adds	r0, #1
 800a116:	f040 8090 	bne.w	800a23a <_printf_float+0x1e2>
 800a11a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a11e:	b00d      	add	sp, #52	; 0x34
 800a120:	ecbd 8b02 	vpop	{d8}
 800a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a128:	4642      	mov	r2, r8
 800a12a:	464b      	mov	r3, r9
 800a12c:	4640      	mov	r0, r8
 800a12e:	4649      	mov	r1, r9
 800a130:	f7f6 fcfc 	bl	8000b2c <__aeabi_dcmpun>
 800a134:	b140      	cbz	r0, 800a148 <_printf_float+0xf0>
 800a136:	464b      	mov	r3, r9
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bfbc      	itt	lt
 800a13c:	232d      	movlt	r3, #45	; 0x2d
 800a13e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a142:	487f      	ldr	r0, [pc, #508]	; (800a340 <_printf_float+0x2e8>)
 800a144:	4b7f      	ldr	r3, [pc, #508]	; (800a344 <_printf_float+0x2ec>)
 800a146:	e7d1      	b.n	800a0ec <_printf_float+0x94>
 800a148:	6863      	ldr	r3, [r4, #4]
 800a14a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a14e:	9206      	str	r2, [sp, #24]
 800a150:	1c5a      	adds	r2, r3, #1
 800a152:	d13f      	bne.n	800a1d4 <_printf_float+0x17c>
 800a154:	2306      	movs	r3, #6
 800a156:	6063      	str	r3, [r4, #4]
 800a158:	9b05      	ldr	r3, [sp, #20]
 800a15a:	6861      	ldr	r1, [r4, #4]
 800a15c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a160:	2300      	movs	r3, #0
 800a162:	9303      	str	r3, [sp, #12]
 800a164:	ab0a      	add	r3, sp, #40	; 0x28
 800a166:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a16a:	ab09      	add	r3, sp, #36	; 0x24
 800a16c:	ec49 8b10 	vmov	d0, r8, r9
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	6022      	str	r2, [r4, #0]
 800a174:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a178:	4628      	mov	r0, r5
 800a17a:	f7ff fecd 	bl	8009f18 <__cvt>
 800a17e:	9b06      	ldr	r3, [sp, #24]
 800a180:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a182:	2b47      	cmp	r3, #71	; 0x47
 800a184:	4680      	mov	r8, r0
 800a186:	d108      	bne.n	800a19a <_printf_float+0x142>
 800a188:	1cc8      	adds	r0, r1, #3
 800a18a:	db02      	blt.n	800a192 <_printf_float+0x13a>
 800a18c:	6863      	ldr	r3, [r4, #4]
 800a18e:	4299      	cmp	r1, r3
 800a190:	dd41      	ble.n	800a216 <_printf_float+0x1be>
 800a192:	f1ab 0b02 	sub.w	fp, fp, #2
 800a196:	fa5f fb8b 	uxtb.w	fp, fp
 800a19a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a19e:	d820      	bhi.n	800a1e2 <_printf_float+0x18a>
 800a1a0:	3901      	subs	r1, #1
 800a1a2:	465a      	mov	r2, fp
 800a1a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1a8:	9109      	str	r1, [sp, #36]	; 0x24
 800a1aa:	f7ff ff17 	bl	8009fdc <__exponent>
 800a1ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1b0:	1813      	adds	r3, r2, r0
 800a1b2:	2a01      	cmp	r2, #1
 800a1b4:	4681      	mov	r9, r0
 800a1b6:	6123      	str	r3, [r4, #16]
 800a1b8:	dc02      	bgt.n	800a1c0 <_printf_float+0x168>
 800a1ba:	6822      	ldr	r2, [r4, #0]
 800a1bc:	07d2      	lsls	r2, r2, #31
 800a1be:	d501      	bpl.n	800a1c4 <_printf_float+0x16c>
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	6123      	str	r3, [r4, #16]
 800a1c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d09c      	beq.n	800a106 <_printf_float+0xae>
 800a1cc:	232d      	movs	r3, #45	; 0x2d
 800a1ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d2:	e798      	b.n	800a106 <_printf_float+0xae>
 800a1d4:	9a06      	ldr	r2, [sp, #24]
 800a1d6:	2a47      	cmp	r2, #71	; 0x47
 800a1d8:	d1be      	bne.n	800a158 <_printf_float+0x100>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1bc      	bne.n	800a158 <_printf_float+0x100>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e7b9      	b.n	800a156 <_printf_float+0xfe>
 800a1e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a1e6:	d118      	bne.n	800a21a <_printf_float+0x1c2>
 800a1e8:	2900      	cmp	r1, #0
 800a1ea:	6863      	ldr	r3, [r4, #4]
 800a1ec:	dd0b      	ble.n	800a206 <_printf_float+0x1ae>
 800a1ee:	6121      	str	r1, [r4, #16]
 800a1f0:	b913      	cbnz	r3, 800a1f8 <_printf_float+0x1a0>
 800a1f2:	6822      	ldr	r2, [r4, #0]
 800a1f4:	07d0      	lsls	r0, r2, #31
 800a1f6:	d502      	bpl.n	800a1fe <_printf_float+0x1a6>
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	440b      	add	r3, r1
 800a1fc:	6123      	str	r3, [r4, #16]
 800a1fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a200:	f04f 0900 	mov.w	r9, #0
 800a204:	e7de      	b.n	800a1c4 <_printf_float+0x16c>
 800a206:	b913      	cbnz	r3, 800a20e <_printf_float+0x1b6>
 800a208:	6822      	ldr	r2, [r4, #0]
 800a20a:	07d2      	lsls	r2, r2, #31
 800a20c:	d501      	bpl.n	800a212 <_printf_float+0x1ba>
 800a20e:	3302      	adds	r3, #2
 800a210:	e7f4      	b.n	800a1fc <_printf_float+0x1a4>
 800a212:	2301      	movs	r3, #1
 800a214:	e7f2      	b.n	800a1fc <_printf_float+0x1a4>
 800a216:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a21c:	4299      	cmp	r1, r3
 800a21e:	db05      	blt.n	800a22c <_printf_float+0x1d4>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	6121      	str	r1, [r4, #16]
 800a224:	07d8      	lsls	r0, r3, #31
 800a226:	d5ea      	bpl.n	800a1fe <_printf_float+0x1a6>
 800a228:	1c4b      	adds	r3, r1, #1
 800a22a:	e7e7      	b.n	800a1fc <_printf_float+0x1a4>
 800a22c:	2900      	cmp	r1, #0
 800a22e:	bfd4      	ite	le
 800a230:	f1c1 0202 	rsble	r2, r1, #2
 800a234:	2201      	movgt	r2, #1
 800a236:	4413      	add	r3, r2
 800a238:	e7e0      	b.n	800a1fc <_printf_float+0x1a4>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	055a      	lsls	r2, r3, #21
 800a23e:	d407      	bmi.n	800a250 <_printf_float+0x1f8>
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	4642      	mov	r2, r8
 800a244:	4631      	mov	r1, r6
 800a246:	4628      	mov	r0, r5
 800a248:	47b8      	blx	r7
 800a24a:	3001      	adds	r0, #1
 800a24c:	d12c      	bne.n	800a2a8 <_printf_float+0x250>
 800a24e:	e764      	b.n	800a11a <_printf_float+0xc2>
 800a250:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a254:	f240 80e0 	bls.w	800a418 <_printf_float+0x3c0>
 800a258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a25c:	2200      	movs	r2, #0
 800a25e:	2300      	movs	r3, #0
 800a260:	f7f6 fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 800a264:	2800      	cmp	r0, #0
 800a266:	d034      	beq.n	800a2d2 <_printf_float+0x27a>
 800a268:	4a37      	ldr	r2, [pc, #220]	; (800a348 <_printf_float+0x2f0>)
 800a26a:	2301      	movs	r3, #1
 800a26c:	4631      	mov	r1, r6
 800a26e:	4628      	mov	r0, r5
 800a270:	47b8      	blx	r7
 800a272:	3001      	adds	r0, #1
 800a274:	f43f af51 	beq.w	800a11a <_printf_float+0xc2>
 800a278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a27c:	429a      	cmp	r2, r3
 800a27e:	db02      	blt.n	800a286 <_printf_float+0x22e>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	07d8      	lsls	r0, r3, #31
 800a284:	d510      	bpl.n	800a2a8 <_printf_float+0x250>
 800a286:	ee18 3a10 	vmov	r3, s16
 800a28a:	4652      	mov	r2, sl
 800a28c:	4631      	mov	r1, r6
 800a28e:	4628      	mov	r0, r5
 800a290:	47b8      	blx	r7
 800a292:	3001      	adds	r0, #1
 800a294:	f43f af41 	beq.w	800a11a <_printf_float+0xc2>
 800a298:	f04f 0800 	mov.w	r8, #0
 800a29c:	f104 091a 	add.w	r9, r4, #26
 800a2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	4543      	cmp	r3, r8
 800a2a6:	dc09      	bgt.n	800a2bc <_printf_float+0x264>
 800a2a8:	6823      	ldr	r3, [r4, #0]
 800a2aa:	079b      	lsls	r3, r3, #30
 800a2ac:	f100 8105 	bmi.w	800a4ba <_printf_float+0x462>
 800a2b0:	68e0      	ldr	r0, [r4, #12]
 800a2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2b4:	4298      	cmp	r0, r3
 800a2b6:	bfb8      	it	lt
 800a2b8:	4618      	movlt	r0, r3
 800a2ba:	e730      	b.n	800a11e <_printf_float+0xc6>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	464a      	mov	r2, r9
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b8      	blx	r7
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	f43f af27 	beq.w	800a11a <_printf_float+0xc2>
 800a2cc:	f108 0801 	add.w	r8, r8, #1
 800a2d0:	e7e6      	b.n	800a2a0 <_printf_float+0x248>
 800a2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	dc39      	bgt.n	800a34c <_printf_float+0x2f4>
 800a2d8:	4a1b      	ldr	r2, [pc, #108]	; (800a348 <_printf_float+0x2f0>)
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f43f af19 	beq.w	800a11a <_printf_float+0xc2>
 800a2e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	d102      	bne.n	800a2f6 <_printf_float+0x29e>
 800a2f0:	6823      	ldr	r3, [r4, #0]
 800a2f2:	07d9      	lsls	r1, r3, #31
 800a2f4:	d5d8      	bpl.n	800a2a8 <_printf_float+0x250>
 800a2f6:	ee18 3a10 	vmov	r3, s16
 800a2fa:	4652      	mov	r2, sl
 800a2fc:	4631      	mov	r1, r6
 800a2fe:	4628      	mov	r0, r5
 800a300:	47b8      	blx	r7
 800a302:	3001      	adds	r0, #1
 800a304:	f43f af09 	beq.w	800a11a <_printf_float+0xc2>
 800a308:	f04f 0900 	mov.w	r9, #0
 800a30c:	f104 0a1a 	add.w	sl, r4, #26
 800a310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a312:	425b      	negs	r3, r3
 800a314:	454b      	cmp	r3, r9
 800a316:	dc01      	bgt.n	800a31c <_printf_float+0x2c4>
 800a318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31a:	e792      	b.n	800a242 <_printf_float+0x1ea>
 800a31c:	2301      	movs	r3, #1
 800a31e:	4652      	mov	r2, sl
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	f43f aef7 	beq.w	800a11a <_printf_float+0xc2>
 800a32c:	f109 0901 	add.w	r9, r9, #1
 800a330:	e7ee      	b.n	800a310 <_printf_float+0x2b8>
 800a332:	bf00      	nop
 800a334:	7fefffff 	.word	0x7fefffff
 800a338:	0800e880 	.word	0x0800e880
 800a33c:	0800e884 	.word	0x0800e884
 800a340:	0800e88c 	.word	0x0800e88c
 800a344:	0800e888 	.word	0x0800e888
 800a348:	0800e890 	.word	0x0800e890
 800a34c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a34e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a350:	429a      	cmp	r2, r3
 800a352:	bfa8      	it	ge
 800a354:	461a      	movge	r2, r3
 800a356:	2a00      	cmp	r2, #0
 800a358:	4691      	mov	r9, r2
 800a35a:	dc37      	bgt.n	800a3cc <_printf_float+0x374>
 800a35c:	f04f 0b00 	mov.w	fp, #0
 800a360:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a364:	f104 021a 	add.w	r2, r4, #26
 800a368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	eba3 0309 	sub.w	r3, r3, r9
 800a370:	455b      	cmp	r3, fp
 800a372:	dc33      	bgt.n	800a3dc <_printf_float+0x384>
 800a374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a378:	429a      	cmp	r2, r3
 800a37a:	db3b      	blt.n	800a3f4 <_printf_float+0x39c>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	07da      	lsls	r2, r3, #31
 800a380:	d438      	bmi.n	800a3f4 <_printf_float+0x39c>
 800a382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a384:	9a05      	ldr	r2, [sp, #20]
 800a386:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a388:	1a9a      	subs	r2, r3, r2
 800a38a:	eba3 0901 	sub.w	r9, r3, r1
 800a38e:	4591      	cmp	r9, r2
 800a390:	bfa8      	it	ge
 800a392:	4691      	movge	r9, r2
 800a394:	f1b9 0f00 	cmp.w	r9, #0
 800a398:	dc35      	bgt.n	800a406 <_printf_float+0x3ae>
 800a39a:	f04f 0800 	mov.w	r8, #0
 800a39e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3a2:	f104 0a1a 	add.w	sl, r4, #26
 800a3a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3aa:	1a9b      	subs	r3, r3, r2
 800a3ac:	eba3 0309 	sub.w	r3, r3, r9
 800a3b0:	4543      	cmp	r3, r8
 800a3b2:	f77f af79 	ble.w	800a2a8 <_printf_float+0x250>
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	4652      	mov	r2, sl
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4628      	mov	r0, r5
 800a3be:	47b8      	blx	r7
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	f43f aeaa 	beq.w	800a11a <_printf_float+0xc2>
 800a3c6:	f108 0801 	add.w	r8, r8, #1
 800a3ca:	e7ec      	b.n	800a3a6 <_printf_float+0x34e>
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4642      	mov	r2, r8
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	47b8      	blx	r7
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d1c0      	bne.n	800a35c <_printf_float+0x304>
 800a3da:	e69e      	b.n	800a11a <_printf_float+0xc2>
 800a3dc:	2301      	movs	r3, #1
 800a3de:	4631      	mov	r1, r6
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	9205      	str	r2, [sp, #20]
 800a3e4:	47b8      	blx	r7
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	f43f ae97 	beq.w	800a11a <_printf_float+0xc2>
 800a3ec:	9a05      	ldr	r2, [sp, #20]
 800a3ee:	f10b 0b01 	add.w	fp, fp, #1
 800a3f2:	e7b9      	b.n	800a368 <_printf_float+0x310>
 800a3f4:	ee18 3a10 	vmov	r3, s16
 800a3f8:	4652      	mov	r2, sl
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	d1be      	bne.n	800a382 <_printf_float+0x32a>
 800a404:	e689      	b.n	800a11a <_printf_float+0xc2>
 800a406:	9a05      	ldr	r2, [sp, #20]
 800a408:	464b      	mov	r3, r9
 800a40a:	4442      	add	r2, r8
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	d1c1      	bne.n	800a39a <_printf_float+0x342>
 800a416:	e680      	b.n	800a11a <_printf_float+0xc2>
 800a418:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a41a:	2a01      	cmp	r2, #1
 800a41c:	dc01      	bgt.n	800a422 <_printf_float+0x3ca>
 800a41e:	07db      	lsls	r3, r3, #31
 800a420:	d538      	bpl.n	800a494 <_printf_float+0x43c>
 800a422:	2301      	movs	r3, #1
 800a424:	4642      	mov	r2, r8
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae74 	beq.w	800a11a <_printf_float+0xc2>
 800a432:	ee18 3a10 	vmov	r3, s16
 800a436:	4652      	mov	r2, sl
 800a438:	4631      	mov	r1, r6
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b8      	blx	r7
 800a43e:	3001      	adds	r0, #1
 800a440:	f43f ae6b 	beq.w	800a11a <_printf_float+0xc2>
 800a444:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a448:	2200      	movs	r2, #0
 800a44a:	2300      	movs	r3, #0
 800a44c:	f7f6 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a450:	b9d8      	cbnz	r0, 800a48a <_printf_float+0x432>
 800a452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a454:	f108 0201 	add.w	r2, r8, #1
 800a458:	3b01      	subs	r3, #1
 800a45a:	4631      	mov	r1, r6
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b8      	blx	r7
 800a460:	3001      	adds	r0, #1
 800a462:	d10e      	bne.n	800a482 <_printf_float+0x42a>
 800a464:	e659      	b.n	800a11a <_printf_float+0xc2>
 800a466:	2301      	movs	r3, #1
 800a468:	4652      	mov	r2, sl
 800a46a:	4631      	mov	r1, r6
 800a46c:	4628      	mov	r0, r5
 800a46e:	47b8      	blx	r7
 800a470:	3001      	adds	r0, #1
 800a472:	f43f ae52 	beq.w	800a11a <_printf_float+0xc2>
 800a476:	f108 0801 	add.w	r8, r8, #1
 800a47a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a47c:	3b01      	subs	r3, #1
 800a47e:	4543      	cmp	r3, r8
 800a480:	dcf1      	bgt.n	800a466 <_printf_float+0x40e>
 800a482:	464b      	mov	r3, r9
 800a484:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a488:	e6dc      	b.n	800a244 <_printf_float+0x1ec>
 800a48a:	f04f 0800 	mov.w	r8, #0
 800a48e:	f104 0a1a 	add.w	sl, r4, #26
 800a492:	e7f2      	b.n	800a47a <_printf_float+0x422>
 800a494:	2301      	movs	r3, #1
 800a496:	4642      	mov	r2, r8
 800a498:	e7df      	b.n	800a45a <_printf_float+0x402>
 800a49a:	2301      	movs	r3, #1
 800a49c:	464a      	mov	r2, r9
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	47b8      	blx	r7
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	f43f ae38 	beq.w	800a11a <_printf_float+0xc2>
 800a4aa:	f108 0801 	add.w	r8, r8, #1
 800a4ae:	68e3      	ldr	r3, [r4, #12]
 800a4b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4b2:	1a5b      	subs	r3, r3, r1
 800a4b4:	4543      	cmp	r3, r8
 800a4b6:	dcf0      	bgt.n	800a49a <_printf_float+0x442>
 800a4b8:	e6fa      	b.n	800a2b0 <_printf_float+0x258>
 800a4ba:	f04f 0800 	mov.w	r8, #0
 800a4be:	f104 0919 	add.w	r9, r4, #25
 800a4c2:	e7f4      	b.n	800a4ae <_printf_float+0x456>

0800a4c4 <_printf_common>:
 800a4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	4616      	mov	r6, r2
 800a4ca:	4699      	mov	r9, r3
 800a4cc:	688a      	ldr	r2, [r1, #8]
 800a4ce:	690b      	ldr	r3, [r1, #16]
 800a4d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	bfb8      	it	lt
 800a4d8:	4613      	movlt	r3, r2
 800a4da:	6033      	str	r3, [r6, #0]
 800a4dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4e0:	4607      	mov	r7, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	b10a      	cbz	r2, 800a4ea <_printf_common+0x26>
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	6033      	str	r3, [r6, #0]
 800a4ea:	6823      	ldr	r3, [r4, #0]
 800a4ec:	0699      	lsls	r1, r3, #26
 800a4ee:	bf42      	ittt	mi
 800a4f0:	6833      	ldrmi	r3, [r6, #0]
 800a4f2:	3302      	addmi	r3, #2
 800a4f4:	6033      	strmi	r3, [r6, #0]
 800a4f6:	6825      	ldr	r5, [r4, #0]
 800a4f8:	f015 0506 	ands.w	r5, r5, #6
 800a4fc:	d106      	bne.n	800a50c <_printf_common+0x48>
 800a4fe:	f104 0a19 	add.w	sl, r4, #25
 800a502:	68e3      	ldr	r3, [r4, #12]
 800a504:	6832      	ldr	r2, [r6, #0]
 800a506:	1a9b      	subs	r3, r3, r2
 800a508:	42ab      	cmp	r3, r5
 800a50a:	dc26      	bgt.n	800a55a <_printf_common+0x96>
 800a50c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a510:	1e13      	subs	r3, r2, #0
 800a512:	6822      	ldr	r2, [r4, #0]
 800a514:	bf18      	it	ne
 800a516:	2301      	movne	r3, #1
 800a518:	0692      	lsls	r2, r2, #26
 800a51a:	d42b      	bmi.n	800a574 <_printf_common+0xb0>
 800a51c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a520:	4649      	mov	r1, r9
 800a522:	4638      	mov	r0, r7
 800a524:	47c0      	blx	r8
 800a526:	3001      	adds	r0, #1
 800a528:	d01e      	beq.n	800a568 <_printf_common+0xa4>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	68e5      	ldr	r5, [r4, #12]
 800a52e:	6832      	ldr	r2, [r6, #0]
 800a530:	f003 0306 	and.w	r3, r3, #6
 800a534:	2b04      	cmp	r3, #4
 800a536:	bf08      	it	eq
 800a538:	1aad      	subeq	r5, r5, r2
 800a53a:	68a3      	ldr	r3, [r4, #8]
 800a53c:	6922      	ldr	r2, [r4, #16]
 800a53e:	bf0c      	ite	eq
 800a540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a544:	2500      	movne	r5, #0
 800a546:	4293      	cmp	r3, r2
 800a548:	bfc4      	itt	gt
 800a54a:	1a9b      	subgt	r3, r3, r2
 800a54c:	18ed      	addgt	r5, r5, r3
 800a54e:	2600      	movs	r6, #0
 800a550:	341a      	adds	r4, #26
 800a552:	42b5      	cmp	r5, r6
 800a554:	d11a      	bne.n	800a58c <_printf_common+0xc8>
 800a556:	2000      	movs	r0, #0
 800a558:	e008      	b.n	800a56c <_printf_common+0xa8>
 800a55a:	2301      	movs	r3, #1
 800a55c:	4652      	mov	r2, sl
 800a55e:	4649      	mov	r1, r9
 800a560:	4638      	mov	r0, r7
 800a562:	47c0      	blx	r8
 800a564:	3001      	adds	r0, #1
 800a566:	d103      	bne.n	800a570 <_printf_common+0xac>
 800a568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a570:	3501      	adds	r5, #1
 800a572:	e7c6      	b.n	800a502 <_printf_common+0x3e>
 800a574:	18e1      	adds	r1, r4, r3
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	2030      	movs	r0, #48	; 0x30
 800a57a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a57e:	4422      	add	r2, r4
 800a580:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a584:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a588:	3302      	adds	r3, #2
 800a58a:	e7c7      	b.n	800a51c <_printf_common+0x58>
 800a58c:	2301      	movs	r3, #1
 800a58e:	4622      	mov	r2, r4
 800a590:	4649      	mov	r1, r9
 800a592:	4638      	mov	r0, r7
 800a594:	47c0      	blx	r8
 800a596:	3001      	adds	r0, #1
 800a598:	d0e6      	beq.n	800a568 <_printf_common+0xa4>
 800a59a:	3601      	adds	r6, #1
 800a59c:	e7d9      	b.n	800a552 <_printf_common+0x8e>
	...

0800a5a0 <_printf_i>:
 800a5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a4:	7e0f      	ldrb	r7, [r1, #24]
 800a5a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5a8:	2f78      	cmp	r7, #120	; 0x78
 800a5aa:	4691      	mov	r9, r2
 800a5ac:	4680      	mov	r8, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	469a      	mov	sl, r3
 800a5b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5b6:	d807      	bhi.n	800a5c8 <_printf_i+0x28>
 800a5b8:	2f62      	cmp	r7, #98	; 0x62
 800a5ba:	d80a      	bhi.n	800a5d2 <_printf_i+0x32>
 800a5bc:	2f00      	cmp	r7, #0
 800a5be:	f000 80d8 	beq.w	800a772 <_printf_i+0x1d2>
 800a5c2:	2f58      	cmp	r7, #88	; 0x58
 800a5c4:	f000 80a3 	beq.w	800a70e <_printf_i+0x16e>
 800a5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5d0:	e03a      	b.n	800a648 <_printf_i+0xa8>
 800a5d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5d6:	2b15      	cmp	r3, #21
 800a5d8:	d8f6      	bhi.n	800a5c8 <_printf_i+0x28>
 800a5da:	a101      	add	r1, pc, #4	; (adr r1, 800a5e0 <_printf_i+0x40>)
 800a5dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5e0:	0800a639 	.word	0x0800a639
 800a5e4:	0800a64d 	.word	0x0800a64d
 800a5e8:	0800a5c9 	.word	0x0800a5c9
 800a5ec:	0800a5c9 	.word	0x0800a5c9
 800a5f0:	0800a5c9 	.word	0x0800a5c9
 800a5f4:	0800a5c9 	.word	0x0800a5c9
 800a5f8:	0800a64d 	.word	0x0800a64d
 800a5fc:	0800a5c9 	.word	0x0800a5c9
 800a600:	0800a5c9 	.word	0x0800a5c9
 800a604:	0800a5c9 	.word	0x0800a5c9
 800a608:	0800a5c9 	.word	0x0800a5c9
 800a60c:	0800a759 	.word	0x0800a759
 800a610:	0800a67d 	.word	0x0800a67d
 800a614:	0800a73b 	.word	0x0800a73b
 800a618:	0800a5c9 	.word	0x0800a5c9
 800a61c:	0800a5c9 	.word	0x0800a5c9
 800a620:	0800a77b 	.word	0x0800a77b
 800a624:	0800a5c9 	.word	0x0800a5c9
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a5c9 	.word	0x0800a5c9
 800a630:	0800a5c9 	.word	0x0800a5c9
 800a634:	0800a743 	.word	0x0800a743
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	1d1a      	adds	r2, r3, #4
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	602a      	str	r2, [r5, #0]
 800a640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a648:	2301      	movs	r3, #1
 800a64a:	e0a3      	b.n	800a794 <_printf_i+0x1f4>
 800a64c:	6820      	ldr	r0, [r4, #0]
 800a64e:	6829      	ldr	r1, [r5, #0]
 800a650:	0606      	lsls	r6, r0, #24
 800a652:	f101 0304 	add.w	r3, r1, #4
 800a656:	d50a      	bpl.n	800a66e <_printf_i+0xce>
 800a658:	680e      	ldr	r6, [r1, #0]
 800a65a:	602b      	str	r3, [r5, #0]
 800a65c:	2e00      	cmp	r6, #0
 800a65e:	da03      	bge.n	800a668 <_printf_i+0xc8>
 800a660:	232d      	movs	r3, #45	; 0x2d
 800a662:	4276      	negs	r6, r6
 800a664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a668:	485e      	ldr	r0, [pc, #376]	; (800a7e4 <_printf_i+0x244>)
 800a66a:	230a      	movs	r3, #10
 800a66c:	e019      	b.n	800a6a2 <_printf_i+0x102>
 800a66e:	680e      	ldr	r6, [r1, #0]
 800a670:	602b      	str	r3, [r5, #0]
 800a672:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a676:	bf18      	it	ne
 800a678:	b236      	sxthne	r6, r6
 800a67a:	e7ef      	b.n	800a65c <_printf_i+0xbc>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	6820      	ldr	r0, [r4, #0]
 800a680:	1d19      	adds	r1, r3, #4
 800a682:	6029      	str	r1, [r5, #0]
 800a684:	0601      	lsls	r1, r0, #24
 800a686:	d501      	bpl.n	800a68c <_printf_i+0xec>
 800a688:	681e      	ldr	r6, [r3, #0]
 800a68a:	e002      	b.n	800a692 <_printf_i+0xf2>
 800a68c:	0646      	lsls	r6, r0, #25
 800a68e:	d5fb      	bpl.n	800a688 <_printf_i+0xe8>
 800a690:	881e      	ldrh	r6, [r3, #0]
 800a692:	4854      	ldr	r0, [pc, #336]	; (800a7e4 <_printf_i+0x244>)
 800a694:	2f6f      	cmp	r7, #111	; 0x6f
 800a696:	bf0c      	ite	eq
 800a698:	2308      	moveq	r3, #8
 800a69a:	230a      	movne	r3, #10
 800a69c:	2100      	movs	r1, #0
 800a69e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6a2:	6865      	ldr	r5, [r4, #4]
 800a6a4:	60a5      	str	r5, [r4, #8]
 800a6a6:	2d00      	cmp	r5, #0
 800a6a8:	bfa2      	ittt	ge
 800a6aa:	6821      	ldrge	r1, [r4, #0]
 800a6ac:	f021 0104 	bicge.w	r1, r1, #4
 800a6b0:	6021      	strge	r1, [r4, #0]
 800a6b2:	b90e      	cbnz	r6, 800a6b8 <_printf_i+0x118>
 800a6b4:	2d00      	cmp	r5, #0
 800a6b6:	d04d      	beq.n	800a754 <_printf_i+0x1b4>
 800a6b8:	4615      	mov	r5, r2
 800a6ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a6be:	fb03 6711 	mls	r7, r3, r1, r6
 800a6c2:	5dc7      	ldrb	r7, [r0, r7]
 800a6c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a6c8:	4637      	mov	r7, r6
 800a6ca:	42bb      	cmp	r3, r7
 800a6cc:	460e      	mov	r6, r1
 800a6ce:	d9f4      	bls.n	800a6ba <_printf_i+0x11a>
 800a6d0:	2b08      	cmp	r3, #8
 800a6d2:	d10b      	bne.n	800a6ec <_printf_i+0x14c>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	07de      	lsls	r6, r3, #31
 800a6d8:	d508      	bpl.n	800a6ec <_printf_i+0x14c>
 800a6da:	6923      	ldr	r3, [r4, #16]
 800a6dc:	6861      	ldr	r1, [r4, #4]
 800a6de:	4299      	cmp	r1, r3
 800a6e0:	bfde      	ittt	le
 800a6e2:	2330      	movle	r3, #48	; 0x30
 800a6e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a6ec:	1b52      	subs	r2, r2, r5
 800a6ee:	6122      	str	r2, [r4, #16]
 800a6f0:	f8cd a000 	str.w	sl, [sp]
 800a6f4:	464b      	mov	r3, r9
 800a6f6:	aa03      	add	r2, sp, #12
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	f7ff fee2 	bl	800a4c4 <_printf_common>
 800a700:	3001      	adds	r0, #1
 800a702:	d14c      	bne.n	800a79e <_printf_i+0x1fe>
 800a704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a708:	b004      	add	sp, #16
 800a70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70e:	4835      	ldr	r0, [pc, #212]	; (800a7e4 <_printf_i+0x244>)
 800a710:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a714:	6829      	ldr	r1, [r5, #0]
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	f851 6b04 	ldr.w	r6, [r1], #4
 800a71c:	6029      	str	r1, [r5, #0]
 800a71e:	061d      	lsls	r5, r3, #24
 800a720:	d514      	bpl.n	800a74c <_printf_i+0x1ac>
 800a722:	07df      	lsls	r7, r3, #31
 800a724:	bf44      	itt	mi
 800a726:	f043 0320 	orrmi.w	r3, r3, #32
 800a72a:	6023      	strmi	r3, [r4, #0]
 800a72c:	b91e      	cbnz	r6, 800a736 <_printf_i+0x196>
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	f023 0320 	bic.w	r3, r3, #32
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	2310      	movs	r3, #16
 800a738:	e7b0      	b.n	800a69c <_printf_i+0xfc>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	f043 0320 	orr.w	r3, r3, #32
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	2378      	movs	r3, #120	; 0x78
 800a744:	4828      	ldr	r0, [pc, #160]	; (800a7e8 <_printf_i+0x248>)
 800a746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a74a:	e7e3      	b.n	800a714 <_printf_i+0x174>
 800a74c:	0659      	lsls	r1, r3, #25
 800a74e:	bf48      	it	mi
 800a750:	b2b6      	uxthmi	r6, r6
 800a752:	e7e6      	b.n	800a722 <_printf_i+0x182>
 800a754:	4615      	mov	r5, r2
 800a756:	e7bb      	b.n	800a6d0 <_printf_i+0x130>
 800a758:	682b      	ldr	r3, [r5, #0]
 800a75a:	6826      	ldr	r6, [r4, #0]
 800a75c:	6961      	ldr	r1, [r4, #20]
 800a75e:	1d18      	adds	r0, r3, #4
 800a760:	6028      	str	r0, [r5, #0]
 800a762:	0635      	lsls	r5, r6, #24
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	d501      	bpl.n	800a76c <_printf_i+0x1cc>
 800a768:	6019      	str	r1, [r3, #0]
 800a76a:	e002      	b.n	800a772 <_printf_i+0x1d2>
 800a76c:	0670      	lsls	r0, r6, #25
 800a76e:	d5fb      	bpl.n	800a768 <_printf_i+0x1c8>
 800a770:	8019      	strh	r1, [r3, #0]
 800a772:	2300      	movs	r3, #0
 800a774:	6123      	str	r3, [r4, #16]
 800a776:	4615      	mov	r5, r2
 800a778:	e7ba      	b.n	800a6f0 <_printf_i+0x150>
 800a77a:	682b      	ldr	r3, [r5, #0]
 800a77c:	1d1a      	adds	r2, r3, #4
 800a77e:	602a      	str	r2, [r5, #0]
 800a780:	681d      	ldr	r5, [r3, #0]
 800a782:	6862      	ldr	r2, [r4, #4]
 800a784:	2100      	movs	r1, #0
 800a786:	4628      	mov	r0, r5
 800a788:	f7f5 fd2a 	bl	80001e0 <memchr>
 800a78c:	b108      	cbz	r0, 800a792 <_printf_i+0x1f2>
 800a78e:	1b40      	subs	r0, r0, r5
 800a790:	6060      	str	r0, [r4, #4]
 800a792:	6863      	ldr	r3, [r4, #4]
 800a794:	6123      	str	r3, [r4, #16]
 800a796:	2300      	movs	r3, #0
 800a798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a79c:	e7a8      	b.n	800a6f0 <_printf_i+0x150>
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	462a      	mov	r2, r5
 800a7a2:	4649      	mov	r1, r9
 800a7a4:	4640      	mov	r0, r8
 800a7a6:	47d0      	blx	sl
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	d0ab      	beq.n	800a704 <_printf_i+0x164>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	079b      	lsls	r3, r3, #30
 800a7b0:	d413      	bmi.n	800a7da <_printf_i+0x23a>
 800a7b2:	68e0      	ldr	r0, [r4, #12]
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	4298      	cmp	r0, r3
 800a7b8:	bfb8      	it	lt
 800a7ba:	4618      	movlt	r0, r3
 800a7bc:	e7a4      	b.n	800a708 <_printf_i+0x168>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	4640      	mov	r0, r8
 800a7c6:	47d0      	blx	sl
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	d09b      	beq.n	800a704 <_printf_i+0x164>
 800a7cc:	3501      	adds	r5, #1
 800a7ce:	68e3      	ldr	r3, [r4, #12]
 800a7d0:	9903      	ldr	r1, [sp, #12]
 800a7d2:	1a5b      	subs	r3, r3, r1
 800a7d4:	42ab      	cmp	r3, r5
 800a7d6:	dcf2      	bgt.n	800a7be <_printf_i+0x21e>
 800a7d8:	e7eb      	b.n	800a7b2 <_printf_i+0x212>
 800a7da:	2500      	movs	r5, #0
 800a7dc:	f104 0619 	add.w	r6, r4, #25
 800a7e0:	e7f5      	b.n	800a7ce <_printf_i+0x22e>
 800a7e2:	bf00      	nop
 800a7e4:	0800e892 	.word	0x0800e892
 800a7e8:	0800e8a3 	.word	0x0800e8a3

0800a7ec <_scanf_float>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	b087      	sub	sp, #28
 800a7f2:	4617      	mov	r7, r2
 800a7f4:	9303      	str	r3, [sp, #12]
 800a7f6:	688b      	ldr	r3, [r1, #8]
 800a7f8:	1e5a      	subs	r2, r3, #1
 800a7fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a7fe:	bf83      	ittte	hi
 800a800:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a804:	195b      	addhi	r3, r3, r5
 800a806:	9302      	strhi	r3, [sp, #8]
 800a808:	2300      	movls	r3, #0
 800a80a:	bf86      	itte	hi
 800a80c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a810:	608b      	strhi	r3, [r1, #8]
 800a812:	9302      	strls	r3, [sp, #8]
 800a814:	680b      	ldr	r3, [r1, #0]
 800a816:	468b      	mov	fp, r1
 800a818:	2500      	movs	r5, #0
 800a81a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a81e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a822:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a826:	4680      	mov	r8, r0
 800a828:	460c      	mov	r4, r1
 800a82a:	465e      	mov	r6, fp
 800a82c:	46aa      	mov	sl, r5
 800a82e:	46a9      	mov	r9, r5
 800a830:	9501      	str	r5, [sp, #4]
 800a832:	68a2      	ldr	r2, [r4, #8]
 800a834:	b152      	cbz	r2, 800a84c <_scanf_float+0x60>
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	2b4e      	cmp	r3, #78	; 0x4e
 800a83c:	d864      	bhi.n	800a908 <_scanf_float+0x11c>
 800a83e:	2b40      	cmp	r3, #64	; 0x40
 800a840:	d83c      	bhi.n	800a8bc <_scanf_float+0xd0>
 800a842:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a846:	b2c8      	uxtb	r0, r1
 800a848:	280e      	cmp	r0, #14
 800a84a:	d93a      	bls.n	800a8c2 <_scanf_float+0xd6>
 800a84c:	f1b9 0f00 	cmp.w	r9, #0
 800a850:	d003      	beq.n	800a85a <_scanf_float+0x6e>
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a85e:	f1ba 0f01 	cmp.w	sl, #1
 800a862:	f200 8113 	bhi.w	800aa8c <_scanf_float+0x2a0>
 800a866:	455e      	cmp	r6, fp
 800a868:	f200 8105 	bhi.w	800aa76 <_scanf_float+0x28a>
 800a86c:	2501      	movs	r5, #1
 800a86e:	4628      	mov	r0, r5
 800a870:	b007      	add	sp, #28
 800a872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a876:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a87a:	2a0d      	cmp	r2, #13
 800a87c:	d8e6      	bhi.n	800a84c <_scanf_float+0x60>
 800a87e:	a101      	add	r1, pc, #4	; (adr r1, 800a884 <_scanf_float+0x98>)
 800a880:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a884:	0800a9c3 	.word	0x0800a9c3
 800a888:	0800a84d 	.word	0x0800a84d
 800a88c:	0800a84d 	.word	0x0800a84d
 800a890:	0800a84d 	.word	0x0800a84d
 800a894:	0800aa23 	.word	0x0800aa23
 800a898:	0800a9fb 	.word	0x0800a9fb
 800a89c:	0800a84d 	.word	0x0800a84d
 800a8a0:	0800a84d 	.word	0x0800a84d
 800a8a4:	0800a9d1 	.word	0x0800a9d1
 800a8a8:	0800a84d 	.word	0x0800a84d
 800a8ac:	0800a84d 	.word	0x0800a84d
 800a8b0:	0800a84d 	.word	0x0800a84d
 800a8b4:	0800a84d 	.word	0x0800a84d
 800a8b8:	0800a989 	.word	0x0800a989
 800a8bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a8c0:	e7db      	b.n	800a87a <_scanf_float+0x8e>
 800a8c2:	290e      	cmp	r1, #14
 800a8c4:	d8c2      	bhi.n	800a84c <_scanf_float+0x60>
 800a8c6:	a001      	add	r0, pc, #4	; (adr r0, 800a8cc <_scanf_float+0xe0>)
 800a8c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8cc:	0800a97b 	.word	0x0800a97b
 800a8d0:	0800a84d 	.word	0x0800a84d
 800a8d4:	0800a97b 	.word	0x0800a97b
 800a8d8:	0800aa0f 	.word	0x0800aa0f
 800a8dc:	0800a84d 	.word	0x0800a84d
 800a8e0:	0800a929 	.word	0x0800a929
 800a8e4:	0800a965 	.word	0x0800a965
 800a8e8:	0800a965 	.word	0x0800a965
 800a8ec:	0800a965 	.word	0x0800a965
 800a8f0:	0800a965 	.word	0x0800a965
 800a8f4:	0800a965 	.word	0x0800a965
 800a8f8:	0800a965 	.word	0x0800a965
 800a8fc:	0800a965 	.word	0x0800a965
 800a900:	0800a965 	.word	0x0800a965
 800a904:	0800a965 	.word	0x0800a965
 800a908:	2b6e      	cmp	r3, #110	; 0x6e
 800a90a:	d809      	bhi.n	800a920 <_scanf_float+0x134>
 800a90c:	2b60      	cmp	r3, #96	; 0x60
 800a90e:	d8b2      	bhi.n	800a876 <_scanf_float+0x8a>
 800a910:	2b54      	cmp	r3, #84	; 0x54
 800a912:	d077      	beq.n	800aa04 <_scanf_float+0x218>
 800a914:	2b59      	cmp	r3, #89	; 0x59
 800a916:	d199      	bne.n	800a84c <_scanf_float+0x60>
 800a918:	2d07      	cmp	r5, #7
 800a91a:	d197      	bne.n	800a84c <_scanf_float+0x60>
 800a91c:	2508      	movs	r5, #8
 800a91e:	e029      	b.n	800a974 <_scanf_float+0x188>
 800a920:	2b74      	cmp	r3, #116	; 0x74
 800a922:	d06f      	beq.n	800aa04 <_scanf_float+0x218>
 800a924:	2b79      	cmp	r3, #121	; 0x79
 800a926:	e7f6      	b.n	800a916 <_scanf_float+0x12a>
 800a928:	6821      	ldr	r1, [r4, #0]
 800a92a:	05c8      	lsls	r0, r1, #23
 800a92c:	d51a      	bpl.n	800a964 <_scanf_float+0x178>
 800a92e:	9b02      	ldr	r3, [sp, #8]
 800a930:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a934:	6021      	str	r1, [r4, #0]
 800a936:	f109 0901 	add.w	r9, r9, #1
 800a93a:	b11b      	cbz	r3, 800a944 <_scanf_float+0x158>
 800a93c:	3b01      	subs	r3, #1
 800a93e:	3201      	adds	r2, #1
 800a940:	9302      	str	r3, [sp, #8]
 800a942:	60a2      	str	r2, [r4, #8]
 800a944:	68a3      	ldr	r3, [r4, #8]
 800a946:	3b01      	subs	r3, #1
 800a948:	60a3      	str	r3, [r4, #8]
 800a94a:	6923      	ldr	r3, [r4, #16]
 800a94c:	3301      	adds	r3, #1
 800a94e:	6123      	str	r3, [r4, #16]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3b01      	subs	r3, #1
 800a954:	2b00      	cmp	r3, #0
 800a956:	607b      	str	r3, [r7, #4]
 800a958:	f340 8084 	ble.w	800aa64 <_scanf_float+0x278>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	3301      	adds	r3, #1
 800a960:	603b      	str	r3, [r7, #0]
 800a962:	e766      	b.n	800a832 <_scanf_float+0x46>
 800a964:	eb1a 0f05 	cmn.w	sl, r5
 800a968:	f47f af70 	bne.w	800a84c <_scanf_float+0x60>
 800a96c:	6822      	ldr	r2, [r4, #0]
 800a96e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a972:	6022      	str	r2, [r4, #0]
 800a974:	f806 3b01 	strb.w	r3, [r6], #1
 800a978:	e7e4      	b.n	800a944 <_scanf_float+0x158>
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	0610      	lsls	r0, r2, #24
 800a97e:	f57f af65 	bpl.w	800a84c <_scanf_float+0x60>
 800a982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a986:	e7f4      	b.n	800a972 <_scanf_float+0x186>
 800a988:	f1ba 0f00 	cmp.w	sl, #0
 800a98c:	d10e      	bne.n	800a9ac <_scanf_float+0x1c0>
 800a98e:	f1b9 0f00 	cmp.w	r9, #0
 800a992:	d10e      	bne.n	800a9b2 <_scanf_float+0x1c6>
 800a994:	6822      	ldr	r2, [r4, #0]
 800a996:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a99a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a99e:	d108      	bne.n	800a9b2 <_scanf_float+0x1c6>
 800a9a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a9a4:	6022      	str	r2, [r4, #0]
 800a9a6:	f04f 0a01 	mov.w	sl, #1
 800a9aa:	e7e3      	b.n	800a974 <_scanf_float+0x188>
 800a9ac:	f1ba 0f02 	cmp.w	sl, #2
 800a9b0:	d055      	beq.n	800aa5e <_scanf_float+0x272>
 800a9b2:	2d01      	cmp	r5, #1
 800a9b4:	d002      	beq.n	800a9bc <_scanf_float+0x1d0>
 800a9b6:	2d04      	cmp	r5, #4
 800a9b8:	f47f af48 	bne.w	800a84c <_scanf_float+0x60>
 800a9bc:	3501      	adds	r5, #1
 800a9be:	b2ed      	uxtb	r5, r5
 800a9c0:	e7d8      	b.n	800a974 <_scanf_float+0x188>
 800a9c2:	f1ba 0f01 	cmp.w	sl, #1
 800a9c6:	f47f af41 	bne.w	800a84c <_scanf_float+0x60>
 800a9ca:	f04f 0a02 	mov.w	sl, #2
 800a9ce:	e7d1      	b.n	800a974 <_scanf_float+0x188>
 800a9d0:	b97d      	cbnz	r5, 800a9f2 <_scanf_float+0x206>
 800a9d2:	f1b9 0f00 	cmp.w	r9, #0
 800a9d6:	f47f af3c 	bne.w	800a852 <_scanf_float+0x66>
 800a9da:	6822      	ldr	r2, [r4, #0]
 800a9dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a9e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a9e4:	f47f af39 	bne.w	800a85a <_scanf_float+0x6e>
 800a9e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a9ec:	6022      	str	r2, [r4, #0]
 800a9ee:	2501      	movs	r5, #1
 800a9f0:	e7c0      	b.n	800a974 <_scanf_float+0x188>
 800a9f2:	2d03      	cmp	r5, #3
 800a9f4:	d0e2      	beq.n	800a9bc <_scanf_float+0x1d0>
 800a9f6:	2d05      	cmp	r5, #5
 800a9f8:	e7de      	b.n	800a9b8 <_scanf_float+0x1cc>
 800a9fa:	2d02      	cmp	r5, #2
 800a9fc:	f47f af26 	bne.w	800a84c <_scanf_float+0x60>
 800aa00:	2503      	movs	r5, #3
 800aa02:	e7b7      	b.n	800a974 <_scanf_float+0x188>
 800aa04:	2d06      	cmp	r5, #6
 800aa06:	f47f af21 	bne.w	800a84c <_scanf_float+0x60>
 800aa0a:	2507      	movs	r5, #7
 800aa0c:	e7b2      	b.n	800a974 <_scanf_float+0x188>
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	0591      	lsls	r1, r2, #22
 800aa12:	f57f af1b 	bpl.w	800a84c <_scanf_float+0x60>
 800aa16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aa1a:	6022      	str	r2, [r4, #0]
 800aa1c:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa20:	e7a8      	b.n	800a974 <_scanf_float+0x188>
 800aa22:	6822      	ldr	r2, [r4, #0]
 800aa24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aa28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aa2c:	d006      	beq.n	800aa3c <_scanf_float+0x250>
 800aa2e:	0550      	lsls	r0, r2, #21
 800aa30:	f57f af0c 	bpl.w	800a84c <_scanf_float+0x60>
 800aa34:	f1b9 0f00 	cmp.w	r9, #0
 800aa38:	f43f af0f 	beq.w	800a85a <_scanf_float+0x6e>
 800aa3c:	0591      	lsls	r1, r2, #22
 800aa3e:	bf58      	it	pl
 800aa40:	9901      	ldrpl	r1, [sp, #4]
 800aa42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa46:	bf58      	it	pl
 800aa48:	eba9 0101 	subpl.w	r1, r9, r1
 800aa4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aa50:	bf58      	it	pl
 800aa52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa56:	6022      	str	r2, [r4, #0]
 800aa58:	f04f 0900 	mov.w	r9, #0
 800aa5c:	e78a      	b.n	800a974 <_scanf_float+0x188>
 800aa5e:	f04f 0a03 	mov.w	sl, #3
 800aa62:	e787      	b.n	800a974 <_scanf_float+0x188>
 800aa64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa68:	4639      	mov	r1, r7
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	4798      	blx	r3
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	f43f aedf 	beq.w	800a832 <_scanf_float+0x46>
 800aa74:	e6ea      	b.n	800a84c <_scanf_float+0x60>
 800aa76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa7e:	463a      	mov	r2, r7
 800aa80:	4640      	mov	r0, r8
 800aa82:	4798      	blx	r3
 800aa84:	6923      	ldr	r3, [r4, #16]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	6123      	str	r3, [r4, #16]
 800aa8a:	e6ec      	b.n	800a866 <_scanf_float+0x7a>
 800aa8c:	1e6b      	subs	r3, r5, #1
 800aa8e:	2b06      	cmp	r3, #6
 800aa90:	d825      	bhi.n	800aade <_scanf_float+0x2f2>
 800aa92:	2d02      	cmp	r5, #2
 800aa94:	d836      	bhi.n	800ab04 <_scanf_float+0x318>
 800aa96:	455e      	cmp	r6, fp
 800aa98:	f67f aee8 	bls.w	800a86c <_scanf_float+0x80>
 800aa9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aaa0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aaa4:	463a      	mov	r2, r7
 800aaa6:	4640      	mov	r0, r8
 800aaa8:	4798      	blx	r3
 800aaaa:	6923      	ldr	r3, [r4, #16]
 800aaac:	3b01      	subs	r3, #1
 800aaae:	6123      	str	r3, [r4, #16]
 800aab0:	e7f1      	b.n	800aa96 <_scanf_float+0x2aa>
 800aab2:	9802      	ldr	r0, [sp, #8]
 800aab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aab8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aabc:	9002      	str	r0, [sp, #8]
 800aabe:	463a      	mov	r2, r7
 800aac0:	4640      	mov	r0, r8
 800aac2:	4798      	blx	r3
 800aac4:	6923      	ldr	r3, [r4, #16]
 800aac6:	3b01      	subs	r3, #1
 800aac8:	6123      	str	r3, [r4, #16]
 800aaca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aace:	fa5f fa8a 	uxtb.w	sl, sl
 800aad2:	f1ba 0f02 	cmp.w	sl, #2
 800aad6:	d1ec      	bne.n	800aab2 <_scanf_float+0x2c6>
 800aad8:	3d03      	subs	r5, #3
 800aada:	b2ed      	uxtb	r5, r5
 800aadc:	1b76      	subs	r6, r6, r5
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	05da      	lsls	r2, r3, #23
 800aae2:	d52f      	bpl.n	800ab44 <_scanf_float+0x358>
 800aae4:	055b      	lsls	r3, r3, #21
 800aae6:	d510      	bpl.n	800ab0a <_scanf_float+0x31e>
 800aae8:	455e      	cmp	r6, fp
 800aaea:	f67f aebf 	bls.w	800a86c <_scanf_float+0x80>
 800aaee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aaf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aaf6:	463a      	mov	r2, r7
 800aaf8:	4640      	mov	r0, r8
 800aafa:	4798      	blx	r3
 800aafc:	6923      	ldr	r3, [r4, #16]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	6123      	str	r3, [r4, #16]
 800ab02:	e7f1      	b.n	800aae8 <_scanf_float+0x2fc>
 800ab04:	46aa      	mov	sl, r5
 800ab06:	9602      	str	r6, [sp, #8]
 800ab08:	e7df      	b.n	800aaca <_scanf_float+0x2de>
 800ab0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ab0e:	6923      	ldr	r3, [r4, #16]
 800ab10:	2965      	cmp	r1, #101	; 0x65
 800ab12:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ab16:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800ab1a:	6123      	str	r3, [r4, #16]
 800ab1c:	d00c      	beq.n	800ab38 <_scanf_float+0x34c>
 800ab1e:	2945      	cmp	r1, #69	; 0x45
 800ab20:	d00a      	beq.n	800ab38 <_scanf_float+0x34c>
 800ab22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab26:	463a      	mov	r2, r7
 800ab28:	4640      	mov	r0, r8
 800ab2a:	4798      	blx	r3
 800ab2c:	6923      	ldr	r3, [r4, #16]
 800ab2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	1eb5      	subs	r5, r6, #2
 800ab36:	6123      	str	r3, [r4, #16]
 800ab38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab3c:	463a      	mov	r2, r7
 800ab3e:	4640      	mov	r0, r8
 800ab40:	4798      	blx	r3
 800ab42:	462e      	mov	r6, r5
 800ab44:	6825      	ldr	r5, [r4, #0]
 800ab46:	f015 0510 	ands.w	r5, r5, #16
 800ab4a:	d159      	bne.n	800ac00 <_scanf_float+0x414>
 800ab4c:	7035      	strb	r5, [r6, #0]
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab58:	d11b      	bne.n	800ab92 <_scanf_float+0x3a6>
 800ab5a:	9b01      	ldr	r3, [sp, #4]
 800ab5c:	454b      	cmp	r3, r9
 800ab5e:	eba3 0209 	sub.w	r2, r3, r9
 800ab62:	d123      	bne.n	800abac <_scanf_float+0x3c0>
 800ab64:	2200      	movs	r2, #0
 800ab66:	4659      	mov	r1, fp
 800ab68:	4640      	mov	r0, r8
 800ab6a:	f000 ffcb 	bl	800bb04 <_strtod_r>
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	9b03      	ldr	r3, [sp, #12]
 800ab72:	f012 0f02 	tst.w	r2, #2
 800ab76:	ec57 6b10 	vmov	r6, r7, d0
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	d021      	beq.n	800abc2 <_scanf_float+0x3d6>
 800ab7e:	9903      	ldr	r1, [sp, #12]
 800ab80:	1d1a      	adds	r2, r3, #4
 800ab82:	600a      	str	r2, [r1, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	e9c3 6700 	strd	r6, r7, [r3]
 800ab8a:	68e3      	ldr	r3, [r4, #12]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	60e3      	str	r3, [r4, #12]
 800ab90:	e66d      	b.n	800a86e <_scanf_float+0x82>
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d0e5      	beq.n	800ab64 <_scanf_float+0x378>
 800ab98:	9905      	ldr	r1, [sp, #20]
 800ab9a:	230a      	movs	r3, #10
 800ab9c:	462a      	mov	r2, r5
 800ab9e:	3101      	adds	r1, #1
 800aba0:	4640      	mov	r0, r8
 800aba2:	f001 f837 	bl	800bc14 <_strtol_r>
 800aba6:	9b04      	ldr	r3, [sp, #16]
 800aba8:	9e05      	ldr	r6, [sp, #20]
 800abaa:	1ac2      	subs	r2, r0, r3
 800abac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800abb0:	429e      	cmp	r6, r3
 800abb2:	bf28      	it	cs
 800abb4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800abb8:	4912      	ldr	r1, [pc, #72]	; (800ac04 <_scanf_float+0x418>)
 800abba:	4630      	mov	r0, r6
 800abbc:	f000 f91c 	bl	800adf8 <siprintf>
 800abc0:	e7d0      	b.n	800ab64 <_scanf_float+0x378>
 800abc2:	9903      	ldr	r1, [sp, #12]
 800abc4:	f012 0f04 	tst.w	r2, #4
 800abc8:	f103 0204 	add.w	r2, r3, #4
 800abcc:	600a      	str	r2, [r1, #0]
 800abce:	d1d9      	bne.n	800ab84 <_scanf_float+0x398>
 800abd0:	f8d3 8000 	ldr.w	r8, [r3]
 800abd4:	ee10 2a10 	vmov	r2, s0
 800abd8:	ee10 0a10 	vmov	r0, s0
 800abdc:	463b      	mov	r3, r7
 800abde:	4639      	mov	r1, r7
 800abe0:	f7f5 ffa4 	bl	8000b2c <__aeabi_dcmpun>
 800abe4:	b128      	cbz	r0, 800abf2 <_scanf_float+0x406>
 800abe6:	4808      	ldr	r0, [pc, #32]	; (800ac08 <_scanf_float+0x41c>)
 800abe8:	f000 f900 	bl	800adec <nanf>
 800abec:	ed88 0a00 	vstr	s0, [r8]
 800abf0:	e7cb      	b.n	800ab8a <_scanf_float+0x39e>
 800abf2:	4630      	mov	r0, r6
 800abf4:	4639      	mov	r1, r7
 800abf6:	f7f5 fff7 	bl	8000be8 <__aeabi_d2f>
 800abfa:	f8c8 0000 	str.w	r0, [r8]
 800abfe:	e7c4      	b.n	800ab8a <_scanf_float+0x39e>
 800ac00:	2500      	movs	r5, #0
 800ac02:	e634      	b.n	800a86e <_scanf_float+0x82>
 800ac04:	0800e8b4 	.word	0x0800e8b4
 800ac08:	0800ecc0 	.word	0x0800ecc0

0800ac0c <_puts_r>:
 800ac0c:	b570      	push	{r4, r5, r6, lr}
 800ac0e:	460e      	mov	r6, r1
 800ac10:	4605      	mov	r5, r0
 800ac12:	b118      	cbz	r0, 800ac1c <_puts_r+0x10>
 800ac14:	6983      	ldr	r3, [r0, #24]
 800ac16:	b90b      	cbnz	r3, 800ac1c <_puts_r+0x10>
 800ac18:	f7ff f80e 	bl	8009c38 <__sinit>
 800ac1c:	69ab      	ldr	r3, [r5, #24]
 800ac1e:	68ac      	ldr	r4, [r5, #8]
 800ac20:	b913      	cbnz	r3, 800ac28 <_puts_r+0x1c>
 800ac22:	4628      	mov	r0, r5
 800ac24:	f7ff f808 	bl	8009c38 <__sinit>
 800ac28:	4b2c      	ldr	r3, [pc, #176]	; (800acdc <_puts_r+0xd0>)
 800ac2a:	429c      	cmp	r4, r3
 800ac2c:	d120      	bne.n	800ac70 <_puts_r+0x64>
 800ac2e:	686c      	ldr	r4, [r5, #4]
 800ac30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac32:	07db      	lsls	r3, r3, #31
 800ac34:	d405      	bmi.n	800ac42 <_puts_r+0x36>
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	0598      	lsls	r0, r3, #22
 800ac3a:	d402      	bmi.n	800ac42 <_puts_r+0x36>
 800ac3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac3e:	f7ff f8be 	bl	8009dbe <__retarget_lock_acquire_recursive>
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	0719      	lsls	r1, r3, #28
 800ac46:	d51d      	bpl.n	800ac84 <_puts_r+0x78>
 800ac48:	6923      	ldr	r3, [r4, #16]
 800ac4a:	b1db      	cbz	r3, 800ac84 <_puts_r+0x78>
 800ac4c:	3e01      	subs	r6, #1
 800ac4e:	68a3      	ldr	r3, [r4, #8]
 800ac50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac54:	3b01      	subs	r3, #1
 800ac56:	60a3      	str	r3, [r4, #8]
 800ac58:	bb39      	cbnz	r1, 800acaa <_puts_r+0x9e>
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	da38      	bge.n	800acd0 <_puts_r+0xc4>
 800ac5e:	4622      	mov	r2, r4
 800ac60:	210a      	movs	r1, #10
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 ffd8 	bl	800bc18 <__swbuf_r>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d011      	beq.n	800ac90 <_puts_r+0x84>
 800ac6c:	250a      	movs	r5, #10
 800ac6e:	e011      	b.n	800ac94 <_puts_r+0x88>
 800ac70:	4b1b      	ldr	r3, [pc, #108]	; (800ace0 <_puts_r+0xd4>)
 800ac72:	429c      	cmp	r4, r3
 800ac74:	d101      	bne.n	800ac7a <_puts_r+0x6e>
 800ac76:	68ac      	ldr	r4, [r5, #8]
 800ac78:	e7da      	b.n	800ac30 <_puts_r+0x24>
 800ac7a:	4b1a      	ldr	r3, [pc, #104]	; (800ace4 <_puts_r+0xd8>)
 800ac7c:	429c      	cmp	r4, r3
 800ac7e:	bf08      	it	eq
 800ac80:	68ec      	ldreq	r4, [r5, #12]
 800ac82:	e7d5      	b.n	800ac30 <_puts_r+0x24>
 800ac84:	4621      	mov	r1, r4
 800ac86:	4628      	mov	r0, r5
 800ac88:	f001 f82a 	bl	800bce0 <__swsetup_r>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d0dd      	beq.n	800ac4c <_puts_r+0x40>
 800ac90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ac94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac96:	07da      	lsls	r2, r3, #31
 800ac98:	d405      	bmi.n	800aca6 <_puts_r+0x9a>
 800ac9a:	89a3      	ldrh	r3, [r4, #12]
 800ac9c:	059b      	lsls	r3, r3, #22
 800ac9e:	d402      	bmi.n	800aca6 <_puts_r+0x9a>
 800aca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aca2:	f7ff f88d 	bl	8009dc0 <__retarget_lock_release_recursive>
 800aca6:	4628      	mov	r0, r5
 800aca8:	bd70      	pop	{r4, r5, r6, pc}
 800acaa:	2b00      	cmp	r3, #0
 800acac:	da04      	bge.n	800acb8 <_puts_r+0xac>
 800acae:	69a2      	ldr	r2, [r4, #24]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	dc06      	bgt.n	800acc2 <_puts_r+0xb6>
 800acb4:	290a      	cmp	r1, #10
 800acb6:	d004      	beq.n	800acc2 <_puts_r+0xb6>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	6022      	str	r2, [r4, #0]
 800acbe:	7019      	strb	r1, [r3, #0]
 800acc0:	e7c5      	b.n	800ac4e <_puts_r+0x42>
 800acc2:	4622      	mov	r2, r4
 800acc4:	4628      	mov	r0, r5
 800acc6:	f000 ffa7 	bl	800bc18 <__swbuf_r>
 800acca:	3001      	adds	r0, #1
 800accc:	d1bf      	bne.n	800ac4e <_puts_r+0x42>
 800acce:	e7df      	b.n	800ac90 <_puts_r+0x84>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	250a      	movs	r5, #10
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	6022      	str	r2, [r4, #0]
 800acd8:	701d      	strb	r5, [r3, #0]
 800acda:	e7db      	b.n	800ac94 <_puts_r+0x88>
 800acdc:	0800e83c 	.word	0x0800e83c
 800ace0:	0800e85c 	.word	0x0800e85c
 800ace4:	0800e81c 	.word	0x0800e81c

0800ace8 <puts>:
 800ace8:	4b02      	ldr	r3, [pc, #8]	; (800acf4 <puts+0xc>)
 800acea:	4601      	mov	r1, r0
 800acec:	6818      	ldr	r0, [r3, #0]
 800acee:	f7ff bf8d 	b.w	800ac0c <_puts_r>
 800acf2:	bf00      	nop
 800acf4:	20000010 	.word	0x20000010

0800acf8 <cleanup_glue>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	460c      	mov	r4, r1
 800acfc:	6809      	ldr	r1, [r1, #0]
 800acfe:	4605      	mov	r5, r0
 800ad00:	b109      	cbz	r1, 800ad06 <cleanup_glue+0xe>
 800ad02:	f7ff fff9 	bl	800acf8 <cleanup_glue>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4628      	mov	r0, r5
 800ad0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad0e:	f003 b88d 	b.w	800de2c <_free_r>
	...

0800ad14 <_reclaim_reent>:
 800ad14:	4b2c      	ldr	r3, [pc, #176]	; (800adc8 <_reclaim_reent+0xb4>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4283      	cmp	r3, r0
 800ad1a:	b570      	push	{r4, r5, r6, lr}
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	d051      	beq.n	800adc4 <_reclaim_reent+0xb0>
 800ad20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ad22:	b143      	cbz	r3, 800ad36 <_reclaim_reent+0x22>
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d14a      	bne.n	800adc0 <_reclaim_reent+0xac>
 800ad2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad2c:	6819      	ldr	r1, [r3, #0]
 800ad2e:	b111      	cbz	r1, 800ad36 <_reclaim_reent+0x22>
 800ad30:	4620      	mov	r0, r4
 800ad32:	f003 f87b 	bl	800de2c <_free_r>
 800ad36:	6961      	ldr	r1, [r4, #20]
 800ad38:	b111      	cbz	r1, 800ad40 <_reclaim_reent+0x2c>
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f003 f876 	bl	800de2c <_free_r>
 800ad40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ad42:	b111      	cbz	r1, 800ad4a <_reclaim_reent+0x36>
 800ad44:	4620      	mov	r0, r4
 800ad46:	f003 f871 	bl	800de2c <_free_r>
 800ad4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ad4c:	b111      	cbz	r1, 800ad54 <_reclaim_reent+0x40>
 800ad4e:	4620      	mov	r0, r4
 800ad50:	f003 f86c 	bl	800de2c <_free_r>
 800ad54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ad56:	b111      	cbz	r1, 800ad5e <_reclaim_reent+0x4a>
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f003 f867 	bl	800de2c <_free_r>
 800ad5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ad60:	b111      	cbz	r1, 800ad68 <_reclaim_reent+0x54>
 800ad62:	4620      	mov	r0, r4
 800ad64:	f003 f862 	bl	800de2c <_free_r>
 800ad68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ad6a:	b111      	cbz	r1, 800ad72 <_reclaim_reent+0x5e>
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f003 f85d 	bl	800de2c <_free_r>
 800ad72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ad74:	b111      	cbz	r1, 800ad7c <_reclaim_reent+0x68>
 800ad76:	4620      	mov	r0, r4
 800ad78:	f003 f858 	bl	800de2c <_free_r>
 800ad7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad7e:	b111      	cbz	r1, 800ad86 <_reclaim_reent+0x72>
 800ad80:	4620      	mov	r0, r4
 800ad82:	f003 f853 	bl	800de2c <_free_r>
 800ad86:	69a3      	ldr	r3, [r4, #24]
 800ad88:	b1e3      	cbz	r3, 800adc4 <_reclaim_reent+0xb0>
 800ad8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	4798      	blx	r3
 800ad90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ad92:	b1b9      	cbz	r1, 800adc4 <_reclaim_reent+0xb0>
 800ad94:	4620      	mov	r0, r4
 800ad96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad9a:	f7ff bfad 	b.w	800acf8 <cleanup_glue>
 800ad9e:	5949      	ldr	r1, [r1, r5]
 800ada0:	b941      	cbnz	r1, 800adb4 <_reclaim_reent+0xa0>
 800ada2:	3504      	adds	r5, #4
 800ada4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ada6:	2d80      	cmp	r5, #128	; 0x80
 800ada8:	68d9      	ldr	r1, [r3, #12]
 800adaa:	d1f8      	bne.n	800ad9e <_reclaim_reent+0x8a>
 800adac:	4620      	mov	r0, r4
 800adae:	f003 f83d 	bl	800de2c <_free_r>
 800adb2:	e7ba      	b.n	800ad2a <_reclaim_reent+0x16>
 800adb4:	680e      	ldr	r6, [r1, #0]
 800adb6:	4620      	mov	r0, r4
 800adb8:	f003 f838 	bl	800de2c <_free_r>
 800adbc:	4631      	mov	r1, r6
 800adbe:	e7ef      	b.n	800ada0 <_reclaim_reent+0x8c>
 800adc0:	2500      	movs	r5, #0
 800adc2:	e7ef      	b.n	800ada4 <_reclaim_reent+0x90>
 800adc4:	bd70      	pop	{r4, r5, r6, pc}
 800adc6:	bf00      	nop
 800adc8:	20000010 	.word	0x20000010

0800adcc <_sbrk_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d06      	ldr	r5, [pc, #24]	; (800ade8 <_sbrk_r+0x1c>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	602b      	str	r3, [r5, #0]
 800add8:	f7f7 f812 	bl	8001e00 <_sbrk>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_sbrk_r+0x1a>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_sbrk_r+0x1a>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	20001e40 	.word	0x20001e40

0800adec <nanf>:
 800adec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800adf4 <nanf+0x8>
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	7fc00000 	.word	0x7fc00000

0800adf8 <siprintf>:
 800adf8:	b40e      	push	{r1, r2, r3}
 800adfa:	b500      	push	{lr}
 800adfc:	b09c      	sub	sp, #112	; 0x70
 800adfe:	ab1d      	add	r3, sp, #116	; 0x74
 800ae00:	9002      	str	r0, [sp, #8]
 800ae02:	9006      	str	r0, [sp, #24]
 800ae04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae08:	4809      	ldr	r0, [pc, #36]	; (800ae30 <siprintf+0x38>)
 800ae0a:	9107      	str	r1, [sp, #28]
 800ae0c:	9104      	str	r1, [sp, #16]
 800ae0e:	4909      	ldr	r1, [pc, #36]	; (800ae34 <siprintf+0x3c>)
 800ae10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae14:	9105      	str	r1, [sp, #20]
 800ae16:	6800      	ldr	r0, [r0, #0]
 800ae18:	9301      	str	r3, [sp, #4]
 800ae1a:	a902      	add	r1, sp, #8
 800ae1c:	f003 f8ae 	bl	800df7c <_svfiprintf_r>
 800ae20:	9b02      	ldr	r3, [sp, #8]
 800ae22:	2200      	movs	r2, #0
 800ae24:	701a      	strb	r2, [r3, #0]
 800ae26:	b01c      	add	sp, #112	; 0x70
 800ae28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae2c:	b003      	add	sp, #12
 800ae2e:	4770      	bx	lr
 800ae30:	20000010 	.word	0x20000010
 800ae34:	ffff0208 	.word	0xffff0208

0800ae38 <__sread>:
 800ae38:	b510      	push	{r4, lr}
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae40:	f003 f99c 	bl	800e17c <_read_r>
 800ae44:	2800      	cmp	r0, #0
 800ae46:	bfab      	itete	ge
 800ae48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae4c:	181b      	addge	r3, r3, r0
 800ae4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae52:	bfac      	ite	ge
 800ae54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae56:	81a3      	strhlt	r3, [r4, #12]
 800ae58:	bd10      	pop	{r4, pc}

0800ae5a <__swrite>:
 800ae5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5e:	461f      	mov	r7, r3
 800ae60:	898b      	ldrh	r3, [r1, #12]
 800ae62:	05db      	lsls	r3, r3, #23
 800ae64:	4605      	mov	r5, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	4616      	mov	r6, r2
 800ae6a:	d505      	bpl.n	800ae78 <__swrite+0x1e>
 800ae6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae70:	2302      	movs	r3, #2
 800ae72:	2200      	movs	r2, #0
 800ae74:	f002 fa64 	bl	800d340 <_lseek_r>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	4632      	mov	r2, r6
 800ae86:	463b      	mov	r3, r7
 800ae88:	4628      	mov	r0, r5
 800ae8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	f000 bf15 	b.w	800bcbc <_write_r>

0800ae92 <__sseek>:
 800ae92:	b510      	push	{r4, lr}
 800ae94:	460c      	mov	r4, r1
 800ae96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9a:	f002 fa51 	bl	800d340 <_lseek_r>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	bf15      	itete	ne
 800aea4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aeaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aeae:	81a3      	strheq	r3, [r4, #12]
 800aeb0:	bf18      	it	ne
 800aeb2:	81a3      	strhne	r3, [r4, #12]
 800aeb4:	bd10      	pop	{r4, pc}

0800aeb6 <__sclose>:
 800aeb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeba:	f000 bf7f 	b.w	800bdbc <_close_r>

0800aebe <sulp>:
 800aebe:	b570      	push	{r4, r5, r6, lr}
 800aec0:	4604      	mov	r4, r0
 800aec2:	460d      	mov	r5, r1
 800aec4:	ec45 4b10 	vmov	d0, r4, r5
 800aec8:	4616      	mov	r6, r2
 800aeca:	f002 fe49 	bl	800db60 <__ulp>
 800aece:	ec51 0b10 	vmov	r0, r1, d0
 800aed2:	b17e      	cbz	r6, 800aef4 <sulp+0x36>
 800aed4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aed8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aedc:	2b00      	cmp	r3, #0
 800aede:	dd09      	ble.n	800aef4 <sulp+0x36>
 800aee0:	051b      	lsls	r3, r3, #20
 800aee2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aee6:	2400      	movs	r4, #0
 800aee8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aeec:	4622      	mov	r2, r4
 800aeee:	462b      	mov	r3, r5
 800aef0:	f7f5 fb82 	bl	80005f8 <__aeabi_dmul>
 800aef4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aef8 <_strtod_l>:
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	ed2d 8b02 	vpush	{d8}
 800af00:	b09d      	sub	sp, #116	; 0x74
 800af02:	461f      	mov	r7, r3
 800af04:	2300      	movs	r3, #0
 800af06:	9318      	str	r3, [sp, #96]	; 0x60
 800af08:	4ba2      	ldr	r3, [pc, #648]	; (800b194 <_strtod_l+0x29c>)
 800af0a:	9213      	str	r2, [sp, #76]	; 0x4c
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	9305      	str	r3, [sp, #20]
 800af10:	4604      	mov	r4, r0
 800af12:	4618      	mov	r0, r3
 800af14:	4688      	mov	r8, r1
 800af16:	f7f5 f95b 	bl	80001d0 <strlen>
 800af1a:	f04f 0a00 	mov.w	sl, #0
 800af1e:	4605      	mov	r5, r0
 800af20:	f04f 0b00 	mov.w	fp, #0
 800af24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800af28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af2a:	781a      	ldrb	r2, [r3, #0]
 800af2c:	2a2b      	cmp	r2, #43	; 0x2b
 800af2e:	d04e      	beq.n	800afce <_strtod_l+0xd6>
 800af30:	d83b      	bhi.n	800afaa <_strtod_l+0xb2>
 800af32:	2a0d      	cmp	r2, #13
 800af34:	d834      	bhi.n	800afa0 <_strtod_l+0xa8>
 800af36:	2a08      	cmp	r2, #8
 800af38:	d834      	bhi.n	800afa4 <_strtod_l+0xac>
 800af3a:	2a00      	cmp	r2, #0
 800af3c:	d03e      	beq.n	800afbc <_strtod_l+0xc4>
 800af3e:	2300      	movs	r3, #0
 800af40:	930a      	str	r3, [sp, #40]	; 0x28
 800af42:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800af44:	7833      	ldrb	r3, [r6, #0]
 800af46:	2b30      	cmp	r3, #48	; 0x30
 800af48:	f040 80b0 	bne.w	800b0ac <_strtod_l+0x1b4>
 800af4c:	7873      	ldrb	r3, [r6, #1]
 800af4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af52:	2b58      	cmp	r3, #88	; 0x58
 800af54:	d168      	bne.n	800b028 <_strtod_l+0x130>
 800af56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	ab18      	add	r3, sp, #96	; 0x60
 800af5c:	9702      	str	r7, [sp, #8]
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	4a8d      	ldr	r2, [pc, #564]	; (800b198 <_strtod_l+0x2a0>)
 800af62:	ab19      	add	r3, sp, #100	; 0x64
 800af64:	a917      	add	r1, sp, #92	; 0x5c
 800af66:	4620      	mov	r0, r4
 800af68:	f001 fede 	bl	800cd28 <__gethex>
 800af6c:	f010 0707 	ands.w	r7, r0, #7
 800af70:	4605      	mov	r5, r0
 800af72:	d005      	beq.n	800af80 <_strtod_l+0x88>
 800af74:	2f06      	cmp	r7, #6
 800af76:	d12c      	bne.n	800afd2 <_strtod_l+0xda>
 800af78:	3601      	adds	r6, #1
 800af7a:	2300      	movs	r3, #0
 800af7c:	9617      	str	r6, [sp, #92]	; 0x5c
 800af7e:	930a      	str	r3, [sp, #40]	; 0x28
 800af80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af82:	2b00      	cmp	r3, #0
 800af84:	f040 8590 	bne.w	800baa8 <_strtod_l+0xbb0>
 800af88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af8a:	b1eb      	cbz	r3, 800afc8 <_strtod_l+0xd0>
 800af8c:	4652      	mov	r2, sl
 800af8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af92:	ec43 2b10 	vmov	d0, r2, r3
 800af96:	b01d      	add	sp, #116	; 0x74
 800af98:	ecbd 8b02 	vpop	{d8}
 800af9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa0:	2a20      	cmp	r2, #32
 800afa2:	d1cc      	bne.n	800af3e <_strtod_l+0x46>
 800afa4:	3301      	adds	r3, #1
 800afa6:	9317      	str	r3, [sp, #92]	; 0x5c
 800afa8:	e7be      	b.n	800af28 <_strtod_l+0x30>
 800afaa:	2a2d      	cmp	r2, #45	; 0x2d
 800afac:	d1c7      	bne.n	800af3e <_strtod_l+0x46>
 800afae:	2201      	movs	r2, #1
 800afb0:	920a      	str	r2, [sp, #40]	; 0x28
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	9217      	str	r2, [sp, #92]	; 0x5c
 800afb6:	785b      	ldrb	r3, [r3, #1]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1c2      	bne.n	800af42 <_strtod_l+0x4a>
 800afbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afbe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f040 856e 	bne.w	800baa4 <_strtod_l+0xbac>
 800afc8:	4652      	mov	r2, sl
 800afca:	465b      	mov	r3, fp
 800afcc:	e7e1      	b.n	800af92 <_strtod_l+0x9a>
 800afce:	2200      	movs	r2, #0
 800afd0:	e7ee      	b.n	800afb0 <_strtod_l+0xb8>
 800afd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800afd4:	b13a      	cbz	r2, 800afe6 <_strtod_l+0xee>
 800afd6:	2135      	movs	r1, #53	; 0x35
 800afd8:	a81a      	add	r0, sp, #104	; 0x68
 800afda:	f002 fecc 	bl	800dd76 <__copybits>
 800afde:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afe0:	4620      	mov	r0, r4
 800afe2:	f002 fa8b 	bl	800d4fc <_Bfree>
 800afe6:	3f01      	subs	r7, #1
 800afe8:	2f04      	cmp	r7, #4
 800afea:	d806      	bhi.n	800affa <_strtod_l+0x102>
 800afec:	e8df f007 	tbb	[pc, r7]
 800aff0:	1714030a 	.word	0x1714030a
 800aff4:	0a          	.byte	0x0a
 800aff5:	00          	.byte	0x00
 800aff6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800affa:	0728      	lsls	r0, r5, #28
 800affc:	d5c0      	bpl.n	800af80 <_strtod_l+0x88>
 800affe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b002:	e7bd      	b.n	800af80 <_strtod_l+0x88>
 800b004:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b008:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b00a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b00e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b012:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b016:	e7f0      	b.n	800affa <_strtod_l+0x102>
 800b018:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b19c <_strtod_l+0x2a4>
 800b01c:	e7ed      	b.n	800affa <_strtod_l+0x102>
 800b01e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b022:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b026:	e7e8      	b.n	800affa <_strtod_l+0x102>
 800b028:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b02e:	785b      	ldrb	r3, [r3, #1]
 800b030:	2b30      	cmp	r3, #48	; 0x30
 800b032:	d0f9      	beq.n	800b028 <_strtod_l+0x130>
 800b034:	2b00      	cmp	r3, #0
 800b036:	d0a3      	beq.n	800af80 <_strtod_l+0x88>
 800b038:	2301      	movs	r3, #1
 800b03a:	f04f 0900 	mov.w	r9, #0
 800b03e:	9304      	str	r3, [sp, #16]
 800b040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b042:	9308      	str	r3, [sp, #32]
 800b044:	f8cd 901c 	str.w	r9, [sp, #28]
 800b048:	464f      	mov	r7, r9
 800b04a:	220a      	movs	r2, #10
 800b04c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b04e:	7806      	ldrb	r6, [r0, #0]
 800b050:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b054:	b2d9      	uxtb	r1, r3
 800b056:	2909      	cmp	r1, #9
 800b058:	d92a      	bls.n	800b0b0 <_strtod_l+0x1b8>
 800b05a:	9905      	ldr	r1, [sp, #20]
 800b05c:	462a      	mov	r2, r5
 800b05e:	f003 f8a7 	bl	800e1b0 <strncmp>
 800b062:	b398      	cbz	r0, 800b0cc <_strtod_l+0x1d4>
 800b064:	2000      	movs	r0, #0
 800b066:	4632      	mov	r2, r6
 800b068:	463d      	mov	r5, r7
 800b06a:	9005      	str	r0, [sp, #20]
 800b06c:	4603      	mov	r3, r0
 800b06e:	2a65      	cmp	r2, #101	; 0x65
 800b070:	d001      	beq.n	800b076 <_strtod_l+0x17e>
 800b072:	2a45      	cmp	r2, #69	; 0x45
 800b074:	d118      	bne.n	800b0a8 <_strtod_l+0x1b0>
 800b076:	b91d      	cbnz	r5, 800b080 <_strtod_l+0x188>
 800b078:	9a04      	ldr	r2, [sp, #16]
 800b07a:	4302      	orrs	r2, r0
 800b07c:	d09e      	beq.n	800afbc <_strtod_l+0xc4>
 800b07e:	2500      	movs	r5, #0
 800b080:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b084:	f108 0201 	add.w	r2, r8, #1
 800b088:	9217      	str	r2, [sp, #92]	; 0x5c
 800b08a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b08e:	2a2b      	cmp	r2, #43	; 0x2b
 800b090:	d075      	beq.n	800b17e <_strtod_l+0x286>
 800b092:	2a2d      	cmp	r2, #45	; 0x2d
 800b094:	d07b      	beq.n	800b18e <_strtod_l+0x296>
 800b096:	f04f 0c00 	mov.w	ip, #0
 800b09a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b09e:	2909      	cmp	r1, #9
 800b0a0:	f240 8082 	bls.w	800b1a8 <_strtod_l+0x2b0>
 800b0a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b0a8:	2600      	movs	r6, #0
 800b0aa:	e09d      	b.n	800b1e8 <_strtod_l+0x2f0>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e7c4      	b.n	800b03a <_strtod_l+0x142>
 800b0b0:	2f08      	cmp	r7, #8
 800b0b2:	bfd8      	it	le
 800b0b4:	9907      	ldrle	r1, [sp, #28]
 800b0b6:	f100 0001 	add.w	r0, r0, #1
 800b0ba:	bfda      	itte	le
 800b0bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800b0c0:	9307      	strle	r3, [sp, #28]
 800b0c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b0c6:	3701      	adds	r7, #1
 800b0c8:	9017      	str	r0, [sp, #92]	; 0x5c
 800b0ca:	e7bf      	b.n	800b04c <_strtod_l+0x154>
 800b0cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0ce:	195a      	adds	r2, r3, r5
 800b0d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0d2:	5d5a      	ldrb	r2, [r3, r5]
 800b0d4:	2f00      	cmp	r7, #0
 800b0d6:	d037      	beq.n	800b148 <_strtod_l+0x250>
 800b0d8:	9005      	str	r0, [sp, #20]
 800b0da:	463d      	mov	r5, r7
 800b0dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b0e0:	2b09      	cmp	r3, #9
 800b0e2:	d912      	bls.n	800b10a <_strtod_l+0x212>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e7c2      	b.n	800b06e <_strtod_l+0x176>
 800b0e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0ea:	1c5a      	adds	r2, r3, #1
 800b0ec:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0ee:	785a      	ldrb	r2, [r3, #1]
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	2a30      	cmp	r2, #48	; 0x30
 800b0f4:	d0f8      	beq.n	800b0e8 <_strtod_l+0x1f0>
 800b0f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b0fa:	2b08      	cmp	r3, #8
 800b0fc:	f200 84d9 	bhi.w	800bab2 <_strtod_l+0xbba>
 800b100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b102:	9005      	str	r0, [sp, #20]
 800b104:	2000      	movs	r0, #0
 800b106:	9308      	str	r3, [sp, #32]
 800b108:	4605      	mov	r5, r0
 800b10a:	3a30      	subs	r2, #48	; 0x30
 800b10c:	f100 0301 	add.w	r3, r0, #1
 800b110:	d014      	beq.n	800b13c <_strtod_l+0x244>
 800b112:	9905      	ldr	r1, [sp, #20]
 800b114:	4419      	add	r1, r3
 800b116:	9105      	str	r1, [sp, #20]
 800b118:	462b      	mov	r3, r5
 800b11a:	eb00 0e05 	add.w	lr, r0, r5
 800b11e:	210a      	movs	r1, #10
 800b120:	4573      	cmp	r3, lr
 800b122:	d113      	bne.n	800b14c <_strtod_l+0x254>
 800b124:	182b      	adds	r3, r5, r0
 800b126:	2b08      	cmp	r3, #8
 800b128:	f105 0501 	add.w	r5, r5, #1
 800b12c:	4405      	add	r5, r0
 800b12e:	dc1c      	bgt.n	800b16a <_strtod_l+0x272>
 800b130:	9907      	ldr	r1, [sp, #28]
 800b132:	230a      	movs	r3, #10
 800b134:	fb03 2301 	mla	r3, r3, r1, r2
 800b138:	9307      	str	r3, [sp, #28]
 800b13a:	2300      	movs	r3, #0
 800b13c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b13e:	1c51      	adds	r1, r2, #1
 800b140:	9117      	str	r1, [sp, #92]	; 0x5c
 800b142:	7852      	ldrb	r2, [r2, #1]
 800b144:	4618      	mov	r0, r3
 800b146:	e7c9      	b.n	800b0dc <_strtod_l+0x1e4>
 800b148:	4638      	mov	r0, r7
 800b14a:	e7d2      	b.n	800b0f2 <_strtod_l+0x1fa>
 800b14c:	2b08      	cmp	r3, #8
 800b14e:	dc04      	bgt.n	800b15a <_strtod_l+0x262>
 800b150:	9e07      	ldr	r6, [sp, #28]
 800b152:	434e      	muls	r6, r1
 800b154:	9607      	str	r6, [sp, #28]
 800b156:	3301      	adds	r3, #1
 800b158:	e7e2      	b.n	800b120 <_strtod_l+0x228>
 800b15a:	f103 0c01 	add.w	ip, r3, #1
 800b15e:	f1bc 0f10 	cmp.w	ip, #16
 800b162:	bfd8      	it	le
 800b164:	fb01 f909 	mulle.w	r9, r1, r9
 800b168:	e7f5      	b.n	800b156 <_strtod_l+0x25e>
 800b16a:	2d10      	cmp	r5, #16
 800b16c:	bfdc      	itt	le
 800b16e:	230a      	movle	r3, #10
 800b170:	fb03 2909 	mlale	r9, r3, r9, r2
 800b174:	e7e1      	b.n	800b13a <_strtod_l+0x242>
 800b176:	2300      	movs	r3, #0
 800b178:	9305      	str	r3, [sp, #20]
 800b17a:	2301      	movs	r3, #1
 800b17c:	e77c      	b.n	800b078 <_strtod_l+0x180>
 800b17e:	f04f 0c00 	mov.w	ip, #0
 800b182:	f108 0202 	add.w	r2, r8, #2
 800b186:	9217      	str	r2, [sp, #92]	; 0x5c
 800b188:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b18c:	e785      	b.n	800b09a <_strtod_l+0x1a2>
 800b18e:	f04f 0c01 	mov.w	ip, #1
 800b192:	e7f6      	b.n	800b182 <_strtod_l+0x28a>
 800b194:	0800eb08 	.word	0x0800eb08
 800b198:	0800e8bc 	.word	0x0800e8bc
 800b19c:	7ff00000 	.word	0x7ff00000
 800b1a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1a2:	1c51      	adds	r1, r2, #1
 800b1a4:	9117      	str	r1, [sp, #92]	; 0x5c
 800b1a6:	7852      	ldrb	r2, [r2, #1]
 800b1a8:	2a30      	cmp	r2, #48	; 0x30
 800b1aa:	d0f9      	beq.n	800b1a0 <_strtod_l+0x2a8>
 800b1ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b1b0:	2908      	cmp	r1, #8
 800b1b2:	f63f af79 	bhi.w	800b0a8 <_strtod_l+0x1b0>
 800b1b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b1ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1bc:	9206      	str	r2, [sp, #24]
 800b1be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b1c0:	1c51      	adds	r1, r2, #1
 800b1c2:	9117      	str	r1, [sp, #92]	; 0x5c
 800b1c4:	7852      	ldrb	r2, [r2, #1]
 800b1c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b1ca:	2e09      	cmp	r6, #9
 800b1cc:	d937      	bls.n	800b23e <_strtod_l+0x346>
 800b1ce:	9e06      	ldr	r6, [sp, #24]
 800b1d0:	1b89      	subs	r1, r1, r6
 800b1d2:	2908      	cmp	r1, #8
 800b1d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b1d8:	dc02      	bgt.n	800b1e0 <_strtod_l+0x2e8>
 800b1da:	4576      	cmp	r6, lr
 800b1dc:	bfa8      	it	ge
 800b1de:	4676      	movge	r6, lr
 800b1e0:	f1bc 0f00 	cmp.w	ip, #0
 800b1e4:	d000      	beq.n	800b1e8 <_strtod_l+0x2f0>
 800b1e6:	4276      	negs	r6, r6
 800b1e8:	2d00      	cmp	r5, #0
 800b1ea:	d14d      	bne.n	800b288 <_strtod_l+0x390>
 800b1ec:	9904      	ldr	r1, [sp, #16]
 800b1ee:	4301      	orrs	r1, r0
 800b1f0:	f47f aec6 	bne.w	800af80 <_strtod_l+0x88>
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f47f aee1 	bne.w	800afbc <_strtod_l+0xc4>
 800b1fa:	2a69      	cmp	r2, #105	; 0x69
 800b1fc:	d027      	beq.n	800b24e <_strtod_l+0x356>
 800b1fe:	dc24      	bgt.n	800b24a <_strtod_l+0x352>
 800b200:	2a49      	cmp	r2, #73	; 0x49
 800b202:	d024      	beq.n	800b24e <_strtod_l+0x356>
 800b204:	2a4e      	cmp	r2, #78	; 0x4e
 800b206:	f47f aed9 	bne.w	800afbc <_strtod_l+0xc4>
 800b20a:	499f      	ldr	r1, [pc, #636]	; (800b488 <_strtod_l+0x590>)
 800b20c:	a817      	add	r0, sp, #92	; 0x5c
 800b20e:	f001 ffe3 	bl	800d1d8 <__match>
 800b212:	2800      	cmp	r0, #0
 800b214:	f43f aed2 	beq.w	800afbc <_strtod_l+0xc4>
 800b218:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	2b28      	cmp	r3, #40	; 0x28
 800b21e:	d12d      	bne.n	800b27c <_strtod_l+0x384>
 800b220:	499a      	ldr	r1, [pc, #616]	; (800b48c <_strtod_l+0x594>)
 800b222:	aa1a      	add	r2, sp, #104	; 0x68
 800b224:	a817      	add	r0, sp, #92	; 0x5c
 800b226:	f001 ffeb 	bl	800d200 <__hexnan>
 800b22a:	2805      	cmp	r0, #5
 800b22c:	d126      	bne.n	800b27c <_strtod_l+0x384>
 800b22e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b230:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b234:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b238:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b23c:	e6a0      	b.n	800af80 <_strtod_l+0x88>
 800b23e:	210a      	movs	r1, #10
 800b240:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b244:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b248:	e7b9      	b.n	800b1be <_strtod_l+0x2c6>
 800b24a:	2a6e      	cmp	r2, #110	; 0x6e
 800b24c:	e7db      	b.n	800b206 <_strtod_l+0x30e>
 800b24e:	4990      	ldr	r1, [pc, #576]	; (800b490 <_strtod_l+0x598>)
 800b250:	a817      	add	r0, sp, #92	; 0x5c
 800b252:	f001 ffc1 	bl	800d1d8 <__match>
 800b256:	2800      	cmp	r0, #0
 800b258:	f43f aeb0 	beq.w	800afbc <_strtod_l+0xc4>
 800b25c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b25e:	498d      	ldr	r1, [pc, #564]	; (800b494 <_strtod_l+0x59c>)
 800b260:	3b01      	subs	r3, #1
 800b262:	a817      	add	r0, sp, #92	; 0x5c
 800b264:	9317      	str	r3, [sp, #92]	; 0x5c
 800b266:	f001 ffb7 	bl	800d1d8 <__match>
 800b26a:	b910      	cbnz	r0, 800b272 <_strtod_l+0x37a>
 800b26c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b26e:	3301      	adds	r3, #1
 800b270:	9317      	str	r3, [sp, #92]	; 0x5c
 800b272:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b4a4 <_strtod_l+0x5ac>
 800b276:	f04f 0a00 	mov.w	sl, #0
 800b27a:	e681      	b.n	800af80 <_strtod_l+0x88>
 800b27c:	4886      	ldr	r0, [pc, #536]	; (800b498 <_strtod_l+0x5a0>)
 800b27e:	f002 ff8f 	bl	800e1a0 <nan>
 800b282:	ec5b ab10 	vmov	sl, fp, d0
 800b286:	e67b      	b.n	800af80 <_strtod_l+0x88>
 800b288:	9b05      	ldr	r3, [sp, #20]
 800b28a:	9807      	ldr	r0, [sp, #28]
 800b28c:	1af3      	subs	r3, r6, r3
 800b28e:	2f00      	cmp	r7, #0
 800b290:	bf08      	it	eq
 800b292:	462f      	moveq	r7, r5
 800b294:	2d10      	cmp	r5, #16
 800b296:	9306      	str	r3, [sp, #24]
 800b298:	46a8      	mov	r8, r5
 800b29a:	bfa8      	it	ge
 800b29c:	f04f 0810 	movge.w	r8, #16
 800b2a0:	f7f5 f930 	bl	8000504 <__aeabi_ui2d>
 800b2a4:	2d09      	cmp	r5, #9
 800b2a6:	4682      	mov	sl, r0
 800b2a8:	468b      	mov	fp, r1
 800b2aa:	dd13      	ble.n	800b2d4 <_strtod_l+0x3dc>
 800b2ac:	4b7b      	ldr	r3, [pc, #492]	; (800b49c <_strtod_l+0x5a4>)
 800b2ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b2b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b2b6:	f7f5 f99f 	bl	80005f8 <__aeabi_dmul>
 800b2ba:	4682      	mov	sl, r0
 800b2bc:	4648      	mov	r0, r9
 800b2be:	468b      	mov	fp, r1
 800b2c0:	f7f5 f920 	bl	8000504 <__aeabi_ui2d>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4650      	mov	r0, sl
 800b2ca:	4659      	mov	r1, fp
 800b2cc:	f7f4 ffde 	bl	800028c <__adddf3>
 800b2d0:	4682      	mov	sl, r0
 800b2d2:	468b      	mov	fp, r1
 800b2d4:	2d0f      	cmp	r5, #15
 800b2d6:	dc38      	bgt.n	800b34a <_strtod_l+0x452>
 800b2d8:	9b06      	ldr	r3, [sp, #24]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f43f ae50 	beq.w	800af80 <_strtod_l+0x88>
 800b2e0:	dd24      	ble.n	800b32c <_strtod_l+0x434>
 800b2e2:	2b16      	cmp	r3, #22
 800b2e4:	dc0b      	bgt.n	800b2fe <_strtod_l+0x406>
 800b2e6:	496d      	ldr	r1, [pc, #436]	; (800b49c <_strtod_l+0x5a4>)
 800b2e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2f0:	4652      	mov	r2, sl
 800b2f2:	465b      	mov	r3, fp
 800b2f4:	f7f5 f980 	bl	80005f8 <__aeabi_dmul>
 800b2f8:	4682      	mov	sl, r0
 800b2fa:	468b      	mov	fp, r1
 800b2fc:	e640      	b.n	800af80 <_strtod_l+0x88>
 800b2fe:	9a06      	ldr	r2, [sp, #24]
 800b300:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b304:	4293      	cmp	r3, r2
 800b306:	db20      	blt.n	800b34a <_strtod_l+0x452>
 800b308:	4c64      	ldr	r4, [pc, #400]	; (800b49c <_strtod_l+0x5a4>)
 800b30a:	f1c5 050f 	rsb	r5, r5, #15
 800b30e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b312:	4652      	mov	r2, sl
 800b314:	465b      	mov	r3, fp
 800b316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b31a:	f7f5 f96d 	bl	80005f8 <__aeabi_dmul>
 800b31e:	9b06      	ldr	r3, [sp, #24]
 800b320:	1b5d      	subs	r5, r3, r5
 800b322:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b326:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b32a:	e7e3      	b.n	800b2f4 <_strtod_l+0x3fc>
 800b32c:	9b06      	ldr	r3, [sp, #24]
 800b32e:	3316      	adds	r3, #22
 800b330:	db0b      	blt.n	800b34a <_strtod_l+0x452>
 800b332:	9b05      	ldr	r3, [sp, #20]
 800b334:	1b9e      	subs	r6, r3, r6
 800b336:	4b59      	ldr	r3, [pc, #356]	; (800b49c <_strtod_l+0x5a4>)
 800b338:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b33c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b340:	4650      	mov	r0, sl
 800b342:	4659      	mov	r1, fp
 800b344:	f7f5 fa82 	bl	800084c <__aeabi_ddiv>
 800b348:	e7d6      	b.n	800b2f8 <_strtod_l+0x400>
 800b34a:	9b06      	ldr	r3, [sp, #24]
 800b34c:	eba5 0808 	sub.w	r8, r5, r8
 800b350:	4498      	add	r8, r3
 800b352:	f1b8 0f00 	cmp.w	r8, #0
 800b356:	dd74      	ble.n	800b442 <_strtod_l+0x54a>
 800b358:	f018 030f 	ands.w	r3, r8, #15
 800b35c:	d00a      	beq.n	800b374 <_strtod_l+0x47c>
 800b35e:	494f      	ldr	r1, [pc, #316]	; (800b49c <_strtod_l+0x5a4>)
 800b360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b364:	4652      	mov	r2, sl
 800b366:	465b      	mov	r3, fp
 800b368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b36c:	f7f5 f944 	bl	80005f8 <__aeabi_dmul>
 800b370:	4682      	mov	sl, r0
 800b372:	468b      	mov	fp, r1
 800b374:	f038 080f 	bics.w	r8, r8, #15
 800b378:	d04f      	beq.n	800b41a <_strtod_l+0x522>
 800b37a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b37e:	dd22      	ble.n	800b3c6 <_strtod_l+0x4ce>
 800b380:	2500      	movs	r5, #0
 800b382:	462e      	mov	r6, r5
 800b384:	9507      	str	r5, [sp, #28]
 800b386:	9505      	str	r5, [sp, #20]
 800b388:	2322      	movs	r3, #34	; 0x22
 800b38a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b4a4 <_strtod_l+0x5ac>
 800b38e:	6023      	str	r3, [r4, #0]
 800b390:	f04f 0a00 	mov.w	sl, #0
 800b394:	9b07      	ldr	r3, [sp, #28]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f43f adf2 	beq.w	800af80 <_strtod_l+0x88>
 800b39c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f002 f8ac 	bl	800d4fc <_Bfree>
 800b3a4:	9905      	ldr	r1, [sp, #20]
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f002 f8a8 	bl	800d4fc <_Bfree>
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f002 f8a4 	bl	800d4fc <_Bfree>
 800b3b4:	9907      	ldr	r1, [sp, #28]
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f002 f8a0 	bl	800d4fc <_Bfree>
 800b3bc:	4629      	mov	r1, r5
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f002 f89c 	bl	800d4fc <_Bfree>
 800b3c4:	e5dc      	b.n	800af80 <_strtod_l+0x88>
 800b3c6:	4b36      	ldr	r3, [pc, #216]	; (800b4a0 <_strtod_l+0x5a8>)
 800b3c8:	9304      	str	r3, [sp, #16]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b3d0:	4650      	mov	r0, sl
 800b3d2:	4659      	mov	r1, fp
 800b3d4:	4699      	mov	r9, r3
 800b3d6:	f1b8 0f01 	cmp.w	r8, #1
 800b3da:	dc21      	bgt.n	800b420 <_strtod_l+0x528>
 800b3dc:	b10b      	cbz	r3, 800b3e2 <_strtod_l+0x4ea>
 800b3de:	4682      	mov	sl, r0
 800b3e0:	468b      	mov	fp, r1
 800b3e2:	4b2f      	ldr	r3, [pc, #188]	; (800b4a0 <_strtod_l+0x5a8>)
 800b3e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b3e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b3ec:	4652      	mov	r2, sl
 800b3ee:	465b      	mov	r3, fp
 800b3f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b3f4:	f7f5 f900 	bl	80005f8 <__aeabi_dmul>
 800b3f8:	4b2a      	ldr	r3, [pc, #168]	; (800b4a4 <_strtod_l+0x5ac>)
 800b3fa:	460a      	mov	r2, r1
 800b3fc:	400b      	ands	r3, r1
 800b3fe:	492a      	ldr	r1, [pc, #168]	; (800b4a8 <_strtod_l+0x5b0>)
 800b400:	428b      	cmp	r3, r1
 800b402:	4682      	mov	sl, r0
 800b404:	d8bc      	bhi.n	800b380 <_strtod_l+0x488>
 800b406:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b40a:	428b      	cmp	r3, r1
 800b40c:	bf86      	itte	hi
 800b40e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b4ac <_strtod_l+0x5b4>
 800b412:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b416:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b41a:	2300      	movs	r3, #0
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	e084      	b.n	800b52a <_strtod_l+0x632>
 800b420:	f018 0f01 	tst.w	r8, #1
 800b424:	d005      	beq.n	800b432 <_strtod_l+0x53a>
 800b426:	9b04      	ldr	r3, [sp, #16]
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	f7f5 f8e4 	bl	80005f8 <__aeabi_dmul>
 800b430:	2301      	movs	r3, #1
 800b432:	9a04      	ldr	r2, [sp, #16]
 800b434:	3208      	adds	r2, #8
 800b436:	f109 0901 	add.w	r9, r9, #1
 800b43a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b43e:	9204      	str	r2, [sp, #16]
 800b440:	e7c9      	b.n	800b3d6 <_strtod_l+0x4de>
 800b442:	d0ea      	beq.n	800b41a <_strtod_l+0x522>
 800b444:	f1c8 0800 	rsb	r8, r8, #0
 800b448:	f018 020f 	ands.w	r2, r8, #15
 800b44c:	d00a      	beq.n	800b464 <_strtod_l+0x56c>
 800b44e:	4b13      	ldr	r3, [pc, #76]	; (800b49c <_strtod_l+0x5a4>)
 800b450:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b454:	4650      	mov	r0, sl
 800b456:	4659      	mov	r1, fp
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f5 f9f6 	bl	800084c <__aeabi_ddiv>
 800b460:	4682      	mov	sl, r0
 800b462:	468b      	mov	fp, r1
 800b464:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b468:	d0d7      	beq.n	800b41a <_strtod_l+0x522>
 800b46a:	f1b8 0f1f 	cmp.w	r8, #31
 800b46e:	dd1f      	ble.n	800b4b0 <_strtod_l+0x5b8>
 800b470:	2500      	movs	r5, #0
 800b472:	462e      	mov	r6, r5
 800b474:	9507      	str	r5, [sp, #28]
 800b476:	9505      	str	r5, [sp, #20]
 800b478:	2322      	movs	r3, #34	; 0x22
 800b47a:	f04f 0a00 	mov.w	sl, #0
 800b47e:	f04f 0b00 	mov.w	fp, #0
 800b482:	6023      	str	r3, [r4, #0]
 800b484:	e786      	b.n	800b394 <_strtod_l+0x49c>
 800b486:	bf00      	nop
 800b488:	0800e88d 	.word	0x0800e88d
 800b48c:	0800e8d0 	.word	0x0800e8d0
 800b490:	0800e885 	.word	0x0800e885
 800b494:	0800ea14 	.word	0x0800ea14
 800b498:	0800ecc0 	.word	0x0800ecc0
 800b49c:	0800eba0 	.word	0x0800eba0
 800b4a0:	0800eb78 	.word	0x0800eb78
 800b4a4:	7ff00000 	.word	0x7ff00000
 800b4a8:	7ca00000 	.word	0x7ca00000
 800b4ac:	7fefffff 	.word	0x7fefffff
 800b4b0:	f018 0310 	ands.w	r3, r8, #16
 800b4b4:	bf18      	it	ne
 800b4b6:	236a      	movne	r3, #106	; 0x6a
 800b4b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b868 <_strtod_l+0x970>
 800b4bc:	9304      	str	r3, [sp, #16]
 800b4be:	4650      	mov	r0, sl
 800b4c0:	4659      	mov	r1, fp
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	f018 0f01 	tst.w	r8, #1
 800b4c8:	d004      	beq.n	800b4d4 <_strtod_l+0x5dc>
 800b4ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b4ce:	f7f5 f893 	bl	80005f8 <__aeabi_dmul>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b4d8:	f109 0908 	add.w	r9, r9, #8
 800b4dc:	d1f2      	bne.n	800b4c4 <_strtod_l+0x5cc>
 800b4de:	b10b      	cbz	r3, 800b4e4 <_strtod_l+0x5ec>
 800b4e0:	4682      	mov	sl, r0
 800b4e2:	468b      	mov	fp, r1
 800b4e4:	9b04      	ldr	r3, [sp, #16]
 800b4e6:	b1c3      	cbz	r3, 800b51a <_strtod_l+0x622>
 800b4e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b4ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	4659      	mov	r1, fp
 800b4f4:	dd11      	ble.n	800b51a <_strtod_l+0x622>
 800b4f6:	2b1f      	cmp	r3, #31
 800b4f8:	f340 8124 	ble.w	800b744 <_strtod_l+0x84c>
 800b4fc:	2b34      	cmp	r3, #52	; 0x34
 800b4fe:	bfde      	ittt	le
 800b500:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b504:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b508:	fa03 f202 	lslle.w	r2, r3, r2
 800b50c:	f04f 0a00 	mov.w	sl, #0
 800b510:	bfcc      	ite	gt
 800b512:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b516:	ea02 0b01 	andle.w	fp, r2, r1
 800b51a:	2200      	movs	r2, #0
 800b51c:	2300      	movs	r3, #0
 800b51e:	4650      	mov	r0, sl
 800b520:	4659      	mov	r1, fp
 800b522:	f7f5 fad1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b526:	2800      	cmp	r0, #0
 800b528:	d1a2      	bne.n	800b470 <_strtod_l+0x578>
 800b52a:	9b07      	ldr	r3, [sp, #28]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	9908      	ldr	r1, [sp, #32]
 800b530:	462b      	mov	r3, r5
 800b532:	463a      	mov	r2, r7
 800b534:	4620      	mov	r0, r4
 800b536:	f002 f849 	bl	800d5cc <__s2b>
 800b53a:	9007      	str	r0, [sp, #28]
 800b53c:	2800      	cmp	r0, #0
 800b53e:	f43f af1f 	beq.w	800b380 <_strtod_l+0x488>
 800b542:	9b05      	ldr	r3, [sp, #20]
 800b544:	1b9e      	subs	r6, r3, r6
 800b546:	9b06      	ldr	r3, [sp, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	bfb4      	ite	lt
 800b54c:	4633      	movlt	r3, r6
 800b54e:	2300      	movge	r3, #0
 800b550:	930c      	str	r3, [sp, #48]	; 0x30
 800b552:	9b06      	ldr	r3, [sp, #24]
 800b554:	2500      	movs	r5, #0
 800b556:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b55a:	9312      	str	r3, [sp, #72]	; 0x48
 800b55c:	462e      	mov	r6, r5
 800b55e:	9b07      	ldr	r3, [sp, #28]
 800b560:	4620      	mov	r0, r4
 800b562:	6859      	ldr	r1, [r3, #4]
 800b564:	f001 ff8a 	bl	800d47c <_Balloc>
 800b568:	9005      	str	r0, [sp, #20]
 800b56a:	2800      	cmp	r0, #0
 800b56c:	f43f af0c 	beq.w	800b388 <_strtod_l+0x490>
 800b570:	9b07      	ldr	r3, [sp, #28]
 800b572:	691a      	ldr	r2, [r3, #16]
 800b574:	3202      	adds	r2, #2
 800b576:	f103 010c 	add.w	r1, r3, #12
 800b57a:	0092      	lsls	r2, r2, #2
 800b57c:	300c      	adds	r0, #12
 800b57e:	f7fe fc20 	bl	8009dc2 <memcpy>
 800b582:	ec4b ab10 	vmov	d0, sl, fp
 800b586:	aa1a      	add	r2, sp, #104	; 0x68
 800b588:	a919      	add	r1, sp, #100	; 0x64
 800b58a:	4620      	mov	r0, r4
 800b58c:	f002 fb64 	bl	800dc58 <__d2b>
 800b590:	ec4b ab18 	vmov	d8, sl, fp
 800b594:	9018      	str	r0, [sp, #96]	; 0x60
 800b596:	2800      	cmp	r0, #0
 800b598:	f43f aef6 	beq.w	800b388 <_strtod_l+0x490>
 800b59c:	2101      	movs	r1, #1
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f002 f8ae 	bl	800d700 <__i2b>
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	f43f aeee 	beq.w	800b388 <_strtod_l+0x490>
 800b5ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b5ae:	9904      	ldr	r1, [sp, #16]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	bfab      	itete	ge
 800b5b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b5b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b5b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b5ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b5be:	bfac      	ite	ge
 800b5c0:	eb03 0902 	addge.w	r9, r3, r2
 800b5c4:	1ad7      	sublt	r7, r2, r3
 800b5c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b5c8:	eba3 0801 	sub.w	r8, r3, r1
 800b5cc:	4490      	add	r8, r2
 800b5ce:	4ba1      	ldr	r3, [pc, #644]	; (800b854 <_strtod_l+0x95c>)
 800b5d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b5d4:	4598      	cmp	r8, r3
 800b5d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b5da:	f280 80c7 	bge.w	800b76c <_strtod_l+0x874>
 800b5de:	eba3 0308 	sub.w	r3, r3, r8
 800b5e2:	2b1f      	cmp	r3, #31
 800b5e4:	eba2 0203 	sub.w	r2, r2, r3
 800b5e8:	f04f 0101 	mov.w	r1, #1
 800b5ec:	f300 80b1 	bgt.w	800b752 <_strtod_l+0x85a>
 800b5f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f4:	930d      	str	r3, [sp, #52]	; 0x34
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	9308      	str	r3, [sp, #32]
 800b5fa:	eb09 0802 	add.w	r8, r9, r2
 800b5fe:	9b04      	ldr	r3, [sp, #16]
 800b600:	45c1      	cmp	r9, r8
 800b602:	4417      	add	r7, r2
 800b604:	441f      	add	r7, r3
 800b606:	464b      	mov	r3, r9
 800b608:	bfa8      	it	ge
 800b60a:	4643      	movge	r3, r8
 800b60c:	42bb      	cmp	r3, r7
 800b60e:	bfa8      	it	ge
 800b610:	463b      	movge	r3, r7
 800b612:	2b00      	cmp	r3, #0
 800b614:	bfc2      	ittt	gt
 800b616:	eba8 0803 	subgt.w	r8, r8, r3
 800b61a:	1aff      	subgt	r7, r7, r3
 800b61c:	eba9 0903 	subgt.w	r9, r9, r3
 800b620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b622:	2b00      	cmp	r3, #0
 800b624:	dd17      	ble.n	800b656 <_strtod_l+0x75e>
 800b626:	4631      	mov	r1, r6
 800b628:	461a      	mov	r2, r3
 800b62a:	4620      	mov	r0, r4
 800b62c:	f002 f928 	bl	800d880 <__pow5mult>
 800b630:	4606      	mov	r6, r0
 800b632:	2800      	cmp	r0, #0
 800b634:	f43f aea8 	beq.w	800b388 <_strtod_l+0x490>
 800b638:	4601      	mov	r1, r0
 800b63a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b63c:	4620      	mov	r0, r4
 800b63e:	f002 f875 	bl	800d72c <__multiply>
 800b642:	900b      	str	r0, [sp, #44]	; 0x2c
 800b644:	2800      	cmp	r0, #0
 800b646:	f43f ae9f 	beq.w	800b388 <_strtod_l+0x490>
 800b64a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b64c:	4620      	mov	r0, r4
 800b64e:	f001 ff55 	bl	800d4fc <_Bfree>
 800b652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b654:	9318      	str	r3, [sp, #96]	; 0x60
 800b656:	f1b8 0f00 	cmp.w	r8, #0
 800b65a:	f300 808c 	bgt.w	800b776 <_strtod_l+0x87e>
 800b65e:	9b06      	ldr	r3, [sp, #24]
 800b660:	2b00      	cmp	r3, #0
 800b662:	dd08      	ble.n	800b676 <_strtod_l+0x77e>
 800b664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b666:	9905      	ldr	r1, [sp, #20]
 800b668:	4620      	mov	r0, r4
 800b66a:	f002 f909 	bl	800d880 <__pow5mult>
 800b66e:	9005      	str	r0, [sp, #20]
 800b670:	2800      	cmp	r0, #0
 800b672:	f43f ae89 	beq.w	800b388 <_strtod_l+0x490>
 800b676:	2f00      	cmp	r7, #0
 800b678:	dd08      	ble.n	800b68c <_strtod_l+0x794>
 800b67a:	9905      	ldr	r1, [sp, #20]
 800b67c:	463a      	mov	r2, r7
 800b67e:	4620      	mov	r0, r4
 800b680:	f002 f958 	bl	800d934 <__lshift>
 800b684:	9005      	str	r0, [sp, #20]
 800b686:	2800      	cmp	r0, #0
 800b688:	f43f ae7e 	beq.w	800b388 <_strtod_l+0x490>
 800b68c:	f1b9 0f00 	cmp.w	r9, #0
 800b690:	dd08      	ble.n	800b6a4 <_strtod_l+0x7ac>
 800b692:	4631      	mov	r1, r6
 800b694:	464a      	mov	r2, r9
 800b696:	4620      	mov	r0, r4
 800b698:	f002 f94c 	bl	800d934 <__lshift>
 800b69c:	4606      	mov	r6, r0
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	f43f ae72 	beq.w	800b388 <_strtod_l+0x490>
 800b6a4:	9a05      	ldr	r2, [sp, #20]
 800b6a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f002 f9cf 	bl	800da4c <__mdiff>
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	f43f ae69 	beq.w	800b388 <_strtod_l+0x490>
 800b6b6:	68c3      	ldr	r3, [r0, #12]
 800b6b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60c3      	str	r3, [r0, #12]
 800b6be:	4631      	mov	r1, r6
 800b6c0:	f002 f9a8 	bl	800da14 <__mcmp>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	da60      	bge.n	800b78a <_strtod_l+0x892>
 800b6c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ca:	ea53 030a 	orrs.w	r3, r3, sl
 800b6ce:	f040 8082 	bne.w	800b7d6 <_strtod_l+0x8de>
 800b6d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d17d      	bne.n	800b7d6 <_strtod_l+0x8de>
 800b6da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6de:	0d1b      	lsrs	r3, r3, #20
 800b6e0:	051b      	lsls	r3, r3, #20
 800b6e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b6e6:	d976      	bls.n	800b7d6 <_strtod_l+0x8de>
 800b6e8:	696b      	ldr	r3, [r5, #20]
 800b6ea:	b913      	cbnz	r3, 800b6f2 <_strtod_l+0x7fa>
 800b6ec:	692b      	ldr	r3, [r5, #16]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	dd71      	ble.n	800b7d6 <_strtod_l+0x8de>
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f002 f91c 	bl	800d934 <__lshift>
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4605      	mov	r5, r0
 800b700:	f002 f988 	bl	800da14 <__mcmp>
 800b704:	2800      	cmp	r0, #0
 800b706:	dd66      	ble.n	800b7d6 <_strtod_l+0x8de>
 800b708:	9904      	ldr	r1, [sp, #16]
 800b70a:	4a53      	ldr	r2, [pc, #332]	; (800b858 <_strtod_l+0x960>)
 800b70c:	465b      	mov	r3, fp
 800b70e:	2900      	cmp	r1, #0
 800b710:	f000 8081 	beq.w	800b816 <_strtod_l+0x91e>
 800b714:	ea02 010b 	and.w	r1, r2, fp
 800b718:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b71c:	dc7b      	bgt.n	800b816 <_strtod_l+0x91e>
 800b71e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b722:	f77f aea9 	ble.w	800b478 <_strtod_l+0x580>
 800b726:	4b4d      	ldr	r3, [pc, #308]	; (800b85c <_strtod_l+0x964>)
 800b728:	4650      	mov	r0, sl
 800b72a:	4659      	mov	r1, fp
 800b72c:	2200      	movs	r2, #0
 800b72e:	f7f4 ff63 	bl	80005f8 <__aeabi_dmul>
 800b732:	460b      	mov	r3, r1
 800b734:	4303      	orrs	r3, r0
 800b736:	bf08      	it	eq
 800b738:	2322      	moveq	r3, #34	; 0x22
 800b73a:	4682      	mov	sl, r0
 800b73c:	468b      	mov	fp, r1
 800b73e:	bf08      	it	eq
 800b740:	6023      	streq	r3, [r4, #0]
 800b742:	e62b      	b.n	800b39c <_strtod_l+0x4a4>
 800b744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b748:	fa02 f303 	lsl.w	r3, r2, r3
 800b74c:	ea03 0a0a 	and.w	sl, r3, sl
 800b750:	e6e3      	b.n	800b51a <_strtod_l+0x622>
 800b752:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b756:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b75a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b75e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b762:	fa01 f308 	lsl.w	r3, r1, r8
 800b766:	9308      	str	r3, [sp, #32]
 800b768:	910d      	str	r1, [sp, #52]	; 0x34
 800b76a:	e746      	b.n	800b5fa <_strtod_l+0x702>
 800b76c:	2300      	movs	r3, #0
 800b76e:	9308      	str	r3, [sp, #32]
 800b770:	2301      	movs	r3, #1
 800b772:	930d      	str	r3, [sp, #52]	; 0x34
 800b774:	e741      	b.n	800b5fa <_strtod_l+0x702>
 800b776:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b778:	4642      	mov	r2, r8
 800b77a:	4620      	mov	r0, r4
 800b77c:	f002 f8da 	bl	800d934 <__lshift>
 800b780:	9018      	str	r0, [sp, #96]	; 0x60
 800b782:	2800      	cmp	r0, #0
 800b784:	f47f af6b 	bne.w	800b65e <_strtod_l+0x766>
 800b788:	e5fe      	b.n	800b388 <_strtod_l+0x490>
 800b78a:	465f      	mov	r7, fp
 800b78c:	d16e      	bne.n	800b86c <_strtod_l+0x974>
 800b78e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b790:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b794:	b342      	cbz	r2, 800b7e8 <_strtod_l+0x8f0>
 800b796:	4a32      	ldr	r2, [pc, #200]	; (800b860 <_strtod_l+0x968>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d128      	bne.n	800b7ee <_strtod_l+0x8f6>
 800b79c:	9b04      	ldr	r3, [sp, #16]
 800b79e:	4651      	mov	r1, sl
 800b7a0:	b1eb      	cbz	r3, 800b7de <_strtod_l+0x8e6>
 800b7a2:	4b2d      	ldr	r3, [pc, #180]	; (800b858 <_strtod_l+0x960>)
 800b7a4:	403b      	ands	r3, r7
 800b7a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ae:	d819      	bhi.n	800b7e4 <_strtod_l+0x8ec>
 800b7b0:	0d1b      	lsrs	r3, r3, #20
 800b7b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ba:	4299      	cmp	r1, r3
 800b7bc:	d117      	bne.n	800b7ee <_strtod_l+0x8f6>
 800b7be:	4b29      	ldr	r3, [pc, #164]	; (800b864 <_strtod_l+0x96c>)
 800b7c0:	429f      	cmp	r7, r3
 800b7c2:	d102      	bne.n	800b7ca <_strtod_l+0x8d2>
 800b7c4:	3101      	adds	r1, #1
 800b7c6:	f43f addf 	beq.w	800b388 <_strtod_l+0x490>
 800b7ca:	4b23      	ldr	r3, [pc, #140]	; (800b858 <_strtod_l+0x960>)
 800b7cc:	403b      	ands	r3, r7
 800b7ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b7d2:	f04f 0a00 	mov.w	sl, #0
 800b7d6:	9b04      	ldr	r3, [sp, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1a4      	bne.n	800b726 <_strtod_l+0x82e>
 800b7dc:	e5de      	b.n	800b39c <_strtod_l+0x4a4>
 800b7de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7e2:	e7ea      	b.n	800b7ba <_strtod_l+0x8c2>
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	e7e8      	b.n	800b7ba <_strtod_l+0x8c2>
 800b7e8:	ea53 030a 	orrs.w	r3, r3, sl
 800b7ec:	d08c      	beq.n	800b708 <_strtod_l+0x810>
 800b7ee:	9b08      	ldr	r3, [sp, #32]
 800b7f0:	b1db      	cbz	r3, 800b82a <_strtod_l+0x932>
 800b7f2:	423b      	tst	r3, r7
 800b7f4:	d0ef      	beq.n	800b7d6 <_strtod_l+0x8de>
 800b7f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f8:	9a04      	ldr	r2, [sp, #16]
 800b7fa:	4650      	mov	r0, sl
 800b7fc:	4659      	mov	r1, fp
 800b7fe:	b1c3      	cbz	r3, 800b832 <_strtod_l+0x93a>
 800b800:	f7ff fb5d 	bl	800aebe <sulp>
 800b804:	4602      	mov	r2, r0
 800b806:	460b      	mov	r3, r1
 800b808:	ec51 0b18 	vmov	r0, r1, d8
 800b80c:	f7f4 fd3e 	bl	800028c <__adddf3>
 800b810:	4682      	mov	sl, r0
 800b812:	468b      	mov	fp, r1
 800b814:	e7df      	b.n	800b7d6 <_strtod_l+0x8de>
 800b816:	4013      	ands	r3, r2
 800b818:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b81c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b820:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b824:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b828:	e7d5      	b.n	800b7d6 <_strtod_l+0x8de>
 800b82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b82c:	ea13 0f0a 	tst.w	r3, sl
 800b830:	e7e0      	b.n	800b7f4 <_strtod_l+0x8fc>
 800b832:	f7ff fb44 	bl	800aebe <sulp>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	ec51 0b18 	vmov	r0, r1, d8
 800b83e:	f7f4 fd23 	bl	8000288 <__aeabi_dsub>
 800b842:	2200      	movs	r2, #0
 800b844:	2300      	movs	r3, #0
 800b846:	4682      	mov	sl, r0
 800b848:	468b      	mov	fp, r1
 800b84a:	f7f5 f93d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b84e:	2800      	cmp	r0, #0
 800b850:	d0c1      	beq.n	800b7d6 <_strtod_l+0x8de>
 800b852:	e611      	b.n	800b478 <_strtod_l+0x580>
 800b854:	fffffc02 	.word	0xfffffc02
 800b858:	7ff00000 	.word	0x7ff00000
 800b85c:	39500000 	.word	0x39500000
 800b860:	000fffff 	.word	0x000fffff
 800b864:	7fefffff 	.word	0x7fefffff
 800b868:	0800e8e8 	.word	0x0800e8e8
 800b86c:	4631      	mov	r1, r6
 800b86e:	4628      	mov	r0, r5
 800b870:	f002 fa4e 	bl	800dd10 <__ratio>
 800b874:	ec59 8b10 	vmov	r8, r9, d0
 800b878:	ee10 0a10 	vmov	r0, s0
 800b87c:	2200      	movs	r2, #0
 800b87e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b882:	4649      	mov	r1, r9
 800b884:	f7f5 f934 	bl	8000af0 <__aeabi_dcmple>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d07a      	beq.n	800b982 <_strtod_l+0xa8a>
 800b88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d04a      	beq.n	800b928 <_strtod_l+0xa30>
 800b892:	4b95      	ldr	r3, [pc, #596]	; (800bae8 <_strtod_l+0xbf0>)
 800b894:	2200      	movs	r2, #0
 800b896:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b89a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bae8 <_strtod_l+0xbf0>
 800b89e:	f04f 0800 	mov.w	r8, #0
 800b8a2:	4b92      	ldr	r3, [pc, #584]	; (800baec <_strtod_l+0xbf4>)
 800b8a4:	403b      	ands	r3, r7
 800b8a6:	930d      	str	r3, [sp, #52]	; 0x34
 800b8a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8aa:	4b91      	ldr	r3, [pc, #580]	; (800baf0 <_strtod_l+0xbf8>)
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	f040 80b0 	bne.w	800ba12 <_strtod_l+0xb1a>
 800b8b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b8ba:	ec4b ab10 	vmov	d0, sl, fp
 800b8be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b8c2:	f002 f94d 	bl	800db60 <__ulp>
 800b8c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8ca:	ec53 2b10 	vmov	r2, r3, d0
 800b8ce:	f7f4 fe93 	bl	80005f8 <__aeabi_dmul>
 800b8d2:	4652      	mov	r2, sl
 800b8d4:	465b      	mov	r3, fp
 800b8d6:	f7f4 fcd9 	bl	800028c <__adddf3>
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4983      	ldr	r1, [pc, #524]	; (800baec <_strtod_l+0xbf4>)
 800b8de:	4a85      	ldr	r2, [pc, #532]	; (800baf4 <_strtod_l+0xbfc>)
 800b8e0:	4019      	ands	r1, r3
 800b8e2:	4291      	cmp	r1, r2
 800b8e4:	4682      	mov	sl, r0
 800b8e6:	d960      	bls.n	800b9aa <_strtod_l+0xab2>
 800b8e8:	ee18 3a90 	vmov	r3, s17
 800b8ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d104      	bne.n	800b8fe <_strtod_l+0xa06>
 800b8f4:	ee18 3a10 	vmov	r3, s16
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	f43f ad45 	beq.w	800b388 <_strtod_l+0x490>
 800b8fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bb00 <_strtod_l+0xc08>
 800b902:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b906:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b908:	4620      	mov	r0, r4
 800b90a:	f001 fdf7 	bl	800d4fc <_Bfree>
 800b90e:	9905      	ldr	r1, [sp, #20]
 800b910:	4620      	mov	r0, r4
 800b912:	f001 fdf3 	bl	800d4fc <_Bfree>
 800b916:	4631      	mov	r1, r6
 800b918:	4620      	mov	r0, r4
 800b91a:	f001 fdef 	bl	800d4fc <_Bfree>
 800b91e:	4629      	mov	r1, r5
 800b920:	4620      	mov	r0, r4
 800b922:	f001 fdeb 	bl	800d4fc <_Bfree>
 800b926:	e61a      	b.n	800b55e <_strtod_l+0x666>
 800b928:	f1ba 0f00 	cmp.w	sl, #0
 800b92c:	d11b      	bne.n	800b966 <_strtod_l+0xa6e>
 800b92e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b932:	b9f3      	cbnz	r3, 800b972 <_strtod_l+0xa7a>
 800b934:	4b6c      	ldr	r3, [pc, #432]	; (800bae8 <_strtod_l+0xbf0>)
 800b936:	2200      	movs	r2, #0
 800b938:	4640      	mov	r0, r8
 800b93a:	4649      	mov	r1, r9
 800b93c:	f7f5 f8ce 	bl	8000adc <__aeabi_dcmplt>
 800b940:	b9d0      	cbnz	r0, 800b978 <_strtod_l+0xa80>
 800b942:	4640      	mov	r0, r8
 800b944:	4649      	mov	r1, r9
 800b946:	4b6c      	ldr	r3, [pc, #432]	; (800baf8 <_strtod_l+0xc00>)
 800b948:	2200      	movs	r2, #0
 800b94a:	f7f4 fe55 	bl	80005f8 <__aeabi_dmul>
 800b94e:	4680      	mov	r8, r0
 800b950:	4689      	mov	r9, r1
 800b952:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b956:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b95a:	9315      	str	r3, [sp, #84]	; 0x54
 800b95c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b960:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b964:	e79d      	b.n	800b8a2 <_strtod_l+0x9aa>
 800b966:	f1ba 0f01 	cmp.w	sl, #1
 800b96a:	d102      	bne.n	800b972 <_strtod_l+0xa7a>
 800b96c:	2f00      	cmp	r7, #0
 800b96e:	f43f ad83 	beq.w	800b478 <_strtod_l+0x580>
 800b972:	4b62      	ldr	r3, [pc, #392]	; (800bafc <_strtod_l+0xc04>)
 800b974:	2200      	movs	r2, #0
 800b976:	e78e      	b.n	800b896 <_strtod_l+0x99e>
 800b978:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800baf8 <_strtod_l+0xc00>
 800b97c:	f04f 0800 	mov.w	r8, #0
 800b980:	e7e7      	b.n	800b952 <_strtod_l+0xa5a>
 800b982:	4b5d      	ldr	r3, [pc, #372]	; (800baf8 <_strtod_l+0xc00>)
 800b984:	4640      	mov	r0, r8
 800b986:	4649      	mov	r1, r9
 800b988:	2200      	movs	r2, #0
 800b98a:	f7f4 fe35 	bl	80005f8 <__aeabi_dmul>
 800b98e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b990:	4680      	mov	r8, r0
 800b992:	4689      	mov	r9, r1
 800b994:	b933      	cbnz	r3, 800b9a4 <_strtod_l+0xaac>
 800b996:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b99a:	900e      	str	r0, [sp, #56]	; 0x38
 800b99c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b99e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b9a2:	e7dd      	b.n	800b960 <_strtod_l+0xa68>
 800b9a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b9a8:	e7f9      	b.n	800b99e <_strtod_l+0xaa6>
 800b9aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b9ae:	9b04      	ldr	r3, [sp, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1a8      	bne.n	800b906 <_strtod_l+0xa0e>
 800b9b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b9b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9ba:	0d1b      	lsrs	r3, r3, #20
 800b9bc:	051b      	lsls	r3, r3, #20
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d1a1      	bne.n	800b906 <_strtod_l+0xa0e>
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	f7f5 f977 	bl	8000cb8 <__aeabi_d2lz>
 800b9ca:	f7f4 fde7 	bl	800059c <__aeabi_l2d>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	4640      	mov	r0, r8
 800b9d4:	4649      	mov	r1, r9
 800b9d6:	f7f4 fc57 	bl	8000288 <__aeabi_dsub>
 800b9da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9e0:	ea43 030a 	orr.w	r3, r3, sl
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	4689      	mov	r9, r1
 800b9ea:	d055      	beq.n	800ba98 <_strtod_l+0xba0>
 800b9ec:	a336      	add	r3, pc, #216	; (adr r3, 800bac8 <_strtod_l+0xbd0>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	f7f5 f873 	bl	8000adc <__aeabi_dcmplt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	f47f acd0 	bne.w	800b39c <_strtod_l+0x4a4>
 800b9fc:	a334      	add	r3, pc, #208	; (adr r3, 800bad0 <_strtod_l+0xbd8>)
 800b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba02:	4640      	mov	r0, r8
 800ba04:	4649      	mov	r1, r9
 800ba06:	f7f5 f887 	bl	8000b18 <__aeabi_dcmpgt>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	f43f af7b 	beq.w	800b906 <_strtod_l+0xa0e>
 800ba10:	e4c4      	b.n	800b39c <_strtod_l+0x4a4>
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	b333      	cbz	r3, 800ba64 <_strtod_l+0xb6c>
 800ba16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba1c:	d822      	bhi.n	800ba64 <_strtod_l+0xb6c>
 800ba1e:	a32e      	add	r3, pc, #184	; (adr r3, 800bad8 <_strtod_l+0xbe0>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	4640      	mov	r0, r8
 800ba26:	4649      	mov	r1, r9
 800ba28:	f7f5 f862 	bl	8000af0 <__aeabi_dcmple>
 800ba2c:	b1a0      	cbz	r0, 800ba58 <_strtod_l+0xb60>
 800ba2e:	4649      	mov	r1, r9
 800ba30:	4640      	mov	r0, r8
 800ba32:	f7f5 f8b9 	bl	8000ba8 <__aeabi_d2uiz>
 800ba36:	2801      	cmp	r0, #1
 800ba38:	bf38      	it	cc
 800ba3a:	2001      	movcc	r0, #1
 800ba3c:	f7f4 fd62 	bl	8000504 <__aeabi_ui2d>
 800ba40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba42:	4680      	mov	r8, r0
 800ba44:	4689      	mov	r9, r1
 800ba46:	bb23      	cbnz	r3, 800ba92 <_strtod_l+0xb9a>
 800ba48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba4c:	9010      	str	r0, [sp, #64]	; 0x40
 800ba4e:	9311      	str	r3, [sp, #68]	; 0x44
 800ba50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ba54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba60:	1a9b      	subs	r3, r3, r2
 800ba62:	9309      	str	r3, [sp, #36]	; 0x24
 800ba64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba68:	eeb0 0a48 	vmov.f32	s0, s16
 800ba6c:	eef0 0a68 	vmov.f32	s1, s17
 800ba70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ba74:	f002 f874 	bl	800db60 <__ulp>
 800ba78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ba7c:	ec53 2b10 	vmov	r2, r3, d0
 800ba80:	f7f4 fdba 	bl	80005f8 <__aeabi_dmul>
 800ba84:	ec53 2b18 	vmov	r2, r3, d8
 800ba88:	f7f4 fc00 	bl	800028c <__adddf3>
 800ba8c:	4682      	mov	sl, r0
 800ba8e:	468b      	mov	fp, r1
 800ba90:	e78d      	b.n	800b9ae <_strtod_l+0xab6>
 800ba92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ba96:	e7db      	b.n	800ba50 <_strtod_l+0xb58>
 800ba98:	a311      	add	r3, pc, #68	; (adr r3, 800bae0 <_strtod_l+0xbe8>)
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	f7f5 f81d 	bl	8000adc <__aeabi_dcmplt>
 800baa2:	e7b2      	b.n	800ba0a <_strtod_l+0xb12>
 800baa4:	2300      	movs	r3, #0
 800baa6:	930a      	str	r3, [sp, #40]	; 0x28
 800baa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800baaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800baac:	6013      	str	r3, [r2, #0]
 800baae:	f7ff ba6b 	b.w	800af88 <_strtod_l+0x90>
 800bab2:	2a65      	cmp	r2, #101	; 0x65
 800bab4:	f43f ab5f 	beq.w	800b176 <_strtod_l+0x27e>
 800bab8:	2a45      	cmp	r2, #69	; 0x45
 800baba:	f43f ab5c 	beq.w	800b176 <_strtod_l+0x27e>
 800babe:	2301      	movs	r3, #1
 800bac0:	f7ff bb94 	b.w	800b1ec <_strtod_l+0x2f4>
 800bac4:	f3af 8000 	nop.w
 800bac8:	94a03595 	.word	0x94a03595
 800bacc:	3fdfffff 	.word	0x3fdfffff
 800bad0:	35afe535 	.word	0x35afe535
 800bad4:	3fe00000 	.word	0x3fe00000
 800bad8:	ffc00000 	.word	0xffc00000
 800badc:	41dfffff 	.word	0x41dfffff
 800bae0:	94a03595 	.word	0x94a03595
 800bae4:	3fcfffff 	.word	0x3fcfffff
 800bae8:	3ff00000 	.word	0x3ff00000
 800baec:	7ff00000 	.word	0x7ff00000
 800baf0:	7fe00000 	.word	0x7fe00000
 800baf4:	7c9fffff 	.word	0x7c9fffff
 800baf8:	3fe00000 	.word	0x3fe00000
 800bafc:	bff00000 	.word	0xbff00000
 800bb00:	7fefffff 	.word	0x7fefffff

0800bb04 <_strtod_r>:
 800bb04:	4b01      	ldr	r3, [pc, #4]	; (800bb0c <_strtod_r+0x8>)
 800bb06:	f7ff b9f7 	b.w	800aef8 <_strtod_l>
 800bb0a:	bf00      	nop
 800bb0c:	20000078 	.word	0x20000078

0800bb10 <_strtol_l.constprop.0>:
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb16:	d001      	beq.n	800bb1c <_strtol_l.constprop.0+0xc>
 800bb18:	2b24      	cmp	r3, #36	; 0x24
 800bb1a:	d906      	bls.n	800bb2a <_strtol_l.constprop.0+0x1a>
 800bb1c:	f7fe f82e 	bl	8009b7c <__errno>
 800bb20:	2316      	movs	r3, #22
 800bb22:	6003      	str	r3, [r0, #0]
 800bb24:	2000      	movs	r0, #0
 800bb26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bc10 <_strtol_l.constprop.0+0x100>
 800bb2e:	460d      	mov	r5, r1
 800bb30:	462e      	mov	r6, r5
 800bb32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb36:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bb3a:	f017 0708 	ands.w	r7, r7, #8
 800bb3e:	d1f7      	bne.n	800bb30 <_strtol_l.constprop.0+0x20>
 800bb40:	2c2d      	cmp	r4, #45	; 0x2d
 800bb42:	d132      	bne.n	800bbaa <_strtol_l.constprop.0+0x9a>
 800bb44:	782c      	ldrb	r4, [r5, #0]
 800bb46:	2701      	movs	r7, #1
 800bb48:	1cb5      	adds	r5, r6, #2
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d05b      	beq.n	800bc06 <_strtol_l.constprop.0+0xf6>
 800bb4e:	2b10      	cmp	r3, #16
 800bb50:	d109      	bne.n	800bb66 <_strtol_l.constprop.0+0x56>
 800bb52:	2c30      	cmp	r4, #48	; 0x30
 800bb54:	d107      	bne.n	800bb66 <_strtol_l.constprop.0+0x56>
 800bb56:	782c      	ldrb	r4, [r5, #0]
 800bb58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bb5c:	2c58      	cmp	r4, #88	; 0x58
 800bb5e:	d14d      	bne.n	800bbfc <_strtol_l.constprop.0+0xec>
 800bb60:	786c      	ldrb	r4, [r5, #1]
 800bb62:	2310      	movs	r3, #16
 800bb64:	3502      	adds	r5, #2
 800bb66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bb6a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bb6e:	f04f 0c00 	mov.w	ip, #0
 800bb72:	fbb8 f9f3 	udiv	r9, r8, r3
 800bb76:	4666      	mov	r6, ip
 800bb78:	fb03 8a19 	mls	sl, r3, r9, r8
 800bb7c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bb80:	f1be 0f09 	cmp.w	lr, #9
 800bb84:	d816      	bhi.n	800bbb4 <_strtol_l.constprop.0+0xa4>
 800bb86:	4674      	mov	r4, lr
 800bb88:	42a3      	cmp	r3, r4
 800bb8a:	dd24      	ble.n	800bbd6 <_strtol_l.constprop.0+0xc6>
 800bb8c:	f1bc 0f00 	cmp.w	ip, #0
 800bb90:	db1e      	blt.n	800bbd0 <_strtol_l.constprop.0+0xc0>
 800bb92:	45b1      	cmp	r9, r6
 800bb94:	d31c      	bcc.n	800bbd0 <_strtol_l.constprop.0+0xc0>
 800bb96:	d101      	bne.n	800bb9c <_strtol_l.constprop.0+0x8c>
 800bb98:	45a2      	cmp	sl, r4
 800bb9a:	db19      	blt.n	800bbd0 <_strtol_l.constprop.0+0xc0>
 800bb9c:	fb06 4603 	mla	r6, r6, r3, r4
 800bba0:	f04f 0c01 	mov.w	ip, #1
 800bba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bba8:	e7e8      	b.n	800bb7c <_strtol_l.constprop.0+0x6c>
 800bbaa:	2c2b      	cmp	r4, #43	; 0x2b
 800bbac:	bf04      	itt	eq
 800bbae:	782c      	ldrbeq	r4, [r5, #0]
 800bbb0:	1cb5      	addeq	r5, r6, #2
 800bbb2:	e7ca      	b.n	800bb4a <_strtol_l.constprop.0+0x3a>
 800bbb4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bbb8:	f1be 0f19 	cmp.w	lr, #25
 800bbbc:	d801      	bhi.n	800bbc2 <_strtol_l.constprop.0+0xb2>
 800bbbe:	3c37      	subs	r4, #55	; 0x37
 800bbc0:	e7e2      	b.n	800bb88 <_strtol_l.constprop.0+0x78>
 800bbc2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bbc6:	f1be 0f19 	cmp.w	lr, #25
 800bbca:	d804      	bhi.n	800bbd6 <_strtol_l.constprop.0+0xc6>
 800bbcc:	3c57      	subs	r4, #87	; 0x57
 800bbce:	e7db      	b.n	800bb88 <_strtol_l.constprop.0+0x78>
 800bbd0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bbd4:	e7e6      	b.n	800bba4 <_strtol_l.constprop.0+0x94>
 800bbd6:	f1bc 0f00 	cmp.w	ip, #0
 800bbda:	da05      	bge.n	800bbe8 <_strtol_l.constprop.0+0xd8>
 800bbdc:	2322      	movs	r3, #34	; 0x22
 800bbde:	6003      	str	r3, [r0, #0]
 800bbe0:	4646      	mov	r6, r8
 800bbe2:	b942      	cbnz	r2, 800bbf6 <_strtol_l.constprop.0+0xe6>
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	e79e      	b.n	800bb26 <_strtol_l.constprop.0+0x16>
 800bbe8:	b107      	cbz	r7, 800bbec <_strtol_l.constprop.0+0xdc>
 800bbea:	4276      	negs	r6, r6
 800bbec:	2a00      	cmp	r2, #0
 800bbee:	d0f9      	beq.n	800bbe4 <_strtol_l.constprop.0+0xd4>
 800bbf0:	f1bc 0f00 	cmp.w	ip, #0
 800bbf4:	d000      	beq.n	800bbf8 <_strtol_l.constprop.0+0xe8>
 800bbf6:	1e69      	subs	r1, r5, #1
 800bbf8:	6011      	str	r1, [r2, #0]
 800bbfa:	e7f3      	b.n	800bbe4 <_strtol_l.constprop.0+0xd4>
 800bbfc:	2430      	movs	r4, #48	; 0x30
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1b1      	bne.n	800bb66 <_strtol_l.constprop.0+0x56>
 800bc02:	2308      	movs	r3, #8
 800bc04:	e7af      	b.n	800bb66 <_strtol_l.constprop.0+0x56>
 800bc06:	2c30      	cmp	r4, #48	; 0x30
 800bc08:	d0a5      	beq.n	800bb56 <_strtol_l.constprop.0+0x46>
 800bc0a:	230a      	movs	r3, #10
 800bc0c:	e7ab      	b.n	800bb66 <_strtol_l.constprop.0+0x56>
 800bc0e:	bf00      	nop
 800bc10:	0800e911 	.word	0x0800e911

0800bc14 <_strtol_r>:
 800bc14:	f7ff bf7c 	b.w	800bb10 <_strtol_l.constprop.0>

0800bc18 <__swbuf_r>:
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1a:	460e      	mov	r6, r1
 800bc1c:	4614      	mov	r4, r2
 800bc1e:	4605      	mov	r5, r0
 800bc20:	b118      	cbz	r0, 800bc2a <__swbuf_r+0x12>
 800bc22:	6983      	ldr	r3, [r0, #24]
 800bc24:	b90b      	cbnz	r3, 800bc2a <__swbuf_r+0x12>
 800bc26:	f7fe f807 	bl	8009c38 <__sinit>
 800bc2a:	4b21      	ldr	r3, [pc, #132]	; (800bcb0 <__swbuf_r+0x98>)
 800bc2c:	429c      	cmp	r4, r3
 800bc2e:	d12b      	bne.n	800bc88 <__swbuf_r+0x70>
 800bc30:	686c      	ldr	r4, [r5, #4]
 800bc32:	69a3      	ldr	r3, [r4, #24]
 800bc34:	60a3      	str	r3, [r4, #8]
 800bc36:	89a3      	ldrh	r3, [r4, #12]
 800bc38:	071a      	lsls	r2, r3, #28
 800bc3a:	d52f      	bpl.n	800bc9c <__swbuf_r+0x84>
 800bc3c:	6923      	ldr	r3, [r4, #16]
 800bc3e:	b36b      	cbz	r3, 800bc9c <__swbuf_r+0x84>
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	6820      	ldr	r0, [r4, #0]
 800bc44:	1ac0      	subs	r0, r0, r3
 800bc46:	6963      	ldr	r3, [r4, #20]
 800bc48:	b2f6      	uxtb	r6, r6
 800bc4a:	4283      	cmp	r3, r0
 800bc4c:	4637      	mov	r7, r6
 800bc4e:	dc04      	bgt.n	800bc5a <__swbuf_r+0x42>
 800bc50:	4621      	mov	r1, r4
 800bc52:	4628      	mov	r0, r5
 800bc54:	f000 ffc4 	bl	800cbe0 <_fflush_r>
 800bc58:	bb30      	cbnz	r0, 800bca8 <__swbuf_r+0x90>
 800bc5a:	68a3      	ldr	r3, [r4, #8]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	60a3      	str	r3, [r4, #8]
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	1c5a      	adds	r2, r3, #1
 800bc64:	6022      	str	r2, [r4, #0]
 800bc66:	701e      	strb	r6, [r3, #0]
 800bc68:	6963      	ldr	r3, [r4, #20]
 800bc6a:	3001      	adds	r0, #1
 800bc6c:	4283      	cmp	r3, r0
 800bc6e:	d004      	beq.n	800bc7a <__swbuf_r+0x62>
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	07db      	lsls	r3, r3, #31
 800bc74:	d506      	bpl.n	800bc84 <__swbuf_r+0x6c>
 800bc76:	2e0a      	cmp	r6, #10
 800bc78:	d104      	bne.n	800bc84 <__swbuf_r+0x6c>
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f000 ffaf 	bl	800cbe0 <_fflush_r>
 800bc82:	b988      	cbnz	r0, 800bca8 <__swbuf_r+0x90>
 800bc84:	4638      	mov	r0, r7
 800bc86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc88:	4b0a      	ldr	r3, [pc, #40]	; (800bcb4 <__swbuf_r+0x9c>)
 800bc8a:	429c      	cmp	r4, r3
 800bc8c:	d101      	bne.n	800bc92 <__swbuf_r+0x7a>
 800bc8e:	68ac      	ldr	r4, [r5, #8]
 800bc90:	e7cf      	b.n	800bc32 <__swbuf_r+0x1a>
 800bc92:	4b09      	ldr	r3, [pc, #36]	; (800bcb8 <__swbuf_r+0xa0>)
 800bc94:	429c      	cmp	r4, r3
 800bc96:	bf08      	it	eq
 800bc98:	68ec      	ldreq	r4, [r5, #12]
 800bc9a:	e7ca      	b.n	800bc32 <__swbuf_r+0x1a>
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	4628      	mov	r0, r5
 800bca0:	f000 f81e 	bl	800bce0 <__swsetup_r>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d0cb      	beq.n	800bc40 <__swbuf_r+0x28>
 800bca8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bcac:	e7ea      	b.n	800bc84 <__swbuf_r+0x6c>
 800bcae:	bf00      	nop
 800bcb0:	0800e83c 	.word	0x0800e83c
 800bcb4:	0800e85c 	.word	0x0800e85c
 800bcb8:	0800e81c 	.word	0x0800e81c

0800bcbc <_write_r>:
 800bcbc:	b538      	push	{r3, r4, r5, lr}
 800bcbe:	4d07      	ldr	r5, [pc, #28]	; (800bcdc <_write_r+0x20>)
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	4608      	mov	r0, r1
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	602a      	str	r2, [r5, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	f7f5 f9ca 	bl	8001064 <_write>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d102      	bne.n	800bcda <_write_r+0x1e>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	b103      	cbz	r3, 800bcda <_write_r+0x1e>
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	20001e40 	.word	0x20001e40

0800bce0 <__swsetup_r>:
 800bce0:	4b32      	ldr	r3, [pc, #200]	; (800bdac <__swsetup_r+0xcc>)
 800bce2:	b570      	push	{r4, r5, r6, lr}
 800bce4:	681d      	ldr	r5, [r3, #0]
 800bce6:	4606      	mov	r6, r0
 800bce8:	460c      	mov	r4, r1
 800bcea:	b125      	cbz	r5, 800bcf6 <__swsetup_r+0x16>
 800bcec:	69ab      	ldr	r3, [r5, #24]
 800bcee:	b913      	cbnz	r3, 800bcf6 <__swsetup_r+0x16>
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f7fd ffa1 	bl	8009c38 <__sinit>
 800bcf6:	4b2e      	ldr	r3, [pc, #184]	; (800bdb0 <__swsetup_r+0xd0>)
 800bcf8:	429c      	cmp	r4, r3
 800bcfa:	d10f      	bne.n	800bd1c <__swsetup_r+0x3c>
 800bcfc:	686c      	ldr	r4, [r5, #4]
 800bcfe:	89a3      	ldrh	r3, [r4, #12]
 800bd00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd04:	0719      	lsls	r1, r3, #28
 800bd06:	d42c      	bmi.n	800bd62 <__swsetup_r+0x82>
 800bd08:	06dd      	lsls	r5, r3, #27
 800bd0a:	d411      	bmi.n	800bd30 <__swsetup_r+0x50>
 800bd0c:	2309      	movs	r3, #9
 800bd0e:	6033      	str	r3, [r6, #0]
 800bd10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd14:	81a3      	strh	r3, [r4, #12]
 800bd16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd1a:	e03e      	b.n	800bd9a <__swsetup_r+0xba>
 800bd1c:	4b25      	ldr	r3, [pc, #148]	; (800bdb4 <__swsetup_r+0xd4>)
 800bd1e:	429c      	cmp	r4, r3
 800bd20:	d101      	bne.n	800bd26 <__swsetup_r+0x46>
 800bd22:	68ac      	ldr	r4, [r5, #8]
 800bd24:	e7eb      	b.n	800bcfe <__swsetup_r+0x1e>
 800bd26:	4b24      	ldr	r3, [pc, #144]	; (800bdb8 <__swsetup_r+0xd8>)
 800bd28:	429c      	cmp	r4, r3
 800bd2a:	bf08      	it	eq
 800bd2c:	68ec      	ldreq	r4, [r5, #12]
 800bd2e:	e7e6      	b.n	800bcfe <__swsetup_r+0x1e>
 800bd30:	0758      	lsls	r0, r3, #29
 800bd32:	d512      	bpl.n	800bd5a <__swsetup_r+0x7a>
 800bd34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd36:	b141      	cbz	r1, 800bd4a <__swsetup_r+0x6a>
 800bd38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd3c:	4299      	cmp	r1, r3
 800bd3e:	d002      	beq.n	800bd46 <__swsetup_r+0x66>
 800bd40:	4630      	mov	r0, r6
 800bd42:	f002 f873 	bl	800de2c <_free_r>
 800bd46:	2300      	movs	r3, #0
 800bd48:	6363      	str	r3, [r4, #52]	; 0x34
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd50:	81a3      	strh	r3, [r4, #12]
 800bd52:	2300      	movs	r3, #0
 800bd54:	6063      	str	r3, [r4, #4]
 800bd56:	6923      	ldr	r3, [r4, #16]
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	f043 0308 	orr.w	r3, r3, #8
 800bd60:	81a3      	strh	r3, [r4, #12]
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	b94b      	cbnz	r3, 800bd7a <__swsetup_r+0x9a>
 800bd66:	89a3      	ldrh	r3, [r4, #12]
 800bd68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd70:	d003      	beq.n	800bd7a <__swsetup_r+0x9a>
 800bd72:	4621      	mov	r1, r4
 800bd74:	4630      	mov	r0, r6
 800bd76:	f001 fb1b 	bl	800d3b0 <__smakebuf_r>
 800bd7a:	89a0      	ldrh	r0, [r4, #12]
 800bd7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd80:	f010 0301 	ands.w	r3, r0, #1
 800bd84:	d00a      	beq.n	800bd9c <__swsetup_r+0xbc>
 800bd86:	2300      	movs	r3, #0
 800bd88:	60a3      	str	r3, [r4, #8]
 800bd8a:	6963      	ldr	r3, [r4, #20]
 800bd8c:	425b      	negs	r3, r3
 800bd8e:	61a3      	str	r3, [r4, #24]
 800bd90:	6923      	ldr	r3, [r4, #16]
 800bd92:	b943      	cbnz	r3, 800bda6 <__swsetup_r+0xc6>
 800bd94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd98:	d1ba      	bne.n	800bd10 <__swsetup_r+0x30>
 800bd9a:	bd70      	pop	{r4, r5, r6, pc}
 800bd9c:	0781      	lsls	r1, r0, #30
 800bd9e:	bf58      	it	pl
 800bda0:	6963      	ldrpl	r3, [r4, #20]
 800bda2:	60a3      	str	r3, [r4, #8]
 800bda4:	e7f4      	b.n	800bd90 <__swsetup_r+0xb0>
 800bda6:	2000      	movs	r0, #0
 800bda8:	e7f7      	b.n	800bd9a <__swsetup_r+0xba>
 800bdaa:	bf00      	nop
 800bdac:	20000010 	.word	0x20000010
 800bdb0:	0800e83c 	.word	0x0800e83c
 800bdb4:	0800e85c 	.word	0x0800e85c
 800bdb8:	0800e81c 	.word	0x0800e81c

0800bdbc <_close_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4d06      	ldr	r5, [pc, #24]	; (800bdd8 <_close_r+0x1c>)
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	4608      	mov	r0, r1
 800bdc6:	602b      	str	r3, [r5, #0]
 800bdc8:	f7f5 ffe5 	bl	8001d96 <_close>
 800bdcc:	1c43      	adds	r3, r0, #1
 800bdce:	d102      	bne.n	800bdd6 <_close_r+0x1a>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	b103      	cbz	r3, 800bdd6 <_close_r+0x1a>
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	bd38      	pop	{r3, r4, r5, pc}
 800bdd8:	20001e40 	.word	0x20001e40

0800bddc <quorem>:
 800bddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde0:	6903      	ldr	r3, [r0, #16]
 800bde2:	690c      	ldr	r4, [r1, #16]
 800bde4:	42a3      	cmp	r3, r4
 800bde6:	4607      	mov	r7, r0
 800bde8:	f2c0 8081 	blt.w	800beee <quorem+0x112>
 800bdec:	3c01      	subs	r4, #1
 800bdee:	f101 0814 	add.w	r8, r1, #20
 800bdf2:	f100 0514 	add.w	r5, r0, #20
 800bdf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdfa:	9301      	str	r3, [sp, #4]
 800bdfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be04:	3301      	adds	r3, #1
 800be06:	429a      	cmp	r2, r3
 800be08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800be0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be10:	fbb2 f6f3 	udiv	r6, r2, r3
 800be14:	d331      	bcc.n	800be7a <quorem+0x9e>
 800be16:	f04f 0e00 	mov.w	lr, #0
 800be1a:	4640      	mov	r0, r8
 800be1c:	46ac      	mov	ip, r5
 800be1e:	46f2      	mov	sl, lr
 800be20:	f850 2b04 	ldr.w	r2, [r0], #4
 800be24:	b293      	uxth	r3, r2
 800be26:	fb06 e303 	mla	r3, r6, r3, lr
 800be2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800be2e:	b29b      	uxth	r3, r3
 800be30:	ebaa 0303 	sub.w	r3, sl, r3
 800be34:	f8dc a000 	ldr.w	sl, [ip]
 800be38:	0c12      	lsrs	r2, r2, #16
 800be3a:	fa13 f38a 	uxtah	r3, r3, sl
 800be3e:	fb06 e202 	mla	r2, r6, r2, lr
 800be42:	9300      	str	r3, [sp, #0]
 800be44:	9b00      	ldr	r3, [sp, #0]
 800be46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800be4a:	b292      	uxth	r2, r2
 800be4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800be50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be54:	f8bd 3000 	ldrh.w	r3, [sp]
 800be58:	4581      	cmp	r9, r0
 800be5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be5e:	f84c 3b04 	str.w	r3, [ip], #4
 800be62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800be66:	d2db      	bcs.n	800be20 <quorem+0x44>
 800be68:	f855 300b 	ldr.w	r3, [r5, fp]
 800be6c:	b92b      	cbnz	r3, 800be7a <quorem+0x9e>
 800be6e:	9b01      	ldr	r3, [sp, #4]
 800be70:	3b04      	subs	r3, #4
 800be72:	429d      	cmp	r5, r3
 800be74:	461a      	mov	r2, r3
 800be76:	d32e      	bcc.n	800bed6 <quorem+0xfa>
 800be78:	613c      	str	r4, [r7, #16]
 800be7a:	4638      	mov	r0, r7
 800be7c:	f001 fdca 	bl	800da14 <__mcmp>
 800be80:	2800      	cmp	r0, #0
 800be82:	db24      	blt.n	800bece <quorem+0xf2>
 800be84:	3601      	adds	r6, #1
 800be86:	4628      	mov	r0, r5
 800be88:	f04f 0c00 	mov.w	ip, #0
 800be8c:	f858 2b04 	ldr.w	r2, [r8], #4
 800be90:	f8d0 e000 	ldr.w	lr, [r0]
 800be94:	b293      	uxth	r3, r2
 800be96:	ebac 0303 	sub.w	r3, ip, r3
 800be9a:	0c12      	lsrs	r2, r2, #16
 800be9c:	fa13 f38e 	uxtah	r3, r3, lr
 800bea0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800beae:	45c1      	cmp	r9, r8
 800beb0:	f840 3b04 	str.w	r3, [r0], #4
 800beb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800beb8:	d2e8      	bcs.n	800be8c <quorem+0xb0>
 800beba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bec2:	b922      	cbnz	r2, 800bece <quorem+0xf2>
 800bec4:	3b04      	subs	r3, #4
 800bec6:	429d      	cmp	r5, r3
 800bec8:	461a      	mov	r2, r3
 800beca:	d30a      	bcc.n	800bee2 <quorem+0x106>
 800becc:	613c      	str	r4, [r7, #16]
 800bece:	4630      	mov	r0, r6
 800bed0:	b003      	add	sp, #12
 800bed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed6:	6812      	ldr	r2, [r2, #0]
 800bed8:	3b04      	subs	r3, #4
 800beda:	2a00      	cmp	r2, #0
 800bedc:	d1cc      	bne.n	800be78 <quorem+0x9c>
 800bede:	3c01      	subs	r4, #1
 800bee0:	e7c7      	b.n	800be72 <quorem+0x96>
 800bee2:	6812      	ldr	r2, [r2, #0]
 800bee4:	3b04      	subs	r3, #4
 800bee6:	2a00      	cmp	r2, #0
 800bee8:	d1f0      	bne.n	800becc <quorem+0xf0>
 800beea:	3c01      	subs	r4, #1
 800beec:	e7eb      	b.n	800bec6 <quorem+0xea>
 800beee:	2000      	movs	r0, #0
 800bef0:	e7ee      	b.n	800bed0 <quorem+0xf4>
 800bef2:	0000      	movs	r0, r0
 800bef4:	0000      	movs	r0, r0
	...

0800bef8 <_dtoa_r>:
 800bef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befc:	ed2d 8b04 	vpush	{d8-d9}
 800bf00:	ec57 6b10 	vmov	r6, r7, d0
 800bf04:	b093      	sub	sp, #76	; 0x4c
 800bf06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf0c:	9106      	str	r1, [sp, #24]
 800bf0e:	ee10 aa10 	vmov	sl, s0
 800bf12:	4604      	mov	r4, r0
 800bf14:	9209      	str	r2, [sp, #36]	; 0x24
 800bf16:	930c      	str	r3, [sp, #48]	; 0x30
 800bf18:	46bb      	mov	fp, r7
 800bf1a:	b975      	cbnz	r5, 800bf3a <_dtoa_r+0x42>
 800bf1c:	2010      	movs	r0, #16
 800bf1e:	f001 fa87 	bl	800d430 <malloc>
 800bf22:	4602      	mov	r2, r0
 800bf24:	6260      	str	r0, [r4, #36]	; 0x24
 800bf26:	b920      	cbnz	r0, 800bf32 <_dtoa_r+0x3a>
 800bf28:	4ba7      	ldr	r3, [pc, #668]	; (800c1c8 <_dtoa_r+0x2d0>)
 800bf2a:	21ea      	movs	r1, #234	; 0xea
 800bf2c:	48a7      	ldr	r0, [pc, #668]	; (800c1cc <_dtoa_r+0x2d4>)
 800bf2e:	f002 f961 	bl	800e1f4 <__assert_func>
 800bf32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf36:	6005      	str	r5, [r0, #0]
 800bf38:	60c5      	str	r5, [r0, #12]
 800bf3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf3c:	6819      	ldr	r1, [r3, #0]
 800bf3e:	b151      	cbz	r1, 800bf56 <_dtoa_r+0x5e>
 800bf40:	685a      	ldr	r2, [r3, #4]
 800bf42:	604a      	str	r2, [r1, #4]
 800bf44:	2301      	movs	r3, #1
 800bf46:	4093      	lsls	r3, r2
 800bf48:	608b      	str	r3, [r1, #8]
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f001 fad6 	bl	800d4fc <_Bfree>
 800bf50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf52:	2200      	movs	r2, #0
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	1e3b      	subs	r3, r7, #0
 800bf58:	bfaa      	itet	ge
 800bf5a:	2300      	movge	r3, #0
 800bf5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bf60:	f8c8 3000 	strge.w	r3, [r8]
 800bf64:	4b9a      	ldr	r3, [pc, #616]	; (800c1d0 <_dtoa_r+0x2d8>)
 800bf66:	bfbc      	itt	lt
 800bf68:	2201      	movlt	r2, #1
 800bf6a:	f8c8 2000 	strlt.w	r2, [r8]
 800bf6e:	ea33 030b 	bics.w	r3, r3, fp
 800bf72:	d11b      	bne.n	800bfac <_dtoa_r+0xb4>
 800bf74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bf76:	f242 730f 	movw	r3, #9999	; 0x270f
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf80:	4333      	orrs	r3, r6
 800bf82:	f000 8592 	beq.w	800caaa <_dtoa_r+0xbb2>
 800bf86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf88:	b963      	cbnz	r3, 800bfa4 <_dtoa_r+0xac>
 800bf8a:	4b92      	ldr	r3, [pc, #584]	; (800c1d4 <_dtoa_r+0x2dc>)
 800bf8c:	e022      	b.n	800bfd4 <_dtoa_r+0xdc>
 800bf8e:	4b92      	ldr	r3, [pc, #584]	; (800c1d8 <_dtoa_r+0x2e0>)
 800bf90:	9301      	str	r3, [sp, #4]
 800bf92:	3308      	adds	r3, #8
 800bf94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf96:	6013      	str	r3, [r2, #0]
 800bf98:	9801      	ldr	r0, [sp, #4]
 800bf9a:	b013      	add	sp, #76	; 0x4c
 800bf9c:	ecbd 8b04 	vpop	{d8-d9}
 800bfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa4:	4b8b      	ldr	r3, [pc, #556]	; (800c1d4 <_dtoa_r+0x2dc>)
 800bfa6:	9301      	str	r3, [sp, #4]
 800bfa8:	3303      	adds	r3, #3
 800bfaa:	e7f3      	b.n	800bf94 <_dtoa_r+0x9c>
 800bfac:	2200      	movs	r2, #0
 800bfae:	2300      	movs	r3, #0
 800bfb0:	4650      	mov	r0, sl
 800bfb2:	4659      	mov	r1, fp
 800bfb4:	f7f4 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfb8:	ec4b ab19 	vmov	d9, sl, fp
 800bfbc:	4680      	mov	r8, r0
 800bfbe:	b158      	cbz	r0, 800bfd8 <_dtoa_r+0xe0>
 800bfc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	6013      	str	r3, [r2, #0]
 800bfc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f000 856b 	beq.w	800caa4 <_dtoa_r+0xbac>
 800bfce:	4883      	ldr	r0, [pc, #524]	; (800c1dc <_dtoa_r+0x2e4>)
 800bfd0:	6018      	str	r0, [r3, #0]
 800bfd2:	1e43      	subs	r3, r0, #1
 800bfd4:	9301      	str	r3, [sp, #4]
 800bfd6:	e7df      	b.n	800bf98 <_dtoa_r+0xa0>
 800bfd8:	ec4b ab10 	vmov	d0, sl, fp
 800bfdc:	aa10      	add	r2, sp, #64	; 0x40
 800bfde:	a911      	add	r1, sp, #68	; 0x44
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f001 fe39 	bl	800dc58 <__d2b>
 800bfe6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bfea:	ee08 0a10 	vmov	s16, r0
 800bfee:	2d00      	cmp	r5, #0
 800bff0:	f000 8084 	beq.w	800c0fc <_dtoa_r+0x204>
 800bff4:	ee19 3a90 	vmov	r3, s19
 800bff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bffc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c000:	4656      	mov	r6, sl
 800c002:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c00a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c00e:	4b74      	ldr	r3, [pc, #464]	; (800c1e0 <_dtoa_r+0x2e8>)
 800c010:	2200      	movs	r2, #0
 800c012:	4630      	mov	r0, r6
 800c014:	4639      	mov	r1, r7
 800c016:	f7f4 f937 	bl	8000288 <__aeabi_dsub>
 800c01a:	a365      	add	r3, pc, #404	; (adr r3, 800c1b0 <_dtoa_r+0x2b8>)
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f7f4 faea 	bl	80005f8 <__aeabi_dmul>
 800c024:	a364      	add	r3, pc, #400	; (adr r3, 800c1b8 <_dtoa_r+0x2c0>)
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	f7f4 f92f 	bl	800028c <__adddf3>
 800c02e:	4606      	mov	r6, r0
 800c030:	4628      	mov	r0, r5
 800c032:	460f      	mov	r7, r1
 800c034:	f7f4 fa76 	bl	8000524 <__aeabi_i2d>
 800c038:	a361      	add	r3, pc, #388	; (adr r3, 800c1c0 <_dtoa_r+0x2c8>)
 800c03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03e:	f7f4 fadb 	bl	80005f8 <__aeabi_dmul>
 800c042:	4602      	mov	r2, r0
 800c044:	460b      	mov	r3, r1
 800c046:	4630      	mov	r0, r6
 800c048:	4639      	mov	r1, r7
 800c04a:	f7f4 f91f 	bl	800028c <__adddf3>
 800c04e:	4606      	mov	r6, r0
 800c050:	460f      	mov	r7, r1
 800c052:	f7f4 fd81 	bl	8000b58 <__aeabi_d2iz>
 800c056:	2200      	movs	r2, #0
 800c058:	9000      	str	r0, [sp, #0]
 800c05a:	2300      	movs	r3, #0
 800c05c:	4630      	mov	r0, r6
 800c05e:	4639      	mov	r1, r7
 800c060:	f7f4 fd3c 	bl	8000adc <__aeabi_dcmplt>
 800c064:	b150      	cbz	r0, 800c07c <_dtoa_r+0x184>
 800c066:	9800      	ldr	r0, [sp, #0]
 800c068:	f7f4 fa5c 	bl	8000524 <__aeabi_i2d>
 800c06c:	4632      	mov	r2, r6
 800c06e:	463b      	mov	r3, r7
 800c070:	f7f4 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c074:	b910      	cbnz	r0, 800c07c <_dtoa_r+0x184>
 800c076:	9b00      	ldr	r3, [sp, #0]
 800c078:	3b01      	subs	r3, #1
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	9b00      	ldr	r3, [sp, #0]
 800c07e:	2b16      	cmp	r3, #22
 800c080:	d85a      	bhi.n	800c138 <_dtoa_r+0x240>
 800c082:	9a00      	ldr	r2, [sp, #0]
 800c084:	4b57      	ldr	r3, [pc, #348]	; (800c1e4 <_dtoa_r+0x2ec>)
 800c086:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08e:	ec51 0b19 	vmov	r0, r1, d9
 800c092:	f7f4 fd23 	bl	8000adc <__aeabi_dcmplt>
 800c096:	2800      	cmp	r0, #0
 800c098:	d050      	beq.n	800c13c <_dtoa_r+0x244>
 800c09a:	9b00      	ldr	r3, [sp, #0]
 800c09c:	3b01      	subs	r3, #1
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0a6:	1b5d      	subs	r5, r3, r5
 800c0a8:	1e6b      	subs	r3, r5, #1
 800c0aa:	9305      	str	r3, [sp, #20]
 800c0ac:	bf45      	ittet	mi
 800c0ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800c0b2:	9304      	strmi	r3, [sp, #16]
 800c0b4:	2300      	movpl	r3, #0
 800c0b6:	2300      	movmi	r3, #0
 800c0b8:	bf4c      	ite	mi
 800c0ba:	9305      	strmi	r3, [sp, #20]
 800c0bc:	9304      	strpl	r3, [sp, #16]
 800c0be:	9b00      	ldr	r3, [sp, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	db3d      	blt.n	800c140 <_dtoa_r+0x248>
 800c0c4:	9b05      	ldr	r3, [sp, #20]
 800c0c6:	9a00      	ldr	r2, [sp, #0]
 800c0c8:	920a      	str	r2, [sp, #40]	; 0x28
 800c0ca:	4413      	add	r3, r2
 800c0cc:	9305      	str	r3, [sp, #20]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	9307      	str	r3, [sp, #28]
 800c0d2:	9b06      	ldr	r3, [sp, #24]
 800c0d4:	2b09      	cmp	r3, #9
 800c0d6:	f200 8089 	bhi.w	800c1ec <_dtoa_r+0x2f4>
 800c0da:	2b05      	cmp	r3, #5
 800c0dc:	bfc4      	itt	gt
 800c0de:	3b04      	subgt	r3, #4
 800c0e0:	9306      	strgt	r3, [sp, #24]
 800c0e2:	9b06      	ldr	r3, [sp, #24]
 800c0e4:	f1a3 0302 	sub.w	r3, r3, #2
 800c0e8:	bfcc      	ite	gt
 800c0ea:	2500      	movgt	r5, #0
 800c0ec:	2501      	movle	r5, #1
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	f200 8087 	bhi.w	800c202 <_dtoa_r+0x30a>
 800c0f4:	e8df f003 	tbb	[pc, r3]
 800c0f8:	59383a2d 	.word	0x59383a2d
 800c0fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c100:	441d      	add	r5, r3
 800c102:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c106:	2b20      	cmp	r3, #32
 800c108:	bfc1      	itttt	gt
 800c10a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c10e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c112:	fa0b f303 	lslgt.w	r3, fp, r3
 800c116:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c11a:	bfda      	itte	le
 800c11c:	f1c3 0320 	rsble	r3, r3, #32
 800c120:	fa06 f003 	lslle.w	r0, r6, r3
 800c124:	4318      	orrgt	r0, r3
 800c126:	f7f4 f9ed 	bl	8000504 <__aeabi_ui2d>
 800c12a:	2301      	movs	r3, #1
 800c12c:	4606      	mov	r6, r0
 800c12e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c132:	3d01      	subs	r5, #1
 800c134:	930e      	str	r3, [sp, #56]	; 0x38
 800c136:	e76a      	b.n	800c00e <_dtoa_r+0x116>
 800c138:	2301      	movs	r3, #1
 800c13a:	e7b2      	b.n	800c0a2 <_dtoa_r+0x1aa>
 800c13c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c13e:	e7b1      	b.n	800c0a4 <_dtoa_r+0x1ac>
 800c140:	9b04      	ldr	r3, [sp, #16]
 800c142:	9a00      	ldr	r2, [sp, #0]
 800c144:	1a9b      	subs	r3, r3, r2
 800c146:	9304      	str	r3, [sp, #16]
 800c148:	4253      	negs	r3, r2
 800c14a:	9307      	str	r3, [sp, #28]
 800c14c:	2300      	movs	r3, #0
 800c14e:	930a      	str	r3, [sp, #40]	; 0x28
 800c150:	e7bf      	b.n	800c0d2 <_dtoa_r+0x1da>
 800c152:	2300      	movs	r3, #0
 800c154:	9308      	str	r3, [sp, #32]
 800c156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c158:	2b00      	cmp	r3, #0
 800c15a:	dc55      	bgt.n	800c208 <_dtoa_r+0x310>
 800c15c:	2301      	movs	r3, #1
 800c15e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c162:	461a      	mov	r2, r3
 800c164:	9209      	str	r2, [sp, #36]	; 0x24
 800c166:	e00c      	b.n	800c182 <_dtoa_r+0x28a>
 800c168:	2301      	movs	r3, #1
 800c16a:	e7f3      	b.n	800c154 <_dtoa_r+0x25c>
 800c16c:	2300      	movs	r3, #0
 800c16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c170:	9308      	str	r3, [sp, #32]
 800c172:	9b00      	ldr	r3, [sp, #0]
 800c174:	4413      	add	r3, r2
 800c176:	9302      	str	r3, [sp, #8]
 800c178:	3301      	adds	r3, #1
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	9303      	str	r3, [sp, #12]
 800c17e:	bfb8      	it	lt
 800c180:	2301      	movlt	r3, #1
 800c182:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c184:	2200      	movs	r2, #0
 800c186:	6042      	str	r2, [r0, #4]
 800c188:	2204      	movs	r2, #4
 800c18a:	f102 0614 	add.w	r6, r2, #20
 800c18e:	429e      	cmp	r6, r3
 800c190:	6841      	ldr	r1, [r0, #4]
 800c192:	d93d      	bls.n	800c210 <_dtoa_r+0x318>
 800c194:	4620      	mov	r0, r4
 800c196:	f001 f971 	bl	800d47c <_Balloc>
 800c19a:	9001      	str	r0, [sp, #4]
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d13b      	bne.n	800c218 <_dtoa_r+0x320>
 800c1a0:	4b11      	ldr	r3, [pc, #68]	; (800c1e8 <_dtoa_r+0x2f0>)
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c1a8:	e6c0      	b.n	800bf2c <_dtoa_r+0x34>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e7df      	b.n	800c16e <_dtoa_r+0x276>
 800c1ae:	bf00      	nop
 800c1b0:	636f4361 	.word	0x636f4361
 800c1b4:	3fd287a7 	.word	0x3fd287a7
 800c1b8:	8b60c8b3 	.word	0x8b60c8b3
 800c1bc:	3fc68a28 	.word	0x3fc68a28
 800c1c0:	509f79fb 	.word	0x509f79fb
 800c1c4:	3fd34413 	.word	0x3fd34413
 800c1c8:	0800ea1e 	.word	0x0800ea1e
 800c1cc:	0800ea35 	.word	0x0800ea35
 800c1d0:	7ff00000 	.word	0x7ff00000
 800c1d4:	0800ea1a 	.word	0x0800ea1a
 800c1d8:	0800ea11 	.word	0x0800ea11
 800c1dc:	0800e891 	.word	0x0800e891
 800c1e0:	3ff80000 	.word	0x3ff80000
 800c1e4:	0800eba0 	.word	0x0800eba0
 800c1e8:	0800ea90 	.word	0x0800ea90
 800c1ec:	2501      	movs	r5, #1
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9306      	str	r3, [sp, #24]
 800c1f2:	9508      	str	r5, [sp, #32]
 800c1f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	2312      	movs	r3, #18
 800c200:	e7b0      	b.n	800c164 <_dtoa_r+0x26c>
 800c202:	2301      	movs	r3, #1
 800c204:	9308      	str	r3, [sp, #32]
 800c206:	e7f5      	b.n	800c1f4 <_dtoa_r+0x2fc>
 800c208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c20a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c20e:	e7b8      	b.n	800c182 <_dtoa_r+0x28a>
 800c210:	3101      	adds	r1, #1
 800c212:	6041      	str	r1, [r0, #4]
 800c214:	0052      	lsls	r2, r2, #1
 800c216:	e7b8      	b.n	800c18a <_dtoa_r+0x292>
 800c218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c21a:	9a01      	ldr	r2, [sp, #4]
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	9b03      	ldr	r3, [sp, #12]
 800c220:	2b0e      	cmp	r3, #14
 800c222:	f200 809d 	bhi.w	800c360 <_dtoa_r+0x468>
 800c226:	2d00      	cmp	r5, #0
 800c228:	f000 809a 	beq.w	800c360 <_dtoa_r+0x468>
 800c22c:	9b00      	ldr	r3, [sp, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	dd32      	ble.n	800c298 <_dtoa_r+0x3a0>
 800c232:	4ab7      	ldr	r2, [pc, #732]	; (800c510 <_dtoa_r+0x618>)
 800c234:	f003 030f 	and.w	r3, r3, #15
 800c238:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c23c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c240:	9b00      	ldr	r3, [sp, #0]
 800c242:	05d8      	lsls	r0, r3, #23
 800c244:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c248:	d516      	bpl.n	800c278 <_dtoa_r+0x380>
 800c24a:	4bb2      	ldr	r3, [pc, #712]	; (800c514 <_dtoa_r+0x61c>)
 800c24c:	ec51 0b19 	vmov	r0, r1, d9
 800c250:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c254:	f7f4 fafa 	bl	800084c <__aeabi_ddiv>
 800c258:	f007 070f 	and.w	r7, r7, #15
 800c25c:	4682      	mov	sl, r0
 800c25e:	468b      	mov	fp, r1
 800c260:	2503      	movs	r5, #3
 800c262:	4eac      	ldr	r6, [pc, #688]	; (800c514 <_dtoa_r+0x61c>)
 800c264:	b957      	cbnz	r7, 800c27c <_dtoa_r+0x384>
 800c266:	4642      	mov	r2, r8
 800c268:	464b      	mov	r3, r9
 800c26a:	4650      	mov	r0, sl
 800c26c:	4659      	mov	r1, fp
 800c26e:	f7f4 faed 	bl	800084c <__aeabi_ddiv>
 800c272:	4682      	mov	sl, r0
 800c274:	468b      	mov	fp, r1
 800c276:	e028      	b.n	800c2ca <_dtoa_r+0x3d2>
 800c278:	2502      	movs	r5, #2
 800c27a:	e7f2      	b.n	800c262 <_dtoa_r+0x36a>
 800c27c:	07f9      	lsls	r1, r7, #31
 800c27e:	d508      	bpl.n	800c292 <_dtoa_r+0x39a>
 800c280:	4640      	mov	r0, r8
 800c282:	4649      	mov	r1, r9
 800c284:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c288:	f7f4 f9b6 	bl	80005f8 <__aeabi_dmul>
 800c28c:	3501      	adds	r5, #1
 800c28e:	4680      	mov	r8, r0
 800c290:	4689      	mov	r9, r1
 800c292:	107f      	asrs	r7, r7, #1
 800c294:	3608      	adds	r6, #8
 800c296:	e7e5      	b.n	800c264 <_dtoa_r+0x36c>
 800c298:	f000 809b 	beq.w	800c3d2 <_dtoa_r+0x4da>
 800c29c:	9b00      	ldr	r3, [sp, #0]
 800c29e:	4f9d      	ldr	r7, [pc, #628]	; (800c514 <_dtoa_r+0x61c>)
 800c2a0:	425e      	negs	r6, r3
 800c2a2:	4b9b      	ldr	r3, [pc, #620]	; (800c510 <_dtoa_r+0x618>)
 800c2a4:	f006 020f 	and.w	r2, r6, #15
 800c2a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	ec51 0b19 	vmov	r0, r1, d9
 800c2b4:	f7f4 f9a0 	bl	80005f8 <__aeabi_dmul>
 800c2b8:	1136      	asrs	r6, r6, #4
 800c2ba:	4682      	mov	sl, r0
 800c2bc:	468b      	mov	fp, r1
 800c2be:	2300      	movs	r3, #0
 800c2c0:	2502      	movs	r5, #2
 800c2c2:	2e00      	cmp	r6, #0
 800c2c4:	d17a      	bne.n	800c3bc <_dtoa_r+0x4c4>
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1d3      	bne.n	800c272 <_dtoa_r+0x37a>
 800c2ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f000 8082 	beq.w	800c3d6 <_dtoa_r+0x4de>
 800c2d2:	4b91      	ldr	r3, [pc, #580]	; (800c518 <_dtoa_r+0x620>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	4650      	mov	r0, sl
 800c2d8:	4659      	mov	r1, fp
 800c2da:	f7f4 fbff 	bl	8000adc <__aeabi_dcmplt>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d079      	beq.n	800c3d6 <_dtoa_r+0x4de>
 800c2e2:	9b03      	ldr	r3, [sp, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d076      	beq.n	800c3d6 <_dtoa_r+0x4de>
 800c2e8:	9b02      	ldr	r3, [sp, #8]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	dd36      	ble.n	800c35c <_dtoa_r+0x464>
 800c2ee:	9b00      	ldr	r3, [sp, #0]
 800c2f0:	4650      	mov	r0, sl
 800c2f2:	4659      	mov	r1, fp
 800c2f4:	1e5f      	subs	r7, r3, #1
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4b88      	ldr	r3, [pc, #544]	; (800c51c <_dtoa_r+0x624>)
 800c2fa:	f7f4 f97d 	bl	80005f8 <__aeabi_dmul>
 800c2fe:	9e02      	ldr	r6, [sp, #8]
 800c300:	4682      	mov	sl, r0
 800c302:	468b      	mov	fp, r1
 800c304:	3501      	adds	r5, #1
 800c306:	4628      	mov	r0, r5
 800c308:	f7f4 f90c 	bl	8000524 <__aeabi_i2d>
 800c30c:	4652      	mov	r2, sl
 800c30e:	465b      	mov	r3, fp
 800c310:	f7f4 f972 	bl	80005f8 <__aeabi_dmul>
 800c314:	4b82      	ldr	r3, [pc, #520]	; (800c520 <_dtoa_r+0x628>)
 800c316:	2200      	movs	r2, #0
 800c318:	f7f3 ffb8 	bl	800028c <__adddf3>
 800c31c:	46d0      	mov	r8, sl
 800c31e:	46d9      	mov	r9, fp
 800c320:	4682      	mov	sl, r0
 800c322:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c326:	2e00      	cmp	r6, #0
 800c328:	d158      	bne.n	800c3dc <_dtoa_r+0x4e4>
 800c32a:	4b7e      	ldr	r3, [pc, #504]	; (800c524 <_dtoa_r+0x62c>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	4640      	mov	r0, r8
 800c330:	4649      	mov	r1, r9
 800c332:	f7f3 ffa9 	bl	8000288 <__aeabi_dsub>
 800c336:	4652      	mov	r2, sl
 800c338:	465b      	mov	r3, fp
 800c33a:	4680      	mov	r8, r0
 800c33c:	4689      	mov	r9, r1
 800c33e:	f7f4 fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 800c342:	2800      	cmp	r0, #0
 800c344:	f040 8295 	bne.w	800c872 <_dtoa_r+0x97a>
 800c348:	4652      	mov	r2, sl
 800c34a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c34e:	4640      	mov	r0, r8
 800c350:	4649      	mov	r1, r9
 800c352:	f7f4 fbc3 	bl	8000adc <__aeabi_dcmplt>
 800c356:	2800      	cmp	r0, #0
 800c358:	f040 8289 	bne.w	800c86e <_dtoa_r+0x976>
 800c35c:	ec5b ab19 	vmov	sl, fp, d9
 800c360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c362:	2b00      	cmp	r3, #0
 800c364:	f2c0 8148 	blt.w	800c5f8 <_dtoa_r+0x700>
 800c368:	9a00      	ldr	r2, [sp, #0]
 800c36a:	2a0e      	cmp	r2, #14
 800c36c:	f300 8144 	bgt.w	800c5f8 <_dtoa_r+0x700>
 800c370:	4b67      	ldr	r3, [pc, #412]	; (800c510 <_dtoa_r+0x618>)
 800c372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c376:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f280 80d5 	bge.w	800c52c <_dtoa_r+0x634>
 800c382:	9b03      	ldr	r3, [sp, #12]
 800c384:	2b00      	cmp	r3, #0
 800c386:	f300 80d1 	bgt.w	800c52c <_dtoa_r+0x634>
 800c38a:	f040 826f 	bne.w	800c86c <_dtoa_r+0x974>
 800c38e:	4b65      	ldr	r3, [pc, #404]	; (800c524 <_dtoa_r+0x62c>)
 800c390:	2200      	movs	r2, #0
 800c392:	4640      	mov	r0, r8
 800c394:	4649      	mov	r1, r9
 800c396:	f7f4 f92f 	bl	80005f8 <__aeabi_dmul>
 800c39a:	4652      	mov	r2, sl
 800c39c:	465b      	mov	r3, fp
 800c39e:	f7f4 fbb1 	bl	8000b04 <__aeabi_dcmpge>
 800c3a2:	9e03      	ldr	r6, [sp, #12]
 800c3a4:	4637      	mov	r7, r6
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	f040 8245 	bne.w	800c836 <_dtoa_r+0x93e>
 800c3ac:	9d01      	ldr	r5, [sp, #4]
 800c3ae:	2331      	movs	r3, #49	; 0x31
 800c3b0:	f805 3b01 	strb.w	r3, [r5], #1
 800c3b4:	9b00      	ldr	r3, [sp, #0]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	9300      	str	r3, [sp, #0]
 800c3ba:	e240      	b.n	800c83e <_dtoa_r+0x946>
 800c3bc:	07f2      	lsls	r2, r6, #31
 800c3be:	d505      	bpl.n	800c3cc <_dtoa_r+0x4d4>
 800c3c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3c4:	f7f4 f918 	bl	80005f8 <__aeabi_dmul>
 800c3c8:	3501      	adds	r5, #1
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	1076      	asrs	r6, r6, #1
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	e777      	b.n	800c2c2 <_dtoa_r+0x3ca>
 800c3d2:	2502      	movs	r5, #2
 800c3d4:	e779      	b.n	800c2ca <_dtoa_r+0x3d2>
 800c3d6:	9f00      	ldr	r7, [sp, #0]
 800c3d8:	9e03      	ldr	r6, [sp, #12]
 800c3da:	e794      	b.n	800c306 <_dtoa_r+0x40e>
 800c3dc:	9901      	ldr	r1, [sp, #4]
 800c3de:	4b4c      	ldr	r3, [pc, #304]	; (800c510 <_dtoa_r+0x618>)
 800c3e0:	4431      	add	r1, r6
 800c3e2:	910d      	str	r1, [sp, #52]	; 0x34
 800c3e4:	9908      	ldr	r1, [sp, #32]
 800c3e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c3ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c3ee:	2900      	cmp	r1, #0
 800c3f0:	d043      	beq.n	800c47a <_dtoa_r+0x582>
 800c3f2:	494d      	ldr	r1, [pc, #308]	; (800c528 <_dtoa_r+0x630>)
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	f7f4 fa29 	bl	800084c <__aeabi_ddiv>
 800c3fa:	4652      	mov	r2, sl
 800c3fc:	465b      	mov	r3, fp
 800c3fe:	f7f3 ff43 	bl	8000288 <__aeabi_dsub>
 800c402:	9d01      	ldr	r5, [sp, #4]
 800c404:	4682      	mov	sl, r0
 800c406:	468b      	mov	fp, r1
 800c408:	4649      	mov	r1, r9
 800c40a:	4640      	mov	r0, r8
 800c40c:	f7f4 fba4 	bl	8000b58 <__aeabi_d2iz>
 800c410:	4606      	mov	r6, r0
 800c412:	f7f4 f887 	bl	8000524 <__aeabi_i2d>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	4640      	mov	r0, r8
 800c41c:	4649      	mov	r1, r9
 800c41e:	f7f3 ff33 	bl	8000288 <__aeabi_dsub>
 800c422:	3630      	adds	r6, #48	; 0x30
 800c424:	f805 6b01 	strb.w	r6, [r5], #1
 800c428:	4652      	mov	r2, sl
 800c42a:	465b      	mov	r3, fp
 800c42c:	4680      	mov	r8, r0
 800c42e:	4689      	mov	r9, r1
 800c430:	f7f4 fb54 	bl	8000adc <__aeabi_dcmplt>
 800c434:	2800      	cmp	r0, #0
 800c436:	d163      	bne.n	800c500 <_dtoa_r+0x608>
 800c438:	4642      	mov	r2, r8
 800c43a:	464b      	mov	r3, r9
 800c43c:	4936      	ldr	r1, [pc, #216]	; (800c518 <_dtoa_r+0x620>)
 800c43e:	2000      	movs	r0, #0
 800c440:	f7f3 ff22 	bl	8000288 <__aeabi_dsub>
 800c444:	4652      	mov	r2, sl
 800c446:	465b      	mov	r3, fp
 800c448:	f7f4 fb48 	bl	8000adc <__aeabi_dcmplt>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	f040 80b5 	bne.w	800c5bc <_dtoa_r+0x6c4>
 800c452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c454:	429d      	cmp	r5, r3
 800c456:	d081      	beq.n	800c35c <_dtoa_r+0x464>
 800c458:	4b30      	ldr	r3, [pc, #192]	; (800c51c <_dtoa_r+0x624>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	4650      	mov	r0, sl
 800c45e:	4659      	mov	r1, fp
 800c460:	f7f4 f8ca 	bl	80005f8 <__aeabi_dmul>
 800c464:	4b2d      	ldr	r3, [pc, #180]	; (800c51c <_dtoa_r+0x624>)
 800c466:	4682      	mov	sl, r0
 800c468:	468b      	mov	fp, r1
 800c46a:	4640      	mov	r0, r8
 800c46c:	4649      	mov	r1, r9
 800c46e:	2200      	movs	r2, #0
 800c470:	f7f4 f8c2 	bl	80005f8 <__aeabi_dmul>
 800c474:	4680      	mov	r8, r0
 800c476:	4689      	mov	r9, r1
 800c478:	e7c6      	b.n	800c408 <_dtoa_r+0x510>
 800c47a:	4650      	mov	r0, sl
 800c47c:	4659      	mov	r1, fp
 800c47e:	f7f4 f8bb 	bl	80005f8 <__aeabi_dmul>
 800c482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c484:	9d01      	ldr	r5, [sp, #4]
 800c486:	930f      	str	r3, [sp, #60]	; 0x3c
 800c488:	4682      	mov	sl, r0
 800c48a:	468b      	mov	fp, r1
 800c48c:	4649      	mov	r1, r9
 800c48e:	4640      	mov	r0, r8
 800c490:	f7f4 fb62 	bl	8000b58 <__aeabi_d2iz>
 800c494:	4606      	mov	r6, r0
 800c496:	f7f4 f845 	bl	8000524 <__aeabi_i2d>
 800c49a:	3630      	adds	r6, #48	; 0x30
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	4640      	mov	r0, r8
 800c4a2:	4649      	mov	r1, r9
 800c4a4:	f7f3 fef0 	bl	8000288 <__aeabi_dsub>
 800c4a8:	f805 6b01 	strb.w	r6, [r5], #1
 800c4ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4ae:	429d      	cmp	r5, r3
 800c4b0:	4680      	mov	r8, r0
 800c4b2:	4689      	mov	r9, r1
 800c4b4:	f04f 0200 	mov.w	r2, #0
 800c4b8:	d124      	bne.n	800c504 <_dtoa_r+0x60c>
 800c4ba:	4b1b      	ldr	r3, [pc, #108]	; (800c528 <_dtoa_r+0x630>)
 800c4bc:	4650      	mov	r0, sl
 800c4be:	4659      	mov	r1, fp
 800c4c0:	f7f3 fee4 	bl	800028c <__adddf3>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	460b      	mov	r3, r1
 800c4c8:	4640      	mov	r0, r8
 800c4ca:	4649      	mov	r1, r9
 800c4cc:	f7f4 fb24 	bl	8000b18 <__aeabi_dcmpgt>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d173      	bne.n	800c5bc <_dtoa_r+0x6c4>
 800c4d4:	4652      	mov	r2, sl
 800c4d6:	465b      	mov	r3, fp
 800c4d8:	4913      	ldr	r1, [pc, #76]	; (800c528 <_dtoa_r+0x630>)
 800c4da:	2000      	movs	r0, #0
 800c4dc:	f7f3 fed4 	bl	8000288 <__aeabi_dsub>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4640      	mov	r0, r8
 800c4e6:	4649      	mov	r1, r9
 800c4e8:	f7f4 faf8 	bl	8000adc <__aeabi_dcmplt>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	f43f af35 	beq.w	800c35c <_dtoa_r+0x464>
 800c4f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c4f4:	1e6b      	subs	r3, r5, #1
 800c4f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c4fc:	2b30      	cmp	r3, #48	; 0x30
 800c4fe:	d0f8      	beq.n	800c4f2 <_dtoa_r+0x5fa>
 800c500:	9700      	str	r7, [sp, #0]
 800c502:	e049      	b.n	800c598 <_dtoa_r+0x6a0>
 800c504:	4b05      	ldr	r3, [pc, #20]	; (800c51c <_dtoa_r+0x624>)
 800c506:	f7f4 f877 	bl	80005f8 <__aeabi_dmul>
 800c50a:	4680      	mov	r8, r0
 800c50c:	4689      	mov	r9, r1
 800c50e:	e7bd      	b.n	800c48c <_dtoa_r+0x594>
 800c510:	0800eba0 	.word	0x0800eba0
 800c514:	0800eb78 	.word	0x0800eb78
 800c518:	3ff00000 	.word	0x3ff00000
 800c51c:	40240000 	.word	0x40240000
 800c520:	401c0000 	.word	0x401c0000
 800c524:	40140000 	.word	0x40140000
 800c528:	3fe00000 	.word	0x3fe00000
 800c52c:	9d01      	ldr	r5, [sp, #4]
 800c52e:	4656      	mov	r6, sl
 800c530:	465f      	mov	r7, fp
 800c532:	4642      	mov	r2, r8
 800c534:	464b      	mov	r3, r9
 800c536:	4630      	mov	r0, r6
 800c538:	4639      	mov	r1, r7
 800c53a:	f7f4 f987 	bl	800084c <__aeabi_ddiv>
 800c53e:	f7f4 fb0b 	bl	8000b58 <__aeabi_d2iz>
 800c542:	4682      	mov	sl, r0
 800c544:	f7f3 ffee 	bl	8000524 <__aeabi_i2d>
 800c548:	4642      	mov	r2, r8
 800c54a:	464b      	mov	r3, r9
 800c54c:	f7f4 f854 	bl	80005f8 <__aeabi_dmul>
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	4630      	mov	r0, r6
 800c556:	4639      	mov	r1, r7
 800c558:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c55c:	f7f3 fe94 	bl	8000288 <__aeabi_dsub>
 800c560:	f805 6b01 	strb.w	r6, [r5], #1
 800c564:	9e01      	ldr	r6, [sp, #4]
 800c566:	9f03      	ldr	r7, [sp, #12]
 800c568:	1bae      	subs	r6, r5, r6
 800c56a:	42b7      	cmp	r7, r6
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	d135      	bne.n	800c5de <_dtoa_r+0x6e6>
 800c572:	f7f3 fe8b 	bl	800028c <__adddf3>
 800c576:	4642      	mov	r2, r8
 800c578:	464b      	mov	r3, r9
 800c57a:	4606      	mov	r6, r0
 800c57c:	460f      	mov	r7, r1
 800c57e:	f7f4 facb 	bl	8000b18 <__aeabi_dcmpgt>
 800c582:	b9d0      	cbnz	r0, 800c5ba <_dtoa_r+0x6c2>
 800c584:	4642      	mov	r2, r8
 800c586:	464b      	mov	r3, r9
 800c588:	4630      	mov	r0, r6
 800c58a:	4639      	mov	r1, r7
 800c58c:	f7f4 fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c590:	b110      	cbz	r0, 800c598 <_dtoa_r+0x6a0>
 800c592:	f01a 0f01 	tst.w	sl, #1
 800c596:	d110      	bne.n	800c5ba <_dtoa_r+0x6c2>
 800c598:	4620      	mov	r0, r4
 800c59a:	ee18 1a10 	vmov	r1, s16
 800c59e:	f000 ffad 	bl	800d4fc <_Bfree>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	9800      	ldr	r0, [sp, #0]
 800c5a6:	702b      	strb	r3, [r5, #0]
 800c5a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	6018      	str	r0, [r3, #0]
 800c5ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f43f acf1 	beq.w	800bf98 <_dtoa_r+0xa0>
 800c5b6:	601d      	str	r5, [r3, #0]
 800c5b8:	e4ee      	b.n	800bf98 <_dtoa_r+0xa0>
 800c5ba:	9f00      	ldr	r7, [sp, #0]
 800c5bc:	462b      	mov	r3, r5
 800c5be:	461d      	mov	r5, r3
 800c5c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5c4:	2a39      	cmp	r2, #57	; 0x39
 800c5c6:	d106      	bne.n	800c5d6 <_dtoa_r+0x6de>
 800c5c8:	9a01      	ldr	r2, [sp, #4]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d1f7      	bne.n	800c5be <_dtoa_r+0x6c6>
 800c5ce:	9901      	ldr	r1, [sp, #4]
 800c5d0:	2230      	movs	r2, #48	; 0x30
 800c5d2:	3701      	adds	r7, #1
 800c5d4:	700a      	strb	r2, [r1, #0]
 800c5d6:	781a      	ldrb	r2, [r3, #0]
 800c5d8:	3201      	adds	r2, #1
 800c5da:	701a      	strb	r2, [r3, #0]
 800c5dc:	e790      	b.n	800c500 <_dtoa_r+0x608>
 800c5de:	4ba6      	ldr	r3, [pc, #664]	; (800c878 <_dtoa_r+0x980>)
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f7f4 f809 	bl	80005f8 <__aeabi_dmul>
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	4606      	mov	r6, r0
 800c5ec:	460f      	mov	r7, r1
 800c5ee:	f7f4 fa6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d09d      	beq.n	800c532 <_dtoa_r+0x63a>
 800c5f6:	e7cf      	b.n	800c598 <_dtoa_r+0x6a0>
 800c5f8:	9a08      	ldr	r2, [sp, #32]
 800c5fa:	2a00      	cmp	r2, #0
 800c5fc:	f000 80d7 	beq.w	800c7ae <_dtoa_r+0x8b6>
 800c600:	9a06      	ldr	r2, [sp, #24]
 800c602:	2a01      	cmp	r2, #1
 800c604:	f300 80ba 	bgt.w	800c77c <_dtoa_r+0x884>
 800c608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c60a:	2a00      	cmp	r2, #0
 800c60c:	f000 80b2 	beq.w	800c774 <_dtoa_r+0x87c>
 800c610:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c614:	9e07      	ldr	r6, [sp, #28]
 800c616:	9d04      	ldr	r5, [sp, #16]
 800c618:	9a04      	ldr	r2, [sp, #16]
 800c61a:	441a      	add	r2, r3
 800c61c:	9204      	str	r2, [sp, #16]
 800c61e:	9a05      	ldr	r2, [sp, #20]
 800c620:	2101      	movs	r1, #1
 800c622:	441a      	add	r2, r3
 800c624:	4620      	mov	r0, r4
 800c626:	9205      	str	r2, [sp, #20]
 800c628:	f001 f86a 	bl	800d700 <__i2b>
 800c62c:	4607      	mov	r7, r0
 800c62e:	2d00      	cmp	r5, #0
 800c630:	dd0c      	ble.n	800c64c <_dtoa_r+0x754>
 800c632:	9b05      	ldr	r3, [sp, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	dd09      	ble.n	800c64c <_dtoa_r+0x754>
 800c638:	42ab      	cmp	r3, r5
 800c63a:	9a04      	ldr	r2, [sp, #16]
 800c63c:	bfa8      	it	ge
 800c63e:	462b      	movge	r3, r5
 800c640:	1ad2      	subs	r2, r2, r3
 800c642:	9204      	str	r2, [sp, #16]
 800c644:	9a05      	ldr	r2, [sp, #20]
 800c646:	1aed      	subs	r5, r5, r3
 800c648:	1ad3      	subs	r3, r2, r3
 800c64a:	9305      	str	r3, [sp, #20]
 800c64c:	9b07      	ldr	r3, [sp, #28]
 800c64e:	b31b      	cbz	r3, 800c698 <_dtoa_r+0x7a0>
 800c650:	9b08      	ldr	r3, [sp, #32]
 800c652:	2b00      	cmp	r3, #0
 800c654:	f000 80af 	beq.w	800c7b6 <_dtoa_r+0x8be>
 800c658:	2e00      	cmp	r6, #0
 800c65a:	dd13      	ble.n	800c684 <_dtoa_r+0x78c>
 800c65c:	4639      	mov	r1, r7
 800c65e:	4632      	mov	r2, r6
 800c660:	4620      	mov	r0, r4
 800c662:	f001 f90d 	bl	800d880 <__pow5mult>
 800c666:	ee18 2a10 	vmov	r2, s16
 800c66a:	4601      	mov	r1, r0
 800c66c:	4607      	mov	r7, r0
 800c66e:	4620      	mov	r0, r4
 800c670:	f001 f85c 	bl	800d72c <__multiply>
 800c674:	ee18 1a10 	vmov	r1, s16
 800c678:	4680      	mov	r8, r0
 800c67a:	4620      	mov	r0, r4
 800c67c:	f000 ff3e 	bl	800d4fc <_Bfree>
 800c680:	ee08 8a10 	vmov	s16, r8
 800c684:	9b07      	ldr	r3, [sp, #28]
 800c686:	1b9a      	subs	r2, r3, r6
 800c688:	d006      	beq.n	800c698 <_dtoa_r+0x7a0>
 800c68a:	ee18 1a10 	vmov	r1, s16
 800c68e:	4620      	mov	r0, r4
 800c690:	f001 f8f6 	bl	800d880 <__pow5mult>
 800c694:	ee08 0a10 	vmov	s16, r0
 800c698:	2101      	movs	r1, #1
 800c69a:	4620      	mov	r0, r4
 800c69c:	f001 f830 	bl	800d700 <__i2b>
 800c6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	4606      	mov	r6, r0
 800c6a6:	f340 8088 	ble.w	800c7ba <_dtoa_r+0x8c2>
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	4601      	mov	r1, r0
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f001 f8e6 	bl	800d880 <__pow5mult>
 800c6b4:	9b06      	ldr	r3, [sp, #24]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	4606      	mov	r6, r0
 800c6ba:	f340 8081 	ble.w	800c7c0 <_dtoa_r+0x8c8>
 800c6be:	f04f 0800 	mov.w	r8, #0
 800c6c2:	6933      	ldr	r3, [r6, #16]
 800c6c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c6c8:	6918      	ldr	r0, [r3, #16]
 800c6ca:	f000 ffc9 	bl	800d660 <__hi0bits>
 800c6ce:	f1c0 0020 	rsb	r0, r0, #32
 800c6d2:	9b05      	ldr	r3, [sp, #20]
 800c6d4:	4418      	add	r0, r3
 800c6d6:	f010 001f 	ands.w	r0, r0, #31
 800c6da:	f000 8092 	beq.w	800c802 <_dtoa_r+0x90a>
 800c6de:	f1c0 0320 	rsb	r3, r0, #32
 800c6e2:	2b04      	cmp	r3, #4
 800c6e4:	f340 808a 	ble.w	800c7fc <_dtoa_r+0x904>
 800c6e8:	f1c0 001c 	rsb	r0, r0, #28
 800c6ec:	9b04      	ldr	r3, [sp, #16]
 800c6ee:	4403      	add	r3, r0
 800c6f0:	9304      	str	r3, [sp, #16]
 800c6f2:	9b05      	ldr	r3, [sp, #20]
 800c6f4:	4403      	add	r3, r0
 800c6f6:	4405      	add	r5, r0
 800c6f8:	9305      	str	r3, [sp, #20]
 800c6fa:	9b04      	ldr	r3, [sp, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	dd07      	ble.n	800c710 <_dtoa_r+0x818>
 800c700:	ee18 1a10 	vmov	r1, s16
 800c704:	461a      	mov	r2, r3
 800c706:	4620      	mov	r0, r4
 800c708:	f001 f914 	bl	800d934 <__lshift>
 800c70c:	ee08 0a10 	vmov	s16, r0
 800c710:	9b05      	ldr	r3, [sp, #20]
 800c712:	2b00      	cmp	r3, #0
 800c714:	dd05      	ble.n	800c722 <_dtoa_r+0x82a>
 800c716:	4631      	mov	r1, r6
 800c718:	461a      	mov	r2, r3
 800c71a:	4620      	mov	r0, r4
 800c71c:	f001 f90a 	bl	800d934 <__lshift>
 800c720:	4606      	mov	r6, r0
 800c722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c724:	2b00      	cmp	r3, #0
 800c726:	d06e      	beq.n	800c806 <_dtoa_r+0x90e>
 800c728:	ee18 0a10 	vmov	r0, s16
 800c72c:	4631      	mov	r1, r6
 800c72e:	f001 f971 	bl	800da14 <__mcmp>
 800c732:	2800      	cmp	r0, #0
 800c734:	da67      	bge.n	800c806 <_dtoa_r+0x90e>
 800c736:	9b00      	ldr	r3, [sp, #0]
 800c738:	3b01      	subs	r3, #1
 800c73a:	ee18 1a10 	vmov	r1, s16
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	220a      	movs	r2, #10
 800c742:	2300      	movs	r3, #0
 800c744:	4620      	mov	r0, r4
 800c746:	f000 fefb 	bl	800d540 <__multadd>
 800c74a:	9b08      	ldr	r3, [sp, #32]
 800c74c:	ee08 0a10 	vmov	s16, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 81b1 	beq.w	800cab8 <_dtoa_r+0xbc0>
 800c756:	2300      	movs	r3, #0
 800c758:	4639      	mov	r1, r7
 800c75a:	220a      	movs	r2, #10
 800c75c:	4620      	mov	r0, r4
 800c75e:	f000 feef 	bl	800d540 <__multadd>
 800c762:	9b02      	ldr	r3, [sp, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	4607      	mov	r7, r0
 800c768:	f300 808e 	bgt.w	800c888 <_dtoa_r+0x990>
 800c76c:	9b06      	ldr	r3, [sp, #24]
 800c76e:	2b02      	cmp	r3, #2
 800c770:	dc51      	bgt.n	800c816 <_dtoa_r+0x91e>
 800c772:	e089      	b.n	800c888 <_dtoa_r+0x990>
 800c774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c776:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c77a:	e74b      	b.n	800c614 <_dtoa_r+0x71c>
 800c77c:	9b03      	ldr	r3, [sp, #12]
 800c77e:	1e5e      	subs	r6, r3, #1
 800c780:	9b07      	ldr	r3, [sp, #28]
 800c782:	42b3      	cmp	r3, r6
 800c784:	bfbf      	itttt	lt
 800c786:	9b07      	ldrlt	r3, [sp, #28]
 800c788:	9607      	strlt	r6, [sp, #28]
 800c78a:	1af2      	sublt	r2, r6, r3
 800c78c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c78e:	bfb6      	itet	lt
 800c790:	189b      	addlt	r3, r3, r2
 800c792:	1b9e      	subge	r6, r3, r6
 800c794:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	bfb8      	it	lt
 800c79a:	2600      	movlt	r6, #0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	bfb7      	itett	lt
 800c7a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c7a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c7a8:	1a9d      	sublt	r5, r3, r2
 800c7aa:	2300      	movlt	r3, #0
 800c7ac:	e734      	b.n	800c618 <_dtoa_r+0x720>
 800c7ae:	9e07      	ldr	r6, [sp, #28]
 800c7b0:	9d04      	ldr	r5, [sp, #16]
 800c7b2:	9f08      	ldr	r7, [sp, #32]
 800c7b4:	e73b      	b.n	800c62e <_dtoa_r+0x736>
 800c7b6:	9a07      	ldr	r2, [sp, #28]
 800c7b8:	e767      	b.n	800c68a <_dtoa_r+0x792>
 800c7ba:	9b06      	ldr	r3, [sp, #24]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	dc18      	bgt.n	800c7f2 <_dtoa_r+0x8fa>
 800c7c0:	f1ba 0f00 	cmp.w	sl, #0
 800c7c4:	d115      	bne.n	800c7f2 <_dtoa_r+0x8fa>
 800c7c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c7ca:	b993      	cbnz	r3, 800c7f2 <_dtoa_r+0x8fa>
 800c7cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c7d0:	0d1b      	lsrs	r3, r3, #20
 800c7d2:	051b      	lsls	r3, r3, #20
 800c7d4:	b183      	cbz	r3, 800c7f8 <_dtoa_r+0x900>
 800c7d6:	9b04      	ldr	r3, [sp, #16]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	9304      	str	r3, [sp, #16]
 800c7dc:	9b05      	ldr	r3, [sp, #20]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	9305      	str	r3, [sp, #20]
 800c7e2:	f04f 0801 	mov.w	r8, #1
 800c7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f47f af6a 	bne.w	800c6c2 <_dtoa_r+0x7ca>
 800c7ee:	2001      	movs	r0, #1
 800c7f0:	e76f      	b.n	800c6d2 <_dtoa_r+0x7da>
 800c7f2:	f04f 0800 	mov.w	r8, #0
 800c7f6:	e7f6      	b.n	800c7e6 <_dtoa_r+0x8ee>
 800c7f8:	4698      	mov	r8, r3
 800c7fa:	e7f4      	b.n	800c7e6 <_dtoa_r+0x8ee>
 800c7fc:	f43f af7d 	beq.w	800c6fa <_dtoa_r+0x802>
 800c800:	4618      	mov	r0, r3
 800c802:	301c      	adds	r0, #28
 800c804:	e772      	b.n	800c6ec <_dtoa_r+0x7f4>
 800c806:	9b03      	ldr	r3, [sp, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	dc37      	bgt.n	800c87c <_dtoa_r+0x984>
 800c80c:	9b06      	ldr	r3, [sp, #24]
 800c80e:	2b02      	cmp	r3, #2
 800c810:	dd34      	ble.n	800c87c <_dtoa_r+0x984>
 800c812:	9b03      	ldr	r3, [sp, #12]
 800c814:	9302      	str	r3, [sp, #8]
 800c816:	9b02      	ldr	r3, [sp, #8]
 800c818:	b96b      	cbnz	r3, 800c836 <_dtoa_r+0x93e>
 800c81a:	4631      	mov	r1, r6
 800c81c:	2205      	movs	r2, #5
 800c81e:	4620      	mov	r0, r4
 800c820:	f000 fe8e 	bl	800d540 <__multadd>
 800c824:	4601      	mov	r1, r0
 800c826:	4606      	mov	r6, r0
 800c828:	ee18 0a10 	vmov	r0, s16
 800c82c:	f001 f8f2 	bl	800da14 <__mcmp>
 800c830:	2800      	cmp	r0, #0
 800c832:	f73f adbb 	bgt.w	800c3ac <_dtoa_r+0x4b4>
 800c836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c838:	9d01      	ldr	r5, [sp, #4]
 800c83a:	43db      	mvns	r3, r3
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	f04f 0800 	mov.w	r8, #0
 800c842:	4631      	mov	r1, r6
 800c844:	4620      	mov	r0, r4
 800c846:	f000 fe59 	bl	800d4fc <_Bfree>
 800c84a:	2f00      	cmp	r7, #0
 800c84c:	f43f aea4 	beq.w	800c598 <_dtoa_r+0x6a0>
 800c850:	f1b8 0f00 	cmp.w	r8, #0
 800c854:	d005      	beq.n	800c862 <_dtoa_r+0x96a>
 800c856:	45b8      	cmp	r8, r7
 800c858:	d003      	beq.n	800c862 <_dtoa_r+0x96a>
 800c85a:	4641      	mov	r1, r8
 800c85c:	4620      	mov	r0, r4
 800c85e:	f000 fe4d 	bl	800d4fc <_Bfree>
 800c862:	4639      	mov	r1, r7
 800c864:	4620      	mov	r0, r4
 800c866:	f000 fe49 	bl	800d4fc <_Bfree>
 800c86a:	e695      	b.n	800c598 <_dtoa_r+0x6a0>
 800c86c:	2600      	movs	r6, #0
 800c86e:	4637      	mov	r7, r6
 800c870:	e7e1      	b.n	800c836 <_dtoa_r+0x93e>
 800c872:	9700      	str	r7, [sp, #0]
 800c874:	4637      	mov	r7, r6
 800c876:	e599      	b.n	800c3ac <_dtoa_r+0x4b4>
 800c878:	40240000 	.word	0x40240000
 800c87c:	9b08      	ldr	r3, [sp, #32]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f000 80ca 	beq.w	800ca18 <_dtoa_r+0xb20>
 800c884:	9b03      	ldr	r3, [sp, #12]
 800c886:	9302      	str	r3, [sp, #8]
 800c888:	2d00      	cmp	r5, #0
 800c88a:	dd05      	ble.n	800c898 <_dtoa_r+0x9a0>
 800c88c:	4639      	mov	r1, r7
 800c88e:	462a      	mov	r2, r5
 800c890:	4620      	mov	r0, r4
 800c892:	f001 f84f 	bl	800d934 <__lshift>
 800c896:	4607      	mov	r7, r0
 800c898:	f1b8 0f00 	cmp.w	r8, #0
 800c89c:	d05b      	beq.n	800c956 <_dtoa_r+0xa5e>
 800c89e:	6879      	ldr	r1, [r7, #4]
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f000 fdeb 	bl	800d47c <_Balloc>
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	b928      	cbnz	r0, 800c8b6 <_dtoa_r+0x9be>
 800c8aa:	4b87      	ldr	r3, [pc, #540]	; (800cac8 <_dtoa_r+0xbd0>)
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c8b2:	f7ff bb3b 	b.w	800bf2c <_dtoa_r+0x34>
 800c8b6:	693a      	ldr	r2, [r7, #16]
 800c8b8:	3202      	adds	r2, #2
 800c8ba:	0092      	lsls	r2, r2, #2
 800c8bc:	f107 010c 	add.w	r1, r7, #12
 800c8c0:	300c      	adds	r0, #12
 800c8c2:	f7fd fa7e 	bl	8009dc2 <memcpy>
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f001 f832 	bl	800d934 <__lshift>
 800c8d0:	9b01      	ldr	r3, [sp, #4]
 800c8d2:	f103 0901 	add.w	r9, r3, #1
 800c8d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c8da:	4413      	add	r3, r2
 800c8dc:	9305      	str	r3, [sp, #20]
 800c8de:	f00a 0301 	and.w	r3, sl, #1
 800c8e2:	46b8      	mov	r8, r7
 800c8e4:	9304      	str	r3, [sp, #16]
 800c8e6:	4607      	mov	r7, r0
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	ee18 0a10 	vmov	r0, s16
 800c8ee:	f7ff fa75 	bl	800bddc <quorem>
 800c8f2:	4641      	mov	r1, r8
 800c8f4:	9002      	str	r0, [sp, #8]
 800c8f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c8fa:	ee18 0a10 	vmov	r0, s16
 800c8fe:	f001 f889 	bl	800da14 <__mcmp>
 800c902:	463a      	mov	r2, r7
 800c904:	9003      	str	r0, [sp, #12]
 800c906:	4631      	mov	r1, r6
 800c908:	4620      	mov	r0, r4
 800c90a:	f001 f89f 	bl	800da4c <__mdiff>
 800c90e:	68c2      	ldr	r2, [r0, #12]
 800c910:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c914:	4605      	mov	r5, r0
 800c916:	bb02      	cbnz	r2, 800c95a <_dtoa_r+0xa62>
 800c918:	4601      	mov	r1, r0
 800c91a:	ee18 0a10 	vmov	r0, s16
 800c91e:	f001 f879 	bl	800da14 <__mcmp>
 800c922:	4602      	mov	r2, r0
 800c924:	4629      	mov	r1, r5
 800c926:	4620      	mov	r0, r4
 800c928:	9207      	str	r2, [sp, #28]
 800c92a:	f000 fde7 	bl	800d4fc <_Bfree>
 800c92e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c932:	ea43 0102 	orr.w	r1, r3, r2
 800c936:	9b04      	ldr	r3, [sp, #16]
 800c938:	430b      	orrs	r3, r1
 800c93a:	464d      	mov	r5, r9
 800c93c:	d10f      	bne.n	800c95e <_dtoa_r+0xa66>
 800c93e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c942:	d02a      	beq.n	800c99a <_dtoa_r+0xaa2>
 800c944:	9b03      	ldr	r3, [sp, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	dd02      	ble.n	800c950 <_dtoa_r+0xa58>
 800c94a:	9b02      	ldr	r3, [sp, #8]
 800c94c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c950:	f88b a000 	strb.w	sl, [fp]
 800c954:	e775      	b.n	800c842 <_dtoa_r+0x94a>
 800c956:	4638      	mov	r0, r7
 800c958:	e7ba      	b.n	800c8d0 <_dtoa_r+0x9d8>
 800c95a:	2201      	movs	r2, #1
 800c95c:	e7e2      	b.n	800c924 <_dtoa_r+0xa2c>
 800c95e:	9b03      	ldr	r3, [sp, #12]
 800c960:	2b00      	cmp	r3, #0
 800c962:	db04      	blt.n	800c96e <_dtoa_r+0xa76>
 800c964:	9906      	ldr	r1, [sp, #24]
 800c966:	430b      	orrs	r3, r1
 800c968:	9904      	ldr	r1, [sp, #16]
 800c96a:	430b      	orrs	r3, r1
 800c96c:	d122      	bne.n	800c9b4 <_dtoa_r+0xabc>
 800c96e:	2a00      	cmp	r2, #0
 800c970:	ddee      	ble.n	800c950 <_dtoa_r+0xa58>
 800c972:	ee18 1a10 	vmov	r1, s16
 800c976:	2201      	movs	r2, #1
 800c978:	4620      	mov	r0, r4
 800c97a:	f000 ffdb 	bl	800d934 <__lshift>
 800c97e:	4631      	mov	r1, r6
 800c980:	ee08 0a10 	vmov	s16, r0
 800c984:	f001 f846 	bl	800da14 <__mcmp>
 800c988:	2800      	cmp	r0, #0
 800c98a:	dc03      	bgt.n	800c994 <_dtoa_r+0xa9c>
 800c98c:	d1e0      	bne.n	800c950 <_dtoa_r+0xa58>
 800c98e:	f01a 0f01 	tst.w	sl, #1
 800c992:	d0dd      	beq.n	800c950 <_dtoa_r+0xa58>
 800c994:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c998:	d1d7      	bne.n	800c94a <_dtoa_r+0xa52>
 800c99a:	2339      	movs	r3, #57	; 0x39
 800c99c:	f88b 3000 	strb.w	r3, [fp]
 800c9a0:	462b      	mov	r3, r5
 800c9a2:	461d      	mov	r5, r3
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c9aa:	2a39      	cmp	r2, #57	; 0x39
 800c9ac:	d071      	beq.n	800ca92 <_dtoa_r+0xb9a>
 800c9ae:	3201      	adds	r2, #1
 800c9b0:	701a      	strb	r2, [r3, #0]
 800c9b2:	e746      	b.n	800c842 <_dtoa_r+0x94a>
 800c9b4:	2a00      	cmp	r2, #0
 800c9b6:	dd07      	ble.n	800c9c8 <_dtoa_r+0xad0>
 800c9b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c9bc:	d0ed      	beq.n	800c99a <_dtoa_r+0xaa2>
 800c9be:	f10a 0301 	add.w	r3, sl, #1
 800c9c2:	f88b 3000 	strb.w	r3, [fp]
 800c9c6:	e73c      	b.n	800c842 <_dtoa_r+0x94a>
 800c9c8:	9b05      	ldr	r3, [sp, #20]
 800c9ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c9ce:	4599      	cmp	r9, r3
 800c9d0:	d047      	beq.n	800ca62 <_dtoa_r+0xb6a>
 800c9d2:	ee18 1a10 	vmov	r1, s16
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	220a      	movs	r2, #10
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f000 fdb0 	bl	800d540 <__multadd>
 800c9e0:	45b8      	cmp	r8, r7
 800c9e2:	ee08 0a10 	vmov	s16, r0
 800c9e6:	f04f 0300 	mov.w	r3, #0
 800c9ea:	f04f 020a 	mov.w	r2, #10
 800c9ee:	4641      	mov	r1, r8
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	d106      	bne.n	800ca02 <_dtoa_r+0xb0a>
 800c9f4:	f000 fda4 	bl	800d540 <__multadd>
 800c9f8:	4680      	mov	r8, r0
 800c9fa:	4607      	mov	r7, r0
 800c9fc:	f109 0901 	add.w	r9, r9, #1
 800ca00:	e772      	b.n	800c8e8 <_dtoa_r+0x9f0>
 800ca02:	f000 fd9d 	bl	800d540 <__multadd>
 800ca06:	4639      	mov	r1, r7
 800ca08:	4680      	mov	r8, r0
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	220a      	movs	r2, #10
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f000 fd96 	bl	800d540 <__multadd>
 800ca14:	4607      	mov	r7, r0
 800ca16:	e7f1      	b.n	800c9fc <_dtoa_r+0xb04>
 800ca18:	9b03      	ldr	r3, [sp, #12]
 800ca1a:	9302      	str	r3, [sp, #8]
 800ca1c:	9d01      	ldr	r5, [sp, #4]
 800ca1e:	ee18 0a10 	vmov	r0, s16
 800ca22:	4631      	mov	r1, r6
 800ca24:	f7ff f9da 	bl	800bddc <quorem>
 800ca28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ca2c:	9b01      	ldr	r3, [sp, #4]
 800ca2e:	f805 ab01 	strb.w	sl, [r5], #1
 800ca32:	1aea      	subs	r2, r5, r3
 800ca34:	9b02      	ldr	r3, [sp, #8]
 800ca36:	4293      	cmp	r3, r2
 800ca38:	dd09      	ble.n	800ca4e <_dtoa_r+0xb56>
 800ca3a:	ee18 1a10 	vmov	r1, s16
 800ca3e:	2300      	movs	r3, #0
 800ca40:	220a      	movs	r2, #10
 800ca42:	4620      	mov	r0, r4
 800ca44:	f000 fd7c 	bl	800d540 <__multadd>
 800ca48:	ee08 0a10 	vmov	s16, r0
 800ca4c:	e7e7      	b.n	800ca1e <_dtoa_r+0xb26>
 800ca4e:	9b02      	ldr	r3, [sp, #8]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	bfc8      	it	gt
 800ca54:	461d      	movgt	r5, r3
 800ca56:	9b01      	ldr	r3, [sp, #4]
 800ca58:	bfd8      	it	le
 800ca5a:	2501      	movle	r5, #1
 800ca5c:	441d      	add	r5, r3
 800ca5e:	f04f 0800 	mov.w	r8, #0
 800ca62:	ee18 1a10 	vmov	r1, s16
 800ca66:	2201      	movs	r2, #1
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f000 ff63 	bl	800d934 <__lshift>
 800ca6e:	4631      	mov	r1, r6
 800ca70:	ee08 0a10 	vmov	s16, r0
 800ca74:	f000 ffce 	bl	800da14 <__mcmp>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	dc91      	bgt.n	800c9a0 <_dtoa_r+0xaa8>
 800ca7c:	d102      	bne.n	800ca84 <_dtoa_r+0xb8c>
 800ca7e:	f01a 0f01 	tst.w	sl, #1
 800ca82:	d18d      	bne.n	800c9a0 <_dtoa_r+0xaa8>
 800ca84:	462b      	mov	r3, r5
 800ca86:	461d      	mov	r5, r3
 800ca88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca8c:	2a30      	cmp	r2, #48	; 0x30
 800ca8e:	d0fa      	beq.n	800ca86 <_dtoa_r+0xb8e>
 800ca90:	e6d7      	b.n	800c842 <_dtoa_r+0x94a>
 800ca92:	9a01      	ldr	r2, [sp, #4]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d184      	bne.n	800c9a2 <_dtoa_r+0xaaa>
 800ca98:	9b00      	ldr	r3, [sp, #0]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	2331      	movs	r3, #49	; 0x31
 800caa0:	7013      	strb	r3, [r2, #0]
 800caa2:	e6ce      	b.n	800c842 <_dtoa_r+0x94a>
 800caa4:	4b09      	ldr	r3, [pc, #36]	; (800cacc <_dtoa_r+0xbd4>)
 800caa6:	f7ff ba95 	b.w	800bfd4 <_dtoa_r+0xdc>
 800caaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caac:	2b00      	cmp	r3, #0
 800caae:	f47f aa6e 	bne.w	800bf8e <_dtoa_r+0x96>
 800cab2:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <_dtoa_r+0xbd8>)
 800cab4:	f7ff ba8e 	b.w	800bfd4 <_dtoa_r+0xdc>
 800cab8:	9b02      	ldr	r3, [sp, #8]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	dcae      	bgt.n	800ca1c <_dtoa_r+0xb24>
 800cabe:	9b06      	ldr	r3, [sp, #24]
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	f73f aea8 	bgt.w	800c816 <_dtoa_r+0x91e>
 800cac6:	e7a9      	b.n	800ca1c <_dtoa_r+0xb24>
 800cac8:	0800ea90 	.word	0x0800ea90
 800cacc:	0800e890 	.word	0x0800e890
 800cad0:	0800ea11 	.word	0x0800ea11

0800cad4 <__sflush_r>:
 800cad4:	898a      	ldrh	r2, [r1, #12]
 800cad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cada:	4605      	mov	r5, r0
 800cadc:	0710      	lsls	r0, r2, #28
 800cade:	460c      	mov	r4, r1
 800cae0:	d458      	bmi.n	800cb94 <__sflush_r+0xc0>
 800cae2:	684b      	ldr	r3, [r1, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	dc05      	bgt.n	800caf4 <__sflush_r+0x20>
 800cae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800caea:	2b00      	cmp	r3, #0
 800caec:	dc02      	bgt.n	800caf4 <__sflush_r+0x20>
 800caee:	2000      	movs	r0, #0
 800caf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caf6:	2e00      	cmp	r6, #0
 800caf8:	d0f9      	beq.n	800caee <__sflush_r+0x1a>
 800cafa:	2300      	movs	r3, #0
 800cafc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb00:	682f      	ldr	r7, [r5, #0]
 800cb02:	602b      	str	r3, [r5, #0]
 800cb04:	d032      	beq.n	800cb6c <__sflush_r+0x98>
 800cb06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb08:	89a3      	ldrh	r3, [r4, #12]
 800cb0a:	075a      	lsls	r2, r3, #29
 800cb0c:	d505      	bpl.n	800cb1a <__sflush_r+0x46>
 800cb0e:	6863      	ldr	r3, [r4, #4]
 800cb10:	1ac0      	subs	r0, r0, r3
 800cb12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb14:	b10b      	cbz	r3, 800cb1a <__sflush_r+0x46>
 800cb16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb18:	1ac0      	subs	r0, r0, r3
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb20:	6a21      	ldr	r1, [r4, #32]
 800cb22:	4628      	mov	r0, r5
 800cb24:	47b0      	blx	r6
 800cb26:	1c43      	adds	r3, r0, #1
 800cb28:	89a3      	ldrh	r3, [r4, #12]
 800cb2a:	d106      	bne.n	800cb3a <__sflush_r+0x66>
 800cb2c:	6829      	ldr	r1, [r5, #0]
 800cb2e:	291d      	cmp	r1, #29
 800cb30:	d82c      	bhi.n	800cb8c <__sflush_r+0xb8>
 800cb32:	4a2a      	ldr	r2, [pc, #168]	; (800cbdc <__sflush_r+0x108>)
 800cb34:	40ca      	lsrs	r2, r1
 800cb36:	07d6      	lsls	r6, r2, #31
 800cb38:	d528      	bpl.n	800cb8c <__sflush_r+0xb8>
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	6062      	str	r2, [r4, #4]
 800cb3e:	04d9      	lsls	r1, r3, #19
 800cb40:	6922      	ldr	r2, [r4, #16]
 800cb42:	6022      	str	r2, [r4, #0]
 800cb44:	d504      	bpl.n	800cb50 <__sflush_r+0x7c>
 800cb46:	1c42      	adds	r2, r0, #1
 800cb48:	d101      	bne.n	800cb4e <__sflush_r+0x7a>
 800cb4a:	682b      	ldr	r3, [r5, #0]
 800cb4c:	b903      	cbnz	r3, 800cb50 <__sflush_r+0x7c>
 800cb4e:	6560      	str	r0, [r4, #84]	; 0x54
 800cb50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb52:	602f      	str	r7, [r5, #0]
 800cb54:	2900      	cmp	r1, #0
 800cb56:	d0ca      	beq.n	800caee <__sflush_r+0x1a>
 800cb58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb5c:	4299      	cmp	r1, r3
 800cb5e:	d002      	beq.n	800cb66 <__sflush_r+0x92>
 800cb60:	4628      	mov	r0, r5
 800cb62:	f001 f963 	bl	800de2c <_free_r>
 800cb66:	2000      	movs	r0, #0
 800cb68:	6360      	str	r0, [r4, #52]	; 0x34
 800cb6a:	e7c1      	b.n	800caf0 <__sflush_r+0x1c>
 800cb6c:	6a21      	ldr	r1, [r4, #32]
 800cb6e:	2301      	movs	r3, #1
 800cb70:	4628      	mov	r0, r5
 800cb72:	47b0      	blx	r6
 800cb74:	1c41      	adds	r1, r0, #1
 800cb76:	d1c7      	bne.n	800cb08 <__sflush_r+0x34>
 800cb78:	682b      	ldr	r3, [r5, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d0c4      	beq.n	800cb08 <__sflush_r+0x34>
 800cb7e:	2b1d      	cmp	r3, #29
 800cb80:	d001      	beq.n	800cb86 <__sflush_r+0xb2>
 800cb82:	2b16      	cmp	r3, #22
 800cb84:	d101      	bne.n	800cb8a <__sflush_r+0xb6>
 800cb86:	602f      	str	r7, [r5, #0]
 800cb88:	e7b1      	b.n	800caee <__sflush_r+0x1a>
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb90:	81a3      	strh	r3, [r4, #12]
 800cb92:	e7ad      	b.n	800caf0 <__sflush_r+0x1c>
 800cb94:	690f      	ldr	r7, [r1, #16]
 800cb96:	2f00      	cmp	r7, #0
 800cb98:	d0a9      	beq.n	800caee <__sflush_r+0x1a>
 800cb9a:	0793      	lsls	r3, r2, #30
 800cb9c:	680e      	ldr	r6, [r1, #0]
 800cb9e:	bf08      	it	eq
 800cba0:	694b      	ldreq	r3, [r1, #20]
 800cba2:	600f      	str	r7, [r1, #0]
 800cba4:	bf18      	it	ne
 800cba6:	2300      	movne	r3, #0
 800cba8:	eba6 0807 	sub.w	r8, r6, r7
 800cbac:	608b      	str	r3, [r1, #8]
 800cbae:	f1b8 0f00 	cmp.w	r8, #0
 800cbb2:	dd9c      	ble.n	800caee <__sflush_r+0x1a>
 800cbb4:	6a21      	ldr	r1, [r4, #32]
 800cbb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbb8:	4643      	mov	r3, r8
 800cbba:	463a      	mov	r2, r7
 800cbbc:	4628      	mov	r0, r5
 800cbbe:	47b0      	blx	r6
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	dc06      	bgt.n	800cbd2 <__sflush_r+0xfe>
 800cbc4:	89a3      	ldrh	r3, [r4, #12]
 800cbc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbca:	81a3      	strh	r3, [r4, #12]
 800cbcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbd0:	e78e      	b.n	800caf0 <__sflush_r+0x1c>
 800cbd2:	4407      	add	r7, r0
 800cbd4:	eba8 0800 	sub.w	r8, r8, r0
 800cbd8:	e7e9      	b.n	800cbae <__sflush_r+0xda>
 800cbda:	bf00      	nop
 800cbdc:	20400001 	.word	0x20400001

0800cbe0 <_fflush_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	690b      	ldr	r3, [r1, #16]
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	b913      	cbnz	r3, 800cbf0 <_fflush_r+0x10>
 800cbea:	2500      	movs	r5, #0
 800cbec:	4628      	mov	r0, r5
 800cbee:	bd38      	pop	{r3, r4, r5, pc}
 800cbf0:	b118      	cbz	r0, 800cbfa <_fflush_r+0x1a>
 800cbf2:	6983      	ldr	r3, [r0, #24]
 800cbf4:	b90b      	cbnz	r3, 800cbfa <_fflush_r+0x1a>
 800cbf6:	f7fd f81f 	bl	8009c38 <__sinit>
 800cbfa:	4b14      	ldr	r3, [pc, #80]	; (800cc4c <_fflush_r+0x6c>)
 800cbfc:	429c      	cmp	r4, r3
 800cbfe:	d11b      	bne.n	800cc38 <_fflush_r+0x58>
 800cc00:	686c      	ldr	r4, [r5, #4]
 800cc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d0ef      	beq.n	800cbea <_fflush_r+0xa>
 800cc0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc0c:	07d0      	lsls	r0, r2, #31
 800cc0e:	d404      	bmi.n	800cc1a <_fflush_r+0x3a>
 800cc10:	0599      	lsls	r1, r3, #22
 800cc12:	d402      	bmi.n	800cc1a <_fflush_r+0x3a>
 800cc14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc16:	f7fd f8d2 	bl	8009dbe <__retarget_lock_acquire_recursive>
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	4621      	mov	r1, r4
 800cc1e:	f7ff ff59 	bl	800cad4 <__sflush_r>
 800cc22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc24:	07da      	lsls	r2, r3, #31
 800cc26:	4605      	mov	r5, r0
 800cc28:	d4e0      	bmi.n	800cbec <_fflush_r+0xc>
 800cc2a:	89a3      	ldrh	r3, [r4, #12]
 800cc2c:	059b      	lsls	r3, r3, #22
 800cc2e:	d4dd      	bmi.n	800cbec <_fflush_r+0xc>
 800cc30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc32:	f7fd f8c5 	bl	8009dc0 <__retarget_lock_release_recursive>
 800cc36:	e7d9      	b.n	800cbec <_fflush_r+0xc>
 800cc38:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <_fflush_r+0x70>)
 800cc3a:	429c      	cmp	r4, r3
 800cc3c:	d101      	bne.n	800cc42 <_fflush_r+0x62>
 800cc3e:	68ac      	ldr	r4, [r5, #8]
 800cc40:	e7df      	b.n	800cc02 <_fflush_r+0x22>
 800cc42:	4b04      	ldr	r3, [pc, #16]	; (800cc54 <_fflush_r+0x74>)
 800cc44:	429c      	cmp	r4, r3
 800cc46:	bf08      	it	eq
 800cc48:	68ec      	ldreq	r4, [r5, #12]
 800cc4a:	e7da      	b.n	800cc02 <_fflush_r+0x22>
 800cc4c:	0800e83c 	.word	0x0800e83c
 800cc50:	0800e85c 	.word	0x0800e85c
 800cc54:	0800e81c 	.word	0x0800e81c

0800cc58 <rshift>:
 800cc58:	6903      	ldr	r3, [r0, #16]
 800cc5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc62:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc66:	f100 0414 	add.w	r4, r0, #20
 800cc6a:	dd45      	ble.n	800ccf8 <rshift+0xa0>
 800cc6c:	f011 011f 	ands.w	r1, r1, #31
 800cc70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cc74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cc78:	d10c      	bne.n	800cc94 <rshift+0x3c>
 800cc7a:	f100 0710 	add.w	r7, r0, #16
 800cc7e:	4629      	mov	r1, r5
 800cc80:	42b1      	cmp	r1, r6
 800cc82:	d334      	bcc.n	800ccee <rshift+0x96>
 800cc84:	1a9b      	subs	r3, r3, r2
 800cc86:	009b      	lsls	r3, r3, #2
 800cc88:	1eea      	subs	r2, r5, #3
 800cc8a:	4296      	cmp	r6, r2
 800cc8c:	bf38      	it	cc
 800cc8e:	2300      	movcc	r3, #0
 800cc90:	4423      	add	r3, r4
 800cc92:	e015      	b.n	800ccc0 <rshift+0x68>
 800cc94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cc98:	f1c1 0820 	rsb	r8, r1, #32
 800cc9c:	40cf      	lsrs	r7, r1
 800cc9e:	f105 0e04 	add.w	lr, r5, #4
 800cca2:	46a1      	mov	r9, r4
 800cca4:	4576      	cmp	r6, lr
 800cca6:	46f4      	mov	ip, lr
 800cca8:	d815      	bhi.n	800ccd6 <rshift+0x7e>
 800ccaa:	1a9a      	subs	r2, r3, r2
 800ccac:	0092      	lsls	r2, r2, #2
 800ccae:	3a04      	subs	r2, #4
 800ccb0:	3501      	adds	r5, #1
 800ccb2:	42ae      	cmp	r6, r5
 800ccb4:	bf38      	it	cc
 800ccb6:	2200      	movcc	r2, #0
 800ccb8:	18a3      	adds	r3, r4, r2
 800ccba:	50a7      	str	r7, [r4, r2]
 800ccbc:	b107      	cbz	r7, 800ccc0 <rshift+0x68>
 800ccbe:	3304      	adds	r3, #4
 800ccc0:	1b1a      	subs	r2, r3, r4
 800ccc2:	42a3      	cmp	r3, r4
 800ccc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ccc8:	bf08      	it	eq
 800ccca:	2300      	moveq	r3, #0
 800cccc:	6102      	str	r2, [r0, #16]
 800ccce:	bf08      	it	eq
 800ccd0:	6143      	streq	r3, [r0, #20]
 800ccd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccd6:	f8dc c000 	ldr.w	ip, [ip]
 800ccda:	fa0c fc08 	lsl.w	ip, ip, r8
 800ccde:	ea4c 0707 	orr.w	r7, ip, r7
 800cce2:	f849 7b04 	str.w	r7, [r9], #4
 800cce6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ccea:	40cf      	lsrs	r7, r1
 800ccec:	e7da      	b.n	800cca4 <rshift+0x4c>
 800ccee:	f851 cb04 	ldr.w	ip, [r1], #4
 800ccf2:	f847 cf04 	str.w	ip, [r7, #4]!
 800ccf6:	e7c3      	b.n	800cc80 <rshift+0x28>
 800ccf8:	4623      	mov	r3, r4
 800ccfa:	e7e1      	b.n	800ccc0 <rshift+0x68>

0800ccfc <__hexdig_fun>:
 800ccfc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cd00:	2b09      	cmp	r3, #9
 800cd02:	d802      	bhi.n	800cd0a <__hexdig_fun+0xe>
 800cd04:	3820      	subs	r0, #32
 800cd06:	b2c0      	uxtb	r0, r0
 800cd08:	4770      	bx	lr
 800cd0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cd0e:	2b05      	cmp	r3, #5
 800cd10:	d801      	bhi.n	800cd16 <__hexdig_fun+0x1a>
 800cd12:	3847      	subs	r0, #71	; 0x47
 800cd14:	e7f7      	b.n	800cd06 <__hexdig_fun+0xa>
 800cd16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cd1a:	2b05      	cmp	r3, #5
 800cd1c:	d801      	bhi.n	800cd22 <__hexdig_fun+0x26>
 800cd1e:	3827      	subs	r0, #39	; 0x27
 800cd20:	e7f1      	b.n	800cd06 <__hexdig_fun+0xa>
 800cd22:	2000      	movs	r0, #0
 800cd24:	4770      	bx	lr
	...

0800cd28 <__gethex>:
 800cd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2c:	ed2d 8b02 	vpush	{d8}
 800cd30:	b089      	sub	sp, #36	; 0x24
 800cd32:	ee08 0a10 	vmov	s16, r0
 800cd36:	9304      	str	r3, [sp, #16]
 800cd38:	4bb4      	ldr	r3, [pc, #720]	; (800d00c <__gethex+0x2e4>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	9301      	str	r3, [sp, #4]
 800cd3e:	4618      	mov	r0, r3
 800cd40:	468b      	mov	fp, r1
 800cd42:	4690      	mov	r8, r2
 800cd44:	f7f3 fa44 	bl	80001d0 <strlen>
 800cd48:	9b01      	ldr	r3, [sp, #4]
 800cd4a:	f8db 2000 	ldr.w	r2, [fp]
 800cd4e:	4403      	add	r3, r0
 800cd50:	4682      	mov	sl, r0
 800cd52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cd56:	9305      	str	r3, [sp, #20]
 800cd58:	1c93      	adds	r3, r2, #2
 800cd5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cd5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cd62:	32fe      	adds	r2, #254	; 0xfe
 800cd64:	18d1      	adds	r1, r2, r3
 800cd66:	461f      	mov	r7, r3
 800cd68:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd6c:	9100      	str	r1, [sp, #0]
 800cd6e:	2830      	cmp	r0, #48	; 0x30
 800cd70:	d0f8      	beq.n	800cd64 <__gethex+0x3c>
 800cd72:	f7ff ffc3 	bl	800ccfc <__hexdig_fun>
 800cd76:	4604      	mov	r4, r0
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d13a      	bne.n	800cdf2 <__gethex+0xca>
 800cd7c:	9901      	ldr	r1, [sp, #4]
 800cd7e:	4652      	mov	r2, sl
 800cd80:	4638      	mov	r0, r7
 800cd82:	f001 fa15 	bl	800e1b0 <strncmp>
 800cd86:	4605      	mov	r5, r0
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d168      	bne.n	800ce5e <__gethex+0x136>
 800cd8c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cd90:	eb07 060a 	add.w	r6, r7, sl
 800cd94:	f7ff ffb2 	bl	800ccfc <__hexdig_fun>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d062      	beq.n	800ce62 <__gethex+0x13a>
 800cd9c:	4633      	mov	r3, r6
 800cd9e:	7818      	ldrb	r0, [r3, #0]
 800cda0:	2830      	cmp	r0, #48	; 0x30
 800cda2:	461f      	mov	r7, r3
 800cda4:	f103 0301 	add.w	r3, r3, #1
 800cda8:	d0f9      	beq.n	800cd9e <__gethex+0x76>
 800cdaa:	f7ff ffa7 	bl	800ccfc <__hexdig_fun>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	fab0 f480 	clz	r4, r0
 800cdb4:	0964      	lsrs	r4, r4, #5
 800cdb6:	4635      	mov	r5, r6
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	463a      	mov	r2, r7
 800cdbc:	4616      	mov	r6, r2
 800cdbe:	3201      	adds	r2, #1
 800cdc0:	7830      	ldrb	r0, [r6, #0]
 800cdc2:	f7ff ff9b 	bl	800ccfc <__hexdig_fun>
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	d1f8      	bne.n	800cdbc <__gethex+0x94>
 800cdca:	9901      	ldr	r1, [sp, #4]
 800cdcc:	4652      	mov	r2, sl
 800cdce:	4630      	mov	r0, r6
 800cdd0:	f001 f9ee 	bl	800e1b0 <strncmp>
 800cdd4:	b980      	cbnz	r0, 800cdf8 <__gethex+0xd0>
 800cdd6:	b94d      	cbnz	r5, 800cdec <__gethex+0xc4>
 800cdd8:	eb06 050a 	add.w	r5, r6, sl
 800cddc:	462a      	mov	r2, r5
 800cdde:	4616      	mov	r6, r2
 800cde0:	3201      	adds	r2, #1
 800cde2:	7830      	ldrb	r0, [r6, #0]
 800cde4:	f7ff ff8a 	bl	800ccfc <__hexdig_fun>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	d1f8      	bne.n	800cdde <__gethex+0xb6>
 800cdec:	1bad      	subs	r5, r5, r6
 800cdee:	00ad      	lsls	r5, r5, #2
 800cdf0:	e004      	b.n	800cdfc <__gethex+0xd4>
 800cdf2:	2400      	movs	r4, #0
 800cdf4:	4625      	mov	r5, r4
 800cdf6:	e7e0      	b.n	800cdba <__gethex+0x92>
 800cdf8:	2d00      	cmp	r5, #0
 800cdfa:	d1f7      	bne.n	800cdec <__gethex+0xc4>
 800cdfc:	7833      	ldrb	r3, [r6, #0]
 800cdfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce02:	2b50      	cmp	r3, #80	; 0x50
 800ce04:	d13b      	bne.n	800ce7e <__gethex+0x156>
 800ce06:	7873      	ldrb	r3, [r6, #1]
 800ce08:	2b2b      	cmp	r3, #43	; 0x2b
 800ce0a:	d02c      	beq.n	800ce66 <__gethex+0x13e>
 800ce0c:	2b2d      	cmp	r3, #45	; 0x2d
 800ce0e:	d02e      	beq.n	800ce6e <__gethex+0x146>
 800ce10:	1c71      	adds	r1, r6, #1
 800ce12:	f04f 0900 	mov.w	r9, #0
 800ce16:	7808      	ldrb	r0, [r1, #0]
 800ce18:	f7ff ff70 	bl	800ccfc <__hexdig_fun>
 800ce1c:	1e43      	subs	r3, r0, #1
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	2b18      	cmp	r3, #24
 800ce22:	d82c      	bhi.n	800ce7e <__gethex+0x156>
 800ce24:	f1a0 0210 	sub.w	r2, r0, #16
 800ce28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce2c:	f7ff ff66 	bl	800ccfc <__hexdig_fun>
 800ce30:	1e43      	subs	r3, r0, #1
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	2b18      	cmp	r3, #24
 800ce36:	d91d      	bls.n	800ce74 <__gethex+0x14c>
 800ce38:	f1b9 0f00 	cmp.w	r9, #0
 800ce3c:	d000      	beq.n	800ce40 <__gethex+0x118>
 800ce3e:	4252      	negs	r2, r2
 800ce40:	4415      	add	r5, r2
 800ce42:	f8cb 1000 	str.w	r1, [fp]
 800ce46:	b1e4      	cbz	r4, 800ce82 <__gethex+0x15a>
 800ce48:	9b00      	ldr	r3, [sp, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	bf14      	ite	ne
 800ce4e:	2700      	movne	r7, #0
 800ce50:	2706      	moveq	r7, #6
 800ce52:	4638      	mov	r0, r7
 800ce54:	b009      	add	sp, #36	; 0x24
 800ce56:	ecbd 8b02 	vpop	{d8}
 800ce5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5e:	463e      	mov	r6, r7
 800ce60:	4625      	mov	r5, r4
 800ce62:	2401      	movs	r4, #1
 800ce64:	e7ca      	b.n	800cdfc <__gethex+0xd4>
 800ce66:	f04f 0900 	mov.w	r9, #0
 800ce6a:	1cb1      	adds	r1, r6, #2
 800ce6c:	e7d3      	b.n	800ce16 <__gethex+0xee>
 800ce6e:	f04f 0901 	mov.w	r9, #1
 800ce72:	e7fa      	b.n	800ce6a <__gethex+0x142>
 800ce74:	230a      	movs	r3, #10
 800ce76:	fb03 0202 	mla	r2, r3, r2, r0
 800ce7a:	3a10      	subs	r2, #16
 800ce7c:	e7d4      	b.n	800ce28 <__gethex+0x100>
 800ce7e:	4631      	mov	r1, r6
 800ce80:	e7df      	b.n	800ce42 <__gethex+0x11a>
 800ce82:	1bf3      	subs	r3, r6, r7
 800ce84:	3b01      	subs	r3, #1
 800ce86:	4621      	mov	r1, r4
 800ce88:	2b07      	cmp	r3, #7
 800ce8a:	dc0b      	bgt.n	800cea4 <__gethex+0x17c>
 800ce8c:	ee18 0a10 	vmov	r0, s16
 800ce90:	f000 faf4 	bl	800d47c <_Balloc>
 800ce94:	4604      	mov	r4, r0
 800ce96:	b940      	cbnz	r0, 800ceaa <__gethex+0x182>
 800ce98:	4b5d      	ldr	r3, [pc, #372]	; (800d010 <__gethex+0x2e8>)
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	21de      	movs	r1, #222	; 0xde
 800ce9e:	485d      	ldr	r0, [pc, #372]	; (800d014 <__gethex+0x2ec>)
 800cea0:	f001 f9a8 	bl	800e1f4 <__assert_func>
 800cea4:	3101      	adds	r1, #1
 800cea6:	105b      	asrs	r3, r3, #1
 800cea8:	e7ee      	b.n	800ce88 <__gethex+0x160>
 800ceaa:	f100 0914 	add.w	r9, r0, #20
 800ceae:	f04f 0b00 	mov.w	fp, #0
 800ceb2:	f1ca 0301 	rsb	r3, sl, #1
 800ceb6:	f8cd 9008 	str.w	r9, [sp, #8]
 800ceba:	f8cd b000 	str.w	fp, [sp]
 800cebe:	9306      	str	r3, [sp, #24]
 800cec0:	42b7      	cmp	r7, r6
 800cec2:	d340      	bcc.n	800cf46 <__gethex+0x21e>
 800cec4:	9802      	ldr	r0, [sp, #8]
 800cec6:	9b00      	ldr	r3, [sp, #0]
 800cec8:	f840 3b04 	str.w	r3, [r0], #4
 800cecc:	eba0 0009 	sub.w	r0, r0, r9
 800ced0:	1080      	asrs	r0, r0, #2
 800ced2:	0146      	lsls	r6, r0, #5
 800ced4:	6120      	str	r0, [r4, #16]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f000 fbc2 	bl	800d660 <__hi0bits>
 800cedc:	1a30      	subs	r0, r6, r0
 800cede:	f8d8 6000 	ldr.w	r6, [r8]
 800cee2:	42b0      	cmp	r0, r6
 800cee4:	dd63      	ble.n	800cfae <__gethex+0x286>
 800cee6:	1b87      	subs	r7, r0, r6
 800cee8:	4639      	mov	r1, r7
 800ceea:	4620      	mov	r0, r4
 800ceec:	f000 ff66 	bl	800ddbc <__any_on>
 800cef0:	4682      	mov	sl, r0
 800cef2:	b1a8      	cbz	r0, 800cf20 <__gethex+0x1f8>
 800cef4:	1e7b      	subs	r3, r7, #1
 800cef6:	1159      	asrs	r1, r3, #5
 800cef8:	f003 021f 	and.w	r2, r3, #31
 800cefc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cf00:	f04f 0a01 	mov.w	sl, #1
 800cf04:	fa0a f202 	lsl.w	r2, sl, r2
 800cf08:	420a      	tst	r2, r1
 800cf0a:	d009      	beq.n	800cf20 <__gethex+0x1f8>
 800cf0c:	4553      	cmp	r3, sl
 800cf0e:	dd05      	ble.n	800cf1c <__gethex+0x1f4>
 800cf10:	1eb9      	subs	r1, r7, #2
 800cf12:	4620      	mov	r0, r4
 800cf14:	f000 ff52 	bl	800ddbc <__any_on>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d145      	bne.n	800cfa8 <__gethex+0x280>
 800cf1c:	f04f 0a02 	mov.w	sl, #2
 800cf20:	4639      	mov	r1, r7
 800cf22:	4620      	mov	r0, r4
 800cf24:	f7ff fe98 	bl	800cc58 <rshift>
 800cf28:	443d      	add	r5, r7
 800cf2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf2e:	42ab      	cmp	r3, r5
 800cf30:	da4c      	bge.n	800cfcc <__gethex+0x2a4>
 800cf32:	ee18 0a10 	vmov	r0, s16
 800cf36:	4621      	mov	r1, r4
 800cf38:	f000 fae0 	bl	800d4fc <_Bfree>
 800cf3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf3e:	2300      	movs	r3, #0
 800cf40:	6013      	str	r3, [r2, #0]
 800cf42:	27a3      	movs	r7, #163	; 0xa3
 800cf44:	e785      	b.n	800ce52 <__gethex+0x12a>
 800cf46:	1e73      	subs	r3, r6, #1
 800cf48:	9a05      	ldr	r2, [sp, #20]
 800cf4a:	9303      	str	r3, [sp, #12]
 800cf4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d019      	beq.n	800cf88 <__gethex+0x260>
 800cf54:	f1bb 0f20 	cmp.w	fp, #32
 800cf58:	d107      	bne.n	800cf6a <__gethex+0x242>
 800cf5a:	9b02      	ldr	r3, [sp, #8]
 800cf5c:	9a00      	ldr	r2, [sp, #0]
 800cf5e:	f843 2b04 	str.w	r2, [r3], #4
 800cf62:	9302      	str	r3, [sp, #8]
 800cf64:	2300      	movs	r3, #0
 800cf66:	9300      	str	r3, [sp, #0]
 800cf68:	469b      	mov	fp, r3
 800cf6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cf6e:	f7ff fec5 	bl	800ccfc <__hexdig_fun>
 800cf72:	9b00      	ldr	r3, [sp, #0]
 800cf74:	f000 000f 	and.w	r0, r0, #15
 800cf78:	fa00 f00b 	lsl.w	r0, r0, fp
 800cf7c:	4303      	orrs	r3, r0
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	f10b 0b04 	add.w	fp, fp, #4
 800cf84:	9b03      	ldr	r3, [sp, #12]
 800cf86:	e00d      	b.n	800cfa4 <__gethex+0x27c>
 800cf88:	9b03      	ldr	r3, [sp, #12]
 800cf8a:	9a06      	ldr	r2, [sp, #24]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	42bb      	cmp	r3, r7
 800cf90:	d3e0      	bcc.n	800cf54 <__gethex+0x22c>
 800cf92:	4618      	mov	r0, r3
 800cf94:	9901      	ldr	r1, [sp, #4]
 800cf96:	9307      	str	r3, [sp, #28]
 800cf98:	4652      	mov	r2, sl
 800cf9a:	f001 f909 	bl	800e1b0 <strncmp>
 800cf9e:	9b07      	ldr	r3, [sp, #28]
 800cfa0:	2800      	cmp	r0, #0
 800cfa2:	d1d7      	bne.n	800cf54 <__gethex+0x22c>
 800cfa4:	461e      	mov	r6, r3
 800cfa6:	e78b      	b.n	800cec0 <__gethex+0x198>
 800cfa8:	f04f 0a03 	mov.w	sl, #3
 800cfac:	e7b8      	b.n	800cf20 <__gethex+0x1f8>
 800cfae:	da0a      	bge.n	800cfc6 <__gethex+0x29e>
 800cfb0:	1a37      	subs	r7, r6, r0
 800cfb2:	4621      	mov	r1, r4
 800cfb4:	ee18 0a10 	vmov	r0, s16
 800cfb8:	463a      	mov	r2, r7
 800cfba:	f000 fcbb 	bl	800d934 <__lshift>
 800cfbe:	1bed      	subs	r5, r5, r7
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	f100 0914 	add.w	r9, r0, #20
 800cfc6:	f04f 0a00 	mov.w	sl, #0
 800cfca:	e7ae      	b.n	800cf2a <__gethex+0x202>
 800cfcc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cfd0:	42a8      	cmp	r0, r5
 800cfd2:	dd72      	ble.n	800d0ba <__gethex+0x392>
 800cfd4:	1b45      	subs	r5, r0, r5
 800cfd6:	42ae      	cmp	r6, r5
 800cfd8:	dc36      	bgt.n	800d048 <__gethex+0x320>
 800cfda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cfde:	2b02      	cmp	r3, #2
 800cfe0:	d02a      	beq.n	800d038 <__gethex+0x310>
 800cfe2:	2b03      	cmp	r3, #3
 800cfe4:	d02c      	beq.n	800d040 <__gethex+0x318>
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d11c      	bne.n	800d024 <__gethex+0x2fc>
 800cfea:	42ae      	cmp	r6, r5
 800cfec:	d11a      	bne.n	800d024 <__gethex+0x2fc>
 800cfee:	2e01      	cmp	r6, #1
 800cff0:	d112      	bne.n	800d018 <__gethex+0x2f0>
 800cff2:	9a04      	ldr	r2, [sp, #16]
 800cff4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cff8:	6013      	str	r3, [r2, #0]
 800cffa:	2301      	movs	r3, #1
 800cffc:	6123      	str	r3, [r4, #16]
 800cffe:	f8c9 3000 	str.w	r3, [r9]
 800d002:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d004:	2762      	movs	r7, #98	; 0x62
 800d006:	601c      	str	r4, [r3, #0]
 800d008:	e723      	b.n	800ce52 <__gethex+0x12a>
 800d00a:	bf00      	nop
 800d00c:	0800eb08 	.word	0x0800eb08
 800d010:	0800ea90 	.word	0x0800ea90
 800d014:	0800eaa1 	.word	0x0800eaa1
 800d018:	1e71      	subs	r1, r6, #1
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 fece 	bl	800ddbc <__any_on>
 800d020:	2800      	cmp	r0, #0
 800d022:	d1e6      	bne.n	800cff2 <__gethex+0x2ca>
 800d024:	ee18 0a10 	vmov	r0, s16
 800d028:	4621      	mov	r1, r4
 800d02a:	f000 fa67 	bl	800d4fc <_Bfree>
 800d02e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d030:	2300      	movs	r3, #0
 800d032:	6013      	str	r3, [r2, #0]
 800d034:	2750      	movs	r7, #80	; 0x50
 800d036:	e70c      	b.n	800ce52 <__gethex+0x12a>
 800d038:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1f2      	bne.n	800d024 <__gethex+0x2fc>
 800d03e:	e7d8      	b.n	800cff2 <__gethex+0x2ca>
 800d040:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1d5      	bne.n	800cff2 <__gethex+0x2ca>
 800d046:	e7ed      	b.n	800d024 <__gethex+0x2fc>
 800d048:	1e6f      	subs	r7, r5, #1
 800d04a:	f1ba 0f00 	cmp.w	sl, #0
 800d04e:	d131      	bne.n	800d0b4 <__gethex+0x38c>
 800d050:	b127      	cbz	r7, 800d05c <__gethex+0x334>
 800d052:	4639      	mov	r1, r7
 800d054:	4620      	mov	r0, r4
 800d056:	f000 feb1 	bl	800ddbc <__any_on>
 800d05a:	4682      	mov	sl, r0
 800d05c:	117b      	asrs	r3, r7, #5
 800d05e:	2101      	movs	r1, #1
 800d060:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d064:	f007 071f 	and.w	r7, r7, #31
 800d068:	fa01 f707 	lsl.w	r7, r1, r7
 800d06c:	421f      	tst	r7, r3
 800d06e:	4629      	mov	r1, r5
 800d070:	4620      	mov	r0, r4
 800d072:	bf18      	it	ne
 800d074:	f04a 0a02 	orrne.w	sl, sl, #2
 800d078:	1b76      	subs	r6, r6, r5
 800d07a:	f7ff fded 	bl	800cc58 <rshift>
 800d07e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d082:	2702      	movs	r7, #2
 800d084:	f1ba 0f00 	cmp.w	sl, #0
 800d088:	d048      	beq.n	800d11c <__gethex+0x3f4>
 800d08a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d08e:	2b02      	cmp	r3, #2
 800d090:	d015      	beq.n	800d0be <__gethex+0x396>
 800d092:	2b03      	cmp	r3, #3
 800d094:	d017      	beq.n	800d0c6 <__gethex+0x39e>
 800d096:	2b01      	cmp	r3, #1
 800d098:	d109      	bne.n	800d0ae <__gethex+0x386>
 800d09a:	f01a 0f02 	tst.w	sl, #2
 800d09e:	d006      	beq.n	800d0ae <__gethex+0x386>
 800d0a0:	f8d9 0000 	ldr.w	r0, [r9]
 800d0a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d0a8:	f01a 0f01 	tst.w	sl, #1
 800d0ac:	d10e      	bne.n	800d0cc <__gethex+0x3a4>
 800d0ae:	f047 0710 	orr.w	r7, r7, #16
 800d0b2:	e033      	b.n	800d11c <__gethex+0x3f4>
 800d0b4:	f04f 0a01 	mov.w	sl, #1
 800d0b8:	e7d0      	b.n	800d05c <__gethex+0x334>
 800d0ba:	2701      	movs	r7, #1
 800d0bc:	e7e2      	b.n	800d084 <__gethex+0x35c>
 800d0be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0c0:	f1c3 0301 	rsb	r3, r3, #1
 800d0c4:	9315      	str	r3, [sp, #84]	; 0x54
 800d0c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d0f0      	beq.n	800d0ae <__gethex+0x386>
 800d0cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d0d0:	f104 0314 	add.w	r3, r4, #20
 800d0d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d0d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d0dc:	f04f 0c00 	mov.w	ip, #0
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d0ea:	d01c      	beq.n	800d126 <__gethex+0x3fe>
 800d0ec:	3201      	adds	r2, #1
 800d0ee:	6002      	str	r2, [r0, #0]
 800d0f0:	2f02      	cmp	r7, #2
 800d0f2:	f104 0314 	add.w	r3, r4, #20
 800d0f6:	d13f      	bne.n	800d178 <__gethex+0x450>
 800d0f8:	f8d8 2000 	ldr.w	r2, [r8]
 800d0fc:	3a01      	subs	r2, #1
 800d0fe:	42b2      	cmp	r2, r6
 800d100:	d10a      	bne.n	800d118 <__gethex+0x3f0>
 800d102:	1171      	asrs	r1, r6, #5
 800d104:	2201      	movs	r2, #1
 800d106:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d10a:	f006 061f 	and.w	r6, r6, #31
 800d10e:	fa02 f606 	lsl.w	r6, r2, r6
 800d112:	421e      	tst	r6, r3
 800d114:	bf18      	it	ne
 800d116:	4617      	movne	r7, r2
 800d118:	f047 0720 	orr.w	r7, r7, #32
 800d11c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d11e:	601c      	str	r4, [r3, #0]
 800d120:	9b04      	ldr	r3, [sp, #16]
 800d122:	601d      	str	r5, [r3, #0]
 800d124:	e695      	b.n	800ce52 <__gethex+0x12a>
 800d126:	4299      	cmp	r1, r3
 800d128:	f843 cc04 	str.w	ip, [r3, #-4]
 800d12c:	d8d8      	bhi.n	800d0e0 <__gethex+0x3b8>
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	459b      	cmp	fp, r3
 800d132:	db19      	blt.n	800d168 <__gethex+0x440>
 800d134:	6861      	ldr	r1, [r4, #4]
 800d136:	ee18 0a10 	vmov	r0, s16
 800d13a:	3101      	adds	r1, #1
 800d13c:	f000 f99e 	bl	800d47c <_Balloc>
 800d140:	4681      	mov	r9, r0
 800d142:	b918      	cbnz	r0, 800d14c <__gethex+0x424>
 800d144:	4b1a      	ldr	r3, [pc, #104]	; (800d1b0 <__gethex+0x488>)
 800d146:	4602      	mov	r2, r0
 800d148:	2184      	movs	r1, #132	; 0x84
 800d14a:	e6a8      	b.n	800ce9e <__gethex+0x176>
 800d14c:	6922      	ldr	r2, [r4, #16]
 800d14e:	3202      	adds	r2, #2
 800d150:	f104 010c 	add.w	r1, r4, #12
 800d154:	0092      	lsls	r2, r2, #2
 800d156:	300c      	adds	r0, #12
 800d158:	f7fc fe33 	bl	8009dc2 <memcpy>
 800d15c:	4621      	mov	r1, r4
 800d15e:	ee18 0a10 	vmov	r0, s16
 800d162:	f000 f9cb 	bl	800d4fc <_Bfree>
 800d166:	464c      	mov	r4, r9
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d170:	6122      	str	r2, [r4, #16]
 800d172:	2201      	movs	r2, #1
 800d174:	615a      	str	r2, [r3, #20]
 800d176:	e7bb      	b.n	800d0f0 <__gethex+0x3c8>
 800d178:	6922      	ldr	r2, [r4, #16]
 800d17a:	455a      	cmp	r2, fp
 800d17c:	dd0b      	ble.n	800d196 <__gethex+0x46e>
 800d17e:	2101      	movs	r1, #1
 800d180:	4620      	mov	r0, r4
 800d182:	f7ff fd69 	bl	800cc58 <rshift>
 800d186:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d18a:	3501      	adds	r5, #1
 800d18c:	42ab      	cmp	r3, r5
 800d18e:	f6ff aed0 	blt.w	800cf32 <__gethex+0x20a>
 800d192:	2701      	movs	r7, #1
 800d194:	e7c0      	b.n	800d118 <__gethex+0x3f0>
 800d196:	f016 061f 	ands.w	r6, r6, #31
 800d19a:	d0fa      	beq.n	800d192 <__gethex+0x46a>
 800d19c:	4453      	add	r3, sl
 800d19e:	f1c6 0620 	rsb	r6, r6, #32
 800d1a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d1a6:	f000 fa5b 	bl	800d660 <__hi0bits>
 800d1aa:	42b0      	cmp	r0, r6
 800d1ac:	dbe7      	blt.n	800d17e <__gethex+0x456>
 800d1ae:	e7f0      	b.n	800d192 <__gethex+0x46a>
 800d1b0:	0800ea90 	.word	0x0800ea90

0800d1b4 <L_shift>:
 800d1b4:	f1c2 0208 	rsb	r2, r2, #8
 800d1b8:	0092      	lsls	r2, r2, #2
 800d1ba:	b570      	push	{r4, r5, r6, lr}
 800d1bc:	f1c2 0620 	rsb	r6, r2, #32
 800d1c0:	6843      	ldr	r3, [r0, #4]
 800d1c2:	6804      	ldr	r4, [r0, #0]
 800d1c4:	fa03 f506 	lsl.w	r5, r3, r6
 800d1c8:	432c      	orrs	r4, r5
 800d1ca:	40d3      	lsrs	r3, r2
 800d1cc:	6004      	str	r4, [r0, #0]
 800d1ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800d1d2:	4288      	cmp	r0, r1
 800d1d4:	d3f4      	bcc.n	800d1c0 <L_shift+0xc>
 800d1d6:	bd70      	pop	{r4, r5, r6, pc}

0800d1d8 <__match>:
 800d1d8:	b530      	push	{r4, r5, lr}
 800d1da:	6803      	ldr	r3, [r0, #0]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1e2:	b914      	cbnz	r4, 800d1ea <__match+0x12>
 800d1e4:	6003      	str	r3, [r0, #0]
 800d1e6:	2001      	movs	r0, #1
 800d1e8:	bd30      	pop	{r4, r5, pc}
 800d1ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d1f2:	2d19      	cmp	r5, #25
 800d1f4:	bf98      	it	ls
 800d1f6:	3220      	addls	r2, #32
 800d1f8:	42a2      	cmp	r2, r4
 800d1fa:	d0f0      	beq.n	800d1de <__match+0x6>
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e7f3      	b.n	800d1e8 <__match+0x10>

0800d200 <__hexnan>:
 800d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	680b      	ldr	r3, [r1, #0]
 800d206:	115e      	asrs	r6, r3, #5
 800d208:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d20c:	f013 031f 	ands.w	r3, r3, #31
 800d210:	b087      	sub	sp, #28
 800d212:	bf18      	it	ne
 800d214:	3604      	addne	r6, #4
 800d216:	2500      	movs	r5, #0
 800d218:	1f37      	subs	r7, r6, #4
 800d21a:	4690      	mov	r8, r2
 800d21c:	6802      	ldr	r2, [r0, #0]
 800d21e:	9301      	str	r3, [sp, #4]
 800d220:	4682      	mov	sl, r0
 800d222:	f846 5c04 	str.w	r5, [r6, #-4]
 800d226:	46b9      	mov	r9, r7
 800d228:	463c      	mov	r4, r7
 800d22a:	9502      	str	r5, [sp, #8]
 800d22c:	46ab      	mov	fp, r5
 800d22e:	7851      	ldrb	r1, [r2, #1]
 800d230:	1c53      	adds	r3, r2, #1
 800d232:	9303      	str	r3, [sp, #12]
 800d234:	b341      	cbz	r1, 800d288 <__hexnan+0x88>
 800d236:	4608      	mov	r0, r1
 800d238:	9205      	str	r2, [sp, #20]
 800d23a:	9104      	str	r1, [sp, #16]
 800d23c:	f7ff fd5e 	bl	800ccfc <__hexdig_fun>
 800d240:	2800      	cmp	r0, #0
 800d242:	d14f      	bne.n	800d2e4 <__hexnan+0xe4>
 800d244:	9904      	ldr	r1, [sp, #16]
 800d246:	9a05      	ldr	r2, [sp, #20]
 800d248:	2920      	cmp	r1, #32
 800d24a:	d818      	bhi.n	800d27e <__hexnan+0x7e>
 800d24c:	9b02      	ldr	r3, [sp, #8]
 800d24e:	459b      	cmp	fp, r3
 800d250:	dd13      	ble.n	800d27a <__hexnan+0x7a>
 800d252:	454c      	cmp	r4, r9
 800d254:	d206      	bcs.n	800d264 <__hexnan+0x64>
 800d256:	2d07      	cmp	r5, #7
 800d258:	dc04      	bgt.n	800d264 <__hexnan+0x64>
 800d25a:	462a      	mov	r2, r5
 800d25c:	4649      	mov	r1, r9
 800d25e:	4620      	mov	r0, r4
 800d260:	f7ff ffa8 	bl	800d1b4 <L_shift>
 800d264:	4544      	cmp	r4, r8
 800d266:	d950      	bls.n	800d30a <__hexnan+0x10a>
 800d268:	2300      	movs	r3, #0
 800d26a:	f1a4 0904 	sub.w	r9, r4, #4
 800d26e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d272:	f8cd b008 	str.w	fp, [sp, #8]
 800d276:	464c      	mov	r4, r9
 800d278:	461d      	mov	r5, r3
 800d27a:	9a03      	ldr	r2, [sp, #12]
 800d27c:	e7d7      	b.n	800d22e <__hexnan+0x2e>
 800d27e:	2929      	cmp	r1, #41	; 0x29
 800d280:	d156      	bne.n	800d330 <__hexnan+0x130>
 800d282:	3202      	adds	r2, #2
 800d284:	f8ca 2000 	str.w	r2, [sl]
 800d288:	f1bb 0f00 	cmp.w	fp, #0
 800d28c:	d050      	beq.n	800d330 <__hexnan+0x130>
 800d28e:	454c      	cmp	r4, r9
 800d290:	d206      	bcs.n	800d2a0 <__hexnan+0xa0>
 800d292:	2d07      	cmp	r5, #7
 800d294:	dc04      	bgt.n	800d2a0 <__hexnan+0xa0>
 800d296:	462a      	mov	r2, r5
 800d298:	4649      	mov	r1, r9
 800d29a:	4620      	mov	r0, r4
 800d29c:	f7ff ff8a 	bl	800d1b4 <L_shift>
 800d2a0:	4544      	cmp	r4, r8
 800d2a2:	d934      	bls.n	800d30e <__hexnan+0x10e>
 800d2a4:	f1a8 0204 	sub.w	r2, r8, #4
 800d2a8:	4623      	mov	r3, r4
 800d2aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d2ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800d2b2:	429f      	cmp	r7, r3
 800d2b4:	d2f9      	bcs.n	800d2aa <__hexnan+0xaa>
 800d2b6:	1b3b      	subs	r3, r7, r4
 800d2b8:	f023 0303 	bic.w	r3, r3, #3
 800d2bc:	3304      	adds	r3, #4
 800d2be:	3401      	adds	r4, #1
 800d2c0:	3e03      	subs	r6, #3
 800d2c2:	42b4      	cmp	r4, r6
 800d2c4:	bf88      	it	hi
 800d2c6:	2304      	movhi	r3, #4
 800d2c8:	4443      	add	r3, r8
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f843 2b04 	str.w	r2, [r3], #4
 800d2d0:	429f      	cmp	r7, r3
 800d2d2:	d2fb      	bcs.n	800d2cc <__hexnan+0xcc>
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	b91b      	cbnz	r3, 800d2e0 <__hexnan+0xe0>
 800d2d8:	4547      	cmp	r7, r8
 800d2da:	d127      	bne.n	800d32c <__hexnan+0x12c>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	603b      	str	r3, [r7, #0]
 800d2e0:	2005      	movs	r0, #5
 800d2e2:	e026      	b.n	800d332 <__hexnan+0x132>
 800d2e4:	3501      	adds	r5, #1
 800d2e6:	2d08      	cmp	r5, #8
 800d2e8:	f10b 0b01 	add.w	fp, fp, #1
 800d2ec:	dd06      	ble.n	800d2fc <__hexnan+0xfc>
 800d2ee:	4544      	cmp	r4, r8
 800d2f0:	d9c3      	bls.n	800d27a <__hexnan+0x7a>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2f8:	2501      	movs	r5, #1
 800d2fa:	3c04      	subs	r4, #4
 800d2fc:	6822      	ldr	r2, [r4, #0]
 800d2fe:	f000 000f 	and.w	r0, r0, #15
 800d302:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d306:	6022      	str	r2, [r4, #0]
 800d308:	e7b7      	b.n	800d27a <__hexnan+0x7a>
 800d30a:	2508      	movs	r5, #8
 800d30c:	e7b5      	b.n	800d27a <__hexnan+0x7a>
 800d30e:	9b01      	ldr	r3, [sp, #4]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d0df      	beq.n	800d2d4 <__hexnan+0xd4>
 800d314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d318:	f1c3 0320 	rsb	r3, r3, #32
 800d31c:	fa22 f303 	lsr.w	r3, r2, r3
 800d320:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d324:	401a      	ands	r2, r3
 800d326:	f846 2c04 	str.w	r2, [r6, #-4]
 800d32a:	e7d3      	b.n	800d2d4 <__hexnan+0xd4>
 800d32c:	3f04      	subs	r7, #4
 800d32e:	e7d1      	b.n	800d2d4 <__hexnan+0xd4>
 800d330:	2004      	movs	r0, #4
 800d332:	b007      	add	sp, #28
 800d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d338 <_localeconv_r>:
 800d338:	4800      	ldr	r0, [pc, #0]	; (800d33c <_localeconv_r+0x4>)
 800d33a:	4770      	bx	lr
 800d33c:	20000168 	.word	0x20000168

0800d340 <_lseek_r>:
 800d340:	b538      	push	{r3, r4, r5, lr}
 800d342:	4d07      	ldr	r5, [pc, #28]	; (800d360 <_lseek_r+0x20>)
 800d344:	4604      	mov	r4, r0
 800d346:	4608      	mov	r0, r1
 800d348:	4611      	mov	r1, r2
 800d34a:	2200      	movs	r2, #0
 800d34c:	602a      	str	r2, [r5, #0]
 800d34e:	461a      	mov	r2, r3
 800d350:	f7f4 fd48 	bl	8001de4 <_lseek>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d102      	bne.n	800d35e <_lseek_r+0x1e>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	b103      	cbz	r3, 800d35e <_lseek_r+0x1e>
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	20001e40 	.word	0x20001e40

0800d364 <__swhatbuf_r>:
 800d364:	b570      	push	{r4, r5, r6, lr}
 800d366:	460e      	mov	r6, r1
 800d368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d36c:	2900      	cmp	r1, #0
 800d36e:	b096      	sub	sp, #88	; 0x58
 800d370:	4614      	mov	r4, r2
 800d372:	461d      	mov	r5, r3
 800d374:	da08      	bge.n	800d388 <__swhatbuf_r+0x24>
 800d376:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d37a:	2200      	movs	r2, #0
 800d37c:	602a      	str	r2, [r5, #0]
 800d37e:	061a      	lsls	r2, r3, #24
 800d380:	d410      	bmi.n	800d3a4 <__swhatbuf_r+0x40>
 800d382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d386:	e00e      	b.n	800d3a6 <__swhatbuf_r+0x42>
 800d388:	466a      	mov	r2, sp
 800d38a:	f000 ff63 	bl	800e254 <_fstat_r>
 800d38e:	2800      	cmp	r0, #0
 800d390:	dbf1      	blt.n	800d376 <__swhatbuf_r+0x12>
 800d392:	9a01      	ldr	r2, [sp, #4]
 800d394:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d398:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d39c:	425a      	negs	r2, r3
 800d39e:	415a      	adcs	r2, r3
 800d3a0:	602a      	str	r2, [r5, #0]
 800d3a2:	e7ee      	b.n	800d382 <__swhatbuf_r+0x1e>
 800d3a4:	2340      	movs	r3, #64	; 0x40
 800d3a6:	2000      	movs	r0, #0
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	b016      	add	sp, #88	; 0x58
 800d3ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d3b0 <__smakebuf_r>:
 800d3b0:	898b      	ldrh	r3, [r1, #12]
 800d3b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3b4:	079d      	lsls	r5, r3, #30
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	460c      	mov	r4, r1
 800d3ba:	d507      	bpl.n	800d3cc <__smakebuf_r+0x1c>
 800d3bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	6123      	str	r3, [r4, #16]
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	6163      	str	r3, [r4, #20]
 800d3c8:	b002      	add	sp, #8
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}
 800d3cc:	ab01      	add	r3, sp, #4
 800d3ce:	466a      	mov	r2, sp
 800d3d0:	f7ff ffc8 	bl	800d364 <__swhatbuf_r>
 800d3d4:	9900      	ldr	r1, [sp, #0]
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f7fc fd29 	bl	8009e30 <_malloc_r>
 800d3de:	b948      	cbnz	r0, 800d3f4 <__smakebuf_r+0x44>
 800d3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3e4:	059a      	lsls	r2, r3, #22
 800d3e6:	d4ef      	bmi.n	800d3c8 <__smakebuf_r+0x18>
 800d3e8:	f023 0303 	bic.w	r3, r3, #3
 800d3ec:	f043 0302 	orr.w	r3, r3, #2
 800d3f0:	81a3      	strh	r3, [r4, #12]
 800d3f2:	e7e3      	b.n	800d3bc <__smakebuf_r+0xc>
 800d3f4:	4b0d      	ldr	r3, [pc, #52]	; (800d42c <__smakebuf_r+0x7c>)
 800d3f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	6020      	str	r0, [r4, #0]
 800d3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d400:	81a3      	strh	r3, [r4, #12]
 800d402:	9b00      	ldr	r3, [sp, #0]
 800d404:	6163      	str	r3, [r4, #20]
 800d406:	9b01      	ldr	r3, [sp, #4]
 800d408:	6120      	str	r0, [r4, #16]
 800d40a:	b15b      	cbz	r3, 800d424 <__smakebuf_r+0x74>
 800d40c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d410:	4630      	mov	r0, r6
 800d412:	f000 ff31 	bl	800e278 <_isatty_r>
 800d416:	b128      	cbz	r0, 800d424 <__smakebuf_r+0x74>
 800d418:	89a3      	ldrh	r3, [r4, #12]
 800d41a:	f023 0303 	bic.w	r3, r3, #3
 800d41e:	f043 0301 	orr.w	r3, r3, #1
 800d422:	81a3      	strh	r3, [r4, #12]
 800d424:	89a0      	ldrh	r0, [r4, #12]
 800d426:	4305      	orrs	r5, r0
 800d428:	81a5      	strh	r5, [r4, #12]
 800d42a:	e7cd      	b.n	800d3c8 <__smakebuf_r+0x18>
 800d42c:	08009bd1 	.word	0x08009bd1

0800d430 <malloc>:
 800d430:	4b02      	ldr	r3, [pc, #8]	; (800d43c <malloc+0xc>)
 800d432:	4601      	mov	r1, r0
 800d434:	6818      	ldr	r0, [r3, #0]
 800d436:	f7fc bcfb 	b.w	8009e30 <_malloc_r>
 800d43a:	bf00      	nop
 800d43c:	20000010 	.word	0x20000010

0800d440 <__ascii_mbtowc>:
 800d440:	b082      	sub	sp, #8
 800d442:	b901      	cbnz	r1, 800d446 <__ascii_mbtowc+0x6>
 800d444:	a901      	add	r1, sp, #4
 800d446:	b142      	cbz	r2, 800d45a <__ascii_mbtowc+0x1a>
 800d448:	b14b      	cbz	r3, 800d45e <__ascii_mbtowc+0x1e>
 800d44a:	7813      	ldrb	r3, [r2, #0]
 800d44c:	600b      	str	r3, [r1, #0]
 800d44e:	7812      	ldrb	r2, [r2, #0]
 800d450:	1e10      	subs	r0, r2, #0
 800d452:	bf18      	it	ne
 800d454:	2001      	movne	r0, #1
 800d456:	b002      	add	sp, #8
 800d458:	4770      	bx	lr
 800d45a:	4610      	mov	r0, r2
 800d45c:	e7fb      	b.n	800d456 <__ascii_mbtowc+0x16>
 800d45e:	f06f 0001 	mvn.w	r0, #1
 800d462:	e7f8      	b.n	800d456 <__ascii_mbtowc+0x16>

0800d464 <__malloc_lock>:
 800d464:	4801      	ldr	r0, [pc, #4]	; (800d46c <__malloc_lock+0x8>)
 800d466:	f7fc bcaa 	b.w	8009dbe <__retarget_lock_acquire_recursive>
 800d46a:	bf00      	nop
 800d46c:	20001e34 	.word	0x20001e34

0800d470 <__malloc_unlock>:
 800d470:	4801      	ldr	r0, [pc, #4]	; (800d478 <__malloc_unlock+0x8>)
 800d472:	f7fc bca5 	b.w	8009dc0 <__retarget_lock_release_recursive>
 800d476:	bf00      	nop
 800d478:	20001e34 	.word	0x20001e34

0800d47c <_Balloc>:
 800d47c:	b570      	push	{r4, r5, r6, lr}
 800d47e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d480:	4604      	mov	r4, r0
 800d482:	460d      	mov	r5, r1
 800d484:	b976      	cbnz	r6, 800d4a4 <_Balloc+0x28>
 800d486:	2010      	movs	r0, #16
 800d488:	f7ff ffd2 	bl	800d430 <malloc>
 800d48c:	4602      	mov	r2, r0
 800d48e:	6260      	str	r0, [r4, #36]	; 0x24
 800d490:	b920      	cbnz	r0, 800d49c <_Balloc+0x20>
 800d492:	4b18      	ldr	r3, [pc, #96]	; (800d4f4 <_Balloc+0x78>)
 800d494:	4818      	ldr	r0, [pc, #96]	; (800d4f8 <_Balloc+0x7c>)
 800d496:	2166      	movs	r1, #102	; 0x66
 800d498:	f000 feac 	bl	800e1f4 <__assert_func>
 800d49c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4a0:	6006      	str	r6, [r0, #0]
 800d4a2:	60c6      	str	r6, [r0, #12]
 800d4a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d4a6:	68f3      	ldr	r3, [r6, #12]
 800d4a8:	b183      	cbz	r3, 800d4cc <_Balloc+0x50>
 800d4aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4ac:	68db      	ldr	r3, [r3, #12]
 800d4ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4b2:	b9b8      	cbnz	r0, 800d4e4 <_Balloc+0x68>
 800d4b4:	2101      	movs	r1, #1
 800d4b6:	fa01 f605 	lsl.w	r6, r1, r5
 800d4ba:	1d72      	adds	r2, r6, #5
 800d4bc:	0092      	lsls	r2, r2, #2
 800d4be:	4620      	mov	r0, r4
 800d4c0:	f000 fc9d 	bl	800ddfe <_calloc_r>
 800d4c4:	b160      	cbz	r0, 800d4e0 <_Balloc+0x64>
 800d4c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4ca:	e00e      	b.n	800d4ea <_Balloc+0x6e>
 800d4cc:	2221      	movs	r2, #33	; 0x21
 800d4ce:	2104      	movs	r1, #4
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	f000 fc94 	bl	800ddfe <_calloc_r>
 800d4d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4d8:	60f0      	str	r0, [r6, #12]
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1e4      	bne.n	800d4aa <_Balloc+0x2e>
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	bd70      	pop	{r4, r5, r6, pc}
 800d4e4:	6802      	ldr	r2, [r0, #0]
 800d4e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4f0:	e7f7      	b.n	800d4e2 <_Balloc+0x66>
 800d4f2:	bf00      	nop
 800d4f4:	0800ea1e 	.word	0x0800ea1e
 800d4f8:	0800eb1c 	.word	0x0800eb1c

0800d4fc <_Bfree>:
 800d4fc:	b570      	push	{r4, r5, r6, lr}
 800d4fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d500:	4605      	mov	r5, r0
 800d502:	460c      	mov	r4, r1
 800d504:	b976      	cbnz	r6, 800d524 <_Bfree+0x28>
 800d506:	2010      	movs	r0, #16
 800d508:	f7ff ff92 	bl	800d430 <malloc>
 800d50c:	4602      	mov	r2, r0
 800d50e:	6268      	str	r0, [r5, #36]	; 0x24
 800d510:	b920      	cbnz	r0, 800d51c <_Bfree+0x20>
 800d512:	4b09      	ldr	r3, [pc, #36]	; (800d538 <_Bfree+0x3c>)
 800d514:	4809      	ldr	r0, [pc, #36]	; (800d53c <_Bfree+0x40>)
 800d516:	218a      	movs	r1, #138	; 0x8a
 800d518:	f000 fe6c 	bl	800e1f4 <__assert_func>
 800d51c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d520:	6006      	str	r6, [r0, #0]
 800d522:	60c6      	str	r6, [r0, #12]
 800d524:	b13c      	cbz	r4, 800d536 <_Bfree+0x3a>
 800d526:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d528:	6862      	ldr	r2, [r4, #4]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d530:	6021      	str	r1, [r4, #0]
 800d532:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d536:	bd70      	pop	{r4, r5, r6, pc}
 800d538:	0800ea1e 	.word	0x0800ea1e
 800d53c:	0800eb1c 	.word	0x0800eb1c

0800d540 <__multadd>:
 800d540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d544:	690d      	ldr	r5, [r1, #16]
 800d546:	4607      	mov	r7, r0
 800d548:	460c      	mov	r4, r1
 800d54a:	461e      	mov	r6, r3
 800d54c:	f101 0c14 	add.w	ip, r1, #20
 800d550:	2000      	movs	r0, #0
 800d552:	f8dc 3000 	ldr.w	r3, [ip]
 800d556:	b299      	uxth	r1, r3
 800d558:	fb02 6101 	mla	r1, r2, r1, r6
 800d55c:	0c1e      	lsrs	r6, r3, #16
 800d55e:	0c0b      	lsrs	r3, r1, #16
 800d560:	fb02 3306 	mla	r3, r2, r6, r3
 800d564:	b289      	uxth	r1, r1
 800d566:	3001      	adds	r0, #1
 800d568:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d56c:	4285      	cmp	r5, r0
 800d56e:	f84c 1b04 	str.w	r1, [ip], #4
 800d572:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d576:	dcec      	bgt.n	800d552 <__multadd+0x12>
 800d578:	b30e      	cbz	r6, 800d5be <__multadd+0x7e>
 800d57a:	68a3      	ldr	r3, [r4, #8]
 800d57c:	42ab      	cmp	r3, r5
 800d57e:	dc19      	bgt.n	800d5b4 <__multadd+0x74>
 800d580:	6861      	ldr	r1, [r4, #4]
 800d582:	4638      	mov	r0, r7
 800d584:	3101      	adds	r1, #1
 800d586:	f7ff ff79 	bl	800d47c <_Balloc>
 800d58a:	4680      	mov	r8, r0
 800d58c:	b928      	cbnz	r0, 800d59a <__multadd+0x5a>
 800d58e:	4602      	mov	r2, r0
 800d590:	4b0c      	ldr	r3, [pc, #48]	; (800d5c4 <__multadd+0x84>)
 800d592:	480d      	ldr	r0, [pc, #52]	; (800d5c8 <__multadd+0x88>)
 800d594:	21b5      	movs	r1, #181	; 0xb5
 800d596:	f000 fe2d 	bl	800e1f4 <__assert_func>
 800d59a:	6922      	ldr	r2, [r4, #16]
 800d59c:	3202      	adds	r2, #2
 800d59e:	f104 010c 	add.w	r1, r4, #12
 800d5a2:	0092      	lsls	r2, r2, #2
 800d5a4:	300c      	adds	r0, #12
 800d5a6:	f7fc fc0c 	bl	8009dc2 <memcpy>
 800d5aa:	4621      	mov	r1, r4
 800d5ac:	4638      	mov	r0, r7
 800d5ae:	f7ff ffa5 	bl	800d4fc <_Bfree>
 800d5b2:	4644      	mov	r4, r8
 800d5b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5b8:	3501      	adds	r5, #1
 800d5ba:	615e      	str	r6, [r3, #20]
 800d5bc:	6125      	str	r5, [r4, #16]
 800d5be:	4620      	mov	r0, r4
 800d5c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5c4:	0800ea90 	.word	0x0800ea90
 800d5c8:	0800eb1c 	.word	0x0800eb1c

0800d5cc <__s2b>:
 800d5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5d0:	460c      	mov	r4, r1
 800d5d2:	4615      	mov	r5, r2
 800d5d4:	461f      	mov	r7, r3
 800d5d6:	2209      	movs	r2, #9
 800d5d8:	3308      	adds	r3, #8
 800d5da:	4606      	mov	r6, r0
 800d5dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	db09      	blt.n	800d5fc <__s2b+0x30>
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f7ff ff47 	bl	800d47c <_Balloc>
 800d5ee:	b940      	cbnz	r0, 800d602 <__s2b+0x36>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	4b19      	ldr	r3, [pc, #100]	; (800d658 <__s2b+0x8c>)
 800d5f4:	4819      	ldr	r0, [pc, #100]	; (800d65c <__s2b+0x90>)
 800d5f6:	21ce      	movs	r1, #206	; 0xce
 800d5f8:	f000 fdfc 	bl	800e1f4 <__assert_func>
 800d5fc:	0052      	lsls	r2, r2, #1
 800d5fe:	3101      	adds	r1, #1
 800d600:	e7f0      	b.n	800d5e4 <__s2b+0x18>
 800d602:	9b08      	ldr	r3, [sp, #32]
 800d604:	6143      	str	r3, [r0, #20]
 800d606:	2d09      	cmp	r5, #9
 800d608:	f04f 0301 	mov.w	r3, #1
 800d60c:	6103      	str	r3, [r0, #16]
 800d60e:	dd16      	ble.n	800d63e <__s2b+0x72>
 800d610:	f104 0909 	add.w	r9, r4, #9
 800d614:	46c8      	mov	r8, r9
 800d616:	442c      	add	r4, r5
 800d618:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d61c:	4601      	mov	r1, r0
 800d61e:	3b30      	subs	r3, #48	; 0x30
 800d620:	220a      	movs	r2, #10
 800d622:	4630      	mov	r0, r6
 800d624:	f7ff ff8c 	bl	800d540 <__multadd>
 800d628:	45a0      	cmp	r8, r4
 800d62a:	d1f5      	bne.n	800d618 <__s2b+0x4c>
 800d62c:	f1a5 0408 	sub.w	r4, r5, #8
 800d630:	444c      	add	r4, r9
 800d632:	1b2d      	subs	r5, r5, r4
 800d634:	1963      	adds	r3, r4, r5
 800d636:	42bb      	cmp	r3, r7
 800d638:	db04      	blt.n	800d644 <__s2b+0x78>
 800d63a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d63e:	340a      	adds	r4, #10
 800d640:	2509      	movs	r5, #9
 800d642:	e7f6      	b.n	800d632 <__s2b+0x66>
 800d644:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d648:	4601      	mov	r1, r0
 800d64a:	3b30      	subs	r3, #48	; 0x30
 800d64c:	220a      	movs	r2, #10
 800d64e:	4630      	mov	r0, r6
 800d650:	f7ff ff76 	bl	800d540 <__multadd>
 800d654:	e7ee      	b.n	800d634 <__s2b+0x68>
 800d656:	bf00      	nop
 800d658:	0800ea90 	.word	0x0800ea90
 800d65c:	0800eb1c 	.word	0x0800eb1c

0800d660 <__hi0bits>:
 800d660:	0c03      	lsrs	r3, r0, #16
 800d662:	041b      	lsls	r3, r3, #16
 800d664:	b9d3      	cbnz	r3, 800d69c <__hi0bits+0x3c>
 800d666:	0400      	lsls	r0, r0, #16
 800d668:	2310      	movs	r3, #16
 800d66a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d66e:	bf04      	itt	eq
 800d670:	0200      	lsleq	r0, r0, #8
 800d672:	3308      	addeq	r3, #8
 800d674:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d678:	bf04      	itt	eq
 800d67a:	0100      	lsleq	r0, r0, #4
 800d67c:	3304      	addeq	r3, #4
 800d67e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d682:	bf04      	itt	eq
 800d684:	0080      	lsleq	r0, r0, #2
 800d686:	3302      	addeq	r3, #2
 800d688:	2800      	cmp	r0, #0
 800d68a:	db05      	blt.n	800d698 <__hi0bits+0x38>
 800d68c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d690:	f103 0301 	add.w	r3, r3, #1
 800d694:	bf08      	it	eq
 800d696:	2320      	moveq	r3, #32
 800d698:	4618      	mov	r0, r3
 800d69a:	4770      	bx	lr
 800d69c:	2300      	movs	r3, #0
 800d69e:	e7e4      	b.n	800d66a <__hi0bits+0xa>

0800d6a0 <__lo0bits>:
 800d6a0:	6803      	ldr	r3, [r0, #0]
 800d6a2:	f013 0207 	ands.w	r2, r3, #7
 800d6a6:	4601      	mov	r1, r0
 800d6a8:	d00b      	beq.n	800d6c2 <__lo0bits+0x22>
 800d6aa:	07da      	lsls	r2, r3, #31
 800d6ac:	d423      	bmi.n	800d6f6 <__lo0bits+0x56>
 800d6ae:	0798      	lsls	r0, r3, #30
 800d6b0:	bf49      	itett	mi
 800d6b2:	085b      	lsrmi	r3, r3, #1
 800d6b4:	089b      	lsrpl	r3, r3, #2
 800d6b6:	2001      	movmi	r0, #1
 800d6b8:	600b      	strmi	r3, [r1, #0]
 800d6ba:	bf5c      	itt	pl
 800d6bc:	600b      	strpl	r3, [r1, #0]
 800d6be:	2002      	movpl	r0, #2
 800d6c0:	4770      	bx	lr
 800d6c2:	b298      	uxth	r0, r3
 800d6c4:	b9a8      	cbnz	r0, 800d6f2 <__lo0bits+0x52>
 800d6c6:	0c1b      	lsrs	r3, r3, #16
 800d6c8:	2010      	movs	r0, #16
 800d6ca:	b2da      	uxtb	r2, r3
 800d6cc:	b90a      	cbnz	r2, 800d6d2 <__lo0bits+0x32>
 800d6ce:	3008      	adds	r0, #8
 800d6d0:	0a1b      	lsrs	r3, r3, #8
 800d6d2:	071a      	lsls	r2, r3, #28
 800d6d4:	bf04      	itt	eq
 800d6d6:	091b      	lsreq	r3, r3, #4
 800d6d8:	3004      	addeq	r0, #4
 800d6da:	079a      	lsls	r2, r3, #30
 800d6dc:	bf04      	itt	eq
 800d6de:	089b      	lsreq	r3, r3, #2
 800d6e0:	3002      	addeq	r0, #2
 800d6e2:	07da      	lsls	r2, r3, #31
 800d6e4:	d403      	bmi.n	800d6ee <__lo0bits+0x4e>
 800d6e6:	085b      	lsrs	r3, r3, #1
 800d6e8:	f100 0001 	add.w	r0, r0, #1
 800d6ec:	d005      	beq.n	800d6fa <__lo0bits+0x5a>
 800d6ee:	600b      	str	r3, [r1, #0]
 800d6f0:	4770      	bx	lr
 800d6f2:	4610      	mov	r0, r2
 800d6f4:	e7e9      	b.n	800d6ca <__lo0bits+0x2a>
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	4770      	bx	lr
 800d6fa:	2020      	movs	r0, #32
 800d6fc:	4770      	bx	lr
	...

0800d700 <__i2b>:
 800d700:	b510      	push	{r4, lr}
 800d702:	460c      	mov	r4, r1
 800d704:	2101      	movs	r1, #1
 800d706:	f7ff feb9 	bl	800d47c <_Balloc>
 800d70a:	4602      	mov	r2, r0
 800d70c:	b928      	cbnz	r0, 800d71a <__i2b+0x1a>
 800d70e:	4b05      	ldr	r3, [pc, #20]	; (800d724 <__i2b+0x24>)
 800d710:	4805      	ldr	r0, [pc, #20]	; (800d728 <__i2b+0x28>)
 800d712:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d716:	f000 fd6d 	bl	800e1f4 <__assert_func>
 800d71a:	2301      	movs	r3, #1
 800d71c:	6144      	str	r4, [r0, #20]
 800d71e:	6103      	str	r3, [r0, #16]
 800d720:	bd10      	pop	{r4, pc}
 800d722:	bf00      	nop
 800d724:	0800ea90 	.word	0x0800ea90
 800d728:	0800eb1c 	.word	0x0800eb1c

0800d72c <__multiply>:
 800d72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d730:	4691      	mov	r9, r2
 800d732:	690a      	ldr	r2, [r1, #16]
 800d734:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d738:	429a      	cmp	r2, r3
 800d73a:	bfb8      	it	lt
 800d73c:	460b      	movlt	r3, r1
 800d73e:	460c      	mov	r4, r1
 800d740:	bfbc      	itt	lt
 800d742:	464c      	movlt	r4, r9
 800d744:	4699      	movlt	r9, r3
 800d746:	6927      	ldr	r7, [r4, #16]
 800d748:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d74c:	68a3      	ldr	r3, [r4, #8]
 800d74e:	6861      	ldr	r1, [r4, #4]
 800d750:	eb07 060a 	add.w	r6, r7, sl
 800d754:	42b3      	cmp	r3, r6
 800d756:	b085      	sub	sp, #20
 800d758:	bfb8      	it	lt
 800d75a:	3101      	addlt	r1, #1
 800d75c:	f7ff fe8e 	bl	800d47c <_Balloc>
 800d760:	b930      	cbnz	r0, 800d770 <__multiply+0x44>
 800d762:	4602      	mov	r2, r0
 800d764:	4b44      	ldr	r3, [pc, #272]	; (800d878 <__multiply+0x14c>)
 800d766:	4845      	ldr	r0, [pc, #276]	; (800d87c <__multiply+0x150>)
 800d768:	f240 115d 	movw	r1, #349	; 0x15d
 800d76c:	f000 fd42 	bl	800e1f4 <__assert_func>
 800d770:	f100 0514 	add.w	r5, r0, #20
 800d774:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d778:	462b      	mov	r3, r5
 800d77a:	2200      	movs	r2, #0
 800d77c:	4543      	cmp	r3, r8
 800d77e:	d321      	bcc.n	800d7c4 <__multiply+0x98>
 800d780:	f104 0314 	add.w	r3, r4, #20
 800d784:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d788:	f109 0314 	add.w	r3, r9, #20
 800d78c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d790:	9202      	str	r2, [sp, #8]
 800d792:	1b3a      	subs	r2, r7, r4
 800d794:	3a15      	subs	r2, #21
 800d796:	f022 0203 	bic.w	r2, r2, #3
 800d79a:	3204      	adds	r2, #4
 800d79c:	f104 0115 	add.w	r1, r4, #21
 800d7a0:	428f      	cmp	r7, r1
 800d7a2:	bf38      	it	cc
 800d7a4:	2204      	movcc	r2, #4
 800d7a6:	9201      	str	r2, [sp, #4]
 800d7a8:	9a02      	ldr	r2, [sp, #8]
 800d7aa:	9303      	str	r3, [sp, #12]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d80c      	bhi.n	800d7ca <__multiply+0x9e>
 800d7b0:	2e00      	cmp	r6, #0
 800d7b2:	dd03      	ble.n	800d7bc <__multiply+0x90>
 800d7b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d05a      	beq.n	800d872 <__multiply+0x146>
 800d7bc:	6106      	str	r6, [r0, #16]
 800d7be:	b005      	add	sp, #20
 800d7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c4:	f843 2b04 	str.w	r2, [r3], #4
 800d7c8:	e7d8      	b.n	800d77c <__multiply+0x50>
 800d7ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800d7ce:	f1ba 0f00 	cmp.w	sl, #0
 800d7d2:	d024      	beq.n	800d81e <__multiply+0xf2>
 800d7d4:	f104 0e14 	add.w	lr, r4, #20
 800d7d8:	46a9      	mov	r9, r5
 800d7da:	f04f 0c00 	mov.w	ip, #0
 800d7de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d7e2:	f8d9 1000 	ldr.w	r1, [r9]
 800d7e6:	fa1f fb82 	uxth.w	fp, r2
 800d7ea:	b289      	uxth	r1, r1
 800d7ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800d7f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d7f4:	f8d9 2000 	ldr.w	r2, [r9]
 800d7f8:	4461      	add	r1, ip
 800d7fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d7fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800d802:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d806:	b289      	uxth	r1, r1
 800d808:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d80c:	4577      	cmp	r7, lr
 800d80e:	f849 1b04 	str.w	r1, [r9], #4
 800d812:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d816:	d8e2      	bhi.n	800d7de <__multiply+0xb2>
 800d818:	9a01      	ldr	r2, [sp, #4]
 800d81a:	f845 c002 	str.w	ip, [r5, r2]
 800d81e:	9a03      	ldr	r2, [sp, #12]
 800d820:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d824:	3304      	adds	r3, #4
 800d826:	f1b9 0f00 	cmp.w	r9, #0
 800d82a:	d020      	beq.n	800d86e <__multiply+0x142>
 800d82c:	6829      	ldr	r1, [r5, #0]
 800d82e:	f104 0c14 	add.w	ip, r4, #20
 800d832:	46ae      	mov	lr, r5
 800d834:	f04f 0a00 	mov.w	sl, #0
 800d838:	f8bc b000 	ldrh.w	fp, [ip]
 800d83c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d840:	fb09 220b 	mla	r2, r9, fp, r2
 800d844:	4492      	add	sl, r2
 800d846:	b289      	uxth	r1, r1
 800d848:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d84c:	f84e 1b04 	str.w	r1, [lr], #4
 800d850:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d854:	f8be 1000 	ldrh.w	r1, [lr]
 800d858:	0c12      	lsrs	r2, r2, #16
 800d85a:	fb09 1102 	mla	r1, r9, r2, r1
 800d85e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d862:	4567      	cmp	r7, ip
 800d864:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d868:	d8e6      	bhi.n	800d838 <__multiply+0x10c>
 800d86a:	9a01      	ldr	r2, [sp, #4]
 800d86c:	50a9      	str	r1, [r5, r2]
 800d86e:	3504      	adds	r5, #4
 800d870:	e79a      	b.n	800d7a8 <__multiply+0x7c>
 800d872:	3e01      	subs	r6, #1
 800d874:	e79c      	b.n	800d7b0 <__multiply+0x84>
 800d876:	bf00      	nop
 800d878:	0800ea90 	.word	0x0800ea90
 800d87c:	0800eb1c 	.word	0x0800eb1c

0800d880 <__pow5mult>:
 800d880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d884:	4615      	mov	r5, r2
 800d886:	f012 0203 	ands.w	r2, r2, #3
 800d88a:	4606      	mov	r6, r0
 800d88c:	460f      	mov	r7, r1
 800d88e:	d007      	beq.n	800d8a0 <__pow5mult+0x20>
 800d890:	4c25      	ldr	r4, [pc, #148]	; (800d928 <__pow5mult+0xa8>)
 800d892:	3a01      	subs	r2, #1
 800d894:	2300      	movs	r3, #0
 800d896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d89a:	f7ff fe51 	bl	800d540 <__multadd>
 800d89e:	4607      	mov	r7, r0
 800d8a0:	10ad      	asrs	r5, r5, #2
 800d8a2:	d03d      	beq.n	800d920 <__pow5mult+0xa0>
 800d8a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d8a6:	b97c      	cbnz	r4, 800d8c8 <__pow5mult+0x48>
 800d8a8:	2010      	movs	r0, #16
 800d8aa:	f7ff fdc1 	bl	800d430 <malloc>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	6270      	str	r0, [r6, #36]	; 0x24
 800d8b2:	b928      	cbnz	r0, 800d8c0 <__pow5mult+0x40>
 800d8b4:	4b1d      	ldr	r3, [pc, #116]	; (800d92c <__pow5mult+0xac>)
 800d8b6:	481e      	ldr	r0, [pc, #120]	; (800d930 <__pow5mult+0xb0>)
 800d8b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d8bc:	f000 fc9a 	bl	800e1f4 <__assert_func>
 800d8c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8c4:	6004      	str	r4, [r0, #0]
 800d8c6:	60c4      	str	r4, [r0, #12]
 800d8c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d8cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8d0:	b94c      	cbnz	r4, 800d8e6 <__pow5mult+0x66>
 800d8d2:	f240 2171 	movw	r1, #625	; 0x271
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	f7ff ff12 	bl	800d700 <__i2b>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	6003      	str	r3, [r0, #0]
 800d8e6:	f04f 0900 	mov.w	r9, #0
 800d8ea:	07eb      	lsls	r3, r5, #31
 800d8ec:	d50a      	bpl.n	800d904 <__pow5mult+0x84>
 800d8ee:	4639      	mov	r1, r7
 800d8f0:	4622      	mov	r2, r4
 800d8f2:	4630      	mov	r0, r6
 800d8f4:	f7ff ff1a 	bl	800d72c <__multiply>
 800d8f8:	4639      	mov	r1, r7
 800d8fa:	4680      	mov	r8, r0
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	f7ff fdfd 	bl	800d4fc <_Bfree>
 800d902:	4647      	mov	r7, r8
 800d904:	106d      	asrs	r5, r5, #1
 800d906:	d00b      	beq.n	800d920 <__pow5mult+0xa0>
 800d908:	6820      	ldr	r0, [r4, #0]
 800d90a:	b938      	cbnz	r0, 800d91c <__pow5mult+0x9c>
 800d90c:	4622      	mov	r2, r4
 800d90e:	4621      	mov	r1, r4
 800d910:	4630      	mov	r0, r6
 800d912:	f7ff ff0b 	bl	800d72c <__multiply>
 800d916:	6020      	str	r0, [r4, #0]
 800d918:	f8c0 9000 	str.w	r9, [r0]
 800d91c:	4604      	mov	r4, r0
 800d91e:	e7e4      	b.n	800d8ea <__pow5mult+0x6a>
 800d920:	4638      	mov	r0, r7
 800d922:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d926:	bf00      	nop
 800d928:	0800ec68 	.word	0x0800ec68
 800d92c:	0800ea1e 	.word	0x0800ea1e
 800d930:	0800eb1c 	.word	0x0800eb1c

0800d934 <__lshift>:
 800d934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d938:	460c      	mov	r4, r1
 800d93a:	6849      	ldr	r1, [r1, #4]
 800d93c:	6923      	ldr	r3, [r4, #16]
 800d93e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d942:	68a3      	ldr	r3, [r4, #8]
 800d944:	4607      	mov	r7, r0
 800d946:	4691      	mov	r9, r2
 800d948:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d94c:	f108 0601 	add.w	r6, r8, #1
 800d950:	42b3      	cmp	r3, r6
 800d952:	db0b      	blt.n	800d96c <__lshift+0x38>
 800d954:	4638      	mov	r0, r7
 800d956:	f7ff fd91 	bl	800d47c <_Balloc>
 800d95a:	4605      	mov	r5, r0
 800d95c:	b948      	cbnz	r0, 800d972 <__lshift+0x3e>
 800d95e:	4602      	mov	r2, r0
 800d960:	4b2a      	ldr	r3, [pc, #168]	; (800da0c <__lshift+0xd8>)
 800d962:	482b      	ldr	r0, [pc, #172]	; (800da10 <__lshift+0xdc>)
 800d964:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d968:	f000 fc44 	bl	800e1f4 <__assert_func>
 800d96c:	3101      	adds	r1, #1
 800d96e:	005b      	lsls	r3, r3, #1
 800d970:	e7ee      	b.n	800d950 <__lshift+0x1c>
 800d972:	2300      	movs	r3, #0
 800d974:	f100 0114 	add.w	r1, r0, #20
 800d978:	f100 0210 	add.w	r2, r0, #16
 800d97c:	4618      	mov	r0, r3
 800d97e:	4553      	cmp	r3, sl
 800d980:	db37      	blt.n	800d9f2 <__lshift+0xbe>
 800d982:	6920      	ldr	r0, [r4, #16]
 800d984:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d988:	f104 0314 	add.w	r3, r4, #20
 800d98c:	f019 091f 	ands.w	r9, r9, #31
 800d990:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d994:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d998:	d02f      	beq.n	800d9fa <__lshift+0xc6>
 800d99a:	f1c9 0e20 	rsb	lr, r9, #32
 800d99e:	468a      	mov	sl, r1
 800d9a0:	f04f 0c00 	mov.w	ip, #0
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	fa02 f209 	lsl.w	r2, r2, r9
 800d9aa:	ea42 020c 	orr.w	r2, r2, ip
 800d9ae:	f84a 2b04 	str.w	r2, [sl], #4
 800d9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9b6:	4298      	cmp	r0, r3
 800d9b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d9bc:	d8f2      	bhi.n	800d9a4 <__lshift+0x70>
 800d9be:	1b03      	subs	r3, r0, r4
 800d9c0:	3b15      	subs	r3, #21
 800d9c2:	f023 0303 	bic.w	r3, r3, #3
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	f104 0215 	add.w	r2, r4, #21
 800d9cc:	4290      	cmp	r0, r2
 800d9ce:	bf38      	it	cc
 800d9d0:	2304      	movcc	r3, #4
 800d9d2:	f841 c003 	str.w	ip, [r1, r3]
 800d9d6:	f1bc 0f00 	cmp.w	ip, #0
 800d9da:	d001      	beq.n	800d9e0 <__lshift+0xac>
 800d9dc:	f108 0602 	add.w	r6, r8, #2
 800d9e0:	3e01      	subs	r6, #1
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	612e      	str	r6, [r5, #16]
 800d9e6:	4621      	mov	r1, r4
 800d9e8:	f7ff fd88 	bl	800d4fc <_Bfree>
 800d9ec:	4628      	mov	r0, r5
 800d9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	e7c1      	b.n	800d97e <__lshift+0x4a>
 800d9fa:	3904      	subs	r1, #4
 800d9fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800da00:	f841 2f04 	str.w	r2, [r1, #4]!
 800da04:	4298      	cmp	r0, r3
 800da06:	d8f9      	bhi.n	800d9fc <__lshift+0xc8>
 800da08:	e7ea      	b.n	800d9e0 <__lshift+0xac>
 800da0a:	bf00      	nop
 800da0c:	0800ea90 	.word	0x0800ea90
 800da10:	0800eb1c 	.word	0x0800eb1c

0800da14 <__mcmp>:
 800da14:	b530      	push	{r4, r5, lr}
 800da16:	6902      	ldr	r2, [r0, #16]
 800da18:	690c      	ldr	r4, [r1, #16]
 800da1a:	1b12      	subs	r2, r2, r4
 800da1c:	d10e      	bne.n	800da3c <__mcmp+0x28>
 800da1e:	f100 0314 	add.w	r3, r0, #20
 800da22:	3114      	adds	r1, #20
 800da24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800da28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800da2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800da30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800da34:	42a5      	cmp	r5, r4
 800da36:	d003      	beq.n	800da40 <__mcmp+0x2c>
 800da38:	d305      	bcc.n	800da46 <__mcmp+0x32>
 800da3a:	2201      	movs	r2, #1
 800da3c:	4610      	mov	r0, r2
 800da3e:	bd30      	pop	{r4, r5, pc}
 800da40:	4283      	cmp	r3, r0
 800da42:	d3f3      	bcc.n	800da2c <__mcmp+0x18>
 800da44:	e7fa      	b.n	800da3c <__mcmp+0x28>
 800da46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da4a:	e7f7      	b.n	800da3c <__mcmp+0x28>

0800da4c <__mdiff>:
 800da4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da50:	460c      	mov	r4, r1
 800da52:	4606      	mov	r6, r0
 800da54:	4611      	mov	r1, r2
 800da56:	4620      	mov	r0, r4
 800da58:	4690      	mov	r8, r2
 800da5a:	f7ff ffdb 	bl	800da14 <__mcmp>
 800da5e:	1e05      	subs	r5, r0, #0
 800da60:	d110      	bne.n	800da84 <__mdiff+0x38>
 800da62:	4629      	mov	r1, r5
 800da64:	4630      	mov	r0, r6
 800da66:	f7ff fd09 	bl	800d47c <_Balloc>
 800da6a:	b930      	cbnz	r0, 800da7a <__mdiff+0x2e>
 800da6c:	4b3a      	ldr	r3, [pc, #232]	; (800db58 <__mdiff+0x10c>)
 800da6e:	4602      	mov	r2, r0
 800da70:	f240 2132 	movw	r1, #562	; 0x232
 800da74:	4839      	ldr	r0, [pc, #228]	; (800db5c <__mdiff+0x110>)
 800da76:	f000 fbbd 	bl	800e1f4 <__assert_func>
 800da7a:	2301      	movs	r3, #1
 800da7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da84:	bfa4      	itt	ge
 800da86:	4643      	movge	r3, r8
 800da88:	46a0      	movge	r8, r4
 800da8a:	4630      	mov	r0, r6
 800da8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da90:	bfa6      	itte	ge
 800da92:	461c      	movge	r4, r3
 800da94:	2500      	movge	r5, #0
 800da96:	2501      	movlt	r5, #1
 800da98:	f7ff fcf0 	bl	800d47c <_Balloc>
 800da9c:	b920      	cbnz	r0, 800daa8 <__mdiff+0x5c>
 800da9e:	4b2e      	ldr	r3, [pc, #184]	; (800db58 <__mdiff+0x10c>)
 800daa0:	4602      	mov	r2, r0
 800daa2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800daa6:	e7e5      	b.n	800da74 <__mdiff+0x28>
 800daa8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800daac:	6926      	ldr	r6, [r4, #16]
 800daae:	60c5      	str	r5, [r0, #12]
 800dab0:	f104 0914 	add.w	r9, r4, #20
 800dab4:	f108 0514 	add.w	r5, r8, #20
 800dab8:	f100 0e14 	add.w	lr, r0, #20
 800dabc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dac0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dac4:	f108 0210 	add.w	r2, r8, #16
 800dac8:	46f2      	mov	sl, lr
 800daca:	2100      	movs	r1, #0
 800dacc:	f859 3b04 	ldr.w	r3, [r9], #4
 800dad0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dad4:	fa1f f883 	uxth.w	r8, r3
 800dad8:	fa11 f18b 	uxtah	r1, r1, fp
 800dadc:	0c1b      	lsrs	r3, r3, #16
 800dade:	eba1 0808 	sub.w	r8, r1, r8
 800dae2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dae6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800daea:	fa1f f888 	uxth.w	r8, r8
 800daee:	1419      	asrs	r1, r3, #16
 800daf0:	454e      	cmp	r6, r9
 800daf2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800daf6:	f84a 3b04 	str.w	r3, [sl], #4
 800dafa:	d8e7      	bhi.n	800dacc <__mdiff+0x80>
 800dafc:	1b33      	subs	r3, r6, r4
 800dafe:	3b15      	subs	r3, #21
 800db00:	f023 0303 	bic.w	r3, r3, #3
 800db04:	3304      	adds	r3, #4
 800db06:	3415      	adds	r4, #21
 800db08:	42a6      	cmp	r6, r4
 800db0a:	bf38      	it	cc
 800db0c:	2304      	movcc	r3, #4
 800db0e:	441d      	add	r5, r3
 800db10:	4473      	add	r3, lr
 800db12:	469e      	mov	lr, r3
 800db14:	462e      	mov	r6, r5
 800db16:	4566      	cmp	r6, ip
 800db18:	d30e      	bcc.n	800db38 <__mdiff+0xec>
 800db1a:	f10c 0203 	add.w	r2, ip, #3
 800db1e:	1b52      	subs	r2, r2, r5
 800db20:	f022 0203 	bic.w	r2, r2, #3
 800db24:	3d03      	subs	r5, #3
 800db26:	45ac      	cmp	ip, r5
 800db28:	bf38      	it	cc
 800db2a:	2200      	movcc	r2, #0
 800db2c:	441a      	add	r2, r3
 800db2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800db32:	b17b      	cbz	r3, 800db54 <__mdiff+0x108>
 800db34:	6107      	str	r7, [r0, #16]
 800db36:	e7a3      	b.n	800da80 <__mdiff+0x34>
 800db38:	f856 8b04 	ldr.w	r8, [r6], #4
 800db3c:	fa11 f288 	uxtah	r2, r1, r8
 800db40:	1414      	asrs	r4, r2, #16
 800db42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800db46:	b292      	uxth	r2, r2
 800db48:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800db4c:	f84e 2b04 	str.w	r2, [lr], #4
 800db50:	1421      	asrs	r1, r4, #16
 800db52:	e7e0      	b.n	800db16 <__mdiff+0xca>
 800db54:	3f01      	subs	r7, #1
 800db56:	e7ea      	b.n	800db2e <__mdiff+0xe2>
 800db58:	0800ea90 	.word	0x0800ea90
 800db5c:	0800eb1c 	.word	0x0800eb1c

0800db60 <__ulp>:
 800db60:	b082      	sub	sp, #8
 800db62:	ed8d 0b00 	vstr	d0, [sp]
 800db66:	9b01      	ldr	r3, [sp, #4]
 800db68:	4912      	ldr	r1, [pc, #72]	; (800dbb4 <__ulp+0x54>)
 800db6a:	4019      	ands	r1, r3
 800db6c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800db70:	2900      	cmp	r1, #0
 800db72:	dd05      	ble.n	800db80 <__ulp+0x20>
 800db74:	2200      	movs	r2, #0
 800db76:	460b      	mov	r3, r1
 800db78:	ec43 2b10 	vmov	d0, r2, r3
 800db7c:	b002      	add	sp, #8
 800db7e:	4770      	bx	lr
 800db80:	4249      	negs	r1, r1
 800db82:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800db86:	ea4f 5021 	mov.w	r0, r1, asr #20
 800db8a:	f04f 0200 	mov.w	r2, #0
 800db8e:	f04f 0300 	mov.w	r3, #0
 800db92:	da04      	bge.n	800db9e <__ulp+0x3e>
 800db94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800db98:	fa41 f300 	asr.w	r3, r1, r0
 800db9c:	e7ec      	b.n	800db78 <__ulp+0x18>
 800db9e:	f1a0 0114 	sub.w	r1, r0, #20
 800dba2:	291e      	cmp	r1, #30
 800dba4:	bfda      	itte	le
 800dba6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dbaa:	fa20 f101 	lsrle.w	r1, r0, r1
 800dbae:	2101      	movgt	r1, #1
 800dbb0:	460a      	mov	r2, r1
 800dbb2:	e7e1      	b.n	800db78 <__ulp+0x18>
 800dbb4:	7ff00000 	.word	0x7ff00000

0800dbb8 <__b2d>:
 800dbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbba:	6905      	ldr	r5, [r0, #16]
 800dbbc:	f100 0714 	add.w	r7, r0, #20
 800dbc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dbc4:	1f2e      	subs	r6, r5, #4
 800dbc6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f7ff fd48 	bl	800d660 <__hi0bits>
 800dbd0:	f1c0 0320 	rsb	r3, r0, #32
 800dbd4:	280a      	cmp	r0, #10
 800dbd6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dc54 <__b2d+0x9c>
 800dbda:	600b      	str	r3, [r1, #0]
 800dbdc:	dc14      	bgt.n	800dc08 <__b2d+0x50>
 800dbde:	f1c0 0e0b 	rsb	lr, r0, #11
 800dbe2:	fa24 f10e 	lsr.w	r1, r4, lr
 800dbe6:	42b7      	cmp	r7, r6
 800dbe8:	ea41 030c 	orr.w	r3, r1, ip
 800dbec:	bf34      	ite	cc
 800dbee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dbf2:	2100      	movcs	r1, #0
 800dbf4:	3015      	adds	r0, #21
 800dbf6:	fa04 f000 	lsl.w	r0, r4, r0
 800dbfa:	fa21 f10e 	lsr.w	r1, r1, lr
 800dbfe:	ea40 0201 	orr.w	r2, r0, r1
 800dc02:	ec43 2b10 	vmov	d0, r2, r3
 800dc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc08:	42b7      	cmp	r7, r6
 800dc0a:	bf3a      	itte	cc
 800dc0c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dc10:	f1a5 0608 	subcc.w	r6, r5, #8
 800dc14:	2100      	movcs	r1, #0
 800dc16:	380b      	subs	r0, #11
 800dc18:	d017      	beq.n	800dc4a <__b2d+0x92>
 800dc1a:	f1c0 0c20 	rsb	ip, r0, #32
 800dc1e:	fa04 f500 	lsl.w	r5, r4, r0
 800dc22:	42be      	cmp	r6, r7
 800dc24:	fa21 f40c 	lsr.w	r4, r1, ip
 800dc28:	ea45 0504 	orr.w	r5, r5, r4
 800dc2c:	bf8c      	ite	hi
 800dc2e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dc32:	2400      	movls	r4, #0
 800dc34:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dc38:	fa01 f000 	lsl.w	r0, r1, r0
 800dc3c:	fa24 f40c 	lsr.w	r4, r4, ip
 800dc40:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dc44:	ea40 0204 	orr.w	r2, r0, r4
 800dc48:	e7db      	b.n	800dc02 <__b2d+0x4a>
 800dc4a:	ea44 030c 	orr.w	r3, r4, ip
 800dc4e:	460a      	mov	r2, r1
 800dc50:	e7d7      	b.n	800dc02 <__b2d+0x4a>
 800dc52:	bf00      	nop
 800dc54:	3ff00000 	.word	0x3ff00000

0800dc58 <__d2b>:
 800dc58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc5c:	4689      	mov	r9, r1
 800dc5e:	2101      	movs	r1, #1
 800dc60:	ec57 6b10 	vmov	r6, r7, d0
 800dc64:	4690      	mov	r8, r2
 800dc66:	f7ff fc09 	bl	800d47c <_Balloc>
 800dc6a:	4604      	mov	r4, r0
 800dc6c:	b930      	cbnz	r0, 800dc7c <__d2b+0x24>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	4b25      	ldr	r3, [pc, #148]	; (800dd08 <__d2b+0xb0>)
 800dc72:	4826      	ldr	r0, [pc, #152]	; (800dd0c <__d2b+0xb4>)
 800dc74:	f240 310a 	movw	r1, #778	; 0x30a
 800dc78:	f000 fabc 	bl	800e1f4 <__assert_func>
 800dc7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dc80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc84:	bb35      	cbnz	r5, 800dcd4 <__d2b+0x7c>
 800dc86:	2e00      	cmp	r6, #0
 800dc88:	9301      	str	r3, [sp, #4]
 800dc8a:	d028      	beq.n	800dcde <__d2b+0x86>
 800dc8c:	4668      	mov	r0, sp
 800dc8e:	9600      	str	r6, [sp, #0]
 800dc90:	f7ff fd06 	bl	800d6a0 <__lo0bits>
 800dc94:	9900      	ldr	r1, [sp, #0]
 800dc96:	b300      	cbz	r0, 800dcda <__d2b+0x82>
 800dc98:	9a01      	ldr	r2, [sp, #4]
 800dc9a:	f1c0 0320 	rsb	r3, r0, #32
 800dc9e:	fa02 f303 	lsl.w	r3, r2, r3
 800dca2:	430b      	orrs	r3, r1
 800dca4:	40c2      	lsrs	r2, r0
 800dca6:	6163      	str	r3, [r4, #20]
 800dca8:	9201      	str	r2, [sp, #4]
 800dcaa:	9b01      	ldr	r3, [sp, #4]
 800dcac:	61a3      	str	r3, [r4, #24]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	bf14      	ite	ne
 800dcb2:	2202      	movne	r2, #2
 800dcb4:	2201      	moveq	r2, #1
 800dcb6:	6122      	str	r2, [r4, #16]
 800dcb8:	b1d5      	cbz	r5, 800dcf0 <__d2b+0x98>
 800dcba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dcbe:	4405      	add	r5, r0
 800dcc0:	f8c9 5000 	str.w	r5, [r9]
 800dcc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dcc8:	f8c8 0000 	str.w	r0, [r8]
 800dccc:	4620      	mov	r0, r4
 800dcce:	b003      	add	sp, #12
 800dcd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcd8:	e7d5      	b.n	800dc86 <__d2b+0x2e>
 800dcda:	6161      	str	r1, [r4, #20]
 800dcdc:	e7e5      	b.n	800dcaa <__d2b+0x52>
 800dcde:	a801      	add	r0, sp, #4
 800dce0:	f7ff fcde 	bl	800d6a0 <__lo0bits>
 800dce4:	9b01      	ldr	r3, [sp, #4]
 800dce6:	6163      	str	r3, [r4, #20]
 800dce8:	2201      	movs	r2, #1
 800dcea:	6122      	str	r2, [r4, #16]
 800dcec:	3020      	adds	r0, #32
 800dcee:	e7e3      	b.n	800dcb8 <__d2b+0x60>
 800dcf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dcf4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dcf8:	f8c9 0000 	str.w	r0, [r9]
 800dcfc:	6918      	ldr	r0, [r3, #16]
 800dcfe:	f7ff fcaf 	bl	800d660 <__hi0bits>
 800dd02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd06:	e7df      	b.n	800dcc8 <__d2b+0x70>
 800dd08:	0800ea90 	.word	0x0800ea90
 800dd0c:	0800eb1c 	.word	0x0800eb1c

0800dd10 <__ratio>:
 800dd10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd14:	4688      	mov	r8, r1
 800dd16:	4669      	mov	r1, sp
 800dd18:	4681      	mov	r9, r0
 800dd1a:	f7ff ff4d 	bl	800dbb8 <__b2d>
 800dd1e:	a901      	add	r1, sp, #4
 800dd20:	4640      	mov	r0, r8
 800dd22:	ec55 4b10 	vmov	r4, r5, d0
 800dd26:	f7ff ff47 	bl	800dbb8 <__b2d>
 800dd2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd2e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dd32:	eba3 0c02 	sub.w	ip, r3, r2
 800dd36:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dd3a:	1a9b      	subs	r3, r3, r2
 800dd3c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dd40:	ec51 0b10 	vmov	r0, r1, d0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	bfd6      	itet	le
 800dd48:	460a      	movle	r2, r1
 800dd4a:	462a      	movgt	r2, r5
 800dd4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dd50:	468b      	mov	fp, r1
 800dd52:	462f      	mov	r7, r5
 800dd54:	bfd4      	ite	le
 800dd56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dd5a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dd5e:	4620      	mov	r0, r4
 800dd60:	ee10 2a10 	vmov	r2, s0
 800dd64:	465b      	mov	r3, fp
 800dd66:	4639      	mov	r1, r7
 800dd68:	f7f2 fd70 	bl	800084c <__aeabi_ddiv>
 800dd6c:	ec41 0b10 	vmov	d0, r0, r1
 800dd70:	b003      	add	sp, #12
 800dd72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd76 <__copybits>:
 800dd76:	3901      	subs	r1, #1
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	1149      	asrs	r1, r1, #5
 800dd7c:	6914      	ldr	r4, [r2, #16]
 800dd7e:	3101      	adds	r1, #1
 800dd80:	f102 0314 	add.w	r3, r2, #20
 800dd84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd88:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd8c:	1f05      	subs	r5, r0, #4
 800dd8e:	42a3      	cmp	r3, r4
 800dd90:	d30c      	bcc.n	800ddac <__copybits+0x36>
 800dd92:	1aa3      	subs	r3, r4, r2
 800dd94:	3b11      	subs	r3, #17
 800dd96:	f023 0303 	bic.w	r3, r3, #3
 800dd9a:	3211      	adds	r2, #17
 800dd9c:	42a2      	cmp	r2, r4
 800dd9e:	bf88      	it	hi
 800dda0:	2300      	movhi	r3, #0
 800dda2:	4418      	add	r0, r3
 800dda4:	2300      	movs	r3, #0
 800dda6:	4288      	cmp	r0, r1
 800dda8:	d305      	bcc.n	800ddb6 <__copybits+0x40>
 800ddaa:	bd70      	pop	{r4, r5, r6, pc}
 800ddac:	f853 6b04 	ldr.w	r6, [r3], #4
 800ddb0:	f845 6f04 	str.w	r6, [r5, #4]!
 800ddb4:	e7eb      	b.n	800dd8e <__copybits+0x18>
 800ddb6:	f840 3b04 	str.w	r3, [r0], #4
 800ddba:	e7f4      	b.n	800dda6 <__copybits+0x30>

0800ddbc <__any_on>:
 800ddbc:	f100 0214 	add.w	r2, r0, #20
 800ddc0:	6900      	ldr	r0, [r0, #16]
 800ddc2:	114b      	asrs	r3, r1, #5
 800ddc4:	4298      	cmp	r0, r3
 800ddc6:	b510      	push	{r4, lr}
 800ddc8:	db11      	blt.n	800ddee <__any_on+0x32>
 800ddca:	dd0a      	ble.n	800dde2 <__any_on+0x26>
 800ddcc:	f011 011f 	ands.w	r1, r1, #31
 800ddd0:	d007      	beq.n	800dde2 <__any_on+0x26>
 800ddd2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ddd6:	fa24 f001 	lsr.w	r0, r4, r1
 800ddda:	fa00 f101 	lsl.w	r1, r0, r1
 800ddde:	428c      	cmp	r4, r1
 800dde0:	d10b      	bne.n	800ddfa <__any_on+0x3e>
 800dde2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d803      	bhi.n	800ddf2 <__any_on+0x36>
 800ddea:	2000      	movs	r0, #0
 800ddec:	bd10      	pop	{r4, pc}
 800ddee:	4603      	mov	r3, r0
 800ddf0:	e7f7      	b.n	800dde2 <__any_on+0x26>
 800ddf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ddf6:	2900      	cmp	r1, #0
 800ddf8:	d0f5      	beq.n	800dde6 <__any_on+0x2a>
 800ddfa:	2001      	movs	r0, #1
 800ddfc:	e7f6      	b.n	800ddec <__any_on+0x30>

0800ddfe <_calloc_r>:
 800ddfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de00:	fba1 2402 	umull	r2, r4, r1, r2
 800de04:	b94c      	cbnz	r4, 800de1a <_calloc_r+0x1c>
 800de06:	4611      	mov	r1, r2
 800de08:	9201      	str	r2, [sp, #4]
 800de0a:	f7fc f811 	bl	8009e30 <_malloc_r>
 800de0e:	9a01      	ldr	r2, [sp, #4]
 800de10:	4605      	mov	r5, r0
 800de12:	b930      	cbnz	r0, 800de22 <_calloc_r+0x24>
 800de14:	4628      	mov	r0, r5
 800de16:	b003      	add	sp, #12
 800de18:	bd30      	pop	{r4, r5, pc}
 800de1a:	220c      	movs	r2, #12
 800de1c:	6002      	str	r2, [r0, #0]
 800de1e:	2500      	movs	r5, #0
 800de20:	e7f8      	b.n	800de14 <_calloc_r+0x16>
 800de22:	4621      	mov	r1, r4
 800de24:	f7fb ffdb 	bl	8009dde <memset>
 800de28:	e7f4      	b.n	800de14 <_calloc_r+0x16>
	...

0800de2c <_free_r>:
 800de2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de2e:	2900      	cmp	r1, #0
 800de30:	d044      	beq.n	800debc <_free_r+0x90>
 800de32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de36:	9001      	str	r0, [sp, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f1a1 0404 	sub.w	r4, r1, #4
 800de3e:	bfb8      	it	lt
 800de40:	18e4      	addlt	r4, r4, r3
 800de42:	f7ff fb0f 	bl	800d464 <__malloc_lock>
 800de46:	4a1e      	ldr	r2, [pc, #120]	; (800dec0 <_free_r+0x94>)
 800de48:	9801      	ldr	r0, [sp, #4]
 800de4a:	6813      	ldr	r3, [r2, #0]
 800de4c:	b933      	cbnz	r3, 800de5c <_free_r+0x30>
 800de4e:	6063      	str	r3, [r4, #4]
 800de50:	6014      	str	r4, [r2, #0]
 800de52:	b003      	add	sp, #12
 800de54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de58:	f7ff bb0a 	b.w	800d470 <__malloc_unlock>
 800de5c:	42a3      	cmp	r3, r4
 800de5e:	d908      	bls.n	800de72 <_free_r+0x46>
 800de60:	6825      	ldr	r5, [r4, #0]
 800de62:	1961      	adds	r1, r4, r5
 800de64:	428b      	cmp	r3, r1
 800de66:	bf01      	itttt	eq
 800de68:	6819      	ldreq	r1, [r3, #0]
 800de6a:	685b      	ldreq	r3, [r3, #4]
 800de6c:	1949      	addeq	r1, r1, r5
 800de6e:	6021      	streq	r1, [r4, #0]
 800de70:	e7ed      	b.n	800de4e <_free_r+0x22>
 800de72:	461a      	mov	r2, r3
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	b10b      	cbz	r3, 800de7c <_free_r+0x50>
 800de78:	42a3      	cmp	r3, r4
 800de7a:	d9fa      	bls.n	800de72 <_free_r+0x46>
 800de7c:	6811      	ldr	r1, [r2, #0]
 800de7e:	1855      	adds	r5, r2, r1
 800de80:	42a5      	cmp	r5, r4
 800de82:	d10b      	bne.n	800de9c <_free_r+0x70>
 800de84:	6824      	ldr	r4, [r4, #0]
 800de86:	4421      	add	r1, r4
 800de88:	1854      	adds	r4, r2, r1
 800de8a:	42a3      	cmp	r3, r4
 800de8c:	6011      	str	r1, [r2, #0]
 800de8e:	d1e0      	bne.n	800de52 <_free_r+0x26>
 800de90:	681c      	ldr	r4, [r3, #0]
 800de92:	685b      	ldr	r3, [r3, #4]
 800de94:	6053      	str	r3, [r2, #4]
 800de96:	4421      	add	r1, r4
 800de98:	6011      	str	r1, [r2, #0]
 800de9a:	e7da      	b.n	800de52 <_free_r+0x26>
 800de9c:	d902      	bls.n	800dea4 <_free_r+0x78>
 800de9e:	230c      	movs	r3, #12
 800dea0:	6003      	str	r3, [r0, #0]
 800dea2:	e7d6      	b.n	800de52 <_free_r+0x26>
 800dea4:	6825      	ldr	r5, [r4, #0]
 800dea6:	1961      	adds	r1, r4, r5
 800dea8:	428b      	cmp	r3, r1
 800deaa:	bf04      	itt	eq
 800deac:	6819      	ldreq	r1, [r3, #0]
 800deae:	685b      	ldreq	r3, [r3, #4]
 800deb0:	6063      	str	r3, [r4, #4]
 800deb2:	bf04      	itt	eq
 800deb4:	1949      	addeq	r1, r1, r5
 800deb6:	6021      	streq	r1, [r4, #0]
 800deb8:	6054      	str	r4, [r2, #4]
 800deba:	e7ca      	b.n	800de52 <_free_r+0x26>
 800debc:	b003      	add	sp, #12
 800debe:	bd30      	pop	{r4, r5, pc}
 800dec0:	20001e38 	.word	0x20001e38

0800dec4 <__ssputs_r>:
 800dec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dec8:	688e      	ldr	r6, [r1, #8]
 800deca:	429e      	cmp	r6, r3
 800decc:	4682      	mov	sl, r0
 800dece:	460c      	mov	r4, r1
 800ded0:	4690      	mov	r8, r2
 800ded2:	461f      	mov	r7, r3
 800ded4:	d838      	bhi.n	800df48 <__ssputs_r+0x84>
 800ded6:	898a      	ldrh	r2, [r1, #12]
 800ded8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dedc:	d032      	beq.n	800df44 <__ssputs_r+0x80>
 800dede:	6825      	ldr	r5, [r4, #0]
 800dee0:	6909      	ldr	r1, [r1, #16]
 800dee2:	eba5 0901 	sub.w	r9, r5, r1
 800dee6:	6965      	ldr	r5, [r4, #20]
 800dee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800deec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800def0:	3301      	adds	r3, #1
 800def2:	444b      	add	r3, r9
 800def4:	106d      	asrs	r5, r5, #1
 800def6:	429d      	cmp	r5, r3
 800def8:	bf38      	it	cc
 800defa:	461d      	movcc	r5, r3
 800defc:	0553      	lsls	r3, r2, #21
 800defe:	d531      	bpl.n	800df64 <__ssputs_r+0xa0>
 800df00:	4629      	mov	r1, r5
 800df02:	f7fb ff95 	bl	8009e30 <_malloc_r>
 800df06:	4606      	mov	r6, r0
 800df08:	b950      	cbnz	r0, 800df20 <__ssputs_r+0x5c>
 800df0a:	230c      	movs	r3, #12
 800df0c:	f8ca 3000 	str.w	r3, [sl]
 800df10:	89a3      	ldrh	r3, [r4, #12]
 800df12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df16:	81a3      	strh	r3, [r4, #12]
 800df18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df20:	6921      	ldr	r1, [r4, #16]
 800df22:	464a      	mov	r2, r9
 800df24:	f7fb ff4d 	bl	8009dc2 <memcpy>
 800df28:	89a3      	ldrh	r3, [r4, #12]
 800df2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df32:	81a3      	strh	r3, [r4, #12]
 800df34:	6126      	str	r6, [r4, #16]
 800df36:	6165      	str	r5, [r4, #20]
 800df38:	444e      	add	r6, r9
 800df3a:	eba5 0509 	sub.w	r5, r5, r9
 800df3e:	6026      	str	r6, [r4, #0]
 800df40:	60a5      	str	r5, [r4, #8]
 800df42:	463e      	mov	r6, r7
 800df44:	42be      	cmp	r6, r7
 800df46:	d900      	bls.n	800df4a <__ssputs_r+0x86>
 800df48:	463e      	mov	r6, r7
 800df4a:	6820      	ldr	r0, [r4, #0]
 800df4c:	4632      	mov	r2, r6
 800df4e:	4641      	mov	r1, r8
 800df50:	f000 f9a2 	bl	800e298 <memmove>
 800df54:	68a3      	ldr	r3, [r4, #8]
 800df56:	1b9b      	subs	r3, r3, r6
 800df58:	60a3      	str	r3, [r4, #8]
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	4433      	add	r3, r6
 800df5e:	6023      	str	r3, [r4, #0]
 800df60:	2000      	movs	r0, #0
 800df62:	e7db      	b.n	800df1c <__ssputs_r+0x58>
 800df64:	462a      	mov	r2, r5
 800df66:	f000 f9b1 	bl	800e2cc <_realloc_r>
 800df6a:	4606      	mov	r6, r0
 800df6c:	2800      	cmp	r0, #0
 800df6e:	d1e1      	bne.n	800df34 <__ssputs_r+0x70>
 800df70:	6921      	ldr	r1, [r4, #16]
 800df72:	4650      	mov	r0, sl
 800df74:	f7ff ff5a 	bl	800de2c <_free_r>
 800df78:	e7c7      	b.n	800df0a <__ssputs_r+0x46>
	...

0800df7c <_svfiprintf_r>:
 800df7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df80:	4698      	mov	r8, r3
 800df82:	898b      	ldrh	r3, [r1, #12]
 800df84:	061b      	lsls	r3, r3, #24
 800df86:	b09d      	sub	sp, #116	; 0x74
 800df88:	4607      	mov	r7, r0
 800df8a:	460d      	mov	r5, r1
 800df8c:	4614      	mov	r4, r2
 800df8e:	d50e      	bpl.n	800dfae <_svfiprintf_r+0x32>
 800df90:	690b      	ldr	r3, [r1, #16]
 800df92:	b963      	cbnz	r3, 800dfae <_svfiprintf_r+0x32>
 800df94:	2140      	movs	r1, #64	; 0x40
 800df96:	f7fb ff4b 	bl	8009e30 <_malloc_r>
 800df9a:	6028      	str	r0, [r5, #0]
 800df9c:	6128      	str	r0, [r5, #16]
 800df9e:	b920      	cbnz	r0, 800dfaa <_svfiprintf_r+0x2e>
 800dfa0:	230c      	movs	r3, #12
 800dfa2:	603b      	str	r3, [r7, #0]
 800dfa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfa8:	e0d1      	b.n	800e14e <_svfiprintf_r+0x1d2>
 800dfaa:	2340      	movs	r3, #64	; 0x40
 800dfac:	616b      	str	r3, [r5, #20]
 800dfae:	2300      	movs	r3, #0
 800dfb0:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb2:	2320      	movs	r3, #32
 800dfb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfbc:	2330      	movs	r3, #48	; 0x30
 800dfbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e168 <_svfiprintf_r+0x1ec>
 800dfc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfc6:	f04f 0901 	mov.w	r9, #1
 800dfca:	4623      	mov	r3, r4
 800dfcc:	469a      	mov	sl, r3
 800dfce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfd2:	b10a      	cbz	r2, 800dfd8 <_svfiprintf_r+0x5c>
 800dfd4:	2a25      	cmp	r2, #37	; 0x25
 800dfd6:	d1f9      	bne.n	800dfcc <_svfiprintf_r+0x50>
 800dfd8:	ebba 0b04 	subs.w	fp, sl, r4
 800dfdc:	d00b      	beq.n	800dff6 <_svfiprintf_r+0x7a>
 800dfde:	465b      	mov	r3, fp
 800dfe0:	4622      	mov	r2, r4
 800dfe2:	4629      	mov	r1, r5
 800dfe4:	4638      	mov	r0, r7
 800dfe6:	f7ff ff6d 	bl	800dec4 <__ssputs_r>
 800dfea:	3001      	adds	r0, #1
 800dfec:	f000 80aa 	beq.w	800e144 <_svfiprintf_r+0x1c8>
 800dff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dff2:	445a      	add	r2, fp
 800dff4:	9209      	str	r2, [sp, #36]	; 0x24
 800dff6:	f89a 3000 	ldrb.w	r3, [sl]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	f000 80a2 	beq.w	800e144 <_svfiprintf_r+0x1c8>
 800e000:	2300      	movs	r3, #0
 800e002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e00a:	f10a 0a01 	add.w	sl, sl, #1
 800e00e:	9304      	str	r3, [sp, #16]
 800e010:	9307      	str	r3, [sp, #28]
 800e012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e016:	931a      	str	r3, [sp, #104]	; 0x68
 800e018:	4654      	mov	r4, sl
 800e01a:	2205      	movs	r2, #5
 800e01c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e020:	4851      	ldr	r0, [pc, #324]	; (800e168 <_svfiprintf_r+0x1ec>)
 800e022:	f7f2 f8dd 	bl	80001e0 <memchr>
 800e026:	9a04      	ldr	r2, [sp, #16]
 800e028:	b9d8      	cbnz	r0, 800e062 <_svfiprintf_r+0xe6>
 800e02a:	06d0      	lsls	r0, r2, #27
 800e02c:	bf44      	itt	mi
 800e02e:	2320      	movmi	r3, #32
 800e030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e034:	0711      	lsls	r1, r2, #28
 800e036:	bf44      	itt	mi
 800e038:	232b      	movmi	r3, #43	; 0x2b
 800e03a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e03e:	f89a 3000 	ldrb.w	r3, [sl]
 800e042:	2b2a      	cmp	r3, #42	; 0x2a
 800e044:	d015      	beq.n	800e072 <_svfiprintf_r+0xf6>
 800e046:	9a07      	ldr	r2, [sp, #28]
 800e048:	4654      	mov	r4, sl
 800e04a:	2000      	movs	r0, #0
 800e04c:	f04f 0c0a 	mov.w	ip, #10
 800e050:	4621      	mov	r1, r4
 800e052:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e056:	3b30      	subs	r3, #48	; 0x30
 800e058:	2b09      	cmp	r3, #9
 800e05a:	d94e      	bls.n	800e0fa <_svfiprintf_r+0x17e>
 800e05c:	b1b0      	cbz	r0, 800e08c <_svfiprintf_r+0x110>
 800e05e:	9207      	str	r2, [sp, #28]
 800e060:	e014      	b.n	800e08c <_svfiprintf_r+0x110>
 800e062:	eba0 0308 	sub.w	r3, r0, r8
 800e066:	fa09 f303 	lsl.w	r3, r9, r3
 800e06a:	4313      	orrs	r3, r2
 800e06c:	9304      	str	r3, [sp, #16]
 800e06e:	46a2      	mov	sl, r4
 800e070:	e7d2      	b.n	800e018 <_svfiprintf_r+0x9c>
 800e072:	9b03      	ldr	r3, [sp, #12]
 800e074:	1d19      	adds	r1, r3, #4
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	9103      	str	r1, [sp, #12]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	bfbb      	ittet	lt
 800e07e:	425b      	neglt	r3, r3
 800e080:	f042 0202 	orrlt.w	r2, r2, #2
 800e084:	9307      	strge	r3, [sp, #28]
 800e086:	9307      	strlt	r3, [sp, #28]
 800e088:	bfb8      	it	lt
 800e08a:	9204      	strlt	r2, [sp, #16]
 800e08c:	7823      	ldrb	r3, [r4, #0]
 800e08e:	2b2e      	cmp	r3, #46	; 0x2e
 800e090:	d10c      	bne.n	800e0ac <_svfiprintf_r+0x130>
 800e092:	7863      	ldrb	r3, [r4, #1]
 800e094:	2b2a      	cmp	r3, #42	; 0x2a
 800e096:	d135      	bne.n	800e104 <_svfiprintf_r+0x188>
 800e098:	9b03      	ldr	r3, [sp, #12]
 800e09a:	1d1a      	adds	r2, r3, #4
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	9203      	str	r2, [sp, #12]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	bfb8      	it	lt
 800e0a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e0a8:	3402      	adds	r4, #2
 800e0aa:	9305      	str	r3, [sp, #20]
 800e0ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e178 <_svfiprintf_r+0x1fc>
 800e0b0:	7821      	ldrb	r1, [r4, #0]
 800e0b2:	2203      	movs	r2, #3
 800e0b4:	4650      	mov	r0, sl
 800e0b6:	f7f2 f893 	bl	80001e0 <memchr>
 800e0ba:	b140      	cbz	r0, 800e0ce <_svfiprintf_r+0x152>
 800e0bc:	2340      	movs	r3, #64	; 0x40
 800e0be:	eba0 000a 	sub.w	r0, r0, sl
 800e0c2:	fa03 f000 	lsl.w	r0, r3, r0
 800e0c6:	9b04      	ldr	r3, [sp, #16]
 800e0c8:	4303      	orrs	r3, r0
 800e0ca:	3401      	adds	r4, #1
 800e0cc:	9304      	str	r3, [sp, #16]
 800e0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d2:	4826      	ldr	r0, [pc, #152]	; (800e16c <_svfiprintf_r+0x1f0>)
 800e0d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0d8:	2206      	movs	r2, #6
 800e0da:	f7f2 f881 	bl	80001e0 <memchr>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	d038      	beq.n	800e154 <_svfiprintf_r+0x1d8>
 800e0e2:	4b23      	ldr	r3, [pc, #140]	; (800e170 <_svfiprintf_r+0x1f4>)
 800e0e4:	bb1b      	cbnz	r3, 800e12e <_svfiprintf_r+0x1b2>
 800e0e6:	9b03      	ldr	r3, [sp, #12]
 800e0e8:	3307      	adds	r3, #7
 800e0ea:	f023 0307 	bic.w	r3, r3, #7
 800e0ee:	3308      	adds	r3, #8
 800e0f0:	9303      	str	r3, [sp, #12]
 800e0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f4:	4433      	add	r3, r6
 800e0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0f8:	e767      	b.n	800dfca <_svfiprintf_r+0x4e>
 800e0fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0fe:	460c      	mov	r4, r1
 800e100:	2001      	movs	r0, #1
 800e102:	e7a5      	b.n	800e050 <_svfiprintf_r+0xd4>
 800e104:	2300      	movs	r3, #0
 800e106:	3401      	adds	r4, #1
 800e108:	9305      	str	r3, [sp, #20]
 800e10a:	4619      	mov	r1, r3
 800e10c:	f04f 0c0a 	mov.w	ip, #10
 800e110:	4620      	mov	r0, r4
 800e112:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e116:	3a30      	subs	r2, #48	; 0x30
 800e118:	2a09      	cmp	r2, #9
 800e11a:	d903      	bls.n	800e124 <_svfiprintf_r+0x1a8>
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d0c5      	beq.n	800e0ac <_svfiprintf_r+0x130>
 800e120:	9105      	str	r1, [sp, #20]
 800e122:	e7c3      	b.n	800e0ac <_svfiprintf_r+0x130>
 800e124:	fb0c 2101 	mla	r1, ip, r1, r2
 800e128:	4604      	mov	r4, r0
 800e12a:	2301      	movs	r3, #1
 800e12c:	e7f0      	b.n	800e110 <_svfiprintf_r+0x194>
 800e12e:	ab03      	add	r3, sp, #12
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	462a      	mov	r2, r5
 800e134:	4b0f      	ldr	r3, [pc, #60]	; (800e174 <_svfiprintf_r+0x1f8>)
 800e136:	a904      	add	r1, sp, #16
 800e138:	4638      	mov	r0, r7
 800e13a:	f7fb ff8d 	bl	800a058 <_printf_float>
 800e13e:	1c42      	adds	r2, r0, #1
 800e140:	4606      	mov	r6, r0
 800e142:	d1d6      	bne.n	800e0f2 <_svfiprintf_r+0x176>
 800e144:	89ab      	ldrh	r3, [r5, #12]
 800e146:	065b      	lsls	r3, r3, #25
 800e148:	f53f af2c 	bmi.w	800dfa4 <_svfiprintf_r+0x28>
 800e14c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e14e:	b01d      	add	sp, #116	; 0x74
 800e150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e154:	ab03      	add	r3, sp, #12
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	462a      	mov	r2, r5
 800e15a:	4b06      	ldr	r3, [pc, #24]	; (800e174 <_svfiprintf_r+0x1f8>)
 800e15c:	a904      	add	r1, sp, #16
 800e15e:	4638      	mov	r0, r7
 800e160:	f7fc fa1e 	bl	800a5a0 <_printf_i>
 800e164:	e7eb      	b.n	800e13e <_svfiprintf_r+0x1c2>
 800e166:	bf00      	nop
 800e168:	0800ec74 	.word	0x0800ec74
 800e16c:	0800ec7e 	.word	0x0800ec7e
 800e170:	0800a059 	.word	0x0800a059
 800e174:	0800dec5 	.word	0x0800dec5
 800e178:	0800ec7a 	.word	0x0800ec7a

0800e17c <_read_r>:
 800e17c:	b538      	push	{r3, r4, r5, lr}
 800e17e:	4d07      	ldr	r5, [pc, #28]	; (800e19c <_read_r+0x20>)
 800e180:	4604      	mov	r4, r0
 800e182:	4608      	mov	r0, r1
 800e184:	4611      	mov	r1, r2
 800e186:	2200      	movs	r2, #0
 800e188:	602a      	str	r2, [r5, #0]
 800e18a:	461a      	mov	r2, r3
 800e18c:	f7f3 fde6 	bl	8001d5c <_read>
 800e190:	1c43      	adds	r3, r0, #1
 800e192:	d102      	bne.n	800e19a <_read_r+0x1e>
 800e194:	682b      	ldr	r3, [r5, #0]
 800e196:	b103      	cbz	r3, 800e19a <_read_r+0x1e>
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	bd38      	pop	{r3, r4, r5, pc}
 800e19c:	20001e40 	.word	0x20001e40

0800e1a0 <nan>:
 800e1a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e1a8 <nan+0x8>
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	00000000 	.word	0x00000000
 800e1ac:	7ff80000 	.word	0x7ff80000

0800e1b0 <strncmp>:
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	b17a      	cbz	r2, 800e1d4 <strncmp+0x24>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	3901      	subs	r1, #1
 800e1b8:	1884      	adds	r4, r0, r2
 800e1ba:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e1be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e1c2:	4290      	cmp	r0, r2
 800e1c4:	d101      	bne.n	800e1ca <strncmp+0x1a>
 800e1c6:	42a3      	cmp	r3, r4
 800e1c8:	d101      	bne.n	800e1ce <strncmp+0x1e>
 800e1ca:	1a80      	subs	r0, r0, r2
 800e1cc:	bd10      	pop	{r4, pc}
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d1f3      	bne.n	800e1ba <strncmp+0xa>
 800e1d2:	e7fa      	b.n	800e1ca <strncmp+0x1a>
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	e7f9      	b.n	800e1cc <strncmp+0x1c>

0800e1d8 <__ascii_wctomb>:
 800e1d8:	b149      	cbz	r1, 800e1ee <__ascii_wctomb+0x16>
 800e1da:	2aff      	cmp	r2, #255	; 0xff
 800e1dc:	bf85      	ittet	hi
 800e1de:	238a      	movhi	r3, #138	; 0x8a
 800e1e0:	6003      	strhi	r3, [r0, #0]
 800e1e2:	700a      	strbls	r2, [r1, #0]
 800e1e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e1e8:	bf98      	it	ls
 800e1ea:	2001      	movls	r0, #1
 800e1ec:	4770      	bx	lr
 800e1ee:	4608      	mov	r0, r1
 800e1f0:	4770      	bx	lr
	...

0800e1f4 <__assert_func>:
 800e1f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1f6:	4614      	mov	r4, r2
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	4b09      	ldr	r3, [pc, #36]	; (800e220 <__assert_func+0x2c>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4605      	mov	r5, r0
 800e200:	68d8      	ldr	r0, [r3, #12]
 800e202:	b14c      	cbz	r4, 800e218 <__assert_func+0x24>
 800e204:	4b07      	ldr	r3, [pc, #28]	; (800e224 <__assert_func+0x30>)
 800e206:	9100      	str	r1, [sp, #0]
 800e208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e20c:	4906      	ldr	r1, [pc, #24]	; (800e228 <__assert_func+0x34>)
 800e20e:	462b      	mov	r3, r5
 800e210:	f000 f80e 	bl	800e230 <fiprintf>
 800e214:	f000 f9e2 	bl	800e5dc <abort>
 800e218:	4b04      	ldr	r3, [pc, #16]	; (800e22c <__assert_func+0x38>)
 800e21a:	461c      	mov	r4, r3
 800e21c:	e7f3      	b.n	800e206 <__assert_func+0x12>
 800e21e:	bf00      	nop
 800e220:	20000010 	.word	0x20000010
 800e224:	0800ec85 	.word	0x0800ec85
 800e228:	0800ec92 	.word	0x0800ec92
 800e22c:	0800ecc0 	.word	0x0800ecc0

0800e230 <fiprintf>:
 800e230:	b40e      	push	{r1, r2, r3}
 800e232:	b503      	push	{r0, r1, lr}
 800e234:	4601      	mov	r1, r0
 800e236:	ab03      	add	r3, sp, #12
 800e238:	4805      	ldr	r0, [pc, #20]	; (800e250 <fiprintf+0x20>)
 800e23a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e23e:	6800      	ldr	r0, [r0, #0]
 800e240:	9301      	str	r3, [sp, #4]
 800e242:	f000 f89b 	bl	800e37c <_vfiprintf_r>
 800e246:	b002      	add	sp, #8
 800e248:	f85d eb04 	ldr.w	lr, [sp], #4
 800e24c:	b003      	add	sp, #12
 800e24e:	4770      	bx	lr
 800e250:	20000010 	.word	0x20000010

0800e254 <_fstat_r>:
 800e254:	b538      	push	{r3, r4, r5, lr}
 800e256:	4d07      	ldr	r5, [pc, #28]	; (800e274 <_fstat_r+0x20>)
 800e258:	2300      	movs	r3, #0
 800e25a:	4604      	mov	r4, r0
 800e25c:	4608      	mov	r0, r1
 800e25e:	4611      	mov	r1, r2
 800e260:	602b      	str	r3, [r5, #0]
 800e262:	f7f3 fda4 	bl	8001dae <_fstat>
 800e266:	1c43      	adds	r3, r0, #1
 800e268:	d102      	bne.n	800e270 <_fstat_r+0x1c>
 800e26a:	682b      	ldr	r3, [r5, #0]
 800e26c:	b103      	cbz	r3, 800e270 <_fstat_r+0x1c>
 800e26e:	6023      	str	r3, [r4, #0]
 800e270:	bd38      	pop	{r3, r4, r5, pc}
 800e272:	bf00      	nop
 800e274:	20001e40 	.word	0x20001e40

0800e278 <_isatty_r>:
 800e278:	b538      	push	{r3, r4, r5, lr}
 800e27a:	4d06      	ldr	r5, [pc, #24]	; (800e294 <_isatty_r+0x1c>)
 800e27c:	2300      	movs	r3, #0
 800e27e:	4604      	mov	r4, r0
 800e280:	4608      	mov	r0, r1
 800e282:	602b      	str	r3, [r5, #0]
 800e284:	f7f3 fda3 	bl	8001dce <_isatty>
 800e288:	1c43      	adds	r3, r0, #1
 800e28a:	d102      	bne.n	800e292 <_isatty_r+0x1a>
 800e28c:	682b      	ldr	r3, [r5, #0]
 800e28e:	b103      	cbz	r3, 800e292 <_isatty_r+0x1a>
 800e290:	6023      	str	r3, [r4, #0]
 800e292:	bd38      	pop	{r3, r4, r5, pc}
 800e294:	20001e40 	.word	0x20001e40

0800e298 <memmove>:
 800e298:	4288      	cmp	r0, r1
 800e29a:	b510      	push	{r4, lr}
 800e29c:	eb01 0402 	add.w	r4, r1, r2
 800e2a0:	d902      	bls.n	800e2a8 <memmove+0x10>
 800e2a2:	4284      	cmp	r4, r0
 800e2a4:	4623      	mov	r3, r4
 800e2a6:	d807      	bhi.n	800e2b8 <memmove+0x20>
 800e2a8:	1e43      	subs	r3, r0, #1
 800e2aa:	42a1      	cmp	r1, r4
 800e2ac:	d008      	beq.n	800e2c0 <memmove+0x28>
 800e2ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2b6:	e7f8      	b.n	800e2aa <memmove+0x12>
 800e2b8:	4402      	add	r2, r0
 800e2ba:	4601      	mov	r1, r0
 800e2bc:	428a      	cmp	r2, r1
 800e2be:	d100      	bne.n	800e2c2 <memmove+0x2a>
 800e2c0:	bd10      	pop	{r4, pc}
 800e2c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2ca:	e7f7      	b.n	800e2bc <memmove+0x24>

0800e2cc <_realloc_r>:
 800e2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d0:	4680      	mov	r8, r0
 800e2d2:	4614      	mov	r4, r2
 800e2d4:	460e      	mov	r6, r1
 800e2d6:	b921      	cbnz	r1, 800e2e2 <_realloc_r+0x16>
 800e2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2dc:	4611      	mov	r1, r2
 800e2de:	f7fb bda7 	b.w	8009e30 <_malloc_r>
 800e2e2:	b92a      	cbnz	r2, 800e2f0 <_realloc_r+0x24>
 800e2e4:	f7ff fda2 	bl	800de2c <_free_r>
 800e2e8:	4625      	mov	r5, r4
 800e2ea:	4628      	mov	r0, r5
 800e2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f0:	f000 f97b 	bl	800e5ea <_malloc_usable_size_r>
 800e2f4:	4284      	cmp	r4, r0
 800e2f6:	4607      	mov	r7, r0
 800e2f8:	d802      	bhi.n	800e300 <_realloc_r+0x34>
 800e2fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2fe:	d812      	bhi.n	800e326 <_realloc_r+0x5a>
 800e300:	4621      	mov	r1, r4
 800e302:	4640      	mov	r0, r8
 800e304:	f7fb fd94 	bl	8009e30 <_malloc_r>
 800e308:	4605      	mov	r5, r0
 800e30a:	2800      	cmp	r0, #0
 800e30c:	d0ed      	beq.n	800e2ea <_realloc_r+0x1e>
 800e30e:	42bc      	cmp	r4, r7
 800e310:	4622      	mov	r2, r4
 800e312:	4631      	mov	r1, r6
 800e314:	bf28      	it	cs
 800e316:	463a      	movcs	r2, r7
 800e318:	f7fb fd53 	bl	8009dc2 <memcpy>
 800e31c:	4631      	mov	r1, r6
 800e31e:	4640      	mov	r0, r8
 800e320:	f7ff fd84 	bl	800de2c <_free_r>
 800e324:	e7e1      	b.n	800e2ea <_realloc_r+0x1e>
 800e326:	4635      	mov	r5, r6
 800e328:	e7df      	b.n	800e2ea <_realloc_r+0x1e>

0800e32a <__sfputc_r>:
 800e32a:	6893      	ldr	r3, [r2, #8]
 800e32c:	3b01      	subs	r3, #1
 800e32e:	2b00      	cmp	r3, #0
 800e330:	b410      	push	{r4}
 800e332:	6093      	str	r3, [r2, #8]
 800e334:	da08      	bge.n	800e348 <__sfputc_r+0x1e>
 800e336:	6994      	ldr	r4, [r2, #24]
 800e338:	42a3      	cmp	r3, r4
 800e33a:	db01      	blt.n	800e340 <__sfputc_r+0x16>
 800e33c:	290a      	cmp	r1, #10
 800e33e:	d103      	bne.n	800e348 <__sfputc_r+0x1e>
 800e340:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e344:	f7fd bc68 	b.w	800bc18 <__swbuf_r>
 800e348:	6813      	ldr	r3, [r2, #0]
 800e34a:	1c58      	adds	r0, r3, #1
 800e34c:	6010      	str	r0, [r2, #0]
 800e34e:	7019      	strb	r1, [r3, #0]
 800e350:	4608      	mov	r0, r1
 800e352:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <__sfputs_r>:
 800e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35a:	4606      	mov	r6, r0
 800e35c:	460f      	mov	r7, r1
 800e35e:	4614      	mov	r4, r2
 800e360:	18d5      	adds	r5, r2, r3
 800e362:	42ac      	cmp	r4, r5
 800e364:	d101      	bne.n	800e36a <__sfputs_r+0x12>
 800e366:	2000      	movs	r0, #0
 800e368:	e007      	b.n	800e37a <__sfputs_r+0x22>
 800e36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e36e:	463a      	mov	r2, r7
 800e370:	4630      	mov	r0, r6
 800e372:	f7ff ffda 	bl	800e32a <__sfputc_r>
 800e376:	1c43      	adds	r3, r0, #1
 800e378:	d1f3      	bne.n	800e362 <__sfputs_r+0xa>
 800e37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e37c <_vfiprintf_r>:
 800e37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e380:	460d      	mov	r5, r1
 800e382:	b09d      	sub	sp, #116	; 0x74
 800e384:	4614      	mov	r4, r2
 800e386:	4698      	mov	r8, r3
 800e388:	4606      	mov	r6, r0
 800e38a:	b118      	cbz	r0, 800e394 <_vfiprintf_r+0x18>
 800e38c:	6983      	ldr	r3, [r0, #24]
 800e38e:	b90b      	cbnz	r3, 800e394 <_vfiprintf_r+0x18>
 800e390:	f7fb fc52 	bl	8009c38 <__sinit>
 800e394:	4b89      	ldr	r3, [pc, #548]	; (800e5bc <_vfiprintf_r+0x240>)
 800e396:	429d      	cmp	r5, r3
 800e398:	d11b      	bne.n	800e3d2 <_vfiprintf_r+0x56>
 800e39a:	6875      	ldr	r5, [r6, #4]
 800e39c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e39e:	07d9      	lsls	r1, r3, #31
 800e3a0:	d405      	bmi.n	800e3ae <_vfiprintf_r+0x32>
 800e3a2:	89ab      	ldrh	r3, [r5, #12]
 800e3a4:	059a      	lsls	r2, r3, #22
 800e3a6:	d402      	bmi.n	800e3ae <_vfiprintf_r+0x32>
 800e3a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3aa:	f7fb fd08 	bl	8009dbe <__retarget_lock_acquire_recursive>
 800e3ae:	89ab      	ldrh	r3, [r5, #12]
 800e3b0:	071b      	lsls	r3, r3, #28
 800e3b2:	d501      	bpl.n	800e3b8 <_vfiprintf_r+0x3c>
 800e3b4:	692b      	ldr	r3, [r5, #16]
 800e3b6:	b9eb      	cbnz	r3, 800e3f4 <_vfiprintf_r+0x78>
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	4630      	mov	r0, r6
 800e3bc:	f7fd fc90 	bl	800bce0 <__swsetup_r>
 800e3c0:	b1c0      	cbz	r0, 800e3f4 <_vfiprintf_r+0x78>
 800e3c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3c4:	07dc      	lsls	r4, r3, #31
 800e3c6:	d50e      	bpl.n	800e3e6 <_vfiprintf_r+0x6a>
 800e3c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3cc:	b01d      	add	sp, #116	; 0x74
 800e3ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d2:	4b7b      	ldr	r3, [pc, #492]	; (800e5c0 <_vfiprintf_r+0x244>)
 800e3d4:	429d      	cmp	r5, r3
 800e3d6:	d101      	bne.n	800e3dc <_vfiprintf_r+0x60>
 800e3d8:	68b5      	ldr	r5, [r6, #8]
 800e3da:	e7df      	b.n	800e39c <_vfiprintf_r+0x20>
 800e3dc:	4b79      	ldr	r3, [pc, #484]	; (800e5c4 <_vfiprintf_r+0x248>)
 800e3de:	429d      	cmp	r5, r3
 800e3e0:	bf08      	it	eq
 800e3e2:	68f5      	ldreq	r5, [r6, #12]
 800e3e4:	e7da      	b.n	800e39c <_vfiprintf_r+0x20>
 800e3e6:	89ab      	ldrh	r3, [r5, #12]
 800e3e8:	0598      	lsls	r0, r3, #22
 800e3ea:	d4ed      	bmi.n	800e3c8 <_vfiprintf_r+0x4c>
 800e3ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3ee:	f7fb fce7 	bl	8009dc0 <__retarget_lock_release_recursive>
 800e3f2:	e7e9      	b.n	800e3c8 <_vfiprintf_r+0x4c>
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f8:	2320      	movs	r3, #32
 800e3fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800e402:	2330      	movs	r3, #48	; 0x30
 800e404:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e5c8 <_vfiprintf_r+0x24c>
 800e408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e40c:	f04f 0901 	mov.w	r9, #1
 800e410:	4623      	mov	r3, r4
 800e412:	469a      	mov	sl, r3
 800e414:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e418:	b10a      	cbz	r2, 800e41e <_vfiprintf_r+0xa2>
 800e41a:	2a25      	cmp	r2, #37	; 0x25
 800e41c:	d1f9      	bne.n	800e412 <_vfiprintf_r+0x96>
 800e41e:	ebba 0b04 	subs.w	fp, sl, r4
 800e422:	d00b      	beq.n	800e43c <_vfiprintf_r+0xc0>
 800e424:	465b      	mov	r3, fp
 800e426:	4622      	mov	r2, r4
 800e428:	4629      	mov	r1, r5
 800e42a:	4630      	mov	r0, r6
 800e42c:	f7ff ff94 	bl	800e358 <__sfputs_r>
 800e430:	3001      	adds	r0, #1
 800e432:	f000 80aa 	beq.w	800e58a <_vfiprintf_r+0x20e>
 800e436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e438:	445a      	add	r2, fp
 800e43a:	9209      	str	r2, [sp, #36]	; 0x24
 800e43c:	f89a 3000 	ldrb.w	r3, [sl]
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 80a2 	beq.w	800e58a <_vfiprintf_r+0x20e>
 800e446:	2300      	movs	r3, #0
 800e448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e44c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e450:	f10a 0a01 	add.w	sl, sl, #1
 800e454:	9304      	str	r3, [sp, #16]
 800e456:	9307      	str	r3, [sp, #28]
 800e458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e45c:	931a      	str	r3, [sp, #104]	; 0x68
 800e45e:	4654      	mov	r4, sl
 800e460:	2205      	movs	r2, #5
 800e462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e466:	4858      	ldr	r0, [pc, #352]	; (800e5c8 <_vfiprintf_r+0x24c>)
 800e468:	f7f1 feba 	bl	80001e0 <memchr>
 800e46c:	9a04      	ldr	r2, [sp, #16]
 800e46e:	b9d8      	cbnz	r0, 800e4a8 <_vfiprintf_r+0x12c>
 800e470:	06d1      	lsls	r1, r2, #27
 800e472:	bf44      	itt	mi
 800e474:	2320      	movmi	r3, #32
 800e476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e47a:	0713      	lsls	r3, r2, #28
 800e47c:	bf44      	itt	mi
 800e47e:	232b      	movmi	r3, #43	; 0x2b
 800e480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e484:	f89a 3000 	ldrb.w	r3, [sl]
 800e488:	2b2a      	cmp	r3, #42	; 0x2a
 800e48a:	d015      	beq.n	800e4b8 <_vfiprintf_r+0x13c>
 800e48c:	9a07      	ldr	r2, [sp, #28]
 800e48e:	4654      	mov	r4, sl
 800e490:	2000      	movs	r0, #0
 800e492:	f04f 0c0a 	mov.w	ip, #10
 800e496:	4621      	mov	r1, r4
 800e498:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e49c:	3b30      	subs	r3, #48	; 0x30
 800e49e:	2b09      	cmp	r3, #9
 800e4a0:	d94e      	bls.n	800e540 <_vfiprintf_r+0x1c4>
 800e4a2:	b1b0      	cbz	r0, 800e4d2 <_vfiprintf_r+0x156>
 800e4a4:	9207      	str	r2, [sp, #28]
 800e4a6:	e014      	b.n	800e4d2 <_vfiprintf_r+0x156>
 800e4a8:	eba0 0308 	sub.w	r3, r0, r8
 800e4ac:	fa09 f303 	lsl.w	r3, r9, r3
 800e4b0:	4313      	orrs	r3, r2
 800e4b2:	9304      	str	r3, [sp, #16]
 800e4b4:	46a2      	mov	sl, r4
 800e4b6:	e7d2      	b.n	800e45e <_vfiprintf_r+0xe2>
 800e4b8:	9b03      	ldr	r3, [sp, #12]
 800e4ba:	1d19      	adds	r1, r3, #4
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	9103      	str	r1, [sp, #12]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	bfbb      	ittet	lt
 800e4c4:	425b      	neglt	r3, r3
 800e4c6:	f042 0202 	orrlt.w	r2, r2, #2
 800e4ca:	9307      	strge	r3, [sp, #28]
 800e4cc:	9307      	strlt	r3, [sp, #28]
 800e4ce:	bfb8      	it	lt
 800e4d0:	9204      	strlt	r2, [sp, #16]
 800e4d2:	7823      	ldrb	r3, [r4, #0]
 800e4d4:	2b2e      	cmp	r3, #46	; 0x2e
 800e4d6:	d10c      	bne.n	800e4f2 <_vfiprintf_r+0x176>
 800e4d8:	7863      	ldrb	r3, [r4, #1]
 800e4da:	2b2a      	cmp	r3, #42	; 0x2a
 800e4dc:	d135      	bne.n	800e54a <_vfiprintf_r+0x1ce>
 800e4de:	9b03      	ldr	r3, [sp, #12]
 800e4e0:	1d1a      	adds	r2, r3, #4
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	9203      	str	r2, [sp, #12]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	bfb8      	it	lt
 800e4ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e4ee:	3402      	adds	r4, #2
 800e4f0:	9305      	str	r3, [sp, #20]
 800e4f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e5d8 <_vfiprintf_r+0x25c>
 800e4f6:	7821      	ldrb	r1, [r4, #0]
 800e4f8:	2203      	movs	r2, #3
 800e4fa:	4650      	mov	r0, sl
 800e4fc:	f7f1 fe70 	bl	80001e0 <memchr>
 800e500:	b140      	cbz	r0, 800e514 <_vfiprintf_r+0x198>
 800e502:	2340      	movs	r3, #64	; 0x40
 800e504:	eba0 000a 	sub.w	r0, r0, sl
 800e508:	fa03 f000 	lsl.w	r0, r3, r0
 800e50c:	9b04      	ldr	r3, [sp, #16]
 800e50e:	4303      	orrs	r3, r0
 800e510:	3401      	adds	r4, #1
 800e512:	9304      	str	r3, [sp, #16]
 800e514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e518:	482c      	ldr	r0, [pc, #176]	; (800e5cc <_vfiprintf_r+0x250>)
 800e51a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e51e:	2206      	movs	r2, #6
 800e520:	f7f1 fe5e 	bl	80001e0 <memchr>
 800e524:	2800      	cmp	r0, #0
 800e526:	d03f      	beq.n	800e5a8 <_vfiprintf_r+0x22c>
 800e528:	4b29      	ldr	r3, [pc, #164]	; (800e5d0 <_vfiprintf_r+0x254>)
 800e52a:	bb1b      	cbnz	r3, 800e574 <_vfiprintf_r+0x1f8>
 800e52c:	9b03      	ldr	r3, [sp, #12]
 800e52e:	3307      	adds	r3, #7
 800e530:	f023 0307 	bic.w	r3, r3, #7
 800e534:	3308      	adds	r3, #8
 800e536:	9303      	str	r3, [sp, #12]
 800e538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e53a:	443b      	add	r3, r7
 800e53c:	9309      	str	r3, [sp, #36]	; 0x24
 800e53e:	e767      	b.n	800e410 <_vfiprintf_r+0x94>
 800e540:	fb0c 3202 	mla	r2, ip, r2, r3
 800e544:	460c      	mov	r4, r1
 800e546:	2001      	movs	r0, #1
 800e548:	e7a5      	b.n	800e496 <_vfiprintf_r+0x11a>
 800e54a:	2300      	movs	r3, #0
 800e54c:	3401      	adds	r4, #1
 800e54e:	9305      	str	r3, [sp, #20]
 800e550:	4619      	mov	r1, r3
 800e552:	f04f 0c0a 	mov.w	ip, #10
 800e556:	4620      	mov	r0, r4
 800e558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e55c:	3a30      	subs	r2, #48	; 0x30
 800e55e:	2a09      	cmp	r2, #9
 800e560:	d903      	bls.n	800e56a <_vfiprintf_r+0x1ee>
 800e562:	2b00      	cmp	r3, #0
 800e564:	d0c5      	beq.n	800e4f2 <_vfiprintf_r+0x176>
 800e566:	9105      	str	r1, [sp, #20]
 800e568:	e7c3      	b.n	800e4f2 <_vfiprintf_r+0x176>
 800e56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e56e:	4604      	mov	r4, r0
 800e570:	2301      	movs	r3, #1
 800e572:	e7f0      	b.n	800e556 <_vfiprintf_r+0x1da>
 800e574:	ab03      	add	r3, sp, #12
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	462a      	mov	r2, r5
 800e57a:	4b16      	ldr	r3, [pc, #88]	; (800e5d4 <_vfiprintf_r+0x258>)
 800e57c:	a904      	add	r1, sp, #16
 800e57e:	4630      	mov	r0, r6
 800e580:	f7fb fd6a 	bl	800a058 <_printf_float>
 800e584:	4607      	mov	r7, r0
 800e586:	1c78      	adds	r0, r7, #1
 800e588:	d1d6      	bne.n	800e538 <_vfiprintf_r+0x1bc>
 800e58a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e58c:	07d9      	lsls	r1, r3, #31
 800e58e:	d405      	bmi.n	800e59c <_vfiprintf_r+0x220>
 800e590:	89ab      	ldrh	r3, [r5, #12]
 800e592:	059a      	lsls	r2, r3, #22
 800e594:	d402      	bmi.n	800e59c <_vfiprintf_r+0x220>
 800e596:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e598:	f7fb fc12 	bl	8009dc0 <__retarget_lock_release_recursive>
 800e59c:	89ab      	ldrh	r3, [r5, #12]
 800e59e:	065b      	lsls	r3, r3, #25
 800e5a0:	f53f af12 	bmi.w	800e3c8 <_vfiprintf_r+0x4c>
 800e5a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5a6:	e711      	b.n	800e3cc <_vfiprintf_r+0x50>
 800e5a8:	ab03      	add	r3, sp, #12
 800e5aa:	9300      	str	r3, [sp, #0]
 800e5ac:	462a      	mov	r2, r5
 800e5ae:	4b09      	ldr	r3, [pc, #36]	; (800e5d4 <_vfiprintf_r+0x258>)
 800e5b0:	a904      	add	r1, sp, #16
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f7fb fff4 	bl	800a5a0 <_printf_i>
 800e5b8:	e7e4      	b.n	800e584 <_vfiprintf_r+0x208>
 800e5ba:	bf00      	nop
 800e5bc:	0800e83c 	.word	0x0800e83c
 800e5c0:	0800e85c 	.word	0x0800e85c
 800e5c4:	0800e81c 	.word	0x0800e81c
 800e5c8:	0800ec74 	.word	0x0800ec74
 800e5cc:	0800ec7e 	.word	0x0800ec7e
 800e5d0:	0800a059 	.word	0x0800a059
 800e5d4:	0800e359 	.word	0x0800e359
 800e5d8:	0800ec7a 	.word	0x0800ec7a

0800e5dc <abort>:
 800e5dc:	b508      	push	{r3, lr}
 800e5de:	2006      	movs	r0, #6
 800e5e0:	f000 f834 	bl	800e64c <raise>
 800e5e4:	2001      	movs	r0, #1
 800e5e6:	f7f3 fbaf 	bl	8001d48 <_exit>

0800e5ea <_malloc_usable_size_r>:
 800e5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5ee:	1f18      	subs	r0, r3, #4
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	bfbc      	itt	lt
 800e5f4:	580b      	ldrlt	r3, [r1, r0]
 800e5f6:	18c0      	addlt	r0, r0, r3
 800e5f8:	4770      	bx	lr

0800e5fa <_raise_r>:
 800e5fa:	291f      	cmp	r1, #31
 800e5fc:	b538      	push	{r3, r4, r5, lr}
 800e5fe:	4604      	mov	r4, r0
 800e600:	460d      	mov	r5, r1
 800e602:	d904      	bls.n	800e60e <_raise_r+0x14>
 800e604:	2316      	movs	r3, #22
 800e606:	6003      	str	r3, [r0, #0]
 800e608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e60c:	bd38      	pop	{r3, r4, r5, pc}
 800e60e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e610:	b112      	cbz	r2, 800e618 <_raise_r+0x1e>
 800e612:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e616:	b94b      	cbnz	r3, 800e62c <_raise_r+0x32>
 800e618:	4620      	mov	r0, r4
 800e61a:	f000 f831 	bl	800e680 <_getpid_r>
 800e61e:	462a      	mov	r2, r5
 800e620:	4601      	mov	r1, r0
 800e622:	4620      	mov	r0, r4
 800e624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e628:	f000 b818 	b.w	800e65c <_kill_r>
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d00a      	beq.n	800e646 <_raise_r+0x4c>
 800e630:	1c59      	adds	r1, r3, #1
 800e632:	d103      	bne.n	800e63c <_raise_r+0x42>
 800e634:	2316      	movs	r3, #22
 800e636:	6003      	str	r3, [r0, #0]
 800e638:	2001      	movs	r0, #1
 800e63a:	e7e7      	b.n	800e60c <_raise_r+0x12>
 800e63c:	2400      	movs	r4, #0
 800e63e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e642:	4628      	mov	r0, r5
 800e644:	4798      	blx	r3
 800e646:	2000      	movs	r0, #0
 800e648:	e7e0      	b.n	800e60c <_raise_r+0x12>
	...

0800e64c <raise>:
 800e64c:	4b02      	ldr	r3, [pc, #8]	; (800e658 <raise+0xc>)
 800e64e:	4601      	mov	r1, r0
 800e650:	6818      	ldr	r0, [r3, #0]
 800e652:	f7ff bfd2 	b.w	800e5fa <_raise_r>
 800e656:	bf00      	nop
 800e658:	20000010 	.word	0x20000010

0800e65c <_kill_r>:
 800e65c:	b538      	push	{r3, r4, r5, lr}
 800e65e:	4d07      	ldr	r5, [pc, #28]	; (800e67c <_kill_r+0x20>)
 800e660:	2300      	movs	r3, #0
 800e662:	4604      	mov	r4, r0
 800e664:	4608      	mov	r0, r1
 800e666:	4611      	mov	r1, r2
 800e668:	602b      	str	r3, [r5, #0]
 800e66a:	f7f3 fb5d 	bl	8001d28 <_kill>
 800e66e:	1c43      	adds	r3, r0, #1
 800e670:	d102      	bne.n	800e678 <_kill_r+0x1c>
 800e672:	682b      	ldr	r3, [r5, #0]
 800e674:	b103      	cbz	r3, 800e678 <_kill_r+0x1c>
 800e676:	6023      	str	r3, [r4, #0]
 800e678:	bd38      	pop	{r3, r4, r5, pc}
 800e67a:	bf00      	nop
 800e67c:	20001e40 	.word	0x20001e40

0800e680 <_getpid_r>:
 800e680:	f7f3 bb4a 	b.w	8001d18 <_getpid>

0800e684 <_init>:
 800e684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e686:	bf00      	nop
 800e688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e68a:	bc08      	pop	{r3}
 800e68c:	469e      	mov	lr, r3
 800e68e:	4770      	bx	lr

0800e690 <_fini>:
 800e690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e692:	bf00      	nop
 800e694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e696:	bc08      	pop	{r3}
 800e698:	469e      	mov	lr, r3
 800e69a:	4770      	bx	lr
