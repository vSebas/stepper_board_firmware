
stepper_boards.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f4a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  0800f638  0800f638  0001f638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcc4  0800fcc4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcc4  0800fcc4  0001fcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fccc  0800fccc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fccc  0800fccc  0001fccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcd0  0800fcd0  0001fcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800fcd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c38  200001ec  0800fec0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e24  0800fec0  00021e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029377  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dd2  00000000  00000000  00049593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  0004e368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002a479  00000000  00000000  000500b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002289f  00000000  00000000  0007a529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f2eb8  00000000  00000000  0009cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0018fc80  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001b20  00000000  00000000  0018fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008fe4  00000000  00000000  001917f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f61c 	.word	0x0800f61c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800f61c 	.word	0x0800f61c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <can_parse_msg>:

#include "Vanttec_CANLib/CANMessage.h"

extern volatile uint8_t g_sendPing;

void can_parse_msg(CAN_RxHeaderTypeDef *header, uint8_t *data){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	if(data == NULL) return;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d02f      	beq.n	8001068 <can_parse_msg+0x70>

	uint8_t id = can_parse_id(data, header->DLC);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	691b      	ldr	r3, [r3, #16]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4619      	mov	r1, r3
 8001010:	6838      	ldr	r0, [r7, #0]
 8001012:	f009 fc4d 	bl	800a8b0 <can_parse_id>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
	if(id >= MOTOR_ID_START && id <= MOTOR_ID_END){
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b14      	cmp	r3, #20
 800101e:	d913      	bls.n	8001048 <can_parse_msg+0x50>
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	2b17      	cmp	r3, #23
 8001024:	d810      	bhi.n	8001048 <can_parse_msg+0x50>
		//Motor msg
		float set = can_parse_float(data, header->DLC);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4619      	mov	r1, r3
 800102e:	6838      	ldr	r0, [r7, #0]
 8001030:	f009 fc72 	bl	800a918 <can_parse_float>
 8001034:	ed87 0a02 	vstr	s0, [r7, #8]
		can_rx_data.motorSetpoints[id - MOTOR_ID_START] = set;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	3b15      	subs	r3, #21
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <can_parse_msg+0x78>)
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	601a      	str	r2, [r3, #0]
	if(id >= MOTOR_ID_START && id <= MOTOR_ID_END){
 8001046:	e010      	b.n	800106a <can_parse_msg+0x72>
	} else if(id == JETSON_HEARTBEAT_ID) {
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b1e      	cmp	r3, #30
 800104c:	d105      	bne.n	800105a <can_parse_msg+0x62>
		//Jetson heartbeat
		can_rx_data.jetsonHBTick = HAL_GetTick();
 800104e:	f001 f997 	bl	8002380 <HAL_GetTick>
 8001052:	4603      	mov	r3, r0
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <can_parse_msg+0x78>)
 8001056:	6093      	str	r3, [r2, #8]
 8001058:	e007      	b.n	800106a <can_parse_msg+0x72>
	} else if(id == PING_ID){
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	2b1f      	cmp	r3, #31
 800105e:	d104      	bne.n	800106a <can_parse_msg+0x72>
		g_sendPing = 1;
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <can_parse_msg+0x7c>)
 8001062:	2201      	movs	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e000      	b.n	800106a <can_parse_msg+0x72>
	if(data == NULL) return;
 8001068:	bf00      	nop
	}
}
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000208 	.word	0x20000208
 8001074:	2000021c 	.word	0x2000021c

08001078 <queue_can_msg_byte>:
	memcpy(buf + 1, str + i, len % 7);
	buf[0] = len % 7;
	osMessageQueuePut(debugMessageQueue, buf, 1, 10);
}

void queue_can_msg_byte(uint8_t id, uint8_t data){
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	71bb      	strb	r3, [r7, #6]
	CAN_TX_QUEUE_OBJ out;
	out.msg_size = can_pack_byte(id, data, out.buf, sizeof(out.buf));
 8001088:	79f8      	ldrb	r0, [r7, #7]
 800108a:	79b9      	ldrb	r1, [r7, #6]
 800108c:	f107 0208 	add.w	r2, r7, #8
 8001090:	2308      	movs	r3, #8
 8001092:	f009 fc23 	bl	800a8dc <can_pack_byte>
 8001096:	4603      	mov	r3, r0
 8001098:	b2db      	uxtb	r3, r3
 800109a:	743b      	strb	r3, [r7, #16]
	osStatus_t ret = osMessageQueuePut(txMessageQueue, &out, 0, 10);
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <queue_can_msg_byte+0x40>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	f107 0108 	add.w	r1, r7, #8
 80010a4:	230a      	movs	r3, #10
 80010a6:	2200      	movs	r2, #0
 80010a8:	f006 fc58 	bl	800795c <osMessageQueuePut>
 80010ac:	6178      	str	r0, [r7, #20]
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000218 	.word	0x20000218

080010bc <queue_can_msg_short>:
	CAN_TX_QUEUE_OBJ out;
	out.msg_size = can_pack_long(id, data, out.buf, sizeof(out.buf));
	osMessageQueuePut(txMessageQueue, &out, 0, 10);
}

void queue_can_msg_short(uint8_t id, uint16_t data){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80bb      	strh	r3, [r7, #4]
	CAN_TX_QUEUE_OBJ out;
	out.msg_size = can_pack_short(id, data, out.buf, sizeof(out.buf));
 80010cc:	79f8      	ldrb	r0, [r7, #7]
 80010ce:	88b9      	ldrh	r1, [r7, #4]
 80010d0:	f107 020c 	add.w	r2, r7, #12
 80010d4:	2308      	movs	r3, #8
 80010d6:	f009 fc41 	bl	800a95c <can_pack_short>
 80010da:	4603      	mov	r3, r0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	753b      	strb	r3, [r7, #20]
	osMessageQueuePut(txMessageQueue, &out, 0, 10);
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <queue_can_msg_short+0x3c>)
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f107 010c 	add.w	r1, r7, #12
 80010e8:	230a      	movs	r3, #10
 80010ea:	2200      	movs	r2, #0
 80010ec:	f006 fc36 	bl	800795c <osMessageQueuePut>
}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000218 	.word	0x20000218

080010fc <can_hb_tx_task>:
  .name = "pingMsgTx",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

static void can_hb_tx_task(void *param){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	for(;;){
		queue_can_msg_short(HEARTBEAT_ID, HAL_GetTick());
 8001104:	f001 f93c 	bl	8002380 <HAL_GetTick>
 8001108:	4603      	mov	r3, r0
 800110a:	b29b      	uxth	r3, r3
 800110c:	4619      	mov	r1, r3
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff ffd4 	bl	80010bc <queue_can_msg_short>
		osDelay(HEARTBEAT_DELAY);
 8001114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001118:	f006 fa78 	bl	800760c <osDelay>
		queue_can_msg_short(HEARTBEAT_ID, HAL_GetTick());
 800111c:	e7f2      	b.n	8001104 <can_hb_tx_task+0x8>
	...

08001120 <can_init>:
  .priority = (osPriority_t) osPriorityNormal,
};
*/


void can_init(){
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef filter;
	filter.FilterActivation = CAN_FILTER_ENABLE;
 8001126:	2301      	movs	r3, #1
 8001128:	623b      	str	r3, [r7, #32]
	filter.FilterBank = 0;		// Specify filter bank to use
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
	filter.FilterFIFOAssignment = CAN_FILTER_FIFO0; //Incoming data is saved here
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
	filter.FilterIdHigh = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
	filter.FilterIdLow = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
	filter.FilterMaskIdHigh= 0;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
	filter.FilterMaskIdLow = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
	filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
	filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001146:	2301      	movs	r3, #1
 8001148:	61fb      	str	r3, [r7, #28]
	filter.SlaveStartFilterBank = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1, &filter) != HAL_OK) Error_Handler();
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	481c      	ldr	r0, [pc, #112]	; (80011c4 <can_init+0xa4>)
 8001154:	f002 f8cf 	bl	80032f6 <HAL_CAN_ConfigFilter>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <can_init+0x42>
 800115e:	f000 fcf9 	bl	8001b54 <Error_Handler>

	if(HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
 8001162:	4818      	ldr	r0, [pc, #96]	; (80011c4 <can_init+0xa4>)
 8001164:	f002 f991 	bl	800348a <HAL_CAN_Start>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <can_init+0x52>
 800116e:	f000 fcf1 	bl	8001b54 <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001172:	2102      	movs	r1, #2
 8001174:	4813      	ldr	r0, [pc, #76]	; (80011c4 <can_init+0xa4>)
 8001176:	f002 fbd6 	bl	8003926 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING);
 800117a:	2110      	movs	r1, #16
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <can_init+0xa4>)
 800117e:	f002 fbd2 	bl	8003926 <HAL_CAN_ActivateNotification>

	//Initialize queues
	//First char -> size
	debugMessageQueue = osMessageQueueNew(64, 8, NULL);
 8001182:	2200      	movs	r2, #0
 8001184:	2108      	movs	r1, #8
 8001186:	2040      	movs	r0, #64	; 0x40
 8001188:	f006 fb75 	bl	8007876 <osMessageQueueNew>
 800118c:	4603      	mov	r3, r0
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <can_init+0xa8>)
 8001190:	6013      	str	r3, [r2, #0]
	if(debugMessageQueue == NULL)
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <can_init+0xa8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <can_init+0x7e>
		Error_Handler();
 800119a:	f000 fcdb 	bl	8001b54 <Error_Handler>

	txMessageQueue = osMessageQueueNew(64, sizeof(CAN_TX_QUEUE_OBJ), NULL);
 800119e:	2200      	movs	r2, #0
 80011a0:	2109      	movs	r1, #9
 80011a2:	2040      	movs	r0, #64	; 0x40
 80011a4:	f006 fb67 	bl	8007876 <osMessageQueueNew>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <can_init+0xac>)
 80011ac:	6013      	str	r3, [r2, #0]
	if(txMessageQueue == NULL)
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <can_init+0xac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <can_init+0x9a>
		Error_Handler();
 80011b6:	f000 fccd 	bl	8001b54 <Error_Handler>
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000284 	.word	0x20000284
 80011c8:	20000214 	.word	0x20000214
 80011cc:	20000218 	.word	0x20000218

080011d0 <can_tx_task>:

void can_tx_task(void * params){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	for(;;){
		can_tx_update();
 80011d8:	f000 f806 	bl	80011e8 <can_tx_update>

		osDelay(can_tx_task_delay);
 80011dc:	2305      	movs	r3, #5
 80011de:	4618      	mov	r0, r3
 80011e0:	f006 fa14 	bl	800760c <osDelay>
		can_tx_update();
 80011e4:	e7f8      	b.n	80011d8 <can_tx_task+0x8>
	...

080011e8 <can_tx_update>:
	}
}

void can_tx_update(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;
	txHeader.IDE = CAN_ID_STD;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
	txHeader.StdId = 0x111;
 80011f2:	f240 1311 	movw	r3, #273	; 0x111
 80011f6:	617b      	str	r3, [r7, #20]
	txHeader.RTR = CAN_RTR_DATA;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]

	CAN_TX_QUEUE_OBJ txOut;

	while(osMessageQueueGet(txMessageQueue, &txOut, NULL, 0) == osOK){
 80011fc:	e013      	b.n	8001226 <can_tx_update+0x3e>
		txHeader.DLC = txOut.msg_size;
 80011fe:	7b3b      	ldrb	r3, [r7, #12]
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_StatusTypeDef ret = HAL_CAN_AddTxMessage(&hcan1, &txHeader, txOut.buf, &txMailbox);
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	1d3a      	adds	r2, r7, #4
 8001208:	f107 0114 	add.w	r1, r7, #20
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <can_tx_update+0x5c>)
 800120e:	f002 f980 	bl	8003512 <HAL_CAN_AddTxMessage>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(ret != HAL_OK){
 8001218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800121c:	2b00      	cmp	r3, #0
 800121e:	d002      	beq.n	8001226 <can_tx_update+0x3e>
			txHeader.DLC++;
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	3301      	adds	r3, #1
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
	while(osMessageQueueGet(txMessageQueue, &txOut, NULL, 0) == osOK){
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <can_tx_update+0x60>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	1d39      	adds	r1, r7, #4
 800122c:	2300      	movs	r3, #0
 800122e:	2200      	movs	r2, #0
 8001230:	f006 fbf4 	bl	8007a1c <osMessageQueueGet>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0e1      	beq.n	80011fe <can_tx_update+0x16>
		}
	}
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3730      	adds	r7, #48	; 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000284 	.word	0x20000284
 8001248:	20000218 	.word	0x20000218

0800124c <can_rx_task>:

void can_rx_task(void *params){
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	for(;;){
		can_rx_update();
 8001254:	f000 f806 	bl	8001264 <can_rx_update>
		osDelay(can_rx_task_delay);
 8001258:	2305      	movs	r3, #5
 800125a:	4618      	mov	r0, r3
 800125c:	f006 f9d6 	bl	800760c <osDelay>
		can_rx_update();
 8001260:	e7f8      	b.n	8001254 <can_rx_task+0x8>
	...

08001264 <can_rx_update>:
	}
}

void can_rx_update(){
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
	//TODO check both FIFO?
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t buf[8];
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
 800126a:	e015      	b.n	8001298 <can_rx_update+0x34>
		HAL_StatusTypeDef ret = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxHeader, buf);
 800126c:	463b      	mov	r3, r7
 800126e:	f107 0208 	add.w	r2, r7, #8
 8001272:	2100      	movs	r1, #0
 8001274:	481d      	ldr	r0, [pc, #116]	; (80012ec <can_rx_update+0x88>)
 8001276:	f002 fa1c 	bl	80036b2 <HAL_CAN_GetRxMessage>
 800127a:	4603      	mov	r3, r0
 800127c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(ret != HAL_OK) continue;
 8001280:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001284:	2b00      	cmp	r3, #0
 8001286:	d000      	beq.n	800128a <can_rx_update+0x26>
 8001288:	e006      	b.n	8001298 <can_rx_update+0x34>
		//Parse can message
		can_parse_msg(&rxHeader, buf);
 800128a:	463a      	mov	r2, r7
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff feb0 	bl	8000ff8 <can_parse_msg>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
 8001298:	2100      	movs	r1, #0
 800129a:	4814      	ldr	r0, [pc, #80]	; (80012ec <can_rx_update+0x88>)
 800129c:	f002 fb1b 	bl	80038d6 <HAL_CAN_GetRxFifoFillLevel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1e2      	bne.n	800126c <can_rx_update+0x8>
	}
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) != 0){
 80012a6:	e015      	b.n	80012d4 <can_rx_update+0x70>
			HAL_StatusTypeDef ret = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO1, &rxHeader, buf);
 80012a8:	463b      	mov	r3, r7
 80012aa:	f107 0208 	add.w	r2, r7, #8
 80012ae:	2101      	movs	r1, #1
 80012b0:	480e      	ldr	r0, [pc, #56]	; (80012ec <can_rx_update+0x88>)
 80012b2:	f002 f9fe 	bl	80036b2 <HAL_CAN_GetRxMessage>
 80012b6:	4603      	mov	r3, r0
 80012b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(ret != HAL_OK) continue;
 80012bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d000      	beq.n	80012c6 <can_rx_update+0x62>
 80012c4:	e006      	b.n	80012d4 <can_rx_update+0x70>
			//Parse can message
			can_parse_msg(&rxHeader, buf);
 80012c6:	463a      	mov	r2, r7
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fe92 	bl	8000ff8 <can_parse_msg>
	while(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO1) != 0){
 80012d4:	2101      	movs	r1, #1
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <can_rx_update+0x88>)
 80012d8:	f002 fafd 	bl	80038d6 <HAL_CAN_GetRxFifoFillLevel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1e2      	bne.n	80012a8 <can_rx_update+0x44>
		}
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	3728      	adds	r7, #40	; 0x28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000284 	.word	0x20000284

080012f0 <can_send_ping_task>:

static void can_send_ping_task(void * param){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	for(;;){
		if(g_sendPing == 1){
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <can_send_ping_task+0x2c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d106      	bne.n	8001310 <can_send_ping_task+0x20>
			queue_can_msg_byte(PING_ID, 0);
 8001302:	2100      	movs	r1, #0
 8001304:	201f      	movs	r0, #31
 8001306:	f7ff feb7 	bl	8001078 <queue_can_msg_byte>
			g_sendPing = 0;
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <can_send_ping_task+0x2c>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
		}

		osDelay(1000);
 8001310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001314:	f006 f97a 	bl	800760c <osDelay>
		if(g_sendPing == 1){
 8001318:	e7ee      	b.n	80012f8 <can_send_ping_task+0x8>
 800131a:	bf00      	nop
 800131c:	2000021c 	.word	0x2000021c

08001320 <start_can_tasks>:
		osDelay(1000);
	}
}
*/

void start_can_tasks(){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	osThreadNew(can_hb_tx_task, NULL, &hbTask_attributes);
 8001324:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <start_can_tasks+0x30>)
 8001326:	2100      	movs	r1, #0
 8001328:	480a      	ldr	r0, [pc, #40]	; (8001354 <start_can_tasks+0x34>)
 800132a:	f006 f8dd 	bl	80074e8 <osThreadNew>
	//osThreadNew(can_sbus_tx_task, NULL, &sbusTask_attributes);
	//osThreadNew(can_debug_msg_tx_task, NULL, &debugMsgTask_attributes);
	osThreadNew(can_send_ping_task, NULL, &pingTask_attributes);
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <start_can_tasks+0x38>)
 8001330:	2100      	movs	r1, #0
 8001332:	480a      	ldr	r0, [pc, #40]	; (800135c <start_can_tasks+0x3c>)
 8001334:	f006 f8d8 	bl	80074e8 <osThreadNew>
	//osThreadNew(can_battery_monitor_task, NULL, &batteryTask_attributes);
	//osThreadNew(debug_vars_task, NULL, &debugVarsTask_attributes);
	osThreadNew(can_rx_task, NULL, &canRxTask_attributes);
 8001338:	4a09      	ldr	r2, [pc, #36]	; (8001360 <start_can_tasks+0x40>)
 800133a:	2100      	movs	r1, #0
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <start_can_tasks+0x44>)
 800133e:	f006 f8d3 	bl	80074e8 <osThreadNew>
	osThreadNew(can_tx_task, NULL, &canTxTask_attributes);
 8001342:	4a09      	ldr	r2, [pc, #36]	; (8001368 <start_can_tasks+0x48>)
 8001344:	2100      	movs	r1, #0
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <start_can_tasks+0x4c>)
 8001348:	f006 f8ce 	bl	80074e8 <osThreadNew>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	0800f720 	.word	0x0800f720
 8001354:	080010fd 	.word	0x080010fd
 8001358:	0800f744 	.word	0x0800f744
 800135c:	080012f1 	.word	0x080012f1
 8001360:	0800f6d8 	.word	0x0800f6d8
 8001364:	0800124d 	.word	0x0800124d
 8001368:	0800f6fc 	.word	0x0800f6fc
 800136c:	080011d1 	.word	0x080011d1

08001370 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	/*
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
	DWT->CTRL |= 1;
	DWT->CYCCNT = 0;
	*/
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
//return DWT->CYCCNT;
	return 0;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001396:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800139a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d013      	beq.n	80013ce <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013aa:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013ae:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00b      	beq.n	80013ce <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013b6:	e000      	b.n	80013ba <ITM_SendChar+0x2c>
    {
      __NOP();
 80013b8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f9      	beq.n	80013b8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	e009      	b.n	8001402 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	60ba      	str	r2, [r7, #8]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ffc9 	bl	800138e <ITM_SendChar>
	for(int i=0; i<len; i++)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	3301      	adds	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	dbf1      	blt.n	80013ee <_write+0x12>
	}
	return len;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3718      	adds	r7, #24
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001418:	f000 ff85 	bl	8002326 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800141c:	f000 f864 	bl	80014e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001420:	f000 faaa 	bl	8001978 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001424:	f000 fa78 	bl	8001918 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001428:	f000 f9f6 	bl	8001818 <MX_TIM2_Init>
  MX_TIM1_Init();
 800142c:	f000 f948 	bl	80016c0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001430:	f000 f8aa 	bl	8001588 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001434:	f000 f90c 	bl	8001650 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // Debug
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	210f      	movs	r1, #15
 800143c:	481b      	ldr	r0, [pc, #108]	; (80014ac <main+0x98>)
 800143e:	f002 ff2d 	bl	800429c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_SET);

  // Stepper 1
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2104      	movs	r1, #4
 8001446:	481a      	ldr	r0, [pc, #104]	; (80014b0 <main+0x9c>)
 8001448:	f002 ff28 	bl	800429c <HAL_GPIO_WritePin>
	  Error_Handler();
  }

*/

  TIM1->CCR1 = 50;
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <main+0xa0>)
 800144e:	2232      	movs	r2, #50	; 0x32
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001452:	2100      	movs	r1, #0
 8001454:	4818      	ldr	r0, [pc, #96]	; (80014b8 <main+0xa4>)
 8001456:	f004 fa37 	bl	80058c8 <HAL_TIM_PWM_Start>
   */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800145a:	f005 fffb 	bl	8007454 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of canRxSem */
  canRxSemHandle = osSemaphoreNew(1, 1, &canRxSem_attributes);
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <main+0xa8>)
 8001460:	2101      	movs	r1, #1
 8001462:	2001      	movs	r0, #1
 8001464:	f006 f97e 	bl	8007764 <osSemaphoreNew>
 8001468:	4603      	mov	r3, r0
 800146a:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <main+0xac>)
 800146c:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of periodicTimer */
  periodicTimerHandle = osTimerNew(PeriodicTimerCallback, osTimerPeriodic, NULL, &periodicTimer_attributes);
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <main+0xb0>)
 8001470:	2200      	movs	r2, #0
 8001472:	2101      	movs	r1, #1
 8001474:	4814      	ldr	r0, [pc, #80]	; (80014c8 <main+0xb4>)
 8001476:	f006 f8f9 	bl	800766c <osTimerNew>
 800147a:	4603      	mov	r3, r0
 800147c:	4a13      	ldr	r2, [pc, #76]	; (80014cc <main+0xb8>)
 800147e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  start_can_tasks();
 8001480:	f7ff ff4e 	bl	8001320 <start_can_tasks>

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(led_task, NULL, &ledTask_attributes);
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <main+0xbc>)
 8001486:	2100      	movs	r1, #0
 8001488:	4812      	ldr	r0, [pc, #72]	; (80014d4 <main+0xc0>)
 800148a:	f006 f82d 	bl	80074e8 <osThreadNew>
 800148e:	4603      	mov	r3, r0
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <main+0xc4>)
 8001492:	6013      	str	r3, [r2, #0]

  /* creation of steeringTaskPWM */
  steeringTaskPWMHandle = osThreadNew(steering_task_pwm, NULL, &steeringTaskPWM_attributes);
 8001494:	4a11      	ldr	r2, [pc, #68]	; (80014dc <main+0xc8>)
 8001496:	2100      	movs	r1, #0
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <main+0xcc>)
 800149a:	f006 f825 	bl	80074e8 <osThreadNew>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <main+0xd0>)
 80014a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014a4:	f005 fffa 	bl	800749c <osKernelStart>
  GPIO_PinState FAULT_2;
  */

  //HAL_UART_Transmit(&huart1, dataT, 14, HAL_MAX_DELAY);

  while (1)
 80014a8:	e7fe      	b.n	80014a8 <main+0x94>
 80014aa:	bf00      	nop
 80014ac:	48000800 	.word	0x48000800
 80014b0:	48000c00 	.word	0x48000c00
 80014b4:	40012c00 	.word	0x40012c00
 80014b8:	200002ac 	.word	0x200002ac
 80014bc:	0800f7c4 	.word	0x0800f7c4
 80014c0:	200003d4 	.word	0x200003d4
 80014c4:	0800f7b4 	.word	0x0800f7b4
 80014c8:	08001b15 	.word	0x08001b15
 80014cc:	200003d0 	.word	0x200003d0
 80014d0:	0800f76c 	.word	0x0800f76c
 80014d4:	08001af9 	.word	0x08001af9
 80014d8:	200003c8 	.word	0x200003c8
 80014dc:	0800f790 	.word	0x0800f790
 80014e0:	08002201 	.word	0x08002201
 80014e4:	200003cc 	.word	0x200003cc

080014e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b096      	sub	sp, #88	; 0x58
 80014ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2244      	movs	r2, #68	; 0x44
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f009 fcb3 	bl	800ae62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800150a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800150e:	f002 ff05 	bl	800431c <HAL_PWREx_ControlVoltageScaling>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001518:	f000 fb1c 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800151c:	2301      	movs	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001524:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001526:	2302      	movs	r3, #2
 8001528:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152a:	2303      	movs	r3, #3
 800152c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800152e:	2301      	movs	r3, #1
 8001530:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001532:	2314      	movs	r3, #20
 8001534:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001536:	2307      	movs	r3, #7
 8001538:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800153a:	2302      	movs	r3, #2
 800153c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800153e:	2304      	movs	r3, #4
 8001540:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4618      	mov	r0, r3
 8001548:	f002 ff3e 	bl	80043c8 <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001552:	f000 faff 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2303      	movs	r3, #3
 800155c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800156a:	463b      	mov	r3, r7
 800156c:	2104      	movs	r1, #4
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fb3e 	bl	8004bf0 <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800157a:	f000 faeb 	bl	8001b54 <Error_Handler>
  }
}
 800157e:	bf00      	nop
 8001580:	3758      	adds	r7, #88	; 0x58
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158e:	463b      	mov	r3, r7
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015a0:	4a29      	ldr	r2, [pc, #164]	; (8001648 <MX_ADC1_Init+0xc0>)
 80015a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015be:	2204      	movs	r2, #4
 80015c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_ADC1_Init+0xbc>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015fe:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_ADC1_Init+0xbc>)
 8001600:	f001 f856 	bl	80026b0 <HAL_ADC_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800160a:	f000 faa3 	bl	8001b54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_ADC1_Init+0xc4>)
 8001610:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001612:	2306      	movs	r3, #6
 8001614:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800161a:	237f      	movs	r3, #127	; 0x7f
 800161c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800161e:	2304      	movs	r3, #4
 8001620:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	4619      	mov	r1, r3
 800162a:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_ADC1_Init+0xbc>)
 800162c:	f001 f988 	bl	8002940 <HAL_ADC_ConfigChannel>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001636:	f000 fa8d 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000220 	.word	0x20000220
 8001648:	50040000 	.word	0x50040000
 800164c:	c7520000 	.word	0xc7520000

08001650 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MX_CAN1_Init+0x68>)
 8001656:	4a19      	ldr	r2, [pc, #100]	; (80016bc <MX_CAN1_Init+0x6c>)
 8001658:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_CAN1_Init+0x68>)
 800165c:	2228      	movs	r2, #40	; 0x28
 800165e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_CAN1_Init+0x68>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_CAN1_Init+0x68>)
 8001668:	2200      	movs	r2, #0
 800166a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_CAN1_Init+0x68>)
 800166e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001672:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_CAN1_Init+0x68>)
 8001676:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800167a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_CAN1_Init+0x68>)
 800167e:	2200      	movs	r2, #0
 8001680:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <MX_CAN1_Init+0x68>)
 8001684:	2200      	movs	r2, #0
 8001686:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <MX_CAN1_Init+0x68>)
 800168a:	2200      	movs	r2, #0
 800168c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_CAN1_Init+0x68>)
 8001690:	2200      	movs	r2, #0
 8001692:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_CAN1_Init+0x68>)
 8001696:	2200      	movs	r2, #0
 8001698:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_CAN1_Init+0x68>)
 800169c:	2200      	movs	r2, #0
 800169e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_CAN1_Init+0x68>)
 80016a2:	f001 fd2d 	bl	8003100 <HAL_CAN_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80016ac:	f000 fa52 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  can_init();
 80016b0:	f7ff fd36 	bl	8001120 <can_init>

  /* USER CODE END CAN1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000284 	.word	0x20000284
 80016bc:	40006400 	.word	0x40006400

080016c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b09a      	sub	sp, #104	; 0x68
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
 80016f0:	615a      	str	r2, [r3, #20]
 80016f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	222c      	movs	r2, #44	; 0x2c
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f009 fbb1 	bl	800ae62 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001700:	4b43      	ldr	r3, [pc, #268]	; (8001810 <MX_TIM1_Init+0x150>)
 8001702:	4a44      	ldr	r2, [pc, #272]	; (8001814 <MX_TIM1_Init+0x154>)
 8001704:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001706:	4b42      	ldr	r3, [pc, #264]	; (8001810 <MX_TIM1_Init+0x150>)
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170c:	4b40      	ldr	r3, [pc, #256]	; (8001810 <MX_TIM1_Init+0x150>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001712:	4b3f      	ldr	r3, [pc, #252]	; (8001810 <MX_TIM1_Init+0x150>)
 8001714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001718:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <MX_TIM1_Init+0x150>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001720:	4b3b      	ldr	r3, [pc, #236]	; (8001810 <MX_TIM1_Init+0x150>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <MX_TIM1_Init+0x150>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800172c:	4838      	ldr	r0, [pc, #224]	; (8001810 <MX_TIM1_Init+0x150>)
 800172e:	f003 ffbd 	bl	80056ac <HAL_TIM_Base_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001738:	f000 fa0c 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001740:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001742:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001746:	4619      	mov	r1, r3
 8001748:	4831      	ldr	r0, [pc, #196]	; (8001810 <MX_TIM1_Init+0x150>)
 800174a:	f004 fc57 	bl	8005ffc <HAL_TIM_ConfigClockSource>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001754:	f000 f9fe 	bl	8001b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001758:	482d      	ldr	r0, [pc, #180]	; (8001810 <MX_TIM1_Init+0x150>)
 800175a:	f004 f853 	bl	8005804 <HAL_TIM_PWM_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001764:	f000 f9f6 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001768:	2300      	movs	r3, #0
 800176a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001774:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001778:	4619      	mov	r1, r3
 800177a:	4825      	ldr	r0, [pc, #148]	; (8001810 <MX_TIM1_Init+0x150>)
 800177c:	f005 f8d2 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001786:	f000 f9e5 	bl	8001b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178a:	2360      	movs	r3, #96	; 0x60
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001792:	2300      	movs	r3, #0
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001796:	2300      	movs	r3, #0
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017aa:	2200      	movs	r2, #0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4818      	ldr	r0, [pc, #96]	; (8001810 <MX_TIM1_Init+0x150>)
 80017b0:	f004 fb10 	bl	8005dd4 <HAL_TIM_PWM_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80017ba:	f000 f9cb 	bl	8001b54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	4807      	ldr	r0, [pc, #28]	; (8001810 <MX_TIM1_Init+0x150>)
 80017f4:	f005 f8fc 	bl	80069f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80017fe:	f000 f9a9 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001802:	4803      	ldr	r0, [pc, #12]	; (8001810 <MX_TIM1_Init+0x150>)
 8001804:	f000 fac0 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8001808:	bf00      	nop
 800180a:	3768      	adds	r7, #104	; 0x68
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200002ac 	.word	0x200002ac
 8001814:	40012c00 	.word	0x40012c00

08001818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08e      	sub	sp, #56	; 0x38
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001838:	463b      	mov	r3, r7
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <MX_TIM2_Init+0xfc>)
 800184c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001850:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <MX_TIM2_Init+0xfc>)
 8001854:	224f      	movs	r2, #79	; 0x4f
 8001856:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001858:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <MX_TIM2_Init+0xfc>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1 ;
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <MX_TIM2_Init+0xfc>)
 8001860:	2263      	movs	r2, #99	; 0x63
 8001862:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <MX_TIM2_Init+0xfc>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <MX_TIM2_Init+0xfc>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001870:	4828      	ldr	r0, [pc, #160]	; (8001914 <MX_TIM2_Init+0xfc>)
 8001872:	f003 ff1b 	bl	80056ac <HAL_TIM_Base_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800187c:	f000 f96a 	bl	8001b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188a:	4619      	mov	r1, r3
 800188c:	4821      	ldr	r0, [pc, #132]	; (8001914 <MX_TIM2_Init+0xfc>)
 800188e:	f004 fbb5 	bl	8005ffc <HAL_TIM_ConfigClockSource>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001898:	f000 f95c 	bl	8001b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800189c:	481d      	ldr	r0, [pc, #116]	; (8001914 <MX_TIM2_Init+0xfc>)
 800189e:	f003 ffb1 	bl	8005804 <HAL_TIM_PWM_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018a8:	f000 f954 	bl	8001b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4619      	mov	r1, r3
 80018ba:	4816      	ldr	r0, [pc, #88]	; (8001914 <MX_TIM2_Init+0xfc>)
 80018bc:	f005 f832 	bl	8006924 <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80018c6:	f000 f945 	bl	8001b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ca:	2360      	movs	r3, #96	; 0x60
 80018cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	2200      	movs	r2, #0
 80018de:	4619      	mov	r1, r3
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_TIM2_Init+0xfc>)
 80018e2:	f004 fa77 	bl	8005dd4 <HAL_TIM_PWM_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80018ec:	f000 f932 	bl	8001b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018f0:	463b      	mov	r3, r7
 80018f2:	220c      	movs	r2, #12
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	; (8001914 <MX_TIM2_Init+0xfc>)
 80018f8:	f004 fa6c 	bl	8005dd4 <HAL_TIM_PWM_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001902:	f000 f927 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001906:	4803      	ldr	r0, [pc, #12]	; (8001914 <MX_TIM2_Init+0xfc>)
 8001908:	f000 fa3e 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 800190c:	bf00      	nop
 800190e:	3738      	adds	r7, #56	; 0x38
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200002f8 	.word	0x200002f8

08001918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <MX_USART1_UART_Init+0x58>)
 800191e:	4a15      	ldr	r2, [pc, #84]	; (8001974 <MX_USART1_UART_Init+0x5c>)
 8001920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001924:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <MX_USART1_UART_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_USART1_UART_Init+0x58>)
 800193e:	220c      	movs	r2, #12
 8001940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_USART1_UART_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001950:	2200      	movs	r2, #0
 8001952:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_USART1_UART_Init+0x58>)
 8001956:	2200      	movs	r2, #0
 8001958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_USART1_UART_Init+0x58>)
 800195c:	f005 f8de 	bl	8006b1c <HAL_UART_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001966:	f000 f8f5 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000344 	.word	0x20000344
 8001974:	40013800 	.word	0x40013800

08001978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
 800198c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800198e:	4b56      	ldr	r3, [pc, #344]	; (8001ae8 <MX_GPIO_Init+0x170>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a55      	ldr	r2, [pc, #340]	; (8001ae8 <MX_GPIO_Init+0x170>)
 8001994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <MX_GPIO_Init+0x170>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a4f      	ldr	r2, [pc, #316]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b4d      	ldr	r3, [pc, #308]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a49      	ldr	r2, [pc, #292]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a43      	ldr	r2, [pc, #268]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ee:	4b3e      	ldr	r3, [pc, #248]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a3d      	ldr	r2, [pc, #244]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <MX_GPIO_Init+0x170>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8001a06:	2200      	movs	r2, #0
 8001a08:	f640 410f 	movw	r1, #3087	; 0xc0f
 8001a0c:	4837      	ldr	r0, [pc, #220]	; (8001aec <MX_GPIO_Init+0x174>)
 8001a0e:	f002 fc45 	bl	800429c <HAL_GPIO_WritePin>
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_2_Pin|DEBUG_1_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2103      	movs	r1, #3
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1a:	f002 fc3f 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f240 4105 	movw	r1, #1029	; 0x405
 8001a24:	4832      	ldr	r0, [pc, #200]	; (8001af0 <MX_GPIO_Init+0x178>)
 8001a26:	f002 fc39 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LVL_SFTR_OE_1_GPIO_Port, LVL_SFTR_OE_1_Pin, GPIO_PIN_RESET);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	4831      	ldr	r0, [pc, #196]	; (8001af4 <MX_GPIO_Init+0x17c>)
 8001a30:	f002 fc34 	bl	800429c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_6_Pin DEBUG_5_Pin DEBUG_4_Pin DEBUG_3_Pin
                           STPR_EN_1_Pin STPR_DIR_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_6_Pin|DEBUG_5_Pin|DEBUG_4_Pin|DEBUG_3_Pin
 8001a34:	f640 430f 	movw	r3, #3087	; 0xc0f
 8001a38:	617b      	str	r3, [r7, #20]
                          |STPR_EN_1_Pin|STPR_DIR_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4827      	ldr	r0, [pc, #156]	; (8001aec <MX_GPIO_Init+0x174>)
 8001a4e:	f002 faab 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_2_Pin DEBUG_1_Pin */
  GPIO_InitStruct.Pin = DEBUG_2_Pin|DEBUG_1_Pin;
 8001a52:	2303      	movs	r3, #3
 8001a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6c:	f002 fa9c 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LVL_SFTR_OE_2_Pin STPR_DIR_2_Pin STPR_EN_2_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_2_Pin|STPR_DIR_2_Pin|STPR_EN_2_Pin;
 8001a70:	f240 4305 	movw	r3, #1029	; 0x405
 8001a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4819      	ldr	r0, [pc, #100]	; (8001af0 <MX_GPIO_Init+0x178>)
 8001a8a:	f002 fa8d 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STPR_FLT_2_Pin ID_0_Pin ID_1_Pin ID_2_Pin
                           ID_3_Pin BRAKE_IN_Pin */
  GPIO_InitStruct.Pin = STPR_FLT_2_Pin|ID_0_Pin|ID_1_Pin|ID_2_Pin
 8001a8e:	f24f 2302 	movw	r3, #61954	; 0xf202
 8001a92:	617b      	str	r3, [r7, #20]
                          |ID_3_Pin|BRAKE_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4813      	ldr	r0, [pc, #76]	; (8001af0 <MX_GPIO_Init+0x178>)
 8001aa4:	f002 fa80 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_STOP_Pin STPR_FLT_1_Pin */
  GPIO_InitStruct.Pin = E_STOP_Pin|STPR_FLT_1_Pin;
 8001aa8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	480b      	ldr	r0, [pc, #44]	; (8001aec <MX_GPIO_Init+0x174>)
 8001abe:	f002 fa73 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LVL_SFTR_OE_1_Pin */
  GPIO_InitStruct.Pin = LVL_SFTR_OE_1_Pin;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LVL_SFTR_OE_1_GPIO_Port, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4806      	ldr	r0, [pc, #24]	; (8001af4 <MX_GPIO_Init+0x17c>)
 8001ada:	f002 fa65 	bl	8003fa8 <HAL_GPIO_Init>

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	; 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	48000800 	.word	0x48000800
 8001af0:	48000400 	.word	0x48000400
 8001af4:	48000c00 	.word	0x48000c00

08001af8 <led_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_led_task */
void led_task(void *argument)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN led_task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, DEBUG_1_Pin);
 8001b00:	2102      	movs	r1, #2
 8001b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b06:	f002 fbe1 	bl	80042cc <HAL_GPIO_TogglePin>
	osDelay(600);
 8001b0a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001b0e:	f005 fd7d 	bl	800760c <osDelay>
	HAL_GPIO_TogglePin(GPIOA, DEBUG_1_Pin);
 8001b12:	e7f5      	b.n	8001b00 <led_task+0x8>

08001b14 <PeriodicTimerCallback>:
  /* USER CODE END led_task */
}

/* PeriodicTimerCallback function */
void PeriodicTimerCallback(void *argument)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PeriodicTimerCallback */
	HAL_GPIO_TogglePin(GPIOA, DEBUG_1_Pin);
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f002 fbd3 	bl	80042cc <HAL_GPIO_TogglePin>
  /* USER CODE END PeriodicTimerCallback */
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b42:	f000 fc09 	bl	8002358 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40001000 	.word	0x40001000

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
}
 8001b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <Error_Handler+0x8>
	...

08001b60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_MspInit+0x4c>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_MspInit+0x4c>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6613      	str	r3, [r2, #96]	; 0x60
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_MspInit+0x4c>)
 8001b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_MspInit+0x4c>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_MspInit+0x4c>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_MspInit+0x4c>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	210f      	movs	r1, #15
 8001b9a:	f06f 0001 	mvn.w	r0, #1
 8001b9e:	f002 f9d9 	bl	8003f54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b0a0      	sub	sp, #128	; 0x80
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	225c      	movs	r2, #92	; 0x5c
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f009 f946 	bl	800ae62 <memset>
  if(hadc->Instance==ADC1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <HAL_ADC_MspInit+0xc0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d142      	bne.n	8001c66 <HAL_ADC_MspInit+0xb6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001be0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001be4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001be6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bea:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001bec:	2303      	movs	r3, #3
 8001bee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8001bf4:	2314      	movs	r3, #20
 8001bf6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fa42 	bl	8005098 <HAL_RCCEx_PeriphCLKConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001c1a:	f7ff ff9b 	bl	8001b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_ADC_MspInit+0xc4>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <HAL_ADC_MspInit+0xc4>)
 8001c24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_ADC_MspInit+0xc4>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_ADC_MspInit+0xc4>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_ADC_MspInit+0xc4>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_ADC_MspInit+0xc4>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = BAT_TEMP_Pin;
 8001c4e:	2310      	movs	r3, #16
 8001c50:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c52:	2303      	movs	r3, #3
 8001c54:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(BAT_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001c5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <HAL_ADC_MspInit+0xc8>)
 8001c62:	f002 f9a1 	bl	8003fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c66:	bf00      	nop
 8001c68:	3780      	adds	r7, #128	; 0x80
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	50040000 	.word	0x50040000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48000800 	.word	0x48000800

08001c7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a20      	ldr	r2, [pc, #128]	; (8001d1c <HAL_CAN_MspInit+0xa0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d139      	bne.n	8001d12 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_CAN_MspInit+0xa4>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_CAN_MspInit+0xa4>)
 8001ca4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_CAN_MspInit+0xa4>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_CAN_MspInit+0xa4>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_CAN_MspInit+0xa4>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_CAN_MspInit+0xa4>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ce0:	2309      	movs	r3, #9
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f002 f95b 	bl	8003fa8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2105      	movs	r1, #5
 8001cf6:	2014      	movs	r0, #20
 8001cf8:	f002 f92c 	bl	8003f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001cfc:	2014      	movs	r0, #20
 8001cfe:	f002 f945 	bl	8003f8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2105      	movs	r1, #5
 8001d06:	2015      	movs	r0, #21
 8001d08:	f002 f924 	bl	8003f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d0c:	2015      	movs	r0, #21
 8001d0e:	f002 f93d 	bl	8003f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40006400 	.word	0x40006400
 8001d20:	40021000 	.word	0x40021000

08001d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <HAL_TIM_Base_MspInit+0x5c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d10c      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_TIM_Base_MspInit+0x60>)
 8001d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <HAL_TIM_Base_MspInit+0x60>)
 8001d3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d40:	6613      	str	r3, [r2, #96]	; 0x60
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_TIM_Base_MspInit+0x60>)
 8001d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d4e:	e010      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d58:	d10b      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_TIM_Base_MspInit+0x60>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_TIM_Base_MspInit+0x60>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_TIM_Base_MspInit+0x60>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40012c00 	.word	0x40012c00
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a32      	ldr	r2, [pc, #200]	; (8001e70 <HAL_TIM_MspPostInit+0xe8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d11e      	bne.n	8001de8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <HAL_TIM_MspPostInit+0xec>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a31      	ldr	r2, [pc, #196]	; (8001e74 <HAL_TIM_MspPostInit+0xec>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <HAL_TIM_MspPostInit+0xec>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = CAN_HEARTBIT_Pin;
 8001dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CAN_HEARTBIT_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de2:	f002 f8e1 	bl	8003fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001de6:	e03f      	b.n	8001e68 <HAL_TIM_MspPostInit+0xe0>
  else if(htim->Instance==TIM2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df0:	d13a      	bne.n	8001e68 <HAL_TIM_MspPostInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <HAL_TIM_MspPostInit+0xec>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <HAL_TIM_MspPostInit+0xec>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_TIM_MspPostInit+0xec>)
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_TIM_MspPostInit+0xec>)
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_TIM_MspPostInit+0xec>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_TIM_MspPostInit+0xec>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STPR_PWM_2_Pin;
 8001e22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e34:	2301      	movs	r3, #1
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_2_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480e      	ldr	r0, [pc, #56]	; (8001e78 <HAL_TIM_MspPostInit+0xf0>)
 8001e40:	f002 f8b2 	bl	8003fa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STPR_PWM_1_Pin;
 8001e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e56:	2301      	movs	r3, #1
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STPR_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e64:	f002 f8a0 	bl	8003fa8 <HAL_GPIO_Init>
}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40012c00 	.word	0x40012c00
 8001e74:	40021000 	.word	0x40021000
 8001e78:	48000400 	.word	0x48000400

08001e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0a0      	sub	sp, #128	; 0x80
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	225c      	movs	r2, #92	; 0x5c
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f008 ffe0 	bl	800ae62 <memset>
  if(huart->Instance==USART1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_UART_MspInit+0xa8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d137      	bne.n	8001f1c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f8ed 	bl	8005098 <HAL_RCCEx_PeriphCLKConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ec4:	f7ff fe46 	bl	8001b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ecc:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed4:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee4:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <HAL_UART_MspInit+0xac>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ef8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001efc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f12:	4619      	mov	r1, r3
 8001f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f18:	f002 f846 	bl	8003fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f1c:	bf00      	nop
 8001f1e:	3780      	adds	r7, #128	; 0x80
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40013800 	.word	0x40013800
 8001f28:	40021000 	.word	0x40021000

08001f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	; 0x38
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f3a:	4b34      	ldr	r3, [pc, #208]	; (800200c <HAL_InitTick+0xe0>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	4a33      	ldr	r2, [pc, #204]	; (800200c <HAL_InitTick+0xe0>)
 8001f40:	f043 0310 	orr.w	r3, r3, #16
 8001f44:	6593      	str	r3, [r2, #88]	; 0x58
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <HAL_InitTick+0xe0>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f52:	f107 0210 	add.w	r2, r7, #16
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f003 f809 	bl	8004f74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f6c:	f002 ffd6 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 8001f70:	6378      	str	r0, [r7, #52]	; 0x34
 8001f72:	e004      	b.n	8001f7e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f74:	f002 ffd2 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f80:	4a23      	ldr	r2, [pc, #140]	; (8002010 <HAL_InitTick+0xe4>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0c9b      	lsrs	r3, r3, #18
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_InitTick+0xe8>)
 8001f8e:	4a22      	ldr	r2, [pc, #136]	; (8002018 <HAL_InitTick+0xec>)
 8001f90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_InitTick+0xe8>)
 8001f94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f9a:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <HAL_InitTick+0xe8>)
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001fa0:	4b1c      	ldr	r3, [pc, #112]	; (8002014 <HAL_InitTick+0xe8>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa6:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_InitTick+0xe8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_InitTick+0xe8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001fb2:	4818      	ldr	r0, [pc, #96]	; (8002014 <HAL_InitTick+0xe8>)
 8001fb4:	f003 fb7a 	bl	80056ac <HAL_TIM_Base_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001fbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d11b      	bne.n	8001ffe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001fc6:	4813      	ldr	r0, [pc, #76]	; (8002014 <HAL_InitTick+0xe8>)
 8001fc8:	f003 fbc8 	bl	800575c <HAL_TIM_Base_Start_IT>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001fd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d111      	bne.n	8001ffe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fda:	2036      	movs	r0, #54	; 0x36
 8001fdc:	f001 ffd6 	bl	8003f8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b0f      	cmp	r3, #15
 8001fe4:	d808      	bhi.n	8001ff8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	2036      	movs	r0, #54	; 0x36
 8001fec:	f001 ffb2 	bl	8003f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	; (800201c <HAL_InitTick+0xf0>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e002      	b.n	8001ffe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ffe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002002:	4618      	mov	r0, r3
 8002004:	3738      	adds	r7, #56	; 0x38
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000
 8002010:	431bde83 	.word	0x431bde83
 8002014:	200003d8 	.word	0x200003d8
 8002018:	40001000 	.word	0x40001000
 800201c:	2000000c 	.word	0x2000000c

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <NMI_Handler+0x4>

08002026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <MemManage_Handler+0x4>

08002032 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <UsageFault_Handler+0x4>

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <CAN1_RX0_IRQHandler+0x10>)
 8002052:	f001 fc8e 	bl	8003972 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000284 	.word	0x20000284

08002060 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <CAN1_RX1_IRQHandler+0x10>)
 8002066:	f001 fc84 	bl	8003972 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000284 	.word	0x20000284

08002074 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <TIM6_DAC_IRQHandler+0x10>)
 800207a:	f003 fd8b 	bl	8005b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200003d8 	.word	0x200003d8

08002088 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
	return 1;
 800208c:	2301      	movs	r3, #1
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <_kill>:

int _kill(int pid, int sig)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020a2:	f008 fdad 	bl	800ac00 <__errno>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2216      	movs	r2, #22
 80020aa:	601a      	str	r2, [r3, #0]
	return -1;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_exit>:

void _exit (int status)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ffe7 	bl	8002098 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020ca:	e7fe      	b.n	80020ca <_exit+0x12>

080020cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e00a      	b.n	80020f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020de:	f3af 8000 	nop.w
 80020e2:	4601      	mov	r1, r0
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	b2ca      	uxtb	r2, r1
 80020ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf0      	blt.n	80020de <_read+0x12>
	}

return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212e:	605a      	str	r2, [r3, #4]
	return 0;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_isatty>:

int _isatty(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
	return 1;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
	return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <_sbrk+0x5c>)
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <_sbrk+0x60>)
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <_sbrk+0x64>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <_sbrk+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a0:	f008 fd2e 	bl	800ac00 <__errno>
 80021a4:	4603      	mov	r3, r0
 80021a6:	220c      	movs	r2, #12
 80021a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ae:	e009      	b.n	80021c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sbrk+0x64>)
 80021c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20010000 	.word	0x20010000
 80021d0:	00000400 	.word	0x00000400
 80021d4:	20000424 	.word	0x20000424
 80021d8:	20001e28 	.word	0x20001e28

080021dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <SystemInit+0x20>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <SystemInit+0x20>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <steering_task_pwm>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_steering_task_pwm */
void steering_task_pwm(void *argument)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN steering_task_pwm */
  /* Infinite loop */
  for(;;)
  {
		int angle_d = (int) desired_angle_1;
 8002208:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <steering_task_pwm+0xb0>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002212:	ee17 3a90 	vmov	r3, s15
 8002216:	60fb      	str	r3, [r7, #12]
		dir_1 = abs(angle_d)/angle_d;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	da02      	bge.n	8002224 <steering_task_pwm+0x24>
 800221e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002222:	e000      	b.n	8002226 <steering_task_pwm+0x26>
 8002224:	2301      	movs	r3, #1
 8002226:	4a23      	ldr	r2, [pc, #140]	; (80022b4 <steering_task_pwm+0xb4>)
 8002228:	6013      	str	r3, [r2, #0]

		if(fabs(desired_angle_1) > MAX_STEERING)
 800222a:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <steering_task_pwm+0xb0>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eef0 7ae7 	vabs.f32	s15, s15
 8002234:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80022b8 <steering_task_pwm+0xb8>
 8002238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800223c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002240:	dd02      	ble.n	8002248 <steering_task_pwm+0x48>
			desired_angle_1 = MAX_STEERING;
 8002242:	4a1e      	ldr	r2, [pc, #120]	; (80022bc <steering_task_pwm+0xbc>)
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <steering_task_pwm+0xb0>)
 8002246:	601a      	str	r2, [r3, #0]

		desired_angle_1 *= dir_1; // to work only with positive numbers
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <steering_task_pwm+0xb4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	ee07 3a90 	vmov	s15, r3
 8002250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002254:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <steering_task_pwm+0xb0>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225e:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <steering_task_pwm+0xb0>)
 8002260:	edc3 7a00 	vstr	s15, [r3]
		goal_steps_1 = desired_angle_1/STEP_ANGLE;
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <steering_task_pwm+0xb0>)
 8002266:	ed93 7a00 	vldr	s14, [r3]
 800226a:	eddf 6a15 	vldr	s13, [pc, #84]	; 80022c0 <steering_task_pwm+0xc0>
 800226e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002276:	ee17 2a90 	vmov	r2, s15
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <steering_task_pwm+0xc4>)
 800227c:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(GPIOC, STPR_DIR_1_Pin | STPR_EN_1_Pin, dir_1);
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <steering_task_pwm+0xb4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800228a:	480f      	ldr	r0, [pc, #60]	; (80022c8 <steering_task_pwm+0xc8>)
 800228c:	f002 f806 	bl	800429c <HAL_GPIO_WritePin>

		if(steps_1 < goal_steps_1)
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <steering_task_pwm+0xcc>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <steering_task_pwm+0xc4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	da04      	bge.n	80022a6 <steering_task_pwm+0xa6>
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800229c:	2100      	movs	r1, #0
 800229e:	480c      	ldr	r0, [pc, #48]	; (80022d0 <steering_task_pwm+0xd0>)
 80022a0:	f003 fb12 	bl	80058c8 <HAL_TIM_PWM_Start>
 80022a4:	e7b0      	b.n	8002208 <steering_task_pwm+0x8>
		else
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80022a6:	2100      	movs	r1, #0
 80022a8:	4809      	ldr	r0, [pc, #36]	; (80022d0 <steering_task_pwm+0xd0>)
 80022aa:	f003 fbeb 	bl	8005a84 <HAL_TIM_PWM_Stop>
  {
 80022ae:	e7ab      	b.n	8002208 <steering_task_pwm+0x8>
 80022b0:	20000008 	.word	0x20000008
 80022b4:	20000004 	.word	0x20000004
 80022b8:	42653333 	.word	0x42653333
 80022bc:	42653333 	.word	0x42653333
 80022c0:	3fe66666 	.word	0x3fe66666
 80022c4:	20000428 	.word	0x20000428
 80022c8:	48000800 	.word	0x48000800
 80022cc:	2000042c 	.word	0x2000042c
 80022d0:	200002f8 	.word	0x200002f8

080022d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800230c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d8:	f7ff ff80 	bl	80021dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022dc:	480c      	ldr	r0, [pc, #48]	; (8002310 <LoopForever+0x6>)
  ldr r1, =_edata
 80022de:	490d      	ldr	r1, [pc, #52]	; (8002314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <LoopForever+0xe>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <LoopForever+0x12>)
  ldr r4, =_ebss
 80022f4:	4c0a      	ldr	r4, [pc, #40]	; (8002320 <LoopForever+0x16>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002302:	f008 fd79 	bl	800adf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002306:	f7ff f885 	bl	8001414 <main>

0800230a <LoopForever>:

LoopForever:
    b LoopForever
 800230a:	e7fe      	b.n	800230a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800230c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002314:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002318:	0800fcd4 	.word	0x0800fcd4
  ldr r2, =_sbss
 800231c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002320:	20001e24 	.word	0x20001e24

08002324 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC1_IRQHandler>

08002326 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002330:	2003      	movs	r0, #3
 8002332:	f001 fe04 	bl	8003f3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002336:	200f      	movs	r0, #15
 8002338:	f7ff fdf8 	bl	8001f2c <HAL_InitTick>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	e001      	b.n	800234c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002348:	f7ff fc0a 	bl	8001b60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800234c:	79fb      	ldrb	r3, [r7, #7]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_IncTick+0x20>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_IncTick+0x24>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4413      	add	r3, r2
 8002368:	4a04      	ldr	r2, [pc, #16]	; (800237c <HAL_IncTick+0x24>)
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000010 	.word	0x20000010
 800237c:	20000430 	.word	0x20000430

08002380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return uwTick;
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <HAL_GetTick+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000430 	.word	0x20000430

08002398 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	609a      	str	r2, [r3, #8]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3360      	adds	r3, #96	; 0x60
 8002412:	461a      	mov	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <LL_ADC_SetOffset+0x44>)
 8002422:	4013      	ands	r3, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	4313      	orrs	r3, r2
 8002430:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002438:	bf00      	nop
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	03fff000 	.word	0x03fff000

08002448 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3360      	adds	r3, #96	; 0x60
 8002456:	461a      	mov	r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3360      	adds	r3, #96	; 0x60
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b087      	sub	sp, #28
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3330      	adds	r3, #48	; 0x30
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	4413      	add	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	211f      	movs	r1, #31
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43db      	mvns	r3, r3
 80024dc:	401a      	ands	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	f003 011f 	and.w	r1, r3, #31
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	431a      	orrs	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002502:	b480      	push	{r7}
 8002504:	b087      	sub	sp, #28
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3314      	adds	r3, #20
 8002512:	461a      	mov	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	0e5b      	lsrs	r3, r3, #25
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	4413      	add	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	0d1b      	lsrs	r3, r3, #20
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	2107      	movs	r1, #7
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	401a      	ands	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	0d1b      	lsrs	r3, r3, #20
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	431a      	orrs	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0318 	and.w	r3, r3, #24
 800257a:	4908      	ldr	r1, [pc, #32]	; (800259c <LL_ADC_SetChannelSingleDiff+0x44>)
 800257c:	40d9      	lsrs	r1, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	400b      	ands	r3, r1
 8002582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002586:	431a      	orrs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	0007ffff 	.word	0x0007ffff

080025a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6093      	str	r3, [r2, #8]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025d8:	d101      	bne.n	80025de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80025fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002600:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002628:	d101      	bne.n	800262e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <LL_ADC_IsEnabled+0x18>
 8002650:	2301      	movs	r3, #1
 8002652:	e000      	b.n	8002656 <LL_ADC_IsEnabled+0x1a>
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d101      	bne.n	800267a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b08      	cmp	r3, #8
 800269a:	d101      	bne.n	80026a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80026bc:	2300      	movs	r3, #0
 80026be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e12c      	b.n	8002924 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff fa69 	bl	8001bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff67 	bl	80025c4 <LL_ADC_IsDeepPowerDownEnabled>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff4d 	bl	80025a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff82 	bl	8002614 <LL_ADC_IsInternalRegulatorEnabled>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d115      	bne.n	8002742 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff66 	bl	80025ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002720:	4b82      	ldr	r3, [pc, #520]	; (800292c <HAL_ADC_Init+0x27c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	4a82      	ldr	r2, [pc, #520]	; (8002930 <HAL_ADC_Init+0x280>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	3301      	adds	r3, #1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002734:	e002      	b.n	800273c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	3b01      	subs	r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f9      	bne.n	8002736 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff64 	bl	8002614 <LL_ADC_IsInternalRegulatorEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f043 0210 	orr.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff75 	bl	8002662 <LL_ADC_REG_IsConversionOngoing>
 8002778:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 80c5 	bne.w	8002912 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 80c1 	bne.w	8002912 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002798:	f043 0202 	orr.w	r2, r3, #2
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff49 	bl	800263c <LL_ADC_IsEnabled>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b0:	4860      	ldr	r0, [pc, #384]	; (8002934 <HAL_ADC_Init+0x284>)
 80027b2:	f7ff ff43 	bl	800263c <LL_ADC_IsEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4619      	mov	r1, r3
 80027c2:	485d      	ldr	r0, [pc, #372]	; (8002938 <HAL_ADC_Init+0x288>)
 80027c4:	f7ff fde8 	bl	8002398 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7e5b      	ldrb	r3, [r3, #25]
 80027cc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027d2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80027d8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80027de:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d106      	bne.n	8002804 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	3b01      	subs	r3, #1
 80027fc:	045b      	lsls	r3, r3, #17
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	4b45      	ldr	r3, [pc, #276]	; (800293c <HAL_ADC_Init+0x28c>)
 8002828:	4013      	ands	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	69b9      	ldr	r1, [r7, #24]
 8002830:	430b      	orrs	r3, r1
 8002832:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff12 	bl	8002662 <LL_ADC_REG_IsConversionOngoing>
 800283e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff1f 	bl	8002688 <LL_ADC_INJ_IsConversionOngoing>
 800284a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d13d      	bne.n	80028ce <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d13a      	bne.n	80028ce <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800285c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002864:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002874:	f023 0302 	bic.w	r3, r3, #2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	69b9      	ldr	r1, [r7, #24]
 800287e:	430b      	orrs	r3, r1
 8002880:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002888:	2b01      	cmp	r3, #1
 800288a:	d118      	bne.n	80028be <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002896:	f023 0304 	bic.w	r3, r3, #4
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028a2:	4311      	orrs	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028ae:	430a      	orrs	r2, r1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	611a      	str	r2, [r3, #16]
 80028bc:	e007      	b.n	80028ce <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d10c      	bne.n	80028f0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	f023 010f 	bic.w	r1, r3, #15
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	1e5a      	subs	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
 80028ee:	e007      	b.n	8002900 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 020f 	bic.w	r2, r2, #15
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	f023 0303 	bic.w	r3, r3, #3
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
 8002910:	e007      	b.n	8002922 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	f043 0210 	orr.w	r2, r3, #16
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002922:	7ffb      	ldrb	r3, [r7, #31]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3720      	adds	r7, #32
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000000 	.word	0x20000000
 8002930:	053e2d63 	.word	0x053e2d63
 8002934:	50040000 	.word	0x50040000
 8002938:	50040300 	.word	0x50040300
 800293c:	fff0c007 	.word	0xfff0c007

08002940 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0b6      	sub	sp, #216	; 0xd8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x22>
 800295e:	2302      	movs	r3, #2
 8002960:	e3b9      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x796>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fe77 	bl	8002662 <LL_ADC_REG_IsConversionOngoing>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 839e 	bne.w	80030b8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d824      	bhi.n	80029ce <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	3b02      	subs	r3, #2
 800298a:	2b03      	cmp	r3, #3
 800298c:	d81b      	bhi.n	80029c6 <HAL_ADC_ConfigChannel+0x86>
 800298e:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <HAL_ADC_ConfigChannel+0x54>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	080029a5 	.word	0x080029a5
 8002998:	080029ad 	.word	0x080029ad
 800299c:	080029b5 	.word	0x080029b5
 80029a0:	080029bd 	.word	0x080029bd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	220c      	movs	r2, #12
 80029a8:	605a      	str	r2, [r3, #4]
          break;
 80029aa:	e011      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2212      	movs	r2, #18
 80029b0:	605a      	str	r2, [r3, #4]
          break;
 80029b2:	e00d      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2218      	movs	r2, #24
 80029b8:	605a      	str	r2, [r3, #4]
          break;
 80029ba:	e009      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029c2:	605a      	str	r2, [r3, #4]
          break;
 80029c4:	e004      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2206      	movs	r2, #6
 80029ca:	605a      	str	r2, [r3, #4]
          break;
 80029cc:	e000      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80029ce:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	f7ff fd64 	bl	80024aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fe3b 	bl	8002662 <LL_ADC_REG_IsConversionOngoing>
 80029ec:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fe47 	bl	8002688 <LL_ADC_INJ_IsConversionOngoing>
 80029fa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f040 81a6 	bne.w	8002d54 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f040 81a1 	bne.w	8002d54 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f7ff fd6f 	bl	8002502 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	08db      	lsrs	r3, r3, #3
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d00a      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6919      	ldr	r1, [r3, #16]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002a56:	f7ff fcd3 	bl	8002400 <LL_ADC_SetOffset>
 8002a5a:	e17b      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fcf0 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x148>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fce5 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	0e9b      	lsrs	r3, r3, #26
 8002a82:	f003 021f 	and.w	r2, r3, #31
 8002a86:	e01e      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x186>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fcda 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a9e:	fa93 f3a3 	rbit	r3, r3
 8002aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002aa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002aae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002ab6:	2320      	movs	r3, #32
 8002ab8:	e004      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002aba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x19e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0e9b      	lsrs	r3, r3, #26
 8002ad8:	f003 031f 	and.w	r3, r3, #31
 8002adc:	e018      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x1d0>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002af6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002afa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002b02:	2320      	movs	r3, #32
 8002b04:	e004      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002b06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d106      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fca9 	bl	8002474 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2101      	movs	r1, #1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fc8d 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x20e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fc82 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	0e9b      	lsrs	r3, r3, #26
 8002b48:	f003 021f 	and.w	r2, r3, #31
 8002b4c:	e01e      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x24c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2101      	movs	r1, #1
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fc77 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b64:	fa93 f3a3 	rbit	r3, r3
 8002b68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002b6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e004      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x264>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	e018      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x296>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bb0:	fa93 f3a3 	rbit	r3, r3
 8002bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002bb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002bc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e004      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bd0:	fab3 f383 	clz	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d106      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fc46 	bl	8002474 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2102      	movs	r1, #2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fc2a 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x2d4>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2102      	movs	r1, #2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fc1f 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	f003 021f 	and.w	r2, r3, #31
 8002c12:	e01e      	b.n	8002c52 <HAL_ADC_ConfigChannel+0x312>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2102      	movs	r1, #2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fc14 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c2a:	fa93 f3a3 	rbit	r3, r3
 8002c2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002c42:	2320      	movs	r3, #32
 8002c44:	e004      	b.n	8002c50 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d105      	bne.n	8002c6a <HAL_ADC_ConfigChannel+0x32a>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	0e9b      	lsrs	r3, r3, #26
 8002c64:	f003 031f 	and.w	r3, r3, #31
 8002c68:	e016      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x358>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	e004      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d106      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fbe5 	bl	8002474 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2103      	movs	r1, #3
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fbc9 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x396>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2103      	movs	r1, #3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fbbe 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	e017      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x3c6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2103      	movs	r1, #3
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fbb3 	bl	8002448 <LL_ADC_GetOffsetChannel>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cf0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002cf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	e003      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d105      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x3de>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	e011      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x402>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002d36:	2320      	movs	r3, #32
 8002d38:	e003      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d106      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fb90 	bl	8002474 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fc6f 	bl	800263c <LL_ADC_IsEnabled>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f040 813f 	bne.w	8002fe4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f7ff fbf0 	bl	8002558 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4a8e      	ldr	r2, [pc, #568]	; (8002fb8 <HAL_ADC_ConfigChannel+0x678>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	f040 8130 	bne.w	8002fe4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10b      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x46c>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	2b09      	cmp	r3, #9
 8002da2:	bf94      	ite	ls
 8002da4:	2301      	movls	r3, #1
 8002da6:	2300      	movhi	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e019      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x4a0>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db4:	fa93 f3a3 	rbit	r3, r3
 8002db8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dbc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002dbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	e003      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dca:	fab3 f383 	clz	r3, r3
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2b09      	cmp	r3, #9
 8002dd8:	bf94      	ite	ls
 8002dda:	2301      	movls	r3, #1
 8002ddc:	2300      	movhi	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d079      	beq.n	8002ed8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d107      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x4c0>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	3301      	adds	r3, #1
 8002df8:	069b      	lsls	r3, r3, #26
 8002dfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dfe:	e015      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x4ec>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e10:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	e003      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	069b      	lsls	r3, r3, #26
 8002e28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x50c>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	0e9b      	lsrs	r3, r3, #26
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	e017      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x53c>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e003      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2101      	movs	r1, #1
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	ea42 0103 	orr.w	r1, r2, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x562>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	3301      	adds	r3, #1
 8002e94:	f003 021f 	and.w	r2, r3, #31
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	051b      	lsls	r3, r3, #20
 8002ea0:	e018      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x594>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002eba:	2320      	movs	r3, #32
 8002ebc:	e003      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	e080      	b.n	8002fda <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d107      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x5b4>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	3301      	adds	r3, #1
 8002eec:	069b      	lsls	r3, r3, #26
 8002eee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ef2:	e015      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x5e0>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	e003      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	069b      	lsls	r3, r3, #26
 8002f1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x600>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	0e9b      	lsrs	r3, r3, #26
 8002f32:	3301      	adds	r3, #1
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	2101      	movs	r1, #1
 8002f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3e:	e017      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x630>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	61fb      	str	r3, [r7, #28]
  return result;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e003      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	ea42 0103 	orr.w	r1, r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10d      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x65c>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	3301      	adds	r3, #1
 8002f88:	f003 021f 	and.w	r2, r3, #31
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	3b1e      	subs	r3, #30
 8002f94:	051b      	lsls	r3, r3, #20
 8002f96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	e01d      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x698>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	fa93 f3a3 	rbit	r3, r3
 8002fa8:	613b      	str	r3, [r7, #16]
  return result;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	e005      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x684>
 8002fb8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f003 021f 	and.w	r2, r3, #31
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b1e      	subs	r3, #30
 8002fd2:	051b      	lsls	r3, r3, #20
 8002fd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f7ff fa8f 	bl	8002502 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <HAL_ADC_ConfigChannel+0x7a0>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d06c      	beq.n	80030ca <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ff0:	483c      	ldr	r0, [pc, #240]	; (80030e4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ff2:	f7ff f9f7 	bl	80023e4 <LL_ADC_GetCommonPathInternalCh>
 8002ff6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a3a      	ldr	r2, [pc, #232]	; (80030e8 <HAL_ADC_ConfigChannel+0x7a8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d127      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003004:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d121      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a35      	ldr	r2, [pc, #212]	; (80030ec <HAL_ADC_ConfigChannel+0x7ac>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d157      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800301a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800301e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003022:	4619      	mov	r1, r3
 8003024:	482f      	ldr	r0, [pc, #188]	; (80030e4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003026:	f7ff f9ca 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800302a:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <HAL_ADC_ConfigChannel+0x7b0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	4a30      	ldr	r2, [pc, #192]	; (80030f4 <HAL_ADC_ConfigChannel+0x7b4>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003044:	e002      	b.n	800304c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3b01      	subs	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f9      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003052:	e03a      	b.n	80030ca <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_ADC_ConfigChannel+0x7b8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d113      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x746>
 800305e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10d      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <HAL_ADC_ConfigChannel+0x7ac>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d12a      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307c:	4619      	mov	r1, r3
 800307e:	4819      	ldr	r0, [pc, #100]	; (80030e4 <HAL_ADC_ConfigChannel+0x7a4>)
 8003080:	f7ff f99d 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003084:	e021      	b.n	80030ca <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_ADC_ConfigChannel+0x7bc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d11c      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d116      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a12      	ldr	r2, [pc, #72]	; (80030ec <HAL_ADC_ConfigChannel+0x7ac>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d111      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030ae:	4619      	mov	r1, r3
 80030b0:	480c      	ldr	r0, [pc, #48]	; (80030e4 <HAL_ADC_ConfigChannel+0x7a4>)
 80030b2:	f7ff f984 	bl	80023be <LL_ADC_SetCommonPathInternalCh>
 80030b6:	e008      	b.n	80030ca <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	37d8      	adds	r7, #216	; 0xd8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	80080000 	.word	0x80080000
 80030e4:	50040300 	.word	0x50040300
 80030e8:	c7520000 	.word	0xc7520000
 80030ec:	50040000 	.word	0x50040000
 80030f0:	20000000 	.word	0x20000000
 80030f4:	053e2d63 	.word	0x053e2d63
 80030f8:	cb840000 	.word	0xcb840000
 80030fc:	80000001 	.word	0x80000001

08003100 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0ed      	b.n	80032ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe fdac 	bl	8001c7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003134:	f7ff f924 	bl	8002380 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800313a:	e012      	b.n	8003162 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800313c:	f7ff f920 	bl	8002380 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b0a      	cmp	r3, #10
 8003148:	d90b      	bls.n	8003162 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2205      	movs	r2, #5
 800315a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e0c5      	b.n	80032ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0e5      	beq.n	800313c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0202 	bic.w	r2, r2, #2
 800317e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003180:	f7ff f8fe 	bl	8002380 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003186:	e012      	b.n	80031ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003188:	f7ff f8fa 	bl	8002380 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b0a      	cmp	r3, #10
 8003194:	d90b      	bls.n	80031ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2205      	movs	r2, #5
 80031a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e09f      	b.n	80032ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e5      	bne.n	8003188 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7e1b      	ldrb	r3, [r3, #24]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d108      	bne.n	80031d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e007      	b.n	80031e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7e5b      	ldrb	r3, [r3, #25]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d108      	bne.n	8003200 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e007      	b.n	8003210 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800320e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	7e9b      	ldrb	r3, [r3, #26]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d108      	bne.n	800322a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0220 	orr.w	r2, r2, #32
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	e007      	b.n	800323a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0220 	bic.w	r2, r2, #32
 8003238:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7edb      	ldrb	r3, [r3, #27]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d108      	bne.n	8003254 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0210 	bic.w	r2, r2, #16
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e007      	b.n	8003264 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0210 	orr.w	r2, r2, #16
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7f1b      	ldrb	r3, [r3, #28]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d108      	bne.n	800327e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0208 	orr.w	r2, r2, #8
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e007      	b.n	800328e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0208 	bic.w	r2, r2, #8
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7f5b      	ldrb	r3, [r3, #29]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d108      	bne.n	80032a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0204 	orr.w	r2, r2, #4
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e007      	b.n	80032b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0204 	bic.w	r2, r2, #4
 80032b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	ea42 0103 	orr.w	r1, r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	1e5a      	subs	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b087      	sub	sp, #28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d003      	beq.n	800331c <HAL_CAN_ConfigFilter+0x26>
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	2b02      	cmp	r3, #2
 8003318:	f040 80aa 	bne.w	8003470 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003322:	f043 0201 	orr.w	r2, r3, #1
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2201      	movs	r2, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	43db      	mvns	r3, r3
 8003346:	401a      	ands	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d123      	bne.n	800339e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	43db      	mvns	r3, r3
 8003360:	401a      	ands	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003378:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3248      	adds	r2, #72	; 0x48
 800337e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003392:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003394:	6979      	ldr	r1, [r7, #20]
 8003396:	3348      	adds	r3, #72	; 0x48
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d122      	bne.n	80033ec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	3248      	adds	r2, #72	; 0x48
 80033cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033e2:	6979      	ldr	r1, [r7, #20]
 80033e4:	3348      	adds	r3, #72	; 0x48
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	401a      	ands	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003406:	e007      	b.n	8003418 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	431a      	orrs	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	401a      	ands	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003432:	e007      	b.n	8003444 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	431a      	orrs	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	431a      	orrs	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003462:	f023 0201 	bic.w	r2, r3, #1
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e006      	b.n	800347e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d12e      	bne.n	80034fc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034b6:	f7fe ff63 	bl	8002380 <HAL_GetTick>
 80034ba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034bc:	e012      	b.n	80034e4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034be:	f7fe ff5f 	bl	8002380 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b0a      	cmp	r3, #10
 80034ca:	d90b      	bls.n	80034e4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2205      	movs	r2, #5
 80034dc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e012      	b.n	800350a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1e5      	bne.n	80034be <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e006      	b.n	800350a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003512:	b480      	push	{r7}
 8003514:	b089      	sub	sp, #36	; 0x24
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003526:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003530:	7ffb      	ldrb	r3, [r7, #31]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d003      	beq.n	800353e <HAL_CAN_AddTxMessage+0x2c>
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	2b02      	cmp	r3, #2
 800353a:	f040 80ad 	bne.w	8003698 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10a      	bne.n	800355e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800354e:	2b00      	cmp	r3, #0
 8003550:	d105      	bne.n	800355e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8095 	beq.w	8003688 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	0e1b      	lsrs	r3, r3, #24
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003568:	2201      	movs	r2, #1
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	409a      	lsls	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10d      	bne.n	8003596 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003584:	68f9      	ldr	r1, [r7, #12]
 8003586:	6809      	ldr	r1, [r1, #0]
 8003588:	431a      	orrs	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3318      	adds	r3, #24
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	440b      	add	r3, r1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e00f      	b.n	80035b6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	3318      	adds	r3, #24
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	440b      	add	r3, r1
 80035b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6819      	ldr	r1, [r3, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	691a      	ldr	r2, [r3, #16]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3318      	adds	r3, #24
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	440b      	add	r3, r1
 80035c6:	3304      	adds	r3, #4
 80035c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	7d1b      	ldrb	r3, [r3, #20]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d111      	bne.n	80035f6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	3318      	adds	r3, #24
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	4413      	add	r3, r2
 80035de:	3304      	adds	r3, #4
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	6811      	ldr	r1, [r2, #0]
 80035e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	3318      	adds	r3, #24
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	440b      	add	r3, r1
 80035f2:	3304      	adds	r3, #4
 80035f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3307      	adds	r3, #7
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	061a      	lsls	r2, r3, #24
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3306      	adds	r3, #6
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3305      	adds	r3, #5
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	4313      	orrs	r3, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	3204      	adds	r2, #4
 8003616:	7812      	ldrb	r2, [r2, #0]
 8003618:	4610      	mov	r0, r2
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	6811      	ldr	r1, [r2, #0]
 800361e:	ea43 0200 	orr.w	r2, r3, r0
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	440b      	add	r3, r1
 8003628:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800362c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3303      	adds	r3, #3
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	061a      	lsls	r2, r3, #24
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3302      	adds	r3, #2
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3301      	adds	r3, #1
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	4313      	orrs	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	7812      	ldrb	r2, [r2, #0]
 800364e:	4610      	mov	r0, r2
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	6811      	ldr	r1, [r2, #0]
 8003654:	ea43 0200 	orr.w	r2, r3, r0
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	440b      	add	r3, r1
 800365e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003662:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	3318      	adds	r3, #24
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	4413      	add	r3, r2
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	6811      	ldr	r1, [r2, #0]
 8003676:	f043 0201 	orr.w	r2, r3, #1
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3318      	adds	r3, #24
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	440b      	add	r3, r1
 8003682:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	e00e      	b.n	80036a6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e006      	b.n	80036a6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80036b2:	b480      	push	{r7}
 80036b4:	b087      	sub	sp, #28
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	60f8      	str	r0, [r7, #12]
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d003      	beq.n	80036d6 <HAL_CAN_GetRxMessage+0x24>
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	f040 80f3 	bne.w	80038bc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d10e      	bne.n	80036fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d116      	bne.n	8003718 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0e7      	b.n	80038ca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d107      	bne.n	8003718 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0d8      	b.n	80038ca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	331b      	adds	r3, #27
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	4413      	add	r3, r2
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0204 	and.w	r2, r3, #4
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	331b      	adds	r3, #27
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	4413      	add	r3, r2
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0d5b      	lsrs	r3, r3, #21
 8003746:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	e00b      	b.n	8003768 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	331b      	adds	r3, #27
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	4413      	add	r3, r2
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	08db      	lsrs	r3, r3, #3
 8003760:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	331b      	adds	r3, #27
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	4413      	add	r3, r2
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0202 	and.w	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	331b      	adds	r3, #27
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	4413      	add	r3, r2
 800378a:	3304      	adds	r3, #4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 020f 	and.w	r2, r3, #15
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	331b      	adds	r3, #27
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	4413      	add	r3, r2
 80037a2:	3304      	adds	r3, #4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	331b      	adds	r3, #27
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	4413      	add	r3, r2
 80037ba:	3304      	adds	r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	0c1b      	lsrs	r3, r3, #16
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0a1a      	lsrs	r2, r3, #8
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	3301      	adds	r3, #1
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	4413      	add	r3, r2
 8003800:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	0c1a      	lsrs	r2, r3, #16
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	3302      	adds	r3, #2
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	4413      	add	r3, r2
 800381a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0e1a      	lsrs	r2, r3, #24
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	3303      	adds	r3, #3
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	4413      	add	r3, r2
 8003834:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	3304      	adds	r3, #4
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	4413      	add	r3, r2
 800384c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	0a1a      	lsrs	r2, r3, #8
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	3305      	adds	r3, #5
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4413      	add	r3, r2
 8003866:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	0c1a      	lsrs	r2, r3, #16
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	3306      	adds	r3, #6
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	4413      	add	r3, r2
 8003880:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	0e1a      	lsrs	r2, r3, #24
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	3307      	adds	r3, #7
 800388c:	b2d2      	uxtb	r2, r2
 800388e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0220 	orr.w	r2, r2, #32
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	e007      	b.n	80038b8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0220 	orr.w	r2, r2, #32
 80038b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e006      	b.n	80038ca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038ea:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80038ec:	7afb      	ldrb	r3, [r7, #11]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d002      	beq.n	80038f8 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80038f2:	7afb      	ldrb	r3, [r7, #11]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d10f      	bne.n	8003918 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	e005      	b.n	8003918 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003918:	68fb      	ldr	r3, [r7, #12]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003936:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d002      	beq.n	8003944 <HAL_CAN_ActivateNotification+0x1e>
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d109      	bne.n	8003958 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6959      	ldr	r1, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e006      	b.n	8003966 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b08a      	sub	sp, #40	; 0x28
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800397a:	2300      	movs	r3, #0
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d07c      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d023      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2201      	movs	r2, #1
 80039c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f983 	bl	8003ce0 <HAL_CAN_TxMailbox0CompleteCallback>
 80039da:	e016      	b.n	8003a0a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	e00c      	b.n	8003a0a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d004      	beq.n	8003a04 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
 8003a02:	e002      	b.n	8003a0a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f989 	bl	8003d1c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d024      	beq.n	8003a5e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f963 	bl	8003cf4 <HAL_CAN_TxMailbox1CompleteCallback>
 8003a2e:	e016      	b.n	8003a5e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	e00c      	b.n	8003a5e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d004      	beq.n	8003a58 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
 8003a56:	e002      	b.n	8003a5e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f969 	bl	8003d30 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d024      	beq.n	8003ab2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f943 	bl	8003d08 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a82:	e016      	b.n	8003ab2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	e00c      	b.n	8003ab2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	e002      	b.n	8003ab2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f949 	bl	8003d44 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00c      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2210      	movs	r2, #16
 8003ad4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2208      	movs	r2, #8
 8003af0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f93a 	bl	8003d6c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0303 	and.w	r3, r3, #3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f921 	bl	8003d58 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2210      	movs	r2, #16
 8003b38:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2208      	movs	r2, #8
 8003b54:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f91c 	bl	8003d94 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d009      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f903 	bl	8003d80 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b7a:	6a3b      	ldr	r3, [r7, #32]
 8003b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00b      	beq.n	8003b9c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2210      	movs	r2, #16
 8003b94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f906 	bl	8003da8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00b      	beq.n	8003bbe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f8ff 	bl	8003dbc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d07b      	beq.n	8003cc0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d072      	beq.n	8003cb8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d043      	beq.n	8003cb8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d03e      	beq.n	8003cb8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c40:	2b60      	cmp	r3, #96	; 0x60
 8003c42:	d02b      	beq.n	8003c9c <HAL_CAN_IRQHandler+0x32a>
 8003c44:	2b60      	cmp	r3, #96	; 0x60
 8003c46:	d82e      	bhi.n	8003ca6 <HAL_CAN_IRQHandler+0x334>
 8003c48:	2b50      	cmp	r3, #80	; 0x50
 8003c4a:	d022      	beq.n	8003c92 <HAL_CAN_IRQHandler+0x320>
 8003c4c:	2b50      	cmp	r3, #80	; 0x50
 8003c4e:	d82a      	bhi.n	8003ca6 <HAL_CAN_IRQHandler+0x334>
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d019      	beq.n	8003c88 <HAL_CAN_IRQHandler+0x316>
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d826      	bhi.n	8003ca6 <HAL_CAN_IRQHandler+0x334>
 8003c58:	2b30      	cmp	r3, #48	; 0x30
 8003c5a:	d010      	beq.n	8003c7e <HAL_CAN_IRQHandler+0x30c>
 8003c5c:	2b30      	cmp	r3, #48	; 0x30
 8003c5e:	d822      	bhi.n	8003ca6 <HAL_CAN_IRQHandler+0x334>
 8003c60:	2b10      	cmp	r3, #16
 8003c62:	d002      	beq.n	8003c6a <HAL_CAN_IRQHandler+0x2f8>
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d005      	beq.n	8003c74 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c68:	e01d      	b.n	8003ca6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	f043 0308 	orr.w	r3, r3, #8
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c72:	e019      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	f043 0310 	orr.w	r3, r3, #16
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c7c:	e014      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f043 0320 	orr.w	r3, r3, #32
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c86:	e00f      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c90:	e00a      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c9a:	e005      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ca6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cb6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f87c 	bl	8003dd0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3728      	adds	r7, #40	; 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <__NVIC_SetPriorityGrouping>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <__NVIC_SetPriorityGrouping+0x44>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e00:	4013      	ands	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <__NVIC_SetPriorityGrouping+0x44>)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	60d3      	str	r3, [r2, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <__NVIC_GetPriorityGrouping>:
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <__NVIC_GetPriorityGrouping+0x18>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	f003 0307 	and.w	r3, r3, #7
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <__NVIC_EnableIRQ>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	db0b      	blt.n	8003e72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	4907      	ldr	r1, [pc, #28]	; (8003e80 <__NVIC_EnableIRQ+0x38>)
 8003e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	2001      	movs	r0, #1
 8003e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	e000e100 	.word	0xe000e100

08003e84 <__NVIC_SetPriority>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	db0a      	blt.n	8003eae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	490c      	ldr	r1, [pc, #48]	; (8003ed0 <__NVIC_SetPriority+0x4c>)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	0112      	lsls	r2, r2, #4
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003eac:	e00a      	b.n	8003ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4908      	ldr	r1, [pc, #32]	; (8003ed4 <__NVIC_SetPriority+0x50>)
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	3b04      	subs	r3, #4
 8003ebc:	0112      	lsls	r2, r2, #4
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	761a      	strb	r2, [r3, #24]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000e100 	.word	0xe000e100
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <NVIC_EncodePriority>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f1c3 0307 	rsb	r3, r3, #7
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	bf28      	it	cs
 8003ef6:	2304      	movcs	r3, #4
 8003ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3304      	adds	r3, #4
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d902      	bls.n	8003f08 <NVIC_EncodePriority+0x30>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3b03      	subs	r3, #3
 8003f06:	e000      	b.n	8003f0a <NVIC_EncodePriority+0x32>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43da      	mvns	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	43d9      	mvns	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f30:	4313      	orrs	r3, r2
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3724      	adds	r7, #36	; 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff ff4c 	bl	8003de4 <__NVIC_SetPriorityGrouping>
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f66:	f7ff ff61 	bl	8003e2c <__NVIC_GetPriorityGrouping>
 8003f6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	6978      	ldr	r0, [r7, #20]
 8003f72:	f7ff ffb1 	bl	8003ed8 <NVIC_EncodePriority>
 8003f76:	4602      	mov	r2, r0
 8003f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ff80 	bl	8003e84 <__NVIC_SetPriority>
}
 8003f84:	bf00      	nop
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff ff54 	bl	8003e48 <__NVIC_EnableIRQ>
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb6:	e154      	b.n	8004262 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8146 	beq.w	800425c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d005      	beq.n	8003fe8 <HAL_GPIO_Init+0x40>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d130      	bne.n	800404a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800401e:	2201      	movs	r2, #1
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	f003 0201 	and.w	r2, r3, #1
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b03      	cmp	r3, #3
 8004054:	d017      	beq.n	8004086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	2203      	movs	r2, #3
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d123      	bne.n	80040da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	08da      	lsrs	r2, r3, #3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3208      	adds	r2, #8
 800409a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	220f      	movs	r2, #15
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3208      	adds	r2, #8
 80040d4:	6939      	ldr	r1, [r7, #16]
 80040d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	2203      	movs	r2, #3
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0203 	and.w	r2, r3, #3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80a0 	beq.w	800425c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800411c:	4b58      	ldr	r3, [pc, #352]	; (8004280 <HAL_GPIO_Init+0x2d8>)
 800411e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004120:	4a57      	ldr	r2, [pc, #348]	; (8004280 <HAL_GPIO_Init+0x2d8>)
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	6613      	str	r3, [r2, #96]	; 0x60
 8004128:	4b55      	ldr	r3, [pc, #340]	; (8004280 <HAL_GPIO_Init+0x2d8>)
 800412a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004134:	4a53      	ldr	r2, [pc, #332]	; (8004284 <HAL_GPIO_Init+0x2dc>)
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	3302      	adds	r3, #2
 800413c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f003 0303 	and.w	r3, r3, #3
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	220f      	movs	r2, #15
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800415e:	d019      	beq.n	8004194 <HAL_GPIO_Init+0x1ec>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a49      	ldr	r2, [pc, #292]	; (8004288 <HAL_GPIO_Init+0x2e0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d013      	beq.n	8004190 <HAL_GPIO_Init+0x1e8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a48      	ldr	r2, [pc, #288]	; (800428c <HAL_GPIO_Init+0x2e4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00d      	beq.n	800418c <HAL_GPIO_Init+0x1e4>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a47      	ldr	r2, [pc, #284]	; (8004290 <HAL_GPIO_Init+0x2e8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d007      	beq.n	8004188 <HAL_GPIO_Init+0x1e0>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a46      	ldr	r2, [pc, #280]	; (8004294 <HAL_GPIO_Init+0x2ec>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d101      	bne.n	8004184 <HAL_GPIO_Init+0x1dc>
 8004180:	2304      	movs	r3, #4
 8004182:	e008      	b.n	8004196 <HAL_GPIO_Init+0x1ee>
 8004184:	2307      	movs	r3, #7
 8004186:	e006      	b.n	8004196 <HAL_GPIO_Init+0x1ee>
 8004188:	2303      	movs	r3, #3
 800418a:	e004      	b.n	8004196 <HAL_GPIO_Init+0x1ee>
 800418c:	2302      	movs	r3, #2
 800418e:	e002      	b.n	8004196 <HAL_GPIO_Init+0x1ee>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_GPIO_Init+0x1ee>
 8004194:	2300      	movs	r3, #0
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	f002 0203 	and.w	r2, r2, #3
 800419c:	0092      	lsls	r2, r2, #2
 800419e:	4093      	lsls	r3, r2
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041a6:	4937      	ldr	r1, [pc, #220]	; (8004284 <HAL_GPIO_Init+0x2dc>)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	3302      	adds	r3, #2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041b4:	4b38      	ldr	r3, [pc, #224]	; (8004298 <HAL_GPIO_Init+0x2f0>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	43db      	mvns	r3, r3
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4013      	ands	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041d8:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <HAL_GPIO_Init+0x2f0>)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041de:	4b2e      	ldr	r3, [pc, #184]	; (8004298 <HAL_GPIO_Init+0x2f0>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004202:	4a25      	ldr	r2, [pc, #148]	; (8004298 <HAL_GPIO_Init+0x2f0>)
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004208:	4b23      	ldr	r3, [pc, #140]	; (8004298 <HAL_GPIO_Init+0x2f0>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	43db      	mvns	r3, r3
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4013      	ands	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800422c:	4a1a      	ldr	r2, [pc, #104]	; (8004298 <HAL_GPIO_Init+0x2f0>)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004232:	4b19      	ldr	r3, [pc, #100]	; (8004298 <HAL_GPIO_Init+0x2f0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004256:	4a10      	ldr	r2, [pc, #64]	; (8004298 <HAL_GPIO_Init+0x2f0>)
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	3301      	adds	r3, #1
 8004260:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	f47f aea3 	bne.w	8003fb8 <HAL_GPIO_Init+0x10>
  }
}
 8004272:	bf00      	nop
 8004274:	bf00      	nop
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40021000 	.word	0x40021000
 8004284:	40010000 	.word	0x40010000
 8004288:	48000400 	.word	0x48000400
 800428c:	48000800 	.word	0x48000800
 8004290:	48000c00 	.word	0x48000c00
 8004294:	48001000 	.word	0x48001000
 8004298:	40010400 	.word	0x40010400

0800429c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
 80042a8:	4613      	mov	r3, r2
 80042aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042ac:	787b      	ldrb	r3, [r7, #1]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042b8:	e002      	b.n	80042c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042ba:	887a      	ldrh	r2, [r7, #2]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4013      	ands	r3, r2
 80042e4:	041a      	lsls	r2, r3, #16
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	43d9      	mvns	r1, r3
 80042ea:	887b      	ldrh	r3, [r7, #2]
 80042ec:	400b      	ands	r3, r1
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	619a      	str	r2, [r3, #24]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <HAL_PWREx_GetVoltageRange+0x18>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800430c:	4618      	mov	r0, r3
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40007000 	.word	0x40007000

0800431c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432a:	d130      	bne.n	800438e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800432c:	4b23      	ldr	r3, [pc, #140]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004338:	d038      	beq.n	80043ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800433a:	4b20      	ldr	r3, [pc, #128]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004342:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004348:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800434a:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2232      	movs	r2, #50	; 0x32
 8004350:	fb02 f303 	mul.w	r3, r2, r3
 8004354:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0c9b      	lsrs	r3, r3, #18
 800435c:	3301      	adds	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004360:	e002      	b.n	8004368 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3b01      	subs	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004368:	4b14      	ldr	r3, [pc, #80]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004374:	d102      	bne.n	800437c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f2      	bne.n	8004362 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800437c:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004388:	d110      	bne.n	80043ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e00f      	b.n	80043ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800439a:	d007      	beq.n	80043ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800439c:	4b07      	ldr	r3, [pc, #28]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80043a4:	4a05      	ldr	r2, [pc, #20]	; (80043bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40007000 	.word	0x40007000
 80043c0:	20000000 	.word	0x20000000
 80043c4:	431bde83 	.word	0x431bde83

080043c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d102      	bne.n	80043dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f000 bc02 	b.w	8004be0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043dc:	4b96      	ldr	r3, [pc, #600]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043e6:	4b94      	ldr	r3, [pc, #592]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 80e4 	beq.w	80045c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <HAL_RCC_OscConfig+0x4c>
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	2b0c      	cmp	r3, #12
 8004408:	f040 808b 	bne.w	8004522 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b01      	cmp	r3, #1
 8004410:	f040 8087 	bne.w	8004522 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004414:	4b88      	ldr	r3, [pc, #544]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_OscConfig+0x64>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e3d9      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1a      	ldr	r2, [r3, #32]
 8004430:	4b81      	ldr	r3, [pc, #516]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d004      	beq.n	8004446 <HAL_RCC_OscConfig+0x7e>
 800443c:	4b7e      	ldr	r3, [pc, #504]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004444:	e005      	b.n	8004452 <HAL_RCC_OscConfig+0x8a>
 8004446:	4b7c      	ldr	r3, [pc, #496]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444c:	091b      	lsrs	r3, r3, #4
 800444e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004452:	4293      	cmp	r3, r2
 8004454:	d223      	bcs.n	800449e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fdbc 	bl	8004fd8 <RCC_SetFlashLatencyFromMSIRange>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e3ba      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800446a:	4b73      	ldr	r3, [pc, #460]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a72      	ldr	r2, [pc, #456]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004470:	f043 0308 	orr.w	r3, r3, #8
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b70      	ldr	r3, [pc, #448]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	496d      	ldr	r1, [pc, #436]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004488:	4b6b      	ldr	r3, [pc, #428]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	4968      	ldr	r1, [pc, #416]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
 800449c:	e025      	b.n	80044ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800449e:	4b66      	ldr	r3, [pc, #408]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a65      	ldr	r2, [pc, #404]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80044a4:	f043 0308 	orr.w	r3, r3, #8
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b63      	ldr	r3, [pc, #396]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	4960      	ldr	r1, [pc, #384]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044bc:	4b5e      	ldr	r3, [pc, #376]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	021b      	lsls	r3, r3, #8
 80044ca:	495b      	ldr	r1, [pc, #364]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fd7c 	bl	8004fd8 <RCC_SetFlashLatencyFromMSIRange>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e37a      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044ea:	f000 fc81 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 80044ee:	4602      	mov	r2, r0
 80044f0:	4b51      	ldr	r3, [pc, #324]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	091b      	lsrs	r3, r3, #4
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	4950      	ldr	r1, [pc, #320]	; (800463c <HAL_RCC_OscConfig+0x274>)
 80044fc:	5ccb      	ldrb	r3, [r1, r3]
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	fa22 f303 	lsr.w	r3, r2, r3
 8004506:	4a4e      	ldr	r2, [pc, #312]	; (8004640 <HAL_RCC_OscConfig+0x278>)
 8004508:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800450a:	4b4e      	ldr	r3, [pc, #312]	; (8004644 <HAL_RCC_OscConfig+0x27c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fd fd0c 	bl	8001f2c <HAL_InitTick>
 8004514:	4603      	mov	r3, r0
 8004516:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d052      	beq.n	80045c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	e35e      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d032      	beq.n	8004590 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800452a:	4b43      	ldr	r3, [pc, #268]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a42      	ldr	r2, [pc, #264]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004536:	f7fd ff23 	bl	8002380 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800453c:	e008      	b.n	8004550 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800453e:	f7fd ff1f 	bl	8002380 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e347      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004550:	4b39      	ldr	r3, [pc, #228]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800455c:	4b36      	ldr	r3, [pc, #216]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a35      	ldr	r2, [pc, #212]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004562:	f043 0308 	orr.w	r3, r3, #8
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b33      	ldr	r3, [pc, #204]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	4930      	ldr	r1, [pc, #192]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800457a:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	021b      	lsls	r3, r3, #8
 8004588:	492b      	ldr	r1, [pc, #172]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800458a:	4313      	orrs	r3, r2
 800458c:	604b      	str	r3, [r1, #4]
 800458e:	e01a      	b.n	80045c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004590:	4b29      	ldr	r3, [pc, #164]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a28      	ldr	r2, [pc, #160]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004596:	f023 0301 	bic.w	r3, r3, #1
 800459a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800459c:	f7fd fef0 	bl	8002380 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80045a4:	f7fd feec 	bl	8002380 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e314      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045b6:	4b20      	ldr	r3, [pc, #128]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x1dc>
 80045c2:	e000      	b.n	80045c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d073      	beq.n	80046ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d005      	beq.n	80045e4 <HAL_RCC_OscConfig+0x21c>
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b0c      	cmp	r3, #12
 80045dc:	d10e      	bne.n	80045fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d10b      	bne.n	80045fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d063      	beq.n	80046b8 <HAL_RCC_OscConfig+0x2f0>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d15f      	bne.n	80046b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e2f1      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004604:	d106      	bne.n	8004614 <HAL_RCC_OscConfig+0x24c>
 8004606:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a0b      	ldr	r2, [pc, #44]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800460c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	e025      	b.n	8004660 <HAL_RCC_OscConfig+0x298>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800461c:	d114      	bne.n	8004648 <HAL_RCC_OscConfig+0x280>
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a05      	ldr	r2, [pc, #20]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4b03      	ldr	r3, [pc, #12]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a02      	ldr	r2, [pc, #8]	; (8004638 <HAL_RCC_OscConfig+0x270>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e013      	b.n	8004660 <HAL_RCC_OscConfig+0x298>
 8004638:	40021000 	.word	0x40021000
 800463c:	0800f7d4 	.word	0x0800f7d4
 8004640:	20000000 	.word	0x20000000
 8004644:	2000000c 	.word	0x2000000c
 8004648:	4ba0      	ldr	r3, [pc, #640]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a9f      	ldr	r2, [pc, #636]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 800464e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4b9d      	ldr	r3, [pc, #628]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a9c      	ldr	r2, [pc, #624]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 800465a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d013      	beq.n	8004690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fd fe8a 	bl	8002380 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004670:	f7fd fe86 	bl	8002380 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e2ae      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004682:	4b92      	ldr	r3, [pc, #584]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0x2a8>
 800468e:	e014      	b.n	80046ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fd fe76 	bl	8002380 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004698:	f7fd fe72 	bl	8002380 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e29a      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80046aa:	4b88      	ldr	r3, [pc, #544]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x2d0>
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d060      	beq.n	8004788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_OscConfig+0x310>
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d119      	bne.n	8004706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d116      	bne.n	8004706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046d8:	4b7c      	ldr	r3, [pc, #496]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_OscConfig+0x328>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e277      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f0:	4b76      	ldr	r3, [pc, #472]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	061b      	lsls	r3, r3, #24
 80046fe:	4973      	ldr	r1, [pc, #460]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004700:	4313      	orrs	r3, r2
 8004702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004704:	e040      	b.n	8004788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d023      	beq.n	8004756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800470e:	4b6f      	ldr	r3, [pc, #444]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a6e      	ldr	r2, [pc, #440]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fd fe31 	bl	8002380 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004722:	f7fd fe2d 	bl	8002380 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e255      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004734:	4b65      	ldr	r3, [pc, #404]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004740:	4b62      	ldr	r3, [pc, #392]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	495f      	ldr	r1, [pc, #380]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
 8004754:	e018      	b.n	8004788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004756:	4b5d      	ldr	r3, [pc, #372]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a5c      	ldr	r2, [pc, #368]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 800475c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7fd fe0d 	bl	8002380 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800476a:	f7fd fe09 	bl	8002380 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e231      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800477c:	4b53      	ldr	r3, [pc, #332]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d03c      	beq.n	800480e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01c      	beq.n	80047d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800479c:	4b4b      	ldr	r3, [pc, #300]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 800479e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a2:	4a4a      	ldr	r2, [pc, #296]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fd fde8 	bl	8002380 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047b4:	f7fd fde4 	bl	8002380 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e20c      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047c6:	4b41      	ldr	r3, [pc, #260]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80047c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0ef      	beq.n	80047b4 <HAL_RCC_OscConfig+0x3ec>
 80047d4:	e01b      	b.n	800480e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d6:	4b3d      	ldr	r3, [pc, #244]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80047d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047dc:	4a3b      	ldr	r2, [pc, #236]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fd fdcb 	bl	8002380 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ee:	f7fd fdc7 	bl	8002380 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e1ef      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004800:	4b32      	ldr	r3, [pc, #200]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ef      	bne.n	80047ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80a6 	beq.w	8004968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481c:	2300      	movs	r3, #0
 800481e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004820:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10d      	bne.n	8004848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482c:	4b27      	ldr	r3, [pc, #156]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	4a26      	ldr	r2, [pc, #152]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004836:	6593      	str	r3, [r2, #88]	; 0x58
 8004838:	4b24      	ldr	r3, [pc, #144]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	60bb      	str	r3, [r7, #8]
 8004842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004844:	2301      	movs	r3, #1
 8004846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004848:	4b21      	ldr	r3, [pc, #132]	; (80048d0 <HAL_RCC_OscConfig+0x508>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d118      	bne.n	8004886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004854:	4b1e      	ldr	r3, [pc, #120]	; (80048d0 <HAL_RCC_OscConfig+0x508>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1d      	ldr	r2, [pc, #116]	; (80048d0 <HAL_RCC_OscConfig+0x508>)
 800485a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004860:	f7fd fd8e 	bl	8002380 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004868:	f7fd fd8a 	bl	8002380 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e1b2      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800487a:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <HAL_RCC_OscConfig+0x508>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d108      	bne.n	80048a0 <HAL_RCC_OscConfig+0x4d8>
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004894:	4a0d      	ldr	r2, [pc, #52]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800489e:	e029      	b.n	80048f4 <HAL_RCC_OscConfig+0x52c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	2b05      	cmp	r3, #5
 80048a6:	d115      	bne.n	80048d4 <HAL_RCC_OscConfig+0x50c>
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	4a07      	ldr	r2, [pc, #28]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80048b0:	f043 0304 	orr.w	r3, r3, #4
 80048b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80048ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048be:	4a03      	ldr	r2, [pc, #12]	; (80048cc <HAL_RCC_OscConfig+0x504>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048c8:	e014      	b.n	80048f4 <HAL_RCC_OscConfig+0x52c>
 80048ca:	bf00      	nop
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40007000 	.word	0x40007000
 80048d4:	4b9a      	ldr	r3, [pc, #616]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	4a99      	ldr	r2, [pc, #612]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 80048dc:	f023 0301 	bic.w	r3, r3, #1
 80048e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e4:	4b96      	ldr	r3, [pc, #600]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	4a95      	ldr	r2, [pc, #596]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 80048ec:	f023 0304 	bic.w	r3, r3, #4
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d016      	beq.n	800492a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fc:	f7fd fd40 	bl	8002380 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004902:	e00a      	b.n	800491a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004904:	f7fd fd3c 	bl	8002380 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e162      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800491a:	4b89      	ldr	r3, [pc, #548]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0ed      	beq.n	8004904 <HAL_RCC_OscConfig+0x53c>
 8004928:	e015      	b.n	8004956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492a:	f7fd fd29 	bl	8002380 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fd fd25 	bl	8002380 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e14b      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004948:	4b7d      	ldr	r3, [pc, #500]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1ed      	bne.n	8004932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004956:	7ffb      	ldrb	r3, [r7, #31]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d105      	bne.n	8004968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495c:	4b78      	ldr	r3, [pc, #480]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	4a77      	ldr	r2, [pc, #476]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004966:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d03c      	beq.n	80049ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01c      	beq.n	80049b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800497c:	4b70      	ldr	r3, [pc, #448]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 800497e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004982:	4a6f      	ldr	r2, [pc, #444]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fd fcf8 	bl	8002380 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004994:	f7fd fcf4 	bl	8002380 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e11c      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80049a6:	4b66      	ldr	r3, [pc, #408]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 80049a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0ef      	beq.n	8004994 <HAL_RCC_OscConfig+0x5cc>
 80049b4:	e01b      	b.n	80049ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80049b6:	4b62      	ldr	r3, [pc, #392]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 80049b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049bc:	4a60      	ldr	r2, [pc, #384]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c6:	f7fd fcdb 	bl	8002380 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ce:	f7fd fcd7 	bl	8002380 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e0ff      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049e0:	4b57      	ldr	r3, [pc, #348]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 80049e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1ef      	bne.n	80049ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80f3 	beq.w	8004bde <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	f040 80c9 	bne.w	8004b94 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a02:	4b4f      	ldr	r3, [pc, #316]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 0203 	and.w	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d12c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	3b01      	subs	r3, #1
 8004a22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d123      	bne.n	8004a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d11b      	bne.n	8004a70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d113      	bne.n	8004a70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	3b01      	subs	r3, #1
 8004a56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d109      	bne.n	8004a70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d06b      	beq.n	8004b48 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d062      	beq.n	8004b3c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a76:	4b32      	ldr	r3, [pc, #200]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e0ac      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a86:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a2d      	ldr	r2, [pc, #180]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a92:	f7fd fc75 	bl	8002380 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a9a:	f7fd fc71 	bl	8002380 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e099      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aac:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab8:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <HAL_RCC_OscConfig+0x77c>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ac8:	3a01      	subs	r2, #1
 8004aca:	0112      	lsls	r2, r2, #4
 8004acc:	4311      	orrs	r1, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ad2:	0212      	lsls	r2, r2, #8
 8004ad4:	4311      	orrs	r1, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ada:	0852      	lsrs	r2, r2, #1
 8004adc:	3a01      	subs	r2, #1
 8004ade:	0552      	lsls	r2, r2, #21
 8004ae0:	4311      	orrs	r1, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ae6:	0852      	lsrs	r2, r2, #1
 8004ae8:	3a01      	subs	r2, #1
 8004aea:	0652      	lsls	r2, r2, #25
 8004aec:	4311      	orrs	r1, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004af2:	06d2      	lsls	r2, r2, #27
 8004af4:	430a      	orrs	r2, r1
 8004af6:	4912      	ldr	r1, [pc, #72]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a0f      	ldr	r2, [pc, #60]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b08:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b14:	f7fd fc34 	bl	8002380 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fd fc30 	bl	8002380 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e058      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <HAL_RCC_OscConfig+0x778>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b3a:	e050      	b.n	8004bde <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e04f      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
 8004b40:	40021000 	.word	0x40021000
 8004b44:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b48:	4b27      	ldr	r3, [pc, #156]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d144      	bne.n	8004bde <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b54:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a23      	ldr	r2, [pc, #140]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b60:	4b21      	ldr	r3, [pc, #132]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4a20      	ldr	r2, [pc, #128]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b6c:	f7fd fc08 	bl	8002380 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fd fc04 	bl	8002380 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e02c      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b86:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0x7ac>
 8004b92:	e024      	b.n	8004bde <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d01f      	beq.n	8004bda <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a12      	ldr	r2, [pc, #72]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004ba0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fd fbeb 	bl	8002380 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bae:	f7fd fbe7 	bl	8002380 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e00f      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f0      	bne.n	8004bae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	4905      	ldr	r1, [pc, #20]	; (8004be8 <HAL_RCC_OscConfig+0x820>)
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_RCC_OscConfig+0x824>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60cb      	str	r3, [r1, #12]
 8004bd8:	e001      	b.n	8004bde <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40021000 	.word	0x40021000
 8004bec:	feeefffc 	.word	0xfeeefffc

08004bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0e7      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c04:	4b75      	ldr	r3, [pc, #468]	; (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d910      	bls.n	8004c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b72      	ldr	r3, [pc, #456]	; (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 0207 	bic.w	r2, r3, #7
 8004c1a:	4970      	ldr	r1, [pc, #448]	; (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b6e      	ldr	r3, [pc, #440]	; (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0cf      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d010      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	4b66      	ldr	r3, [pc, #408]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d908      	bls.n	8004c62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c50:	4b63      	ldr	r3, [pc, #396]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4960      	ldr	r1, [pc, #384]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d04c      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d107      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c76:	4b5a      	ldr	r3, [pc, #360]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d121      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0a6      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c8e:	4b54      	ldr	r3, [pc, #336]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d115      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e09a      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ca6:	4b4e      	ldr	r3, [pc, #312]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e08e      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb6:	4b4a      	ldr	r3, [pc, #296]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e086      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cc6:	4b46      	ldr	r3, [pc, #280]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f023 0203 	bic.w	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4943      	ldr	r1, [pc, #268]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd8:	f7fd fb52 	bl	8002380 <HAL_GetTick>
 8004cdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cde:	e00a      	b.n	8004cf6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce0:	f7fd fb4e 	bl	8002380 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e06e      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf6:	4b3a      	ldr	r3, [pc, #232]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 020c 	and.w	r2, r3, #12
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d1eb      	bne.n	8004ce0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d010      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d208      	bcs.n	8004d36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d24:	4b2e      	ldr	r3, [pc, #184]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	492b      	ldr	r1, [pc, #172]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d36:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0307 	and.w	r3, r3, #7
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d210      	bcs.n	8004d66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d44:	4b25      	ldr	r3, [pc, #148]	; (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 0207 	bic.w	r2, r3, #7
 8004d4c:	4923      	ldr	r1, [pc, #140]	; (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d54:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <HAL_RCC_ClockConfig+0x1ec>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e036      	b.n	8004dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d72:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	4918      	ldr	r1, [pc, #96]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d90:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4910      	ldr	r1, [pc, #64]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004da4:	f000 f824 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <HAL_RCC_ClockConfig+0x1f0>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	091b      	lsrs	r3, r3, #4
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	490b      	ldr	r1, [pc, #44]	; (8004de4 <HAL_RCC_ClockConfig+0x1f4>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc0:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <HAL_RCC_ClockConfig+0x1f8>)
 8004dc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004dc4:	4b09      	ldr	r3, [pc, #36]	; (8004dec <HAL_RCC_ClockConfig+0x1fc>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fd f8af 	bl	8001f2c <HAL_InitTick>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40022000 	.word	0x40022000
 8004de0:	40021000 	.word	0x40021000
 8004de4:	0800f7d4 	.word	0x0800f7d4
 8004de8:	20000000 	.word	0x20000000
 8004dec:	2000000c 	.word	0x2000000c

08004df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	; 0x24
 8004df4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dfe:	4b3e      	ldr	r3, [pc, #248]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 030c 	and.w	r3, r3, #12
 8004e06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e08:	4b3b      	ldr	r3, [pc, #236]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x34>
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b0c      	cmp	r3, #12
 8004e1c:	d121      	bne.n	8004e62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d11e      	bne.n	8004e62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e24:	4b34      	ldr	r3, [pc, #208]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d107      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e30:	4b31      	ldr	r3, [pc, #196]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	e005      	b.n	8004e4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e40:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	091b      	lsrs	r3, r3, #4
 8004e46:	f003 030f 	and.w	r3, r3, #15
 8004e4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e4c:	4a2b      	ldr	r2, [pc, #172]	; (8004efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10d      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e60:	e00a      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d102      	bne.n	8004e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e68:	4b25      	ldr	r3, [pc, #148]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e004      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d101      	bne.n	8004e78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e74:	4b22      	ldr	r3, [pc, #136]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b0c      	cmp	r3, #12
 8004e7c:	d134      	bne.n	8004ee8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCC_GetSysClockFreq+0xa6>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d003      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0xac>
 8004e94:	e005      	b.n	8004ea2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e96:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e98:	617b      	str	r3, [r7, #20]
      break;
 8004e9a:	e005      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e9c:	4b18      	ldr	r3, [pc, #96]	; (8004f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e9e:	617b      	str	r3, [r7, #20]
      break;
 8004ea0:	e002      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	617b      	str	r3, [r7, #20]
      break;
 8004ea6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ea8:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	fb03 f202 	mul.w	r2, r3, r2
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	0e5b      	lsrs	r3, r3, #25
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	3301      	adds	r3, #1
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3724      	adds	r7, #36	; 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	0800f7ec 	.word	0x0800f7ec
 8004f00:	00f42400 	.word	0x00f42400

08004f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f08:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000000 	.word	0x20000000

08004f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004f20:	f7ff fff0 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4904      	ldr	r1, [pc, #16]	; (8004f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40021000 	.word	0x40021000
 8004f44:	0800f7e4 	.word	0x0800f7e4

08004f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f4c:	f7ff ffda 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	0adb      	lsrs	r3, r3, #11
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4904      	ldr	r1, [pc, #16]	; (8004f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f5e:	5ccb      	ldrb	r3, [r1, r3]
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	0800f7e4 	.word	0x0800f7e4

08004f74 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	220f      	movs	r2, #15
 8004f82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004f84:	4b12      	ldr	r3, [pc, #72]	; (8004fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0203 	and.w	r2, r3, #3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004f90:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004fa8:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <HAL_RCC_GetClockConfig+0x5c>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	08db      	lsrs	r3, r3, #3
 8004fae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <HAL_RCC_GetClockConfig+0x60>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0207 	and.w	r2, r3, #7
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	601a      	str	r2, [r3, #0]
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40022000 	.word	0x40022000

08004fd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004fe4:	4b2a      	ldr	r3, [pc, #168]	; (8005090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ff0:	f7ff f986 	bl	8004300 <HAL_PWREx_GetVoltageRange>
 8004ff4:	6178      	str	r0, [r7, #20]
 8004ff6:	e014      	b.n	8005022 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ff8:	4b25      	ldr	r3, [pc, #148]	; (8005090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffc:	4a24      	ldr	r2, [pc, #144]	; (8005090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005002:	6593      	str	r3, [r2, #88]	; 0x58
 8005004:	4b22      	ldr	r3, [pc, #136]	; (8005090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005010:	f7ff f976 	bl	8004300 <HAL_PWREx_GetVoltageRange>
 8005014:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005016:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501a:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800501c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005020:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005028:	d10b      	bne.n	8005042 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b80      	cmp	r3, #128	; 0x80
 800502e:	d919      	bls.n	8005064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2ba0      	cmp	r3, #160	; 0xa0
 8005034:	d902      	bls.n	800503c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005036:	2302      	movs	r3, #2
 8005038:	613b      	str	r3, [r7, #16]
 800503a:	e013      	b.n	8005064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800503c:	2301      	movs	r3, #1
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	e010      	b.n	8005064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b80      	cmp	r3, #128	; 0x80
 8005046:	d902      	bls.n	800504e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005048:	2303      	movs	r3, #3
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	e00a      	b.n	8005064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d102      	bne.n	800505a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005054:	2302      	movs	r3, #2
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	e004      	b.n	8005064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b70      	cmp	r3, #112	; 0x70
 800505e:	d101      	bne.n	8005064 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005060:	2301      	movs	r3, #1
 8005062:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f023 0207 	bic.w	r2, r3, #7
 800506c:	4909      	ldr	r1, [pc, #36]	; (8005094 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005074:	4b07      	ldr	r3, [pc, #28]	; (8005094 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	429a      	cmp	r2, r3
 8005080:	d001      	beq.n	8005086 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40021000 	.word	0x40021000
 8005094:	40022000 	.word	0x40022000

08005098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050a0:	2300      	movs	r3, #0
 80050a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050a4:	2300      	movs	r3, #0
 80050a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d031      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050bc:	d01a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80050be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050c2:	d814      	bhi.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x56>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d009      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80050c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050cc:	d10f      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80050ce:	4b5d      	ldr	r3, [pc, #372]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	4a5c      	ldr	r2, [pc, #368]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050da:	e00c      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	2100      	movs	r1, #0
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f9f0 	bl	80054c8 <RCCEx_PLLSAI1_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050ec:	e003      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	74fb      	strb	r3, [r7, #19]
      break;
 80050f2:	e000      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80050f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050f6:	7cfb      	ldrb	r3, [r7, #19]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050fc:	4b51      	ldr	r3, [pc, #324]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005102:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	494e      	ldr	r1, [pc, #312]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005112:	e001      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 809e 	beq.w	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005126:	2300      	movs	r3, #0
 8005128:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800512a:	4b46      	ldr	r3, [pc, #280]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800513a:	2300      	movs	r3, #0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00d      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005140:	4b40      	ldr	r3, [pc, #256]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005144:	4a3f      	ldr	r2, [pc, #252]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514a:	6593      	str	r3, [r2, #88]	; 0x58
 800514c:	4b3d      	ldr	r3, [pc, #244]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800514e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005158:	2301      	movs	r3, #1
 800515a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800515c:	4b3a      	ldr	r3, [pc, #232]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a39      	ldr	r2, [pc, #228]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005168:	f7fd f90a 	bl	8002380 <HAL_GetTick>
 800516c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800516e:	e009      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005170:	f7fd f906 	bl	8002380 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b02      	cmp	r3, #2
 800517c:	d902      	bls.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	74fb      	strb	r3, [r7, #19]
        break;
 8005182:	e005      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005184:	4b30      	ldr	r3, [pc, #192]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0ef      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005190:	7cfb      	ldrb	r3, [r7, #19]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d15a      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005196:	4b2b      	ldr	r3, [pc, #172]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01e      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d019      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80051b2:	4b24      	ldr	r3, [pc, #144]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051be:	4b21      	ldr	r3, [pc, #132]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c4:	4a1f      	ldr	r2, [pc, #124]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d4:	4a1b      	ldr	r2, [pc, #108]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051de:	4a19      	ldr	r2, [pc, #100]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d016      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fd f8c6 	bl	8002380 <HAL_GetTick>
 80051f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051f6:	e00b      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f8:	f7fd f8c2 	bl	8002380 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	; 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d902      	bls.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	74fb      	strb	r3, [r7, #19]
            break;
 800520e:	e006      	b.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0ec      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800521e:	7cfb      	ldrb	r3, [r7, #19]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005224:	4b07      	ldr	r3, [pc, #28]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	4904      	ldr	r1, [pc, #16]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800523a:	e009      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800523c:	7cfb      	ldrb	r3, [r7, #19]
 800523e:	74bb      	strb	r3, [r7, #18]
 8005240:	e006      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005242:	bf00      	nop
 8005244:	40021000 	.word	0x40021000
 8005248:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005250:	7c7b      	ldrb	r3, [r7, #17]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d105      	bne.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005256:	4b9b      	ldr	r3, [pc, #620]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	4a9a      	ldr	r2, [pc, #616]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800525c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005260:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00a      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800526e:	4b95      	ldr	r3, [pc, #596]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f023 0203 	bic.w	r2, r3, #3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	4991      	ldr	r1, [pc, #580]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005290:	4b8c      	ldr	r3, [pc, #560]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	f023 020c 	bic.w	r2, r3, #12
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	4989      	ldr	r1, [pc, #548]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052b2:	4b84      	ldr	r3, [pc, #528]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c0:	4980      	ldr	r1, [pc, #512]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0320 	and.w	r3, r3, #32
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052d4:	4b7b      	ldr	r3, [pc, #492]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	4978      	ldr	r1, [pc, #480]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052f6:	4b73      	ldr	r3, [pc, #460]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005304:	496f      	ldr	r1, [pc, #444]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005318:	4b6a      	ldr	r3, [pc, #424]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4967      	ldr	r1, [pc, #412]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800533a:	4b62      	ldr	r3, [pc, #392]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800533c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005340:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	495e      	ldr	r1, [pc, #376]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800535c:	4b59      	ldr	r3, [pc, #356]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	4956      	ldr	r1, [pc, #344]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800537e:	4b51      	ldr	r3, [pc, #324]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	494d      	ldr	r1, [pc, #308]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d028      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053a0:	4b48      	ldr	r3, [pc, #288]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ae:	4945      	ldr	r1, [pc, #276]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053be:	d106      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053c0:	4b40      	ldr	r3, [pc, #256]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a3f      	ldr	r2, [pc, #252]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80053c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ca:	60d3      	str	r3, [r2, #12]
 80053cc:	e011      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053d6:	d10c      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3304      	adds	r3, #4
 80053dc:	2101      	movs	r1, #1
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 f872 	bl	80054c8 <RCCEx_PLLSAI1_Config>
 80053e4:	4603      	mov	r3, r0
 80053e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053e8:	7cfb      	ldrb	r3, [r7, #19]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80053ee:	7cfb      	ldrb	r3, [r7, #19]
 80053f0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d028      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053fe:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540c:	492d      	ldr	r1, [pc, #180]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800541c:	d106      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800541e:	4b29      	ldr	r3, [pc, #164]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	4a28      	ldr	r2, [pc, #160]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005428:	60d3      	str	r3, [r2, #12]
 800542a:	e011      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005434:	d10c      	bne.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	2101      	movs	r1, #1
 800543c:	4618      	mov	r0, r3
 800543e:	f000 f843 	bl	80054c8 <RCCEx_PLLSAI1_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800544c:	7cfb      	ldrb	r3, [r7, #19]
 800544e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01c      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800545c:	4b19      	ldr	r3, [pc, #100]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546a:	4916      	ldr	r1, [pc, #88]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800547a:	d10c      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	2102      	movs	r1, #2
 8005482:	4618      	mov	r0, r3
 8005484:	f000 f820 	bl	80054c8 <RCCEx_PLLSAI1_Config>
 8005488:	4603      	mov	r3, r0
 800548a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800548c:	7cfb      	ldrb	r3, [r7, #19]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8005492:	7cfb      	ldrb	r3, [r7, #19]
 8005494:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b0:	4904      	ldr	r1, [pc, #16]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40021000 	.word	0x40021000

080054c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054d6:	4b74      	ldr	r3, [pc, #464]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d018      	beq.n	8005514 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054e2:	4b71      	ldr	r3, [pc, #452]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0203 	and.w	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d10d      	bne.n	800550e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
       ||
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d009      	beq.n	800550e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054fa:	4b6b      	ldr	r3, [pc, #428]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	091b      	lsrs	r3, r3, #4
 8005500:	f003 0307 	and.w	r3, r3, #7
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
       ||
 800550a:	429a      	cmp	r2, r3
 800550c:	d047      	beq.n	800559e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
 8005512:	e044      	b.n	800559e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b03      	cmp	r3, #3
 800551a:	d018      	beq.n	800554e <RCCEx_PLLSAI1_Config+0x86>
 800551c:	2b03      	cmp	r3, #3
 800551e:	d825      	bhi.n	800556c <RCCEx_PLLSAI1_Config+0xa4>
 8005520:	2b01      	cmp	r3, #1
 8005522:	d002      	beq.n	800552a <RCCEx_PLLSAI1_Config+0x62>
 8005524:	2b02      	cmp	r3, #2
 8005526:	d009      	beq.n	800553c <RCCEx_PLLSAI1_Config+0x74>
 8005528:	e020      	b.n	800556c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800552a:	4b5f      	ldr	r3, [pc, #380]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d11d      	bne.n	8005572 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800553a:	e01a      	b.n	8005572 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800553c:	4b5a      	ldr	r3, [pc, #360]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005544:	2b00      	cmp	r3, #0
 8005546:	d116      	bne.n	8005576 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800554c:	e013      	b.n	8005576 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800554e:	4b56      	ldr	r3, [pc, #344]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10f      	bne.n	800557a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800555a:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800556a:	e006      	b.n	800557a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
      break;
 8005570:	e004      	b.n	800557c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005572:	bf00      	nop
 8005574:	e002      	b.n	800557c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005576:	bf00      	nop
 8005578:	e000      	b.n	800557c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800557a:	bf00      	nop
    }

    if(status == HAL_OK)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10d      	bne.n	800559e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005582:	4b49      	ldr	r3, [pc, #292]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	3b01      	subs	r3, #1
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	430b      	orrs	r3, r1
 8005598:	4943      	ldr	r1, [pc, #268]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800559a:	4313      	orrs	r3, r2
 800559c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d17c      	bne.n	800569e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055a4:	4b40      	ldr	r3, [pc, #256]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a3f      	ldr	r2, [pc, #252]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b0:	f7fc fee6 	bl	8002380 <HAL_GetTick>
 80055b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055b6:	e009      	b.n	80055cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055b8:	f7fc fee2 	bl	8002380 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d902      	bls.n	80055cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	73fb      	strb	r3, [r7, #15]
        break;
 80055ca:	e005      	b.n	80055d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055cc:	4b36      	ldr	r3, [pc, #216]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ef      	bne.n	80055b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d15f      	bne.n	800569e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d110      	bne.n	8005606 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055e4:	4b30      	ldr	r3, [pc, #192]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80055ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6892      	ldr	r2, [r2, #8]
 80055f4:	0211      	lsls	r1, r2, #8
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	68d2      	ldr	r2, [r2, #12]
 80055fa:	06d2      	lsls	r2, r2, #27
 80055fc:	430a      	orrs	r2, r1
 80055fe:	492a      	ldr	r1, [pc, #168]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005600:	4313      	orrs	r3, r2
 8005602:	610b      	str	r3, [r1, #16]
 8005604:	e027      	b.n	8005656 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d112      	bne.n	8005632 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800560c:	4b26      	ldr	r3, [pc, #152]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6892      	ldr	r2, [r2, #8]
 800561c:	0211      	lsls	r1, r2, #8
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6912      	ldr	r2, [r2, #16]
 8005622:	0852      	lsrs	r2, r2, #1
 8005624:	3a01      	subs	r2, #1
 8005626:	0552      	lsls	r2, r2, #21
 8005628:	430a      	orrs	r2, r1
 800562a:	491f      	ldr	r1, [pc, #124]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800562c:	4313      	orrs	r3, r2
 800562e:	610b      	str	r3, [r1, #16]
 8005630:	e011      	b.n	8005656 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005632:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800563a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6892      	ldr	r2, [r2, #8]
 8005642:	0211      	lsls	r1, r2, #8
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6952      	ldr	r2, [r2, #20]
 8005648:	0852      	lsrs	r2, r2, #1
 800564a:	3a01      	subs	r2, #1
 800564c:	0652      	lsls	r2, r2, #25
 800564e:	430a      	orrs	r2, r1
 8005650:	4915      	ldr	r1, [pc, #84]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005652:	4313      	orrs	r3, r2
 8005654:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005656:	4b14      	ldr	r3, [pc, #80]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a13      	ldr	r2, [pc, #76]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800565c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005660:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005662:	f7fc fe8d 	bl	8002380 <HAL_GetTick>
 8005666:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005668:	e009      	b.n	800567e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800566a:	f7fc fe89 	bl	8002380 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d902      	bls.n	800567e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	73fb      	strb	r3, [r7, #15]
          break;
 800567c:	e005      	b.n	800568a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800567e:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0ef      	beq.n	800566a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	4903      	ldr	r1, [pc, #12]	; (80056a8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800569a:	4313      	orrs	r3, r2
 800569c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40021000 	.word	0x40021000

080056ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e049      	b.n	8005752 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fc fb26 	bl	8001d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 fd78 	bl	80061e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	d001      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e03b      	b.n	80057ec <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d009      	beq.n	80057aa <HAL_TIM_Base_Start_IT+0x4e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579e:	d004      	beq.n	80057aa <HAL_TIM_Base_Start_IT+0x4e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a15      	ldr	r2, [pc, #84]	; (80057fc <HAL_TIM_Base_Start_IT+0xa0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d115      	bne.n	80057d6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	4b13      	ldr	r3, [pc, #76]	; (8005800 <HAL_TIM_Base_Start_IT+0xa4>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b06      	cmp	r3, #6
 80057ba:	d015      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x8c>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c2:	d011      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d4:	e008      	b.n	80057e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e000      	b.n	80057ea <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40014000 	.word	0x40014000
 8005800:	00010007 	.word	0x00010007

08005804 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e049      	b.n	80058aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f841 	bl	80058b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3304      	adds	r3, #4
 8005840:	4619      	mov	r1, r3
 8005842:	4610      	mov	r0, r2
 8005844:	f000 fccc 	bl	80061e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
	...

080058c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d109      	bne.n	80058ec <HAL_TIM_PWM_Start+0x24>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	e03c      	b.n	8005966 <HAL_TIM_PWM_Start+0x9e>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d109      	bne.n	8005906 <HAL_TIM_PWM_Start+0x3e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	bf14      	ite	ne
 80058fe:	2301      	movne	r3, #1
 8005900:	2300      	moveq	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	e02f      	b.n	8005966 <HAL_TIM_PWM_Start+0x9e>
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d109      	bne.n	8005920 <HAL_TIM_PWM_Start+0x58>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	bf14      	ite	ne
 8005918:	2301      	movne	r3, #1
 800591a:	2300      	moveq	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	e022      	b.n	8005966 <HAL_TIM_PWM_Start+0x9e>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b0c      	cmp	r3, #12
 8005924:	d109      	bne.n	800593a <HAL_TIM_PWM_Start+0x72>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	bf14      	ite	ne
 8005932:	2301      	movne	r3, #1
 8005934:	2300      	moveq	r3, #0
 8005936:	b2db      	uxtb	r3, r3
 8005938:	e015      	b.n	8005966 <HAL_TIM_PWM_Start+0x9e>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b10      	cmp	r3, #16
 800593e:	d109      	bne.n	8005954 <HAL_TIM_PWM_Start+0x8c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	bf14      	ite	ne
 800594c:	2301      	movne	r3, #1
 800594e:	2300      	moveq	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e008      	b.n	8005966 <HAL_TIM_PWM_Start+0x9e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e07e      	b.n	8005a6c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <HAL_TIM_PWM_Start+0xb6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800597c:	e023      	b.n	80059c6 <HAL_TIM_PWM_Start+0xfe>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b04      	cmp	r3, #4
 8005982:	d104      	bne.n	800598e <HAL_TIM_PWM_Start+0xc6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800598c:	e01b      	b.n	80059c6 <HAL_TIM_PWM_Start+0xfe>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d104      	bne.n	800599e <HAL_TIM_PWM_Start+0xd6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599c:	e013      	b.n	80059c6 <HAL_TIM_PWM_Start+0xfe>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b0c      	cmp	r3, #12
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_PWM_Start+0xe6>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059ac:	e00b      	b.n	80059c6 <HAL_TIM_PWM_Start+0xfe>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d104      	bne.n	80059be <HAL_TIM_PWM_Start+0xf6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059bc:	e003      	b.n	80059c6 <HAL_TIM_PWM_Start+0xfe>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 ff82 	bl	80068d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a26      	ldr	r2, [pc, #152]	; (8005a74 <HAL_TIM_PWM_Start+0x1ac>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x12a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a25      	ldr	r2, [pc, #148]	; (8005a78 <HAL_TIM_PWM_Start+0x1b0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x12a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a23      	ldr	r2, [pc, #140]	; (8005a7c <HAL_TIM_PWM_Start+0x1b4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d101      	bne.n	80059f6 <HAL_TIM_PWM_Start+0x12e>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <HAL_TIM_PWM_Start+0x130>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a18      	ldr	r2, [pc, #96]	; (8005a74 <HAL_TIM_PWM_Start+0x1ac>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d009      	beq.n	8005a2a <HAL_TIM_PWM_Start+0x162>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1e:	d004      	beq.n	8005a2a <HAL_TIM_PWM_Start+0x162>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a14      	ldr	r2, [pc, #80]	; (8005a78 <HAL_TIM_PWM_Start+0x1b0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d115      	bne.n	8005a56 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	4b13      	ldr	r3, [pc, #76]	; (8005a80 <HAL_TIM_PWM_Start+0x1b8>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b06      	cmp	r3, #6
 8005a3a:	d015      	beq.n	8005a68 <HAL_TIM_PWM_Start+0x1a0>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a42:	d011      	beq.n	8005a68 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f042 0201 	orr.w	r2, r2, #1
 8005a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a54:	e008      	b.n	8005a68 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0201 	orr.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	e000      	b.n	8005a6a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	00010007 	.word	0x00010007

08005a84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2200      	movs	r2, #0
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 ff1e 	bl	80068d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a39      	ldr	r2, [pc, #228]	; (8005b88 <HAL_TIM_PWM_Stop+0x104>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d009      	beq.n	8005aba <HAL_TIM_PWM_Stop+0x36>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a38      	ldr	r2, [pc, #224]	; (8005b8c <HAL_TIM_PWM_Stop+0x108>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d004      	beq.n	8005aba <HAL_TIM_PWM_Stop+0x36>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a36      	ldr	r2, [pc, #216]	; (8005b90 <HAL_TIM_PWM_Stop+0x10c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d101      	bne.n	8005abe <HAL_TIM_PWM_Stop+0x3a>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_TIM_PWM_Stop+0x3c>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d017      	beq.n	8005af4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6a1a      	ldr	r2, [r3, #32]
 8005aca:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ace:	4013      	ands	r3, r2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10f      	bne.n	8005af4 <HAL_TIM_PWM_Stop+0x70>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a1a      	ldr	r2, [r3, #32]
 8005ada:	f240 4344 	movw	r3, #1092	; 0x444
 8005ade:	4013      	ands	r3, r2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d107      	bne.n	8005af4 <HAL_TIM_PWM_Stop+0x70>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005af2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6a1a      	ldr	r2, [r3, #32]
 8005afa:	f241 1311 	movw	r3, #4369	; 0x1111
 8005afe:	4013      	ands	r3, r2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10f      	bne.n	8005b24 <HAL_TIM_PWM_Stop+0xa0>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6a1a      	ldr	r2, [r3, #32]
 8005b0a:	f240 4344 	movw	r3, #1092	; 0x444
 8005b0e:	4013      	ands	r3, r2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d107      	bne.n	8005b24 <HAL_TIM_PWM_Stop+0xa0>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <HAL_TIM_PWM_Stop+0xb0>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b32:	e023      	b.n	8005b7c <HAL_TIM_PWM_Stop+0xf8>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d104      	bne.n	8005b44 <HAL_TIM_PWM_Stop+0xc0>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b42:	e01b      	b.n	8005b7c <HAL_TIM_PWM_Stop+0xf8>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d104      	bne.n	8005b54 <HAL_TIM_PWM_Stop+0xd0>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b52:	e013      	b.n	8005b7c <HAL_TIM_PWM_Stop+0xf8>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	d104      	bne.n	8005b64 <HAL_TIM_PWM_Stop+0xe0>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b62:	e00b      	b.n	8005b7c <HAL_TIM_PWM_Stop+0xf8>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b10      	cmp	r3, #16
 8005b68:	d104      	bne.n	8005b74 <HAL_TIM_PWM_Stop+0xf0>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b72:	e003      	b.n	8005b7c <HAL_TIM_PWM_Stop+0xf8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40014400 	.word	0x40014400

08005b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d122      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d11b      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0202 	mvn.w	r2, #2
 8005bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fae3 	bl	80061a2 <HAL_TIM_IC_CaptureCallback>
 8005bdc:	e005      	b.n	8005bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fad5 	bl	800618e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fae6 	bl	80061b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d122      	bne.n	8005c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d11b      	bne.n	8005c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0204 	mvn.w	r2, #4
 8005c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fab9 	bl	80061a2 <HAL_TIM_IC_CaptureCallback>
 8005c30:	e005      	b.n	8005c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 faab 	bl	800618e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fabc 	bl	80061b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b08      	cmp	r3, #8
 8005c50:	d122      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d11b      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f06f 0208 	mvn.w	r2, #8
 8005c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2204      	movs	r2, #4
 8005c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fa8f 	bl	80061a2 <HAL_TIM_IC_CaptureCallback>
 8005c84:	e005      	b.n	8005c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa81 	bl	800618e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fa92 	bl	80061b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	2b10      	cmp	r3, #16
 8005ca4:	d122      	bne.n	8005cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0310 	and.w	r3, r3, #16
 8005cb0:	2b10      	cmp	r3, #16
 8005cb2:	d11b      	bne.n	8005cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0210 	mvn.w	r2, #16
 8005cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa65 	bl	80061a2 <HAL_TIM_IC_CaptureCallback>
 8005cd8:	e005      	b.n	8005ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fa57 	bl	800618e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fa68 	bl	80061b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d10e      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d107      	bne.n	8005d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f06f 0201 	mvn.w	r2, #1
 8005d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fb ff0c 	bl	8001b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d22:	2b80      	cmp	r3, #128	; 0x80
 8005d24:	d10e      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	2b80      	cmp	r3, #128	; 0x80
 8005d32:	d107      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fed8 	bl	8006af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d52:	d10e      	bne.n	8005d72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	2b80      	cmp	r3, #128	; 0x80
 8005d60:	d107      	bne.n	8005d72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fecb 	bl	8006b08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d10e      	bne.n	8005d9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d107      	bne.n	8005d9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fa16 	bl	80061ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d10e      	bne.n	8005dca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d107      	bne.n	8005dca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f06f 0220 	mvn.w	r2, #32
 8005dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fe8b 	bl	8006ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e0ff      	b.n	8005ff2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b14      	cmp	r3, #20
 8005dfe:	f200 80f0 	bhi.w	8005fe2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e02:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e08:	08005e5d 	.word	0x08005e5d
 8005e0c:	08005fe3 	.word	0x08005fe3
 8005e10:	08005fe3 	.word	0x08005fe3
 8005e14:	08005fe3 	.word	0x08005fe3
 8005e18:	08005e9d 	.word	0x08005e9d
 8005e1c:	08005fe3 	.word	0x08005fe3
 8005e20:	08005fe3 	.word	0x08005fe3
 8005e24:	08005fe3 	.word	0x08005fe3
 8005e28:	08005edf 	.word	0x08005edf
 8005e2c:	08005fe3 	.word	0x08005fe3
 8005e30:	08005fe3 	.word	0x08005fe3
 8005e34:	08005fe3 	.word	0x08005fe3
 8005e38:	08005f1f 	.word	0x08005f1f
 8005e3c:	08005fe3 	.word	0x08005fe3
 8005e40:	08005fe3 	.word	0x08005fe3
 8005e44:	08005fe3 	.word	0x08005fe3
 8005e48:	08005f61 	.word	0x08005f61
 8005e4c:	08005fe3 	.word	0x08005fe3
 8005e50:	08005fe3 	.word	0x08005fe3
 8005e54:	08005fe3 	.word	0x08005fe3
 8005e58:	08005fa1 	.word	0x08005fa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68b9      	ldr	r1, [r7, #8]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fa20 	bl	80062a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 0208 	orr.w	r2, r2, #8
 8005e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0204 	bic.w	r2, r2, #4
 8005e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6999      	ldr	r1, [r3, #24]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	619a      	str	r2, [r3, #24]
      break;
 8005e9a:	e0a5      	b.n	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68b9      	ldr	r1, [r7, #8]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fa7c 	bl	80063a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699a      	ldr	r2, [r3, #24]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6999      	ldr	r1, [r3, #24]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	021a      	lsls	r2, r3, #8
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	619a      	str	r2, [r3, #24]
      break;
 8005edc:	e084      	b.n	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fad5 	bl	8006494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0208 	orr.w	r2, r2, #8
 8005ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0204 	bic.w	r2, r2, #4
 8005f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69d9      	ldr	r1, [r3, #28]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	61da      	str	r2, [r3, #28]
      break;
 8005f1c:	e064      	b.n	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68b9      	ldr	r1, [r7, #8]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fb2d 	bl	8006584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69da      	ldr	r2, [r3, #28]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69da      	ldr	r2, [r3, #28]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69d9      	ldr	r1, [r3, #28]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	021a      	lsls	r2, r3, #8
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	61da      	str	r2, [r3, #28]
      break;
 8005f5e:	e043      	b.n	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fb6a 	bl	8006640 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0208 	orr.w	r2, r2, #8
 8005f7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0204 	bic.w	r2, r2, #4
 8005f8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f9e:	e023      	b.n	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fba2 	bl	80066f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	021a      	lsls	r2, r3, #8
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fe0:	e002      	b.n	8005fe8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop

08005ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_TIM_ConfigClockSource+0x1c>
 8006014:	2302      	movs	r3, #2
 8006016:	e0b6      	b.n	8006186 <HAL_TIM_ConfigClockSource+0x18a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800603a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006054:	d03e      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0xd8>
 8006056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605a:	f200 8087 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x170>
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006062:	f000 8086 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x176>
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606a:	d87f      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 800606c:	2b70      	cmp	r3, #112	; 0x70
 800606e:	d01a      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0xaa>
 8006070:	2b70      	cmp	r3, #112	; 0x70
 8006072:	d87b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 8006074:	2b60      	cmp	r3, #96	; 0x60
 8006076:	d050      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x11e>
 8006078:	2b60      	cmp	r3, #96	; 0x60
 800607a:	d877      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 800607c:	2b50      	cmp	r3, #80	; 0x50
 800607e:	d03c      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0xfe>
 8006080:	2b50      	cmp	r3, #80	; 0x50
 8006082:	d873      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d058      	beq.n	800613a <HAL_TIM_ConfigClockSource+0x13e>
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d86f      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 800608c:	2b30      	cmp	r3, #48	; 0x30
 800608e:	d064      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15e>
 8006090:	2b30      	cmp	r3, #48	; 0x30
 8006092:	d86b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d060      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15e>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d867      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d05c      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15e>
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d05a      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15e>
 80060a4:	e062      	b.n	800616c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6899      	ldr	r1, [r3, #8]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f000 fbef 	bl	8006898 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	609a      	str	r2, [r3, #8]
      break;
 80060d2:	e04f      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	6899      	ldr	r1, [r3, #8]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f000 fbd8 	bl	8006898 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060f6:	609a      	str	r2, [r3, #8]
      break;
 80060f8:	e03c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6859      	ldr	r1, [r3, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	461a      	mov	r2, r3
 8006108:	f000 fb4c 	bl	80067a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2150      	movs	r1, #80	; 0x50
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fba5 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 8006118:	e02c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6859      	ldr	r1, [r3, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	461a      	mov	r2, r3
 8006128:	f000 fb6b 	bl	8006802 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2160      	movs	r1, #96	; 0x60
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fb95 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 8006138:	e01c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	461a      	mov	r2, r3
 8006148:	f000 fb2c 	bl	80067a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2140      	movs	r1, #64	; 0x40
 8006152:	4618      	mov	r0, r3
 8006154:	f000 fb85 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 8006158:	e00c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f000 fb7c 	bl	8006862 <TIM_ITRx_SetConfig>
      break;
 800616a:	e003      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]
      break;
 8006170:	e000      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a2a      	ldr	r2, [pc, #168]	; (800629c <TIM_Base_SetConfig+0xbc>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d003      	beq.n	8006200 <TIM_Base_SetConfig+0x20>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d108      	bne.n	8006212 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a21      	ldr	r2, [pc, #132]	; (800629c <TIM_Base_SetConfig+0xbc>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00b      	beq.n	8006232 <TIM_Base_SetConfig+0x52>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006220:	d007      	beq.n	8006232 <TIM_Base_SetConfig+0x52>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <TIM_Base_SetConfig+0xc0>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <TIM_Base_SetConfig+0x52>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <TIM_Base_SetConfig+0xc4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d108      	bne.n	8006244 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a0c      	ldr	r2, [pc, #48]	; (800629c <TIM_Base_SetConfig+0xbc>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d007      	beq.n	8006280 <TIM_Base_SetConfig+0xa0>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a0b      	ldr	r2, [pc, #44]	; (80062a0 <TIM_Base_SetConfig+0xc0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_Base_SetConfig+0xa0>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <TIM_Base_SetConfig+0xc4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d103      	bne.n	8006288 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	615a      	str	r2, [r3, #20]
}
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40014400 	.word	0x40014400

080062a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f023 0201 	bic.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 0302 	bic.w	r3, r3, #2
 80062f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a24      	ldr	r2, [pc, #144]	; (8006394 <TIM_OC1_SetConfig+0xec>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d007      	beq.n	8006318 <TIM_OC1_SetConfig+0x70>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a23      	ldr	r2, [pc, #140]	; (8006398 <TIM_OC1_SetConfig+0xf0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d003      	beq.n	8006318 <TIM_OC1_SetConfig+0x70>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a22      	ldr	r2, [pc, #136]	; (800639c <TIM_OC1_SetConfig+0xf4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d10c      	bne.n	8006332 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f023 0308 	bic.w	r3, r3, #8
 800631e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f023 0304 	bic.w	r3, r3, #4
 8006330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a17      	ldr	r2, [pc, #92]	; (8006394 <TIM_OC1_SetConfig+0xec>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d007      	beq.n	800634a <TIM_OC1_SetConfig+0xa2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a16      	ldr	r2, [pc, #88]	; (8006398 <TIM_OC1_SetConfig+0xf0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d003      	beq.n	800634a <TIM_OC1_SetConfig+0xa2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a15      	ldr	r2, [pc, #84]	; (800639c <TIM_OC1_SetConfig+0xf4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d111      	bne.n	800636e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	621a      	str	r2, [r3, #32]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	40012c00 	.word	0x40012c00
 8006398:	40014000 	.word	0x40014000
 800639c:	40014400 	.word	0x40014400

080063a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	f023 0210 	bic.w	r2, r3, #16
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f023 0320 	bic.w	r3, r3, #32
 80063ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a22      	ldr	r2, [pc, #136]	; (8006488 <TIM_OC2_SetConfig+0xe8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d10d      	bne.n	8006420 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800640a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a19      	ldr	r2, [pc, #100]	; (8006488 <TIM_OC2_SetConfig+0xe8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d007      	beq.n	8006438 <TIM_OC2_SetConfig+0x98>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a18      	ldr	r2, [pc, #96]	; (800648c <TIM_OC2_SetConfig+0xec>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_OC2_SetConfig+0x98>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a17      	ldr	r2, [pc, #92]	; (8006490 <TIM_OC2_SetConfig+0xf0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d113      	bne.n	8006460 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800643e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	4313      	orrs	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	621a      	str	r2, [r3, #32]
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40012c00 	.word	0x40012c00
 800648c:	40014000 	.word	0x40014000
 8006490:	40014400 	.word	0x40014400

08006494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0303 	bic.w	r3, r3, #3
 80064ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	021b      	lsls	r3, r3, #8
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a21      	ldr	r2, [pc, #132]	; (8006578 <TIM_OC3_SetConfig+0xe4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10d      	bne.n	8006512 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a18      	ldr	r2, [pc, #96]	; (8006578 <TIM_OC3_SetConfig+0xe4>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <TIM_OC3_SetConfig+0x96>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a17      	ldr	r2, [pc, #92]	; (800657c <TIM_OC3_SetConfig+0xe8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <TIM_OC3_SetConfig+0x96>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a16      	ldr	r2, [pc, #88]	; (8006580 <TIM_OC3_SetConfig+0xec>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d113      	bne.n	8006552 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	011b      	lsls	r3, r3, #4
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	621a      	str	r2, [r3, #32]
}
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40014000 	.word	0x40014000
 8006580:	40014400 	.word	0x40014400

08006584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	031b      	lsls	r3, r3, #12
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a14      	ldr	r2, [pc, #80]	; (8006634 <TIM_OC4_SetConfig+0xb0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d007      	beq.n	80065f8 <TIM_OC4_SetConfig+0x74>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a13      	ldr	r2, [pc, #76]	; (8006638 <TIM_OC4_SetConfig+0xb4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d003      	beq.n	80065f8 <TIM_OC4_SetConfig+0x74>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a12      	ldr	r2, [pc, #72]	; (800663c <TIM_OC4_SetConfig+0xb8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d109      	bne.n	800660c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	019b      	lsls	r3, r3, #6
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	621a      	str	r2, [r3, #32]
}
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40014000 	.word	0x40014000
 800663c:	40014400 	.word	0x40014400

08006640 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800666e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006684:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	041b      	lsls	r3, r3, #16
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a13      	ldr	r2, [pc, #76]	; (80066e4 <TIM_OC5_SetConfig+0xa4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d007      	beq.n	80066aa <TIM_OC5_SetConfig+0x6a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <TIM_OC5_SetConfig+0xa8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_OC5_SetConfig+0x6a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a11      	ldr	r2, [pc, #68]	; (80066ec <TIM_OC5_SetConfig+0xac>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d109      	bne.n	80066be <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	621a      	str	r2, [r3, #32]
}
 80066d8:	bf00      	nop
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40012c00 	.word	0x40012c00
 80066e8:	40014000 	.word	0x40014000
 80066ec:	40014400 	.word	0x40014400

080066f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800671e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	051b      	lsls	r3, r3, #20
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a14      	ldr	r2, [pc, #80]	; (8006798 <TIM_OC6_SetConfig+0xa8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d007      	beq.n	800675c <TIM_OC6_SetConfig+0x6c>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a13      	ldr	r2, [pc, #76]	; (800679c <TIM_OC6_SetConfig+0xac>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC6_SetConfig+0x6c>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a12      	ldr	r2, [pc, #72]	; (80067a0 <TIM_OC6_SetConfig+0xb0>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d109      	bne.n	8006770 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	029b      	lsls	r3, r3, #10
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	40012c00 	.word	0x40012c00
 800679c:	40014000 	.word	0x40014000
 80067a0:	40014400 	.word	0x40014400

080067a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0201 	bic.w	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 030a 	bic.w	r3, r3, #10
 80067e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	bf00      	nop
 80067f8:	371c      	adds	r7, #28
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006802:	b480      	push	{r7}
 8006804:	b087      	sub	sp, #28
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	f023 0210 	bic.w	r2, r3, #16
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800682c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	031b      	lsls	r3, r3, #12
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800683e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006862:	b480      	push	{r7}
 8006864:	b085      	sub	sp, #20
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	f043 0307 	orr.w	r3, r3, #7
 8006884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	609a      	str	r2, [r3, #8]
}
 800688c:	bf00      	nop
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	021a      	lsls	r2, r3, #8
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4313      	orrs	r3, r2
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	609a      	str	r2, [r3, #8]
}
 80068cc:	bf00      	nop
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f003 031f 	and.w	r3, r3, #31
 80068ea:	2201      	movs	r2, #1
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a1a      	ldr	r2, [r3, #32]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	401a      	ands	r2, r3
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1a      	ldr	r2, [r3, #32]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f003 031f 	and.w	r3, r3, #31
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	fa01 f303 	lsl.w	r3, r1, r3
 8006910:	431a      	orrs	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	621a      	str	r2, [r3, #32]
}
 8006916:	bf00      	nop
 8006918:	371c      	adds	r7, #28
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
	...

08006924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006938:	2302      	movs	r3, #2
 800693a:	e04f      	b.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a21      	ldr	r2, [pc, #132]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d108      	bne.n	8006978 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800696c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a14      	ldr	r2, [pc, #80]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d009      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d004      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a10      	ldr	r2, [pc, #64]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d10c      	bne.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	4313      	orrs	r3, r2
 80069c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68ba      	ldr	r2, [r7, #8]
 80069c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40014000 	.word	0x40014000

080069f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d101      	bne.n	8006a0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	e060      	b.n	8006ace <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	041b      	lsls	r3, r3, #16
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a14      	ldr	r2, [pc, #80]	; (8006adc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d115      	bne.n	8006abc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9a:	051b      	lsls	r3, r3, #20
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40012c00 	.word	0x40012c00

08006ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e040      	b.n	8006bb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7fb f99c 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2224      	movs	r2, #36	; 0x24
 8006b48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 0201 	bic.w	r2, r2, #1
 8006b58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f82c 	bl	8006bb8 <UART_SetConfig>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d101      	bne.n	8006b6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e022      	b.n	8006bb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa7a 	bl	800706c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fb01 	bl	80071b0 <UART_CheckIdleState>
 8006bae:	4603      	mov	r3, r0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bbc:	b08a      	sub	sp, #40	; 0x28
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b9e      	ldr	r3, [pc, #632]	; (8006e60 <UART_SetConfig+0x2a8>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a93      	ldr	r2, [pc, #588]	; (8006e64 <UART_SetConfig+0x2ac>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d004      	beq.n	8006c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c20:	4313      	orrs	r3, r2
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c34:	430a      	orrs	r2, r1
 8006c36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a8a      	ldr	r2, [pc, #552]	; (8006e68 <UART_SetConfig+0x2b0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d126      	bne.n	8006c90 <UART_SetConfig+0xd8>
 8006c42:	4b8a      	ldr	r3, [pc, #552]	; (8006e6c <UART_SetConfig+0x2b4>)
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d81b      	bhi.n	8006c88 <UART_SetConfig+0xd0>
 8006c50:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <UART_SetConfig+0xa0>)
 8006c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c56:	bf00      	nop
 8006c58:	08006c69 	.word	0x08006c69
 8006c5c:	08006c79 	.word	0x08006c79
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c81 	.word	0x08006c81
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c6e:	e0ab      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006c70:	2302      	movs	r3, #2
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c76:	e0a7      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c7e:	e0a3      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006c80:	2308      	movs	r3, #8
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c86:	e09f      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8e:	e09b      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a76      	ldr	r2, [pc, #472]	; (8006e70 <UART_SetConfig+0x2b8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d138      	bne.n	8006d0c <UART_SetConfig+0x154>
 8006c9a:	4b74      	ldr	r3, [pc, #464]	; (8006e6c <UART_SetConfig+0x2b4>)
 8006c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca0:	f003 030c 	and.w	r3, r3, #12
 8006ca4:	2b0c      	cmp	r3, #12
 8006ca6:	d82d      	bhi.n	8006d04 <UART_SetConfig+0x14c>
 8006ca8:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <UART_SetConfig+0xf8>)
 8006caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cae:	bf00      	nop
 8006cb0:	08006ce5 	.word	0x08006ce5
 8006cb4:	08006d05 	.word	0x08006d05
 8006cb8:	08006d05 	.word	0x08006d05
 8006cbc:	08006d05 	.word	0x08006d05
 8006cc0:	08006cf5 	.word	0x08006cf5
 8006cc4:	08006d05 	.word	0x08006d05
 8006cc8:	08006d05 	.word	0x08006d05
 8006ccc:	08006d05 	.word	0x08006d05
 8006cd0:	08006ced 	.word	0x08006ced
 8006cd4:	08006d05 	.word	0x08006d05
 8006cd8:	08006d05 	.word	0x08006d05
 8006cdc:	08006d05 	.word	0x08006d05
 8006ce0:	08006cfd 	.word	0x08006cfd
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cea:	e06d      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006cec:	2302      	movs	r3, #2
 8006cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf2:	e069      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cfa:	e065      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006cfc:	2308      	movs	r3, #8
 8006cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d02:	e061      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006d04:	2310      	movs	r3, #16
 8006d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d0a:	e05d      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a58      	ldr	r2, [pc, #352]	; (8006e74 <UART_SetConfig+0x2bc>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d125      	bne.n	8006d62 <UART_SetConfig+0x1aa>
 8006d16:	4b55      	ldr	r3, [pc, #340]	; (8006e6c <UART_SetConfig+0x2b4>)
 8006d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d20:	2b30      	cmp	r3, #48	; 0x30
 8006d22:	d016      	beq.n	8006d52 <UART_SetConfig+0x19a>
 8006d24:	2b30      	cmp	r3, #48	; 0x30
 8006d26:	d818      	bhi.n	8006d5a <UART_SetConfig+0x1a2>
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	d00a      	beq.n	8006d42 <UART_SetConfig+0x18a>
 8006d2c:	2b20      	cmp	r3, #32
 8006d2e:	d814      	bhi.n	8006d5a <UART_SetConfig+0x1a2>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <UART_SetConfig+0x182>
 8006d34:	2b10      	cmp	r3, #16
 8006d36:	d008      	beq.n	8006d4a <UART_SetConfig+0x192>
 8006d38:	e00f      	b.n	8006d5a <UART_SetConfig+0x1a2>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d40:	e042      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006d42:	2302      	movs	r3, #2
 8006d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d48:	e03e      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006d4a:	2304      	movs	r3, #4
 8006d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d50:	e03a      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006d52:	2308      	movs	r3, #8
 8006d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d58:	e036      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006d5a:	2310      	movs	r3, #16
 8006d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d60:	e032      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a3f      	ldr	r2, [pc, #252]	; (8006e64 <UART_SetConfig+0x2ac>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d12a      	bne.n	8006dc2 <UART_SetConfig+0x20a>
 8006d6c:	4b3f      	ldr	r3, [pc, #252]	; (8006e6c <UART_SetConfig+0x2b4>)
 8006d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d72:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d7a:	d01a      	beq.n	8006db2 <UART_SetConfig+0x1fa>
 8006d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d80:	d81b      	bhi.n	8006dba <UART_SetConfig+0x202>
 8006d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d86:	d00c      	beq.n	8006da2 <UART_SetConfig+0x1ea>
 8006d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8c:	d815      	bhi.n	8006dba <UART_SetConfig+0x202>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <UART_SetConfig+0x1e2>
 8006d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d96:	d008      	beq.n	8006daa <UART_SetConfig+0x1f2>
 8006d98:	e00f      	b.n	8006dba <UART_SetConfig+0x202>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da0:	e012      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006da2:	2302      	movs	r3, #2
 8006da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da8:	e00e      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006daa:	2304      	movs	r3, #4
 8006dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db0:	e00a      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006db2:	2308      	movs	r3, #8
 8006db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db8:	e006      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006dba:	2310      	movs	r3, #16
 8006dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dc0:	e002      	b.n	8006dc8 <UART_SetConfig+0x210>
 8006dc2:	2310      	movs	r3, #16
 8006dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a25      	ldr	r2, [pc, #148]	; (8006e64 <UART_SetConfig+0x2ac>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	f040 808a 	bne.w	8006ee8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d824      	bhi.n	8006e26 <UART_SetConfig+0x26e>
 8006ddc:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x22c>)
 8006dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de2:	bf00      	nop
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e27 	.word	0x08006e27
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	08006e27 	.word	0x08006e27
 8006df4:	08006e17 	.word	0x08006e17
 8006df8:	08006e27 	.word	0x08006e27
 8006dfc:	08006e27 	.word	0x08006e27
 8006e00:	08006e27 	.word	0x08006e27
 8006e04:	08006e1f 	.word	0x08006e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e08:	f7fe f888 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 8006e0c:	61f8      	str	r0, [r7, #28]
        break;
 8006e0e:	e010      	b.n	8006e32 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e10:	4b19      	ldr	r3, [pc, #100]	; (8006e78 <UART_SetConfig+0x2c0>)
 8006e12:	61fb      	str	r3, [r7, #28]
        break;
 8006e14:	e00d      	b.n	8006e32 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e16:	f7fd ffeb 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8006e1a:	61f8      	str	r0, [r7, #28]
        break;
 8006e1c:	e009      	b.n	8006e32 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e22:	61fb      	str	r3, [r7, #28]
        break;
 8006e24:	e005      	b.n	8006e32 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 8109 	beq.w	800704c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685a      	ldr	r2, [r3, #4]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	4413      	add	r3, r2
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d305      	bcc.n	8006e56 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d912      	bls.n	8006e7c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e5c:	e0f6      	b.n	800704c <UART_SetConfig+0x494>
 8006e5e:	bf00      	nop
 8006e60:	efff69f3 	.word	0xefff69f3
 8006e64:	40008000 	.word	0x40008000
 8006e68:	40013800 	.word	0x40013800
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	40004400 	.word	0x40004400
 8006e74:	40004800 	.word	0x40004800
 8006e78:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	461c      	mov	r4, r3
 8006e82:	4615      	mov	r5, r2
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	022b      	lsls	r3, r5, #8
 8006e8e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e92:	0222      	lsls	r2, r4, #8
 8006e94:	68f9      	ldr	r1, [r7, #12]
 8006e96:	6849      	ldr	r1, [r1, #4]
 8006e98:	0849      	lsrs	r1, r1, #1
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	4688      	mov	r8, r1
 8006e9e:	4681      	mov	r9, r0
 8006ea0:	eb12 0a08 	adds.w	sl, r2, r8
 8006ea4:	eb43 0b09 	adc.w	fp, r3, r9
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb6:	4650      	mov	r0, sl
 8006eb8:	4659      	mov	r1, fp
 8006eba:	f7f9 fee5 	bl	8000c88 <__aeabi_uldivmod>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ecc:	d308      	bcc.n	8006ee0 <UART_SetConfig+0x328>
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ed4:	d204      	bcs.n	8006ee0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	60da      	str	r2, [r3, #12]
 8006ede:	e0b5      	b.n	800704c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ee6:	e0b1      	b.n	800704c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef0:	d15d      	bne.n	8006fae <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	d827      	bhi.n	8006f4a <UART_SetConfig+0x392>
 8006efa:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0x348>)
 8006efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	08006f4b 	.word	0x08006f4b
 8006f10:	08006f3b 	.word	0x08006f3b
 8006f14:	08006f4b 	.word	0x08006f4b
 8006f18:	08006f4b 	.word	0x08006f4b
 8006f1c:	08006f4b 	.word	0x08006f4b
 8006f20:	08006f43 	.word	0x08006f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f24:	f7fd fffa 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 8006f28:	61f8      	str	r0, [r7, #28]
        break;
 8006f2a:	e014      	b.n	8006f56 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f2c:	f7fe f80c 	bl	8004f48 <HAL_RCC_GetPCLK2Freq>
 8006f30:	61f8      	str	r0, [r7, #28]
        break;
 8006f32:	e010      	b.n	8006f56 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f34:	4b4c      	ldr	r3, [pc, #304]	; (8007068 <UART_SetConfig+0x4b0>)
 8006f36:	61fb      	str	r3, [r7, #28]
        break;
 8006f38:	e00d      	b.n	8006f56 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f3a:	f7fd ff59 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8006f3e:	61f8      	str	r0, [r7, #28]
        break;
 8006f40:	e009      	b.n	8006f56 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f46:	61fb      	str	r3, [r7, #28]
        break;
 8006f48:	e005      	b.n	8006f56 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d077      	beq.n	800704c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	005a      	lsls	r2, r3, #1
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	085b      	lsrs	r3, r3, #1
 8006f66:	441a      	add	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	2b0f      	cmp	r3, #15
 8006f76:	d916      	bls.n	8006fa6 <UART_SetConfig+0x3ee>
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f7e:	d212      	bcs.n	8006fa6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	f023 030f 	bic.w	r3, r3, #15
 8006f88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	085b      	lsrs	r3, r3, #1
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f003 0307 	and.w	r3, r3, #7
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	8afb      	ldrh	r3, [r7, #22]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	8afa      	ldrh	r2, [r7, #22]
 8006fa2:	60da      	str	r2, [r3, #12]
 8006fa4:	e052      	b.n	800704c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006fac:	e04e      	b.n	800704c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d827      	bhi.n	8007006 <UART_SetConfig+0x44e>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <UART_SetConfig+0x404>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fe1 	.word	0x08006fe1
 8006fc0:	08006fe9 	.word	0x08006fe9
 8006fc4:	08006ff1 	.word	0x08006ff1
 8006fc8:	08007007 	.word	0x08007007
 8006fcc:	08006ff7 	.word	0x08006ff7
 8006fd0:	08007007 	.word	0x08007007
 8006fd4:	08007007 	.word	0x08007007
 8006fd8:	08007007 	.word	0x08007007
 8006fdc:	08006fff 	.word	0x08006fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe0:	f7fd ff9c 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 8006fe4:	61f8      	str	r0, [r7, #28]
        break;
 8006fe6:	e014      	b.n	8007012 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fe8:	f7fd ffae 	bl	8004f48 <HAL_RCC_GetPCLK2Freq>
 8006fec:	61f8      	str	r0, [r7, #28]
        break;
 8006fee:	e010      	b.n	8007012 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff0:	4b1d      	ldr	r3, [pc, #116]	; (8007068 <UART_SetConfig+0x4b0>)
 8006ff2:	61fb      	str	r3, [r7, #28]
        break;
 8006ff4:	e00d      	b.n	8007012 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ff6:	f7fd fefb 	bl	8004df0 <HAL_RCC_GetSysClockFreq>
 8006ffa:	61f8      	str	r0, [r7, #28]
        break;
 8006ffc:	e009      	b.n	8007012 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007002:	61fb      	str	r3, [r7, #28]
        break;
 8007004:	e005      	b.n	8007012 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007010:	bf00      	nop
    }

    if (pclk != 0U)
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d019      	beq.n	800704c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	085a      	lsrs	r2, r3, #1
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	441a      	add	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	fbb2 f3f3 	udiv	r3, r2, r3
 800702a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	2b0f      	cmp	r3, #15
 8007030:	d909      	bls.n	8007046 <UART_SetConfig+0x48e>
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007038:	d205      	bcs.n	8007046 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60da      	str	r2, [r3, #12]
 8007044:	e002      	b.n	800704c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007058:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800705c:	4618      	mov	r0, r3
 800705e:	3728      	adds	r7, #40	; 0x28
 8007060:	46bd      	mov	sp, r7
 8007062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007066:	bf00      	nop
 8007068:	00f42400 	.word	0x00f42400

0800706c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01a      	beq.n	8007182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800716a:	d10a      	bne.n	8007182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071c0:	f7fb f8de 	bl	8002380 <HAL_GetTick>
 80071c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d10e      	bne.n	80071f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f82d 	bl	8007242 <UART_WaitOnFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e023      	b.n	800723a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d10e      	bne.n	800721e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f817 	bl	8007242 <UART_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e00d      	b.n	800723a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b09c      	sub	sp, #112	; 0x70
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	603b      	str	r3, [r7, #0]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007252:	e0a5      	b.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800725a:	f000 80a1 	beq.w	80073a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725e:	f7fb f88f 	bl	8002380 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800726a:	429a      	cmp	r2, r3
 800726c:	d302      	bcc.n	8007274 <UART_WaitOnFlagUntilTimeout+0x32>
 800726e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007270:	2b00      	cmp	r3, #0
 8007272:	d13e      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007284:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007288:	667b      	str	r3, [r7, #100]	; 0x64
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007292:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007294:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007298:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e6      	bne.n	8007274 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	f023 0301 	bic.w	r3, r3, #1
 80072bc:	663b      	str	r3, [r7, #96]	; 0x60
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3308      	adds	r3, #8
 80072c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80072c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e5      	bne.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2220      	movs	r2, #32
 80072de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e067      	b.n	80073c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d04f      	beq.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800730a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800730e:	d147      	bne.n	80073a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007318:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800732e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
 800733a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800733e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e6      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3308      	adds	r3, #8
 8007352:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	613b      	str	r3, [r7, #16]
   return(result);
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	66bb      	str	r3, [r7, #104]	; 0x68
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800736c:	623a      	str	r2, [r7, #32]
 800736e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	69f9      	ldr	r1, [r7, #28]
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	61bb      	str	r3, [r7, #24]
   return(result);
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e5      	bne.n	800734c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2220      	movs	r2, #32
 800738a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2220      	movs	r2, #32
 8007390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e010      	b.n	80073c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69da      	ldr	r2, [r3, #28]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4013      	ands	r3, r2
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	bf0c      	ite	eq
 80073b0:	2301      	moveq	r3, #1
 80073b2:	2300      	movne	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	f43f af4a 	beq.w	8007254 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3770      	adds	r7, #112	; 0x70
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <__NVIC_SetPriority>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	4603      	mov	r3, r0
 80073d4:	6039      	str	r1, [r7, #0]
 80073d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	db0a      	blt.n	80073f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	490c      	ldr	r1, [pc, #48]	; (8007418 <__NVIC_SetPriority+0x4c>)
 80073e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ea:	0112      	lsls	r2, r2, #4
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	440b      	add	r3, r1
 80073f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80073f4:	e00a      	b.n	800740c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	4908      	ldr	r1, [pc, #32]	; (800741c <__NVIC_SetPriority+0x50>)
 80073fc:	79fb      	ldrb	r3, [r7, #7]
 80073fe:	f003 030f 	and.w	r3, r3, #15
 8007402:	3b04      	subs	r3, #4
 8007404:	0112      	lsls	r2, r2, #4
 8007406:	b2d2      	uxtb	r2, r2
 8007408:	440b      	add	r3, r1
 800740a:	761a      	strb	r2, [r3, #24]
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	e000e100 	.word	0xe000e100
 800741c:	e000ed00 	.word	0xe000ed00

08007420 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007424:	4b05      	ldr	r3, [pc, #20]	; (800743c <SysTick_Handler+0x1c>)
 8007426:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007428:	f002 f908 	bl	800963c <xTaskGetSchedulerState>
 800742c:	4603      	mov	r3, r0
 800742e:	2b01      	cmp	r3, #1
 8007430:	d001      	beq.n	8007436 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007432:	f002 ffa9 	bl	800a388 <xPortSysTickHandler>
  }
}
 8007436:	bf00      	nop
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	e000e010 	.word	0xe000e010

08007440 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007444:	2100      	movs	r1, #0
 8007446:	f06f 0004 	mvn.w	r0, #4
 800744a:	f7ff ffbf 	bl	80073cc <__NVIC_SetPriority>
#endif
}
 800744e:	bf00      	nop
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800745a:	f3ef 8305 	mrs	r3, IPSR
 800745e:	603b      	str	r3, [r7, #0]
  return(result);
 8007460:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007466:	f06f 0305 	mvn.w	r3, #5
 800746a:	607b      	str	r3, [r7, #4]
 800746c:	e00c      	b.n	8007488 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800746e:	4b0a      	ldr	r3, [pc, #40]	; (8007498 <osKernelInitialize+0x44>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007476:	4b08      	ldr	r3, [pc, #32]	; (8007498 <osKernelInitialize+0x44>)
 8007478:	2201      	movs	r2, #1
 800747a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800747c:	2300      	movs	r3, #0
 800747e:	607b      	str	r3, [r7, #4]
 8007480:	e002      	b.n	8007488 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007486:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007488:	687b      	ldr	r3, [r7, #4]
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	20000434 	.word	0x20000434

0800749c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074a2:	f3ef 8305 	mrs	r3, IPSR
 80074a6:	603b      	str	r3, [r7, #0]
  return(result);
 80074a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80074ae:	f06f 0305 	mvn.w	r3, #5
 80074b2:	607b      	str	r3, [r7, #4]
 80074b4:	e010      	b.n	80074d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074b6:	4b0b      	ldr	r3, [pc, #44]	; (80074e4 <osKernelStart+0x48>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d109      	bne.n	80074d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074be:	f7ff ffbf 	bl	8007440 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074c2:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <osKernelStart+0x48>)
 80074c4:	2202      	movs	r2, #2
 80074c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074c8:	f001 fc3e 	bl	8008d48 <vTaskStartScheduler>
      stat = osOK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	607b      	str	r3, [r7, #4]
 80074d0:	e002      	b.n	80074d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074d8:	687b      	ldr	r3, [r7, #4]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20000434 	.word	0x20000434

080074e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08e      	sub	sp, #56	; 0x38
 80074ec:	af04      	add	r7, sp, #16
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80074f4:	2300      	movs	r3, #0
 80074f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074f8:	f3ef 8305 	mrs	r3, IPSR
 80074fc:	617b      	str	r3, [r7, #20]
  return(result);
 80074fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007500:	2b00      	cmp	r3, #0
 8007502:	d17e      	bne.n	8007602 <osThreadNew+0x11a>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d07b      	beq.n	8007602 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800750a:	2380      	movs	r3, #128	; 0x80
 800750c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800750e:	2318      	movs	r3, #24
 8007510:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800751a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d045      	beq.n	80075ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <osThreadNew+0x48>
        name = attr->name;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d008      	beq.n	8007556 <osThreadNew+0x6e>
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	2b38      	cmp	r3, #56	; 0x38
 8007548:	d805      	bhi.n	8007556 <osThreadNew+0x6e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <osThreadNew+0x72>
        return (NULL);
 8007556:	2300      	movs	r3, #0
 8007558:	e054      	b.n	8007604 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	089b      	lsrs	r3, r3, #2
 8007568:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00e      	beq.n	8007590 <osThreadNew+0xa8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	2bc3      	cmp	r3, #195	; 0xc3
 8007578:	d90a      	bls.n	8007590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800757e:	2b00      	cmp	r3, #0
 8007580:	d006      	beq.n	8007590 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <osThreadNew+0xa8>
        mem = 1;
 800758a:	2301      	movs	r3, #1
 800758c:	61bb      	str	r3, [r7, #24]
 800758e:	e010      	b.n	80075b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10c      	bne.n	80075b2 <osThreadNew+0xca>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <osThreadNew+0xca>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <osThreadNew+0xca>
          mem = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	e001      	b.n	80075b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d110      	bne.n	80075da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075c0:	9202      	str	r2, [sp, #8]
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6a3a      	ldr	r2, [r7, #32]
 80075cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f001 f9c8 	bl	8008964 <xTaskCreateStatic>
 80075d4:	4603      	mov	r3, r0
 80075d6:	613b      	str	r3, [r7, #16]
 80075d8:	e013      	b.n	8007602 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d110      	bne.n	8007602 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	f107 0310 	add.w	r3, r7, #16
 80075e8:	9301      	str	r3, [sp, #4]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f001 fa13 	bl	8008a1e <xTaskCreate>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d001      	beq.n	8007602 <osThreadNew+0x11a>
            hTask = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007602:	693b      	ldr	r3, [r7, #16]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3728      	adds	r7, #40	; 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007614:	f3ef 8305 	mrs	r3, IPSR
 8007618:	60bb      	str	r3, [r7, #8]
  return(result);
 800761a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <osDelay+0x1c>
    stat = osErrorISR;
 8007620:	f06f 0305 	mvn.w	r3, #5
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	e007      	b.n	8007638 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f001 fb54 	bl	8008ce0 <vTaskDelay>
    }
  }

  return (stat);
 8007638:	68fb      	ldr	r3, [r7, #12]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f002 fcbe 	bl	8009fcc <pvTimerGetTimerID>
 8007650:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d005      	beq.n	8007664 <TimerCallback+0x22>
    callb->func (callb->arg);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	6852      	ldr	r2, [r2, #4]
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
  }
}
 8007664:	bf00      	nop
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800766c:	b580      	push	{r7, lr}
 800766e:	b08c      	sub	sp, #48	; 0x30
 8007670:	af02      	add	r7, sp, #8
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	460b      	mov	r3, r1
 800767a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800767c:	2300      	movs	r3, #0
 800767e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007680:	f3ef 8305 	mrs	r3, IPSR
 8007684:	613b      	str	r3, [r7, #16]
  return(result);
 8007686:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007688:	2b00      	cmp	r3, #0
 800768a:	d163      	bne.n	8007754 <osTimerNew+0xe8>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d060      	beq.n	8007754 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007692:	2008      	movs	r0, #8
 8007694:	f002 ff08 	bl	800a4a8 <pvPortMalloc>
 8007698:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d059      	beq.n	8007754 <osTimerNew+0xe8>
      callb->func = func;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80076ac:	7afb      	ldrb	r3, [r7, #11]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <osTimerNew+0x4c>
        reload = pdFALSE;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	e001      	b.n	80076bc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80076b8:	2301      	movs	r3, #1
 80076ba:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80076bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076c0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01c      	beq.n	8007706 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <osTimerNew+0x6e>
          name = attr->name;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d006      	beq.n	80076f0 <osTimerNew+0x84>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	2b2b      	cmp	r3, #43	; 0x2b
 80076e8:	d902      	bls.n	80076f0 <osTimerNew+0x84>
          mem = 1;
 80076ea:	2301      	movs	r3, #1
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	e00c      	b.n	800770a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d108      	bne.n	800770a <osTimerNew+0x9e>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <osTimerNew+0x9e>
            mem = 0;
 8007700:	2300      	movs	r3, #0
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	e001      	b.n	800770a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d10c      	bne.n	800772a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	4b12      	ldr	r3, [pc, #72]	; (8007760 <osTimerNew+0xf4>)
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	69fa      	ldr	r2, [r7, #28]
 800771e:	2101      	movs	r1, #1
 8007720:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007722:	f002 f8d4 	bl	80098ce <xTimerCreateStatic>
 8007726:	6238      	str	r0, [r7, #32]
 8007728:	e00b      	b.n	8007742 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d108      	bne.n	8007742 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007730:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <osTimerNew+0xf4>)
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	69fa      	ldr	r2, [r7, #28]
 8007738:	2101      	movs	r1, #1
 800773a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800773c:	f002 f8a6 	bl	800988c <xTimerCreate>
 8007740:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007742:	6a3b      	ldr	r3, [r7, #32]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d105      	bne.n	8007754 <osTimerNew+0xe8>
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <osTimerNew+0xe8>
        vPortFree (callb);
 800774e:	6978      	ldr	r0, [r7, #20]
 8007750:	f002 ff76 	bl	800a640 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007754:	6a3b      	ldr	r3, [r7, #32]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3728      	adds	r7, #40	; 0x28
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	08007643 	.word	0x08007643

08007764 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007764:	b580      	push	{r7, lr}
 8007766:	b08a      	sub	sp, #40	; 0x28
 8007768:	af02      	add	r7, sp, #8
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007774:	f3ef 8305 	mrs	r3, IPSR
 8007778:	613b      	str	r3, [r7, #16]
  return(result);
 800777a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800777c:	2b00      	cmp	r3, #0
 800777e:	d175      	bne.n	800786c <osSemaphoreNew+0x108>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d072      	beq.n	800786c <osSemaphoreNew+0x108>
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	429a      	cmp	r2, r3
 800778c:	d86e      	bhi.n	800786c <osSemaphoreNew+0x108>
    mem = -1;
 800778e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007792:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d015      	beq.n	80077c6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d006      	beq.n	80077b0 <osSemaphoreNew+0x4c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	2b4f      	cmp	r3, #79	; 0x4f
 80077a8:	d902      	bls.n	80077b0 <osSemaphoreNew+0x4c>
        mem = 1;
 80077aa:	2301      	movs	r3, #1
 80077ac:	61bb      	str	r3, [r7, #24]
 80077ae:	e00c      	b.n	80077ca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d108      	bne.n	80077ca <osSemaphoreNew+0x66>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d104      	bne.n	80077ca <osSemaphoreNew+0x66>
          mem = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61bb      	str	r3, [r7, #24]
 80077c4:	e001      	b.n	80077ca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077d0:	d04c      	beq.n	800786c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d128      	bne.n	800782a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d10a      	bne.n	80077f4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2203      	movs	r2, #3
 80077e4:	9200      	str	r2, [sp, #0]
 80077e6:	2200      	movs	r2, #0
 80077e8:	2100      	movs	r1, #0
 80077ea:	2001      	movs	r0, #1
 80077ec:	f000 fac4 	bl	8007d78 <xQueueGenericCreateStatic>
 80077f0:	61f8      	str	r0, [r7, #28]
 80077f2:	e005      	b.n	8007800 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80077f4:	2203      	movs	r2, #3
 80077f6:	2100      	movs	r1, #0
 80077f8:	2001      	movs	r0, #1
 80077fa:	f000 fb35 	bl	8007e68 <xQueueGenericCreate>
 80077fe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d022      	beq.n	800784c <osSemaphoreNew+0xe8>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01f      	beq.n	800784c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800780c:	2300      	movs	r3, #0
 800780e:	2200      	movs	r2, #0
 8007810:	2100      	movs	r1, #0
 8007812:	69f8      	ldr	r0, [r7, #28]
 8007814:	f000 fbf0 	bl	8007ff8 <xQueueGenericSend>
 8007818:	4603      	mov	r3, r0
 800781a:	2b01      	cmp	r3, #1
 800781c:	d016      	beq.n	800784c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800781e:	69f8      	ldr	r0, [r7, #28]
 8007820:	f000 fee4 	bl	80085ec <vQueueDelete>
            hSemaphore = NULL;
 8007824:	2300      	movs	r3, #0
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	e010      	b.n	800784c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d108      	bne.n	8007842 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	461a      	mov	r2, r3
 8007836:	68b9      	ldr	r1, [r7, #8]
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fb72 	bl	8007f22 <xQueueCreateCountingSemaphoreStatic>
 800783e:	61f8      	str	r0, [r7, #28]
 8007840:	e004      	b.n	800784c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fba3 	bl	8007f90 <xQueueCreateCountingSemaphore>
 800784a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	617b      	str	r3, [r7, #20]
 800785e:	e001      	b.n	8007864 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007864:	6979      	ldr	r1, [r7, #20]
 8007866:	69f8      	ldr	r0, [r7, #28]
 8007868:	f000 fff4 	bl	8008854 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800786c:	69fb      	ldr	r3, [r7, #28]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3720      	adds	r7, #32
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007876:	b580      	push	{r7, lr}
 8007878:	b08a      	sub	sp, #40	; 0x28
 800787a:	af02      	add	r7, sp, #8
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007882:	2300      	movs	r3, #0
 8007884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007886:	f3ef 8305 	mrs	r3, IPSR
 800788a:	613b      	str	r3, [r7, #16]
  return(result);
 800788c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800788e:	2b00      	cmp	r3, #0
 8007890:	d15f      	bne.n	8007952 <osMessageQueueNew+0xdc>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d05c      	beq.n	8007952 <osMessageQueueNew+0xdc>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d059      	beq.n	8007952 <osMessageQueueNew+0xdc>
    mem = -1;
 800789e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d029      	beq.n	80078fe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d012      	beq.n	80078d8 <osMessageQueueNew+0x62>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	2b4f      	cmp	r3, #79	; 0x4f
 80078b8:	d90e      	bls.n	80078d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	695a      	ldr	r2, [r3, #20]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d302      	bcc.n	80078d8 <osMessageQueueNew+0x62>
        mem = 1;
 80078d2:	2301      	movs	r3, #1
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	e014      	b.n	8007902 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d110      	bne.n	8007902 <osMessageQueueNew+0x8c>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10c      	bne.n	8007902 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d108      	bne.n	8007902 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <osMessageQueueNew+0x8c>
          mem = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	61bb      	str	r3, [r7, #24]
 80078fc:	e001      	b.n	8007902 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80078fe:	2300      	movs	r3, #0
 8007900:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d10b      	bne.n	8007920 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691a      	ldr	r2, [r3, #16]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	2100      	movs	r1, #0
 8007912:	9100      	str	r1, [sp, #0]
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fa2e 	bl	8007d78 <xQueueGenericCreateStatic>
 800791c:	61f8      	str	r0, [r7, #28]
 800791e:	e008      	b.n	8007932 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d105      	bne.n	8007932 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007926:	2200      	movs	r2, #0
 8007928:	68b9      	ldr	r1, [r7, #8]
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fa9c 	bl	8007e68 <xQueueGenericCreate>
 8007930:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00c      	beq.n	8007952 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <osMessageQueueNew+0xd0>
        name = attr->name;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	e001      	b.n	800794a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800794a:	6979      	ldr	r1, [r7, #20]
 800794c:	69f8      	ldr	r0, [r7, #28]
 800794e:	f000 ff81 	bl	8008854 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007952:	69fb      	ldr	r3, [r7, #28]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800795c:	b580      	push	{r7, lr}
 800795e:	b088      	sub	sp, #32
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	603b      	str	r3, [r7, #0]
 8007968:	4613      	mov	r3, r2
 800796a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007970:	2300      	movs	r3, #0
 8007972:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007974:	f3ef 8305 	mrs	r3, IPSR
 8007978:	617b      	str	r3, [r7, #20]
  return(result);
 800797a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800797c:	2b00      	cmp	r3, #0
 800797e:	d028      	beq.n	80079d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d005      	beq.n	8007992 <osMessageQueuePut+0x36>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <osMessageQueuePut+0x36>
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007992:	f06f 0303 	mvn.w	r3, #3
 8007996:	61fb      	str	r3, [r7, #28]
 8007998:	e038      	b.n	8007a0c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800799a:	2300      	movs	r3, #0
 800799c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800799e:	f107 0210 	add.w	r2, r7, #16
 80079a2:	2300      	movs	r3, #0
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	69b8      	ldr	r0, [r7, #24]
 80079a8:	f000 fc24 	bl	80081f4 <xQueueGenericSendFromISR>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d003      	beq.n	80079ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80079b2:	f06f 0302 	mvn.w	r3, #2
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	e028      	b.n	8007a0c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d025      	beq.n	8007a0c <osMessageQueuePut+0xb0>
 80079c0:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <osMessageQueuePut+0xbc>)
 80079c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c6:	601a      	str	r2, [r3, #0]
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	e01c      	b.n	8007a0c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <osMessageQueuePut+0x82>
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d103      	bne.n	80079e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80079de:	f06f 0303 	mvn.w	r3, #3
 80079e2:	61fb      	str	r3, [r7, #28]
 80079e4:	e012      	b.n	8007a0c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80079e6:	2300      	movs	r3, #0
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	69b8      	ldr	r0, [r7, #24]
 80079ee:	f000 fb03 	bl	8007ff8 <xQueueGenericSend>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d009      	beq.n	8007a0c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80079fe:	f06f 0301 	mvn.w	r3, #1
 8007a02:	61fb      	str	r3, [r7, #28]
 8007a04:	e002      	b.n	8007a0c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007a06:	f06f 0302 	mvn.w	r3, #2
 8007a0a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007a0c:	69fb      	ldr	r3, [r7, #28]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b088      	sub	sp, #32
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a32:	f3ef 8305 	mrs	r3, IPSR
 8007a36:	617b      	str	r3, [r7, #20]
  return(result);
 8007a38:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d028      	beq.n	8007a90 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <osMessageQueueGet+0x34>
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <osMessageQueueGet+0x34>
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007a50:	f06f 0303 	mvn.w	r3, #3
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	e037      	b.n	8007ac8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007a5c:	f107 0310 	add.w	r3, r7, #16
 8007a60:	461a      	mov	r2, r3
 8007a62:	68b9      	ldr	r1, [r7, #8]
 8007a64:	69b8      	ldr	r0, [r7, #24]
 8007a66:	f000 fd41 	bl	80084ec <xQueueReceiveFromISR>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d003      	beq.n	8007a78 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007a70:	f06f 0302 	mvn.w	r3, #2
 8007a74:	61fb      	str	r3, [r7, #28]
 8007a76:	e027      	b.n	8007ac8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d024      	beq.n	8007ac8 <osMessageQueueGet+0xac>
 8007a7e:	4b15      	ldr	r3, [pc, #84]	; (8007ad4 <osMessageQueueGet+0xb8>)
 8007a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	e01b      	b.n	8007ac8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <osMessageQueueGet+0x80>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d103      	bne.n	8007aa4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007a9c:	f06f 0303 	mvn.w	r3, #3
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	e011      	b.n	8007ac8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	69b8      	ldr	r0, [r7, #24]
 8007aaa:	f000 fc3f 	bl	800832c <xQueueReceive>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d009      	beq.n	8007ac8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007aba:	f06f 0301 	mvn.w	r3, #1
 8007abe:	61fb      	str	r3, [r7, #28]
 8007ac0:	e002      	b.n	8007ac8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007ac2:	f06f 0302 	mvn.w	r3, #2
 8007ac6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007ac8:	69fb      	ldr	r3, [r7, #28]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4a07      	ldr	r2, [pc, #28]	; (8007b04 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ae8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	4a06      	ldr	r2, [pc, #24]	; (8007b08 <vApplicationGetIdleTaskMemory+0x30>)
 8007aee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2280      	movs	r2, #128	; 0x80
 8007af4:	601a      	str	r2, [r3, #0]
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000438 	.word	0x20000438
 8007b08:	200004fc 	.word	0x200004fc

08007b0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4a07      	ldr	r2, [pc, #28]	; (8007b38 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4a06      	ldr	r2, [pc, #24]	; (8007b3c <vApplicationGetTimerTaskMemory+0x30>)
 8007b22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b2a:	601a      	str	r2, [r3, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	200006fc 	.word	0x200006fc
 8007b3c:	200007c0 	.word	0x200007c0

08007b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f103 0208 	add.w	r2, r3, #8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f103 0208 	add.w	r2, r3, #8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f103 0208 	add.w	r2, r3, #8
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b8e:	bf00      	nop
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	1c5a      	adds	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bf8:	d103      	bne.n	8007c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e00c      	b.n	8007c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3308      	adds	r3, #8
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e002      	b.n	8007c10 <vListInsert+0x2e>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d2f6      	bcs.n	8007c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6892      	ldr	r2, [r2, #8]
 8007c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6852      	ldr	r2, [r2, #4]
 8007c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d103      	bne.n	8007c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689a      	ldr	r2, [r3, #8]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	1e5a      	subs	r2, r3, #1
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10a      	bne.n	8007cd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	f383 8811 	msr	BASEPRI, r3
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cd2:	f002 fac7 	bl	800a264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cde:	68f9      	ldr	r1, [r7, #12]
 8007ce0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ce2:	fb01 f303 	mul.w	r3, r1, r3
 8007ce6:	441a      	add	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	3b01      	subs	r3, #1
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d08:	fb01 f303 	mul.w	r3, r1, r3
 8007d0c:	441a      	add	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	22ff      	movs	r2, #255	; 0xff
 8007d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d114      	bne.n	8007d52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01a      	beq.n	8007d66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3310      	adds	r3, #16
 8007d34:	4618      	mov	r0, r3
 8007d36:	f001 fabf 	bl	80092b8 <xTaskRemoveFromEventList>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d012      	beq.n	8007d66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d40:	4b0c      	ldr	r3, [pc, #48]	; (8007d74 <xQueueGenericReset+0xcc>)
 8007d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	e009      	b.n	8007d66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3310      	adds	r3, #16
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff fef2 	bl	8007b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	3324      	adds	r3, #36	; 0x24
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7ff feed 	bl	8007b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d66:	f002 faad 	bl	800a2c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d6a:	2301      	movs	r3, #1
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08e      	sub	sp, #56	; 0x38
 8007d7c:	af02      	add	r7, sp, #8
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10a      	bne.n	8007da2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d9e:	bf00      	nop
 8007da0:	e7fe      	b.n	8007da0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dac:	f383 8811 	msr	BASEPRI, r3
 8007db0:	f3bf 8f6f 	isb	sy
 8007db4:	f3bf 8f4f 	dsb	sy
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007dba:	bf00      	nop
 8007dbc:	e7fe      	b.n	8007dbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <xQueueGenericCreateStatic+0x52>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <xQueueGenericCreateStatic+0x56>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <xQueueGenericCreateStatic+0x58>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	623b      	str	r3, [r7, #32]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <xQueueGenericCreateStatic+0x7e>
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <xQueueGenericCreateStatic+0x82>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <xQueueGenericCreateStatic+0x84>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	61fb      	str	r3, [r7, #28]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e16:	2350      	movs	r3, #80	; 0x50
 8007e18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b50      	cmp	r3, #80	; 0x50
 8007e1e:	d00a      	beq.n	8007e36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	61bb      	str	r3, [r7, #24]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00d      	beq.n	8007e5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4613      	mov	r3, r2
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f83f 	bl	8007edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3730      	adds	r7, #48	; 0x30
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	; 0x28
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	613b      	str	r3, [r7, #16]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	fb02 f303 	mul.w	r3, r2, r3
 8007e9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	3350      	adds	r3, #80	; 0x50
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f002 fb01 	bl	800a4a8 <pvPortMalloc>
 8007ea6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d011      	beq.n	8007ed2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	3350      	adds	r3, #80	; 0x50
 8007eb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ec0:	79fa      	ldrb	r2, [r7, #7]
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f805 	bl	8007edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3720      	adds	r7, #32
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	607a      	str	r2, [r7, #4]
 8007ee8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	e002      	b.n	8007efe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	69b8      	ldr	r0, [r7, #24]
 8007f0e:	f7ff fecb 	bl	8007ca8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	78fa      	ldrb	r2, [r7, #3]
 8007f16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b08a      	sub	sp, #40	; 0x28
 8007f26:	af02      	add	r7, sp, #8
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	61bb      	str	r3, [r7, #24]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d90a      	bls.n	8007f68 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	617b      	str	r3, [r7, #20]
}
 8007f64:	bf00      	nop
 8007f66:	e7fe      	b.n	8007f66 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007f68:	2302      	movs	r3, #2
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2100      	movs	r1, #0
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7ff ff00 	bl	8007d78 <xQueueGenericCreateStatic>
 8007f78:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007f86:	69fb      	ldr	r3, [r7, #28]
	}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3720      	adds	r7, #32
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	613b      	str	r3, [r7, #16]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d90a      	bls.n	8007fd4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60fb      	str	r3, [r7, #12]
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007fd4:	2202      	movs	r2, #2
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f7ff ff45 	bl	8007e68 <xQueueGenericCreate>
 8007fde:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007fec:	697b      	ldr	r3, [r7, #20]
	}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08e      	sub	sp, #56	; 0x38
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008006:	2300      	movs	r3, #0
 8008008:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10a      	bne.n	800802a <xQueueGenericSend+0x32>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008026:	bf00      	nop
 8008028:	e7fe      	b.n	8008028 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d103      	bne.n	8008038 <xQueueGenericSend+0x40>
 8008030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <xQueueGenericSend+0x44>
 8008038:	2301      	movs	r3, #1
 800803a:	e000      	b.n	800803e <xQueueGenericSend+0x46>
 800803c:	2300      	movs	r3, #0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10a      	bne.n	8008058 <xQueueGenericSend+0x60>
	__asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008054:	bf00      	nop
 8008056:	e7fe      	b.n	8008056 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d103      	bne.n	8008066 <xQueueGenericSend+0x6e>
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008062:	2b01      	cmp	r3, #1
 8008064:	d101      	bne.n	800806a <xQueueGenericSend+0x72>
 8008066:	2301      	movs	r3, #1
 8008068:	e000      	b.n	800806c <xQueueGenericSend+0x74>
 800806a:	2300      	movs	r3, #0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <xQueueGenericSend+0x8e>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	623b      	str	r3, [r7, #32]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008086:	f001 fad9 	bl	800963c <xTaskGetSchedulerState>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <xQueueGenericSend+0x9e>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <xQueueGenericSend+0xa2>
 8008096:	2301      	movs	r3, #1
 8008098:	e000      	b.n	800809c <xQueueGenericSend+0xa4>
 800809a:	2300      	movs	r3, #0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10a      	bne.n	80080b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	61fb      	str	r3, [r7, #28]
}
 80080b2:	bf00      	nop
 80080b4:	e7fe      	b.n	80080b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080b6:	f002 f8d5 	bl	800a264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d302      	bcc.n	80080cc <xQueueGenericSend+0xd4>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d129      	bne.n	8008120 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080d2:	f000 faae 	bl	8008632 <prvCopyDataToQueue>
 80080d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d010      	beq.n	8008102 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	3324      	adds	r3, #36	; 0x24
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 f8e7 	bl	80092b8 <xTaskRemoveFromEventList>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d013      	beq.n	8008118 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80080f0:	4b3f      	ldr	r3, [pc, #252]	; (80081f0 <xQueueGenericSend+0x1f8>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	e00a      	b.n	8008118 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d007      	beq.n	8008118 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008108:	4b39      	ldr	r3, [pc, #228]	; (80081f0 <xQueueGenericSend+0x1f8>)
 800810a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008118:	f002 f8d4 	bl	800a2c4 <vPortExitCritical>
				return pdPASS;
 800811c:	2301      	movs	r3, #1
 800811e:	e063      	b.n	80081e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d103      	bne.n	800812e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008126:	f002 f8cd 	bl	800a2c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800812a:	2300      	movs	r3, #0
 800812c:	e05c      	b.n	80081e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800812e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008130:	2b00      	cmp	r3, #0
 8008132:	d106      	bne.n	8008142 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008134:	f107 0314 	add.w	r3, r7, #20
 8008138:	4618      	mov	r0, r3
 800813a:	f001 f921 	bl	8009380 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800813e:	2301      	movs	r3, #1
 8008140:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008142:	f002 f8bf 	bl	800a2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008146:	f000 fe71 	bl	8008e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800814a:	f002 f88b 	bl	800a264 <vPortEnterCritical>
 800814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008154:	b25b      	sxtb	r3, r3
 8008156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800815a:	d103      	bne.n	8008164 <xQueueGenericSend+0x16c>
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800816a:	b25b      	sxtb	r3, r3
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008170:	d103      	bne.n	800817a <xQueueGenericSend+0x182>
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800817a:	f002 f8a3 	bl	800a2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800817e:	1d3a      	adds	r2, r7, #4
 8008180:	f107 0314 	add.w	r3, r7, #20
 8008184:	4611      	mov	r1, r2
 8008186:	4618      	mov	r0, r3
 8008188:	f001 f910 	bl	80093ac <xTaskCheckForTimeOut>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d124      	bne.n	80081dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008194:	f000 fb45 	bl	8008822 <prvIsQueueFull>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d018      	beq.n	80081d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	3310      	adds	r3, #16
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	4611      	mov	r1, r2
 80081a6:	4618      	mov	r0, r3
 80081a8:	f001 f836 	bl	8009218 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ae:	f000 fad0 	bl	8008752 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081b2:	f000 fe49 	bl	8008e48 <xTaskResumeAll>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f47f af7c 	bne.w	80080b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80081be:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <xQueueGenericSend+0x1f8>)
 80081c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	e772      	b.n	80080b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80081d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081d2:	f000 fabe 	bl	8008752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081d6:	f000 fe37 	bl	8008e48 <xTaskResumeAll>
 80081da:	e76c      	b.n	80080b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80081dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081de:	f000 fab8 	bl	8008752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081e2:	f000 fe31 	bl	8008e48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80081e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3738      	adds	r7, #56	; 0x38
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	e000ed04 	.word	0xe000ed04

080081f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b090      	sub	sp, #64	; 0x40
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
 8008200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800821e:	bf00      	nop
 8008220:	e7fe      	b.n	8008220 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d103      	bne.n	8008230 <xQueueGenericSendFromISR+0x3c>
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <xQueueGenericSendFromISR+0x40>
 8008230:	2301      	movs	r3, #1
 8008232:	e000      	b.n	8008236 <xQueueGenericSendFromISR+0x42>
 8008234:	2300      	movs	r3, #0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d10a      	bne.n	8008250 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800824c:	bf00      	nop
 800824e:	e7fe      	b.n	800824e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	2b02      	cmp	r3, #2
 8008254:	d103      	bne.n	800825e <xQueueGenericSendFromISR+0x6a>
 8008256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <xQueueGenericSendFromISR+0x6e>
 800825e:	2301      	movs	r3, #1
 8008260:	e000      	b.n	8008264 <xQueueGenericSendFromISR+0x70>
 8008262:	2300      	movs	r3, #0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	623b      	str	r3, [r7, #32]
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800827e:	f002 f8d3 	bl	800a428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008282:	f3ef 8211 	mrs	r2, BASEPRI
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	61fa      	str	r2, [r7, #28]
 8008298:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800829a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800829c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800829e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d302      	bcc.n	80082b0 <xQueueGenericSendFromISR+0xbc>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d12f      	bne.n	8008310 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082c6:	f000 f9b4 	bl	8008632 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80082ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082d2:	d112      	bne.n	80082fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d016      	beq.n	800830a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	3324      	adds	r3, #36	; 0x24
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 ffe9 	bl	80092b8 <xTaskRemoveFromEventList>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00e      	beq.n	800830a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00b      	beq.n	800830a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	e007      	b.n	800830a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80082fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80082fe:	3301      	adds	r3, #1
 8008300:	b2db      	uxtb	r3, r3
 8008302:	b25a      	sxtb	r2, r3
 8008304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800830a:	2301      	movs	r3, #1
 800830c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800830e:	e001      	b.n	8008314 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008310:	2300      	movs	r3, #0
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008316:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800831e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008322:	4618      	mov	r0, r3
 8008324:	3740      	adds	r7, #64	; 0x40
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
	...

0800832c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08c      	sub	sp, #48	; 0x30
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008338:	2300      	movs	r3, #0
 800833a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10a      	bne.n	800835c <xQueueReceive+0x30>
	__asm volatile
 8008346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	623b      	str	r3, [r7, #32]
}
 8008358:	bf00      	nop
 800835a:	e7fe      	b.n	800835a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d103      	bne.n	800836a <xQueueReceive+0x3e>
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <xQueueReceive+0x42>
 800836a:	2301      	movs	r3, #1
 800836c:	e000      	b.n	8008370 <xQueueReceive+0x44>
 800836e:	2300      	movs	r3, #0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <xQueueReceive+0x5e>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	61fb      	str	r3, [r7, #28]
}
 8008386:	bf00      	nop
 8008388:	e7fe      	b.n	8008388 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800838a:	f001 f957 	bl	800963c <xTaskGetSchedulerState>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d102      	bne.n	800839a <xQueueReceive+0x6e>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <xQueueReceive+0x72>
 800839a:	2301      	movs	r3, #1
 800839c:	e000      	b.n	80083a0 <xQueueReceive+0x74>
 800839e:	2300      	movs	r3, #0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <xQueueReceive+0x8e>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	61bb      	str	r3, [r7, #24]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80083ba:	f001 ff53 	bl	800a264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d01f      	beq.n	800840a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083ce:	f000 f99a 	bl	8008706 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	1e5a      	subs	r2, r3, #1
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00f      	beq.n	8008402 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e4:	3310      	adds	r3, #16
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 ff66 	bl	80092b8 <xTaskRemoveFromEventList>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d007      	beq.n	8008402 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80083f2:	4b3d      	ldr	r3, [pc, #244]	; (80084e8 <xQueueReceive+0x1bc>)
 80083f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008402:	f001 ff5f 	bl	800a2c4 <vPortExitCritical>
				return pdPASS;
 8008406:	2301      	movs	r3, #1
 8008408:	e069      	b.n	80084de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d103      	bne.n	8008418 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008410:	f001 ff58 	bl	800a2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008414:	2300      	movs	r3, #0
 8008416:	e062      	b.n	80084de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d106      	bne.n	800842c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800841e:	f107 0310 	add.w	r3, r7, #16
 8008422:	4618      	mov	r0, r3
 8008424:	f000 ffac 	bl	8009380 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008428:	2301      	movs	r3, #1
 800842a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800842c:	f001 ff4a 	bl	800a2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008430:	f000 fcfc 	bl	8008e2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008434:	f001 ff16 	bl	800a264 <vPortEnterCritical>
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800843e:	b25b      	sxtb	r3, r3
 8008440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008444:	d103      	bne.n	800844e <xQueueReceive+0x122>
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008454:	b25b      	sxtb	r3, r3
 8008456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800845a:	d103      	bne.n	8008464 <xQueueReceive+0x138>
 800845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008464:	f001 ff2e 	bl	800a2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008468:	1d3a      	adds	r2, r7, #4
 800846a:	f107 0310 	add.w	r3, r7, #16
 800846e:	4611      	mov	r1, r2
 8008470:	4618      	mov	r0, r3
 8008472:	f000 ff9b 	bl	80093ac <xTaskCheckForTimeOut>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d123      	bne.n	80084c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800847c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800847e:	f000 f9ba 	bl	80087f6 <prvIsQueueEmpty>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d017      	beq.n	80084b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848a:	3324      	adds	r3, #36	; 0x24
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	4611      	mov	r1, r2
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fec1 	bl	8009218 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008498:	f000 f95b 	bl	8008752 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800849c:	f000 fcd4 	bl	8008e48 <xTaskResumeAll>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d189      	bne.n	80083ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80084a6:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <xQueueReceive+0x1bc>)
 80084a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	e780      	b.n	80083ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80084b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ba:	f000 f94a 	bl	8008752 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084be:	f000 fcc3 	bl	8008e48 <xTaskResumeAll>
 80084c2:	e77a      	b.n	80083ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80084c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084c6:	f000 f944 	bl	8008752 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084ca:	f000 fcbd 	bl	8008e48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d0:	f000 f991 	bl	80087f6 <prvIsQueueEmpty>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f43f af6f 	beq.w	80083ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80084dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3730      	adds	r7, #48	; 0x30
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	e000ed04 	.word	0xe000ed04

080084ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08e      	sub	sp, #56	; 0x38
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10a      	bne.n	8008518 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	623b      	str	r3, [r7, #32]
}
 8008514:	bf00      	nop
 8008516:	e7fe      	b.n	8008516 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d103      	bne.n	8008526 <xQueueReceiveFromISR+0x3a>
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <xQueueReceiveFromISR+0x3e>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <xQueueReceiveFromISR+0x40>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d10a      	bne.n	8008546 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	61fb      	str	r3, [r7, #28]
}
 8008542:	bf00      	nop
 8008544:	e7fe      	b.n	8008544 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008546:	f001 ff6f 	bl	800a428 <vPortValidateInterruptPriority>
	__asm volatile
 800854a:	f3ef 8211 	mrs	r2, BASEPRI
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	61ba      	str	r2, [r7, #24]
 8008560:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008562:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008564:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	2b00      	cmp	r3, #0
 8008570:	d02f      	beq.n	80085d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008580:	f000 f8c1 	bl	8008706 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	1e5a      	subs	r2, r3, #1
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800858c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008594:	d112      	bne.n	80085bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d016      	beq.n	80085cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	3310      	adds	r3, #16
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 fe88 	bl	80092b8 <xTaskRemoveFromEventList>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00e      	beq.n	80085cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	e007      	b.n	80085cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80085bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c0:	3301      	adds	r3, #1
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	b25a      	sxtb	r2, r3
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80085cc:	2301      	movs	r3, #1
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
 80085d0:	e001      	b.n	80085d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80085d2:	2300      	movs	r3, #0
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f383 8811 	msr	BASEPRI, r3
}
 80085e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3738      	adds	r7, #56	; 0x38
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10a      	bne.n	8008614 <vQueueDelete+0x28>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	60bb      	str	r3, [r7, #8]
}
 8008610:	bf00      	nop
 8008612:	e7fe      	b.n	8008612 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f947 	bl	80088a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f002 f80b 	bl	800a640 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800862a:	bf00      	nop
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b086      	sub	sp, #24
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800863e:	2300      	movs	r3, #0
 8008640:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008646:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10d      	bne.n	800866c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d14d      	bne.n	80086f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	4618      	mov	r0, r3
 800865e:	f001 f80b 	bl	8009678 <xTaskPriorityDisinherit>
 8008662:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	609a      	str	r2, [r3, #8]
 800866a:	e043      	b.n	80086f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d119      	bne.n	80086a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6858      	ldr	r0, [r3, #4]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	461a      	mov	r2, r3
 800867c:	68b9      	ldr	r1, [r7, #8]
 800867e:	f002 fbe2 	bl	800ae46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	685a      	ldr	r2, [r3, #4]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	441a      	add	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	429a      	cmp	r2, r3
 800869a:	d32b      	bcc.n	80086f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	605a      	str	r2, [r3, #4]
 80086a4:	e026      	b.n	80086f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68d8      	ldr	r0, [r3, #12]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	461a      	mov	r2, r3
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	f002 fbc8 	bl	800ae46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	425b      	negs	r3, r3
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d207      	bcs.n	80086e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689a      	ldr	r2, [r3, #8]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	425b      	negs	r3, r3
 80086dc:	441a      	add	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d105      	bne.n	80086f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d002      	beq.n	80086f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80086fc:	697b      	ldr	r3, [r7, #20]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	d018      	beq.n	800874a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68da      	ldr	r2, [r3, #12]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008720:	441a      	add	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	429a      	cmp	r2, r3
 8008730:	d303      	bcc.n	800873a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68d9      	ldr	r1, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	461a      	mov	r2, r3
 8008744:	6838      	ldr	r0, [r7, #0]
 8008746:	f002 fb7e 	bl	800ae46 <memcpy>
	}
}
 800874a:	bf00      	nop
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800875a:	f001 fd83 	bl	800a264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008764:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008766:	e011      	b.n	800878c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b00      	cmp	r3, #0
 800876e:	d012      	beq.n	8008796 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3324      	adds	r3, #36	; 0x24
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fd9f 	bl	80092b8 <xTaskRemoveFromEventList>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008780:	f000 fe76 	bl	8009470 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	3b01      	subs	r3, #1
 8008788:	b2db      	uxtb	r3, r3
 800878a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800878c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008790:	2b00      	cmp	r3, #0
 8008792:	dce9      	bgt.n	8008768 <prvUnlockQueue+0x16>
 8008794:	e000      	b.n	8008798 <prvUnlockQueue+0x46>
					break;
 8008796:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	22ff      	movs	r2, #255	; 0xff
 800879c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80087a0:	f001 fd90 	bl	800a2c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80087a4:	f001 fd5e 	bl	800a264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087b0:	e011      	b.n	80087d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d012      	beq.n	80087e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	3310      	adds	r3, #16
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fd7a 	bl	80092b8 <xTaskRemoveFromEventList>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087ca:	f000 fe51 	bl	8009470 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	dce9      	bgt.n	80087b2 <prvUnlockQueue+0x60>
 80087de:	e000      	b.n	80087e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	22ff      	movs	r2, #255	; 0xff
 80087e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087ea:	f001 fd6b 	bl	800a2c4 <vPortExitCritical>
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087fe:	f001 fd31 	bl	800a264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008806:	2b00      	cmp	r3, #0
 8008808:	d102      	bne.n	8008810 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800880a:	2301      	movs	r3, #1
 800880c:	60fb      	str	r3, [r7, #12]
 800880e:	e001      	b.n	8008814 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008814:	f001 fd56 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 8008818:	68fb      	ldr	r3, [r7, #12]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800882a:	f001 fd1b 	bl	800a264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008836:	429a      	cmp	r2, r3
 8008838:	d102      	bne.n	8008840 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800883a:	2301      	movs	r3, #1
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	e001      	b.n	8008844 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008840:	2300      	movs	r3, #0
 8008842:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008844:	f001 fd3e 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 8008848:	68fb      	ldr	r3, [r7, #12]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800885e:	2300      	movs	r3, #0
 8008860:	60fb      	str	r3, [r7, #12]
 8008862:	e014      	b.n	800888e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008864:	4a0f      	ldr	r2, [pc, #60]	; (80088a4 <vQueueAddToRegistry+0x50>)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10b      	bne.n	8008888 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008870:	490c      	ldr	r1, [pc, #48]	; (80088a4 <vQueueAddToRegistry+0x50>)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	683a      	ldr	r2, [r7, #0]
 8008876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800887a:	4a0a      	ldr	r2, [pc, #40]	; (80088a4 <vQueueAddToRegistry+0x50>)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	4413      	add	r3, r2
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008886:	e006      	b.n	8008896 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	3301      	adds	r3, #1
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b07      	cmp	r3, #7
 8008892:	d9e7      	bls.n	8008864 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008894:	bf00      	nop
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000bc0 	.word	0x20000bc0

080088a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088b0:	2300      	movs	r3, #0
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e016      	b.n	80088e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80088b6:	4a10      	ldr	r2, [pc, #64]	; (80088f8 <vQueueUnregisterQueue+0x50>)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	00db      	lsls	r3, r3, #3
 80088bc:	4413      	add	r3, r2
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d10b      	bne.n	80088de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80088c6:	4a0c      	ldr	r2, [pc, #48]	; (80088f8 <vQueueUnregisterQueue+0x50>)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2100      	movs	r1, #0
 80088cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80088d0:	4a09      	ldr	r2, [pc, #36]	; (80088f8 <vQueueUnregisterQueue+0x50>)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	00db      	lsls	r3, r3, #3
 80088d6:	4413      	add	r3, r2
 80088d8:	2200      	movs	r2, #0
 80088da:	605a      	str	r2, [r3, #4]
				break;
 80088dc:	e006      	b.n	80088ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b07      	cmp	r3, #7
 80088e8:	d9e5      	bls.n	80088b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr
 80088f8:	20000bc0 	.word	0x20000bc0

080088fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800890c:	f001 fcaa 	bl	800a264 <vPortEnterCritical>
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008916:	b25b      	sxtb	r3, r3
 8008918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800891c:	d103      	bne.n	8008926 <vQueueWaitForMessageRestricted+0x2a>
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800892c:	b25b      	sxtb	r3, r3
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008932:	d103      	bne.n	800893c <vQueueWaitForMessageRestricted+0x40>
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800893c:	f001 fcc2 	bl	800a2c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008944:	2b00      	cmp	r3, #0
 8008946:	d106      	bne.n	8008956 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	3324      	adds	r3, #36	; 0x24
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	68b9      	ldr	r1, [r7, #8]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fc85 	bl	8009260 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008956:	6978      	ldr	r0, [r7, #20]
 8008958:	f7ff fefb 	bl	8008752 <prvUnlockQueue>
	}
 800895c:	bf00      	nop
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08e      	sub	sp, #56	; 0x38
 8008968:	af04      	add	r7, sp, #16
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
 8008970:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10a      	bne.n	800898e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	623b      	str	r3, [r7, #32]
}
 800898a:	bf00      	nop
 800898c:	e7fe      	b.n	800898c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800898e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10a      	bne.n	80089aa <xTaskCreateStatic+0x46>
	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	61fb      	str	r3, [r7, #28]
}
 80089a6:	bf00      	nop
 80089a8:	e7fe      	b.n	80089a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089aa:	23c4      	movs	r3, #196	; 0xc4
 80089ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2bc4      	cmp	r3, #196	; 0xc4
 80089b2:	d00a      	beq.n	80089ca <xTaskCreateStatic+0x66>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	61bb      	str	r3, [r7, #24]
}
 80089c6:	bf00      	nop
 80089c8:	e7fe      	b.n	80089c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80089ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80089cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01e      	beq.n	8008a10 <xTaskCreateStatic+0xac>
 80089d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d01b      	beq.n	8008a10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	2202      	movs	r2, #2
 80089e6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089ea:	2300      	movs	r3, #0
 80089ec:	9303      	str	r3, [sp, #12]
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	9302      	str	r3, [sp, #8]
 80089f2:	f107 0314 	add.w	r3, r7, #20
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	68b9      	ldr	r1, [r7, #8]
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 f850 	bl	8008aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a0a:	f000 f8f9 	bl	8008c00 <prvAddNewTaskToReadyList>
 8008a0e:	e001      	b.n	8008a14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a14:	697b      	ldr	r3, [r7, #20]
	}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3728      	adds	r7, #40	; 0x28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b08c      	sub	sp, #48	; 0x30
 8008a22:	af04      	add	r7, sp, #16
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a2e:	88fb      	ldrh	r3, [r7, #6]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f001 fd38 	bl	800a4a8 <pvPortMalloc>
 8008a38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00e      	beq.n	8008a5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a40:	20c4      	movs	r0, #196	; 0xc4
 8008a42:	f001 fd31 	bl	800a4a8 <pvPortMalloc>
 8008a46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	631a      	str	r2, [r3, #48]	; 0x30
 8008a54:	e005      	b.n	8008a62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a56:	6978      	ldr	r0, [r7, #20]
 8008a58:	f001 fdf2 	bl	800a640 <vPortFree>
 8008a5c:	e001      	b.n	8008a62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d017      	beq.n	8008a98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a68:	69fb      	ldr	r3, [r7, #28]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a70:	88fa      	ldrh	r2, [r7, #6]
 8008a72:	2300      	movs	r3, #0
 8008a74:	9303      	str	r3, [sp, #12]
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	9302      	str	r3, [sp, #8]
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	68b9      	ldr	r1, [r7, #8]
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 f80e 	bl	8008aa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a8c:	69f8      	ldr	r0, [r7, #28]
 8008a8e:	f000 f8b7 	bl	8008c00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a92:	2301      	movs	r3, #1
 8008a94:	61bb      	str	r3, [r7, #24]
 8008a96:	e002      	b.n	8008a9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a9e:	69bb      	ldr	r3, [r7, #24]
	}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3720      	adds	r7, #32
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	461a      	mov	r2, r3
 8008ac0:	21a5      	movs	r1, #165	; 0xa5
 8008ac2:	f002 f9ce 	bl	800ae62 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	4413      	add	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	f023 0307 	bic.w	r3, r3, #7
 8008ade:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00a      	beq.n	8008b00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	617b      	str	r3, [r7, #20]
}
 8008afc:	bf00      	nop
 8008afe:	e7fe      	b.n	8008afe <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01f      	beq.n	8008b4c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	61fb      	str	r3, [r7, #28]
 8008b10:	e012      	b.n	8008b38 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b12:	68ba      	ldr	r2, [r7, #8]
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	7819      	ldrb	r1, [r3, #0]
 8008b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	4413      	add	r3, r2
 8008b20:	3334      	adds	r3, #52	; 0x34
 8008b22:	460a      	mov	r2, r1
 8008b24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d006      	beq.n	8008b40 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	3301      	adds	r3, #1
 8008b36:	61fb      	str	r3, [r7, #28]
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	2b0f      	cmp	r3, #15
 8008b3c:	d9e9      	bls.n	8008b12 <prvInitialiseNewTask+0x6a>
 8008b3e:	e000      	b.n	8008b42 <prvInitialiseNewTask+0x9a>
			{
				break;
 8008b40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b4a:	e003      	b.n	8008b54 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b56:	2b37      	cmp	r3, #55	; 0x37
 8008b58:	d901      	bls.n	8008b5e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b5a:	2337      	movs	r3, #55	; 0x37
 8008b5c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b68:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b72:	3304      	adds	r3, #4
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff f803 	bl	8007b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	3318      	adds	r3, #24
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fe fffe 	bl	8007b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8008b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb2:	335c      	adds	r3, #92	; 0x5c
 8008bb4:	2260      	movs	r2, #96	; 0x60
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f002 f952 	bl	800ae62 <memset>
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	4a0c      	ldr	r2, [pc, #48]	; (8008bf4 <prvInitialiseNewTask+0x14c>)
 8008bc2:	661a      	str	r2, [r3, #96]	; 0x60
 8008bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc6:	4a0c      	ldr	r2, [pc, #48]	; (8008bf8 <prvInitialiseNewTask+0x150>)
 8008bc8:	665a      	str	r2, [r3, #100]	; 0x64
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	4a0b      	ldr	r2, [pc, #44]	; (8008bfc <prvInitialiseNewTask+0x154>)
 8008bce:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	68f9      	ldr	r1, [r7, #12]
 8008bd4:	69b8      	ldr	r0, [r7, #24]
 8008bd6:	f001 fa19 	bl	800a00c <pxPortInitialiseStack>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bde:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d002      	beq.n	8008bec <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bec:	bf00      	nop
 8008bee:	3720      	adds	r7, #32
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	0800f83c 	.word	0x0800f83c
 8008bf8:	0800f85c 	.word	0x0800f85c
 8008bfc:	0800f81c 	.word	0x0800f81c

08008c00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c08:	f001 fb2c 	bl	800a264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c0c:	4b2d      	ldr	r3, [pc, #180]	; (8008cc4 <prvAddNewTaskToReadyList+0xc4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3301      	adds	r3, #1
 8008c12:	4a2c      	ldr	r2, [pc, #176]	; (8008cc4 <prvAddNewTaskToReadyList+0xc4>)
 8008c14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c16:	4b2c      	ldr	r3, [pc, #176]	; (8008cc8 <prvAddNewTaskToReadyList+0xc8>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c1e:	4a2a      	ldr	r2, [pc, #168]	; (8008cc8 <prvAddNewTaskToReadyList+0xc8>)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c24:	4b27      	ldr	r3, [pc, #156]	; (8008cc4 <prvAddNewTaskToReadyList+0xc4>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d110      	bne.n	8008c4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c2c:	f000 fc44 	bl	80094b8 <prvInitialiseTaskLists>
 8008c30:	e00d      	b.n	8008c4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c32:	4b26      	ldr	r3, [pc, #152]	; (8008ccc <prvAddNewTaskToReadyList+0xcc>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d109      	bne.n	8008c4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c3a:	4b23      	ldr	r3, [pc, #140]	; (8008cc8 <prvAddNewTaskToReadyList+0xc8>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d802      	bhi.n	8008c4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c48:	4a1f      	ldr	r2, [pc, #124]	; (8008cc8 <prvAddNewTaskToReadyList+0xc8>)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c4e:	4b20      	ldr	r3, [pc, #128]	; (8008cd0 <prvAddNewTaskToReadyList+0xd0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	4a1e      	ldr	r2, [pc, #120]	; (8008cd0 <prvAddNewTaskToReadyList+0xd0>)
 8008c56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c58:	4b1d      	ldr	r3, [pc, #116]	; (8008cd0 <prvAddNewTaskToReadyList+0xd0>)
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c64:	4b1b      	ldr	r3, [pc, #108]	; (8008cd4 <prvAddNewTaskToReadyList+0xd4>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d903      	bls.n	8008c74 <prvAddNewTaskToReadyList+0x74>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	4a18      	ldr	r2, [pc, #96]	; (8008cd4 <prvAddNewTaskToReadyList+0xd4>)
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c78:	4613      	mov	r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	4413      	add	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4a15      	ldr	r2, [pc, #84]	; (8008cd8 <prvAddNewTaskToReadyList+0xd8>)
 8008c82:	441a      	add	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3304      	adds	r3, #4
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	f7fe ff85 	bl	8007b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c90:	f001 fb18 	bl	800a2c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c94:	4b0d      	ldr	r3, [pc, #52]	; (8008ccc <prvAddNewTaskToReadyList+0xcc>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00e      	beq.n	8008cba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <prvAddNewTaskToReadyList+0xc8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d207      	bcs.n	8008cba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008caa:	4b0c      	ldr	r3, [pc, #48]	; (8008cdc <prvAddNewTaskToReadyList+0xdc>)
 8008cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cba:	bf00      	nop
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	200010d4 	.word	0x200010d4
 8008cc8:	20000c00 	.word	0x20000c00
 8008ccc:	200010e0 	.word	0x200010e0
 8008cd0:	200010f0 	.word	0x200010f0
 8008cd4:	200010dc 	.word	0x200010dc
 8008cd8:	20000c04 	.word	0x20000c04
 8008cdc:	e000ed04 	.word	0xe000ed04

08008ce0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d017      	beq.n	8008d22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008cf2:	4b13      	ldr	r3, [pc, #76]	; (8008d40 <vTaskDelay+0x60>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <vTaskDelay+0x30>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	60bb      	str	r3, [r7, #8]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d10:	f000 f88c 	bl	8008e2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d14:	2100      	movs	r1, #0
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fd1c 	bl	8009754 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d1c:	f000 f894 	bl	8008e48 <xTaskResumeAll>
 8008d20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d107      	bne.n	8008d38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d28:	4b06      	ldr	r3, [pc, #24]	; (8008d44 <vTaskDelay+0x64>)
 8008d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2e:	601a      	str	r2, [r3, #0]
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d38:	bf00      	nop
 8008d3a:	3710      	adds	r7, #16
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	200010fc 	.word	0x200010fc
 8008d44:	e000ed04 	.word	0xe000ed04

08008d48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08a      	sub	sp, #40	; 0x28
 8008d4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d52:	2300      	movs	r3, #0
 8008d54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d56:	463a      	mov	r2, r7
 8008d58:	1d39      	adds	r1, r7, #4
 8008d5a:	f107 0308 	add.w	r3, r7, #8
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe feba 	bl	8007ad8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	9202      	str	r2, [sp, #8]
 8008d6c:	9301      	str	r3, [sp, #4]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	2300      	movs	r3, #0
 8008d74:	460a      	mov	r2, r1
 8008d76:	4925      	ldr	r1, [pc, #148]	; (8008e0c <vTaskStartScheduler+0xc4>)
 8008d78:	4825      	ldr	r0, [pc, #148]	; (8008e10 <vTaskStartScheduler+0xc8>)
 8008d7a:	f7ff fdf3 	bl	8008964 <xTaskCreateStatic>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	4a24      	ldr	r2, [pc, #144]	; (8008e14 <vTaskStartScheduler+0xcc>)
 8008d82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d84:	4b23      	ldr	r3, [pc, #140]	; (8008e14 <vTaskStartScheduler+0xcc>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	617b      	str	r3, [r7, #20]
 8008d90:	e001      	b.n	8008d96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d92:	2300      	movs	r3, #0
 8008d94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d102      	bne.n	8008da2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008d9c:	f000 fd2e 	bl	80097fc <xTimerCreateTimerTask>
 8008da0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d11d      	bne.n	8008de4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	613b      	str	r3, [r7, #16]
}
 8008dba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008dbc:	4b16      	ldr	r3, [pc, #88]	; (8008e18 <vTaskStartScheduler+0xd0>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	335c      	adds	r3, #92	; 0x5c
 8008dc2:	4a16      	ldr	r2, [pc, #88]	; (8008e1c <vTaskStartScheduler+0xd4>)
 8008dc4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dc6:	4b16      	ldr	r3, [pc, #88]	; (8008e20 <vTaskStartScheduler+0xd8>)
 8008dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008dce:	4b15      	ldr	r3, [pc, #84]	; (8008e24 <vTaskStartScheduler+0xdc>)
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008dd4:	4b14      	ldr	r3, [pc, #80]	; (8008e28 <vTaskStartScheduler+0xe0>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8008dda:	f7f8 fac9 	bl	8001370 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008dde:	f001 f99f 	bl	800a120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008de2:	e00e      	b.n	8008e02 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dea:	d10a      	bne.n	8008e02 <vTaskStartScheduler+0xba>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	60fb      	str	r3, [r7, #12]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <vTaskStartScheduler+0xb8>
}
 8008e02:	bf00      	nop
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	0800f698 	.word	0x0800f698
 8008e10:	08009489 	.word	0x08009489
 8008e14:	200010f8 	.word	0x200010f8
 8008e18:	20000c00 	.word	0x20000c00
 8008e1c:	20000018 	.word	0x20000018
 8008e20:	200010f4 	.word	0x200010f4
 8008e24:	200010e0 	.word	0x200010e0
 8008e28:	200010d8 	.word	0x200010d8

08008e2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e30:	4b04      	ldr	r3, [pc, #16]	; (8008e44 <vTaskSuspendAll+0x18>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3301      	adds	r3, #1
 8008e36:	4a03      	ldr	r2, [pc, #12]	; (8008e44 <vTaskSuspendAll+0x18>)
 8008e38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e3a:	bf00      	nop
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	200010fc 	.word	0x200010fc

08008e48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e56:	4b42      	ldr	r3, [pc, #264]	; (8008f60 <xTaskResumeAll+0x118>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <xTaskResumeAll+0x2c>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	603b      	str	r3, [r7, #0]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e74:	f001 f9f6 	bl	800a264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e78:	4b39      	ldr	r3, [pc, #228]	; (8008f60 <xTaskResumeAll+0x118>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	4a38      	ldr	r2, [pc, #224]	; (8008f60 <xTaskResumeAll+0x118>)
 8008e80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e82:	4b37      	ldr	r3, [pc, #220]	; (8008f60 <xTaskResumeAll+0x118>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d162      	bne.n	8008f50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e8a:	4b36      	ldr	r3, [pc, #216]	; (8008f64 <xTaskResumeAll+0x11c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d05e      	beq.n	8008f50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e92:	e02f      	b.n	8008ef4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e94:	4b34      	ldr	r3, [pc, #208]	; (8008f68 <xTaskResumeAll+0x120>)
 8008e96:	68db      	ldr	r3, [r3, #12]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3318      	adds	r3, #24
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe fed7 	bl	8007c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fed2 	bl	8007c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb4:	4b2d      	ldr	r3, [pc, #180]	; (8008f6c <xTaskResumeAll+0x124>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d903      	bls.n	8008ec4 <xTaskResumeAll+0x7c>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	4a2a      	ldr	r2, [pc, #168]	; (8008f6c <xTaskResumeAll+0x124>)
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4a27      	ldr	r2, [pc, #156]	; (8008f70 <xTaskResumeAll+0x128>)
 8008ed2:	441a      	add	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7fe fe5d 	bl	8007b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee4:	4b23      	ldr	r3, [pc, #140]	; (8008f74 <xTaskResumeAll+0x12c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d302      	bcc.n	8008ef4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008eee:	4b22      	ldr	r3, [pc, #136]	; (8008f78 <xTaskResumeAll+0x130>)
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ef4:	4b1c      	ldr	r3, [pc, #112]	; (8008f68 <xTaskResumeAll+0x120>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1cb      	bne.n	8008e94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d001      	beq.n	8008f06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f02:	f000 fb7b 	bl	80095fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f06:	4b1d      	ldr	r3, [pc, #116]	; (8008f7c <xTaskResumeAll+0x134>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d010      	beq.n	8008f34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f12:	f000 f847 	bl	8008fa4 <xTaskIncrementTick>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f1c:	4b16      	ldr	r3, [pc, #88]	; (8008f78 <xTaskResumeAll+0x130>)
 8008f1e:	2201      	movs	r2, #1
 8008f20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1f1      	bne.n	8008f12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f2e:	4b13      	ldr	r3, [pc, #76]	; (8008f7c <xTaskResumeAll+0x134>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f34:	4b10      	ldr	r3, [pc, #64]	; (8008f78 <xTaskResumeAll+0x130>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d009      	beq.n	8008f50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f40:	4b0f      	ldr	r3, [pc, #60]	; (8008f80 <xTaskResumeAll+0x138>)
 8008f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f50:	f001 f9b8 	bl	800a2c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008f54:	68bb      	ldr	r3, [r7, #8]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	200010fc 	.word	0x200010fc
 8008f64:	200010d4 	.word	0x200010d4
 8008f68:	20001094 	.word	0x20001094
 8008f6c:	200010dc 	.word	0x200010dc
 8008f70:	20000c04 	.word	0x20000c04
 8008f74:	20000c00 	.word	0x20000c00
 8008f78:	200010e8 	.word	0x200010e8
 8008f7c:	200010e4 	.word	0x200010e4
 8008f80:	e000ed04 	.word	0xe000ed04

08008f84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f8a:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <xTaskGetTickCount+0x1c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008f90:	687b      	ldr	r3, [r7, #4]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	200010d8 	.word	0x200010d8

08008fa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008faa:	2300      	movs	r3, #0
 8008fac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fae:	4b4f      	ldr	r3, [pc, #316]	; (80090ec <xTaskIncrementTick+0x148>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f040 808f 	bne.w	80090d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fb8:	4b4d      	ldr	r3, [pc, #308]	; (80090f0 <xTaskIncrementTick+0x14c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fc0:	4a4b      	ldr	r2, [pc, #300]	; (80090f0 <xTaskIncrementTick+0x14c>)
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d120      	bne.n	800900e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fcc:	4b49      	ldr	r3, [pc, #292]	; (80090f4 <xTaskIncrementTick+0x150>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <xTaskIncrementTick+0x48>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	603b      	str	r3, [r7, #0]
}
 8008fe8:	bf00      	nop
 8008fea:	e7fe      	b.n	8008fea <xTaskIncrementTick+0x46>
 8008fec:	4b41      	ldr	r3, [pc, #260]	; (80090f4 <xTaskIncrementTick+0x150>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	60fb      	str	r3, [r7, #12]
 8008ff2:	4b41      	ldr	r3, [pc, #260]	; (80090f8 <xTaskIncrementTick+0x154>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a3f      	ldr	r2, [pc, #252]	; (80090f4 <xTaskIncrementTick+0x150>)
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	4a3f      	ldr	r2, [pc, #252]	; (80090f8 <xTaskIncrementTick+0x154>)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	4b3e      	ldr	r3, [pc, #248]	; (80090fc <xTaskIncrementTick+0x158>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	4a3d      	ldr	r2, [pc, #244]	; (80090fc <xTaskIncrementTick+0x158>)
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	f000 faf7 	bl	80095fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800900e:	4b3c      	ldr	r3, [pc, #240]	; (8009100 <xTaskIncrementTick+0x15c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	429a      	cmp	r2, r3
 8009016:	d349      	bcc.n	80090ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009018:	4b36      	ldr	r3, [pc, #216]	; (80090f4 <xTaskIncrementTick+0x150>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009022:	4b37      	ldr	r3, [pc, #220]	; (8009100 <xTaskIncrementTick+0x15c>)
 8009024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009028:	601a      	str	r2, [r3, #0]
					break;
 800902a:	e03f      	b.n	80090ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800902c:	4b31      	ldr	r3, [pc, #196]	; (80090f4 <xTaskIncrementTick+0x150>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d203      	bcs.n	800904c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009044:	4a2e      	ldr	r2, [pc, #184]	; (8009100 <xTaskIncrementTick+0x15c>)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800904a:	e02f      	b.n	80090ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	3304      	adds	r3, #4
 8009050:	4618      	mov	r0, r3
 8009052:	f7fe fdff 	bl	8007c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	2b00      	cmp	r3, #0
 800905c:	d004      	beq.n	8009068 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	3318      	adds	r3, #24
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe fdf6 	bl	8007c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906c:	4b25      	ldr	r3, [pc, #148]	; (8009104 <xTaskIncrementTick+0x160>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d903      	bls.n	800907c <xTaskIncrementTick+0xd8>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009078:	4a22      	ldr	r2, [pc, #136]	; (8009104 <xTaskIncrementTick+0x160>)
 800907a:	6013      	str	r3, [r2, #0]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009080:	4613      	mov	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	4a1f      	ldr	r2, [pc, #124]	; (8009108 <xTaskIncrementTick+0x164>)
 800908a:	441a      	add	r2, r3
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	3304      	adds	r3, #4
 8009090:	4619      	mov	r1, r3
 8009092:	4610      	mov	r0, r2
 8009094:	f7fe fd81 	bl	8007b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909c:	4b1b      	ldr	r3, [pc, #108]	; (800910c <xTaskIncrementTick+0x168>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d3b8      	bcc.n	8009018 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80090a6:	2301      	movs	r3, #1
 80090a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090aa:	e7b5      	b.n	8009018 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090ac:	4b17      	ldr	r3, [pc, #92]	; (800910c <xTaskIncrementTick+0x168>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b2:	4915      	ldr	r1, [pc, #84]	; (8009108 <xTaskIncrementTick+0x164>)
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	440b      	add	r3, r1
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d901      	bls.n	80090c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80090c4:	2301      	movs	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090c8:	4b11      	ldr	r3, [pc, #68]	; (8009110 <xTaskIncrementTick+0x16c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d007      	beq.n	80090e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80090d0:	2301      	movs	r3, #1
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	e004      	b.n	80090e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090d6:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <xTaskIncrementTick+0x170>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3301      	adds	r3, #1
 80090dc:	4a0d      	ldr	r2, [pc, #52]	; (8009114 <xTaskIncrementTick+0x170>)
 80090de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090e0:	697b      	ldr	r3, [r7, #20]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200010fc 	.word	0x200010fc
 80090f0:	200010d8 	.word	0x200010d8
 80090f4:	2000108c 	.word	0x2000108c
 80090f8:	20001090 	.word	0x20001090
 80090fc:	200010ec 	.word	0x200010ec
 8009100:	200010f4 	.word	0x200010f4
 8009104:	200010dc 	.word	0x200010dc
 8009108:	20000c04 	.word	0x20000c04
 800910c:	20000c00 	.word	0x20000c00
 8009110:	200010e8 	.word	0x200010e8
 8009114:	200010e4 	.word	0x200010e4

08009118 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800911e:	4b36      	ldr	r3, [pc, #216]	; (80091f8 <vTaskSwitchContext+0xe0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009126:	4b35      	ldr	r3, [pc, #212]	; (80091fc <vTaskSwitchContext+0xe4>)
 8009128:	2201      	movs	r2, #1
 800912a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800912c:	e05f      	b.n	80091ee <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800912e:	4b33      	ldr	r3, [pc, #204]	; (80091fc <vTaskSwitchContext+0xe4>)
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009134:	f7f8 f923 	bl	800137e <getRunTimeCounterValue>
 8009138:	4603      	mov	r3, r0
 800913a:	4a31      	ldr	r2, [pc, #196]	; (8009200 <vTaskSwitchContext+0xe8>)
 800913c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800913e:	4b30      	ldr	r3, [pc, #192]	; (8009200 <vTaskSwitchContext+0xe8>)
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4b30      	ldr	r3, [pc, #192]	; (8009204 <vTaskSwitchContext+0xec>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	429a      	cmp	r2, r3
 8009148:	d909      	bls.n	800915e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800914a:	4b2f      	ldr	r3, [pc, #188]	; (8009208 <vTaskSwitchContext+0xf0>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009150:	4a2b      	ldr	r2, [pc, #172]	; (8009200 <vTaskSwitchContext+0xe8>)
 8009152:	6810      	ldr	r0, [r2, #0]
 8009154:	4a2b      	ldr	r2, [pc, #172]	; (8009204 <vTaskSwitchContext+0xec>)
 8009156:	6812      	ldr	r2, [r2, #0]
 8009158:	1a82      	subs	r2, r0, r2
 800915a:	440a      	add	r2, r1
 800915c:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800915e:	4b28      	ldr	r3, [pc, #160]	; (8009200 <vTaskSwitchContext+0xe8>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a28      	ldr	r2, [pc, #160]	; (8009204 <vTaskSwitchContext+0xec>)
 8009164:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009166:	4b29      	ldr	r3, [pc, #164]	; (800920c <vTaskSwitchContext+0xf4>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	e010      	b.n	8009190 <vTaskSwitchContext+0x78>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <vTaskSwitchContext+0x72>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	607b      	str	r3, [r7, #4]
}
 8009186:	bf00      	nop
 8009188:	e7fe      	b.n	8009188 <vTaskSwitchContext+0x70>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3b01      	subs	r3, #1
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	491f      	ldr	r1, [pc, #124]	; (8009210 <vTaskSwitchContext+0xf8>)
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	4613      	mov	r3, r2
 8009196:	009b      	lsls	r3, r3, #2
 8009198:	4413      	add	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	440b      	add	r3, r1
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0e4      	beq.n	800916e <vTaskSwitchContext+0x56>
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	4613      	mov	r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	4413      	add	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4a18      	ldr	r2, [pc, #96]	; (8009210 <vTaskSwitchContext+0xf8>)
 80091b0:	4413      	add	r3, r2
 80091b2:	60bb      	str	r3, [r7, #8]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	605a      	str	r2, [r3, #4]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	3308      	adds	r3, #8
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d104      	bne.n	80091d4 <vTaskSwitchContext+0xbc>
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	605a      	str	r2, [r3, #4]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	4a0b      	ldr	r2, [pc, #44]	; (8009208 <vTaskSwitchContext+0xf0>)
 80091dc:	6013      	str	r3, [r2, #0]
 80091de:	4a0b      	ldr	r2, [pc, #44]	; (800920c <vTaskSwitchContext+0xf4>)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091e4:	4b08      	ldr	r3, [pc, #32]	; (8009208 <vTaskSwitchContext+0xf0>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	335c      	adds	r3, #92	; 0x5c
 80091ea:	4a0a      	ldr	r2, [pc, #40]	; (8009214 <vTaskSwitchContext+0xfc>)
 80091ec:	6013      	str	r3, [r2, #0]
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	200010fc 	.word	0x200010fc
 80091fc:	200010e8 	.word	0x200010e8
 8009200:	20001104 	.word	0x20001104
 8009204:	20001100 	.word	0x20001100
 8009208:	20000c00 	.word	0x20000c00
 800920c:	200010dc 	.word	0x200010dc
 8009210:	20000c04 	.word	0x20000c04
 8009214:	20000018 	.word	0x20000018

08009218 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10a      	bne.n	800923e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922c:	f383 8811 	msr	BASEPRI, r3
 8009230:	f3bf 8f6f 	isb	sy
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	60fb      	str	r3, [r7, #12]
}
 800923a:	bf00      	nop
 800923c:	e7fe      	b.n	800923c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800923e:	4b07      	ldr	r3, [pc, #28]	; (800925c <vTaskPlaceOnEventList+0x44>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	3318      	adds	r3, #24
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7fe fccb 	bl	8007be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800924c:	2101      	movs	r1, #1
 800924e:	6838      	ldr	r0, [r7, #0]
 8009250:	f000 fa80 	bl	8009754 <prvAddCurrentTaskToDelayedList>
}
 8009254:	bf00      	nop
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	20000c00 	.word	0x20000c00

08009260 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10a      	bne.n	8009288 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	617b      	str	r3, [r7, #20]
}
 8009284:	bf00      	nop
 8009286:	e7fe      	b.n	8009286 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3318      	adds	r3, #24
 800928e:	4619      	mov	r1, r3
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7fe fc82 	bl	8007b9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800929c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092a2:	6879      	ldr	r1, [r7, #4]
 80092a4:	68b8      	ldr	r0, [r7, #8]
 80092a6:	f000 fa55 	bl	8009754 <prvAddCurrentTaskToDelayedList>
	}
 80092aa:	bf00      	nop
 80092ac:	3718      	adds	r7, #24
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20000c00 	.word	0x20000c00

080092b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10a      	bne.n	80092e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	60fb      	str	r3, [r7, #12]
}
 80092e0:	bf00      	nop
 80092e2:	e7fe      	b.n	80092e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	3318      	adds	r3, #24
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe fcb3 	bl	8007c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092ee:	4b1e      	ldr	r3, [pc, #120]	; (8009368 <xTaskRemoveFromEventList+0xb0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d11d      	bne.n	8009332 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	3304      	adds	r3, #4
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fcaa 	bl	8007c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009304:	4b19      	ldr	r3, [pc, #100]	; (800936c <xTaskRemoveFromEventList+0xb4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	429a      	cmp	r2, r3
 800930a:	d903      	bls.n	8009314 <xTaskRemoveFromEventList+0x5c>
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009310:	4a16      	ldr	r2, [pc, #88]	; (800936c <xTaskRemoveFromEventList+0xb4>)
 8009312:	6013      	str	r3, [r2, #0]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009318:	4613      	mov	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4a13      	ldr	r2, [pc, #76]	; (8009370 <xTaskRemoveFromEventList+0xb8>)
 8009322:	441a      	add	r2, r3
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	3304      	adds	r3, #4
 8009328:	4619      	mov	r1, r3
 800932a:	4610      	mov	r0, r2
 800932c:	f7fe fc35 	bl	8007b9a <vListInsertEnd>
 8009330:	e005      	b.n	800933e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	3318      	adds	r3, #24
 8009336:	4619      	mov	r1, r3
 8009338:	480e      	ldr	r0, [pc, #56]	; (8009374 <xTaskRemoveFromEventList+0xbc>)
 800933a:	f7fe fc2e 	bl	8007b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009342:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <xTaskRemoveFromEventList+0xc0>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	429a      	cmp	r2, r3
 800934a:	d905      	bls.n	8009358 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800934c:	2301      	movs	r3, #1
 800934e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009350:	4b0a      	ldr	r3, [pc, #40]	; (800937c <xTaskRemoveFromEventList+0xc4>)
 8009352:	2201      	movs	r2, #1
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	e001      	b.n	800935c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009358:	2300      	movs	r3, #0
 800935a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800935c:	697b      	ldr	r3, [r7, #20]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	200010fc 	.word	0x200010fc
 800936c:	200010dc 	.word	0x200010dc
 8009370:	20000c04 	.word	0x20000c04
 8009374:	20001094 	.word	0x20001094
 8009378:	20000c00 	.word	0x20000c00
 800937c:	200010e8 	.word	0x200010e8

08009380 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009388:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <vTaskInternalSetTimeOutState+0x24>)
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009390:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <vTaskInternalSetTimeOutState+0x28>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	605a      	str	r2, [r3, #4]
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	200010ec 	.word	0x200010ec
 80093a8:	200010d8 	.word	0x200010d8

080093ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d10a      	bne.n	80093d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80093bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c0:	f383 8811 	msr	BASEPRI, r3
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	f3bf 8f4f 	dsb	sy
 80093cc:	613b      	str	r3, [r7, #16]
}
 80093ce:	bf00      	nop
 80093d0:	e7fe      	b.n	80093d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d10a      	bne.n	80093ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	60fb      	str	r3, [r7, #12]
}
 80093ea:	bf00      	nop
 80093ec:	e7fe      	b.n	80093ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80093ee:	f000 ff39 	bl	800a264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80093f2:	4b1d      	ldr	r3, [pc, #116]	; (8009468 <xTaskCheckForTimeOut+0xbc>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800940a:	d102      	bne.n	8009412 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]
 8009410:	e023      	b.n	800945a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	4b15      	ldr	r3, [pc, #84]	; (800946c <xTaskCheckForTimeOut+0xc0>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d007      	beq.n	800942e <xTaskCheckForTimeOut+0x82>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	429a      	cmp	r2, r3
 8009426:	d302      	bcc.n	800942e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009428:	2301      	movs	r3, #1
 800942a:	61fb      	str	r3, [r7, #28]
 800942c:	e015      	b.n	800945a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	429a      	cmp	r2, r3
 8009436:	d20b      	bcs.n	8009450 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	1ad2      	subs	r2, r2, r3
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff ff9b 	bl	8009380 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	61fb      	str	r3, [r7, #28]
 800944e:	e004      	b.n	800945a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2200      	movs	r2, #0
 8009454:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009456:	2301      	movs	r3, #1
 8009458:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800945a:	f000 ff33 	bl	800a2c4 <vPortExitCritical>

	return xReturn;
 800945e:	69fb      	ldr	r3, [r7, #28]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3720      	adds	r7, #32
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	200010d8 	.word	0x200010d8
 800946c:	200010ec 	.word	0x200010ec

08009470 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009470:	b480      	push	{r7}
 8009472:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009474:	4b03      	ldr	r3, [pc, #12]	; (8009484 <vTaskMissedYield+0x14>)
 8009476:	2201      	movs	r2, #1
 8009478:	601a      	str	r2, [r3, #0]
}
 800947a:	bf00      	nop
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	200010e8 	.word	0x200010e8

08009488 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009490:	f000 f852 	bl	8009538 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009494:	4b06      	ldr	r3, [pc, #24]	; (80094b0 <prvIdleTask+0x28>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d9f9      	bls.n	8009490 <prvIdleTask+0x8>
			{
				taskYIELD();
 800949c:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <prvIdleTask+0x2c>)
 800949e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094ac:	e7f0      	b.n	8009490 <prvIdleTask+0x8>
 80094ae:	bf00      	nop
 80094b0:	20000c04 	.word	0x20000c04
 80094b4:	e000ed04 	.word	0xe000ed04

080094b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094be:	2300      	movs	r3, #0
 80094c0:	607b      	str	r3, [r7, #4]
 80094c2:	e00c      	b.n	80094de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4a12      	ldr	r2, [pc, #72]	; (8009518 <prvInitialiseTaskLists+0x60>)
 80094d0:	4413      	add	r3, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fe fb34 	bl	8007b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	3301      	adds	r3, #1
 80094dc:	607b      	str	r3, [r7, #4]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2b37      	cmp	r3, #55	; 0x37
 80094e2:	d9ef      	bls.n	80094c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80094e4:	480d      	ldr	r0, [pc, #52]	; (800951c <prvInitialiseTaskLists+0x64>)
 80094e6:	f7fe fb2b 	bl	8007b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80094ea:	480d      	ldr	r0, [pc, #52]	; (8009520 <prvInitialiseTaskLists+0x68>)
 80094ec:	f7fe fb28 	bl	8007b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80094f0:	480c      	ldr	r0, [pc, #48]	; (8009524 <prvInitialiseTaskLists+0x6c>)
 80094f2:	f7fe fb25 	bl	8007b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80094f6:	480c      	ldr	r0, [pc, #48]	; (8009528 <prvInitialiseTaskLists+0x70>)
 80094f8:	f7fe fb22 	bl	8007b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80094fc:	480b      	ldr	r0, [pc, #44]	; (800952c <prvInitialiseTaskLists+0x74>)
 80094fe:	f7fe fb1f 	bl	8007b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009502:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <prvInitialiseTaskLists+0x78>)
 8009504:	4a05      	ldr	r2, [pc, #20]	; (800951c <prvInitialiseTaskLists+0x64>)
 8009506:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <prvInitialiseTaskLists+0x7c>)
 800950a:	4a05      	ldr	r2, [pc, #20]	; (8009520 <prvInitialiseTaskLists+0x68>)
 800950c:	601a      	str	r2, [r3, #0]
}
 800950e:	bf00      	nop
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20000c04 	.word	0x20000c04
 800951c:	20001064 	.word	0x20001064
 8009520:	20001078 	.word	0x20001078
 8009524:	20001094 	.word	0x20001094
 8009528:	200010a8 	.word	0x200010a8
 800952c:	200010c0 	.word	0x200010c0
 8009530:	2000108c 	.word	0x2000108c
 8009534:	20001090 	.word	0x20001090

08009538 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800953e:	e019      	b.n	8009574 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009540:	f000 fe90 	bl	800a264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009544:	4b10      	ldr	r3, [pc, #64]	; (8009588 <prvCheckTasksWaitingTermination+0x50>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3304      	adds	r3, #4
 8009550:	4618      	mov	r0, r3
 8009552:	f7fe fb7f 	bl	8007c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009556:	4b0d      	ldr	r3, [pc, #52]	; (800958c <prvCheckTasksWaitingTermination+0x54>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3b01      	subs	r3, #1
 800955c:	4a0b      	ldr	r2, [pc, #44]	; (800958c <prvCheckTasksWaitingTermination+0x54>)
 800955e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009560:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <prvCheckTasksWaitingTermination+0x58>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3b01      	subs	r3, #1
 8009566:	4a0a      	ldr	r2, [pc, #40]	; (8009590 <prvCheckTasksWaitingTermination+0x58>)
 8009568:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800956a:	f000 feab 	bl	800a2c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f810 	bl	8009594 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009574:	4b06      	ldr	r3, [pc, #24]	; (8009590 <prvCheckTasksWaitingTermination+0x58>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1e1      	bne.n	8009540 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800957c:	bf00      	nop
 800957e:	bf00      	nop
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	200010a8 	.word	0x200010a8
 800958c:	200010d4 	.word	0x200010d4
 8009590:	200010bc 	.word	0x200010bc

08009594 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009594:	b580      	push	{r7, lr}
 8009596:	b084      	sub	sp, #16
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	335c      	adds	r3, #92	; 0x5c
 80095a0:	4618      	mov	r0, r3
 80095a2:	f002 fb83 	bl	800bcac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d108      	bne.n	80095c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b4:	4618      	mov	r0, r3
 80095b6:	f001 f843 	bl	800a640 <vPortFree>
				vPortFree( pxTCB );
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f001 f840 	bl	800a640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095c0:	e018      	b.n	80095f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d103      	bne.n	80095d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f001 f837 	bl	800a640 <vPortFree>
	}
 80095d2:	e00f      	b.n	80095f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d00a      	beq.n	80095f4 <prvDeleteTCB+0x60>
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	60fb      	str	r3, [r7, #12]
}
 80095f0:	bf00      	nop
 80095f2:	e7fe      	b.n	80095f2 <prvDeleteTCB+0x5e>
	}
 80095f4:	bf00      	nop
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009602:	4b0c      	ldr	r3, [pc, #48]	; (8009634 <prvResetNextTaskUnblockTime+0x38>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d104      	bne.n	8009616 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800960c:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <prvResetNextTaskUnblockTime+0x3c>)
 800960e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009612:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009614:	e008      	b.n	8009628 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009616:	4b07      	ldr	r3, [pc, #28]	; (8009634 <prvResetNextTaskUnblockTime+0x38>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	4a04      	ldr	r2, [pc, #16]	; (8009638 <prvResetNextTaskUnblockTime+0x3c>)
 8009626:	6013      	str	r3, [r2, #0]
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr
 8009634:	2000108c 	.word	0x2000108c
 8009638:	200010f4 	.word	0x200010f4

0800963c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009642:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <xTaskGetSchedulerState+0x34>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d102      	bne.n	8009650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800964a:	2301      	movs	r3, #1
 800964c:	607b      	str	r3, [r7, #4]
 800964e:	e008      	b.n	8009662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009650:	4b08      	ldr	r3, [pc, #32]	; (8009674 <xTaskGetSchedulerState+0x38>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d102      	bne.n	800965e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009658:	2302      	movs	r3, #2
 800965a:	607b      	str	r3, [r7, #4]
 800965c:	e001      	b.n	8009662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800965e:	2300      	movs	r3, #0
 8009660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009662:	687b      	ldr	r3, [r7, #4]
	}
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	200010e0 	.word	0x200010e0
 8009674:	200010fc 	.word	0x200010fc

08009678 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009684:	2300      	movs	r3, #0
 8009686:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d056      	beq.n	800973c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800968e:	4b2e      	ldr	r3, [pc, #184]	; (8009748 <xTaskPriorityDisinherit+0xd0>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	429a      	cmp	r2, r3
 8009696:	d00a      	beq.n	80096ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	60fb      	str	r3, [r7, #12]
}
 80096aa:	bf00      	nop
 80096ac:	e7fe      	b.n	80096ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10a      	bne.n	80096cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60bb      	str	r3, [r7, #8]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096d0:	1e5a      	subs	r2, r3, #1
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096de:	429a      	cmp	r2, r3
 80096e0:	d02c      	beq.n	800973c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d128      	bne.n	800973c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	3304      	adds	r3, #4
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fab0 	bl	8007c54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009700:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800970c:	4b0f      	ldr	r3, [pc, #60]	; (800974c <xTaskPriorityDisinherit+0xd4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	429a      	cmp	r2, r3
 8009712:	d903      	bls.n	800971c <xTaskPriorityDisinherit+0xa4>
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	4a0c      	ldr	r2, [pc, #48]	; (800974c <xTaskPriorityDisinherit+0xd4>)
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4a09      	ldr	r2, [pc, #36]	; (8009750 <xTaskPriorityDisinherit+0xd8>)
 800972a:	441a      	add	r2, r3
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	3304      	adds	r3, #4
 8009730:	4619      	mov	r1, r3
 8009732:	4610      	mov	r0, r2
 8009734:	f7fe fa31 	bl	8007b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009738:	2301      	movs	r3, #1
 800973a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800973c:	697b      	ldr	r3, [r7, #20]
	}
 800973e:	4618      	mov	r0, r3
 8009740:	3718      	adds	r7, #24
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20000c00 	.word	0x20000c00
 800974c:	200010dc 	.word	0x200010dc
 8009750:	20000c04 	.word	0x20000c04

08009754 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800975e:	4b21      	ldr	r3, [pc, #132]	; (80097e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009764:	4b20      	ldr	r3, [pc, #128]	; (80097e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3304      	adds	r3, #4
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fa72 	bl	8007c54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009776:	d10a      	bne.n	800978e <prvAddCurrentTaskToDelayedList+0x3a>
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d007      	beq.n	800978e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800977e:	4b1a      	ldr	r3, [pc, #104]	; (80097e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3304      	adds	r3, #4
 8009784:	4619      	mov	r1, r3
 8009786:	4819      	ldr	r0, [pc, #100]	; (80097ec <prvAddCurrentTaskToDelayedList+0x98>)
 8009788:	f7fe fa07 	bl	8007b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800978c:	e026      	b.n	80097dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4413      	add	r3, r2
 8009794:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d209      	bcs.n	80097ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097a6:	4b12      	ldr	r3, [pc, #72]	; (80097f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	4b0f      	ldr	r3, [pc, #60]	; (80097e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3304      	adds	r3, #4
 80097b0:	4619      	mov	r1, r3
 80097b2:	4610      	mov	r0, r2
 80097b4:	f7fe fa15 	bl	8007be2 <vListInsert>
}
 80097b8:	e010      	b.n	80097dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097ba:	4b0e      	ldr	r3, [pc, #56]	; (80097f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4619      	mov	r1, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	f7fe fa0b 	bl	8007be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d202      	bcs.n	80097dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097d6:	4a08      	ldr	r2, [pc, #32]	; (80097f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	6013      	str	r3, [r2, #0]
}
 80097dc:	bf00      	nop
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	200010d8 	.word	0x200010d8
 80097e8:	20000c00 	.word	0x20000c00
 80097ec:	200010c0 	.word	0x200010c0
 80097f0:	20001090 	.word	0x20001090
 80097f4:	2000108c 	.word	0x2000108c
 80097f8:	200010f4 	.word	0x200010f4

080097fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b08a      	sub	sp, #40	; 0x28
 8009800:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009802:	2300      	movs	r3, #0
 8009804:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009806:	f000 fba1 	bl	8009f4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800980a:	4b1c      	ldr	r3, [pc, #112]	; (800987c <xTimerCreateTimerTask+0x80>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d021      	beq.n	8009856 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009812:	2300      	movs	r3, #0
 8009814:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009816:	2300      	movs	r3, #0
 8009818:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800981a:	1d3a      	adds	r2, r7, #4
 800981c:	f107 0108 	add.w	r1, r7, #8
 8009820:	f107 030c 	add.w	r3, r7, #12
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe f971 	bl	8007b0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	9202      	str	r2, [sp, #8]
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	2306      	movs	r3, #6
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	2300      	movs	r3, #0
 800983a:	460a      	mov	r2, r1
 800983c:	4910      	ldr	r1, [pc, #64]	; (8009880 <xTimerCreateTimerTask+0x84>)
 800983e:	4811      	ldr	r0, [pc, #68]	; (8009884 <xTimerCreateTimerTask+0x88>)
 8009840:	f7ff f890 	bl	8008964 <xTaskCreateStatic>
 8009844:	4603      	mov	r3, r0
 8009846:	4a10      	ldr	r2, [pc, #64]	; (8009888 <xTimerCreateTimerTask+0x8c>)
 8009848:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800984a:	4b0f      	ldr	r3, [pc, #60]	; (8009888 <xTimerCreateTimerTask+0x8c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d001      	beq.n	8009856 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009852:	2301      	movs	r3, #1
 8009854:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10a      	bne.n	8009872 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	613b      	str	r3, [r7, #16]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009872:	697b      	ldr	r3, [r7, #20]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3718      	adds	r7, #24
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20001138 	.word	0x20001138
 8009880:	0800f6c8 	.word	0x0800f6c8
 8009884:	08009af5 	.word	0x08009af5
 8009888:	2000113c 	.word	0x2000113c

0800988c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af02      	add	r7, sp, #8
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800989a:	202c      	movs	r0, #44	; 0x2c
 800989c:	f000 fe04 	bl	800a4a8 <pvPortMalloc>
 80098a0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00d      	beq.n	80098c4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 f843 	bl	800994a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80098c4:	697b      	ldr	r3, [r7, #20]
	}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b08a      	sub	sp, #40	; 0x28
 80098d2:	af02      	add	r7, sp, #8
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	607a      	str	r2, [r7, #4]
 80098da:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80098dc:	232c      	movs	r3, #44	; 0x2c
 80098de:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	2b2c      	cmp	r3, #44	; 0x2c
 80098e4:	d00a      	beq.n	80098fc <xTimerCreateStatic+0x2e>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	61bb      	str	r3, [r7, #24]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80098fc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80098fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10a      	bne.n	800991a <xTimerCreateStatic+0x4c>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	617b      	str	r3, [r7, #20]
}
 8009916:	bf00      	nop
 8009918:	e7fe      	b.n	8009918 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00d      	beq.n	8009940 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	2202      	movs	r2, #2
 8009928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f000 f805 	bl	800994a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009940:	69fb      	ldr	r3, [r7, #28]
	}
 8009942:	4618      	mov	r0, r3
 8009944:	3720      	adds	r7, #32
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b086      	sub	sp, #24
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	60b9      	str	r1, [r7, #8]
 8009954:	607a      	str	r2, [r7, #4]
 8009956:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	617b      	str	r3, [r7, #20]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	2b00      	cmp	r3, #0
 8009978:	d01e      	beq.n	80099b8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800997a:	f000 fae7 	bl	8009f4c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	68ba      	ldr	r2, [r7, #8]
 8009988:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800998a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	6a3a      	ldr	r2, [r7, #32]
 8009994:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	3304      	adds	r3, #4
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe f8f0 	bl	8007b80 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d008      	beq.n	80099b8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099ac:	f043 0304 	orr.w	r3, r3, #4
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80099b8:	bf00      	nop
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	; 0x28
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	623b      	str	r3, [r7, #32]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80099ee:	4b1a      	ldr	r3, [pc, #104]	; (8009a58 <xTimerGenericCommand+0x98>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d02a      	beq.n	8009a4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2b05      	cmp	r3, #5
 8009a06:	dc18      	bgt.n	8009a3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a08:	f7ff fe18 	bl	800963c <xTaskGetSchedulerState>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d109      	bne.n	8009a26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a12:	4b11      	ldr	r3, [pc, #68]	; (8009a58 <xTimerGenericCommand+0x98>)
 8009a14:	6818      	ldr	r0, [r3, #0]
 8009a16:	f107 0110 	add.w	r1, r7, #16
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a1e:	f7fe faeb 	bl	8007ff8 <xQueueGenericSend>
 8009a22:	6278      	str	r0, [r7, #36]	; 0x24
 8009a24:	e012      	b.n	8009a4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009a26:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <xTimerGenericCommand+0x98>)
 8009a28:	6818      	ldr	r0, [r3, #0]
 8009a2a:	f107 0110 	add.w	r1, r7, #16
 8009a2e:	2300      	movs	r3, #0
 8009a30:	2200      	movs	r2, #0
 8009a32:	f7fe fae1 	bl	8007ff8 <xQueueGenericSend>
 8009a36:	6278      	str	r0, [r7, #36]	; 0x24
 8009a38:	e008      	b.n	8009a4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <xTimerGenericCommand+0x98>)
 8009a3c:	6818      	ldr	r0, [r3, #0]
 8009a3e:	f107 0110 	add.w	r1, r7, #16
 8009a42:	2300      	movs	r3, #0
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	f7fe fbd5 	bl	80081f4 <xQueueGenericSendFromISR>
 8009a4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3728      	adds	r7, #40	; 0x28
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	20001138 	.word	0x20001138

08009a5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af02      	add	r7, sp, #8
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a66:	4b22      	ldr	r3, [pc, #136]	; (8009af0 <prvProcessExpiredTimer+0x94>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fe f8ed 	bl	8007c54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d022      	beq.n	8009ace <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	699a      	ldr	r2, [r3, #24]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	18d1      	adds	r1, r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	6978      	ldr	r0, [r7, #20]
 8009a96:	f000 f8d1 	bl	8009c3c <prvInsertTimerInActiveList>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d01f      	beq.n	8009ae0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	6978      	ldr	r0, [r7, #20]
 8009aac:	f7ff ff88 	bl	80099c0 <xTimerGenericCommand>
 8009ab0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d113      	bne.n	8009ae0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abc:	f383 8811 	msr	BASEPRI, r3
 8009ac0:	f3bf 8f6f 	isb	sy
 8009ac4:	f3bf 8f4f 	dsb	sy
 8009ac8:	60fb      	str	r3, [r7, #12]
}
 8009aca:	bf00      	nop
 8009acc:	e7fe      	b.n	8009acc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad4:	f023 0301 	bic.w	r3, r3, #1
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	6a1b      	ldr	r3, [r3, #32]
 8009ae4:	6978      	ldr	r0, [r7, #20]
 8009ae6:	4798      	blx	r3
}
 8009ae8:	bf00      	nop
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20001130 	.word	0x20001130

08009af4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009afc:	f107 0308 	add.w	r3, r7, #8
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f857 	bl	8009bb4 <prvGetNextExpireTime>
 8009b06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 f803 	bl	8009b18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b12:	f000 f8d5 	bl	8009cc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b16:	e7f1      	b.n	8009afc <prvTimerTask+0x8>

08009b18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b22:	f7ff f983 	bl	8008e2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b26:	f107 0308 	add.w	r3, r7, #8
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 f866 	bl	8009bfc <prvSampleTimeNow>
 8009b30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d130      	bne.n	8009b9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10a      	bne.n	8009b54 <prvProcessTimerOrBlockTask+0x3c>
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d806      	bhi.n	8009b54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009b46:	f7ff f97f 	bl	8008e48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009b4a:	68f9      	ldr	r1, [r7, #12]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ff85 	bl	8009a5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009b52:	e024      	b.n	8009b9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d008      	beq.n	8009b6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009b5a:	4b13      	ldr	r3, [pc, #76]	; (8009ba8 <prvProcessTimerOrBlockTask+0x90>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <prvProcessTimerOrBlockTask+0x50>
 8009b64:	2301      	movs	r3, #1
 8009b66:	e000      	b.n	8009b6a <prvProcessTimerOrBlockTask+0x52>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009b6c:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <prvProcessTimerOrBlockTask+0x94>)
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f7fe febf 	bl	80088fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009b7e:	f7ff f963 	bl	8008e48 <xTaskResumeAll>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10a      	bne.n	8009b9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009b88:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <prvProcessTimerOrBlockTask+0x98>)
 8009b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8e:	601a      	str	r2, [r3, #0]
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	f3bf 8f6f 	isb	sy
}
 8009b98:	e001      	b.n	8009b9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009b9a:	f7ff f955 	bl	8008e48 <xTaskResumeAll>
}
 8009b9e:	bf00      	nop
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20001134 	.word	0x20001134
 8009bac:	20001138 	.word	0x20001138
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bbc:	4b0e      	ldr	r3, [pc, #56]	; (8009bf8 <prvGetNextExpireTime+0x44>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <prvGetNextExpireTime+0x16>
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	e000      	b.n	8009bcc <prvGetNextExpireTime+0x18>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d105      	bne.n	8009be4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bd8:	4b07      	ldr	r3, [pc, #28]	; (8009bf8 <prvGetNextExpireTime+0x44>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	60fb      	str	r3, [r7, #12]
 8009be2:	e001      	b.n	8009be8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009be8:	68fb      	ldr	r3, [r7, #12]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
 8009bf6:	bf00      	nop
 8009bf8:	20001130 	.word	0x20001130

08009bfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c04:	f7ff f9be 	bl	8008f84 <xTaskGetTickCount>
 8009c08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c0a:	4b0b      	ldr	r3, [pc, #44]	; (8009c38 <prvSampleTimeNow+0x3c>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d205      	bcs.n	8009c20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c14:	f000 f936 	bl	8009e84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	e002      	b.n	8009c26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c26:	4a04      	ldr	r2, [pc, #16]	; (8009c38 <prvSampleTimeNow+0x3c>)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	20001140 	.word	0x20001140

08009c3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	68ba      	ldr	r2, [r7, #8]
 8009c52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d812      	bhi.n	8009c88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	1ad2      	subs	r2, r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d302      	bcc.n	8009c76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
 8009c74:	e01b      	b.n	8009cae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009c76:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <prvInsertTimerInActiveList+0x7c>)
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3304      	adds	r3, #4
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4610      	mov	r0, r2
 8009c82:	f7fd ffae 	bl	8007be2 <vListInsert>
 8009c86:	e012      	b.n	8009cae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d206      	bcs.n	8009c9e <prvInsertTimerInActiveList+0x62>
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d302      	bcc.n	8009c9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	617b      	str	r3, [r7, #20]
 8009c9c:	e007      	b.n	8009cae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c9e:	4b07      	ldr	r3, [pc, #28]	; (8009cbc <prvInsertTimerInActiveList+0x80>)
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f7fd ff9a 	bl	8007be2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009cae:	697b      	ldr	r3, [r7, #20]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3718      	adds	r7, #24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	20001134 	.word	0x20001134
 8009cbc:	20001130 	.word	0x20001130

08009cc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08e      	sub	sp, #56	; 0x38
 8009cc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cc6:	e0ca      	b.n	8009e5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	da18      	bge.n	8009d00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009cce:	1d3b      	adds	r3, r7, #4
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10a      	bne.n	8009cf0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	61fb      	str	r3, [r7, #28]
}
 8009cec:	bf00      	nop
 8009cee:	e7fe      	b.n	8009cee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cf6:	6850      	ldr	r0, [r2, #4]
 8009cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cfa:	6892      	ldr	r2, [r2, #8]
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f2c0 80aa 	blt.w	8009e5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0e:	695b      	ldr	r3, [r3, #20]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d004      	beq.n	8009d1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d16:	3304      	adds	r3, #4
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fd ff9b 	bl	8007c54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d1e:	463b      	mov	r3, r7
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7ff ff6b 	bl	8009bfc <prvSampleTimeNow>
 8009d26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2b09      	cmp	r3, #9
 8009d2c:	f200 8097 	bhi.w	8009e5e <prvProcessReceivedCommands+0x19e>
 8009d30:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <prvProcessReceivedCommands+0x78>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009d61 	.word	0x08009d61
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d61 	.word	0x08009d61
 8009d44:	08009dd5 	.word	0x08009dd5
 8009d48:	08009de9 	.word	0x08009de9
 8009d4c:	08009e33 	.word	0x08009e33
 8009d50:	08009d61 	.word	0x08009d61
 8009d54:	08009d61 	.word	0x08009d61
 8009d58:	08009dd5 	.word	0x08009dd5
 8009d5c:	08009de9 	.word	0x08009de9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d66:	f043 0301 	orr.w	r3, r3, #1
 8009d6a:	b2da      	uxtb	r2, r3
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	18d1      	adds	r1, r2, r3
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d80:	f7ff ff5c 	bl	8009c3c <prvInsertTimerInActiveList>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d069      	beq.n	8009e5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d05e      	beq.n	8009e5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	441a      	add	r2, r3
 8009da8:	2300      	movs	r3, #0
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	2300      	movs	r3, #0
 8009dae:	2100      	movs	r1, #0
 8009db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db2:	f7ff fe05 	bl	80099c0 <xTimerGenericCommand>
 8009db6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d14f      	bne.n	8009e5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	61bb      	str	r3, [r7, #24]
}
 8009dd0:	bf00      	nop
 8009dd2:	e7fe      	b.n	8009dd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dda:	f023 0301 	bic.w	r3, r3, #1
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009de6:	e03a      	b.n	8009e5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009dee:	f043 0301 	orr.w	r3, r3, #1
 8009df2:	b2da      	uxtb	r2, r3
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009dfa:	68ba      	ldr	r2, [r7, #8]
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10a      	bne.n	8009e1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	617b      	str	r3, [r7, #20]
}
 8009e1a:	bf00      	nop
 8009e1c:	e7fe      	b.n	8009e1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	699a      	ldr	r2, [r3, #24]
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	18d1      	adds	r1, r2, r3
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e2c:	f7ff ff06 	bl	8009c3c <prvInsertTimerInActiveList>
					break;
 8009e30:	e015      	b.n	8009e5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d103      	bne.n	8009e48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e42:	f000 fbfd 	bl	800a640 <vPortFree>
 8009e46:	e00a      	b.n	8009e5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e4e:	f023 0301 	bic.w	r3, r3, #1
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e5a:	e000      	b.n	8009e5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e5e:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <prvProcessReceivedCommands+0x1c0>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	1d39      	adds	r1, r7, #4
 8009e64:	2200      	movs	r2, #0
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe fa60 	bl	800832c <xQueueReceive>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f47f af2a 	bne.w	8009cc8 <prvProcessReceivedCommands+0x8>
	}
}
 8009e74:	bf00      	nop
 8009e76:	bf00      	nop
 8009e78:	3730      	adds	r7, #48	; 0x30
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20001138 	.word	0x20001138

08009e84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e8a:	e048      	b.n	8009f1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e8c:	4b2d      	ldr	r3, [pc, #180]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e96:	4b2b      	ldr	r3, [pc, #172]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f7fd fed5 	bl	8007c54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a1b      	ldr	r3, [r3, #32]
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009eb8:	f003 0304 	and.w	r3, r3, #4
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d02e      	beq.n	8009f1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	693a      	ldr	r2, [r7, #16]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d90e      	bls.n	8009ef0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ede:	4b19      	ldr	r3, [pc, #100]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	4610      	mov	r0, r2
 8009eea:	f7fd fe7a 	bl	8007be2 <vListInsert>
 8009eee:	e016      	b.n	8009f1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	2100      	movs	r1, #0
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f7ff fd60 	bl	80099c0 <xTimerGenericCommand>
 8009f00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0c:	f383 8811 	msr	BASEPRI, r3
 8009f10:	f3bf 8f6f 	isb	sy
 8009f14:	f3bf 8f4f 	dsb	sy
 8009f18:	603b      	str	r3, [r7, #0]
}
 8009f1a:	bf00      	nop
 8009f1c:	e7fe      	b.n	8009f1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1b1      	bne.n	8009e8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f28:	4b06      	ldr	r3, [pc, #24]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f2e:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <prvSwitchTimerLists+0xc4>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a04      	ldr	r2, [pc, #16]	; (8009f44 <prvSwitchTimerLists+0xc0>)
 8009f34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f36:	4a04      	ldr	r2, [pc, #16]	; (8009f48 <prvSwitchTimerLists+0xc4>)
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	6013      	str	r3, [r2, #0]
}
 8009f3c:	bf00      	nop
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	20001130 	.word	0x20001130
 8009f48:	20001134 	.word	0x20001134

08009f4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f52:	f000 f987 	bl	800a264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f56:	4b15      	ldr	r3, [pc, #84]	; (8009fac <prvCheckForValidListAndQueue+0x60>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d120      	bne.n	8009fa0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f5e:	4814      	ldr	r0, [pc, #80]	; (8009fb0 <prvCheckForValidListAndQueue+0x64>)
 8009f60:	f7fd fdee 	bl	8007b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f64:	4813      	ldr	r0, [pc, #76]	; (8009fb4 <prvCheckForValidListAndQueue+0x68>)
 8009f66:	f7fd fdeb 	bl	8007b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f6a:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <prvCheckForValidListAndQueue+0x6c>)
 8009f6c:	4a10      	ldr	r2, [pc, #64]	; (8009fb0 <prvCheckForValidListAndQueue+0x64>)
 8009f6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f70:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <prvCheckForValidListAndQueue+0x70>)
 8009f72:	4a10      	ldr	r2, [pc, #64]	; (8009fb4 <prvCheckForValidListAndQueue+0x68>)
 8009f74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f76:	2300      	movs	r3, #0
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	4b11      	ldr	r3, [pc, #68]	; (8009fc0 <prvCheckForValidListAndQueue+0x74>)
 8009f7c:	4a11      	ldr	r2, [pc, #68]	; (8009fc4 <prvCheckForValidListAndQueue+0x78>)
 8009f7e:	2110      	movs	r1, #16
 8009f80:	200a      	movs	r0, #10
 8009f82:	f7fd fef9 	bl	8007d78 <xQueueGenericCreateStatic>
 8009f86:	4603      	mov	r3, r0
 8009f88:	4a08      	ldr	r2, [pc, #32]	; (8009fac <prvCheckForValidListAndQueue+0x60>)
 8009f8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009f8c:	4b07      	ldr	r3, [pc, #28]	; (8009fac <prvCheckForValidListAndQueue+0x60>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009f94:	4b05      	ldr	r3, [pc, #20]	; (8009fac <prvCheckForValidListAndQueue+0x60>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	490b      	ldr	r1, [pc, #44]	; (8009fc8 <prvCheckForValidListAndQueue+0x7c>)
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fe fc5a 	bl	8008854 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fa0:	f000 f990 	bl	800a2c4 <vPortExitCritical>
}
 8009fa4:	bf00      	nop
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	20001138 	.word	0x20001138
 8009fb0:	20001108 	.word	0x20001108
 8009fb4:	2000111c 	.word	0x2000111c
 8009fb8:	20001130 	.word	0x20001130
 8009fbc:	20001134 	.word	0x20001134
 8009fc0:	200011e4 	.word	0x200011e4
 8009fc4:	20001144 	.word	0x20001144
 8009fc8:	0800f6d0 	.word	0x0800f6d0

08009fcc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10a      	bne.n	8009ff4 <pvTimerGetTimerID+0x28>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	60fb      	str	r3, [r7, #12]
}
 8009ff0:	bf00      	nop
 8009ff2:	e7fe      	b.n	8009ff2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8009ff4:	f000 f936 	bl	800a264 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009ffe:	f000 f961 	bl	800a2c4 <vPortExitCritical>

	return pvReturn;
 800a002:	693b      	ldr	r3, [r7, #16]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3718      	adds	r7, #24
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3b04      	subs	r3, #4
 800a01c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3b04      	subs	r3, #4
 800a02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f023 0201 	bic.w	r2, r3, #1
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3b04      	subs	r3, #4
 800a03a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a03c:	4a0c      	ldr	r2, [pc, #48]	; (800a070 <pxPortInitialiseStack+0x64>)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3b14      	subs	r3, #20
 800a046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	3b04      	subs	r3, #4
 800a052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f06f 0202 	mvn.w	r2, #2
 800a05a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	3b20      	subs	r3, #32
 800a060:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a062:	68fb      	ldr	r3, [r7, #12]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3714      	adds	r7, #20
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr
 800a070:	0800a075 	.word	0x0800a075

0800a074 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a07e:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <prvTaskExitError+0x54>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a086:	d00a      	beq.n	800a09e <prvTaskExitError+0x2a>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	60fb      	str	r3, [r7, #12]
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <prvTaskExitError+0x28>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	60bb      	str	r3, [r7, #8]
}
 800a0b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a0b2:	bf00      	nop
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d0fc      	beq.n	800a0b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a0ba:	bf00      	nop
 800a0bc:	bf00      	nop
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	20000014 	.word	0x20000014
 800a0cc:	00000000 	.word	0x00000000

0800a0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0d0:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <pxCurrentTCBConst2>)
 800a0d2:	6819      	ldr	r1, [r3, #0]
 800a0d4:	6808      	ldr	r0, [r1, #0]
 800a0d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0da:	f380 8809 	msr	PSP, r0
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8811 	msr	BASEPRI, r0
 800a0ea:	4770      	bx	lr
 800a0ec:	f3af 8000 	nop.w

0800a0f0 <pxCurrentTCBConst2>:
 800a0f0:	20000c00 	.word	0x20000c00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop

0800a0f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a0f8:	4808      	ldr	r0, [pc, #32]	; (800a11c <prvPortStartFirstTask+0x24>)
 800a0fa:	6800      	ldr	r0, [r0, #0]
 800a0fc:	6800      	ldr	r0, [r0, #0]
 800a0fe:	f380 8808 	msr	MSP, r0
 800a102:	f04f 0000 	mov.w	r0, #0
 800a106:	f380 8814 	msr	CONTROL, r0
 800a10a:	b662      	cpsie	i
 800a10c:	b661      	cpsie	f
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	df00      	svc	0
 800a118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a11a:	bf00      	nop
 800a11c:	e000ed08 	.word	0xe000ed08

0800a120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a126:	4b46      	ldr	r3, [pc, #280]	; (800a240 <xPortStartScheduler+0x120>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a46      	ldr	r2, [pc, #280]	; (800a244 <xPortStartScheduler+0x124>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d10a      	bne.n	800a146 <xPortStartScheduler+0x26>
	__asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	613b      	str	r3, [r7, #16]
}
 800a142:	bf00      	nop
 800a144:	e7fe      	b.n	800a144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a146:	4b3e      	ldr	r3, [pc, #248]	; (800a240 <xPortStartScheduler+0x120>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a3f      	ldr	r2, [pc, #252]	; (800a248 <xPortStartScheduler+0x128>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d10a      	bne.n	800a166 <xPortStartScheduler+0x46>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60fb      	str	r3, [r7, #12]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a166:	4b39      	ldr	r3, [pc, #228]	; (800a24c <xPortStartScheduler+0x12c>)
 800a168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	22ff      	movs	r2, #255	; 0xff
 800a176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	781b      	ldrb	r3, [r3, #0]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	b2db      	uxtb	r3, r3
 800a184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a188:	b2da      	uxtb	r2, r3
 800a18a:	4b31      	ldr	r3, [pc, #196]	; (800a250 <xPortStartScheduler+0x130>)
 800a18c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a18e:	4b31      	ldr	r3, [pc, #196]	; (800a254 <xPortStartScheduler+0x134>)
 800a190:	2207      	movs	r2, #7
 800a192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a194:	e009      	b.n	800a1aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a196:	4b2f      	ldr	r3, [pc, #188]	; (800a254 <xPortStartScheduler+0x134>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3b01      	subs	r3, #1
 800a19c:	4a2d      	ldr	r2, [pc, #180]	; (800a254 <xPortStartScheduler+0x134>)
 800a19e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1aa:	78fb      	ldrb	r3, [r7, #3]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1b2:	2b80      	cmp	r3, #128	; 0x80
 800a1b4:	d0ef      	beq.n	800a196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1b6:	4b27      	ldr	r3, [pc, #156]	; (800a254 <xPortStartScheduler+0x134>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f1c3 0307 	rsb	r3, r3, #7
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	d00a      	beq.n	800a1d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	60bb      	str	r3, [r7, #8]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1d8:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <xPortStartScheduler+0x134>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	021b      	lsls	r3, r3, #8
 800a1de:	4a1d      	ldr	r2, [pc, #116]	; (800a254 <xPortStartScheduler+0x134>)
 800a1e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1e2:	4b1c      	ldr	r3, [pc, #112]	; (800a254 <xPortStartScheduler+0x134>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ea:	4a1a      	ldr	r2, [pc, #104]	; (800a254 <xPortStartScheduler+0x134>)
 800a1ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a1f6:	4b18      	ldr	r3, [pc, #96]	; (800a258 <xPortStartScheduler+0x138>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a17      	ldr	r2, [pc, #92]	; (800a258 <xPortStartScheduler+0x138>)
 800a1fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a202:	4b15      	ldr	r3, [pc, #84]	; (800a258 <xPortStartScheduler+0x138>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a14      	ldr	r2, [pc, #80]	; (800a258 <xPortStartScheduler+0x138>)
 800a208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a20c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a20e:	f000 f8dd 	bl	800a3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a212:	4b12      	ldr	r3, [pc, #72]	; (800a25c <xPortStartScheduler+0x13c>)
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a218:	f000 f8fc 	bl	800a414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a21c:	4b10      	ldr	r3, [pc, #64]	; (800a260 <xPortStartScheduler+0x140>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a0f      	ldr	r2, [pc, #60]	; (800a260 <xPortStartScheduler+0x140>)
 800a222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a228:	f7ff ff66 	bl	800a0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a22c:	f7fe ff74 	bl	8009118 <vTaskSwitchContext>
	prvTaskExitError();
 800a230:	f7ff ff20 	bl	800a074 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	e000ed00 	.word	0xe000ed00
 800a244:	410fc271 	.word	0x410fc271
 800a248:	410fc270 	.word	0x410fc270
 800a24c:	e000e400 	.word	0xe000e400
 800a250:	20001234 	.word	0x20001234
 800a254:	20001238 	.word	0x20001238
 800a258:	e000ed20 	.word	0xe000ed20
 800a25c:	20000014 	.word	0x20000014
 800a260:	e000ef34 	.word	0xe000ef34

0800a264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
	__asm volatile
 800a26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	607b      	str	r3, [r7, #4]
}
 800a27c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a27e:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <vPortEnterCritical+0x58>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3301      	adds	r3, #1
 800a284:	4a0d      	ldr	r2, [pc, #52]	; (800a2bc <vPortEnterCritical+0x58>)
 800a286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <vPortEnterCritical+0x58>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d10f      	bne.n	800a2b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a290:	4b0b      	ldr	r3, [pc, #44]	; (800a2c0 <vPortEnterCritical+0x5c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00a      	beq.n	800a2b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	603b      	str	r3, [r7, #0]
}
 800a2ac:	bf00      	nop
 800a2ae:	e7fe      	b.n	800a2ae <vPortEnterCritical+0x4a>
	}
}
 800a2b0:	bf00      	nop
 800a2b2:	370c      	adds	r7, #12
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	20000014 	.word	0x20000014
 800a2c0:	e000ed04 	.word	0xe000ed04

0800a2c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2ca:	4b12      	ldr	r3, [pc, #72]	; (800a314 <vPortExitCritical+0x50>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10a      	bne.n	800a2e8 <vPortExitCritical+0x24>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	607b      	str	r3, [r7, #4]
}
 800a2e4:	bf00      	nop
 800a2e6:	e7fe      	b.n	800a2e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <vPortExitCritical+0x50>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3b01      	subs	r3, #1
 800a2ee:	4a09      	ldr	r2, [pc, #36]	; (800a314 <vPortExitCritical+0x50>)
 800a2f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2f2:	4b08      	ldr	r3, [pc, #32]	; (800a314 <vPortExitCritical+0x50>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d105      	bne.n	800a306 <vPortExitCritical+0x42>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	f383 8811 	msr	BASEPRI, r3
}
 800a304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a306:	bf00      	nop
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20000014 	.word	0x20000014
	...

0800a320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a320:	f3ef 8009 	mrs	r0, PSP
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	4b15      	ldr	r3, [pc, #84]	; (800a380 <pxCurrentTCBConst>)
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	f01e 0f10 	tst.w	lr, #16
 800a330:	bf08      	it	eq
 800a332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33a:	6010      	str	r0, [r2, #0]
 800a33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a340:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a344:	f380 8811 	msr	BASEPRI, r0
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f7fe fee2 	bl	8009118 <vTaskSwitchContext>
 800a354:	f04f 0000 	mov.w	r0, #0
 800a358:	f380 8811 	msr	BASEPRI, r0
 800a35c:	bc09      	pop	{r0, r3}
 800a35e:	6819      	ldr	r1, [r3, #0]
 800a360:	6808      	ldr	r0, [r1, #0]
 800a362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a366:	f01e 0f10 	tst.w	lr, #16
 800a36a:	bf08      	it	eq
 800a36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a370:	f380 8809 	msr	PSP, r0
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	f3af 8000 	nop.w

0800a380 <pxCurrentTCBConst>:
 800a380:	20000c00 	.word	0x20000c00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop

0800a388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	607b      	str	r3, [r7, #4]
}
 800a3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a3a2:	f7fe fdff 	bl	8008fa4 <xTaskIncrementTick>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3ac:	4b06      	ldr	r3, [pc, #24]	; (800a3c8 <xPortSysTickHandler+0x40>)
 800a3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	f383 8811 	msr	BASEPRI, r3
}
 800a3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	e000ed04 	.word	0xe000ed04

0800a3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3d0:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <vPortSetupTimerInterrupt+0x34>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <vPortSetupTimerInterrupt+0x38>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3dc:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <vPortSetupTimerInterrupt+0x3c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a0a      	ldr	r2, [pc, #40]	; (800a40c <vPortSetupTimerInterrupt+0x40>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	099b      	lsrs	r3, r3, #6
 800a3e8:	4a09      	ldr	r2, [pc, #36]	; (800a410 <vPortSetupTimerInterrupt+0x44>)
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ee:	4b04      	ldr	r3, [pc, #16]	; (800a400 <vPortSetupTimerInterrupt+0x34>)
 800a3f0:	2207      	movs	r2, #7
 800a3f2:	601a      	str	r2, [r3, #0]
}
 800a3f4:	bf00      	nop
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	e000e010 	.word	0xe000e010
 800a404:	e000e018 	.word	0xe000e018
 800a408:	20000000 	.word	0x20000000
 800a40c:	10624dd3 	.word	0x10624dd3
 800a410:	e000e014 	.word	0xe000e014

0800a414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a424 <vPortEnableVFP+0x10>
 800a418:	6801      	ldr	r1, [r0, #0]
 800a41a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a41e:	6001      	str	r1, [r0, #0]
 800a420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a422:	bf00      	nop
 800a424:	e000ed88 	.word	0xe000ed88

0800a428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a42e:	f3ef 8305 	mrs	r3, IPSR
 800a432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b0f      	cmp	r3, #15
 800a438:	d914      	bls.n	800a464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a43a:	4a17      	ldr	r2, [pc, #92]	; (800a498 <vPortValidateInterruptPriority+0x70>)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4413      	add	r3, r2
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a444:	4b15      	ldr	r3, [pc, #84]	; (800a49c <vPortValidateInterruptPriority+0x74>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	7afa      	ldrb	r2, [r7, #11]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d20a      	bcs.n	800a464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	607b      	str	r3, [r7, #4]
}
 800a460:	bf00      	nop
 800a462:	e7fe      	b.n	800a462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a464:	4b0e      	ldr	r3, [pc, #56]	; (800a4a0 <vPortValidateInterruptPriority+0x78>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a46c:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <vPortValidateInterruptPriority+0x7c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d90a      	bls.n	800a48a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	603b      	str	r3, [r7, #0]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <vPortValidateInterruptPriority+0x60>
	}
 800a48a:	bf00      	nop
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	e000e3f0 	.word	0xe000e3f0
 800a49c:	20001234 	.word	0x20001234
 800a4a0:	e000ed0c 	.word	0xe000ed0c
 800a4a4:	20001238 	.word	0x20001238

0800a4a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b08a      	sub	sp, #40	; 0x28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a4b4:	f7fe fcba 	bl	8008e2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a4b8:	4b5b      	ldr	r3, [pc, #364]	; (800a628 <pvPortMalloc+0x180>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a4c0:	f000 f920 	bl	800a704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a4c4:	4b59      	ldr	r3, [pc, #356]	; (800a62c <pvPortMalloc+0x184>)
 800a4c6:	681a      	ldr	r2, [r3, #0]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f040 8093 	bne.w	800a5f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d01d      	beq.n	800a514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a4d8:	2208      	movs	r2, #8
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4413      	add	r3, r2
 800a4de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f003 0307 	and.w	r3, r3, #7
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d014      	beq.n	800a514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f023 0307 	bic.w	r3, r3, #7
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f003 0307 	and.w	r3, r3, #7
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <pvPortMalloc+0x6c>
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	617b      	str	r3, [r7, #20]
}
 800a510:	bf00      	nop
 800a512:	e7fe      	b.n	800a512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d06e      	beq.n	800a5f8 <pvPortMalloc+0x150>
 800a51a:	4b45      	ldr	r3, [pc, #276]	; (800a630 <pvPortMalloc+0x188>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	429a      	cmp	r2, r3
 800a522:	d869      	bhi.n	800a5f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a524:	4b43      	ldr	r3, [pc, #268]	; (800a634 <pvPortMalloc+0x18c>)
 800a526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a528:	4b42      	ldr	r3, [pc, #264]	; (800a634 <pvPortMalloc+0x18c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a52e:	e004      	b.n	800a53a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d903      	bls.n	800a54c <pvPortMalloc+0xa4>
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1f1      	bne.n	800a530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a54c:	4b36      	ldr	r3, [pc, #216]	; (800a628 <pvPortMalloc+0x180>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a552:	429a      	cmp	r2, r3
 800a554:	d050      	beq.n	800a5f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2208      	movs	r2, #8
 800a55c:	4413      	add	r3, r2
 800a55e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6a3b      	ldr	r3, [r7, #32]
 800a566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	685a      	ldr	r2, [r3, #4]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	1ad2      	subs	r2, r2, r3
 800a570:	2308      	movs	r3, #8
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	429a      	cmp	r2, r3
 800a576:	d91f      	bls.n	800a5b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4413      	add	r3, r2
 800a57e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	f003 0307 	and.w	r3, r3, #7
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	613b      	str	r3, [r7, #16]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	1ad2      	subs	r2, r2, r3
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5b2:	69b8      	ldr	r0, [r7, #24]
 800a5b4:	f000 f908 	bl	800a7c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5b8:	4b1d      	ldr	r3, [pc, #116]	; (800a630 <pvPortMalloc+0x188>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	1ad3      	subs	r3, r2, r3
 800a5c2:	4a1b      	ldr	r2, [pc, #108]	; (800a630 <pvPortMalloc+0x188>)
 800a5c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5c6:	4b1a      	ldr	r3, [pc, #104]	; (800a630 <pvPortMalloc+0x188>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	4b1b      	ldr	r3, [pc, #108]	; (800a638 <pvPortMalloc+0x190>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d203      	bcs.n	800a5da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a5d2:	4b17      	ldr	r3, [pc, #92]	; (800a630 <pvPortMalloc+0x188>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a18      	ldr	r2, [pc, #96]	; (800a638 <pvPortMalloc+0x190>)
 800a5d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	4b13      	ldr	r3, [pc, #76]	; (800a62c <pvPortMalloc+0x184>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a5ee:	4b13      	ldr	r3, [pc, #76]	; (800a63c <pvPortMalloc+0x194>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	4a11      	ldr	r2, [pc, #68]	; (800a63c <pvPortMalloc+0x194>)
 800a5f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5f8:	f7fe fc26 	bl	8008e48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	f003 0307 	and.w	r3, r3, #7
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00a      	beq.n	800a61c <pvPortMalloc+0x174>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	60fb      	str	r3, [r7, #12]
}
 800a618:	bf00      	nop
 800a61a:	e7fe      	b.n	800a61a <pvPortMalloc+0x172>
	return pvReturn;
 800a61c:	69fb      	ldr	r3, [r7, #28]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3728      	adds	r7, #40	; 0x28
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20001dfc 	.word	0x20001dfc
 800a62c:	20001e10 	.word	0x20001e10
 800a630:	20001e00 	.word	0x20001e00
 800a634:	20001df4 	.word	0x20001df4
 800a638:	20001e04 	.word	0x20001e04
 800a63c:	20001e08 	.word	0x20001e08

0800a640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d04d      	beq.n	800a6ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a652:	2308      	movs	r3, #8
 800a654:	425b      	negs	r3, r3
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	4413      	add	r3, r2
 800a65a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	4b24      	ldr	r3, [pc, #144]	; (800a6f8 <vPortFree+0xb8>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4013      	ands	r3, r2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10a      	bne.n	800a684 <vPortFree+0x44>
	__asm volatile
 800a66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a672:	f383 8811 	msr	BASEPRI, r3
 800a676:	f3bf 8f6f 	isb	sy
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	60fb      	str	r3, [r7, #12]
}
 800a680:	bf00      	nop
 800a682:	e7fe      	b.n	800a682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00a      	beq.n	800a6a2 <vPortFree+0x62>
	__asm volatile
 800a68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a690:	f383 8811 	msr	BASEPRI, r3
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	60bb      	str	r3, [r7, #8]
}
 800a69e:	bf00      	nop
 800a6a0:	e7fe      	b.n	800a6a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	685a      	ldr	r2, [r3, #4]
 800a6a6:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <vPortFree+0xb8>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d01e      	beq.n	800a6ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d11a      	bne.n	800a6ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	4b0e      	ldr	r3, [pc, #56]	; (800a6f8 <vPortFree+0xb8>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	43db      	mvns	r3, r3
 800a6c2:	401a      	ands	r2, r3
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6c8:	f7fe fbb0 	bl	8008e2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	4b0a      	ldr	r3, [pc, #40]	; (800a6fc <vPortFree+0xbc>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	4a09      	ldr	r2, [pc, #36]	; (800a6fc <vPortFree+0xbc>)
 800a6d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6da:	6938      	ldr	r0, [r7, #16]
 800a6dc:	f000 f874 	bl	800a7c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6e0:	4b07      	ldr	r3, [pc, #28]	; (800a700 <vPortFree+0xc0>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	4a06      	ldr	r2, [pc, #24]	; (800a700 <vPortFree+0xc0>)
 800a6e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a6ea:	f7fe fbad 	bl	8008e48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6ee:	bf00      	nop
 800a6f0:	3718      	adds	r7, #24
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}
 800a6f6:	bf00      	nop
 800a6f8:	20001e10 	.word	0x20001e10
 800a6fc:	20001e00 	.word	0x20001e00
 800a700:	20001e0c 	.word	0x20001e0c

0800a704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a70a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a70e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a710:	4b27      	ldr	r3, [pc, #156]	; (800a7b0 <prvHeapInit+0xac>)
 800a712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f003 0307 	and.w	r3, r3, #7
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00c      	beq.n	800a738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3307      	adds	r3, #7
 800a722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f023 0307 	bic.w	r3, r3, #7
 800a72a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	4a1f      	ldr	r2, [pc, #124]	; (800a7b0 <prvHeapInit+0xac>)
 800a734:	4413      	add	r3, r2
 800a736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a73c:	4a1d      	ldr	r2, [pc, #116]	; (800a7b4 <prvHeapInit+0xb0>)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a742:	4b1c      	ldr	r3, [pc, #112]	; (800a7b4 <prvHeapInit+0xb0>)
 800a744:	2200      	movs	r2, #0
 800a746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	4413      	add	r3, r2
 800a74e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a750:	2208      	movs	r2, #8
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	1a9b      	subs	r3, r3, r2
 800a756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f023 0307 	bic.w	r3, r3, #7
 800a75e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4a15      	ldr	r2, [pc, #84]	; (800a7b8 <prvHeapInit+0xb4>)
 800a764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a766:	4b14      	ldr	r3, [pc, #80]	; (800a7b8 <prvHeapInit+0xb4>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2200      	movs	r2, #0
 800a76c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a76e:	4b12      	ldr	r3, [pc, #72]	; (800a7b8 <prvHeapInit+0xb4>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2200      	movs	r2, #0
 800a774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	1ad2      	subs	r2, r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a784:	4b0c      	ldr	r3, [pc, #48]	; (800a7b8 <prvHeapInit+0xb4>)
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	4a0a      	ldr	r2, [pc, #40]	; (800a7bc <prvHeapInit+0xb8>)
 800a792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	4a09      	ldr	r2, [pc, #36]	; (800a7c0 <prvHeapInit+0xbc>)
 800a79a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a79c:	4b09      	ldr	r3, [pc, #36]	; (800a7c4 <prvHeapInit+0xc0>)
 800a79e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7a2:	601a      	str	r2, [r3, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	2000123c 	.word	0x2000123c
 800a7b4:	20001df4 	.word	0x20001df4
 800a7b8:	20001dfc 	.word	0x20001dfc
 800a7bc:	20001e04 	.word	0x20001e04
 800a7c0:	20001e00 	.word	0x20001e00
 800a7c4:	20001e10 	.word	0x20001e10

0800a7c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7d0:	4b28      	ldr	r3, [pc, #160]	; (800a874 <prvInsertBlockIntoFreeList+0xac>)
 800a7d2:	60fb      	str	r3, [r7, #12]
 800a7d4:	e002      	b.n	800a7dc <prvInsertBlockIntoFreeList+0x14>
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d8f7      	bhi.n	800a7d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	4413      	add	r3, r2
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d108      	bne.n	800a80a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	685a      	ldr	r2, [r3, #4]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	441a      	add	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	441a      	add	r2, r3
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d118      	bne.n	800a850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	4b15      	ldr	r3, [pc, #84]	; (800a878 <prvInsertBlockIntoFreeList+0xb0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d00d      	beq.n	800a846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	441a      	add	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	e008      	b.n	800a858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a846:	4b0c      	ldr	r3, [pc, #48]	; (800a878 <prvInsertBlockIntoFreeList+0xb0>)
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	e003      	b.n	800a858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d002      	beq.n	800a866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a866:	bf00      	nop
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	20001df4 	.word	0x20001df4
 800a878:	20001dfc 	.word	0x20001dfc

0800a87c <vanttec_htons>:
#else
    return __builtin_bswap32(hostlong);
#endif
}

uint16_t vanttec_htons(uint16_t hostshort) {
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	80fb      	strh	r3, [r7, #6]
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
    return hostshort; //No conversion needed
#else
    return __builtin_bswap16(hostshort);
 800a886:	88fb      	ldrh	r3, [r7, #6]
 800a888:	ba5b      	rev16	r3, r3
 800a88a:	b29b      	uxth	r3, r3
#endif
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <vanttec_ntohl>:

uint32_t vanttec_ntohl(uint32_t netlong) {
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
    return netlong; //No conversion needed
#else
    return __builtin_bswap32(netlong);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	ba1b      	rev	r3, r3
#endif
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <can_parse_id>:
#endif

#ifdef __cplusplus
extern "C" {
#endif
uint8_t can_parse_id(const uint8_t *data, uint8_t len) {
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
    if (len == 0 || data == 0) return 0;
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d002      	beq.n	800a8c8 <can_parse_id+0x18>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d101      	bne.n	800a8cc <can_parse_id+0x1c>
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	e001      	b.n	800a8d0 <can_parse_id+0x20>
    return data[0];
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	781b      	ldrb	r3, [r3, #0]
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <can_pack_byte>:

uint8_t can_pack_byte(uint8_t id, uint8_t dataIn, uint8_t *data, uint8_t len){
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	603a      	str	r2, [r7, #0]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	71fb      	strb	r3, [r7, #7]
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	71bb      	strb	r3, [r7, #6]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	717b      	strb	r3, [r7, #5]
	if(len < 2) return 0;
 800a8f2:	797b      	ldrb	r3, [r7, #5]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d801      	bhi.n	800a8fc <can_pack_byte+0x20>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e007      	b.n	800a90c <can_pack_byte+0x30>

	data[0] = id;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	79fa      	ldrb	r2, [r7, #7]
 800a900:	701a      	strb	r2, [r3, #0]
	data[1] = dataIn;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	3301      	adds	r3, #1
 800a906:	79ba      	ldrb	r2, [r7, #6]
 800a908:	701a      	strb	r2, [r3, #0]

	return 2;
 800a90a:	2302      	movs	r3, #2
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <can_parse_float>:

uint8_t can_pack_float(uint8_t id, float n, uint8_t *data, uint8_t len) {
    return can_pack_long(id, serialize_float(n), data, len);
}

float can_parse_float(const uint8_t *data, uint8_t len) {
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	460b      	mov	r3, r1
 800a922:	70fb      	strb	r3, [r7, #3]
    if (data == 0 || len < 5) {
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d002      	beq.n	800a930 <can_parse_float+0x18>
 800a92a:	78fb      	ldrb	r3, [r7, #3]
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	d802      	bhi.n	800a936 <can_parse_float+0x1e>
        return NAN;
 800a930:	eddf 7a09 	vldr	s15, [pc, #36]	; 800a958 <can_parse_float+0x40>
 800a934:	e00b      	b.n	800a94e <can_parse_float+0x36>
    }

    return deserialize_float(deserialize_long(data + 1));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3301      	adds	r3, #1
 800a93a:	4618      	mov	r0, r3
 800a93c:	f000 f878 	bl	800aa30 <deserialize_long>
 800a940:	4603      	mov	r3, r0
 800a942:	4618      	mov	r0, r3
 800a944:	f000 f83e 	bl	800a9c4 <deserialize_float>
 800a948:	eef0 7a40 	vmov.f32	s15, s0
 800a94c:	bf00      	nop
}
 800a94e:	eeb0 0a67 	vmov.f32	s0, s15
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}
 800a958:	7fc00000 	.word	0x7fc00000

0800a95c <can_pack_short>:

uint8_t can_pack_short(uint8_t id, uint16_t n, uint8_t *data, uint8_t len) {
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	603a      	str	r2, [r7, #0]
 800a964:	461a      	mov	r2, r3
 800a966:	4603      	mov	r3, r0
 800a968:	71fb      	strb	r3, [r7, #7]
 800a96a:	460b      	mov	r3, r1
 800a96c:	80bb      	strh	r3, [r7, #4]
 800a96e:	4613      	mov	r3, r2
 800a970:	71bb      	strb	r3, [r7, #6]
    if (data == 0 || len < 3) return 0;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <can_pack_short+0x22>
 800a978:	79bb      	ldrb	r3, [r7, #6]
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d801      	bhi.n	800a982 <can_pack_short+0x26>
 800a97e:	2300      	movs	r3, #0
 800a980:	e00a      	b.n	800a998 <can_pack_short+0x3c>

    data[0] = id;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	79fa      	ldrb	r2, [r7, #7]
 800a986:	701a      	strb	r2, [r3, #0]
    serialize_short(data + 1, n);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	3301      	adds	r3, #1
 800a98c:	88ba      	ldrh	r2, [r7, #4]
 800a98e:	4611      	mov	r1, r2
 800a990:	4618      	mov	r0, r3
 800a992:	f000 f874 	bl	800aa7e <serialize_short>
    return 3;
 800a996:	2303      	movs	r3, #3
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3708      	adds	r7, #8
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <_ZSt5ldexpfi>:
  using ::ldexp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	ed87 0a01 	vstr	s0, [r7, #4]
 800a9aa:	6038      	str	r0, [r7, #0]
 800a9ac:	6838      	ldr	r0, [r7, #0]
 800a9ae:	ed97 0a01 	vldr	s0, [r7, #4]
 800a9b2:	f000 f87f 	bl	800aab4 <ldexpf>
 800a9b6:	eef0 7a40 	vmov.f32	s15, s0
 800a9ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a9be:	3708      	adds	r7, #8
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <deserialize_float>:
#include <math.h>

#ifdef __cplusplus
extern "C" {
#endif
float deserialize_float(uint32_t in) {
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
    bool sgn = in >> 31;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	0fdb      	lsrs	r3, r3, #31
 800a9d0:	75fb      	strb	r3, [r7, #23]
    uint8_t exp = (in >> 23) & 0b011111111;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	0ddb      	lsrs	r3, r3, #23
 800a9d6:	75bb      	strb	r3, [r7, #22]
    uint32_t frac = in & 0x7FFFFF;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a9de:	613b      	str	r3, [r7, #16]

    float out = ldexp((float) frac / 0x7FFFFF, exp - 127);
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ea:	eddf 6a10 	vldr	s13, [pc, #64]	; 800aa2c <deserialize_float+0x68>
 800a9ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a9f2:	7dbb      	ldrb	r3, [r7, #22]
 800a9f4:	3b7f      	subs	r3, #127	; 0x7f
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	eeb0 0a47 	vmov.f32	s0, s14
 800a9fc:	f7ff ffd0 	bl	800a9a0 <_ZSt5ldexpfi>
 800aa00:	ed87 0a03 	vstr	s0, [r7, #12]
    out = sgn ? -out : out;
 800aa04:	7dfb      	ldrb	r3, [r7, #23]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d004      	beq.n	800aa14 <deserialize_float+0x50>
 800aa0a:	edd7 7a03 	vldr	s15, [r7, #12]
 800aa0e:	eef1 7a67 	vneg.f32	s15, s15
 800aa12:	e001      	b.n	800aa18 <deserialize_float+0x54>
 800aa14:	edd7 7a03 	vldr	s15, [r7, #12]
 800aa18:	edc7 7a03 	vstr	s15, [r7, #12]
    return out;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	ee07 3a90 	vmov	s15, r3
}
 800aa22:	eeb0 0a67 	vmov.f32	s0, s15
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	4afffffe 	.word	0x4afffffe

0800aa30 <deserialize_long>:
    out |= data[1];

    return vanttec_ntohs(out);
}

uint32_t deserialize_long(const uint8_t *data) {
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
    uint32_t out;
    out = data[0] << (8 * 3);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	061b      	lsls	r3, r3, #24
 800aa3e:	60fb      	str	r3, [r7, #12]
    out |= data[1] << (8 * 2);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3301      	adds	r3, #1
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	041b      	lsls	r3, r3, #16
 800aa48:	461a      	mov	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	60fb      	str	r3, [r7, #12]
    out |= data[2] << (8);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	3302      	adds	r3, #2
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	021b      	lsls	r3, r3, #8
 800aa58:	461a      	mov	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	60fb      	str	r3, [r7, #12]
    out |= data[3] & 0xff;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3303      	adds	r3, #3
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	461a      	mov	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	60fb      	str	r3, [r7, #12]

    return vanttec_ntohl(out);
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f7ff ff12 	bl	800a898 <vanttec_ntohl>
 800aa74:	4603      	mov	r3, r0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <serialize_short>:
    out |= ieeeExp << 23;
    out |= mant & 0x7fffff;
    return out;
}

void serialize_short(uint8_t *data, uint16_t in) {
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b082      	sub	sp, #8
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	460b      	mov	r3, r1
 800aa88:	807b      	strh	r3, [r7, #2]
    in = vanttec_htons(in);
 800aa8a:	887b      	ldrh	r3, [r7, #2]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff fef5 	bl	800a87c <vanttec_htons>
 800aa92:	4603      	mov	r3, r0
 800aa94:	807b      	strh	r3, [r7, #2]
    data[0] = in >> 8;
 800aa96:	887b      	ldrh	r3, [r7, #2]
 800aa98:	0a1b      	lsrs	r3, r3, #8
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	701a      	strb	r2, [r3, #0]
    data[1] = in & 0xFF;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	887a      	ldrh	r2, [r7, #2]
 800aaa8:	b2d2      	uxtb	r2, r2
 800aaaa:	701a      	strb	r2, [r3, #0]
}
 800aaac:	bf00      	nop
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <ldexpf>:
 800aab4:	b510      	push	{r4, lr}
 800aab6:	ed2d 8b02 	vpush	{d8}
 800aaba:	4604      	mov	r4, r0
 800aabc:	eeb0 8a40 	vmov.f32	s16, s0
 800aac0:	f000 f890 	bl	800abe4 <finitef>
 800aac4:	b1b8      	cbz	r0, 800aaf6 <ldexpf+0x42>
 800aac6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800aaca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aace:	d012      	beq.n	800aaf6 <ldexpf+0x42>
 800aad0:	eeb0 0a48 	vmov.f32	s0, s16
 800aad4:	4620      	mov	r0, r4
 800aad6:	f000 f813 	bl	800ab00 <scalbnf>
 800aada:	eeb0 8a40 	vmov.f32	s16, s0
 800aade:	f000 f881 	bl	800abe4 <finitef>
 800aae2:	b120      	cbz	r0, 800aaee <ldexpf+0x3a>
 800aae4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800aae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaec:	d103      	bne.n	800aaf6 <ldexpf+0x42>
 800aaee:	f000 f887 	bl	800ac00 <__errno>
 800aaf2:	2322      	movs	r3, #34	; 0x22
 800aaf4:	6003      	str	r3, [r0, #0]
 800aaf6:	eeb0 0a48 	vmov.f32	s0, s16
 800aafa:	ecbd 8b02 	vpop	{d8}
 800aafe:	bd10      	pop	{r4, pc}

0800ab00 <scalbnf>:
 800ab00:	ee10 3a10 	vmov	r3, s0
 800ab04:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ab08:	d025      	beq.n	800ab56 <scalbnf+0x56>
 800ab0a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ab0e:	d302      	bcc.n	800ab16 <scalbnf+0x16>
 800ab10:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ab14:	4770      	bx	lr
 800ab16:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ab1a:	d122      	bne.n	800ab62 <scalbnf+0x62>
 800ab1c:	4b2a      	ldr	r3, [pc, #168]	; (800abc8 <scalbnf+0xc8>)
 800ab1e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800abcc <scalbnf+0xcc>
 800ab22:	4298      	cmp	r0, r3
 800ab24:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ab28:	db16      	blt.n	800ab58 <scalbnf+0x58>
 800ab2a:	ee10 3a10 	vmov	r3, s0
 800ab2e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ab32:	3a19      	subs	r2, #25
 800ab34:	4402      	add	r2, r0
 800ab36:	2afe      	cmp	r2, #254	; 0xfe
 800ab38:	dd15      	ble.n	800ab66 <scalbnf+0x66>
 800ab3a:	ee10 3a10 	vmov	r3, s0
 800ab3e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800abd0 <scalbnf+0xd0>
 800ab42:	eddf 6a24 	vldr	s13, [pc, #144]	; 800abd4 <scalbnf+0xd4>
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	eeb0 7a67 	vmov.f32	s14, s15
 800ab4c:	bfb8      	it	lt
 800ab4e:	eef0 7a66 	vmovlt.f32	s15, s13
 800ab52:	ee27 0a27 	vmul.f32	s0, s14, s15
 800ab56:	4770      	bx	lr
 800ab58:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800abd8 <scalbnf+0xd8>
 800ab5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ab60:	4770      	bx	lr
 800ab62:	0dd2      	lsrs	r2, r2, #23
 800ab64:	e7e6      	b.n	800ab34 <scalbnf+0x34>
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	dd06      	ble.n	800ab78 <scalbnf+0x78>
 800ab6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab6e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ab72:	ee00 3a10 	vmov	s0, r3
 800ab76:	4770      	bx	lr
 800ab78:	f112 0f16 	cmn.w	r2, #22
 800ab7c:	da1a      	bge.n	800abb4 <scalbnf+0xb4>
 800ab7e:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ab82:	4298      	cmp	r0, r3
 800ab84:	ee10 3a10 	vmov	r3, s0
 800ab88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab8c:	dd0a      	ble.n	800aba4 <scalbnf+0xa4>
 800ab8e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800abd0 <scalbnf+0xd0>
 800ab92:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800abd4 <scalbnf+0xd4>
 800ab96:	eef0 7a40 	vmov.f32	s15, s0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	bf18      	it	ne
 800ab9e:	eeb0 0a47 	vmovne.f32	s0, s14
 800aba2:	e7db      	b.n	800ab5c <scalbnf+0x5c>
 800aba4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800abd8 <scalbnf+0xd8>
 800aba8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800abdc <scalbnf+0xdc>
 800abac:	eef0 7a40 	vmov.f32	s15, s0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	e7f3      	b.n	800ab9c <scalbnf+0x9c>
 800abb4:	3219      	adds	r2, #25
 800abb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800abba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800abbe:	eddf 7a08 	vldr	s15, [pc, #32]	; 800abe0 <scalbnf+0xe0>
 800abc2:	ee07 3a10 	vmov	s14, r3
 800abc6:	e7c4      	b.n	800ab52 <scalbnf+0x52>
 800abc8:	ffff3cb0 	.word	0xffff3cb0
 800abcc:	4c000000 	.word	0x4c000000
 800abd0:	7149f2ca 	.word	0x7149f2ca
 800abd4:	f149f2ca 	.word	0xf149f2ca
 800abd8:	0da24260 	.word	0x0da24260
 800abdc:	8da24260 	.word	0x8da24260
 800abe0:	33000000 	.word	0x33000000

0800abe4 <finitef>:
 800abe4:	b082      	sub	sp, #8
 800abe6:	ed8d 0a01 	vstr	s0, [sp, #4]
 800abea:	9801      	ldr	r0, [sp, #4]
 800abec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800abf0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800abf4:	bfac      	ite	ge
 800abf6:	2000      	movge	r0, #0
 800abf8:	2001      	movlt	r0, #1
 800abfa:	b002      	add	sp, #8
 800abfc:	4770      	bx	lr
	...

0800ac00 <__errno>:
 800ac00:	4b01      	ldr	r3, [pc, #4]	; (800ac08 <__errno+0x8>)
 800ac02:	6818      	ldr	r0, [r3, #0]
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	20000018 	.word	0x20000018

0800ac0c <std>:
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	b510      	push	{r4, lr}
 800ac10:	4604      	mov	r4, r0
 800ac12:	e9c0 3300 	strd	r3, r3, [r0]
 800ac16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac1a:	6083      	str	r3, [r0, #8]
 800ac1c:	8181      	strh	r1, [r0, #12]
 800ac1e:	6643      	str	r3, [r0, #100]	; 0x64
 800ac20:	81c2      	strh	r2, [r0, #14]
 800ac22:	6183      	str	r3, [r0, #24]
 800ac24:	4619      	mov	r1, r3
 800ac26:	2208      	movs	r2, #8
 800ac28:	305c      	adds	r0, #92	; 0x5c
 800ac2a:	f000 f91a 	bl	800ae62 <memset>
 800ac2e:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <std+0x38>)
 800ac30:	6263      	str	r3, [r4, #36]	; 0x24
 800ac32:	4b05      	ldr	r3, [pc, #20]	; (800ac48 <std+0x3c>)
 800ac34:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac36:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <std+0x40>)
 800ac38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <std+0x44>)
 800ac3c:	6224      	str	r4, [r4, #32]
 800ac3e:	6323      	str	r3, [r4, #48]	; 0x30
 800ac40:	bd10      	pop	{r4, pc}
 800ac42:	bf00      	nop
 800ac44:	0800bdd1 	.word	0x0800bdd1
 800ac48:	0800bdf3 	.word	0x0800bdf3
 800ac4c:	0800be2b 	.word	0x0800be2b
 800ac50:	0800be4f 	.word	0x0800be4f

0800ac54 <_cleanup_r>:
 800ac54:	4901      	ldr	r1, [pc, #4]	; (800ac5c <_cleanup_r+0x8>)
 800ac56:	f000 b8af 	b.w	800adb8 <_fwalk_reent>
 800ac5a:	bf00      	nop
 800ac5c:	0800d9f9 	.word	0x0800d9f9

0800ac60 <__sfmoreglue>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	2268      	movs	r2, #104	; 0x68
 800ac64:	1e4d      	subs	r5, r1, #1
 800ac66:	4355      	muls	r5, r2
 800ac68:	460e      	mov	r6, r1
 800ac6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac6e:	f000 f921 	bl	800aeb4 <_malloc_r>
 800ac72:	4604      	mov	r4, r0
 800ac74:	b140      	cbz	r0, 800ac88 <__sfmoreglue+0x28>
 800ac76:	2100      	movs	r1, #0
 800ac78:	e9c0 1600 	strd	r1, r6, [r0]
 800ac7c:	300c      	adds	r0, #12
 800ac7e:	60a0      	str	r0, [r4, #8]
 800ac80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac84:	f000 f8ed 	bl	800ae62 <memset>
 800ac88:	4620      	mov	r0, r4
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}

0800ac8c <__sfp_lock_acquire>:
 800ac8c:	4801      	ldr	r0, [pc, #4]	; (800ac94 <__sfp_lock_acquire+0x8>)
 800ac8e:	f000 b8d8 	b.w	800ae42 <__retarget_lock_acquire_recursive>
 800ac92:	bf00      	nop
 800ac94:	20001e15 	.word	0x20001e15

0800ac98 <__sfp_lock_release>:
 800ac98:	4801      	ldr	r0, [pc, #4]	; (800aca0 <__sfp_lock_release+0x8>)
 800ac9a:	f000 b8d3 	b.w	800ae44 <__retarget_lock_release_recursive>
 800ac9e:	bf00      	nop
 800aca0:	20001e15 	.word	0x20001e15

0800aca4 <__sinit_lock_acquire>:
 800aca4:	4801      	ldr	r0, [pc, #4]	; (800acac <__sinit_lock_acquire+0x8>)
 800aca6:	f000 b8cc 	b.w	800ae42 <__retarget_lock_acquire_recursive>
 800acaa:	bf00      	nop
 800acac:	20001e16 	.word	0x20001e16

0800acb0 <__sinit_lock_release>:
 800acb0:	4801      	ldr	r0, [pc, #4]	; (800acb8 <__sinit_lock_release+0x8>)
 800acb2:	f000 b8c7 	b.w	800ae44 <__retarget_lock_release_recursive>
 800acb6:	bf00      	nop
 800acb8:	20001e16 	.word	0x20001e16

0800acbc <__sinit>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	4604      	mov	r4, r0
 800acc0:	f7ff fff0 	bl	800aca4 <__sinit_lock_acquire>
 800acc4:	69a3      	ldr	r3, [r4, #24]
 800acc6:	b11b      	cbz	r3, 800acd0 <__sinit+0x14>
 800acc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800accc:	f7ff bff0 	b.w	800acb0 <__sinit_lock_release>
 800acd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acd4:	6523      	str	r3, [r4, #80]	; 0x50
 800acd6:	4b13      	ldr	r3, [pc, #76]	; (800ad24 <__sinit+0x68>)
 800acd8:	4a13      	ldr	r2, [pc, #76]	; (800ad28 <__sinit+0x6c>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	62a2      	str	r2, [r4, #40]	; 0x28
 800acde:	42a3      	cmp	r3, r4
 800ace0:	bf04      	itt	eq
 800ace2:	2301      	moveq	r3, #1
 800ace4:	61a3      	streq	r3, [r4, #24]
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 f820 	bl	800ad2c <__sfp>
 800acec:	6060      	str	r0, [r4, #4]
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 f81c 	bl	800ad2c <__sfp>
 800acf4:	60a0      	str	r0, [r4, #8]
 800acf6:	4620      	mov	r0, r4
 800acf8:	f000 f818 	bl	800ad2c <__sfp>
 800acfc:	2200      	movs	r2, #0
 800acfe:	60e0      	str	r0, [r4, #12]
 800ad00:	2104      	movs	r1, #4
 800ad02:	6860      	ldr	r0, [r4, #4]
 800ad04:	f7ff ff82 	bl	800ac0c <std>
 800ad08:	68a0      	ldr	r0, [r4, #8]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	2109      	movs	r1, #9
 800ad0e:	f7ff ff7d 	bl	800ac0c <std>
 800ad12:	68e0      	ldr	r0, [r4, #12]
 800ad14:	2202      	movs	r2, #2
 800ad16:	2112      	movs	r1, #18
 800ad18:	f7ff ff78 	bl	800ac0c <std>
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	61a3      	str	r3, [r4, #24]
 800ad20:	e7d2      	b.n	800acc8 <__sinit+0xc>
 800ad22:	bf00      	nop
 800ad24:	0800f87c 	.word	0x0800f87c
 800ad28:	0800ac55 	.word	0x0800ac55

0800ad2c <__sfp>:
 800ad2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2e:	4607      	mov	r7, r0
 800ad30:	f7ff ffac 	bl	800ac8c <__sfp_lock_acquire>
 800ad34:	4b1e      	ldr	r3, [pc, #120]	; (800adb0 <__sfp+0x84>)
 800ad36:	681e      	ldr	r6, [r3, #0]
 800ad38:	69b3      	ldr	r3, [r6, #24]
 800ad3a:	b913      	cbnz	r3, 800ad42 <__sfp+0x16>
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f7ff ffbd 	bl	800acbc <__sinit>
 800ad42:	3648      	adds	r6, #72	; 0x48
 800ad44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	d503      	bpl.n	800ad54 <__sfp+0x28>
 800ad4c:	6833      	ldr	r3, [r6, #0]
 800ad4e:	b30b      	cbz	r3, 800ad94 <__sfp+0x68>
 800ad50:	6836      	ldr	r6, [r6, #0]
 800ad52:	e7f7      	b.n	800ad44 <__sfp+0x18>
 800ad54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad58:	b9d5      	cbnz	r5, 800ad90 <__sfp+0x64>
 800ad5a:	4b16      	ldr	r3, [pc, #88]	; (800adb4 <__sfp+0x88>)
 800ad5c:	60e3      	str	r3, [r4, #12]
 800ad5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad62:	6665      	str	r5, [r4, #100]	; 0x64
 800ad64:	f000 f86c 	bl	800ae40 <__retarget_lock_init_recursive>
 800ad68:	f7ff ff96 	bl	800ac98 <__sfp_lock_release>
 800ad6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad74:	6025      	str	r5, [r4, #0]
 800ad76:	61a5      	str	r5, [r4, #24]
 800ad78:	2208      	movs	r2, #8
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad80:	f000 f86f 	bl	800ae62 <memset>
 800ad84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad90:	3468      	adds	r4, #104	; 0x68
 800ad92:	e7d9      	b.n	800ad48 <__sfp+0x1c>
 800ad94:	2104      	movs	r1, #4
 800ad96:	4638      	mov	r0, r7
 800ad98:	f7ff ff62 	bl	800ac60 <__sfmoreglue>
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	6030      	str	r0, [r6, #0]
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d1d5      	bne.n	800ad50 <__sfp+0x24>
 800ada4:	f7ff ff78 	bl	800ac98 <__sfp_lock_release>
 800ada8:	230c      	movs	r3, #12
 800adaa:	603b      	str	r3, [r7, #0]
 800adac:	e7ee      	b.n	800ad8c <__sfp+0x60>
 800adae:	bf00      	nop
 800adb0:	0800f87c 	.word	0x0800f87c
 800adb4:	ffff0001 	.word	0xffff0001

0800adb8 <_fwalk_reent>:
 800adb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adbc:	4606      	mov	r6, r0
 800adbe:	4688      	mov	r8, r1
 800adc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adc4:	2700      	movs	r7, #0
 800adc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adca:	f1b9 0901 	subs.w	r9, r9, #1
 800adce:	d505      	bpl.n	800addc <_fwalk_reent+0x24>
 800add0:	6824      	ldr	r4, [r4, #0]
 800add2:	2c00      	cmp	r4, #0
 800add4:	d1f7      	bne.n	800adc6 <_fwalk_reent+0xe>
 800add6:	4638      	mov	r0, r7
 800add8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800addc:	89ab      	ldrh	r3, [r5, #12]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d907      	bls.n	800adf2 <_fwalk_reent+0x3a>
 800ade2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ade6:	3301      	adds	r3, #1
 800ade8:	d003      	beq.n	800adf2 <_fwalk_reent+0x3a>
 800adea:	4629      	mov	r1, r5
 800adec:	4630      	mov	r0, r6
 800adee:	47c0      	blx	r8
 800adf0:	4307      	orrs	r7, r0
 800adf2:	3568      	adds	r5, #104	; 0x68
 800adf4:	e7e9      	b.n	800adca <_fwalk_reent+0x12>
	...

0800adf8 <__libc_init_array>:
 800adf8:	b570      	push	{r4, r5, r6, lr}
 800adfa:	4d0d      	ldr	r5, [pc, #52]	; (800ae30 <__libc_init_array+0x38>)
 800adfc:	4c0d      	ldr	r4, [pc, #52]	; (800ae34 <__libc_init_array+0x3c>)
 800adfe:	1b64      	subs	r4, r4, r5
 800ae00:	10a4      	asrs	r4, r4, #2
 800ae02:	2600      	movs	r6, #0
 800ae04:	42a6      	cmp	r6, r4
 800ae06:	d109      	bne.n	800ae1c <__libc_init_array+0x24>
 800ae08:	4d0b      	ldr	r5, [pc, #44]	; (800ae38 <__libc_init_array+0x40>)
 800ae0a:	4c0c      	ldr	r4, [pc, #48]	; (800ae3c <__libc_init_array+0x44>)
 800ae0c:	f004 fc06 	bl	800f61c <_init>
 800ae10:	1b64      	subs	r4, r4, r5
 800ae12:	10a4      	asrs	r4, r4, #2
 800ae14:	2600      	movs	r6, #0
 800ae16:	42a6      	cmp	r6, r4
 800ae18:	d105      	bne.n	800ae26 <__libc_init_array+0x2e>
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
 800ae1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae20:	4798      	blx	r3
 800ae22:	3601      	adds	r6, #1
 800ae24:	e7ee      	b.n	800ae04 <__libc_init_array+0xc>
 800ae26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae2a:	4798      	blx	r3
 800ae2c:	3601      	adds	r6, #1
 800ae2e:	e7f2      	b.n	800ae16 <__libc_init_array+0x1e>
 800ae30:	0800fccc 	.word	0x0800fccc
 800ae34:	0800fccc 	.word	0x0800fccc
 800ae38:	0800fccc 	.word	0x0800fccc
 800ae3c:	0800fcd0 	.word	0x0800fcd0

0800ae40 <__retarget_lock_init_recursive>:
 800ae40:	4770      	bx	lr

0800ae42 <__retarget_lock_acquire_recursive>:
 800ae42:	4770      	bx	lr

0800ae44 <__retarget_lock_release_recursive>:
 800ae44:	4770      	bx	lr

0800ae46 <memcpy>:
 800ae46:	440a      	add	r2, r1
 800ae48:	4291      	cmp	r1, r2
 800ae4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae4e:	d100      	bne.n	800ae52 <memcpy+0xc>
 800ae50:	4770      	bx	lr
 800ae52:	b510      	push	{r4, lr}
 800ae54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae5c:	4291      	cmp	r1, r2
 800ae5e:	d1f9      	bne.n	800ae54 <memcpy+0xe>
 800ae60:	bd10      	pop	{r4, pc}

0800ae62 <memset>:
 800ae62:	4402      	add	r2, r0
 800ae64:	4603      	mov	r3, r0
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d100      	bne.n	800ae6c <memset+0xa>
 800ae6a:	4770      	bx	lr
 800ae6c:	f803 1b01 	strb.w	r1, [r3], #1
 800ae70:	e7f9      	b.n	800ae66 <memset+0x4>
	...

0800ae74 <sbrk_aligned>:
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	4e0e      	ldr	r6, [pc, #56]	; (800aeb0 <sbrk_aligned+0x3c>)
 800ae78:	460c      	mov	r4, r1
 800ae7a:	6831      	ldr	r1, [r6, #0]
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	b911      	cbnz	r1, 800ae86 <sbrk_aligned+0x12>
 800ae80:	f000 ff70 	bl	800bd64 <_sbrk_r>
 800ae84:	6030      	str	r0, [r6, #0]
 800ae86:	4621      	mov	r1, r4
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f000 ff6b 	bl	800bd64 <_sbrk_r>
 800ae8e:	1c43      	adds	r3, r0, #1
 800ae90:	d00a      	beq.n	800aea8 <sbrk_aligned+0x34>
 800ae92:	1cc4      	adds	r4, r0, #3
 800ae94:	f024 0403 	bic.w	r4, r4, #3
 800ae98:	42a0      	cmp	r0, r4
 800ae9a:	d007      	beq.n	800aeac <sbrk_aligned+0x38>
 800ae9c:	1a21      	subs	r1, r4, r0
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f000 ff60 	bl	800bd64 <_sbrk_r>
 800aea4:	3001      	adds	r0, #1
 800aea6:	d101      	bne.n	800aeac <sbrk_aligned+0x38>
 800aea8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aeac:	4620      	mov	r0, r4
 800aeae:	bd70      	pop	{r4, r5, r6, pc}
 800aeb0:	20001e1c 	.word	0x20001e1c

0800aeb4 <_malloc_r>:
 800aeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb8:	1ccd      	adds	r5, r1, #3
 800aeba:	f025 0503 	bic.w	r5, r5, #3
 800aebe:	3508      	adds	r5, #8
 800aec0:	2d0c      	cmp	r5, #12
 800aec2:	bf38      	it	cc
 800aec4:	250c      	movcc	r5, #12
 800aec6:	2d00      	cmp	r5, #0
 800aec8:	4607      	mov	r7, r0
 800aeca:	db01      	blt.n	800aed0 <_malloc_r+0x1c>
 800aecc:	42a9      	cmp	r1, r5
 800aece:	d905      	bls.n	800aedc <_malloc_r+0x28>
 800aed0:	230c      	movs	r3, #12
 800aed2:	603b      	str	r3, [r7, #0]
 800aed4:	2600      	movs	r6, #0
 800aed6:	4630      	mov	r0, r6
 800aed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aedc:	4e2e      	ldr	r6, [pc, #184]	; (800af98 <_malloc_r+0xe4>)
 800aede:	f003 f967 	bl	800e1b0 <__malloc_lock>
 800aee2:	6833      	ldr	r3, [r6, #0]
 800aee4:	461c      	mov	r4, r3
 800aee6:	bb34      	cbnz	r4, 800af36 <_malloc_r+0x82>
 800aee8:	4629      	mov	r1, r5
 800aeea:	4638      	mov	r0, r7
 800aeec:	f7ff ffc2 	bl	800ae74 <sbrk_aligned>
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	4604      	mov	r4, r0
 800aef4:	d14d      	bne.n	800af92 <_malloc_r+0xde>
 800aef6:	6834      	ldr	r4, [r6, #0]
 800aef8:	4626      	mov	r6, r4
 800aefa:	2e00      	cmp	r6, #0
 800aefc:	d140      	bne.n	800af80 <_malloc_r+0xcc>
 800aefe:	6823      	ldr	r3, [r4, #0]
 800af00:	4631      	mov	r1, r6
 800af02:	4638      	mov	r0, r7
 800af04:	eb04 0803 	add.w	r8, r4, r3
 800af08:	f000 ff2c 	bl	800bd64 <_sbrk_r>
 800af0c:	4580      	cmp	r8, r0
 800af0e:	d13a      	bne.n	800af86 <_malloc_r+0xd2>
 800af10:	6821      	ldr	r1, [r4, #0]
 800af12:	3503      	adds	r5, #3
 800af14:	1a6d      	subs	r5, r5, r1
 800af16:	f025 0503 	bic.w	r5, r5, #3
 800af1a:	3508      	adds	r5, #8
 800af1c:	2d0c      	cmp	r5, #12
 800af1e:	bf38      	it	cc
 800af20:	250c      	movcc	r5, #12
 800af22:	4629      	mov	r1, r5
 800af24:	4638      	mov	r0, r7
 800af26:	f7ff ffa5 	bl	800ae74 <sbrk_aligned>
 800af2a:	3001      	adds	r0, #1
 800af2c:	d02b      	beq.n	800af86 <_malloc_r+0xd2>
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	442b      	add	r3, r5
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	e00e      	b.n	800af54 <_malloc_r+0xa0>
 800af36:	6822      	ldr	r2, [r4, #0]
 800af38:	1b52      	subs	r2, r2, r5
 800af3a:	d41e      	bmi.n	800af7a <_malloc_r+0xc6>
 800af3c:	2a0b      	cmp	r2, #11
 800af3e:	d916      	bls.n	800af6e <_malloc_r+0xba>
 800af40:	1961      	adds	r1, r4, r5
 800af42:	42a3      	cmp	r3, r4
 800af44:	6025      	str	r5, [r4, #0]
 800af46:	bf18      	it	ne
 800af48:	6059      	strne	r1, [r3, #4]
 800af4a:	6863      	ldr	r3, [r4, #4]
 800af4c:	bf08      	it	eq
 800af4e:	6031      	streq	r1, [r6, #0]
 800af50:	5162      	str	r2, [r4, r5]
 800af52:	604b      	str	r3, [r1, #4]
 800af54:	4638      	mov	r0, r7
 800af56:	f104 060b 	add.w	r6, r4, #11
 800af5a:	f003 f92f 	bl	800e1bc <__malloc_unlock>
 800af5e:	f026 0607 	bic.w	r6, r6, #7
 800af62:	1d23      	adds	r3, r4, #4
 800af64:	1af2      	subs	r2, r6, r3
 800af66:	d0b6      	beq.n	800aed6 <_malloc_r+0x22>
 800af68:	1b9b      	subs	r3, r3, r6
 800af6a:	50a3      	str	r3, [r4, r2]
 800af6c:	e7b3      	b.n	800aed6 <_malloc_r+0x22>
 800af6e:	6862      	ldr	r2, [r4, #4]
 800af70:	42a3      	cmp	r3, r4
 800af72:	bf0c      	ite	eq
 800af74:	6032      	streq	r2, [r6, #0]
 800af76:	605a      	strne	r2, [r3, #4]
 800af78:	e7ec      	b.n	800af54 <_malloc_r+0xa0>
 800af7a:	4623      	mov	r3, r4
 800af7c:	6864      	ldr	r4, [r4, #4]
 800af7e:	e7b2      	b.n	800aee6 <_malloc_r+0x32>
 800af80:	4634      	mov	r4, r6
 800af82:	6876      	ldr	r6, [r6, #4]
 800af84:	e7b9      	b.n	800aefa <_malloc_r+0x46>
 800af86:	230c      	movs	r3, #12
 800af88:	603b      	str	r3, [r7, #0]
 800af8a:	4638      	mov	r0, r7
 800af8c:	f003 f916 	bl	800e1bc <__malloc_unlock>
 800af90:	e7a1      	b.n	800aed6 <_malloc_r+0x22>
 800af92:	6025      	str	r5, [r4, #0]
 800af94:	e7de      	b.n	800af54 <_malloc_r+0xa0>
 800af96:	bf00      	nop
 800af98:	20001e18 	.word	0x20001e18

0800af9c <__cvt>:
 800af9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afa0:	ec55 4b10 	vmov	r4, r5, d0
 800afa4:	2d00      	cmp	r5, #0
 800afa6:	460e      	mov	r6, r1
 800afa8:	4619      	mov	r1, r3
 800afaa:	462b      	mov	r3, r5
 800afac:	bfbb      	ittet	lt
 800afae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800afb2:	461d      	movlt	r5, r3
 800afb4:	2300      	movge	r3, #0
 800afb6:	232d      	movlt	r3, #45	; 0x2d
 800afb8:	700b      	strb	r3, [r1, #0]
 800afba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800afc0:	4691      	mov	r9, r2
 800afc2:	f023 0820 	bic.w	r8, r3, #32
 800afc6:	bfbc      	itt	lt
 800afc8:	4622      	movlt	r2, r4
 800afca:	4614      	movlt	r4, r2
 800afcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800afd0:	d005      	beq.n	800afde <__cvt+0x42>
 800afd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800afd6:	d100      	bne.n	800afda <__cvt+0x3e>
 800afd8:	3601      	adds	r6, #1
 800afda:	2102      	movs	r1, #2
 800afdc:	e000      	b.n	800afe0 <__cvt+0x44>
 800afde:	2103      	movs	r1, #3
 800afe0:	ab03      	add	r3, sp, #12
 800afe2:	9301      	str	r3, [sp, #4]
 800afe4:	ab02      	add	r3, sp, #8
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	ec45 4b10 	vmov	d0, r4, r5
 800afec:	4653      	mov	r3, sl
 800afee:	4632      	mov	r2, r6
 800aff0:	f001 fe8e 	bl	800cd10 <_dtoa_r>
 800aff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aff8:	4607      	mov	r7, r0
 800affa:	d102      	bne.n	800b002 <__cvt+0x66>
 800affc:	f019 0f01 	tst.w	r9, #1
 800b000:	d022      	beq.n	800b048 <__cvt+0xac>
 800b002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b006:	eb07 0906 	add.w	r9, r7, r6
 800b00a:	d110      	bne.n	800b02e <__cvt+0x92>
 800b00c:	783b      	ldrb	r3, [r7, #0]
 800b00e:	2b30      	cmp	r3, #48	; 0x30
 800b010:	d10a      	bne.n	800b028 <__cvt+0x8c>
 800b012:	2200      	movs	r2, #0
 800b014:	2300      	movs	r3, #0
 800b016:	4620      	mov	r0, r4
 800b018:	4629      	mov	r1, r5
 800b01a:	f7f5 fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800b01e:	b918      	cbnz	r0, 800b028 <__cvt+0x8c>
 800b020:	f1c6 0601 	rsb	r6, r6, #1
 800b024:	f8ca 6000 	str.w	r6, [sl]
 800b028:	f8da 3000 	ldr.w	r3, [sl]
 800b02c:	4499      	add	r9, r3
 800b02e:	2200      	movs	r2, #0
 800b030:	2300      	movs	r3, #0
 800b032:	4620      	mov	r0, r4
 800b034:	4629      	mov	r1, r5
 800b036:	f7f5 fd47 	bl	8000ac8 <__aeabi_dcmpeq>
 800b03a:	b108      	cbz	r0, 800b040 <__cvt+0xa4>
 800b03c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b040:	2230      	movs	r2, #48	; 0x30
 800b042:	9b03      	ldr	r3, [sp, #12]
 800b044:	454b      	cmp	r3, r9
 800b046:	d307      	bcc.n	800b058 <__cvt+0xbc>
 800b048:	9b03      	ldr	r3, [sp, #12]
 800b04a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b04c:	1bdb      	subs	r3, r3, r7
 800b04e:	4638      	mov	r0, r7
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	b004      	add	sp, #16
 800b054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b058:	1c59      	adds	r1, r3, #1
 800b05a:	9103      	str	r1, [sp, #12]
 800b05c:	701a      	strb	r2, [r3, #0]
 800b05e:	e7f0      	b.n	800b042 <__cvt+0xa6>

0800b060 <__exponent>:
 800b060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b062:	4603      	mov	r3, r0
 800b064:	2900      	cmp	r1, #0
 800b066:	bfb8      	it	lt
 800b068:	4249      	neglt	r1, r1
 800b06a:	f803 2b02 	strb.w	r2, [r3], #2
 800b06e:	bfb4      	ite	lt
 800b070:	222d      	movlt	r2, #45	; 0x2d
 800b072:	222b      	movge	r2, #43	; 0x2b
 800b074:	2909      	cmp	r1, #9
 800b076:	7042      	strb	r2, [r0, #1]
 800b078:	dd2a      	ble.n	800b0d0 <__exponent+0x70>
 800b07a:	f10d 0407 	add.w	r4, sp, #7
 800b07e:	46a4      	mov	ip, r4
 800b080:	270a      	movs	r7, #10
 800b082:	46a6      	mov	lr, r4
 800b084:	460a      	mov	r2, r1
 800b086:	fb91 f6f7 	sdiv	r6, r1, r7
 800b08a:	fb07 1516 	mls	r5, r7, r6, r1
 800b08e:	3530      	adds	r5, #48	; 0x30
 800b090:	2a63      	cmp	r2, #99	; 0x63
 800b092:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b096:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b09a:	4631      	mov	r1, r6
 800b09c:	dcf1      	bgt.n	800b082 <__exponent+0x22>
 800b09e:	3130      	adds	r1, #48	; 0x30
 800b0a0:	f1ae 0502 	sub.w	r5, lr, #2
 800b0a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b0a8:	1c44      	adds	r4, r0, #1
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4561      	cmp	r1, ip
 800b0ae:	d30a      	bcc.n	800b0c6 <__exponent+0x66>
 800b0b0:	f10d 0209 	add.w	r2, sp, #9
 800b0b4:	eba2 020e 	sub.w	r2, r2, lr
 800b0b8:	4565      	cmp	r5, ip
 800b0ba:	bf88      	it	hi
 800b0bc:	2200      	movhi	r2, #0
 800b0be:	4413      	add	r3, r2
 800b0c0:	1a18      	subs	r0, r3, r0
 800b0c2:	b003      	add	sp, #12
 800b0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b0ce:	e7ed      	b.n	800b0ac <__exponent+0x4c>
 800b0d0:	2330      	movs	r3, #48	; 0x30
 800b0d2:	3130      	adds	r1, #48	; 0x30
 800b0d4:	7083      	strb	r3, [r0, #2]
 800b0d6:	70c1      	strb	r1, [r0, #3]
 800b0d8:	1d03      	adds	r3, r0, #4
 800b0da:	e7f1      	b.n	800b0c0 <__exponent+0x60>

0800b0dc <_printf_float>:
 800b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e0:	ed2d 8b02 	vpush	{d8}
 800b0e4:	b08d      	sub	sp, #52	; 0x34
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b0ec:	4616      	mov	r6, r2
 800b0ee:	461f      	mov	r7, r3
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	f003 f82d 	bl	800e150 <_localeconv_r>
 800b0f6:	f8d0 a000 	ldr.w	sl, [r0]
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	f7f5 f868 	bl	80001d0 <strlen>
 800b100:	2300      	movs	r3, #0
 800b102:	930a      	str	r3, [sp, #40]	; 0x28
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	9305      	str	r3, [sp, #20]
 800b108:	f8d8 3000 	ldr.w	r3, [r8]
 800b10c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b110:	3307      	adds	r3, #7
 800b112:	f023 0307 	bic.w	r3, r3, #7
 800b116:	f103 0208 	add.w	r2, r3, #8
 800b11a:	f8c8 2000 	str.w	r2, [r8]
 800b11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b122:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b126:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b12a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b12e:	9307      	str	r3, [sp, #28]
 800b130:	f8cd 8018 	str.w	r8, [sp, #24]
 800b134:	ee08 0a10 	vmov	s16, r0
 800b138:	4b9f      	ldr	r3, [pc, #636]	; (800b3b8 <_printf_float+0x2dc>)
 800b13a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b13e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b142:	f7f5 fcf3 	bl	8000b2c <__aeabi_dcmpun>
 800b146:	bb88      	cbnz	r0, 800b1ac <_printf_float+0xd0>
 800b148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b14c:	4b9a      	ldr	r3, [pc, #616]	; (800b3b8 <_printf_float+0x2dc>)
 800b14e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b152:	f7f5 fccd 	bl	8000af0 <__aeabi_dcmple>
 800b156:	bb48      	cbnz	r0, 800b1ac <_printf_float+0xd0>
 800b158:	2200      	movs	r2, #0
 800b15a:	2300      	movs	r3, #0
 800b15c:	4640      	mov	r0, r8
 800b15e:	4649      	mov	r1, r9
 800b160:	f7f5 fcbc 	bl	8000adc <__aeabi_dcmplt>
 800b164:	b110      	cbz	r0, 800b16c <_printf_float+0x90>
 800b166:	232d      	movs	r3, #45	; 0x2d
 800b168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b16c:	4b93      	ldr	r3, [pc, #588]	; (800b3bc <_printf_float+0x2e0>)
 800b16e:	4894      	ldr	r0, [pc, #592]	; (800b3c0 <_printf_float+0x2e4>)
 800b170:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b174:	bf94      	ite	ls
 800b176:	4698      	movls	r8, r3
 800b178:	4680      	movhi	r8, r0
 800b17a:	2303      	movs	r3, #3
 800b17c:	6123      	str	r3, [r4, #16]
 800b17e:	9b05      	ldr	r3, [sp, #20]
 800b180:	f023 0204 	bic.w	r2, r3, #4
 800b184:	6022      	str	r2, [r4, #0]
 800b186:	f04f 0900 	mov.w	r9, #0
 800b18a:	9700      	str	r7, [sp, #0]
 800b18c:	4633      	mov	r3, r6
 800b18e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b190:	4621      	mov	r1, r4
 800b192:	4628      	mov	r0, r5
 800b194:	f000 f9d8 	bl	800b548 <_printf_common>
 800b198:	3001      	adds	r0, #1
 800b19a:	f040 8090 	bne.w	800b2be <_printf_float+0x1e2>
 800b19e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1a2:	b00d      	add	sp, #52	; 0x34
 800b1a4:	ecbd 8b02 	vpop	{d8}
 800b1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ac:	4642      	mov	r2, r8
 800b1ae:	464b      	mov	r3, r9
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	f7f5 fcba 	bl	8000b2c <__aeabi_dcmpun>
 800b1b8:	b140      	cbz	r0, 800b1cc <_printf_float+0xf0>
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	bfbc      	itt	lt
 800b1c0:	232d      	movlt	r3, #45	; 0x2d
 800b1c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b1c6:	487f      	ldr	r0, [pc, #508]	; (800b3c4 <_printf_float+0x2e8>)
 800b1c8:	4b7f      	ldr	r3, [pc, #508]	; (800b3c8 <_printf_float+0x2ec>)
 800b1ca:	e7d1      	b.n	800b170 <_printf_float+0x94>
 800b1cc:	6863      	ldr	r3, [r4, #4]
 800b1ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b1d2:	9206      	str	r2, [sp, #24]
 800b1d4:	1c5a      	adds	r2, r3, #1
 800b1d6:	d13f      	bne.n	800b258 <_printf_float+0x17c>
 800b1d8:	2306      	movs	r3, #6
 800b1da:	6063      	str	r3, [r4, #4]
 800b1dc:	9b05      	ldr	r3, [sp, #20]
 800b1de:	6861      	ldr	r1, [r4, #4]
 800b1e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	9303      	str	r3, [sp, #12]
 800b1e8:	ab0a      	add	r3, sp, #40	; 0x28
 800b1ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b1ee:	ab09      	add	r3, sp, #36	; 0x24
 800b1f0:	ec49 8b10 	vmov	d0, r8, r9
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	6022      	str	r2, [r4, #0]
 800b1f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	f7ff fecd 	bl	800af9c <__cvt>
 800b202:	9b06      	ldr	r3, [sp, #24]
 800b204:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b206:	2b47      	cmp	r3, #71	; 0x47
 800b208:	4680      	mov	r8, r0
 800b20a:	d108      	bne.n	800b21e <_printf_float+0x142>
 800b20c:	1cc8      	adds	r0, r1, #3
 800b20e:	db02      	blt.n	800b216 <_printf_float+0x13a>
 800b210:	6863      	ldr	r3, [r4, #4]
 800b212:	4299      	cmp	r1, r3
 800b214:	dd41      	ble.n	800b29a <_printf_float+0x1be>
 800b216:	f1ab 0b02 	sub.w	fp, fp, #2
 800b21a:	fa5f fb8b 	uxtb.w	fp, fp
 800b21e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b222:	d820      	bhi.n	800b266 <_printf_float+0x18a>
 800b224:	3901      	subs	r1, #1
 800b226:	465a      	mov	r2, fp
 800b228:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b22c:	9109      	str	r1, [sp, #36]	; 0x24
 800b22e:	f7ff ff17 	bl	800b060 <__exponent>
 800b232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b234:	1813      	adds	r3, r2, r0
 800b236:	2a01      	cmp	r2, #1
 800b238:	4681      	mov	r9, r0
 800b23a:	6123      	str	r3, [r4, #16]
 800b23c:	dc02      	bgt.n	800b244 <_printf_float+0x168>
 800b23e:	6822      	ldr	r2, [r4, #0]
 800b240:	07d2      	lsls	r2, r2, #31
 800b242:	d501      	bpl.n	800b248 <_printf_float+0x16c>
 800b244:	3301      	adds	r3, #1
 800b246:	6123      	str	r3, [r4, #16]
 800b248:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d09c      	beq.n	800b18a <_printf_float+0xae>
 800b250:	232d      	movs	r3, #45	; 0x2d
 800b252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b256:	e798      	b.n	800b18a <_printf_float+0xae>
 800b258:	9a06      	ldr	r2, [sp, #24]
 800b25a:	2a47      	cmp	r2, #71	; 0x47
 800b25c:	d1be      	bne.n	800b1dc <_printf_float+0x100>
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1bc      	bne.n	800b1dc <_printf_float+0x100>
 800b262:	2301      	movs	r3, #1
 800b264:	e7b9      	b.n	800b1da <_printf_float+0xfe>
 800b266:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b26a:	d118      	bne.n	800b29e <_printf_float+0x1c2>
 800b26c:	2900      	cmp	r1, #0
 800b26e:	6863      	ldr	r3, [r4, #4]
 800b270:	dd0b      	ble.n	800b28a <_printf_float+0x1ae>
 800b272:	6121      	str	r1, [r4, #16]
 800b274:	b913      	cbnz	r3, 800b27c <_printf_float+0x1a0>
 800b276:	6822      	ldr	r2, [r4, #0]
 800b278:	07d0      	lsls	r0, r2, #31
 800b27a:	d502      	bpl.n	800b282 <_printf_float+0x1a6>
 800b27c:	3301      	adds	r3, #1
 800b27e:	440b      	add	r3, r1
 800b280:	6123      	str	r3, [r4, #16]
 800b282:	65a1      	str	r1, [r4, #88]	; 0x58
 800b284:	f04f 0900 	mov.w	r9, #0
 800b288:	e7de      	b.n	800b248 <_printf_float+0x16c>
 800b28a:	b913      	cbnz	r3, 800b292 <_printf_float+0x1b6>
 800b28c:	6822      	ldr	r2, [r4, #0]
 800b28e:	07d2      	lsls	r2, r2, #31
 800b290:	d501      	bpl.n	800b296 <_printf_float+0x1ba>
 800b292:	3302      	adds	r3, #2
 800b294:	e7f4      	b.n	800b280 <_printf_float+0x1a4>
 800b296:	2301      	movs	r3, #1
 800b298:	e7f2      	b.n	800b280 <_printf_float+0x1a4>
 800b29a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a0:	4299      	cmp	r1, r3
 800b2a2:	db05      	blt.n	800b2b0 <_printf_float+0x1d4>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	6121      	str	r1, [r4, #16]
 800b2a8:	07d8      	lsls	r0, r3, #31
 800b2aa:	d5ea      	bpl.n	800b282 <_printf_float+0x1a6>
 800b2ac:	1c4b      	adds	r3, r1, #1
 800b2ae:	e7e7      	b.n	800b280 <_printf_float+0x1a4>
 800b2b0:	2900      	cmp	r1, #0
 800b2b2:	bfd4      	ite	le
 800b2b4:	f1c1 0202 	rsble	r2, r1, #2
 800b2b8:	2201      	movgt	r2, #1
 800b2ba:	4413      	add	r3, r2
 800b2bc:	e7e0      	b.n	800b280 <_printf_float+0x1a4>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	055a      	lsls	r2, r3, #21
 800b2c2:	d407      	bmi.n	800b2d4 <_printf_float+0x1f8>
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	4642      	mov	r2, r8
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	47b8      	blx	r7
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	d12c      	bne.n	800b32c <_printf_float+0x250>
 800b2d2:	e764      	b.n	800b19e <_printf_float+0xc2>
 800b2d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2d8:	f240 80e0 	bls.w	800b49c <_printf_float+0x3c0>
 800b2dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	f7f5 fbf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d034      	beq.n	800b356 <_printf_float+0x27a>
 800b2ec:	4a37      	ldr	r2, [pc, #220]	; (800b3cc <_printf_float+0x2f0>)
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	47b8      	blx	r7
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	f43f af51 	beq.w	800b19e <_printf_float+0xc2>
 800b2fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b300:	429a      	cmp	r2, r3
 800b302:	db02      	blt.n	800b30a <_printf_float+0x22e>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	07d8      	lsls	r0, r3, #31
 800b308:	d510      	bpl.n	800b32c <_printf_float+0x250>
 800b30a:	ee18 3a10 	vmov	r3, s16
 800b30e:	4652      	mov	r2, sl
 800b310:	4631      	mov	r1, r6
 800b312:	4628      	mov	r0, r5
 800b314:	47b8      	blx	r7
 800b316:	3001      	adds	r0, #1
 800b318:	f43f af41 	beq.w	800b19e <_printf_float+0xc2>
 800b31c:	f04f 0800 	mov.w	r8, #0
 800b320:	f104 091a 	add.w	r9, r4, #26
 800b324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b326:	3b01      	subs	r3, #1
 800b328:	4543      	cmp	r3, r8
 800b32a:	dc09      	bgt.n	800b340 <_printf_float+0x264>
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	079b      	lsls	r3, r3, #30
 800b330:	f100 8105 	bmi.w	800b53e <_printf_float+0x462>
 800b334:	68e0      	ldr	r0, [r4, #12]
 800b336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b338:	4298      	cmp	r0, r3
 800b33a:	bfb8      	it	lt
 800b33c:	4618      	movlt	r0, r3
 800b33e:	e730      	b.n	800b1a2 <_printf_float+0xc6>
 800b340:	2301      	movs	r3, #1
 800b342:	464a      	mov	r2, r9
 800b344:	4631      	mov	r1, r6
 800b346:	4628      	mov	r0, r5
 800b348:	47b8      	blx	r7
 800b34a:	3001      	adds	r0, #1
 800b34c:	f43f af27 	beq.w	800b19e <_printf_float+0xc2>
 800b350:	f108 0801 	add.w	r8, r8, #1
 800b354:	e7e6      	b.n	800b324 <_printf_float+0x248>
 800b356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	dc39      	bgt.n	800b3d0 <_printf_float+0x2f4>
 800b35c:	4a1b      	ldr	r2, [pc, #108]	; (800b3cc <_printf_float+0x2f0>)
 800b35e:	2301      	movs	r3, #1
 800b360:	4631      	mov	r1, r6
 800b362:	4628      	mov	r0, r5
 800b364:	47b8      	blx	r7
 800b366:	3001      	adds	r0, #1
 800b368:	f43f af19 	beq.w	800b19e <_printf_float+0xc2>
 800b36c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b370:	4313      	orrs	r3, r2
 800b372:	d102      	bne.n	800b37a <_printf_float+0x29e>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	07d9      	lsls	r1, r3, #31
 800b378:	d5d8      	bpl.n	800b32c <_printf_float+0x250>
 800b37a:	ee18 3a10 	vmov	r3, s16
 800b37e:	4652      	mov	r2, sl
 800b380:	4631      	mov	r1, r6
 800b382:	4628      	mov	r0, r5
 800b384:	47b8      	blx	r7
 800b386:	3001      	adds	r0, #1
 800b388:	f43f af09 	beq.w	800b19e <_printf_float+0xc2>
 800b38c:	f04f 0900 	mov.w	r9, #0
 800b390:	f104 0a1a 	add.w	sl, r4, #26
 800b394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b396:	425b      	negs	r3, r3
 800b398:	454b      	cmp	r3, r9
 800b39a:	dc01      	bgt.n	800b3a0 <_printf_float+0x2c4>
 800b39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b39e:	e792      	b.n	800b2c6 <_printf_float+0x1ea>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	4652      	mov	r2, sl
 800b3a4:	4631      	mov	r1, r6
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	47b8      	blx	r7
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	f43f aef7 	beq.w	800b19e <_printf_float+0xc2>
 800b3b0:	f109 0901 	add.w	r9, r9, #1
 800b3b4:	e7ee      	b.n	800b394 <_printf_float+0x2b8>
 800b3b6:	bf00      	nop
 800b3b8:	7fefffff 	.word	0x7fefffff
 800b3bc:	0800f880 	.word	0x0800f880
 800b3c0:	0800f884 	.word	0x0800f884
 800b3c4:	0800f88c 	.word	0x0800f88c
 800b3c8:	0800f888 	.word	0x0800f888
 800b3cc:	0800f890 	.word	0x0800f890
 800b3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	bfa8      	it	ge
 800b3d8:	461a      	movge	r2, r3
 800b3da:	2a00      	cmp	r2, #0
 800b3dc:	4691      	mov	r9, r2
 800b3de:	dc37      	bgt.n	800b450 <_printf_float+0x374>
 800b3e0:	f04f 0b00 	mov.w	fp, #0
 800b3e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3e8:	f104 021a 	add.w	r2, r4, #26
 800b3ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3ee:	9305      	str	r3, [sp, #20]
 800b3f0:	eba3 0309 	sub.w	r3, r3, r9
 800b3f4:	455b      	cmp	r3, fp
 800b3f6:	dc33      	bgt.n	800b460 <_printf_float+0x384>
 800b3f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	db3b      	blt.n	800b478 <_printf_float+0x39c>
 800b400:	6823      	ldr	r3, [r4, #0]
 800b402:	07da      	lsls	r2, r3, #31
 800b404:	d438      	bmi.n	800b478 <_printf_float+0x39c>
 800b406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b408:	9a05      	ldr	r2, [sp, #20]
 800b40a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b40c:	1a9a      	subs	r2, r3, r2
 800b40e:	eba3 0901 	sub.w	r9, r3, r1
 800b412:	4591      	cmp	r9, r2
 800b414:	bfa8      	it	ge
 800b416:	4691      	movge	r9, r2
 800b418:	f1b9 0f00 	cmp.w	r9, #0
 800b41c:	dc35      	bgt.n	800b48a <_printf_float+0x3ae>
 800b41e:	f04f 0800 	mov.w	r8, #0
 800b422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b426:	f104 0a1a 	add.w	sl, r4, #26
 800b42a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b42e:	1a9b      	subs	r3, r3, r2
 800b430:	eba3 0309 	sub.w	r3, r3, r9
 800b434:	4543      	cmp	r3, r8
 800b436:	f77f af79 	ble.w	800b32c <_printf_float+0x250>
 800b43a:	2301      	movs	r3, #1
 800b43c:	4652      	mov	r2, sl
 800b43e:	4631      	mov	r1, r6
 800b440:	4628      	mov	r0, r5
 800b442:	47b8      	blx	r7
 800b444:	3001      	adds	r0, #1
 800b446:	f43f aeaa 	beq.w	800b19e <_printf_float+0xc2>
 800b44a:	f108 0801 	add.w	r8, r8, #1
 800b44e:	e7ec      	b.n	800b42a <_printf_float+0x34e>
 800b450:	4613      	mov	r3, r2
 800b452:	4631      	mov	r1, r6
 800b454:	4642      	mov	r2, r8
 800b456:	4628      	mov	r0, r5
 800b458:	47b8      	blx	r7
 800b45a:	3001      	adds	r0, #1
 800b45c:	d1c0      	bne.n	800b3e0 <_printf_float+0x304>
 800b45e:	e69e      	b.n	800b19e <_printf_float+0xc2>
 800b460:	2301      	movs	r3, #1
 800b462:	4631      	mov	r1, r6
 800b464:	4628      	mov	r0, r5
 800b466:	9205      	str	r2, [sp, #20]
 800b468:	47b8      	blx	r7
 800b46a:	3001      	adds	r0, #1
 800b46c:	f43f ae97 	beq.w	800b19e <_printf_float+0xc2>
 800b470:	9a05      	ldr	r2, [sp, #20]
 800b472:	f10b 0b01 	add.w	fp, fp, #1
 800b476:	e7b9      	b.n	800b3ec <_printf_float+0x310>
 800b478:	ee18 3a10 	vmov	r3, s16
 800b47c:	4652      	mov	r2, sl
 800b47e:	4631      	mov	r1, r6
 800b480:	4628      	mov	r0, r5
 800b482:	47b8      	blx	r7
 800b484:	3001      	adds	r0, #1
 800b486:	d1be      	bne.n	800b406 <_printf_float+0x32a>
 800b488:	e689      	b.n	800b19e <_printf_float+0xc2>
 800b48a:	9a05      	ldr	r2, [sp, #20]
 800b48c:	464b      	mov	r3, r9
 800b48e:	4442      	add	r2, r8
 800b490:	4631      	mov	r1, r6
 800b492:	4628      	mov	r0, r5
 800b494:	47b8      	blx	r7
 800b496:	3001      	adds	r0, #1
 800b498:	d1c1      	bne.n	800b41e <_printf_float+0x342>
 800b49a:	e680      	b.n	800b19e <_printf_float+0xc2>
 800b49c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b49e:	2a01      	cmp	r2, #1
 800b4a0:	dc01      	bgt.n	800b4a6 <_printf_float+0x3ca>
 800b4a2:	07db      	lsls	r3, r3, #31
 800b4a4:	d538      	bpl.n	800b518 <_printf_float+0x43c>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	47b8      	blx	r7
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	f43f ae74 	beq.w	800b19e <_printf_float+0xc2>
 800b4b6:	ee18 3a10 	vmov	r3, s16
 800b4ba:	4652      	mov	r2, sl
 800b4bc:	4631      	mov	r1, r6
 800b4be:	4628      	mov	r0, r5
 800b4c0:	47b8      	blx	r7
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	f43f ae6b 	beq.w	800b19e <_printf_float+0xc2>
 800b4c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	f7f5 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4d4:	b9d8      	cbnz	r0, 800b50e <_printf_float+0x432>
 800b4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d8:	f108 0201 	add.w	r2, r8, #1
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b8      	blx	r7
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	d10e      	bne.n	800b506 <_printf_float+0x42a>
 800b4e8:	e659      	b.n	800b19e <_printf_float+0xc2>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	f43f ae52 	beq.w	800b19e <_printf_float+0xc2>
 800b4fa:	f108 0801 	add.w	r8, r8, #1
 800b4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b500:	3b01      	subs	r3, #1
 800b502:	4543      	cmp	r3, r8
 800b504:	dcf1      	bgt.n	800b4ea <_printf_float+0x40e>
 800b506:	464b      	mov	r3, r9
 800b508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b50c:	e6dc      	b.n	800b2c8 <_printf_float+0x1ec>
 800b50e:	f04f 0800 	mov.w	r8, #0
 800b512:	f104 0a1a 	add.w	sl, r4, #26
 800b516:	e7f2      	b.n	800b4fe <_printf_float+0x422>
 800b518:	2301      	movs	r3, #1
 800b51a:	4642      	mov	r2, r8
 800b51c:	e7df      	b.n	800b4de <_printf_float+0x402>
 800b51e:	2301      	movs	r3, #1
 800b520:	464a      	mov	r2, r9
 800b522:	4631      	mov	r1, r6
 800b524:	4628      	mov	r0, r5
 800b526:	47b8      	blx	r7
 800b528:	3001      	adds	r0, #1
 800b52a:	f43f ae38 	beq.w	800b19e <_printf_float+0xc2>
 800b52e:	f108 0801 	add.w	r8, r8, #1
 800b532:	68e3      	ldr	r3, [r4, #12]
 800b534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b536:	1a5b      	subs	r3, r3, r1
 800b538:	4543      	cmp	r3, r8
 800b53a:	dcf0      	bgt.n	800b51e <_printf_float+0x442>
 800b53c:	e6fa      	b.n	800b334 <_printf_float+0x258>
 800b53e:	f04f 0800 	mov.w	r8, #0
 800b542:	f104 0919 	add.w	r9, r4, #25
 800b546:	e7f4      	b.n	800b532 <_printf_float+0x456>

0800b548 <_printf_common>:
 800b548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b54c:	4616      	mov	r6, r2
 800b54e:	4699      	mov	r9, r3
 800b550:	688a      	ldr	r2, [r1, #8]
 800b552:	690b      	ldr	r3, [r1, #16]
 800b554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b558:	4293      	cmp	r3, r2
 800b55a:	bfb8      	it	lt
 800b55c:	4613      	movlt	r3, r2
 800b55e:	6033      	str	r3, [r6, #0]
 800b560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b564:	4607      	mov	r7, r0
 800b566:	460c      	mov	r4, r1
 800b568:	b10a      	cbz	r2, 800b56e <_printf_common+0x26>
 800b56a:	3301      	adds	r3, #1
 800b56c:	6033      	str	r3, [r6, #0]
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	0699      	lsls	r1, r3, #26
 800b572:	bf42      	ittt	mi
 800b574:	6833      	ldrmi	r3, [r6, #0]
 800b576:	3302      	addmi	r3, #2
 800b578:	6033      	strmi	r3, [r6, #0]
 800b57a:	6825      	ldr	r5, [r4, #0]
 800b57c:	f015 0506 	ands.w	r5, r5, #6
 800b580:	d106      	bne.n	800b590 <_printf_common+0x48>
 800b582:	f104 0a19 	add.w	sl, r4, #25
 800b586:	68e3      	ldr	r3, [r4, #12]
 800b588:	6832      	ldr	r2, [r6, #0]
 800b58a:	1a9b      	subs	r3, r3, r2
 800b58c:	42ab      	cmp	r3, r5
 800b58e:	dc26      	bgt.n	800b5de <_printf_common+0x96>
 800b590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b594:	1e13      	subs	r3, r2, #0
 800b596:	6822      	ldr	r2, [r4, #0]
 800b598:	bf18      	it	ne
 800b59a:	2301      	movne	r3, #1
 800b59c:	0692      	lsls	r2, r2, #26
 800b59e:	d42b      	bmi.n	800b5f8 <_printf_common+0xb0>
 800b5a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	4638      	mov	r0, r7
 800b5a8:	47c0      	blx	r8
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	d01e      	beq.n	800b5ec <_printf_common+0xa4>
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	68e5      	ldr	r5, [r4, #12]
 800b5b2:	6832      	ldr	r2, [r6, #0]
 800b5b4:	f003 0306 	and.w	r3, r3, #6
 800b5b8:	2b04      	cmp	r3, #4
 800b5ba:	bf08      	it	eq
 800b5bc:	1aad      	subeq	r5, r5, r2
 800b5be:	68a3      	ldr	r3, [r4, #8]
 800b5c0:	6922      	ldr	r2, [r4, #16]
 800b5c2:	bf0c      	ite	eq
 800b5c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5c8:	2500      	movne	r5, #0
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	bfc4      	itt	gt
 800b5ce:	1a9b      	subgt	r3, r3, r2
 800b5d0:	18ed      	addgt	r5, r5, r3
 800b5d2:	2600      	movs	r6, #0
 800b5d4:	341a      	adds	r4, #26
 800b5d6:	42b5      	cmp	r5, r6
 800b5d8:	d11a      	bne.n	800b610 <_printf_common+0xc8>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e008      	b.n	800b5f0 <_printf_common+0xa8>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	4652      	mov	r2, sl
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	47c0      	blx	r8
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d103      	bne.n	800b5f4 <_printf_common+0xac>
 800b5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f4:	3501      	adds	r5, #1
 800b5f6:	e7c6      	b.n	800b586 <_printf_common+0x3e>
 800b5f8:	18e1      	adds	r1, r4, r3
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	2030      	movs	r0, #48	; 0x30
 800b5fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b602:	4422      	add	r2, r4
 800b604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b60c:	3302      	adds	r3, #2
 800b60e:	e7c7      	b.n	800b5a0 <_printf_common+0x58>
 800b610:	2301      	movs	r3, #1
 800b612:	4622      	mov	r2, r4
 800b614:	4649      	mov	r1, r9
 800b616:	4638      	mov	r0, r7
 800b618:	47c0      	blx	r8
 800b61a:	3001      	adds	r0, #1
 800b61c:	d0e6      	beq.n	800b5ec <_printf_common+0xa4>
 800b61e:	3601      	adds	r6, #1
 800b620:	e7d9      	b.n	800b5d6 <_printf_common+0x8e>
	...

0800b624 <_printf_i>:
 800b624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b628:	7e0f      	ldrb	r7, [r1, #24]
 800b62a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b62c:	2f78      	cmp	r7, #120	; 0x78
 800b62e:	4691      	mov	r9, r2
 800b630:	4680      	mov	r8, r0
 800b632:	460c      	mov	r4, r1
 800b634:	469a      	mov	sl, r3
 800b636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b63a:	d807      	bhi.n	800b64c <_printf_i+0x28>
 800b63c:	2f62      	cmp	r7, #98	; 0x62
 800b63e:	d80a      	bhi.n	800b656 <_printf_i+0x32>
 800b640:	2f00      	cmp	r7, #0
 800b642:	f000 80d8 	beq.w	800b7f6 <_printf_i+0x1d2>
 800b646:	2f58      	cmp	r7, #88	; 0x58
 800b648:	f000 80a3 	beq.w	800b792 <_printf_i+0x16e>
 800b64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b654:	e03a      	b.n	800b6cc <_printf_i+0xa8>
 800b656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b65a:	2b15      	cmp	r3, #21
 800b65c:	d8f6      	bhi.n	800b64c <_printf_i+0x28>
 800b65e:	a101      	add	r1, pc, #4	; (adr r1, 800b664 <_printf_i+0x40>)
 800b660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b664:	0800b6bd 	.word	0x0800b6bd
 800b668:	0800b6d1 	.word	0x0800b6d1
 800b66c:	0800b64d 	.word	0x0800b64d
 800b670:	0800b64d 	.word	0x0800b64d
 800b674:	0800b64d 	.word	0x0800b64d
 800b678:	0800b64d 	.word	0x0800b64d
 800b67c:	0800b6d1 	.word	0x0800b6d1
 800b680:	0800b64d 	.word	0x0800b64d
 800b684:	0800b64d 	.word	0x0800b64d
 800b688:	0800b64d 	.word	0x0800b64d
 800b68c:	0800b64d 	.word	0x0800b64d
 800b690:	0800b7dd 	.word	0x0800b7dd
 800b694:	0800b701 	.word	0x0800b701
 800b698:	0800b7bf 	.word	0x0800b7bf
 800b69c:	0800b64d 	.word	0x0800b64d
 800b6a0:	0800b64d 	.word	0x0800b64d
 800b6a4:	0800b7ff 	.word	0x0800b7ff
 800b6a8:	0800b64d 	.word	0x0800b64d
 800b6ac:	0800b701 	.word	0x0800b701
 800b6b0:	0800b64d 	.word	0x0800b64d
 800b6b4:	0800b64d 	.word	0x0800b64d
 800b6b8:	0800b7c7 	.word	0x0800b7c7
 800b6bc:	682b      	ldr	r3, [r5, #0]
 800b6be:	1d1a      	adds	r2, r3, #4
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	602a      	str	r2, [r5, #0]
 800b6c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e0a3      	b.n	800b818 <_printf_i+0x1f4>
 800b6d0:	6820      	ldr	r0, [r4, #0]
 800b6d2:	6829      	ldr	r1, [r5, #0]
 800b6d4:	0606      	lsls	r6, r0, #24
 800b6d6:	f101 0304 	add.w	r3, r1, #4
 800b6da:	d50a      	bpl.n	800b6f2 <_printf_i+0xce>
 800b6dc:	680e      	ldr	r6, [r1, #0]
 800b6de:	602b      	str	r3, [r5, #0]
 800b6e0:	2e00      	cmp	r6, #0
 800b6e2:	da03      	bge.n	800b6ec <_printf_i+0xc8>
 800b6e4:	232d      	movs	r3, #45	; 0x2d
 800b6e6:	4276      	negs	r6, r6
 800b6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ec:	485e      	ldr	r0, [pc, #376]	; (800b868 <_printf_i+0x244>)
 800b6ee:	230a      	movs	r3, #10
 800b6f0:	e019      	b.n	800b726 <_printf_i+0x102>
 800b6f2:	680e      	ldr	r6, [r1, #0]
 800b6f4:	602b      	str	r3, [r5, #0]
 800b6f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b6fa:	bf18      	it	ne
 800b6fc:	b236      	sxthne	r6, r6
 800b6fe:	e7ef      	b.n	800b6e0 <_printf_i+0xbc>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	1d19      	adds	r1, r3, #4
 800b706:	6029      	str	r1, [r5, #0]
 800b708:	0601      	lsls	r1, r0, #24
 800b70a:	d501      	bpl.n	800b710 <_printf_i+0xec>
 800b70c:	681e      	ldr	r6, [r3, #0]
 800b70e:	e002      	b.n	800b716 <_printf_i+0xf2>
 800b710:	0646      	lsls	r6, r0, #25
 800b712:	d5fb      	bpl.n	800b70c <_printf_i+0xe8>
 800b714:	881e      	ldrh	r6, [r3, #0]
 800b716:	4854      	ldr	r0, [pc, #336]	; (800b868 <_printf_i+0x244>)
 800b718:	2f6f      	cmp	r7, #111	; 0x6f
 800b71a:	bf0c      	ite	eq
 800b71c:	2308      	moveq	r3, #8
 800b71e:	230a      	movne	r3, #10
 800b720:	2100      	movs	r1, #0
 800b722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b726:	6865      	ldr	r5, [r4, #4]
 800b728:	60a5      	str	r5, [r4, #8]
 800b72a:	2d00      	cmp	r5, #0
 800b72c:	bfa2      	ittt	ge
 800b72e:	6821      	ldrge	r1, [r4, #0]
 800b730:	f021 0104 	bicge.w	r1, r1, #4
 800b734:	6021      	strge	r1, [r4, #0]
 800b736:	b90e      	cbnz	r6, 800b73c <_printf_i+0x118>
 800b738:	2d00      	cmp	r5, #0
 800b73a:	d04d      	beq.n	800b7d8 <_printf_i+0x1b4>
 800b73c:	4615      	mov	r5, r2
 800b73e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b742:	fb03 6711 	mls	r7, r3, r1, r6
 800b746:	5dc7      	ldrb	r7, [r0, r7]
 800b748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b74c:	4637      	mov	r7, r6
 800b74e:	42bb      	cmp	r3, r7
 800b750:	460e      	mov	r6, r1
 800b752:	d9f4      	bls.n	800b73e <_printf_i+0x11a>
 800b754:	2b08      	cmp	r3, #8
 800b756:	d10b      	bne.n	800b770 <_printf_i+0x14c>
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	07de      	lsls	r6, r3, #31
 800b75c:	d508      	bpl.n	800b770 <_printf_i+0x14c>
 800b75e:	6923      	ldr	r3, [r4, #16]
 800b760:	6861      	ldr	r1, [r4, #4]
 800b762:	4299      	cmp	r1, r3
 800b764:	bfde      	ittt	le
 800b766:	2330      	movle	r3, #48	; 0x30
 800b768:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b76c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b770:	1b52      	subs	r2, r2, r5
 800b772:	6122      	str	r2, [r4, #16]
 800b774:	f8cd a000 	str.w	sl, [sp]
 800b778:	464b      	mov	r3, r9
 800b77a:	aa03      	add	r2, sp, #12
 800b77c:	4621      	mov	r1, r4
 800b77e:	4640      	mov	r0, r8
 800b780:	f7ff fee2 	bl	800b548 <_printf_common>
 800b784:	3001      	adds	r0, #1
 800b786:	d14c      	bne.n	800b822 <_printf_i+0x1fe>
 800b788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b78c:	b004      	add	sp, #16
 800b78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b792:	4835      	ldr	r0, [pc, #212]	; (800b868 <_printf_i+0x244>)
 800b794:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b798:	6829      	ldr	r1, [r5, #0]
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7a0:	6029      	str	r1, [r5, #0]
 800b7a2:	061d      	lsls	r5, r3, #24
 800b7a4:	d514      	bpl.n	800b7d0 <_printf_i+0x1ac>
 800b7a6:	07df      	lsls	r7, r3, #31
 800b7a8:	bf44      	itt	mi
 800b7aa:	f043 0320 	orrmi.w	r3, r3, #32
 800b7ae:	6023      	strmi	r3, [r4, #0]
 800b7b0:	b91e      	cbnz	r6, 800b7ba <_printf_i+0x196>
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	f023 0320 	bic.w	r3, r3, #32
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	2310      	movs	r3, #16
 800b7bc:	e7b0      	b.n	800b720 <_printf_i+0xfc>
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	f043 0320 	orr.w	r3, r3, #32
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	2378      	movs	r3, #120	; 0x78
 800b7c8:	4828      	ldr	r0, [pc, #160]	; (800b86c <_printf_i+0x248>)
 800b7ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7ce:	e7e3      	b.n	800b798 <_printf_i+0x174>
 800b7d0:	0659      	lsls	r1, r3, #25
 800b7d2:	bf48      	it	mi
 800b7d4:	b2b6      	uxthmi	r6, r6
 800b7d6:	e7e6      	b.n	800b7a6 <_printf_i+0x182>
 800b7d8:	4615      	mov	r5, r2
 800b7da:	e7bb      	b.n	800b754 <_printf_i+0x130>
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	6826      	ldr	r6, [r4, #0]
 800b7e0:	6961      	ldr	r1, [r4, #20]
 800b7e2:	1d18      	adds	r0, r3, #4
 800b7e4:	6028      	str	r0, [r5, #0]
 800b7e6:	0635      	lsls	r5, r6, #24
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	d501      	bpl.n	800b7f0 <_printf_i+0x1cc>
 800b7ec:	6019      	str	r1, [r3, #0]
 800b7ee:	e002      	b.n	800b7f6 <_printf_i+0x1d2>
 800b7f0:	0670      	lsls	r0, r6, #25
 800b7f2:	d5fb      	bpl.n	800b7ec <_printf_i+0x1c8>
 800b7f4:	8019      	strh	r1, [r3, #0]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	4615      	mov	r5, r2
 800b7fc:	e7ba      	b.n	800b774 <_printf_i+0x150>
 800b7fe:	682b      	ldr	r3, [r5, #0]
 800b800:	1d1a      	adds	r2, r3, #4
 800b802:	602a      	str	r2, [r5, #0]
 800b804:	681d      	ldr	r5, [r3, #0]
 800b806:	6862      	ldr	r2, [r4, #4]
 800b808:	2100      	movs	r1, #0
 800b80a:	4628      	mov	r0, r5
 800b80c:	f7f4 fce8 	bl	80001e0 <memchr>
 800b810:	b108      	cbz	r0, 800b816 <_printf_i+0x1f2>
 800b812:	1b40      	subs	r0, r0, r5
 800b814:	6060      	str	r0, [r4, #4]
 800b816:	6863      	ldr	r3, [r4, #4]
 800b818:	6123      	str	r3, [r4, #16]
 800b81a:	2300      	movs	r3, #0
 800b81c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b820:	e7a8      	b.n	800b774 <_printf_i+0x150>
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	462a      	mov	r2, r5
 800b826:	4649      	mov	r1, r9
 800b828:	4640      	mov	r0, r8
 800b82a:	47d0      	blx	sl
 800b82c:	3001      	adds	r0, #1
 800b82e:	d0ab      	beq.n	800b788 <_printf_i+0x164>
 800b830:	6823      	ldr	r3, [r4, #0]
 800b832:	079b      	lsls	r3, r3, #30
 800b834:	d413      	bmi.n	800b85e <_printf_i+0x23a>
 800b836:	68e0      	ldr	r0, [r4, #12]
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	4298      	cmp	r0, r3
 800b83c:	bfb8      	it	lt
 800b83e:	4618      	movlt	r0, r3
 800b840:	e7a4      	b.n	800b78c <_printf_i+0x168>
 800b842:	2301      	movs	r3, #1
 800b844:	4632      	mov	r2, r6
 800b846:	4649      	mov	r1, r9
 800b848:	4640      	mov	r0, r8
 800b84a:	47d0      	blx	sl
 800b84c:	3001      	adds	r0, #1
 800b84e:	d09b      	beq.n	800b788 <_printf_i+0x164>
 800b850:	3501      	adds	r5, #1
 800b852:	68e3      	ldr	r3, [r4, #12]
 800b854:	9903      	ldr	r1, [sp, #12]
 800b856:	1a5b      	subs	r3, r3, r1
 800b858:	42ab      	cmp	r3, r5
 800b85a:	dcf2      	bgt.n	800b842 <_printf_i+0x21e>
 800b85c:	e7eb      	b.n	800b836 <_printf_i+0x212>
 800b85e:	2500      	movs	r5, #0
 800b860:	f104 0619 	add.w	r6, r4, #25
 800b864:	e7f5      	b.n	800b852 <_printf_i+0x22e>
 800b866:	bf00      	nop
 800b868:	0800f892 	.word	0x0800f892
 800b86c:	0800f8a3 	.word	0x0800f8a3

0800b870 <_scanf_float>:
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	b087      	sub	sp, #28
 800b876:	4617      	mov	r7, r2
 800b878:	9303      	str	r3, [sp, #12]
 800b87a:	688b      	ldr	r3, [r1, #8]
 800b87c:	1e5a      	subs	r2, r3, #1
 800b87e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b882:	bf83      	ittte	hi
 800b884:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b888:	195b      	addhi	r3, r3, r5
 800b88a:	9302      	strhi	r3, [sp, #8]
 800b88c:	2300      	movls	r3, #0
 800b88e:	bf86      	itte	hi
 800b890:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b894:	608b      	strhi	r3, [r1, #8]
 800b896:	9302      	strls	r3, [sp, #8]
 800b898:	680b      	ldr	r3, [r1, #0]
 800b89a:	468b      	mov	fp, r1
 800b89c:	2500      	movs	r5, #0
 800b89e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b8a2:	f84b 3b1c 	str.w	r3, [fp], #28
 800b8a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	465e      	mov	r6, fp
 800b8b0:	46aa      	mov	sl, r5
 800b8b2:	46a9      	mov	r9, r5
 800b8b4:	9501      	str	r5, [sp, #4]
 800b8b6:	68a2      	ldr	r2, [r4, #8]
 800b8b8:	b152      	cbz	r2, 800b8d0 <_scanf_float+0x60>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	2b4e      	cmp	r3, #78	; 0x4e
 800b8c0:	d864      	bhi.n	800b98c <_scanf_float+0x11c>
 800b8c2:	2b40      	cmp	r3, #64	; 0x40
 800b8c4:	d83c      	bhi.n	800b940 <_scanf_float+0xd0>
 800b8c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b8ca:	b2c8      	uxtb	r0, r1
 800b8cc:	280e      	cmp	r0, #14
 800b8ce:	d93a      	bls.n	800b946 <_scanf_float+0xd6>
 800b8d0:	f1b9 0f00 	cmp.w	r9, #0
 800b8d4:	d003      	beq.n	800b8de <_scanf_float+0x6e>
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b8e2:	f1ba 0f01 	cmp.w	sl, #1
 800b8e6:	f200 8113 	bhi.w	800bb10 <_scanf_float+0x2a0>
 800b8ea:	455e      	cmp	r6, fp
 800b8ec:	f200 8105 	bhi.w	800bafa <_scanf_float+0x28a>
 800b8f0:	2501      	movs	r5, #1
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	b007      	add	sp, #28
 800b8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b8fe:	2a0d      	cmp	r2, #13
 800b900:	d8e6      	bhi.n	800b8d0 <_scanf_float+0x60>
 800b902:	a101      	add	r1, pc, #4	; (adr r1, 800b908 <_scanf_float+0x98>)
 800b904:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b908:	0800ba47 	.word	0x0800ba47
 800b90c:	0800b8d1 	.word	0x0800b8d1
 800b910:	0800b8d1 	.word	0x0800b8d1
 800b914:	0800b8d1 	.word	0x0800b8d1
 800b918:	0800baa7 	.word	0x0800baa7
 800b91c:	0800ba7f 	.word	0x0800ba7f
 800b920:	0800b8d1 	.word	0x0800b8d1
 800b924:	0800b8d1 	.word	0x0800b8d1
 800b928:	0800ba55 	.word	0x0800ba55
 800b92c:	0800b8d1 	.word	0x0800b8d1
 800b930:	0800b8d1 	.word	0x0800b8d1
 800b934:	0800b8d1 	.word	0x0800b8d1
 800b938:	0800b8d1 	.word	0x0800b8d1
 800b93c:	0800ba0d 	.word	0x0800ba0d
 800b940:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b944:	e7db      	b.n	800b8fe <_scanf_float+0x8e>
 800b946:	290e      	cmp	r1, #14
 800b948:	d8c2      	bhi.n	800b8d0 <_scanf_float+0x60>
 800b94a:	a001      	add	r0, pc, #4	; (adr r0, 800b950 <_scanf_float+0xe0>)
 800b94c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b950:	0800b9ff 	.word	0x0800b9ff
 800b954:	0800b8d1 	.word	0x0800b8d1
 800b958:	0800b9ff 	.word	0x0800b9ff
 800b95c:	0800ba93 	.word	0x0800ba93
 800b960:	0800b8d1 	.word	0x0800b8d1
 800b964:	0800b9ad 	.word	0x0800b9ad
 800b968:	0800b9e9 	.word	0x0800b9e9
 800b96c:	0800b9e9 	.word	0x0800b9e9
 800b970:	0800b9e9 	.word	0x0800b9e9
 800b974:	0800b9e9 	.word	0x0800b9e9
 800b978:	0800b9e9 	.word	0x0800b9e9
 800b97c:	0800b9e9 	.word	0x0800b9e9
 800b980:	0800b9e9 	.word	0x0800b9e9
 800b984:	0800b9e9 	.word	0x0800b9e9
 800b988:	0800b9e9 	.word	0x0800b9e9
 800b98c:	2b6e      	cmp	r3, #110	; 0x6e
 800b98e:	d809      	bhi.n	800b9a4 <_scanf_float+0x134>
 800b990:	2b60      	cmp	r3, #96	; 0x60
 800b992:	d8b2      	bhi.n	800b8fa <_scanf_float+0x8a>
 800b994:	2b54      	cmp	r3, #84	; 0x54
 800b996:	d077      	beq.n	800ba88 <_scanf_float+0x218>
 800b998:	2b59      	cmp	r3, #89	; 0x59
 800b99a:	d199      	bne.n	800b8d0 <_scanf_float+0x60>
 800b99c:	2d07      	cmp	r5, #7
 800b99e:	d197      	bne.n	800b8d0 <_scanf_float+0x60>
 800b9a0:	2508      	movs	r5, #8
 800b9a2:	e029      	b.n	800b9f8 <_scanf_float+0x188>
 800b9a4:	2b74      	cmp	r3, #116	; 0x74
 800b9a6:	d06f      	beq.n	800ba88 <_scanf_float+0x218>
 800b9a8:	2b79      	cmp	r3, #121	; 0x79
 800b9aa:	e7f6      	b.n	800b99a <_scanf_float+0x12a>
 800b9ac:	6821      	ldr	r1, [r4, #0]
 800b9ae:	05c8      	lsls	r0, r1, #23
 800b9b0:	d51a      	bpl.n	800b9e8 <_scanf_float+0x178>
 800b9b2:	9b02      	ldr	r3, [sp, #8]
 800b9b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b9b8:	6021      	str	r1, [r4, #0]
 800b9ba:	f109 0901 	add.w	r9, r9, #1
 800b9be:	b11b      	cbz	r3, 800b9c8 <_scanf_float+0x158>
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	3201      	adds	r2, #1
 800b9c4:	9302      	str	r3, [sp, #8]
 800b9c6:	60a2      	str	r2, [r4, #8]
 800b9c8:	68a3      	ldr	r3, [r4, #8]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	60a3      	str	r3, [r4, #8]
 800b9ce:	6923      	ldr	r3, [r4, #16]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	6123      	str	r3, [r4, #16]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	3b01      	subs	r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	607b      	str	r3, [r7, #4]
 800b9dc:	f340 8084 	ble.w	800bae8 <_scanf_float+0x278>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	603b      	str	r3, [r7, #0]
 800b9e6:	e766      	b.n	800b8b6 <_scanf_float+0x46>
 800b9e8:	eb1a 0f05 	cmn.w	sl, r5
 800b9ec:	f47f af70 	bne.w	800b8d0 <_scanf_float+0x60>
 800b9f0:	6822      	ldr	r2, [r4, #0]
 800b9f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b9f6:	6022      	str	r2, [r4, #0]
 800b9f8:	f806 3b01 	strb.w	r3, [r6], #1
 800b9fc:	e7e4      	b.n	800b9c8 <_scanf_float+0x158>
 800b9fe:	6822      	ldr	r2, [r4, #0]
 800ba00:	0610      	lsls	r0, r2, #24
 800ba02:	f57f af65 	bpl.w	800b8d0 <_scanf_float+0x60>
 800ba06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba0a:	e7f4      	b.n	800b9f6 <_scanf_float+0x186>
 800ba0c:	f1ba 0f00 	cmp.w	sl, #0
 800ba10:	d10e      	bne.n	800ba30 <_scanf_float+0x1c0>
 800ba12:	f1b9 0f00 	cmp.w	r9, #0
 800ba16:	d10e      	bne.n	800ba36 <_scanf_float+0x1c6>
 800ba18:	6822      	ldr	r2, [r4, #0]
 800ba1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ba1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ba22:	d108      	bne.n	800ba36 <_scanf_float+0x1c6>
 800ba24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba28:	6022      	str	r2, [r4, #0]
 800ba2a:	f04f 0a01 	mov.w	sl, #1
 800ba2e:	e7e3      	b.n	800b9f8 <_scanf_float+0x188>
 800ba30:	f1ba 0f02 	cmp.w	sl, #2
 800ba34:	d055      	beq.n	800bae2 <_scanf_float+0x272>
 800ba36:	2d01      	cmp	r5, #1
 800ba38:	d002      	beq.n	800ba40 <_scanf_float+0x1d0>
 800ba3a:	2d04      	cmp	r5, #4
 800ba3c:	f47f af48 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba40:	3501      	adds	r5, #1
 800ba42:	b2ed      	uxtb	r5, r5
 800ba44:	e7d8      	b.n	800b9f8 <_scanf_float+0x188>
 800ba46:	f1ba 0f01 	cmp.w	sl, #1
 800ba4a:	f47f af41 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba4e:	f04f 0a02 	mov.w	sl, #2
 800ba52:	e7d1      	b.n	800b9f8 <_scanf_float+0x188>
 800ba54:	b97d      	cbnz	r5, 800ba76 <_scanf_float+0x206>
 800ba56:	f1b9 0f00 	cmp.w	r9, #0
 800ba5a:	f47f af3c 	bne.w	800b8d6 <_scanf_float+0x66>
 800ba5e:	6822      	ldr	r2, [r4, #0]
 800ba60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ba64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ba68:	f47f af39 	bne.w	800b8de <_scanf_float+0x6e>
 800ba6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ba70:	6022      	str	r2, [r4, #0]
 800ba72:	2501      	movs	r5, #1
 800ba74:	e7c0      	b.n	800b9f8 <_scanf_float+0x188>
 800ba76:	2d03      	cmp	r5, #3
 800ba78:	d0e2      	beq.n	800ba40 <_scanf_float+0x1d0>
 800ba7a:	2d05      	cmp	r5, #5
 800ba7c:	e7de      	b.n	800ba3c <_scanf_float+0x1cc>
 800ba7e:	2d02      	cmp	r5, #2
 800ba80:	f47f af26 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba84:	2503      	movs	r5, #3
 800ba86:	e7b7      	b.n	800b9f8 <_scanf_float+0x188>
 800ba88:	2d06      	cmp	r5, #6
 800ba8a:	f47f af21 	bne.w	800b8d0 <_scanf_float+0x60>
 800ba8e:	2507      	movs	r5, #7
 800ba90:	e7b2      	b.n	800b9f8 <_scanf_float+0x188>
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	0591      	lsls	r1, r2, #22
 800ba96:	f57f af1b 	bpl.w	800b8d0 <_scanf_float+0x60>
 800ba9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ba9e:	6022      	str	r2, [r4, #0]
 800baa0:	f8cd 9004 	str.w	r9, [sp, #4]
 800baa4:	e7a8      	b.n	800b9f8 <_scanf_float+0x188>
 800baa6:	6822      	ldr	r2, [r4, #0]
 800baa8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800baac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bab0:	d006      	beq.n	800bac0 <_scanf_float+0x250>
 800bab2:	0550      	lsls	r0, r2, #21
 800bab4:	f57f af0c 	bpl.w	800b8d0 <_scanf_float+0x60>
 800bab8:	f1b9 0f00 	cmp.w	r9, #0
 800babc:	f43f af0f 	beq.w	800b8de <_scanf_float+0x6e>
 800bac0:	0591      	lsls	r1, r2, #22
 800bac2:	bf58      	it	pl
 800bac4:	9901      	ldrpl	r1, [sp, #4]
 800bac6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800baca:	bf58      	it	pl
 800bacc:	eba9 0101 	subpl.w	r1, r9, r1
 800bad0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bad4:	bf58      	it	pl
 800bad6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bada:	6022      	str	r2, [r4, #0]
 800badc:	f04f 0900 	mov.w	r9, #0
 800bae0:	e78a      	b.n	800b9f8 <_scanf_float+0x188>
 800bae2:	f04f 0a03 	mov.w	sl, #3
 800bae6:	e787      	b.n	800b9f8 <_scanf_float+0x188>
 800bae8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800baec:	4639      	mov	r1, r7
 800baee:	4640      	mov	r0, r8
 800baf0:	4798      	blx	r3
 800baf2:	2800      	cmp	r0, #0
 800baf4:	f43f aedf 	beq.w	800b8b6 <_scanf_float+0x46>
 800baf8:	e6ea      	b.n	800b8d0 <_scanf_float+0x60>
 800bafa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bafe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb02:	463a      	mov	r2, r7
 800bb04:	4640      	mov	r0, r8
 800bb06:	4798      	blx	r3
 800bb08:	6923      	ldr	r3, [r4, #16]
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	6123      	str	r3, [r4, #16]
 800bb0e:	e6ec      	b.n	800b8ea <_scanf_float+0x7a>
 800bb10:	1e6b      	subs	r3, r5, #1
 800bb12:	2b06      	cmp	r3, #6
 800bb14:	d825      	bhi.n	800bb62 <_scanf_float+0x2f2>
 800bb16:	2d02      	cmp	r5, #2
 800bb18:	d836      	bhi.n	800bb88 <_scanf_float+0x318>
 800bb1a:	455e      	cmp	r6, fp
 800bb1c:	f67f aee8 	bls.w	800b8f0 <_scanf_float+0x80>
 800bb20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb28:	463a      	mov	r2, r7
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	4798      	blx	r3
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	6123      	str	r3, [r4, #16]
 800bb34:	e7f1      	b.n	800bb1a <_scanf_float+0x2aa>
 800bb36:	9802      	ldr	r0, [sp, #8]
 800bb38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800bb40:	9002      	str	r0, [sp, #8]
 800bb42:	463a      	mov	r2, r7
 800bb44:	4640      	mov	r0, r8
 800bb46:	4798      	blx	r3
 800bb48:	6923      	ldr	r3, [r4, #16]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	6123      	str	r3, [r4, #16]
 800bb4e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bb52:	fa5f fa8a 	uxtb.w	sl, sl
 800bb56:	f1ba 0f02 	cmp.w	sl, #2
 800bb5a:	d1ec      	bne.n	800bb36 <_scanf_float+0x2c6>
 800bb5c:	3d03      	subs	r5, #3
 800bb5e:	b2ed      	uxtb	r5, r5
 800bb60:	1b76      	subs	r6, r6, r5
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	05da      	lsls	r2, r3, #23
 800bb66:	d52f      	bpl.n	800bbc8 <_scanf_float+0x358>
 800bb68:	055b      	lsls	r3, r3, #21
 800bb6a:	d510      	bpl.n	800bb8e <_scanf_float+0x31e>
 800bb6c:	455e      	cmp	r6, fp
 800bb6e:	f67f aebf 	bls.w	800b8f0 <_scanf_float+0x80>
 800bb72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb7a:	463a      	mov	r2, r7
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4798      	blx	r3
 800bb80:	6923      	ldr	r3, [r4, #16]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	6123      	str	r3, [r4, #16]
 800bb86:	e7f1      	b.n	800bb6c <_scanf_float+0x2fc>
 800bb88:	46aa      	mov	sl, r5
 800bb8a:	9602      	str	r6, [sp, #8]
 800bb8c:	e7df      	b.n	800bb4e <_scanf_float+0x2de>
 800bb8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bb92:	6923      	ldr	r3, [r4, #16]
 800bb94:	2965      	cmp	r1, #101	; 0x65
 800bb96:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bb9a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800bb9e:	6123      	str	r3, [r4, #16]
 800bba0:	d00c      	beq.n	800bbbc <_scanf_float+0x34c>
 800bba2:	2945      	cmp	r1, #69	; 0x45
 800bba4:	d00a      	beq.n	800bbbc <_scanf_float+0x34c>
 800bba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbaa:	463a      	mov	r2, r7
 800bbac:	4640      	mov	r0, r8
 800bbae:	4798      	blx	r3
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	1eb5      	subs	r5, r6, #2
 800bbba:	6123      	str	r3, [r4, #16]
 800bbbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bbc0:	463a      	mov	r2, r7
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4798      	blx	r3
 800bbc6:	462e      	mov	r6, r5
 800bbc8:	6825      	ldr	r5, [r4, #0]
 800bbca:	f015 0510 	ands.w	r5, r5, #16
 800bbce:	d159      	bne.n	800bc84 <_scanf_float+0x414>
 800bbd0:	7035      	strb	r5, [r6, #0]
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bbd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbdc:	d11b      	bne.n	800bc16 <_scanf_float+0x3a6>
 800bbde:	9b01      	ldr	r3, [sp, #4]
 800bbe0:	454b      	cmp	r3, r9
 800bbe2:	eba3 0209 	sub.w	r2, r3, r9
 800bbe6:	d123      	bne.n	800bc30 <_scanf_float+0x3c0>
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4659      	mov	r1, fp
 800bbec:	4640      	mov	r0, r8
 800bbee:	f000 ff55 	bl	800ca9c <_strtod_r>
 800bbf2:	6822      	ldr	r2, [r4, #0]
 800bbf4:	9b03      	ldr	r3, [sp, #12]
 800bbf6:	f012 0f02 	tst.w	r2, #2
 800bbfa:	ec57 6b10 	vmov	r6, r7, d0
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	d021      	beq.n	800bc46 <_scanf_float+0x3d6>
 800bc02:	9903      	ldr	r1, [sp, #12]
 800bc04:	1d1a      	adds	r2, r3, #4
 800bc06:	600a      	str	r2, [r1, #0]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	e9c3 6700 	strd	r6, r7, [r3]
 800bc0e:	68e3      	ldr	r3, [r4, #12]
 800bc10:	3301      	adds	r3, #1
 800bc12:	60e3      	str	r3, [r4, #12]
 800bc14:	e66d      	b.n	800b8f2 <_scanf_float+0x82>
 800bc16:	9b04      	ldr	r3, [sp, #16]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d0e5      	beq.n	800bbe8 <_scanf_float+0x378>
 800bc1c:	9905      	ldr	r1, [sp, #20]
 800bc1e:	230a      	movs	r3, #10
 800bc20:	462a      	mov	r2, r5
 800bc22:	3101      	adds	r1, #1
 800bc24:	4640      	mov	r0, r8
 800bc26:	f000 ffc1 	bl	800cbac <_strtol_r>
 800bc2a:	9b04      	ldr	r3, [sp, #16]
 800bc2c:	9e05      	ldr	r6, [sp, #20]
 800bc2e:	1ac2      	subs	r2, r0, r3
 800bc30:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bc34:	429e      	cmp	r6, r3
 800bc36:	bf28      	it	cs
 800bc38:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bc3c:	4912      	ldr	r1, [pc, #72]	; (800bc88 <_scanf_float+0x418>)
 800bc3e:	4630      	mov	r0, r6
 800bc40:	f000 f8a6 	bl	800bd90 <siprintf>
 800bc44:	e7d0      	b.n	800bbe8 <_scanf_float+0x378>
 800bc46:	9903      	ldr	r1, [sp, #12]
 800bc48:	f012 0f04 	tst.w	r2, #4
 800bc4c:	f103 0204 	add.w	r2, r3, #4
 800bc50:	600a      	str	r2, [r1, #0]
 800bc52:	d1d9      	bne.n	800bc08 <_scanf_float+0x398>
 800bc54:	f8d3 8000 	ldr.w	r8, [r3]
 800bc58:	ee10 2a10 	vmov	r2, s0
 800bc5c:	ee10 0a10 	vmov	r0, s0
 800bc60:	463b      	mov	r3, r7
 800bc62:	4639      	mov	r1, r7
 800bc64:	f7f4 ff62 	bl	8000b2c <__aeabi_dcmpun>
 800bc68:	b128      	cbz	r0, 800bc76 <_scanf_float+0x406>
 800bc6a:	4808      	ldr	r0, [pc, #32]	; (800bc8c <_scanf_float+0x41c>)
 800bc6c:	f000 f88a 	bl	800bd84 <nanf>
 800bc70:	ed88 0a00 	vstr	s0, [r8]
 800bc74:	e7cb      	b.n	800bc0e <_scanf_float+0x39e>
 800bc76:	4630      	mov	r0, r6
 800bc78:	4639      	mov	r1, r7
 800bc7a:	f7f4 ffb5 	bl	8000be8 <__aeabi_d2f>
 800bc7e:	f8c8 0000 	str.w	r0, [r8]
 800bc82:	e7c4      	b.n	800bc0e <_scanf_float+0x39e>
 800bc84:	2500      	movs	r5, #0
 800bc86:	e634      	b.n	800b8f2 <_scanf_float+0x82>
 800bc88:	0800f8b4 	.word	0x0800f8b4
 800bc8c:	0800fcc0 	.word	0x0800fcc0

0800bc90 <cleanup_glue>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	460c      	mov	r4, r1
 800bc94:	6809      	ldr	r1, [r1, #0]
 800bc96:	4605      	mov	r5, r0
 800bc98:	b109      	cbz	r1, 800bc9e <cleanup_glue+0xe>
 800bc9a:	f7ff fff9 	bl	800bc90 <cleanup_glue>
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4628      	mov	r0, r5
 800bca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bca6:	f002 bf67 	b.w	800eb78 <_free_r>
	...

0800bcac <_reclaim_reent>:
 800bcac:	4b2c      	ldr	r3, [pc, #176]	; (800bd60 <_reclaim_reent+0xb4>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4283      	cmp	r3, r0
 800bcb2:	b570      	push	{r4, r5, r6, lr}
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	d051      	beq.n	800bd5c <_reclaim_reent+0xb0>
 800bcb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bcba:	b143      	cbz	r3, 800bcce <_reclaim_reent+0x22>
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d14a      	bne.n	800bd58 <_reclaim_reent+0xac>
 800bcc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcc4:	6819      	ldr	r1, [r3, #0]
 800bcc6:	b111      	cbz	r1, 800bcce <_reclaim_reent+0x22>
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f002 ff55 	bl	800eb78 <_free_r>
 800bcce:	6961      	ldr	r1, [r4, #20]
 800bcd0:	b111      	cbz	r1, 800bcd8 <_reclaim_reent+0x2c>
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f002 ff50 	bl	800eb78 <_free_r>
 800bcd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bcda:	b111      	cbz	r1, 800bce2 <_reclaim_reent+0x36>
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f002 ff4b 	bl	800eb78 <_free_r>
 800bce2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bce4:	b111      	cbz	r1, 800bcec <_reclaim_reent+0x40>
 800bce6:	4620      	mov	r0, r4
 800bce8:	f002 ff46 	bl	800eb78 <_free_r>
 800bcec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bcee:	b111      	cbz	r1, 800bcf6 <_reclaim_reent+0x4a>
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f002 ff41 	bl	800eb78 <_free_r>
 800bcf6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bcf8:	b111      	cbz	r1, 800bd00 <_reclaim_reent+0x54>
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f002 ff3c 	bl	800eb78 <_free_r>
 800bd00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bd02:	b111      	cbz	r1, 800bd0a <_reclaim_reent+0x5e>
 800bd04:	4620      	mov	r0, r4
 800bd06:	f002 ff37 	bl	800eb78 <_free_r>
 800bd0a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bd0c:	b111      	cbz	r1, 800bd14 <_reclaim_reent+0x68>
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f002 ff32 	bl	800eb78 <_free_r>
 800bd14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd16:	b111      	cbz	r1, 800bd1e <_reclaim_reent+0x72>
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f002 ff2d 	bl	800eb78 <_free_r>
 800bd1e:	69a3      	ldr	r3, [r4, #24]
 800bd20:	b1e3      	cbz	r3, 800bd5c <_reclaim_reent+0xb0>
 800bd22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd24:	4620      	mov	r0, r4
 800bd26:	4798      	blx	r3
 800bd28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd2a:	b1b9      	cbz	r1, 800bd5c <_reclaim_reent+0xb0>
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd32:	f7ff bfad 	b.w	800bc90 <cleanup_glue>
 800bd36:	5949      	ldr	r1, [r1, r5]
 800bd38:	b941      	cbnz	r1, 800bd4c <_reclaim_reent+0xa0>
 800bd3a:	3504      	adds	r5, #4
 800bd3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd3e:	2d80      	cmp	r5, #128	; 0x80
 800bd40:	68d9      	ldr	r1, [r3, #12]
 800bd42:	d1f8      	bne.n	800bd36 <_reclaim_reent+0x8a>
 800bd44:	4620      	mov	r0, r4
 800bd46:	f002 ff17 	bl	800eb78 <_free_r>
 800bd4a:	e7ba      	b.n	800bcc2 <_reclaim_reent+0x16>
 800bd4c:	680e      	ldr	r6, [r1, #0]
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f002 ff12 	bl	800eb78 <_free_r>
 800bd54:	4631      	mov	r1, r6
 800bd56:	e7ef      	b.n	800bd38 <_reclaim_reent+0x8c>
 800bd58:	2500      	movs	r5, #0
 800bd5a:	e7ef      	b.n	800bd3c <_reclaim_reent+0x90>
 800bd5c:	bd70      	pop	{r4, r5, r6, pc}
 800bd5e:	bf00      	nop
 800bd60:	20000018 	.word	0x20000018

0800bd64 <_sbrk_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	4d06      	ldr	r5, [pc, #24]	; (800bd80 <_sbrk_r+0x1c>)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	602b      	str	r3, [r5, #0]
 800bd70:	f7f6 f9fe 	bl	8002170 <_sbrk>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_sbrk_r+0x1a>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_sbrk_r+0x1a>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	20001e20 	.word	0x20001e20

0800bd84 <nanf>:
 800bd84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd8c <nanf+0x8>
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	7fc00000 	.word	0x7fc00000

0800bd90 <siprintf>:
 800bd90:	b40e      	push	{r1, r2, r3}
 800bd92:	b500      	push	{lr}
 800bd94:	b09c      	sub	sp, #112	; 0x70
 800bd96:	ab1d      	add	r3, sp, #116	; 0x74
 800bd98:	9002      	str	r0, [sp, #8]
 800bd9a:	9006      	str	r0, [sp, #24]
 800bd9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bda0:	4809      	ldr	r0, [pc, #36]	; (800bdc8 <siprintf+0x38>)
 800bda2:	9107      	str	r1, [sp, #28]
 800bda4:	9104      	str	r1, [sp, #16]
 800bda6:	4909      	ldr	r1, [pc, #36]	; (800bdcc <siprintf+0x3c>)
 800bda8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdac:	9105      	str	r1, [sp, #20]
 800bdae:	6800      	ldr	r0, [r0, #0]
 800bdb0:	9301      	str	r3, [sp, #4]
 800bdb2:	a902      	add	r1, sp, #8
 800bdb4:	f002 ff88 	bl	800ecc8 <_svfiprintf_r>
 800bdb8:	9b02      	ldr	r3, [sp, #8]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	b01c      	add	sp, #112	; 0x70
 800bdc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdc4:	b003      	add	sp, #12
 800bdc6:	4770      	bx	lr
 800bdc8:	20000018 	.word	0x20000018
 800bdcc:	ffff0208 	.word	0xffff0208

0800bdd0 <__sread>:
 800bdd0:	b510      	push	{r4, lr}
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd8:	f003 f876 	bl	800eec8 <_read_r>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	bfab      	itete	ge
 800bde0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bde2:	89a3      	ldrhlt	r3, [r4, #12]
 800bde4:	181b      	addge	r3, r3, r0
 800bde6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdea:	bfac      	ite	ge
 800bdec:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdee:	81a3      	strhlt	r3, [r4, #12]
 800bdf0:	bd10      	pop	{r4, pc}

0800bdf2 <__swrite>:
 800bdf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdf6:	461f      	mov	r7, r3
 800bdf8:	898b      	ldrh	r3, [r1, #12]
 800bdfa:	05db      	lsls	r3, r3, #23
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	460c      	mov	r4, r1
 800be00:	4616      	mov	r6, r2
 800be02:	d505      	bpl.n	800be10 <__swrite+0x1e>
 800be04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be08:	2302      	movs	r3, #2
 800be0a:	2200      	movs	r2, #0
 800be0c:	f002 f9a4 	bl	800e158 <_lseek_r>
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be1a:	81a3      	strh	r3, [r4, #12]
 800be1c:	4632      	mov	r2, r6
 800be1e:	463b      	mov	r3, r7
 800be20:	4628      	mov	r0, r5
 800be22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be26:	f000 bec3 	b.w	800cbb0 <_write_r>

0800be2a <__sseek>:
 800be2a:	b510      	push	{r4, lr}
 800be2c:	460c      	mov	r4, r1
 800be2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be32:	f002 f991 	bl	800e158 <_lseek_r>
 800be36:	1c43      	adds	r3, r0, #1
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	bf15      	itete	ne
 800be3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800be3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be46:	81a3      	strheq	r3, [r4, #12]
 800be48:	bf18      	it	ne
 800be4a:	81a3      	strhne	r3, [r4, #12]
 800be4c:	bd10      	pop	{r4, pc}

0800be4e <__sclose>:
 800be4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be52:	f000 bebf 	b.w	800cbd4 <_close_r>

0800be56 <sulp>:
 800be56:	b570      	push	{r4, r5, r6, lr}
 800be58:	4604      	mov	r4, r0
 800be5a:	460d      	mov	r5, r1
 800be5c:	ec45 4b10 	vmov	d0, r4, r5
 800be60:	4616      	mov	r6, r2
 800be62:	f002 fd23 	bl	800e8ac <__ulp>
 800be66:	ec51 0b10 	vmov	r0, r1, d0
 800be6a:	b17e      	cbz	r6, 800be8c <sulp+0x36>
 800be6c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800be70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800be74:	2b00      	cmp	r3, #0
 800be76:	dd09      	ble.n	800be8c <sulp+0x36>
 800be78:	051b      	lsls	r3, r3, #20
 800be7a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800be7e:	2400      	movs	r4, #0
 800be80:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800be84:	4622      	mov	r2, r4
 800be86:	462b      	mov	r3, r5
 800be88:	f7f4 fbb6 	bl	80005f8 <__aeabi_dmul>
 800be8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be90 <_strtod_l>:
 800be90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be94:	ed2d 8b02 	vpush	{d8}
 800be98:	b09d      	sub	sp, #116	; 0x74
 800be9a:	461f      	mov	r7, r3
 800be9c:	2300      	movs	r3, #0
 800be9e:	9318      	str	r3, [sp, #96]	; 0x60
 800bea0:	4ba2      	ldr	r3, [pc, #648]	; (800c12c <_strtod_l+0x29c>)
 800bea2:	9213      	str	r2, [sp, #76]	; 0x4c
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	9305      	str	r3, [sp, #20]
 800bea8:	4604      	mov	r4, r0
 800beaa:	4618      	mov	r0, r3
 800beac:	4688      	mov	r8, r1
 800beae:	f7f4 f98f 	bl	80001d0 <strlen>
 800beb2:	f04f 0a00 	mov.w	sl, #0
 800beb6:	4605      	mov	r5, r0
 800beb8:	f04f 0b00 	mov.w	fp, #0
 800bebc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bec2:	781a      	ldrb	r2, [r3, #0]
 800bec4:	2a2b      	cmp	r2, #43	; 0x2b
 800bec6:	d04e      	beq.n	800bf66 <_strtod_l+0xd6>
 800bec8:	d83b      	bhi.n	800bf42 <_strtod_l+0xb2>
 800beca:	2a0d      	cmp	r2, #13
 800becc:	d834      	bhi.n	800bf38 <_strtod_l+0xa8>
 800bece:	2a08      	cmp	r2, #8
 800bed0:	d834      	bhi.n	800bf3c <_strtod_l+0xac>
 800bed2:	2a00      	cmp	r2, #0
 800bed4:	d03e      	beq.n	800bf54 <_strtod_l+0xc4>
 800bed6:	2300      	movs	r3, #0
 800bed8:	930a      	str	r3, [sp, #40]	; 0x28
 800beda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bedc:	7833      	ldrb	r3, [r6, #0]
 800bede:	2b30      	cmp	r3, #48	; 0x30
 800bee0:	f040 80b0 	bne.w	800c044 <_strtod_l+0x1b4>
 800bee4:	7873      	ldrb	r3, [r6, #1]
 800bee6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800beea:	2b58      	cmp	r3, #88	; 0x58
 800beec:	d168      	bne.n	800bfc0 <_strtod_l+0x130>
 800beee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bef0:	9301      	str	r3, [sp, #4]
 800bef2:	ab18      	add	r3, sp, #96	; 0x60
 800bef4:	9702      	str	r7, [sp, #8]
 800bef6:	9300      	str	r3, [sp, #0]
 800bef8:	4a8d      	ldr	r2, [pc, #564]	; (800c130 <_strtod_l+0x2a0>)
 800befa:	ab19      	add	r3, sp, #100	; 0x64
 800befc:	a917      	add	r1, sp, #92	; 0x5c
 800befe:	4620      	mov	r0, r4
 800bf00:	f001 fe1e 	bl	800db40 <__gethex>
 800bf04:	f010 0707 	ands.w	r7, r0, #7
 800bf08:	4605      	mov	r5, r0
 800bf0a:	d005      	beq.n	800bf18 <_strtod_l+0x88>
 800bf0c:	2f06      	cmp	r7, #6
 800bf0e:	d12c      	bne.n	800bf6a <_strtod_l+0xda>
 800bf10:	3601      	adds	r6, #1
 800bf12:	2300      	movs	r3, #0
 800bf14:	9617      	str	r6, [sp, #92]	; 0x5c
 800bf16:	930a      	str	r3, [sp, #40]	; 0x28
 800bf18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f040 8590 	bne.w	800ca40 <_strtod_l+0xbb0>
 800bf20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf22:	b1eb      	cbz	r3, 800bf60 <_strtod_l+0xd0>
 800bf24:	4652      	mov	r2, sl
 800bf26:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bf2a:	ec43 2b10 	vmov	d0, r2, r3
 800bf2e:	b01d      	add	sp, #116	; 0x74
 800bf30:	ecbd 8b02 	vpop	{d8}
 800bf34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf38:	2a20      	cmp	r2, #32
 800bf3a:	d1cc      	bne.n	800bed6 <_strtod_l+0x46>
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	9317      	str	r3, [sp, #92]	; 0x5c
 800bf40:	e7be      	b.n	800bec0 <_strtod_l+0x30>
 800bf42:	2a2d      	cmp	r2, #45	; 0x2d
 800bf44:	d1c7      	bne.n	800bed6 <_strtod_l+0x46>
 800bf46:	2201      	movs	r2, #1
 800bf48:	920a      	str	r2, [sp, #40]	; 0x28
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf4e:	785b      	ldrb	r3, [r3, #1]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d1c2      	bne.n	800beda <_strtod_l+0x4a>
 800bf54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf56:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f040 856e 	bne.w	800ca3c <_strtod_l+0xbac>
 800bf60:	4652      	mov	r2, sl
 800bf62:	465b      	mov	r3, fp
 800bf64:	e7e1      	b.n	800bf2a <_strtod_l+0x9a>
 800bf66:	2200      	movs	r2, #0
 800bf68:	e7ee      	b.n	800bf48 <_strtod_l+0xb8>
 800bf6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf6c:	b13a      	cbz	r2, 800bf7e <_strtod_l+0xee>
 800bf6e:	2135      	movs	r1, #53	; 0x35
 800bf70:	a81a      	add	r0, sp, #104	; 0x68
 800bf72:	f002 fda6 	bl	800eac2 <__copybits>
 800bf76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f002 f965 	bl	800e248 <_Bfree>
 800bf7e:	3f01      	subs	r7, #1
 800bf80:	2f04      	cmp	r7, #4
 800bf82:	d806      	bhi.n	800bf92 <_strtod_l+0x102>
 800bf84:	e8df f007 	tbb	[pc, r7]
 800bf88:	1714030a 	.word	0x1714030a
 800bf8c:	0a          	.byte	0x0a
 800bf8d:	00          	.byte	0x00
 800bf8e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bf92:	0728      	lsls	r0, r5, #28
 800bf94:	d5c0      	bpl.n	800bf18 <_strtod_l+0x88>
 800bf96:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bf9a:	e7bd      	b.n	800bf18 <_strtod_l+0x88>
 800bf9c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bfa0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bfa2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bfa6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bfaa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bfae:	e7f0      	b.n	800bf92 <_strtod_l+0x102>
 800bfb0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c134 <_strtod_l+0x2a4>
 800bfb4:	e7ed      	b.n	800bf92 <_strtod_l+0x102>
 800bfb6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bfba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bfbe:	e7e8      	b.n	800bf92 <_strtod_l+0x102>
 800bfc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfc2:	1c5a      	adds	r2, r3, #1
 800bfc4:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfc6:	785b      	ldrb	r3, [r3, #1]
 800bfc8:	2b30      	cmp	r3, #48	; 0x30
 800bfca:	d0f9      	beq.n	800bfc0 <_strtod_l+0x130>
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d0a3      	beq.n	800bf18 <_strtod_l+0x88>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	f04f 0900 	mov.w	r9, #0
 800bfd6:	9304      	str	r3, [sp, #16]
 800bfd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfda:	9308      	str	r3, [sp, #32]
 800bfdc:	f8cd 901c 	str.w	r9, [sp, #28]
 800bfe0:	464f      	mov	r7, r9
 800bfe2:	220a      	movs	r2, #10
 800bfe4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bfe6:	7806      	ldrb	r6, [r0, #0]
 800bfe8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bfec:	b2d9      	uxtb	r1, r3
 800bfee:	2909      	cmp	r1, #9
 800bff0:	d92a      	bls.n	800c048 <_strtod_l+0x1b8>
 800bff2:	9905      	ldr	r1, [sp, #20]
 800bff4:	462a      	mov	r2, r5
 800bff6:	f002 ff83 	bl	800ef00 <strncmp>
 800bffa:	b398      	cbz	r0, 800c064 <_strtod_l+0x1d4>
 800bffc:	2000      	movs	r0, #0
 800bffe:	4632      	mov	r2, r6
 800c000:	463d      	mov	r5, r7
 800c002:	9005      	str	r0, [sp, #20]
 800c004:	4603      	mov	r3, r0
 800c006:	2a65      	cmp	r2, #101	; 0x65
 800c008:	d001      	beq.n	800c00e <_strtod_l+0x17e>
 800c00a:	2a45      	cmp	r2, #69	; 0x45
 800c00c:	d118      	bne.n	800c040 <_strtod_l+0x1b0>
 800c00e:	b91d      	cbnz	r5, 800c018 <_strtod_l+0x188>
 800c010:	9a04      	ldr	r2, [sp, #16]
 800c012:	4302      	orrs	r2, r0
 800c014:	d09e      	beq.n	800bf54 <_strtod_l+0xc4>
 800c016:	2500      	movs	r5, #0
 800c018:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c01c:	f108 0201 	add.w	r2, r8, #1
 800c020:	9217      	str	r2, [sp, #92]	; 0x5c
 800c022:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c026:	2a2b      	cmp	r2, #43	; 0x2b
 800c028:	d075      	beq.n	800c116 <_strtod_l+0x286>
 800c02a:	2a2d      	cmp	r2, #45	; 0x2d
 800c02c:	d07b      	beq.n	800c126 <_strtod_l+0x296>
 800c02e:	f04f 0c00 	mov.w	ip, #0
 800c032:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c036:	2909      	cmp	r1, #9
 800c038:	f240 8082 	bls.w	800c140 <_strtod_l+0x2b0>
 800c03c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c040:	2600      	movs	r6, #0
 800c042:	e09d      	b.n	800c180 <_strtod_l+0x2f0>
 800c044:	2300      	movs	r3, #0
 800c046:	e7c4      	b.n	800bfd2 <_strtod_l+0x142>
 800c048:	2f08      	cmp	r7, #8
 800c04a:	bfd8      	it	le
 800c04c:	9907      	ldrle	r1, [sp, #28]
 800c04e:	f100 0001 	add.w	r0, r0, #1
 800c052:	bfda      	itte	le
 800c054:	fb02 3301 	mlale	r3, r2, r1, r3
 800c058:	9307      	strle	r3, [sp, #28]
 800c05a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c05e:	3701      	adds	r7, #1
 800c060:	9017      	str	r0, [sp, #92]	; 0x5c
 800c062:	e7bf      	b.n	800bfe4 <_strtod_l+0x154>
 800c064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c066:	195a      	adds	r2, r3, r5
 800c068:	9217      	str	r2, [sp, #92]	; 0x5c
 800c06a:	5d5a      	ldrb	r2, [r3, r5]
 800c06c:	2f00      	cmp	r7, #0
 800c06e:	d037      	beq.n	800c0e0 <_strtod_l+0x250>
 800c070:	9005      	str	r0, [sp, #20]
 800c072:	463d      	mov	r5, r7
 800c074:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c078:	2b09      	cmp	r3, #9
 800c07a:	d912      	bls.n	800c0a2 <_strtod_l+0x212>
 800c07c:	2301      	movs	r3, #1
 800c07e:	e7c2      	b.n	800c006 <_strtod_l+0x176>
 800c080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	9217      	str	r2, [sp, #92]	; 0x5c
 800c086:	785a      	ldrb	r2, [r3, #1]
 800c088:	3001      	adds	r0, #1
 800c08a:	2a30      	cmp	r2, #48	; 0x30
 800c08c:	d0f8      	beq.n	800c080 <_strtod_l+0x1f0>
 800c08e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c092:	2b08      	cmp	r3, #8
 800c094:	f200 84d9 	bhi.w	800ca4a <_strtod_l+0xbba>
 800c098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c09a:	9005      	str	r0, [sp, #20]
 800c09c:	2000      	movs	r0, #0
 800c09e:	9308      	str	r3, [sp, #32]
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	3a30      	subs	r2, #48	; 0x30
 800c0a4:	f100 0301 	add.w	r3, r0, #1
 800c0a8:	d014      	beq.n	800c0d4 <_strtod_l+0x244>
 800c0aa:	9905      	ldr	r1, [sp, #20]
 800c0ac:	4419      	add	r1, r3
 800c0ae:	9105      	str	r1, [sp, #20]
 800c0b0:	462b      	mov	r3, r5
 800c0b2:	eb00 0e05 	add.w	lr, r0, r5
 800c0b6:	210a      	movs	r1, #10
 800c0b8:	4573      	cmp	r3, lr
 800c0ba:	d113      	bne.n	800c0e4 <_strtod_l+0x254>
 800c0bc:	182b      	adds	r3, r5, r0
 800c0be:	2b08      	cmp	r3, #8
 800c0c0:	f105 0501 	add.w	r5, r5, #1
 800c0c4:	4405      	add	r5, r0
 800c0c6:	dc1c      	bgt.n	800c102 <_strtod_l+0x272>
 800c0c8:	9907      	ldr	r1, [sp, #28]
 800c0ca:	230a      	movs	r3, #10
 800c0cc:	fb03 2301 	mla	r3, r3, r1, r2
 800c0d0:	9307      	str	r3, [sp, #28]
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c0d6:	1c51      	adds	r1, r2, #1
 800c0d8:	9117      	str	r1, [sp, #92]	; 0x5c
 800c0da:	7852      	ldrb	r2, [r2, #1]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	e7c9      	b.n	800c074 <_strtod_l+0x1e4>
 800c0e0:	4638      	mov	r0, r7
 800c0e2:	e7d2      	b.n	800c08a <_strtod_l+0x1fa>
 800c0e4:	2b08      	cmp	r3, #8
 800c0e6:	dc04      	bgt.n	800c0f2 <_strtod_l+0x262>
 800c0e8:	9e07      	ldr	r6, [sp, #28]
 800c0ea:	434e      	muls	r6, r1
 800c0ec:	9607      	str	r6, [sp, #28]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	e7e2      	b.n	800c0b8 <_strtod_l+0x228>
 800c0f2:	f103 0c01 	add.w	ip, r3, #1
 800c0f6:	f1bc 0f10 	cmp.w	ip, #16
 800c0fa:	bfd8      	it	le
 800c0fc:	fb01 f909 	mulle.w	r9, r1, r9
 800c100:	e7f5      	b.n	800c0ee <_strtod_l+0x25e>
 800c102:	2d10      	cmp	r5, #16
 800c104:	bfdc      	itt	le
 800c106:	230a      	movle	r3, #10
 800c108:	fb03 2909 	mlale	r9, r3, r9, r2
 800c10c:	e7e1      	b.n	800c0d2 <_strtod_l+0x242>
 800c10e:	2300      	movs	r3, #0
 800c110:	9305      	str	r3, [sp, #20]
 800c112:	2301      	movs	r3, #1
 800c114:	e77c      	b.n	800c010 <_strtod_l+0x180>
 800c116:	f04f 0c00 	mov.w	ip, #0
 800c11a:	f108 0202 	add.w	r2, r8, #2
 800c11e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c120:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c124:	e785      	b.n	800c032 <_strtod_l+0x1a2>
 800c126:	f04f 0c01 	mov.w	ip, #1
 800c12a:	e7f6      	b.n	800c11a <_strtod_l+0x28a>
 800c12c:	0800fb08 	.word	0x0800fb08
 800c130:	0800f8bc 	.word	0x0800f8bc
 800c134:	7ff00000 	.word	0x7ff00000
 800c138:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c13a:	1c51      	adds	r1, r2, #1
 800c13c:	9117      	str	r1, [sp, #92]	; 0x5c
 800c13e:	7852      	ldrb	r2, [r2, #1]
 800c140:	2a30      	cmp	r2, #48	; 0x30
 800c142:	d0f9      	beq.n	800c138 <_strtod_l+0x2a8>
 800c144:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c148:	2908      	cmp	r1, #8
 800c14a:	f63f af79 	bhi.w	800c040 <_strtod_l+0x1b0>
 800c14e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c152:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c154:	9206      	str	r2, [sp, #24]
 800c156:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c158:	1c51      	adds	r1, r2, #1
 800c15a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c15c:	7852      	ldrb	r2, [r2, #1]
 800c15e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c162:	2e09      	cmp	r6, #9
 800c164:	d937      	bls.n	800c1d6 <_strtod_l+0x346>
 800c166:	9e06      	ldr	r6, [sp, #24]
 800c168:	1b89      	subs	r1, r1, r6
 800c16a:	2908      	cmp	r1, #8
 800c16c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c170:	dc02      	bgt.n	800c178 <_strtod_l+0x2e8>
 800c172:	4576      	cmp	r6, lr
 800c174:	bfa8      	it	ge
 800c176:	4676      	movge	r6, lr
 800c178:	f1bc 0f00 	cmp.w	ip, #0
 800c17c:	d000      	beq.n	800c180 <_strtod_l+0x2f0>
 800c17e:	4276      	negs	r6, r6
 800c180:	2d00      	cmp	r5, #0
 800c182:	d14d      	bne.n	800c220 <_strtod_l+0x390>
 800c184:	9904      	ldr	r1, [sp, #16]
 800c186:	4301      	orrs	r1, r0
 800c188:	f47f aec6 	bne.w	800bf18 <_strtod_l+0x88>
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f47f aee1 	bne.w	800bf54 <_strtod_l+0xc4>
 800c192:	2a69      	cmp	r2, #105	; 0x69
 800c194:	d027      	beq.n	800c1e6 <_strtod_l+0x356>
 800c196:	dc24      	bgt.n	800c1e2 <_strtod_l+0x352>
 800c198:	2a49      	cmp	r2, #73	; 0x49
 800c19a:	d024      	beq.n	800c1e6 <_strtod_l+0x356>
 800c19c:	2a4e      	cmp	r2, #78	; 0x4e
 800c19e:	f47f aed9 	bne.w	800bf54 <_strtod_l+0xc4>
 800c1a2:	499f      	ldr	r1, [pc, #636]	; (800c420 <_strtod_l+0x590>)
 800c1a4:	a817      	add	r0, sp, #92	; 0x5c
 800c1a6:	f001 ff23 	bl	800dff0 <__match>
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	f43f aed2 	beq.w	800bf54 <_strtod_l+0xc4>
 800c1b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	2b28      	cmp	r3, #40	; 0x28
 800c1b6:	d12d      	bne.n	800c214 <_strtod_l+0x384>
 800c1b8:	499a      	ldr	r1, [pc, #616]	; (800c424 <_strtod_l+0x594>)
 800c1ba:	aa1a      	add	r2, sp, #104	; 0x68
 800c1bc:	a817      	add	r0, sp, #92	; 0x5c
 800c1be:	f001 ff2b 	bl	800e018 <__hexnan>
 800c1c2:	2805      	cmp	r0, #5
 800c1c4:	d126      	bne.n	800c214 <_strtod_l+0x384>
 800c1c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c1c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c1cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c1d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c1d4:	e6a0      	b.n	800bf18 <_strtod_l+0x88>
 800c1d6:	210a      	movs	r1, #10
 800c1d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c1dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c1e0:	e7b9      	b.n	800c156 <_strtod_l+0x2c6>
 800c1e2:	2a6e      	cmp	r2, #110	; 0x6e
 800c1e4:	e7db      	b.n	800c19e <_strtod_l+0x30e>
 800c1e6:	4990      	ldr	r1, [pc, #576]	; (800c428 <_strtod_l+0x598>)
 800c1e8:	a817      	add	r0, sp, #92	; 0x5c
 800c1ea:	f001 ff01 	bl	800dff0 <__match>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	f43f aeb0 	beq.w	800bf54 <_strtod_l+0xc4>
 800c1f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1f6:	498d      	ldr	r1, [pc, #564]	; (800c42c <_strtod_l+0x59c>)
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	a817      	add	r0, sp, #92	; 0x5c
 800c1fc:	9317      	str	r3, [sp, #92]	; 0x5c
 800c1fe:	f001 fef7 	bl	800dff0 <__match>
 800c202:	b910      	cbnz	r0, 800c20a <_strtod_l+0x37a>
 800c204:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c206:	3301      	adds	r3, #1
 800c208:	9317      	str	r3, [sp, #92]	; 0x5c
 800c20a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c43c <_strtod_l+0x5ac>
 800c20e:	f04f 0a00 	mov.w	sl, #0
 800c212:	e681      	b.n	800bf18 <_strtod_l+0x88>
 800c214:	4886      	ldr	r0, [pc, #536]	; (800c430 <_strtod_l+0x5a0>)
 800c216:	f002 fe6b 	bl	800eef0 <nan>
 800c21a:	ec5b ab10 	vmov	sl, fp, d0
 800c21e:	e67b      	b.n	800bf18 <_strtod_l+0x88>
 800c220:	9b05      	ldr	r3, [sp, #20]
 800c222:	9807      	ldr	r0, [sp, #28]
 800c224:	1af3      	subs	r3, r6, r3
 800c226:	2f00      	cmp	r7, #0
 800c228:	bf08      	it	eq
 800c22a:	462f      	moveq	r7, r5
 800c22c:	2d10      	cmp	r5, #16
 800c22e:	9306      	str	r3, [sp, #24]
 800c230:	46a8      	mov	r8, r5
 800c232:	bfa8      	it	ge
 800c234:	f04f 0810 	movge.w	r8, #16
 800c238:	f7f4 f964 	bl	8000504 <__aeabi_ui2d>
 800c23c:	2d09      	cmp	r5, #9
 800c23e:	4682      	mov	sl, r0
 800c240:	468b      	mov	fp, r1
 800c242:	dd13      	ble.n	800c26c <_strtod_l+0x3dc>
 800c244:	4b7b      	ldr	r3, [pc, #492]	; (800c434 <_strtod_l+0x5a4>)
 800c246:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c24a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c24e:	f7f4 f9d3 	bl	80005f8 <__aeabi_dmul>
 800c252:	4682      	mov	sl, r0
 800c254:	4648      	mov	r0, r9
 800c256:	468b      	mov	fp, r1
 800c258:	f7f4 f954 	bl	8000504 <__aeabi_ui2d>
 800c25c:	4602      	mov	r2, r0
 800c25e:	460b      	mov	r3, r1
 800c260:	4650      	mov	r0, sl
 800c262:	4659      	mov	r1, fp
 800c264:	f7f4 f812 	bl	800028c <__adddf3>
 800c268:	4682      	mov	sl, r0
 800c26a:	468b      	mov	fp, r1
 800c26c:	2d0f      	cmp	r5, #15
 800c26e:	dc38      	bgt.n	800c2e2 <_strtod_l+0x452>
 800c270:	9b06      	ldr	r3, [sp, #24]
 800c272:	2b00      	cmp	r3, #0
 800c274:	f43f ae50 	beq.w	800bf18 <_strtod_l+0x88>
 800c278:	dd24      	ble.n	800c2c4 <_strtod_l+0x434>
 800c27a:	2b16      	cmp	r3, #22
 800c27c:	dc0b      	bgt.n	800c296 <_strtod_l+0x406>
 800c27e:	496d      	ldr	r1, [pc, #436]	; (800c434 <_strtod_l+0x5a4>)
 800c280:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c284:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c288:	4652      	mov	r2, sl
 800c28a:	465b      	mov	r3, fp
 800c28c:	f7f4 f9b4 	bl	80005f8 <__aeabi_dmul>
 800c290:	4682      	mov	sl, r0
 800c292:	468b      	mov	fp, r1
 800c294:	e640      	b.n	800bf18 <_strtod_l+0x88>
 800c296:	9a06      	ldr	r2, [sp, #24]
 800c298:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c29c:	4293      	cmp	r3, r2
 800c29e:	db20      	blt.n	800c2e2 <_strtod_l+0x452>
 800c2a0:	4c64      	ldr	r4, [pc, #400]	; (800c434 <_strtod_l+0x5a4>)
 800c2a2:	f1c5 050f 	rsb	r5, r5, #15
 800c2a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c2aa:	4652      	mov	r2, sl
 800c2ac:	465b      	mov	r3, fp
 800c2ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2b2:	f7f4 f9a1 	bl	80005f8 <__aeabi_dmul>
 800c2b6:	9b06      	ldr	r3, [sp, #24]
 800c2b8:	1b5d      	subs	r5, r3, r5
 800c2ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c2be:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c2c2:	e7e3      	b.n	800c28c <_strtod_l+0x3fc>
 800c2c4:	9b06      	ldr	r3, [sp, #24]
 800c2c6:	3316      	adds	r3, #22
 800c2c8:	db0b      	blt.n	800c2e2 <_strtod_l+0x452>
 800c2ca:	9b05      	ldr	r3, [sp, #20]
 800c2cc:	1b9e      	subs	r6, r3, r6
 800c2ce:	4b59      	ldr	r3, [pc, #356]	; (800c434 <_strtod_l+0x5a4>)
 800c2d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c2d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c2d8:	4650      	mov	r0, sl
 800c2da:	4659      	mov	r1, fp
 800c2dc:	f7f4 fab6 	bl	800084c <__aeabi_ddiv>
 800c2e0:	e7d6      	b.n	800c290 <_strtod_l+0x400>
 800c2e2:	9b06      	ldr	r3, [sp, #24]
 800c2e4:	eba5 0808 	sub.w	r8, r5, r8
 800c2e8:	4498      	add	r8, r3
 800c2ea:	f1b8 0f00 	cmp.w	r8, #0
 800c2ee:	dd74      	ble.n	800c3da <_strtod_l+0x54a>
 800c2f0:	f018 030f 	ands.w	r3, r8, #15
 800c2f4:	d00a      	beq.n	800c30c <_strtod_l+0x47c>
 800c2f6:	494f      	ldr	r1, [pc, #316]	; (800c434 <_strtod_l+0x5a4>)
 800c2f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c2fc:	4652      	mov	r2, sl
 800c2fe:	465b      	mov	r3, fp
 800c300:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c304:	f7f4 f978 	bl	80005f8 <__aeabi_dmul>
 800c308:	4682      	mov	sl, r0
 800c30a:	468b      	mov	fp, r1
 800c30c:	f038 080f 	bics.w	r8, r8, #15
 800c310:	d04f      	beq.n	800c3b2 <_strtod_l+0x522>
 800c312:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c316:	dd22      	ble.n	800c35e <_strtod_l+0x4ce>
 800c318:	2500      	movs	r5, #0
 800c31a:	462e      	mov	r6, r5
 800c31c:	9507      	str	r5, [sp, #28]
 800c31e:	9505      	str	r5, [sp, #20]
 800c320:	2322      	movs	r3, #34	; 0x22
 800c322:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c43c <_strtod_l+0x5ac>
 800c326:	6023      	str	r3, [r4, #0]
 800c328:	f04f 0a00 	mov.w	sl, #0
 800c32c:	9b07      	ldr	r3, [sp, #28]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	f43f adf2 	beq.w	800bf18 <_strtod_l+0x88>
 800c334:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c336:	4620      	mov	r0, r4
 800c338:	f001 ff86 	bl	800e248 <_Bfree>
 800c33c:	9905      	ldr	r1, [sp, #20]
 800c33e:	4620      	mov	r0, r4
 800c340:	f001 ff82 	bl	800e248 <_Bfree>
 800c344:	4631      	mov	r1, r6
 800c346:	4620      	mov	r0, r4
 800c348:	f001 ff7e 	bl	800e248 <_Bfree>
 800c34c:	9907      	ldr	r1, [sp, #28]
 800c34e:	4620      	mov	r0, r4
 800c350:	f001 ff7a 	bl	800e248 <_Bfree>
 800c354:	4629      	mov	r1, r5
 800c356:	4620      	mov	r0, r4
 800c358:	f001 ff76 	bl	800e248 <_Bfree>
 800c35c:	e5dc      	b.n	800bf18 <_strtod_l+0x88>
 800c35e:	4b36      	ldr	r3, [pc, #216]	; (800c438 <_strtod_l+0x5a8>)
 800c360:	9304      	str	r3, [sp, #16]
 800c362:	2300      	movs	r3, #0
 800c364:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c368:	4650      	mov	r0, sl
 800c36a:	4659      	mov	r1, fp
 800c36c:	4699      	mov	r9, r3
 800c36e:	f1b8 0f01 	cmp.w	r8, #1
 800c372:	dc21      	bgt.n	800c3b8 <_strtod_l+0x528>
 800c374:	b10b      	cbz	r3, 800c37a <_strtod_l+0x4ea>
 800c376:	4682      	mov	sl, r0
 800c378:	468b      	mov	fp, r1
 800c37a:	4b2f      	ldr	r3, [pc, #188]	; (800c438 <_strtod_l+0x5a8>)
 800c37c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c380:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c384:	4652      	mov	r2, sl
 800c386:	465b      	mov	r3, fp
 800c388:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c38c:	f7f4 f934 	bl	80005f8 <__aeabi_dmul>
 800c390:	4b2a      	ldr	r3, [pc, #168]	; (800c43c <_strtod_l+0x5ac>)
 800c392:	460a      	mov	r2, r1
 800c394:	400b      	ands	r3, r1
 800c396:	492a      	ldr	r1, [pc, #168]	; (800c440 <_strtod_l+0x5b0>)
 800c398:	428b      	cmp	r3, r1
 800c39a:	4682      	mov	sl, r0
 800c39c:	d8bc      	bhi.n	800c318 <_strtod_l+0x488>
 800c39e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c3a2:	428b      	cmp	r3, r1
 800c3a4:	bf86      	itte	hi
 800c3a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c444 <_strtod_l+0x5b4>
 800c3aa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800c3ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	9304      	str	r3, [sp, #16]
 800c3b6:	e084      	b.n	800c4c2 <_strtod_l+0x632>
 800c3b8:	f018 0f01 	tst.w	r8, #1
 800c3bc:	d005      	beq.n	800c3ca <_strtod_l+0x53a>
 800c3be:	9b04      	ldr	r3, [sp, #16]
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	f7f4 f918 	bl	80005f8 <__aeabi_dmul>
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	9a04      	ldr	r2, [sp, #16]
 800c3cc:	3208      	adds	r2, #8
 800c3ce:	f109 0901 	add.w	r9, r9, #1
 800c3d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c3d6:	9204      	str	r2, [sp, #16]
 800c3d8:	e7c9      	b.n	800c36e <_strtod_l+0x4de>
 800c3da:	d0ea      	beq.n	800c3b2 <_strtod_l+0x522>
 800c3dc:	f1c8 0800 	rsb	r8, r8, #0
 800c3e0:	f018 020f 	ands.w	r2, r8, #15
 800c3e4:	d00a      	beq.n	800c3fc <_strtod_l+0x56c>
 800c3e6:	4b13      	ldr	r3, [pc, #76]	; (800c434 <_strtod_l+0x5a4>)
 800c3e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3ec:	4650      	mov	r0, sl
 800c3ee:	4659      	mov	r1, fp
 800c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f4:	f7f4 fa2a 	bl	800084c <__aeabi_ddiv>
 800c3f8:	4682      	mov	sl, r0
 800c3fa:	468b      	mov	fp, r1
 800c3fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c400:	d0d7      	beq.n	800c3b2 <_strtod_l+0x522>
 800c402:	f1b8 0f1f 	cmp.w	r8, #31
 800c406:	dd1f      	ble.n	800c448 <_strtod_l+0x5b8>
 800c408:	2500      	movs	r5, #0
 800c40a:	462e      	mov	r6, r5
 800c40c:	9507      	str	r5, [sp, #28]
 800c40e:	9505      	str	r5, [sp, #20]
 800c410:	2322      	movs	r3, #34	; 0x22
 800c412:	f04f 0a00 	mov.w	sl, #0
 800c416:	f04f 0b00 	mov.w	fp, #0
 800c41a:	6023      	str	r3, [r4, #0]
 800c41c:	e786      	b.n	800c32c <_strtod_l+0x49c>
 800c41e:	bf00      	nop
 800c420:	0800f88d 	.word	0x0800f88d
 800c424:	0800f8d0 	.word	0x0800f8d0
 800c428:	0800f885 	.word	0x0800f885
 800c42c:	0800fa14 	.word	0x0800fa14
 800c430:	0800fcc0 	.word	0x0800fcc0
 800c434:	0800fba0 	.word	0x0800fba0
 800c438:	0800fb78 	.word	0x0800fb78
 800c43c:	7ff00000 	.word	0x7ff00000
 800c440:	7ca00000 	.word	0x7ca00000
 800c444:	7fefffff 	.word	0x7fefffff
 800c448:	f018 0310 	ands.w	r3, r8, #16
 800c44c:	bf18      	it	ne
 800c44e:	236a      	movne	r3, #106	; 0x6a
 800c450:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c800 <_strtod_l+0x970>
 800c454:	9304      	str	r3, [sp, #16]
 800c456:	4650      	mov	r0, sl
 800c458:	4659      	mov	r1, fp
 800c45a:	2300      	movs	r3, #0
 800c45c:	f018 0f01 	tst.w	r8, #1
 800c460:	d004      	beq.n	800c46c <_strtod_l+0x5dc>
 800c462:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c466:	f7f4 f8c7 	bl	80005f8 <__aeabi_dmul>
 800c46a:	2301      	movs	r3, #1
 800c46c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c470:	f109 0908 	add.w	r9, r9, #8
 800c474:	d1f2      	bne.n	800c45c <_strtod_l+0x5cc>
 800c476:	b10b      	cbz	r3, 800c47c <_strtod_l+0x5ec>
 800c478:	4682      	mov	sl, r0
 800c47a:	468b      	mov	fp, r1
 800c47c:	9b04      	ldr	r3, [sp, #16]
 800c47e:	b1c3      	cbz	r3, 800c4b2 <_strtod_l+0x622>
 800c480:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c484:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c488:	2b00      	cmp	r3, #0
 800c48a:	4659      	mov	r1, fp
 800c48c:	dd11      	ble.n	800c4b2 <_strtod_l+0x622>
 800c48e:	2b1f      	cmp	r3, #31
 800c490:	f340 8124 	ble.w	800c6dc <_strtod_l+0x84c>
 800c494:	2b34      	cmp	r3, #52	; 0x34
 800c496:	bfde      	ittt	le
 800c498:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c49c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800c4a0:	fa03 f202 	lslle.w	r2, r3, r2
 800c4a4:	f04f 0a00 	mov.w	sl, #0
 800c4a8:	bfcc      	ite	gt
 800c4aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c4ae:	ea02 0b01 	andle.w	fp, r2, r1
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4650      	mov	r0, sl
 800c4b8:	4659      	mov	r1, fp
 800c4ba:	f7f4 fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d1a2      	bne.n	800c408 <_strtod_l+0x578>
 800c4c2:	9b07      	ldr	r3, [sp, #28]
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	9908      	ldr	r1, [sp, #32]
 800c4c8:	462b      	mov	r3, r5
 800c4ca:	463a      	mov	r2, r7
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f001 ff23 	bl	800e318 <__s2b>
 800c4d2:	9007      	str	r0, [sp, #28]
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	f43f af1f 	beq.w	800c318 <_strtod_l+0x488>
 800c4da:	9b05      	ldr	r3, [sp, #20]
 800c4dc:	1b9e      	subs	r6, r3, r6
 800c4de:	9b06      	ldr	r3, [sp, #24]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	bfb4      	ite	lt
 800c4e4:	4633      	movlt	r3, r6
 800c4e6:	2300      	movge	r3, #0
 800c4e8:	930c      	str	r3, [sp, #48]	; 0x30
 800c4ea:	9b06      	ldr	r3, [sp, #24]
 800c4ec:	2500      	movs	r5, #0
 800c4ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c4f2:	9312      	str	r3, [sp, #72]	; 0x48
 800c4f4:	462e      	mov	r6, r5
 800c4f6:	9b07      	ldr	r3, [sp, #28]
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	6859      	ldr	r1, [r3, #4]
 800c4fc:	f001 fe64 	bl	800e1c8 <_Balloc>
 800c500:	9005      	str	r0, [sp, #20]
 800c502:	2800      	cmp	r0, #0
 800c504:	f43f af0c 	beq.w	800c320 <_strtod_l+0x490>
 800c508:	9b07      	ldr	r3, [sp, #28]
 800c50a:	691a      	ldr	r2, [r3, #16]
 800c50c:	3202      	adds	r2, #2
 800c50e:	f103 010c 	add.w	r1, r3, #12
 800c512:	0092      	lsls	r2, r2, #2
 800c514:	300c      	adds	r0, #12
 800c516:	f7fe fc96 	bl	800ae46 <memcpy>
 800c51a:	ec4b ab10 	vmov	d0, sl, fp
 800c51e:	aa1a      	add	r2, sp, #104	; 0x68
 800c520:	a919      	add	r1, sp, #100	; 0x64
 800c522:	4620      	mov	r0, r4
 800c524:	f002 fa3e 	bl	800e9a4 <__d2b>
 800c528:	ec4b ab18 	vmov	d8, sl, fp
 800c52c:	9018      	str	r0, [sp, #96]	; 0x60
 800c52e:	2800      	cmp	r0, #0
 800c530:	f43f aef6 	beq.w	800c320 <_strtod_l+0x490>
 800c534:	2101      	movs	r1, #1
 800c536:	4620      	mov	r0, r4
 800c538:	f001 ff88 	bl	800e44c <__i2b>
 800c53c:	4606      	mov	r6, r0
 800c53e:	2800      	cmp	r0, #0
 800c540:	f43f aeee 	beq.w	800c320 <_strtod_l+0x490>
 800c544:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c546:	9904      	ldr	r1, [sp, #16]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	bfab      	itete	ge
 800c54c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c54e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c550:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c552:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c556:	bfac      	ite	ge
 800c558:	eb03 0902 	addge.w	r9, r3, r2
 800c55c:	1ad7      	sublt	r7, r2, r3
 800c55e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c560:	eba3 0801 	sub.w	r8, r3, r1
 800c564:	4490      	add	r8, r2
 800c566:	4ba1      	ldr	r3, [pc, #644]	; (800c7ec <_strtod_l+0x95c>)
 800c568:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c56c:	4598      	cmp	r8, r3
 800c56e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c572:	f280 80c7 	bge.w	800c704 <_strtod_l+0x874>
 800c576:	eba3 0308 	sub.w	r3, r3, r8
 800c57a:	2b1f      	cmp	r3, #31
 800c57c:	eba2 0203 	sub.w	r2, r2, r3
 800c580:	f04f 0101 	mov.w	r1, #1
 800c584:	f300 80b1 	bgt.w	800c6ea <_strtod_l+0x85a>
 800c588:	fa01 f303 	lsl.w	r3, r1, r3
 800c58c:	930d      	str	r3, [sp, #52]	; 0x34
 800c58e:	2300      	movs	r3, #0
 800c590:	9308      	str	r3, [sp, #32]
 800c592:	eb09 0802 	add.w	r8, r9, r2
 800c596:	9b04      	ldr	r3, [sp, #16]
 800c598:	45c1      	cmp	r9, r8
 800c59a:	4417      	add	r7, r2
 800c59c:	441f      	add	r7, r3
 800c59e:	464b      	mov	r3, r9
 800c5a0:	bfa8      	it	ge
 800c5a2:	4643      	movge	r3, r8
 800c5a4:	42bb      	cmp	r3, r7
 800c5a6:	bfa8      	it	ge
 800c5a8:	463b      	movge	r3, r7
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	bfc2      	ittt	gt
 800c5ae:	eba8 0803 	subgt.w	r8, r8, r3
 800c5b2:	1aff      	subgt	r7, r7, r3
 800c5b4:	eba9 0903 	subgt.w	r9, r9, r3
 800c5b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	dd17      	ble.n	800c5ee <_strtod_l+0x75e>
 800c5be:	4631      	mov	r1, r6
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f002 f802 	bl	800e5cc <__pow5mult>
 800c5c8:	4606      	mov	r6, r0
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	f43f aea8 	beq.w	800c320 <_strtod_l+0x490>
 800c5d0:	4601      	mov	r1, r0
 800c5d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f001 ff4f 	bl	800e478 <__multiply>
 800c5da:	900b      	str	r0, [sp, #44]	; 0x2c
 800c5dc:	2800      	cmp	r0, #0
 800c5de:	f43f ae9f 	beq.w	800c320 <_strtod_l+0x490>
 800c5e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f001 fe2f 	bl	800e248 <_Bfree>
 800c5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ec:	9318      	str	r3, [sp, #96]	; 0x60
 800c5ee:	f1b8 0f00 	cmp.w	r8, #0
 800c5f2:	f300 808c 	bgt.w	800c70e <_strtod_l+0x87e>
 800c5f6:	9b06      	ldr	r3, [sp, #24]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	dd08      	ble.n	800c60e <_strtod_l+0x77e>
 800c5fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5fe:	9905      	ldr	r1, [sp, #20]
 800c600:	4620      	mov	r0, r4
 800c602:	f001 ffe3 	bl	800e5cc <__pow5mult>
 800c606:	9005      	str	r0, [sp, #20]
 800c608:	2800      	cmp	r0, #0
 800c60a:	f43f ae89 	beq.w	800c320 <_strtod_l+0x490>
 800c60e:	2f00      	cmp	r7, #0
 800c610:	dd08      	ble.n	800c624 <_strtod_l+0x794>
 800c612:	9905      	ldr	r1, [sp, #20]
 800c614:	463a      	mov	r2, r7
 800c616:	4620      	mov	r0, r4
 800c618:	f002 f832 	bl	800e680 <__lshift>
 800c61c:	9005      	str	r0, [sp, #20]
 800c61e:	2800      	cmp	r0, #0
 800c620:	f43f ae7e 	beq.w	800c320 <_strtod_l+0x490>
 800c624:	f1b9 0f00 	cmp.w	r9, #0
 800c628:	dd08      	ble.n	800c63c <_strtod_l+0x7ac>
 800c62a:	4631      	mov	r1, r6
 800c62c:	464a      	mov	r2, r9
 800c62e:	4620      	mov	r0, r4
 800c630:	f002 f826 	bl	800e680 <__lshift>
 800c634:	4606      	mov	r6, r0
 800c636:	2800      	cmp	r0, #0
 800c638:	f43f ae72 	beq.w	800c320 <_strtod_l+0x490>
 800c63c:	9a05      	ldr	r2, [sp, #20]
 800c63e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c640:	4620      	mov	r0, r4
 800c642:	f002 f8a9 	bl	800e798 <__mdiff>
 800c646:	4605      	mov	r5, r0
 800c648:	2800      	cmp	r0, #0
 800c64a:	f43f ae69 	beq.w	800c320 <_strtod_l+0x490>
 800c64e:	68c3      	ldr	r3, [r0, #12]
 800c650:	930b      	str	r3, [sp, #44]	; 0x2c
 800c652:	2300      	movs	r3, #0
 800c654:	60c3      	str	r3, [r0, #12]
 800c656:	4631      	mov	r1, r6
 800c658:	f002 f882 	bl	800e760 <__mcmp>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	da60      	bge.n	800c722 <_strtod_l+0x892>
 800c660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c662:	ea53 030a 	orrs.w	r3, r3, sl
 800c666:	f040 8082 	bne.w	800c76e <_strtod_l+0x8de>
 800c66a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d17d      	bne.n	800c76e <_strtod_l+0x8de>
 800c672:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c676:	0d1b      	lsrs	r3, r3, #20
 800c678:	051b      	lsls	r3, r3, #20
 800c67a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c67e:	d976      	bls.n	800c76e <_strtod_l+0x8de>
 800c680:	696b      	ldr	r3, [r5, #20]
 800c682:	b913      	cbnz	r3, 800c68a <_strtod_l+0x7fa>
 800c684:	692b      	ldr	r3, [r5, #16]
 800c686:	2b01      	cmp	r3, #1
 800c688:	dd71      	ble.n	800c76e <_strtod_l+0x8de>
 800c68a:	4629      	mov	r1, r5
 800c68c:	2201      	movs	r2, #1
 800c68e:	4620      	mov	r0, r4
 800c690:	f001 fff6 	bl	800e680 <__lshift>
 800c694:	4631      	mov	r1, r6
 800c696:	4605      	mov	r5, r0
 800c698:	f002 f862 	bl	800e760 <__mcmp>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	dd66      	ble.n	800c76e <_strtod_l+0x8de>
 800c6a0:	9904      	ldr	r1, [sp, #16]
 800c6a2:	4a53      	ldr	r2, [pc, #332]	; (800c7f0 <_strtod_l+0x960>)
 800c6a4:	465b      	mov	r3, fp
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	f000 8081 	beq.w	800c7ae <_strtod_l+0x91e>
 800c6ac:	ea02 010b 	and.w	r1, r2, fp
 800c6b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c6b4:	dc7b      	bgt.n	800c7ae <_strtod_l+0x91e>
 800c6b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c6ba:	f77f aea9 	ble.w	800c410 <_strtod_l+0x580>
 800c6be:	4b4d      	ldr	r3, [pc, #308]	; (800c7f4 <_strtod_l+0x964>)
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	4659      	mov	r1, fp
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f7f3 ff97 	bl	80005f8 <__aeabi_dmul>
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4303      	orrs	r3, r0
 800c6ce:	bf08      	it	eq
 800c6d0:	2322      	moveq	r3, #34	; 0x22
 800c6d2:	4682      	mov	sl, r0
 800c6d4:	468b      	mov	fp, r1
 800c6d6:	bf08      	it	eq
 800c6d8:	6023      	streq	r3, [r4, #0]
 800c6da:	e62b      	b.n	800c334 <_strtod_l+0x4a4>
 800c6dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e4:	ea03 0a0a 	and.w	sl, r3, sl
 800c6e8:	e6e3      	b.n	800c4b2 <_strtod_l+0x622>
 800c6ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c6ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c6f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c6f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c6fa:	fa01 f308 	lsl.w	r3, r1, r8
 800c6fe:	9308      	str	r3, [sp, #32]
 800c700:	910d      	str	r1, [sp, #52]	; 0x34
 800c702:	e746      	b.n	800c592 <_strtod_l+0x702>
 800c704:	2300      	movs	r3, #0
 800c706:	9308      	str	r3, [sp, #32]
 800c708:	2301      	movs	r3, #1
 800c70a:	930d      	str	r3, [sp, #52]	; 0x34
 800c70c:	e741      	b.n	800c592 <_strtod_l+0x702>
 800c70e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c710:	4642      	mov	r2, r8
 800c712:	4620      	mov	r0, r4
 800c714:	f001 ffb4 	bl	800e680 <__lshift>
 800c718:	9018      	str	r0, [sp, #96]	; 0x60
 800c71a:	2800      	cmp	r0, #0
 800c71c:	f47f af6b 	bne.w	800c5f6 <_strtod_l+0x766>
 800c720:	e5fe      	b.n	800c320 <_strtod_l+0x490>
 800c722:	465f      	mov	r7, fp
 800c724:	d16e      	bne.n	800c804 <_strtod_l+0x974>
 800c726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c728:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c72c:	b342      	cbz	r2, 800c780 <_strtod_l+0x8f0>
 800c72e:	4a32      	ldr	r2, [pc, #200]	; (800c7f8 <_strtod_l+0x968>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d128      	bne.n	800c786 <_strtod_l+0x8f6>
 800c734:	9b04      	ldr	r3, [sp, #16]
 800c736:	4651      	mov	r1, sl
 800c738:	b1eb      	cbz	r3, 800c776 <_strtod_l+0x8e6>
 800c73a:	4b2d      	ldr	r3, [pc, #180]	; (800c7f0 <_strtod_l+0x960>)
 800c73c:	403b      	ands	r3, r7
 800c73e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c746:	d819      	bhi.n	800c77c <_strtod_l+0x8ec>
 800c748:	0d1b      	lsrs	r3, r3, #20
 800c74a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c74e:	fa02 f303 	lsl.w	r3, r2, r3
 800c752:	4299      	cmp	r1, r3
 800c754:	d117      	bne.n	800c786 <_strtod_l+0x8f6>
 800c756:	4b29      	ldr	r3, [pc, #164]	; (800c7fc <_strtod_l+0x96c>)
 800c758:	429f      	cmp	r7, r3
 800c75a:	d102      	bne.n	800c762 <_strtod_l+0x8d2>
 800c75c:	3101      	adds	r1, #1
 800c75e:	f43f addf 	beq.w	800c320 <_strtod_l+0x490>
 800c762:	4b23      	ldr	r3, [pc, #140]	; (800c7f0 <_strtod_l+0x960>)
 800c764:	403b      	ands	r3, r7
 800c766:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c76a:	f04f 0a00 	mov.w	sl, #0
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1a4      	bne.n	800c6be <_strtod_l+0x82e>
 800c774:	e5de      	b.n	800c334 <_strtod_l+0x4a4>
 800c776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c77a:	e7ea      	b.n	800c752 <_strtod_l+0x8c2>
 800c77c:	4613      	mov	r3, r2
 800c77e:	e7e8      	b.n	800c752 <_strtod_l+0x8c2>
 800c780:	ea53 030a 	orrs.w	r3, r3, sl
 800c784:	d08c      	beq.n	800c6a0 <_strtod_l+0x810>
 800c786:	9b08      	ldr	r3, [sp, #32]
 800c788:	b1db      	cbz	r3, 800c7c2 <_strtod_l+0x932>
 800c78a:	423b      	tst	r3, r7
 800c78c:	d0ef      	beq.n	800c76e <_strtod_l+0x8de>
 800c78e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c790:	9a04      	ldr	r2, [sp, #16]
 800c792:	4650      	mov	r0, sl
 800c794:	4659      	mov	r1, fp
 800c796:	b1c3      	cbz	r3, 800c7ca <_strtod_l+0x93a>
 800c798:	f7ff fb5d 	bl	800be56 <sulp>
 800c79c:	4602      	mov	r2, r0
 800c79e:	460b      	mov	r3, r1
 800c7a0:	ec51 0b18 	vmov	r0, r1, d8
 800c7a4:	f7f3 fd72 	bl	800028c <__adddf3>
 800c7a8:	4682      	mov	sl, r0
 800c7aa:	468b      	mov	fp, r1
 800c7ac:	e7df      	b.n	800c76e <_strtod_l+0x8de>
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c7b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c7b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c7bc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c7c0:	e7d5      	b.n	800c76e <_strtod_l+0x8de>
 800c7c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7c4:	ea13 0f0a 	tst.w	r3, sl
 800c7c8:	e7e0      	b.n	800c78c <_strtod_l+0x8fc>
 800c7ca:	f7ff fb44 	bl	800be56 <sulp>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	ec51 0b18 	vmov	r0, r1, d8
 800c7d6:	f7f3 fd57 	bl	8000288 <__aeabi_dsub>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2300      	movs	r3, #0
 800c7de:	4682      	mov	sl, r0
 800c7e0:	468b      	mov	fp, r1
 800c7e2:	f7f4 f971 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	d0c1      	beq.n	800c76e <_strtod_l+0x8de>
 800c7ea:	e611      	b.n	800c410 <_strtod_l+0x580>
 800c7ec:	fffffc02 	.word	0xfffffc02
 800c7f0:	7ff00000 	.word	0x7ff00000
 800c7f4:	39500000 	.word	0x39500000
 800c7f8:	000fffff 	.word	0x000fffff
 800c7fc:	7fefffff 	.word	0x7fefffff
 800c800:	0800f8e8 	.word	0x0800f8e8
 800c804:	4631      	mov	r1, r6
 800c806:	4628      	mov	r0, r5
 800c808:	f002 f928 	bl	800ea5c <__ratio>
 800c80c:	ec59 8b10 	vmov	r8, r9, d0
 800c810:	ee10 0a10 	vmov	r0, s0
 800c814:	2200      	movs	r2, #0
 800c816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c81a:	4649      	mov	r1, r9
 800c81c:	f7f4 f968 	bl	8000af0 <__aeabi_dcmple>
 800c820:	2800      	cmp	r0, #0
 800c822:	d07a      	beq.n	800c91a <_strtod_l+0xa8a>
 800c824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c826:	2b00      	cmp	r3, #0
 800c828:	d04a      	beq.n	800c8c0 <_strtod_l+0xa30>
 800c82a:	4b95      	ldr	r3, [pc, #596]	; (800ca80 <_strtod_l+0xbf0>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c832:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ca80 <_strtod_l+0xbf0>
 800c836:	f04f 0800 	mov.w	r8, #0
 800c83a:	4b92      	ldr	r3, [pc, #584]	; (800ca84 <_strtod_l+0xbf4>)
 800c83c:	403b      	ands	r3, r7
 800c83e:	930d      	str	r3, [sp, #52]	; 0x34
 800c840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c842:	4b91      	ldr	r3, [pc, #580]	; (800ca88 <_strtod_l+0xbf8>)
 800c844:	429a      	cmp	r2, r3
 800c846:	f040 80b0 	bne.w	800c9aa <_strtod_l+0xb1a>
 800c84a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c84e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c852:	ec4b ab10 	vmov	d0, sl, fp
 800c856:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c85a:	f002 f827 	bl	800e8ac <__ulp>
 800c85e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c862:	ec53 2b10 	vmov	r2, r3, d0
 800c866:	f7f3 fec7 	bl	80005f8 <__aeabi_dmul>
 800c86a:	4652      	mov	r2, sl
 800c86c:	465b      	mov	r3, fp
 800c86e:	f7f3 fd0d 	bl	800028c <__adddf3>
 800c872:	460b      	mov	r3, r1
 800c874:	4983      	ldr	r1, [pc, #524]	; (800ca84 <_strtod_l+0xbf4>)
 800c876:	4a85      	ldr	r2, [pc, #532]	; (800ca8c <_strtod_l+0xbfc>)
 800c878:	4019      	ands	r1, r3
 800c87a:	4291      	cmp	r1, r2
 800c87c:	4682      	mov	sl, r0
 800c87e:	d960      	bls.n	800c942 <_strtod_l+0xab2>
 800c880:	ee18 3a90 	vmov	r3, s17
 800c884:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c888:	4293      	cmp	r3, r2
 800c88a:	d104      	bne.n	800c896 <_strtod_l+0xa06>
 800c88c:	ee18 3a10 	vmov	r3, s16
 800c890:	3301      	adds	r3, #1
 800c892:	f43f ad45 	beq.w	800c320 <_strtod_l+0x490>
 800c896:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ca98 <_strtod_l+0xc08>
 800c89a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c89e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	f001 fcd1 	bl	800e248 <_Bfree>
 800c8a6:	9905      	ldr	r1, [sp, #20]
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f001 fccd 	bl	800e248 <_Bfree>
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f001 fcc9 	bl	800e248 <_Bfree>
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f001 fcc5 	bl	800e248 <_Bfree>
 800c8be:	e61a      	b.n	800c4f6 <_strtod_l+0x666>
 800c8c0:	f1ba 0f00 	cmp.w	sl, #0
 800c8c4:	d11b      	bne.n	800c8fe <_strtod_l+0xa6e>
 800c8c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8ca:	b9f3      	cbnz	r3, 800c90a <_strtod_l+0xa7a>
 800c8cc:	4b6c      	ldr	r3, [pc, #432]	; (800ca80 <_strtod_l+0xbf0>)
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	4640      	mov	r0, r8
 800c8d2:	4649      	mov	r1, r9
 800c8d4:	f7f4 f902 	bl	8000adc <__aeabi_dcmplt>
 800c8d8:	b9d0      	cbnz	r0, 800c910 <_strtod_l+0xa80>
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4649      	mov	r1, r9
 800c8de:	4b6c      	ldr	r3, [pc, #432]	; (800ca90 <_strtod_l+0xc00>)
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f7f3 fe89 	bl	80005f8 <__aeabi_dmul>
 800c8e6:	4680      	mov	r8, r0
 800c8e8:	4689      	mov	r9, r1
 800c8ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c8ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c8f2:	9315      	str	r3, [sp, #84]	; 0x54
 800c8f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c8f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c8fc:	e79d      	b.n	800c83a <_strtod_l+0x9aa>
 800c8fe:	f1ba 0f01 	cmp.w	sl, #1
 800c902:	d102      	bne.n	800c90a <_strtod_l+0xa7a>
 800c904:	2f00      	cmp	r7, #0
 800c906:	f43f ad83 	beq.w	800c410 <_strtod_l+0x580>
 800c90a:	4b62      	ldr	r3, [pc, #392]	; (800ca94 <_strtod_l+0xc04>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	e78e      	b.n	800c82e <_strtod_l+0x99e>
 800c910:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ca90 <_strtod_l+0xc00>
 800c914:	f04f 0800 	mov.w	r8, #0
 800c918:	e7e7      	b.n	800c8ea <_strtod_l+0xa5a>
 800c91a:	4b5d      	ldr	r3, [pc, #372]	; (800ca90 <_strtod_l+0xc00>)
 800c91c:	4640      	mov	r0, r8
 800c91e:	4649      	mov	r1, r9
 800c920:	2200      	movs	r2, #0
 800c922:	f7f3 fe69 	bl	80005f8 <__aeabi_dmul>
 800c926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c928:	4680      	mov	r8, r0
 800c92a:	4689      	mov	r9, r1
 800c92c:	b933      	cbnz	r3, 800c93c <_strtod_l+0xaac>
 800c92e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c932:	900e      	str	r0, [sp, #56]	; 0x38
 800c934:	930f      	str	r3, [sp, #60]	; 0x3c
 800c936:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c93a:	e7dd      	b.n	800c8f8 <_strtod_l+0xa68>
 800c93c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c940:	e7f9      	b.n	800c936 <_strtod_l+0xaa6>
 800c942:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c946:	9b04      	ldr	r3, [sp, #16]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d1a8      	bne.n	800c89e <_strtod_l+0xa0e>
 800c94c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c952:	0d1b      	lsrs	r3, r3, #20
 800c954:	051b      	lsls	r3, r3, #20
 800c956:	429a      	cmp	r2, r3
 800c958:	d1a1      	bne.n	800c89e <_strtod_l+0xa0e>
 800c95a:	4640      	mov	r0, r8
 800c95c:	4649      	mov	r1, r9
 800c95e:	f7f4 f9ab 	bl	8000cb8 <__aeabi_d2lz>
 800c962:	f7f3 fe1b 	bl	800059c <__aeabi_l2d>
 800c966:	4602      	mov	r2, r0
 800c968:	460b      	mov	r3, r1
 800c96a:	4640      	mov	r0, r8
 800c96c:	4649      	mov	r1, r9
 800c96e:	f7f3 fc8b 	bl	8000288 <__aeabi_dsub>
 800c972:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c974:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c978:	ea43 030a 	orr.w	r3, r3, sl
 800c97c:	4313      	orrs	r3, r2
 800c97e:	4680      	mov	r8, r0
 800c980:	4689      	mov	r9, r1
 800c982:	d055      	beq.n	800ca30 <_strtod_l+0xba0>
 800c984:	a336      	add	r3, pc, #216	; (adr r3, 800ca60 <_strtod_l+0xbd0>)
 800c986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98a:	f7f4 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800c98e:	2800      	cmp	r0, #0
 800c990:	f47f acd0 	bne.w	800c334 <_strtod_l+0x4a4>
 800c994:	a334      	add	r3, pc, #208	; (adr r3, 800ca68 <_strtod_l+0xbd8>)
 800c996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99a:	4640      	mov	r0, r8
 800c99c:	4649      	mov	r1, r9
 800c99e:	f7f4 f8bb 	bl	8000b18 <__aeabi_dcmpgt>
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	f43f af7b 	beq.w	800c89e <_strtod_l+0xa0e>
 800c9a8:	e4c4      	b.n	800c334 <_strtod_l+0x4a4>
 800c9aa:	9b04      	ldr	r3, [sp, #16]
 800c9ac:	b333      	cbz	r3, 800c9fc <_strtod_l+0xb6c>
 800c9ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9b0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c9b4:	d822      	bhi.n	800c9fc <_strtod_l+0xb6c>
 800c9b6:	a32e      	add	r3, pc, #184	; (adr r3, 800ca70 <_strtod_l+0xbe0>)
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	4640      	mov	r0, r8
 800c9be:	4649      	mov	r1, r9
 800c9c0:	f7f4 f896 	bl	8000af0 <__aeabi_dcmple>
 800c9c4:	b1a0      	cbz	r0, 800c9f0 <_strtod_l+0xb60>
 800c9c6:	4649      	mov	r1, r9
 800c9c8:	4640      	mov	r0, r8
 800c9ca:	f7f4 f8ed 	bl	8000ba8 <__aeabi_d2uiz>
 800c9ce:	2801      	cmp	r0, #1
 800c9d0:	bf38      	it	cc
 800c9d2:	2001      	movcc	r0, #1
 800c9d4:	f7f3 fd96 	bl	8000504 <__aeabi_ui2d>
 800c9d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9da:	4680      	mov	r8, r0
 800c9dc:	4689      	mov	r9, r1
 800c9de:	bb23      	cbnz	r3, 800ca2a <_strtod_l+0xb9a>
 800c9e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9e4:	9010      	str	r0, [sp, #64]	; 0x40
 800c9e6:	9311      	str	r3, [sp, #68]	; 0x44
 800c9e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c9ec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9f4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c9f8:	1a9b      	subs	r3, r3, r2
 800c9fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c9fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca00:	eeb0 0a48 	vmov.f32	s0, s16
 800ca04:	eef0 0a68 	vmov.f32	s1, s17
 800ca08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca0c:	f001 ff4e 	bl	800e8ac <__ulp>
 800ca10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca14:	ec53 2b10 	vmov	r2, r3, d0
 800ca18:	f7f3 fdee 	bl	80005f8 <__aeabi_dmul>
 800ca1c:	ec53 2b18 	vmov	r2, r3, d8
 800ca20:	f7f3 fc34 	bl	800028c <__adddf3>
 800ca24:	4682      	mov	sl, r0
 800ca26:	468b      	mov	fp, r1
 800ca28:	e78d      	b.n	800c946 <_strtod_l+0xab6>
 800ca2a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ca2e:	e7db      	b.n	800c9e8 <_strtod_l+0xb58>
 800ca30:	a311      	add	r3, pc, #68	; (adr r3, 800ca78 <_strtod_l+0xbe8>)
 800ca32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca36:	f7f4 f851 	bl	8000adc <__aeabi_dcmplt>
 800ca3a:	e7b2      	b.n	800c9a2 <_strtod_l+0xb12>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	f7ff ba6b 	b.w	800bf20 <_strtod_l+0x90>
 800ca4a:	2a65      	cmp	r2, #101	; 0x65
 800ca4c:	f43f ab5f 	beq.w	800c10e <_strtod_l+0x27e>
 800ca50:	2a45      	cmp	r2, #69	; 0x45
 800ca52:	f43f ab5c 	beq.w	800c10e <_strtod_l+0x27e>
 800ca56:	2301      	movs	r3, #1
 800ca58:	f7ff bb94 	b.w	800c184 <_strtod_l+0x2f4>
 800ca5c:	f3af 8000 	nop.w
 800ca60:	94a03595 	.word	0x94a03595
 800ca64:	3fdfffff 	.word	0x3fdfffff
 800ca68:	35afe535 	.word	0x35afe535
 800ca6c:	3fe00000 	.word	0x3fe00000
 800ca70:	ffc00000 	.word	0xffc00000
 800ca74:	41dfffff 	.word	0x41dfffff
 800ca78:	94a03595 	.word	0x94a03595
 800ca7c:	3fcfffff 	.word	0x3fcfffff
 800ca80:	3ff00000 	.word	0x3ff00000
 800ca84:	7ff00000 	.word	0x7ff00000
 800ca88:	7fe00000 	.word	0x7fe00000
 800ca8c:	7c9fffff 	.word	0x7c9fffff
 800ca90:	3fe00000 	.word	0x3fe00000
 800ca94:	bff00000 	.word	0xbff00000
 800ca98:	7fefffff 	.word	0x7fefffff

0800ca9c <_strtod_r>:
 800ca9c:	4b01      	ldr	r3, [pc, #4]	; (800caa4 <_strtod_r+0x8>)
 800ca9e:	f7ff b9f7 	b.w	800be90 <_strtod_l>
 800caa2:	bf00      	nop
 800caa4:	20000080 	.word	0x20000080

0800caa8 <_strtol_l.constprop.0>:
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800caae:	d001      	beq.n	800cab4 <_strtol_l.constprop.0+0xc>
 800cab0:	2b24      	cmp	r3, #36	; 0x24
 800cab2:	d906      	bls.n	800cac2 <_strtol_l.constprop.0+0x1a>
 800cab4:	f7fe f8a4 	bl	800ac00 <__errno>
 800cab8:	2316      	movs	r3, #22
 800caba:	6003      	str	r3, [r0, #0]
 800cabc:	2000      	movs	r0, #0
 800cabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cba8 <_strtol_l.constprop.0+0x100>
 800cac6:	460d      	mov	r5, r1
 800cac8:	462e      	mov	r6, r5
 800caca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cace:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cad2:	f017 0708 	ands.w	r7, r7, #8
 800cad6:	d1f7      	bne.n	800cac8 <_strtol_l.constprop.0+0x20>
 800cad8:	2c2d      	cmp	r4, #45	; 0x2d
 800cada:	d132      	bne.n	800cb42 <_strtol_l.constprop.0+0x9a>
 800cadc:	782c      	ldrb	r4, [r5, #0]
 800cade:	2701      	movs	r7, #1
 800cae0:	1cb5      	adds	r5, r6, #2
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d05b      	beq.n	800cb9e <_strtol_l.constprop.0+0xf6>
 800cae6:	2b10      	cmp	r3, #16
 800cae8:	d109      	bne.n	800cafe <_strtol_l.constprop.0+0x56>
 800caea:	2c30      	cmp	r4, #48	; 0x30
 800caec:	d107      	bne.n	800cafe <_strtol_l.constprop.0+0x56>
 800caee:	782c      	ldrb	r4, [r5, #0]
 800caf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800caf4:	2c58      	cmp	r4, #88	; 0x58
 800caf6:	d14d      	bne.n	800cb94 <_strtol_l.constprop.0+0xec>
 800caf8:	786c      	ldrb	r4, [r5, #1]
 800cafa:	2310      	movs	r3, #16
 800cafc:	3502      	adds	r5, #2
 800cafe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cb02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cb06:	f04f 0c00 	mov.w	ip, #0
 800cb0a:	fbb8 f9f3 	udiv	r9, r8, r3
 800cb0e:	4666      	mov	r6, ip
 800cb10:	fb03 8a19 	mls	sl, r3, r9, r8
 800cb14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cb18:	f1be 0f09 	cmp.w	lr, #9
 800cb1c:	d816      	bhi.n	800cb4c <_strtol_l.constprop.0+0xa4>
 800cb1e:	4674      	mov	r4, lr
 800cb20:	42a3      	cmp	r3, r4
 800cb22:	dd24      	ble.n	800cb6e <_strtol_l.constprop.0+0xc6>
 800cb24:	f1bc 0f00 	cmp.w	ip, #0
 800cb28:	db1e      	blt.n	800cb68 <_strtol_l.constprop.0+0xc0>
 800cb2a:	45b1      	cmp	r9, r6
 800cb2c:	d31c      	bcc.n	800cb68 <_strtol_l.constprop.0+0xc0>
 800cb2e:	d101      	bne.n	800cb34 <_strtol_l.constprop.0+0x8c>
 800cb30:	45a2      	cmp	sl, r4
 800cb32:	db19      	blt.n	800cb68 <_strtol_l.constprop.0+0xc0>
 800cb34:	fb06 4603 	mla	r6, r6, r3, r4
 800cb38:	f04f 0c01 	mov.w	ip, #1
 800cb3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb40:	e7e8      	b.n	800cb14 <_strtol_l.constprop.0+0x6c>
 800cb42:	2c2b      	cmp	r4, #43	; 0x2b
 800cb44:	bf04      	itt	eq
 800cb46:	782c      	ldrbeq	r4, [r5, #0]
 800cb48:	1cb5      	addeq	r5, r6, #2
 800cb4a:	e7ca      	b.n	800cae2 <_strtol_l.constprop.0+0x3a>
 800cb4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cb50:	f1be 0f19 	cmp.w	lr, #25
 800cb54:	d801      	bhi.n	800cb5a <_strtol_l.constprop.0+0xb2>
 800cb56:	3c37      	subs	r4, #55	; 0x37
 800cb58:	e7e2      	b.n	800cb20 <_strtol_l.constprop.0+0x78>
 800cb5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cb5e:	f1be 0f19 	cmp.w	lr, #25
 800cb62:	d804      	bhi.n	800cb6e <_strtol_l.constprop.0+0xc6>
 800cb64:	3c57      	subs	r4, #87	; 0x57
 800cb66:	e7db      	b.n	800cb20 <_strtol_l.constprop.0+0x78>
 800cb68:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800cb6c:	e7e6      	b.n	800cb3c <_strtol_l.constprop.0+0x94>
 800cb6e:	f1bc 0f00 	cmp.w	ip, #0
 800cb72:	da05      	bge.n	800cb80 <_strtol_l.constprop.0+0xd8>
 800cb74:	2322      	movs	r3, #34	; 0x22
 800cb76:	6003      	str	r3, [r0, #0]
 800cb78:	4646      	mov	r6, r8
 800cb7a:	b942      	cbnz	r2, 800cb8e <_strtol_l.constprop.0+0xe6>
 800cb7c:	4630      	mov	r0, r6
 800cb7e:	e79e      	b.n	800cabe <_strtol_l.constprop.0+0x16>
 800cb80:	b107      	cbz	r7, 800cb84 <_strtol_l.constprop.0+0xdc>
 800cb82:	4276      	negs	r6, r6
 800cb84:	2a00      	cmp	r2, #0
 800cb86:	d0f9      	beq.n	800cb7c <_strtol_l.constprop.0+0xd4>
 800cb88:	f1bc 0f00 	cmp.w	ip, #0
 800cb8c:	d000      	beq.n	800cb90 <_strtol_l.constprop.0+0xe8>
 800cb8e:	1e69      	subs	r1, r5, #1
 800cb90:	6011      	str	r1, [r2, #0]
 800cb92:	e7f3      	b.n	800cb7c <_strtol_l.constprop.0+0xd4>
 800cb94:	2430      	movs	r4, #48	; 0x30
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1b1      	bne.n	800cafe <_strtol_l.constprop.0+0x56>
 800cb9a:	2308      	movs	r3, #8
 800cb9c:	e7af      	b.n	800cafe <_strtol_l.constprop.0+0x56>
 800cb9e:	2c30      	cmp	r4, #48	; 0x30
 800cba0:	d0a5      	beq.n	800caee <_strtol_l.constprop.0+0x46>
 800cba2:	230a      	movs	r3, #10
 800cba4:	e7ab      	b.n	800cafe <_strtol_l.constprop.0+0x56>
 800cba6:	bf00      	nop
 800cba8:	0800f911 	.word	0x0800f911

0800cbac <_strtol_r>:
 800cbac:	f7ff bf7c 	b.w	800caa8 <_strtol_l.constprop.0>

0800cbb0 <_write_r>:
 800cbb0:	b538      	push	{r3, r4, r5, lr}
 800cbb2:	4d07      	ldr	r5, [pc, #28]	; (800cbd0 <_write_r+0x20>)
 800cbb4:	4604      	mov	r4, r0
 800cbb6:	4608      	mov	r0, r1
 800cbb8:	4611      	mov	r1, r2
 800cbba:	2200      	movs	r2, #0
 800cbbc:	602a      	str	r2, [r5, #0]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	f7f4 fc0c 	bl	80013dc <_write>
 800cbc4:	1c43      	adds	r3, r0, #1
 800cbc6:	d102      	bne.n	800cbce <_write_r+0x1e>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	b103      	cbz	r3, 800cbce <_write_r+0x1e>
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	bd38      	pop	{r3, r4, r5, pc}
 800cbd0:	20001e20 	.word	0x20001e20

0800cbd4 <_close_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4d06      	ldr	r5, [pc, #24]	; (800cbf0 <_close_r+0x1c>)
 800cbd8:	2300      	movs	r3, #0
 800cbda:	4604      	mov	r4, r0
 800cbdc:	4608      	mov	r0, r1
 800cbde:	602b      	str	r3, [r5, #0]
 800cbe0:	f7f5 fa91 	bl	8002106 <_close>
 800cbe4:	1c43      	adds	r3, r0, #1
 800cbe6:	d102      	bne.n	800cbee <_close_r+0x1a>
 800cbe8:	682b      	ldr	r3, [r5, #0]
 800cbea:	b103      	cbz	r3, 800cbee <_close_r+0x1a>
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	bd38      	pop	{r3, r4, r5, pc}
 800cbf0:	20001e20 	.word	0x20001e20

0800cbf4 <quorem>:
 800cbf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	6903      	ldr	r3, [r0, #16]
 800cbfa:	690c      	ldr	r4, [r1, #16]
 800cbfc:	42a3      	cmp	r3, r4
 800cbfe:	4607      	mov	r7, r0
 800cc00:	f2c0 8081 	blt.w	800cd06 <quorem+0x112>
 800cc04:	3c01      	subs	r4, #1
 800cc06:	f101 0814 	add.w	r8, r1, #20
 800cc0a:	f100 0514 	add.w	r5, r0, #20
 800cc0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc12:	9301      	str	r3, [sp, #4]
 800cc14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cc18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cc24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cc28:	fbb2 f6f3 	udiv	r6, r2, r3
 800cc2c:	d331      	bcc.n	800cc92 <quorem+0x9e>
 800cc2e:	f04f 0e00 	mov.w	lr, #0
 800cc32:	4640      	mov	r0, r8
 800cc34:	46ac      	mov	ip, r5
 800cc36:	46f2      	mov	sl, lr
 800cc38:	f850 2b04 	ldr.w	r2, [r0], #4
 800cc3c:	b293      	uxth	r3, r2
 800cc3e:	fb06 e303 	mla	r3, r6, r3, lr
 800cc42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	ebaa 0303 	sub.w	r3, sl, r3
 800cc4c:	f8dc a000 	ldr.w	sl, [ip]
 800cc50:	0c12      	lsrs	r2, r2, #16
 800cc52:	fa13 f38a 	uxtah	r3, r3, sl
 800cc56:	fb06 e202 	mla	r2, r6, r2, lr
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	9b00      	ldr	r3, [sp, #0]
 800cc5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cc62:	b292      	uxth	r2, r2
 800cc64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cc68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc6c:	f8bd 3000 	ldrh.w	r3, [sp]
 800cc70:	4581      	cmp	r9, r0
 800cc72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc76:	f84c 3b04 	str.w	r3, [ip], #4
 800cc7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cc7e:	d2db      	bcs.n	800cc38 <quorem+0x44>
 800cc80:	f855 300b 	ldr.w	r3, [r5, fp]
 800cc84:	b92b      	cbnz	r3, 800cc92 <quorem+0x9e>
 800cc86:	9b01      	ldr	r3, [sp, #4]
 800cc88:	3b04      	subs	r3, #4
 800cc8a:	429d      	cmp	r5, r3
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	d32e      	bcc.n	800ccee <quorem+0xfa>
 800cc90:	613c      	str	r4, [r7, #16]
 800cc92:	4638      	mov	r0, r7
 800cc94:	f001 fd64 	bl	800e760 <__mcmp>
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	db24      	blt.n	800cce6 <quorem+0xf2>
 800cc9c:	3601      	adds	r6, #1
 800cc9e:	4628      	mov	r0, r5
 800cca0:	f04f 0c00 	mov.w	ip, #0
 800cca4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cca8:	f8d0 e000 	ldr.w	lr, [r0]
 800ccac:	b293      	uxth	r3, r2
 800ccae:	ebac 0303 	sub.w	r3, ip, r3
 800ccb2:	0c12      	lsrs	r2, r2, #16
 800ccb4:	fa13 f38e 	uxtah	r3, r3, lr
 800ccb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ccbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccc6:	45c1      	cmp	r9, r8
 800ccc8:	f840 3b04 	str.w	r3, [r0], #4
 800cccc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ccd0:	d2e8      	bcs.n	800cca4 <quorem+0xb0>
 800ccd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccda:	b922      	cbnz	r2, 800cce6 <quorem+0xf2>
 800ccdc:	3b04      	subs	r3, #4
 800ccde:	429d      	cmp	r5, r3
 800cce0:	461a      	mov	r2, r3
 800cce2:	d30a      	bcc.n	800ccfa <quorem+0x106>
 800cce4:	613c      	str	r4, [r7, #16]
 800cce6:	4630      	mov	r0, r6
 800cce8:	b003      	add	sp, #12
 800ccea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccee:	6812      	ldr	r2, [r2, #0]
 800ccf0:	3b04      	subs	r3, #4
 800ccf2:	2a00      	cmp	r2, #0
 800ccf4:	d1cc      	bne.n	800cc90 <quorem+0x9c>
 800ccf6:	3c01      	subs	r4, #1
 800ccf8:	e7c7      	b.n	800cc8a <quorem+0x96>
 800ccfa:	6812      	ldr	r2, [r2, #0]
 800ccfc:	3b04      	subs	r3, #4
 800ccfe:	2a00      	cmp	r2, #0
 800cd00:	d1f0      	bne.n	800cce4 <quorem+0xf0>
 800cd02:	3c01      	subs	r4, #1
 800cd04:	e7eb      	b.n	800ccde <quorem+0xea>
 800cd06:	2000      	movs	r0, #0
 800cd08:	e7ee      	b.n	800cce8 <quorem+0xf4>
 800cd0a:	0000      	movs	r0, r0
 800cd0c:	0000      	movs	r0, r0
	...

0800cd10 <_dtoa_r>:
 800cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd14:	ed2d 8b04 	vpush	{d8-d9}
 800cd18:	ec57 6b10 	vmov	r6, r7, d0
 800cd1c:	b093      	sub	sp, #76	; 0x4c
 800cd1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd24:	9106      	str	r1, [sp, #24]
 800cd26:	ee10 aa10 	vmov	sl, s0
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	9209      	str	r2, [sp, #36]	; 0x24
 800cd2e:	930c      	str	r3, [sp, #48]	; 0x30
 800cd30:	46bb      	mov	fp, r7
 800cd32:	b975      	cbnz	r5, 800cd52 <_dtoa_r+0x42>
 800cd34:	2010      	movs	r0, #16
 800cd36:	f001 fa21 	bl	800e17c <malloc>
 800cd3a:	4602      	mov	r2, r0
 800cd3c:	6260      	str	r0, [r4, #36]	; 0x24
 800cd3e:	b920      	cbnz	r0, 800cd4a <_dtoa_r+0x3a>
 800cd40:	4ba7      	ldr	r3, [pc, #668]	; (800cfe0 <_dtoa_r+0x2d0>)
 800cd42:	21ea      	movs	r1, #234	; 0xea
 800cd44:	48a7      	ldr	r0, [pc, #668]	; (800cfe4 <_dtoa_r+0x2d4>)
 800cd46:	f002 f8fd 	bl	800ef44 <__assert_func>
 800cd4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cd4e:	6005      	str	r5, [r0, #0]
 800cd50:	60c5      	str	r5, [r0, #12]
 800cd52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd54:	6819      	ldr	r1, [r3, #0]
 800cd56:	b151      	cbz	r1, 800cd6e <_dtoa_r+0x5e>
 800cd58:	685a      	ldr	r2, [r3, #4]
 800cd5a:	604a      	str	r2, [r1, #4]
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	4093      	lsls	r3, r2
 800cd60:	608b      	str	r3, [r1, #8]
 800cd62:	4620      	mov	r0, r4
 800cd64:	f001 fa70 	bl	800e248 <_Bfree>
 800cd68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	1e3b      	subs	r3, r7, #0
 800cd70:	bfaa      	itet	ge
 800cd72:	2300      	movge	r3, #0
 800cd74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cd78:	f8c8 3000 	strge.w	r3, [r8]
 800cd7c:	4b9a      	ldr	r3, [pc, #616]	; (800cfe8 <_dtoa_r+0x2d8>)
 800cd7e:	bfbc      	itt	lt
 800cd80:	2201      	movlt	r2, #1
 800cd82:	f8c8 2000 	strlt.w	r2, [r8]
 800cd86:	ea33 030b 	bics.w	r3, r3, fp
 800cd8a:	d11b      	bne.n	800cdc4 <_dtoa_r+0xb4>
 800cd8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd92:	6013      	str	r3, [r2, #0]
 800cd94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd98:	4333      	orrs	r3, r6
 800cd9a:	f000 8592 	beq.w	800d8c2 <_dtoa_r+0xbb2>
 800cd9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cda0:	b963      	cbnz	r3, 800cdbc <_dtoa_r+0xac>
 800cda2:	4b92      	ldr	r3, [pc, #584]	; (800cfec <_dtoa_r+0x2dc>)
 800cda4:	e022      	b.n	800cdec <_dtoa_r+0xdc>
 800cda6:	4b92      	ldr	r3, [pc, #584]	; (800cff0 <_dtoa_r+0x2e0>)
 800cda8:	9301      	str	r3, [sp, #4]
 800cdaa:	3308      	adds	r3, #8
 800cdac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdae:	6013      	str	r3, [r2, #0]
 800cdb0:	9801      	ldr	r0, [sp, #4]
 800cdb2:	b013      	add	sp, #76	; 0x4c
 800cdb4:	ecbd 8b04 	vpop	{d8-d9}
 800cdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdbc:	4b8b      	ldr	r3, [pc, #556]	; (800cfec <_dtoa_r+0x2dc>)
 800cdbe:	9301      	str	r3, [sp, #4]
 800cdc0:	3303      	adds	r3, #3
 800cdc2:	e7f3      	b.n	800cdac <_dtoa_r+0x9c>
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	4650      	mov	r0, sl
 800cdca:	4659      	mov	r1, fp
 800cdcc:	f7f3 fe7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdd0:	ec4b ab19 	vmov	d9, sl, fp
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	b158      	cbz	r0, 800cdf0 <_dtoa_r+0xe0>
 800cdd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdda:	2301      	movs	r3, #1
 800cddc:	6013      	str	r3, [r2, #0]
 800cdde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 856b 	beq.w	800d8bc <_dtoa_r+0xbac>
 800cde6:	4883      	ldr	r0, [pc, #524]	; (800cff4 <_dtoa_r+0x2e4>)
 800cde8:	6018      	str	r0, [r3, #0]
 800cdea:	1e43      	subs	r3, r0, #1
 800cdec:	9301      	str	r3, [sp, #4]
 800cdee:	e7df      	b.n	800cdb0 <_dtoa_r+0xa0>
 800cdf0:	ec4b ab10 	vmov	d0, sl, fp
 800cdf4:	aa10      	add	r2, sp, #64	; 0x40
 800cdf6:	a911      	add	r1, sp, #68	; 0x44
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	f001 fdd3 	bl	800e9a4 <__d2b>
 800cdfe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ce02:	ee08 0a10 	vmov	s16, r0
 800ce06:	2d00      	cmp	r5, #0
 800ce08:	f000 8084 	beq.w	800cf14 <_dtoa_r+0x204>
 800ce0c:	ee19 3a90 	vmov	r3, s19
 800ce10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ce18:	4656      	mov	r6, sl
 800ce1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ce1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ce26:	4b74      	ldr	r3, [pc, #464]	; (800cff8 <_dtoa_r+0x2e8>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	4639      	mov	r1, r7
 800ce2e:	f7f3 fa2b 	bl	8000288 <__aeabi_dsub>
 800ce32:	a365      	add	r3, pc, #404	; (adr r3, 800cfc8 <_dtoa_r+0x2b8>)
 800ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce38:	f7f3 fbde 	bl	80005f8 <__aeabi_dmul>
 800ce3c:	a364      	add	r3, pc, #400	; (adr r3, 800cfd0 <_dtoa_r+0x2c0>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	f7f3 fa23 	bl	800028c <__adddf3>
 800ce46:	4606      	mov	r6, r0
 800ce48:	4628      	mov	r0, r5
 800ce4a:	460f      	mov	r7, r1
 800ce4c:	f7f3 fb6a 	bl	8000524 <__aeabi_i2d>
 800ce50:	a361      	add	r3, pc, #388	; (adr r3, 800cfd8 <_dtoa_r+0x2c8>)
 800ce52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce56:	f7f3 fbcf 	bl	80005f8 <__aeabi_dmul>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	4630      	mov	r0, r6
 800ce60:	4639      	mov	r1, r7
 800ce62:	f7f3 fa13 	bl	800028c <__adddf3>
 800ce66:	4606      	mov	r6, r0
 800ce68:	460f      	mov	r7, r1
 800ce6a:	f7f3 fe75 	bl	8000b58 <__aeabi_d2iz>
 800ce6e:	2200      	movs	r2, #0
 800ce70:	9000      	str	r0, [sp, #0]
 800ce72:	2300      	movs	r3, #0
 800ce74:	4630      	mov	r0, r6
 800ce76:	4639      	mov	r1, r7
 800ce78:	f7f3 fe30 	bl	8000adc <__aeabi_dcmplt>
 800ce7c:	b150      	cbz	r0, 800ce94 <_dtoa_r+0x184>
 800ce7e:	9800      	ldr	r0, [sp, #0]
 800ce80:	f7f3 fb50 	bl	8000524 <__aeabi_i2d>
 800ce84:	4632      	mov	r2, r6
 800ce86:	463b      	mov	r3, r7
 800ce88:	f7f3 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce8c:	b910      	cbnz	r0, 800ce94 <_dtoa_r+0x184>
 800ce8e:	9b00      	ldr	r3, [sp, #0]
 800ce90:	3b01      	subs	r3, #1
 800ce92:	9300      	str	r3, [sp, #0]
 800ce94:	9b00      	ldr	r3, [sp, #0]
 800ce96:	2b16      	cmp	r3, #22
 800ce98:	d85a      	bhi.n	800cf50 <_dtoa_r+0x240>
 800ce9a:	9a00      	ldr	r2, [sp, #0]
 800ce9c:	4b57      	ldr	r3, [pc, #348]	; (800cffc <_dtoa_r+0x2ec>)
 800ce9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea6:	ec51 0b19 	vmov	r0, r1, d9
 800ceaa:	f7f3 fe17 	bl	8000adc <__aeabi_dcmplt>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d050      	beq.n	800cf54 <_dtoa_r+0x244>
 800ceb2:	9b00      	ldr	r3, [sp, #0]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	2300      	movs	r3, #0
 800ceba:	930b      	str	r3, [sp, #44]	; 0x2c
 800cebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cebe:	1b5d      	subs	r5, r3, r5
 800cec0:	1e6b      	subs	r3, r5, #1
 800cec2:	9305      	str	r3, [sp, #20]
 800cec4:	bf45      	ittet	mi
 800cec6:	f1c5 0301 	rsbmi	r3, r5, #1
 800ceca:	9304      	strmi	r3, [sp, #16]
 800cecc:	2300      	movpl	r3, #0
 800cece:	2300      	movmi	r3, #0
 800ced0:	bf4c      	ite	mi
 800ced2:	9305      	strmi	r3, [sp, #20]
 800ced4:	9304      	strpl	r3, [sp, #16]
 800ced6:	9b00      	ldr	r3, [sp, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	db3d      	blt.n	800cf58 <_dtoa_r+0x248>
 800cedc:	9b05      	ldr	r3, [sp, #20]
 800cede:	9a00      	ldr	r2, [sp, #0]
 800cee0:	920a      	str	r2, [sp, #40]	; 0x28
 800cee2:	4413      	add	r3, r2
 800cee4:	9305      	str	r3, [sp, #20]
 800cee6:	2300      	movs	r3, #0
 800cee8:	9307      	str	r3, [sp, #28]
 800ceea:	9b06      	ldr	r3, [sp, #24]
 800ceec:	2b09      	cmp	r3, #9
 800ceee:	f200 8089 	bhi.w	800d004 <_dtoa_r+0x2f4>
 800cef2:	2b05      	cmp	r3, #5
 800cef4:	bfc4      	itt	gt
 800cef6:	3b04      	subgt	r3, #4
 800cef8:	9306      	strgt	r3, [sp, #24]
 800cefa:	9b06      	ldr	r3, [sp, #24]
 800cefc:	f1a3 0302 	sub.w	r3, r3, #2
 800cf00:	bfcc      	ite	gt
 800cf02:	2500      	movgt	r5, #0
 800cf04:	2501      	movle	r5, #1
 800cf06:	2b03      	cmp	r3, #3
 800cf08:	f200 8087 	bhi.w	800d01a <_dtoa_r+0x30a>
 800cf0c:	e8df f003 	tbb	[pc, r3]
 800cf10:	59383a2d 	.word	0x59383a2d
 800cf14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cf18:	441d      	add	r5, r3
 800cf1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cf1e:	2b20      	cmp	r3, #32
 800cf20:	bfc1      	itttt	gt
 800cf22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cf26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cf2a:	fa0b f303 	lslgt.w	r3, fp, r3
 800cf2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cf32:	bfda      	itte	le
 800cf34:	f1c3 0320 	rsble	r3, r3, #32
 800cf38:	fa06 f003 	lslle.w	r0, r6, r3
 800cf3c:	4318      	orrgt	r0, r3
 800cf3e:	f7f3 fae1 	bl	8000504 <__aeabi_ui2d>
 800cf42:	2301      	movs	r3, #1
 800cf44:	4606      	mov	r6, r0
 800cf46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cf4a:	3d01      	subs	r5, #1
 800cf4c:	930e      	str	r3, [sp, #56]	; 0x38
 800cf4e:	e76a      	b.n	800ce26 <_dtoa_r+0x116>
 800cf50:	2301      	movs	r3, #1
 800cf52:	e7b2      	b.n	800ceba <_dtoa_r+0x1aa>
 800cf54:	900b      	str	r0, [sp, #44]	; 0x2c
 800cf56:	e7b1      	b.n	800cebc <_dtoa_r+0x1ac>
 800cf58:	9b04      	ldr	r3, [sp, #16]
 800cf5a:	9a00      	ldr	r2, [sp, #0]
 800cf5c:	1a9b      	subs	r3, r3, r2
 800cf5e:	9304      	str	r3, [sp, #16]
 800cf60:	4253      	negs	r3, r2
 800cf62:	9307      	str	r3, [sp, #28]
 800cf64:	2300      	movs	r3, #0
 800cf66:	930a      	str	r3, [sp, #40]	; 0x28
 800cf68:	e7bf      	b.n	800ceea <_dtoa_r+0x1da>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	9308      	str	r3, [sp, #32]
 800cf6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	dc55      	bgt.n	800d020 <_dtoa_r+0x310>
 800cf74:	2301      	movs	r3, #1
 800cf76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf7e:	e00c      	b.n	800cf9a <_dtoa_r+0x28a>
 800cf80:	2301      	movs	r3, #1
 800cf82:	e7f3      	b.n	800cf6c <_dtoa_r+0x25c>
 800cf84:	2300      	movs	r3, #0
 800cf86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf88:	9308      	str	r3, [sp, #32]
 800cf8a:	9b00      	ldr	r3, [sp, #0]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	9302      	str	r3, [sp, #8]
 800cf90:	3301      	adds	r3, #1
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	9303      	str	r3, [sp, #12]
 800cf96:	bfb8      	it	lt
 800cf98:	2301      	movlt	r3, #1
 800cf9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	6042      	str	r2, [r0, #4]
 800cfa0:	2204      	movs	r2, #4
 800cfa2:	f102 0614 	add.w	r6, r2, #20
 800cfa6:	429e      	cmp	r6, r3
 800cfa8:	6841      	ldr	r1, [r0, #4]
 800cfaa:	d93d      	bls.n	800d028 <_dtoa_r+0x318>
 800cfac:	4620      	mov	r0, r4
 800cfae:	f001 f90b 	bl	800e1c8 <_Balloc>
 800cfb2:	9001      	str	r0, [sp, #4]
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d13b      	bne.n	800d030 <_dtoa_r+0x320>
 800cfb8:	4b11      	ldr	r3, [pc, #68]	; (800d000 <_dtoa_r+0x2f0>)
 800cfba:	4602      	mov	r2, r0
 800cfbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cfc0:	e6c0      	b.n	800cd44 <_dtoa_r+0x34>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e7df      	b.n	800cf86 <_dtoa_r+0x276>
 800cfc6:	bf00      	nop
 800cfc8:	636f4361 	.word	0x636f4361
 800cfcc:	3fd287a7 	.word	0x3fd287a7
 800cfd0:	8b60c8b3 	.word	0x8b60c8b3
 800cfd4:	3fc68a28 	.word	0x3fc68a28
 800cfd8:	509f79fb 	.word	0x509f79fb
 800cfdc:	3fd34413 	.word	0x3fd34413
 800cfe0:	0800fa1e 	.word	0x0800fa1e
 800cfe4:	0800fa35 	.word	0x0800fa35
 800cfe8:	7ff00000 	.word	0x7ff00000
 800cfec:	0800fa1a 	.word	0x0800fa1a
 800cff0:	0800fa11 	.word	0x0800fa11
 800cff4:	0800f891 	.word	0x0800f891
 800cff8:	3ff80000 	.word	0x3ff80000
 800cffc:	0800fba0 	.word	0x0800fba0
 800d000:	0800fa90 	.word	0x0800fa90
 800d004:	2501      	movs	r5, #1
 800d006:	2300      	movs	r3, #0
 800d008:	9306      	str	r3, [sp, #24]
 800d00a:	9508      	str	r5, [sp, #32]
 800d00c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d010:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d014:	2200      	movs	r2, #0
 800d016:	2312      	movs	r3, #18
 800d018:	e7b0      	b.n	800cf7c <_dtoa_r+0x26c>
 800d01a:	2301      	movs	r3, #1
 800d01c:	9308      	str	r3, [sp, #32]
 800d01e:	e7f5      	b.n	800d00c <_dtoa_r+0x2fc>
 800d020:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d022:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d026:	e7b8      	b.n	800cf9a <_dtoa_r+0x28a>
 800d028:	3101      	adds	r1, #1
 800d02a:	6041      	str	r1, [r0, #4]
 800d02c:	0052      	lsls	r2, r2, #1
 800d02e:	e7b8      	b.n	800cfa2 <_dtoa_r+0x292>
 800d030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d032:	9a01      	ldr	r2, [sp, #4]
 800d034:	601a      	str	r2, [r3, #0]
 800d036:	9b03      	ldr	r3, [sp, #12]
 800d038:	2b0e      	cmp	r3, #14
 800d03a:	f200 809d 	bhi.w	800d178 <_dtoa_r+0x468>
 800d03e:	2d00      	cmp	r5, #0
 800d040:	f000 809a 	beq.w	800d178 <_dtoa_r+0x468>
 800d044:	9b00      	ldr	r3, [sp, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	dd32      	ble.n	800d0b0 <_dtoa_r+0x3a0>
 800d04a:	4ab7      	ldr	r2, [pc, #732]	; (800d328 <_dtoa_r+0x618>)
 800d04c:	f003 030f 	and.w	r3, r3, #15
 800d050:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d054:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d058:	9b00      	ldr	r3, [sp, #0]
 800d05a:	05d8      	lsls	r0, r3, #23
 800d05c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d060:	d516      	bpl.n	800d090 <_dtoa_r+0x380>
 800d062:	4bb2      	ldr	r3, [pc, #712]	; (800d32c <_dtoa_r+0x61c>)
 800d064:	ec51 0b19 	vmov	r0, r1, d9
 800d068:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d06c:	f7f3 fbee 	bl	800084c <__aeabi_ddiv>
 800d070:	f007 070f 	and.w	r7, r7, #15
 800d074:	4682      	mov	sl, r0
 800d076:	468b      	mov	fp, r1
 800d078:	2503      	movs	r5, #3
 800d07a:	4eac      	ldr	r6, [pc, #688]	; (800d32c <_dtoa_r+0x61c>)
 800d07c:	b957      	cbnz	r7, 800d094 <_dtoa_r+0x384>
 800d07e:	4642      	mov	r2, r8
 800d080:	464b      	mov	r3, r9
 800d082:	4650      	mov	r0, sl
 800d084:	4659      	mov	r1, fp
 800d086:	f7f3 fbe1 	bl	800084c <__aeabi_ddiv>
 800d08a:	4682      	mov	sl, r0
 800d08c:	468b      	mov	fp, r1
 800d08e:	e028      	b.n	800d0e2 <_dtoa_r+0x3d2>
 800d090:	2502      	movs	r5, #2
 800d092:	e7f2      	b.n	800d07a <_dtoa_r+0x36a>
 800d094:	07f9      	lsls	r1, r7, #31
 800d096:	d508      	bpl.n	800d0aa <_dtoa_r+0x39a>
 800d098:	4640      	mov	r0, r8
 800d09a:	4649      	mov	r1, r9
 800d09c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d0a0:	f7f3 faaa 	bl	80005f8 <__aeabi_dmul>
 800d0a4:	3501      	adds	r5, #1
 800d0a6:	4680      	mov	r8, r0
 800d0a8:	4689      	mov	r9, r1
 800d0aa:	107f      	asrs	r7, r7, #1
 800d0ac:	3608      	adds	r6, #8
 800d0ae:	e7e5      	b.n	800d07c <_dtoa_r+0x36c>
 800d0b0:	f000 809b 	beq.w	800d1ea <_dtoa_r+0x4da>
 800d0b4:	9b00      	ldr	r3, [sp, #0]
 800d0b6:	4f9d      	ldr	r7, [pc, #628]	; (800d32c <_dtoa_r+0x61c>)
 800d0b8:	425e      	negs	r6, r3
 800d0ba:	4b9b      	ldr	r3, [pc, #620]	; (800d328 <_dtoa_r+0x618>)
 800d0bc:	f006 020f 	and.w	r2, r6, #15
 800d0c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c8:	ec51 0b19 	vmov	r0, r1, d9
 800d0cc:	f7f3 fa94 	bl	80005f8 <__aeabi_dmul>
 800d0d0:	1136      	asrs	r6, r6, #4
 800d0d2:	4682      	mov	sl, r0
 800d0d4:	468b      	mov	fp, r1
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	2502      	movs	r5, #2
 800d0da:	2e00      	cmp	r6, #0
 800d0dc:	d17a      	bne.n	800d1d4 <_dtoa_r+0x4c4>
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1d3      	bne.n	800d08a <_dtoa_r+0x37a>
 800d0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	f000 8082 	beq.w	800d1ee <_dtoa_r+0x4de>
 800d0ea:	4b91      	ldr	r3, [pc, #580]	; (800d330 <_dtoa_r+0x620>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	4650      	mov	r0, sl
 800d0f0:	4659      	mov	r1, fp
 800d0f2:	f7f3 fcf3 	bl	8000adc <__aeabi_dcmplt>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	d079      	beq.n	800d1ee <_dtoa_r+0x4de>
 800d0fa:	9b03      	ldr	r3, [sp, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d076      	beq.n	800d1ee <_dtoa_r+0x4de>
 800d100:	9b02      	ldr	r3, [sp, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	dd36      	ble.n	800d174 <_dtoa_r+0x464>
 800d106:	9b00      	ldr	r3, [sp, #0]
 800d108:	4650      	mov	r0, sl
 800d10a:	4659      	mov	r1, fp
 800d10c:	1e5f      	subs	r7, r3, #1
 800d10e:	2200      	movs	r2, #0
 800d110:	4b88      	ldr	r3, [pc, #544]	; (800d334 <_dtoa_r+0x624>)
 800d112:	f7f3 fa71 	bl	80005f8 <__aeabi_dmul>
 800d116:	9e02      	ldr	r6, [sp, #8]
 800d118:	4682      	mov	sl, r0
 800d11a:	468b      	mov	fp, r1
 800d11c:	3501      	adds	r5, #1
 800d11e:	4628      	mov	r0, r5
 800d120:	f7f3 fa00 	bl	8000524 <__aeabi_i2d>
 800d124:	4652      	mov	r2, sl
 800d126:	465b      	mov	r3, fp
 800d128:	f7f3 fa66 	bl	80005f8 <__aeabi_dmul>
 800d12c:	4b82      	ldr	r3, [pc, #520]	; (800d338 <_dtoa_r+0x628>)
 800d12e:	2200      	movs	r2, #0
 800d130:	f7f3 f8ac 	bl	800028c <__adddf3>
 800d134:	46d0      	mov	r8, sl
 800d136:	46d9      	mov	r9, fp
 800d138:	4682      	mov	sl, r0
 800d13a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d13e:	2e00      	cmp	r6, #0
 800d140:	d158      	bne.n	800d1f4 <_dtoa_r+0x4e4>
 800d142:	4b7e      	ldr	r3, [pc, #504]	; (800d33c <_dtoa_r+0x62c>)
 800d144:	2200      	movs	r2, #0
 800d146:	4640      	mov	r0, r8
 800d148:	4649      	mov	r1, r9
 800d14a:	f7f3 f89d 	bl	8000288 <__aeabi_dsub>
 800d14e:	4652      	mov	r2, sl
 800d150:	465b      	mov	r3, fp
 800d152:	4680      	mov	r8, r0
 800d154:	4689      	mov	r9, r1
 800d156:	f7f3 fcdf 	bl	8000b18 <__aeabi_dcmpgt>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	f040 8295 	bne.w	800d68a <_dtoa_r+0x97a>
 800d160:	4652      	mov	r2, sl
 800d162:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d166:	4640      	mov	r0, r8
 800d168:	4649      	mov	r1, r9
 800d16a:	f7f3 fcb7 	bl	8000adc <__aeabi_dcmplt>
 800d16e:	2800      	cmp	r0, #0
 800d170:	f040 8289 	bne.w	800d686 <_dtoa_r+0x976>
 800d174:	ec5b ab19 	vmov	sl, fp, d9
 800d178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	f2c0 8148 	blt.w	800d410 <_dtoa_r+0x700>
 800d180:	9a00      	ldr	r2, [sp, #0]
 800d182:	2a0e      	cmp	r2, #14
 800d184:	f300 8144 	bgt.w	800d410 <_dtoa_r+0x700>
 800d188:	4b67      	ldr	r3, [pc, #412]	; (800d328 <_dtoa_r+0x618>)
 800d18a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d18e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d194:	2b00      	cmp	r3, #0
 800d196:	f280 80d5 	bge.w	800d344 <_dtoa_r+0x634>
 800d19a:	9b03      	ldr	r3, [sp, #12]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f300 80d1 	bgt.w	800d344 <_dtoa_r+0x634>
 800d1a2:	f040 826f 	bne.w	800d684 <_dtoa_r+0x974>
 800d1a6:	4b65      	ldr	r3, [pc, #404]	; (800d33c <_dtoa_r+0x62c>)
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	4640      	mov	r0, r8
 800d1ac:	4649      	mov	r1, r9
 800d1ae:	f7f3 fa23 	bl	80005f8 <__aeabi_dmul>
 800d1b2:	4652      	mov	r2, sl
 800d1b4:	465b      	mov	r3, fp
 800d1b6:	f7f3 fca5 	bl	8000b04 <__aeabi_dcmpge>
 800d1ba:	9e03      	ldr	r6, [sp, #12]
 800d1bc:	4637      	mov	r7, r6
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	f040 8245 	bne.w	800d64e <_dtoa_r+0x93e>
 800d1c4:	9d01      	ldr	r5, [sp, #4]
 800d1c6:	2331      	movs	r3, #49	; 0x31
 800d1c8:	f805 3b01 	strb.w	r3, [r5], #1
 800d1cc:	9b00      	ldr	r3, [sp, #0]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	e240      	b.n	800d656 <_dtoa_r+0x946>
 800d1d4:	07f2      	lsls	r2, r6, #31
 800d1d6:	d505      	bpl.n	800d1e4 <_dtoa_r+0x4d4>
 800d1d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1dc:	f7f3 fa0c 	bl	80005f8 <__aeabi_dmul>
 800d1e0:	3501      	adds	r5, #1
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	1076      	asrs	r6, r6, #1
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	e777      	b.n	800d0da <_dtoa_r+0x3ca>
 800d1ea:	2502      	movs	r5, #2
 800d1ec:	e779      	b.n	800d0e2 <_dtoa_r+0x3d2>
 800d1ee:	9f00      	ldr	r7, [sp, #0]
 800d1f0:	9e03      	ldr	r6, [sp, #12]
 800d1f2:	e794      	b.n	800d11e <_dtoa_r+0x40e>
 800d1f4:	9901      	ldr	r1, [sp, #4]
 800d1f6:	4b4c      	ldr	r3, [pc, #304]	; (800d328 <_dtoa_r+0x618>)
 800d1f8:	4431      	add	r1, r6
 800d1fa:	910d      	str	r1, [sp, #52]	; 0x34
 800d1fc:	9908      	ldr	r1, [sp, #32]
 800d1fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d202:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d206:	2900      	cmp	r1, #0
 800d208:	d043      	beq.n	800d292 <_dtoa_r+0x582>
 800d20a:	494d      	ldr	r1, [pc, #308]	; (800d340 <_dtoa_r+0x630>)
 800d20c:	2000      	movs	r0, #0
 800d20e:	f7f3 fb1d 	bl	800084c <__aeabi_ddiv>
 800d212:	4652      	mov	r2, sl
 800d214:	465b      	mov	r3, fp
 800d216:	f7f3 f837 	bl	8000288 <__aeabi_dsub>
 800d21a:	9d01      	ldr	r5, [sp, #4]
 800d21c:	4682      	mov	sl, r0
 800d21e:	468b      	mov	fp, r1
 800d220:	4649      	mov	r1, r9
 800d222:	4640      	mov	r0, r8
 800d224:	f7f3 fc98 	bl	8000b58 <__aeabi_d2iz>
 800d228:	4606      	mov	r6, r0
 800d22a:	f7f3 f97b 	bl	8000524 <__aeabi_i2d>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4640      	mov	r0, r8
 800d234:	4649      	mov	r1, r9
 800d236:	f7f3 f827 	bl	8000288 <__aeabi_dsub>
 800d23a:	3630      	adds	r6, #48	; 0x30
 800d23c:	f805 6b01 	strb.w	r6, [r5], #1
 800d240:	4652      	mov	r2, sl
 800d242:	465b      	mov	r3, fp
 800d244:	4680      	mov	r8, r0
 800d246:	4689      	mov	r9, r1
 800d248:	f7f3 fc48 	bl	8000adc <__aeabi_dcmplt>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	d163      	bne.n	800d318 <_dtoa_r+0x608>
 800d250:	4642      	mov	r2, r8
 800d252:	464b      	mov	r3, r9
 800d254:	4936      	ldr	r1, [pc, #216]	; (800d330 <_dtoa_r+0x620>)
 800d256:	2000      	movs	r0, #0
 800d258:	f7f3 f816 	bl	8000288 <__aeabi_dsub>
 800d25c:	4652      	mov	r2, sl
 800d25e:	465b      	mov	r3, fp
 800d260:	f7f3 fc3c 	bl	8000adc <__aeabi_dcmplt>
 800d264:	2800      	cmp	r0, #0
 800d266:	f040 80b5 	bne.w	800d3d4 <_dtoa_r+0x6c4>
 800d26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d26c:	429d      	cmp	r5, r3
 800d26e:	d081      	beq.n	800d174 <_dtoa_r+0x464>
 800d270:	4b30      	ldr	r3, [pc, #192]	; (800d334 <_dtoa_r+0x624>)
 800d272:	2200      	movs	r2, #0
 800d274:	4650      	mov	r0, sl
 800d276:	4659      	mov	r1, fp
 800d278:	f7f3 f9be 	bl	80005f8 <__aeabi_dmul>
 800d27c:	4b2d      	ldr	r3, [pc, #180]	; (800d334 <_dtoa_r+0x624>)
 800d27e:	4682      	mov	sl, r0
 800d280:	468b      	mov	fp, r1
 800d282:	4640      	mov	r0, r8
 800d284:	4649      	mov	r1, r9
 800d286:	2200      	movs	r2, #0
 800d288:	f7f3 f9b6 	bl	80005f8 <__aeabi_dmul>
 800d28c:	4680      	mov	r8, r0
 800d28e:	4689      	mov	r9, r1
 800d290:	e7c6      	b.n	800d220 <_dtoa_r+0x510>
 800d292:	4650      	mov	r0, sl
 800d294:	4659      	mov	r1, fp
 800d296:	f7f3 f9af 	bl	80005f8 <__aeabi_dmul>
 800d29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d29c:	9d01      	ldr	r5, [sp, #4]
 800d29e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2a0:	4682      	mov	sl, r0
 800d2a2:	468b      	mov	fp, r1
 800d2a4:	4649      	mov	r1, r9
 800d2a6:	4640      	mov	r0, r8
 800d2a8:	f7f3 fc56 	bl	8000b58 <__aeabi_d2iz>
 800d2ac:	4606      	mov	r6, r0
 800d2ae:	f7f3 f939 	bl	8000524 <__aeabi_i2d>
 800d2b2:	3630      	adds	r6, #48	; 0x30
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	4640      	mov	r0, r8
 800d2ba:	4649      	mov	r1, r9
 800d2bc:	f7f2 ffe4 	bl	8000288 <__aeabi_dsub>
 800d2c0:	f805 6b01 	strb.w	r6, [r5], #1
 800d2c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2c6:	429d      	cmp	r5, r3
 800d2c8:	4680      	mov	r8, r0
 800d2ca:	4689      	mov	r9, r1
 800d2cc:	f04f 0200 	mov.w	r2, #0
 800d2d0:	d124      	bne.n	800d31c <_dtoa_r+0x60c>
 800d2d2:	4b1b      	ldr	r3, [pc, #108]	; (800d340 <_dtoa_r+0x630>)
 800d2d4:	4650      	mov	r0, sl
 800d2d6:	4659      	mov	r1, fp
 800d2d8:	f7f2 ffd8 	bl	800028c <__adddf3>
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	4649      	mov	r1, r9
 800d2e4:	f7f3 fc18 	bl	8000b18 <__aeabi_dcmpgt>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d173      	bne.n	800d3d4 <_dtoa_r+0x6c4>
 800d2ec:	4652      	mov	r2, sl
 800d2ee:	465b      	mov	r3, fp
 800d2f0:	4913      	ldr	r1, [pc, #76]	; (800d340 <_dtoa_r+0x630>)
 800d2f2:	2000      	movs	r0, #0
 800d2f4:	f7f2 ffc8 	bl	8000288 <__aeabi_dsub>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	4640      	mov	r0, r8
 800d2fe:	4649      	mov	r1, r9
 800d300:	f7f3 fbec 	bl	8000adc <__aeabi_dcmplt>
 800d304:	2800      	cmp	r0, #0
 800d306:	f43f af35 	beq.w	800d174 <_dtoa_r+0x464>
 800d30a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d30c:	1e6b      	subs	r3, r5, #1
 800d30e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d310:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d314:	2b30      	cmp	r3, #48	; 0x30
 800d316:	d0f8      	beq.n	800d30a <_dtoa_r+0x5fa>
 800d318:	9700      	str	r7, [sp, #0]
 800d31a:	e049      	b.n	800d3b0 <_dtoa_r+0x6a0>
 800d31c:	4b05      	ldr	r3, [pc, #20]	; (800d334 <_dtoa_r+0x624>)
 800d31e:	f7f3 f96b 	bl	80005f8 <__aeabi_dmul>
 800d322:	4680      	mov	r8, r0
 800d324:	4689      	mov	r9, r1
 800d326:	e7bd      	b.n	800d2a4 <_dtoa_r+0x594>
 800d328:	0800fba0 	.word	0x0800fba0
 800d32c:	0800fb78 	.word	0x0800fb78
 800d330:	3ff00000 	.word	0x3ff00000
 800d334:	40240000 	.word	0x40240000
 800d338:	401c0000 	.word	0x401c0000
 800d33c:	40140000 	.word	0x40140000
 800d340:	3fe00000 	.word	0x3fe00000
 800d344:	9d01      	ldr	r5, [sp, #4]
 800d346:	4656      	mov	r6, sl
 800d348:	465f      	mov	r7, fp
 800d34a:	4642      	mov	r2, r8
 800d34c:	464b      	mov	r3, r9
 800d34e:	4630      	mov	r0, r6
 800d350:	4639      	mov	r1, r7
 800d352:	f7f3 fa7b 	bl	800084c <__aeabi_ddiv>
 800d356:	f7f3 fbff 	bl	8000b58 <__aeabi_d2iz>
 800d35a:	4682      	mov	sl, r0
 800d35c:	f7f3 f8e2 	bl	8000524 <__aeabi_i2d>
 800d360:	4642      	mov	r2, r8
 800d362:	464b      	mov	r3, r9
 800d364:	f7f3 f948 	bl	80005f8 <__aeabi_dmul>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	4630      	mov	r0, r6
 800d36e:	4639      	mov	r1, r7
 800d370:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d374:	f7f2 ff88 	bl	8000288 <__aeabi_dsub>
 800d378:	f805 6b01 	strb.w	r6, [r5], #1
 800d37c:	9e01      	ldr	r6, [sp, #4]
 800d37e:	9f03      	ldr	r7, [sp, #12]
 800d380:	1bae      	subs	r6, r5, r6
 800d382:	42b7      	cmp	r7, r6
 800d384:	4602      	mov	r2, r0
 800d386:	460b      	mov	r3, r1
 800d388:	d135      	bne.n	800d3f6 <_dtoa_r+0x6e6>
 800d38a:	f7f2 ff7f 	bl	800028c <__adddf3>
 800d38e:	4642      	mov	r2, r8
 800d390:	464b      	mov	r3, r9
 800d392:	4606      	mov	r6, r0
 800d394:	460f      	mov	r7, r1
 800d396:	f7f3 fbbf 	bl	8000b18 <__aeabi_dcmpgt>
 800d39a:	b9d0      	cbnz	r0, 800d3d2 <_dtoa_r+0x6c2>
 800d39c:	4642      	mov	r2, r8
 800d39e:	464b      	mov	r3, r9
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	4639      	mov	r1, r7
 800d3a4:	f7f3 fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3a8:	b110      	cbz	r0, 800d3b0 <_dtoa_r+0x6a0>
 800d3aa:	f01a 0f01 	tst.w	sl, #1
 800d3ae:	d110      	bne.n	800d3d2 <_dtoa_r+0x6c2>
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	ee18 1a10 	vmov	r1, s16
 800d3b6:	f000 ff47 	bl	800e248 <_Bfree>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	9800      	ldr	r0, [sp, #0]
 800d3be:	702b      	strb	r3, [r5, #0]
 800d3c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	6018      	str	r0, [r3, #0]
 800d3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	f43f acf1 	beq.w	800cdb0 <_dtoa_r+0xa0>
 800d3ce:	601d      	str	r5, [r3, #0]
 800d3d0:	e4ee      	b.n	800cdb0 <_dtoa_r+0xa0>
 800d3d2:	9f00      	ldr	r7, [sp, #0]
 800d3d4:	462b      	mov	r3, r5
 800d3d6:	461d      	mov	r5, r3
 800d3d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d3dc:	2a39      	cmp	r2, #57	; 0x39
 800d3de:	d106      	bne.n	800d3ee <_dtoa_r+0x6de>
 800d3e0:	9a01      	ldr	r2, [sp, #4]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d1f7      	bne.n	800d3d6 <_dtoa_r+0x6c6>
 800d3e6:	9901      	ldr	r1, [sp, #4]
 800d3e8:	2230      	movs	r2, #48	; 0x30
 800d3ea:	3701      	adds	r7, #1
 800d3ec:	700a      	strb	r2, [r1, #0]
 800d3ee:	781a      	ldrb	r2, [r3, #0]
 800d3f0:	3201      	adds	r2, #1
 800d3f2:	701a      	strb	r2, [r3, #0]
 800d3f4:	e790      	b.n	800d318 <_dtoa_r+0x608>
 800d3f6:	4ba6      	ldr	r3, [pc, #664]	; (800d690 <_dtoa_r+0x980>)
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f7f3 f8fd 	bl	80005f8 <__aeabi_dmul>
 800d3fe:	2200      	movs	r2, #0
 800d400:	2300      	movs	r3, #0
 800d402:	4606      	mov	r6, r0
 800d404:	460f      	mov	r7, r1
 800d406:	f7f3 fb5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d40a:	2800      	cmp	r0, #0
 800d40c:	d09d      	beq.n	800d34a <_dtoa_r+0x63a>
 800d40e:	e7cf      	b.n	800d3b0 <_dtoa_r+0x6a0>
 800d410:	9a08      	ldr	r2, [sp, #32]
 800d412:	2a00      	cmp	r2, #0
 800d414:	f000 80d7 	beq.w	800d5c6 <_dtoa_r+0x8b6>
 800d418:	9a06      	ldr	r2, [sp, #24]
 800d41a:	2a01      	cmp	r2, #1
 800d41c:	f300 80ba 	bgt.w	800d594 <_dtoa_r+0x884>
 800d420:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d422:	2a00      	cmp	r2, #0
 800d424:	f000 80b2 	beq.w	800d58c <_dtoa_r+0x87c>
 800d428:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d42c:	9e07      	ldr	r6, [sp, #28]
 800d42e:	9d04      	ldr	r5, [sp, #16]
 800d430:	9a04      	ldr	r2, [sp, #16]
 800d432:	441a      	add	r2, r3
 800d434:	9204      	str	r2, [sp, #16]
 800d436:	9a05      	ldr	r2, [sp, #20]
 800d438:	2101      	movs	r1, #1
 800d43a:	441a      	add	r2, r3
 800d43c:	4620      	mov	r0, r4
 800d43e:	9205      	str	r2, [sp, #20]
 800d440:	f001 f804 	bl	800e44c <__i2b>
 800d444:	4607      	mov	r7, r0
 800d446:	2d00      	cmp	r5, #0
 800d448:	dd0c      	ble.n	800d464 <_dtoa_r+0x754>
 800d44a:	9b05      	ldr	r3, [sp, #20]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	dd09      	ble.n	800d464 <_dtoa_r+0x754>
 800d450:	42ab      	cmp	r3, r5
 800d452:	9a04      	ldr	r2, [sp, #16]
 800d454:	bfa8      	it	ge
 800d456:	462b      	movge	r3, r5
 800d458:	1ad2      	subs	r2, r2, r3
 800d45a:	9204      	str	r2, [sp, #16]
 800d45c:	9a05      	ldr	r2, [sp, #20]
 800d45e:	1aed      	subs	r5, r5, r3
 800d460:	1ad3      	subs	r3, r2, r3
 800d462:	9305      	str	r3, [sp, #20]
 800d464:	9b07      	ldr	r3, [sp, #28]
 800d466:	b31b      	cbz	r3, 800d4b0 <_dtoa_r+0x7a0>
 800d468:	9b08      	ldr	r3, [sp, #32]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f000 80af 	beq.w	800d5ce <_dtoa_r+0x8be>
 800d470:	2e00      	cmp	r6, #0
 800d472:	dd13      	ble.n	800d49c <_dtoa_r+0x78c>
 800d474:	4639      	mov	r1, r7
 800d476:	4632      	mov	r2, r6
 800d478:	4620      	mov	r0, r4
 800d47a:	f001 f8a7 	bl	800e5cc <__pow5mult>
 800d47e:	ee18 2a10 	vmov	r2, s16
 800d482:	4601      	mov	r1, r0
 800d484:	4607      	mov	r7, r0
 800d486:	4620      	mov	r0, r4
 800d488:	f000 fff6 	bl	800e478 <__multiply>
 800d48c:	ee18 1a10 	vmov	r1, s16
 800d490:	4680      	mov	r8, r0
 800d492:	4620      	mov	r0, r4
 800d494:	f000 fed8 	bl	800e248 <_Bfree>
 800d498:	ee08 8a10 	vmov	s16, r8
 800d49c:	9b07      	ldr	r3, [sp, #28]
 800d49e:	1b9a      	subs	r2, r3, r6
 800d4a0:	d006      	beq.n	800d4b0 <_dtoa_r+0x7a0>
 800d4a2:	ee18 1a10 	vmov	r1, s16
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f001 f890 	bl	800e5cc <__pow5mult>
 800d4ac:	ee08 0a10 	vmov	s16, r0
 800d4b0:	2101      	movs	r1, #1
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f000 ffca 	bl	800e44c <__i2b>
 800d4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	4606      	mov	r6, r0
 800d4be:	f340 8088 	ble.w	800d5d2 <_dtoa_r+0x8c2>
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	4601      	mov	r1, r0
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f001 f880 	bl	800e5cc <__pow5mult>
 800d4cc:	9b06      	ldr	r3, [sp, #24]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	4606      	mov	r6, r0
 800d4d2:	f340 8081 	ble.w	800d5d8 <_dtoa_r+0x8c8>
 800d4d6:	f04f 0800 	mov.w	r8, #0
 800d4da:	6933      	ldr	r3, [r6, #16]
 800d4dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d4e0:	6918      	ldr	r0, [r3, #16]
 800d4e2:	f000 ff63 	bl	800e3ac <__hi0bits>
 800d4e6:	f1c0 0020 	rsb	r0, r0, #32
 800d4ea:	9b05      	ldr	r3, [sp, #20]
 800d4ec:	4418      	add	r0, r3
 800d4ee:	f010 001f 	ands.w	r0, r0, #31
 800d4f2:	f000 8092 	beq.w	800d61a <_dtoa_r+0x90a>
 800d4f6:	f1c0 0320 	rsb	r3, r0, #32
 800d4fa:	2b04      	cmp	r3, #4
 800d4fc:	f340 808a 	ble.w	800d614 <_dtoa_r+0x904>
 800d500:	f1c0 001c 	rsb	r0, r0, #28
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	4403      	add	r3, r0
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	9b05      	ldr	r3, [sp, #20]
 800d50c:	4403      	add	r3, r0
 800d50e:	4405      	add	r5, r0
 800d510:	9305      	str	r3, [sp, #20]
 800d512:	9b04      	ldr	r3, [sp, #16]
 800d514:	2b00      	cmp	r3, #0
 800d516:	dd07      	ble.n	800d528 <_dtoa_r+0x818>
 800d518:	ee18 1a10 	vmov	r1, s16
 800d51c:	461a      	mov	r2, r3
 800d51e:	4620      	mov	r0, r4
 800d520:	f001 f8ae 	bl	800e680 <__lshift>
 800d524:	ee08 0a10 	vmov	s16, r0
 800d528:	9b05      	ldr	r3, [sp, #20]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	dd05      	ble.n	800d53a <_dtoa_r+0x82a>
 800d52e:	4631      	mov	r1, r6
 800d530:	461a      	mov	r2, r3
 800d532:	4620      	mov	r0, r4
 800d534:	f001 f8a4 	bl	800e680 <__lshift>
 800d538:	4606      	mov	r6, r0
 800d53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d06e      	beq.n	800d61e <_dtoa_r+0x90e>
 800d540:	ee18 0a10 	vmov	r0, s16
 800d544:	4631      	mov	r1, r6
 800d546:	f001 f90b 	bl	800e760 <__mcmp>
 800d54a:	2800      	cmp	r0, #0
 800d54c:	da67      	bge.n	800d61e <_dtoa_r+0x90e>
 800d54e:	9b00      	ldr	r3, [sp, #0]
 800d550:	3b01      	subs	r3, #1
 800d552:	ee18 1a10 	vmov	r1, s16
 800d556:	9300      	str	r3, [sp, #0]
 800d558:	220a      	movs	r2, #10
 800d55a:	2300      	movs	r3, #0
 800d55c:	4620      	mov	r0, r4
 800d55e:	f000 fe95 	bl	800e28c <__multadd>
 800d562:	9b08      	ldr	r3, [sp, #32]
 800d564:	ee08 0a10 	vmov	s16, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 81b1 	beq.w	800d8d0 <_dtoa_r+0xbc0>
 800d56e:	2300      	movs	r3, #0
 800d570:	4639      	mov	r1, r7
 800d572:	220a      	movs	r2, #10
 800d574:	4620      	mov	r0, r4
 800d576:	f000 fe89 	bl	800e28c <__multadd>
 800d57a:	9b02      	ldr	r3, [sp, #8]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	4607      	mov	r7, r0
 800d580:	f300 808e 	bgt.w	800d6a0 <_dtoa_r+0x990>
 800d584:	9b06      	ldr	r3, [sp, #24]
 800d586:	2b02      	cmp	r3, #2
 800d588:	dc51      	bgt.n	800d62e <_dtoa_r+0x91e>
 800d58a:	e089      	b.n	800d6a0 <_dtoa_r+0x990>
 800d58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d58e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d592:	e74b      	b.n	800d42c <_dtoa_r+0x71c>
 800d594:	9b03      	ldr	r3, [sp, #12]
 800d596:	1e5e      	subs	r6, r3, #1
 800d598:	9b07      	ldr	r3, [sp, #28]
 800d59a:	42b3      	cmp	r3, r6
 800d59c:	bfbf      	itttt	lt
 800d59e:	9b07      	ldrlt	r3, [sp, #28]
 800d5a0:	9607      	strlt	r6, [sp, #28]
 800d5a2:	1af2      	sublt	r2, r6, r3
 800d5a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d5a6:	bfb6      	itet	lt
 800d5a8:	189b      	addlt	r3, r3, r2
 800d5aa:	1b9e      	subge	r6, r3, r6
 800d5ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	bfb8      	it	lt
 800d5b2:	2600      	movlt	r6, #0
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	bfb7      	itett	lt
 800d5b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d5bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d5c0:	1a9d      	sublt	r5, r3, r2
 800d5c2:	2300      	movlt	r3, #0
 800d5c4:	e734      	b.n	800d430 <_dtoa_r+0x720>
 800d5c6:	9e07      	ldr	r6, [sp, #28]
 800d5c8:	9d04      	ldr	r5, [sp, #16]
 800d5ca:	9f08      	ldr	r7, [sp, #32]
 800d5cc:	e73b      	b.n	800d446 <_dtoa_r+0x736>
 800d5ce:	9a07      	ldr	r2, [sp, #28]
 800d5d0:	e767      	b.n	800d4a2 <_dtoa_r+0x792>
 800d5d2:	9b06      	ldr	r3, [sp, #24]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	dc18      	bgt.n	800d60a <_dtoa_r+0x8fa>
 800d5d8:	f1ba 0f00 	cmp.w	sl, #0
 800d5dc:	d115      	bne.n	800d60a <_dtoa_r+0x8fa>
 800d5de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5e2:	b993      	cbnz	r3, 800d60a <_dtoa_r+0x8fa>
 800d5e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d5e8:	0d1b      	lsrs	r3, r3, #20
 800d5ea:	051b      	lsls	r3, r3, #20
 800d5ec:	b183      	cbz	r3, 800d610 <_dtoa_r+0x900>
 800d5ee:	9b04      	ldr	r3, [sp, #16]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	9304      	str	r3, [sp, #16]
 800d5f4:	9b05      	ldr	r3, [sp, #20]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	9305      	str	r3, [sp, #20]
 800d5fa:	f04f 0801 	mov.w	r8, #1
 800d5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d600:	2b00      	cmp	r3, #0
 800d602:	f47f af6a 	bne.w	800d4da <_dtoa_r+0x7ca>
 800d606:	2001      	movs	r0, #1
 800d608:	e76f      	b.n	800d4ea <_dtoa_r+0x7da>
 800d60a:	f04f 0800 	mov.w	r8, #0
 800d60e:	e7f6      	b.n	800d5fe <_dtoa_r+0x8ee>
 800d610:	4698      	mov	r8, r3
 800d612:	e7f4      	b.n	800d5fe <_dtoa_r+0x8ee>
 800d614:	f43f af7d 	beq.w	800d512 <_dtoa_r+0x802>
 800d618:	4618      	mov	r0, r3
 800d61a:	301c      	adds	r0, #28
 800d61c:	e772      	b.n	800d504 <_dtoa_r+0x7f4>
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	2b00      	cmp	r3, #0
 800d622:	dc37      	bgt.n	800d694 <_dtoa_r+0x984>
 800d624:	9b06      	ldr	r3, [sp, #24]
 800d626:	2b02      	cmp	r3, #2
 800d628:	dd34      	ble.n	800d694 <_dtoa_r+0x984>
 800d62a:	9b03      	ldr	r3, [sp, #12]
 800d62c:	9302      	str	r3, [sp, #8]
 800d62e:	9b02      	ldr	r3, [sp, #8]
 800d630:	b96b      	cbnz	r3, 800d64e <_dtoa_r+0x93e>
 800d632:	4631      	mov	r1, r6
 800d634:	2205      	movs	r2, #5
 800d636:	4620      	mov	r0, r4
 800d638:	f000 fe28 	bl	800e28c <__multadd>
 800d63c:	4601      	mov	r1, r0
 800d63e:	4606      	mov	r6, r0
 800d640:	ee18 0a10 	vmov	r0, s16
 800d644:	f001 f88c 	bl	800e760 <__mcmp>
 800d648:	2800      	cmp	r0, #0
 800d64a:	f73f adbb 	bgt.w	800d1c4 <_dtoa_r+0x4b4>
 800d64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d650:	9d01      	ldr	r5, [sp, #4]
 800d652:	43db      	mvns	r3, r3
 800d654:	9300      	str	r3, [sp, #0]
 800d656:	f04f 0800 	mov.w	r8, #0
 800d65a:	4631      	mov	r1, r6
 800d65c:	4620      	mov	r0, r4
 800d65e:	f000 fdf3 	bl	800e248 <_Bfree>
 800d662:	2f00      	cmp	r7, #0
 800d664:	f43f aea4 	beq.w	800d3b0 <_dtoa_r+0x6a0>
 800d668:	f1b8 0f00 	cmp.w	r8, #0
 800d66c:	d005      	beq.n	800d67a <_dtoa_r+0x96a>
 800d66e:	45b8      	cmp	r8, r7
 800d670:	d003      	beq.n	800d67a <_dtoa_r+0x96a>
 800d672:	4641      	mov	r1, r8
 800d674:	4620      	mov	r0, r4
 800d676:	f000 fde7 	bl	800e248 <_Bfree>
 800d67a:	4639      	mov	r1, r7
 800d67c:	4620      	mov	r0, r4
 800d67e:	f000 fde3 	bl	800e248 <_Bfree>
 800d682:	e695      	b.n	800d3b0 <_dtoa_r+0x6a0>
 800d684:	2600      	movs	r6, #0
 800d686:	4637      	mov	r7, r6
 800d688:	e7e1      	b.n	800d64e <_dtoa_r+0x93e>
 800d68a:	9700      	str	r7, [sp, #0]
 800d68c:	4637      	mov	r7, r6
 800d68e:	e599      	b.n	800d1c4 <_dtoa_r+0x4b4>
 800d690:	40240000 	.word	0x40240000
 800d694:	9b08      	ldr	r3, [sp, #32]
 800d696:	2b00      	cmp	r3, #0
 800d698:	f000 80ca 	beq.w	800d830 <_dtoa_r+0xb20>
 800d69c:	9b03      	ldr	r3, [sp, #12]
 800d69e:	9302      	str	r3, [sp, #8]
 800d6a0:	2d00      	cmp	r5, #0
 800d6a2:	dd05      	ble.n	800d6b0 <_dtoa_r+0x9a0>
 800d6a4:	4639      	mov	r1, r7
 800d6a6:	462a      	mov	r2, r5
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f000 ffe9 	bl	800e680 <__lshift>
 800d6ae:	4607      	mov	r7, r0
 800d6b0:	f1b8 0f00 	cmp.w	r8, #0
 800d6b4:	d05b      	beq.n	800d76e <_dtoa_r+0xa5e>
 800d6b6:	6879      	ldr	r1, [r7, #4]
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f000 fd85 	bl	800e1c8 <_Balloc>
 800d6be:	4605      	mov	r5, r0
 800d6c0:	b928      	cbnz	r0, 800d6ce <_dtoa_r+0x9be>
 800d6c2:	4b87      	ldr	r3, [pc, #540]	; (800d8e0 <_dtoa_r+0xbd0>)
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d6ca:	f7ff bb3b 	b.w	800cd44 <_dtoa_r+0x34>
 800d6ce:	693a      	ldr	r2, [r7, #16]
 800d6d0:	3202      	adds	r2, #2
 800d6d2:	0092      	lsls	r2, r2, #2
 800d6d4:	f107 010c 	add.w	r1, r7, #12
 800d6d8:	300c      	adds	r0, #12
 800d6da:	f7fd fbb4 	bl	800ae46 <memcpy>
 800d6de:	2201      	movs	r2, #1
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f000 ffcc 	bl	800e680 <__lshift>
 800d6e8:	9b01      	ldr	r3, [sp, #4]
 800d6ea:	f103 0901 	add.w	r9, r3, #1
 800d6ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d6f2:	4413      	add	r3, r2
 800d6f4:	9305      	str	r3, [sp, #20]
 800d6f6:	f00a 0301 	and.w	r3, sl, #1
 800d6fa:	46b8      	mov	r8, r7
 800d6fc:	9304      	str	r3, [sp, #16]
 800d6fe:	4607      	mov	r7, r0
 800d700:	4631      	mov	r1, r6
 800d702:	ee18 0a10 	vmov	r0, s16
 800d706:	f7ff fa75 	bl	800cbf4 <quorem>
 800d70a:	4641      	mov	r1, r8
 800d70c:	9002      	str	r0, [sp, #8]
 800d70e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d712:	ee18 0a10 	vmov	r0, s16
 800d716:	f001 f823 	bl	800e760 <__mcmp>
 800d71a:	463a      	mov	r2, r7
 800d71c:	9003      	str	r0, [sp, #12]
 800d71e:	4631      	mov	r1, r6
 800d720:	4620      	mov	r0, r4
 800d722:	f001 f839 	bl	800e798 <__mdiff>
 800d726:	68c2      	ldr	r2, [r0, #12]
 800d728:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800d72c:	4605      	mov	r5, r0
 800d72e:	bb02      	cbnz	r2, 800d772 <_dtoa_r+0xa62>
 800d730:	4601      	mov	r1, r0
 800d732:	ee18 0a10 	vmov	r0, s16
 800d736:	f001 f813 	bl	800e760 <__mcmp>
 800d73a:	4602      	mov	r2, r0
 800d73c:	4629      	mov	r1, r5
 800d73e:	4620      	mov	r0, r4
 800d740:	9207      	str	r2, [sp, #28]
 800d742:	f000 fd81 	bl	800e248 <_Bfree>
 800d746:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d74a:	ea43 0102 	orr.w	r1, r3, r2
 800d74e:	9b04      	ldr	r3, [sp, #16]
 800d750:	430b      	orrs	r3, r1
 800d752:	464d      	mov	r5, r9
 800d754:	d10f      	bne.n	800d776 <_dtoa_r+0xa66>
 800d756:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d75a:	d02a      	beq.n	800d7b2 <_dtoa_r+0xaa2>
 800d75c:	9b03      	ldr	r3, [sp, #12]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	dd02      	ble.n	800d768 <_dtoa_r+0xa58>
 800d762:	9b02      	ldr	r3, [sp, #8]
 800d764:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d768:	f88b a000 	strb.w	sl, [fp]
 800d76c:	e775      	b.n	800d65a <_dtoa_r+0x94a>
 800d76e:	4638      	mov	r0, r7
 800d770:	e7ba      	b.n	800d6e8 <_dtoa_r+0x9d8>
 800d772:	2201      	movs	r2, #1
 800d774:	e7e2      	b.n	800d73c <_dtoa_r+0xa2c>
 800d776:	9b03      	ldr	r3, [sp, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	db04      	blt.n	800d786 <_dtoa_r+0xa76>
 800d77c:	9906      	ldr	r1, [sp, #24]
 800d77e:	430b      	orrs	r3, r1
 800d780:	9904      	ldr	r1, [sp, #16]
 800d782:	430b      	orrs	r3, r1
 800d784:	d122      	bne.n	800d7cc <_dtoa_r+0xabc>
 800d786:	2a00      	cmp	r2, #0
 800d788:	ddee      	ble.n	800d768 <_dtoa_r+0xa58>
 800d78a:	ee18 1a10 	vmov	r1, s16
 800d78e:	2201      	movs	r2, #1
 800d790:	4620      	mov	r0, r4
 800d792:	f000 ff75 	bl	800e680 <__lshift>
 800d796:	4631      	mov	r1, r6
 800d798:	ee08 0a10 	vmov	s16, r0
 800d79c:	f000 ffe0 	bl	800e760 <__mcmp>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	dc03      	bgt.n	800d7ac <_dtoa_r+0xa9c>
 800d7a4:	d1e0      	bne.n	800d768 <_dtoa_r+0xa58>
 800d7a6:	f01a 0f01 	tst.w	sl, #1
 800d7aa:	d0dd      	beq.n	800d768 <_dtoa_r+0xa58>
 800d7ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d7b0:	d1d7      	bne.n	800d762 <_dtoa_r+0xa52>
 800d7b2:	2339      	movs	r3, #57	; 0x39
 800d7b4:	f88b 3000 	strb.w	r3, [fp]
 800d7b8:	462b      	mov	r3, r5
 800d7ba:	461d      	mov	r5, r3
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d7c2:	2a39      	cmp	r2, #57	; 0x39
 800d7c4:	d071      	beq.n	800d8aa <_dtoa_r+0xb9a>
 800d7c6:	3201      	adds	r2, #1
 800d7c8:	701a      	strb	r2, [r3, #0]
 800d7ca:	e746      	b.n	800d65a <_dtoa_r+0x94a>
 800d7cc:	2a00      	cmp	r2, #0
 800d7ce:	dd07      	ble.n	800d7e0 <_dtoa_r+0xad0>
 800d7d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d7d4:	d0ed      	beq.n	800d7b2 <_dtoa_r+0xaa2>
 800d7d6:	f10a 0301 	add.w	r3, sl, #1
 800d7da:	f88b 3000 	strb.w	r3, [fp]
 800d7de:	e73c      	b.n	800d65a <_dtoa_r+0x94a>
 800d7e0:	9b05      	ldr	r3, [sp, #20]
 800d7e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d7e6:	4599      	cmp	r9, r3
 800d7e8:	d047      	beq.n	800d87a <_dtoa_r+0xb6a>
 800d7ea:	ee18 1a10 	vmov	r1, s16
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	220a      	movs	r2, #10
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f000 fd4a 	bl	800e28c <__multadd>
 800d7f8:	45b8      	cmp	r8, r7
 800d7fa:	ee08 0a10 	vmov	s16, r0
 800d7fe:	f04f 0300 	mov.w	r3, #0
 800d802:	f04f 020a 	mov.w	r2, #10
 800d806:	4641      	mov	r1, r8
 800d808:	4620      	mov	r0, r4
 800d80a:	d106      	bne.n	800d81a <_dtoa_r+0xb0a>
 800d80c:	f000 fd3e 	bl	800e28c <__multadd>
 800d810:	4680      	mov	r8, r0
 800d812:	4607      	mov	r7, r0
 800d814:	f109 0901 	add.w	r9, r9, #1
 800d818:	e772      	b.n	800d700 <_dtoa_r+0x9f0>
 800d81a:	f000 fd37 	bl	800e28c <__multadd>
 800d81e:	4639      	mov	r1, r7
 800d820:	4680      	mov	r8, r0
 800d822:	2300      	movs	r3, #0
 800d824:	220a      	movs	r2, #10
 800d826:	4620      	mov	r0, r4
 800d828:	f000 fd30 	bl	800e28c <__multadd>
 800d82c:	4607      	mov	r7, r0
 800d82e:	e7f1      	b.n	800d814 <_dtoa_r+0xb04>
 800d830:	9b03      	ldr	r3, [sp, #12]
 800d832:	9302      	str	r3, [sp, #8]
 800d834:	9d01      	ldr	r5, [sp, #4]
 800d836:	ee18 0a10 	vmov	r0, s16
 800d83a:	4631      	mov	r1, r6
 800d83c:	f7ff f9da 	bl	800cbf4 <quorem>
 800d840:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d844:	9b01      	ldr	r3, [sp, #4]
 800d846:	f805 ab01 	strb.w	sl, [r5], #1
 800d84a:	1aea      	subs	r2, r5, r3
 800d84c:	9b02      	ldr	r3, [sp, #8]
 800d84e:	4293      	cmp	r3, r2
 800d850:	dd09      	ble.n	800d866 <_dtoa_r+0xb56>
 800d852:	ee18 1a10 	vmov	r1, s16
 800d856:	2300      	movs	r3, #0
 800d858:	220a      	movs	r2, #10
 800d85a:	4620      	mov	r0, r4
 800d85c:	f000 fd16 	bl	800e28c <__multadd>
 800d860:	ee08 0a10 	vmov	s16, r0
 800d864:	e7e7      	b.n	800d836 <_dtoa_r+0xb26>
 800d866:	9b02      	ldr	r3, [sp, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	bfc8      	it	gt
 800d86c:	461d      	movgt	r5, r3
 800d86e:	9b01      	ldr	r3, [sp, #4]
 800d870:	bfd8      	it	le
 800d872:	2501      	movle	r5, #1
 800d874:	441d      	add	r5, r3
 800d876:	f04f 0800 	mov.w	r8, #0
 800d87a:	ee18 1a10 	vmov	r1, s16
 800d87e:	2201      	movs	r2, #1
 800d880:	4620      	mov	r0, r4
 800d882:	f000 fefd 	bl	800e680 <__lshift>
 800d886:	4631      	mov	r1, r6
 800d888:	ee08 0a10 	vmov	s16, r0
 800d88c:	f000 ff68 	bl	800e760 <__mcmp>
 800d890:	2800      	cmp	r0, #0
 800d892:	dc91      	bgt.n	800d7b8 <_dtoa_r+0xaa8>
 800d894:	d102      	bne.n	800d89c <_dtoa_r+0xb8c>
 800d896:	f01a 0f01 	tst.w	sl, #1
 800d89a:	d18d      	bne.n	800d7b8 <_dtoa_r+0xaa8>
 800d89c:	462b      	mov	r3, r5
 800d89e:	461d      	mov	r5, r3
 800d8a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d8a4:	2a30      	cmp	r2, #48	; 0x30
 800d8a6:	d0fa      	beq.n	800d89e <_dtoa_r+0xb8e>
 800d8a8:	e6d7      	b.n	800d65a <_dtoa_r+0x94a>
 800d8aa:	9a01      	ldr	r2, [sp, #4]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d184      	bne.n	800d7ba <_dtoa_r+0xaaa>
 800d8b0:	9b00      	ldr	r3, [sp, #0]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	2331      	movs	r3, #49	; 0x31
 800d8b8:	7013      	strb	r3, [r2, #0]
 800d8ba:	e6ce      	b.n	800d65a <_dtoa_r+0x94a>
 800d8bc:	4b09      	ldr	r3, [pc, #36]	; (800d8e4 <_dtoa_r+0xbd4>)
 800d8be:	f7ff ba95 	b.w	800cdec <_dtoa_r+0xdc>
 800d8c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	f47f aa6e 	bne.w	800cda6 <_dtoa_r+0x96>
 800d8ca:	4b07      	ldr	r3, [pc, #28]	; (800d8e8 <_dtoa_r+0xbd8>)
 800d8cc:	f7ff ba8e 	b.w	800cdec <_dtoa_r+0xdc>
 800d8d0:	9b02      	ldr	r3, [sp, #8]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	dcae      	bgt.n	800d834 <_dtoa_r+0xb24>
 800d8d6:	9b06      	ldr	r3, [sp, #24]
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	f73f aea8 	bgt.w	800d62e <_dtoa_r+0x91e>
 800d8de:	e7a9      	b.n	800d834 <_dtoa_r+0xb24>
 800d8e0:	0800fa90 	.word	0x0800fa90
 800d8e4:	0800f890 	.word	0x0800f890
 800d8e8:	0800fa11 	.word	0x0800fa11

0800d8ec <__sflush_r>:
 800d8ec:	898a      	ldrh	r2, [r1, #12]
 800d8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	0710      	lsls	r0, r2, #28
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	d458      	bmi.n	800d9ac <__sflush_r+0xc0>
 800d8fa:	684b      	ldr	r3, [r1, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	dc05      	bgt.n	800d90c <__sflush_r+0x20>
 800d900:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d902:	2b00      	cmp	r3, #0
 800d904:	dc02      	bgt.n	800d90c <__sflush_r+0x20>
 800d906:	2000      	movs	r0, #0
 800d908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d90c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d90e:	2e00      	cmp	r6, #0
 800d910:	d0f9      	beq.n	800d906 <__sflush_r+0x1a>
 800d912:	2300      	movs	r3, #0
 800d914:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d918:	682f      	ldr	r7, [r5, #0]
 800d91a:	602b      	str	r3, [r5, #0]
 800d91c:	d032      	beq.n	800d984 <__sflush_r+0x98>
 800d91e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d920:	89a3      	ldrh	r3, [r4, #12]
 800d922:	075a      	lsls	r2, r3, #29
 800d924:	d505      	bpl.n	800d932 <__sflush_r+0x46>
 800d926:	6863      	ldr	r3, [r4, #4]
 800d928:	1ac0      	subs	r0, r0, r3
 800d92a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d92c:	b10b      	cbz	r3, 800d932 <__sflush_r+0x46>
 800d92e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d930:	1ac0      	subs	r0, r0, r3
 800d932:	2300      	movs	r3, #0
 800d934:	4602      	mov	r2, r0
 800d936:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d938:	6a21      	ldr	r1, [r4, #32]
 800d93a:	4628      	mov	r0, r5
 800d93c:	47b0      	blx	r6
 800d93e:	1c43      	adds	r3, r0, #1
 800d940:	89a3      	ldrh	r3, [r4, #12]
 800d942:	d106      	bne.n	800d952 <__sflush_r+0x66>
 800d944:	6829      	ldr	r1, [r5, #0]
 800d946:	291d      	cmp	r1, #29
 800d948:	d82c      	bhi.n	800d9a4 <__sflush_r+0xb8>
 800d94a:	4a2a      	ldr	r2, [pc, #168]	; (800d9f4 <__sflush_r+0x108>)
 800d94c:	40ca      	lsrs	r2, r1
 800d94e:	07d6      	lsls	r6, r2, #31
 800d950:	d528      	bpl.n	800d9a4 <__sflush_r+0xb8>
 800d952:	2200      	movs	r2, #0
 800d954:	6062      	str	r2, [r4, #4]
 800d956:	04d9      	lsls	r1, r3, #19
 800d958:	6922      	ldr	r2, [r4, #16]
 800d95a:	6022      	str	r2, [r4, #0]
 800d95c:	d504      	bpl.n	800d968 <__sflush_r+0x7c>
 800d95e:	1c42      	adds	r2, r0, #1
 800d960:	d101      	bne.n	800d966 <__sflush_r+0x7a>
 800d962:	682b      	ldr	r3, [r5, #0]
 800d964:	b903      	cbnz	r3, 800d968 <__sflush_r+0x7c>
 800d966:	6560      	str	r0, [r4, #84]	; 0x54
 800d968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d96a:	602f      	str	r7, [r5, #0]
 800d96c:	2900      	cmp	r1, #0
 800d96e:	d0ca      	beq.n	800d906 <__sflush_r+0x1a>
 800d970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d974:	4299      	cmp	r1, r3
 800d976:	d002      	beq.n	800d97e <__sflush_r+0x92>
 800d978:	4628      	mov	r0, r5
 800d97a:	f001 f8fd 	bl	800eb78 <_free_r>
 800d97e:	2000      	movs	r0, #0
 800d980:	6360      	str	r0, [r4, #52]	; 0x34
 800d982:	e7c1      	b.n	800d908 <__sflush_r+0x1c>
 800d984:	6a21      	ldr	r1, [r4, #32]
 800d986:	2301      	movs	r3, #1
 800d988:	4628      	mov	r0, r5
 800d98a:	47b0      	blx	r6
 800d98c:	1c41      	adds	r1, r0, #1
 800d98e:	d1c7      	bne.n	800d920 <__sflush_r+0x34>
 800d990:	682b      	ldr	r3, [r5, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d0c4      	beq.n	800d920 <__sflush_r+0x34>
 800d996:	2b1d      	cmp	r3, #29
 800d998:	d001      	beq.n	800d99e <__sflush_r+0xb2>
 800d99a:	2b16      	cmp	r3, #22
 800d99c:	d101      	bne.n	800d9a2 <__sflush_r+0xb6>
 800d99e:	602f      	str	r7, [r5, #0]
 800d9a0:	e7b1      	b.n	800d906 <__sflush_r+0x1a>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9a8:	81a3      	strh	r3, [r4, #12]
 800d9aa:	e7ad      	b.n	800d908 <__sflush_r+0x1c>
 800d9ac:	690f      	ldr	r7, [r1, #16]
 800d9ae:	2f00      	cmp	r7, #0
 800d9b0:	d0a9      	beq.n	800d906 <__sflush_r+0x1a>
 800d9b2:	0793      	lsls	r3, r2, #30
 800d9b4:	680e      	ldr	r6, [r1, #0]
 800d9b6:	bf08      	it	eq
 800d9b8:	694b      	ldreq	r3, [r1, #20]
 800d9ba:	600f      	str	r7, [r1, #0]
 800d9bc:	bf18      	it	ne
 800d9be:	2300      	movne	r3, #0
 800d9c0:	eba6 0807 	sub.w	r8, r6, r7
 800d9c4:	608b      	str	r3, [r1, #8]
 800d9c6:	f1b8 0f00 	cmp.w	r8, #0
 800d9ca:	dd9c      	ble.n	800d906 <__sflush_r+0x1a>
 800d9cc:	6a21      	ldr	r1, [r4, #32]
 800d9ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9d0:	4643      	mov	r3, r8
 800d9d2:	463a      	mov	r2, r7
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	47b0      	blx	r6
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	dc06      	bgt.n	800d9ea <__sflush_r+0xfe>
 800d9dc:	89a3      	ldrh	r3, [r4, #12]
 800d9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9e2:	81a3      	strh	r3, [r4, #12]
 800d9e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9e8:	e78e      	b.n	800d908 <__sflush_r+0x1c>
 800d9ea:	4407      	add	r7, r0
 800d9ec:	eba8 0800 	sub.w	r8, r8, r0
 800d9f0:	e7e9      	b.n	800d9c6 <__sflush_r+0xda>
 800d9f2:	bf00      	nop
 800d9f4:	20400001 	.word	0x20400001

0800d9f8 <_fflush_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	690b      	ldr	r3, [r1, #16]
 800d9fc:	4605      	mov	r5, r0
 800d9fe:	460c      	mov	r4, r1
 800da00:	b913      	cbnz	r3, 800da08 <_fflush_r+0x10>
 800da02:	2500      	movs	r5, #0
 800da04:	4628      	mov	r0, r5
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	b118      	cbz	r0, 800da12 <_fflush_r+0x1a>
 800da0a:	6983      	ldr	r3, [r0, #24]
 800da0c:	b90b      	cbnz	r3, 800da12 <_fflush_r+0x1a>
 800da0e:	f7fd f955 	bl	800acbc <__sinit>
 800da12:	4b14      	ldr	r3, [pc, #80]	; (800da64 <_fflush_r+0x6c>)
 800da14:	429c      	cmp	r4, r3
 800da16:	d11b      	bne.n	800da50 <_fflush_r+0x58>
 800da18:	686c      	ldr	r4, [r5, #4]
 800da1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d0ef      	beq.n	800da02 <_fflush_r+0xa>
 800da22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da24:	07d0      	lsls	r0, r2, #31
 800da26:	d404      	bmi.n	800da32 <_fflush_r+0x3a>
 800da28:	0599      	lsls	r1, r3, #22
 800da2a:	d402      	bmi.n	800da32 <_fflush_r+0x3a>
 800da2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da2e:	f7fd fa08 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800da32:	4628      	mov	r0, r5
 800da34:	4621      	mov	r1, r4
 800da36:	f7ff ff59 	bl	800d8ec <__sflush_r>
 800da3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da3c:	07da      	lsls	r2, r3, #31
 800da3e:	4605      	mov	r5, r0
 800da40:	d4e0      	bmi.n	800da04 <_fflush_r+0xc>
 800da42:	89a3      	ldrh	r3, [r4, #12]
 800da44:	059b      	lsls	r3, r3, #22
 800da46:	d4dd      	bmi.n	800da04 <_fflush_r+0xc>
 800da48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da4a:	f7fd f9fb 	bl	800ae44 <__retarget_lock_release_recursive>
 800da4e:	e7d9      	b.n	800da04 <_fflush_r+0xc>
 800da50:	4b05      	ldr	r3, [pc, #20]	; (800da68 <_fflush_r+0x70>)
 800da52:	429c      	cmp	r4, r3
 800da54:	d101      	bne.n	800da5a <_fflush_r+0x62>
 800da56:	68ac      	ldr	r4, [r5, #8]
 800da58:	e7df      	b.n	800da1a <_fflush_r+0x22>
 800da5a:	4b04      	ldr	r3, [pc, #16]	; (800da6c <_fflush_r+0x74>)
 800da5c:	429c      	cmp	r4, r3
 800da5e:	bf08      	it	eq
 800da60:	68ec      	ldreq	r4, [r5, #12]
 800da62:	e7da      	b.n	800da1a <_fflush_r+0x22>
 800da64:	0800f83c 	.word	0x0800f83c
 800da68:	0800f85c 	.word	0x0800f85c
 800da6c:	0800f81c 	.word	0x0800f81c

0800da70 <rshift>:
 800da70:	6903      	ldr	r3, [r0, #16]
 800da72:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da7a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da7e:	f100 0414 	add.w	r4, r0, #20
 800da82:	dd45      	ble.n	800db10 <rshift+0xa0>
 800da84:	f011 011f 	ands.w	r1, r1, #31
 800da88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da90:	d10c      	bne.n	800daac <rshift+0x3c>
 800da92:	f100 0710 	add.w	r7, r0, #16
 800da96:	4629      	mov	r1, r5
 800da98:	42b1      	cmp	r1, r6
 800da9a:	d334      	bcc.n	800db06 <rshift+0x96>
 800da9c:	1a9b      	subs	r3, r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	1eea      	subs	r2, r5, #3
 800daa2:	4296      	cmp	r6, r2
 800daa4:	bf38      	it	cc
 800daa6:	2300      	movcc	r3, #0
 800daa8:	4423      	add	r3, r4
 800daaa:	e015      	b.n	800dad8 <rshift+0x68>
 800daac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dab0:	f1c1 0820 	rsb	r8, r1, #32
 800dab4:	40cf      	lsrs	r7, r1
 800dab6:	f105 0e04 	add.w	lr, r5, #4
 800daba:	46a1      	mov	r9, r4
 800dabc:	4576      	cmp	r6, lr
 800dabe:	46f4      	mov	ip, lr
 800dac0:	d815      	bhi.n	800daee <rshift+0x7e>
 800dac2:	1a9a      	subs	r2, r3, r2
 800dac4:	0092      	lsls	r2, r2, #2
 800dac6:	3a04      	subs	r2, #4
 800dac8:	3501      	adds	r5, #1
 800daca:	42ae      	cmp	r6, r5
 800dacc:	bf38      	it	cc
 800dace:	2200      	movcc	r2, #0
 800dad0:	18a3      	adds	r3, r4, r2
 800dad2:	50a7      	str	r7, [r4, r2]
 800dad4:	b107      	cbz	r7, 800dad8 <rshift+0x68>
 800dad6:	3304      	adds	r3, #4
 800dad8:	1b1a      	subs	r2, r3, r4
 800dada:	42a3      	cmp	r3, r4
 800dadc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dae0:	bf08      	it	eq
 800dae2:	2300      	moveq	r3, #0
 800dae4:	6102      	str	r2, [r0, #16]
 800dae6:	bf08      	it	eq
 800dae8:	6143      	streq	r3, [r0, #20]
 800daea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daee:	f8dc c000 	ldr.w	ip, [ip]
 800daf2:	fa0c fc08 	lsl.w	ip, ip, r8
 800daf6:	ea4c 0707 	orr.w	r7, ip, r7
 800dafa:	f849 7b04 	str.w	r7, [r9], #4
 800dafe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800db02:	40cf      	lsrs	r7, r1
 800db04:	e7da      	b.n	800dabc <rshift+0x4c>
 800db06:	f851 cb04 	ldr.w	ip, [r1], #4
 800db0a:	f847 cf04 	str.w	ip, [r7, #4]!
 800db0e:	e7c3      	b.n	800da98 <rshift+0x28>
 800db10:	4623      	mov	r3, r4
 800db12:	e7e1      	b.n	800dad8 <rshift+0x68>

0800db14 <__hexdig_fun>:
 800db14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800db18:	2b09      	cmp	r3, #9
 800db1a:	d802      	bhi.n	800db22 <__hexdig_fun+0xe>
 800db1c:	3820      	subs	r0, #32
 800db1e:	b2c0      	uxtb	r0, r0
 800db20:	4770      	bx	lr
 800db22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800db26:	2b05      	cmp	r3, #5
 800db28:	d801      	bhi.n	800db2e <__hexdig_fun+0x1a>
 800db2a:	3847      	subs	r0, #71	; 0x47
 800db2c:	e7f7      	b.n	800db1e <__hexdig_fun+0xa>
 800db2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800db32:	2b05      	cmp	r3, #5
 800db34:	d801      	bhi.n	800db3a <__hexdig_fun+0x26>
 800db36:	3827      	subs	r0, #39	; 0x27
 800db38:	e7f1      	b.n	800db1e <__hexdig_fun+0xa>
 800db3a:	2000      	movs	r0, #0
 800db3c:	4770      	bx	lr
	...

0800db40 <__gethex>:
 800db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	ed2d 8b02 	vpush	{d8}
 800db48:	b089      	sub	sp, #36	; 0x24
 800db4a:	ee08 0a10 	vmov	s16, r0
 800db4e:	9304      	str	r3, [sp, #16]
 800db50:	4bb4      	ldr	r3, [pc, #720]	; (800de24 <__gethex+0x2e4>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	9301      	str	r3, [sp, #4]
 800db56:	4618      	mov	r0, r3
 800db58:	468b      	mov	fp, r1
 800db5a:	4690      	mov	r8, r2
 800db5c:	f7f2 fb38 	bl	80001d0 <strlen>
 800db60:	9b01      	ldr	r3, [sp, #4]
 800db62:	f8db 2000 	ldr.w	r2, [fp]
 800db66:	4403      	add	r3, r0
 800db68:	4682      	mov	sl, r0
 800db6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800db6e:	9305      	str	r3, [sp, #20]
 800db70:	1c93      	adds	r3, r2, #2
 800db72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800db76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800db7a:	32fe      	adds	r2, #254	; 0xfe
 800db7c:	18d1      	adds	r1, r2, r3
 800db7e:	461f      	mov	r7, r3
 800db80:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db84:	9100      	str	r1, [sp, #0]
 800db86:	2830      	cmp	r0, #48	; 0x30
 800db88:	d0f8      	beq.n	800db7c <__gethex+0x3c>
 800db8a:	f7ff ffc3 	bl	800db14 <__hexdig_fun>
 800db8e:	4604      	mov	r4, r0
 800db90:	2800      	cmp	r0, #0
 800db92:	d13a      	bne.n	800dc0a <__gethex+0xca>
 800db94:	9901      	ldr	r1, [sp, #4]
 800db96:	4652      	mov	r2, sl
 800db98:	4638      	mov	r0, r7
 800db9a:	f001 f9b1 	bl	800ef00 <strncmp>
 800db9e:	4605      	mov	r5, r0
 800dba0:	2800      	cmp	r0, #0
 800dba2:	d168      	bne.n	800dc76 <__gethex+0x136>
 800dba4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dba8:	eb07 060a 	add.w	r6, r7, sl
 800dbac:	f7ff ffb2 	bl	800db14 <__hexdig_fun>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d062      	beq.n	800dc7a <__gethex+0x13a>
 800dbb4:	4633      	mov	r3, r6
 800dbb6:	7818      	ldrb	r0, [r3, #0]
 800dbb8:	2830      	cmp	r0, #48	; 0x30
 800dbba:	461f      	mov	r7, r3
 800dbbc:	f103 0301 	add.w	r3, r3, #1
 800dbc0:	d0f9      	beq.n	800dbb6 <__gethex+0x76>
 800dbc2:	f7ff ffa7 	bl	800db14 <__hexdig_fun>
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	fab0 f480 	clz	r4, r0
 800dbcc:	0964      	lsrs	r4, r4, #5
 800dbce:	4635      	mov	r5, r6
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	463a      	mov	r2, r7
 800dbd4:	4616      	mov	r6, r2
 800dbd6:	3201      	adds	r2, #1
 800dbd8:	7830      	ldrb	r0, [r6, #0]
 800dbda:	f7ff ff9b 	bl	800db14 <__hexdig_fun>
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	d1f8      	bne.n	800dbd4 <__gethex+0x94>
 800dbe2:	9901      	ldr	r1, [sp, #4]
 800dbe4:	4652      	mov	r2, sl
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	f001 f98a 	bl	800ef00 <strncmp>
 800dbec:	b980      	cbnz	r0, 800dc10 <__gethex+0xd0>
 800dbee:	b94d      	cbnz	r5, 800dc04 <__gethex+0xc4>
 800dbf0:	eb06 050a 	add.w	r5, r6, sl
 800dbf4:	462a      	mov	r2, r5
 800dbf6:	4616      	mov	r6, r2
 800dbf8:	3201      	adds	r2, #1
 800dbfa:	7830      	ldrb	r0, [r6, #0]
 800dbfc:	f7ff ff8a 	bl	800db14 <__hexdig_fun>
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d1f8      	bne.n	800dbf6 <__gethex+0xb6>
 800dc04:	1bad      	subs	r5, r5, r6
 800dc06:	00ad      	lsls	r5, r5, #2
 800dc08:	e004      	b.n	800dc14 <__gethex+0xd4>
 800dc0a:	2400      	movs	r4, #0
 800dc0c:	4625      	mov	r5, r4
 800dc0e:	e7e0      	b.n	800dbd2 <__gethex+0x92>
 800dc10:	2d00      	cmp	r5, #0
 800dc12:	d1f7      	bne.n	800dc04 <__gethex+0xc4>
 800dc14:	7833      	ldrb	r3, [r6, #0]
 800dc16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dc1a:	2b50      	cmp	r3, #80	; 0x50
 800dc1c:	d13b      	bne.n	800dc96 <__gethex+0x156>
 800dc1e:	7873      	ldrb	r3, [r6, #1]
 800dc20:	2b2b      	cmp	r3, #43	; 0x2b
 800dc22:	d02c      	beq.n	800dc7e <__gethex+0x13e>
 800dc24:	2b2d      	cmp	r3, #45	; 0x2d
 800dc26:	d02e      	beq.n	800dc86 <__gethex+0x146>
 800dc28:	1c71      	adds	r1, r6, #1
 800dc2a:	f04f 0900 	mov.w	r9, #0
 800dc2e:	7808      	ldrb	r0, [r1, #0]
 800dc30:	f7ff ff70 	bl	800db14 <__hexdig_fun>
 800dc34:	1e43      	subs	r3, r0, #1
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	2b18      	cmp	r3, #24
 800dc3a:	d82c      	bhi.n	800dc96 <__gethex+0x156>
 800dc3c:	f1a0 0210 	sub.w	r2, r0, #16
 800dc40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dc44:	f7ff ff66 	bl	800db14 <__hexdig_fun>
 800dc48:	1e43      	subs	r3, r0, #1
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b18      	cmp	r3, #24
 800dc4e:	d91d      	bls.n	800dc8c <__gethex+0x14c>
 800dc50:	f1b9 0f00 	cmp.w	r9, #0
 800dc54:	d000      	beq.n	800dc58 <__gethex+0x118>
 800dc56:	4252      	negs	r2, r2
 800dc58:	4415      	add	r5, r2
 800dc5a:	f8cb 1000 	str.w	r1, [fp]
 800dc5e:	b1e4      	cbz	r4, 800dc9a <__gethex+0x15a>
 800dc60:	9b00      	ldr	r3, [sp, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	bf14      	ite	ne
 800dc66:	2700      	movne	r7, #0
 800dc68:	2706      	moveq	r7, #6
 800dc6a:	4638      	mov	r0, r7
 800dc6c:	b009      	add	sp, #36	; 0x24
 800dc6e:	ecbd 8b02 	vpop	{d8}
 800dc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc76:	463e      	mov	r6, r7
 800dc78:	4625      	mov	r5, r4
 800dc7a:	2401      	movs	r4, #1
 800dc7c:	e7ca      	b.n	800dc14 <__gethex+0xd4>
 800dc7e:	f04f 0900 	mov.w	r9, #0
 800dc82:	1cb1      	adds	r1, r6, #2
 800dc84:	e7d3      	b.n	800dc2e <__gethex+0xee>
 800dc86:	f04f 0901 	mov.w	r9, #1
 800dc8a:	e7fa      	b.n	800dc82 <__gethex+0x142>
 800dc8c:	230a      	movs	r3, #10
 800dc8e:	fb03 0202 	mla	r2, r3, r2, r0
 800dc92:	3a10      	subs	r2, #16
 800dc94:	e7d4      	b.n	800dc40 <__gethex+0x100>
 800dc96:	4631      	mov	r1, r6
 800dc98:	e7df      	b.n	800dc5a <__gethex+0x11a>
 800dc9a:	1bf3      	subs	r3, r6, r7
 800dc9c:	3b01      	subs	r3, #1
 800dc9e:	4621      	mov	r1, r4
 800dca0:	2b07      	cmp	r3, #7
 800dca2:	dc0b      	bgt.n	800dcbc <__gethex+0x17c>
 800dca4:	ee18 0a10 	vmov	r0, s16
 800dca8:	f000 fa8e 	bl	800e1c8 <_Balloc>
 800dcac:	4604      	mov	r4, r0
 800dcae:	b940      	cbnz	r0, 800dcc2 <__gethex+0x182>
 800dcb0:	4b5d      	ldr	r3, [pc, #372]	; (800de28 <__gethex+0x2e8>)
 800dcb2:	4602      	mov	r2, r0
 800dcb4:	21de      	movs	r1, #222	; 0xde
 800dcb6:	485d      	ldr	r0, [pc, #372]	; (800de2c <__gethex+0x2ec>)
 800dcb8:	f001 f944 	bl	800ef44 <__assert_func>
 800dcbc:	3101      	adds	r1, #1
 800dcbe:	105b      	asrs	r3, r3, #1
 800dcc0:	e7ee      	b.n	800dca0 <__gethex+0x160>
 800dcc2:	f100 0914 	add.w	r9, r0, #20
 800dcc6:	f04f 0b00 	mov.w	fp, #0
 800dcca:	f1ca 0301 	rsb	r3, sl, #1
 800dcce:	f8cd 9008 	str.w	r9, [sp, #8]
 800dcd2:	f8cd b000 	str.w	fp, [sp]
 800dcd6:	9306      	str	r3, [sp, #24]
 800dcd8:	42b7      	cmp	r7, r6
 800dcda:	d340      	bcc.n	800dd5e <__gethex+0x21e>
 800dcdc:	9802      	ldr	r0, [sp, #8]
 800dcde:	9b00      	ldr	r3, [sp, #0]
 800dce0:	f840 3b04 	str.w	r3, [r0], #4
 800dce4:	eba0 0009 	sub.w	r0, r0, r9
 800dce8:	1080      	asrs	r0, r0, #2
 800dcea:	0146      	lsls	r6, r0, #5
 800dcec:	6120      	str	r0, [r4, #16]
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f000 fb5c 	bl	800e3ac <__hi0bits>
 800dcf4:	1a30      	subs	r0, r6, r0
 800dcf6:	f8d8 6000 	ldr.w	r6, [r8]
 800dcfa:	42b0      	cmp	r0, r6
 800dcfc:	dd63      	ble.n	800ddc6 <__gethex+0x286>
 800dcfe:	1b87      	subs	r7, r0, r6
 800dd00:	4639      	mov	r1, r7
 800dd02:	4620      	mov	r0, r4
 800dd04:	f000 ff00 	bl	800eb08 <__any_on>
 800dd08:	4682      	mov	sl, r0
 800dd0a:	b1a8      	cbz	r0, 800dd38 <__gethex+0x1f8>
 800dd0c:	1e7b      	subs	r3, r7, #1
 800dd0e:	1159      	asrs	r1, r3, #5
 800dd10:	f003 021f 	and.w	r2, r3, #31
 800dd14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dd18:	f04f 0a01 	mov.w	sl, #1
 800dd1c:	fa0a f202 	lsl.w	r2, sl, r2
 800dd20:	420a      	tst	r2, r1
 800dd22:	d009      	beq.n	800dd38 <__gethex+0x1f8>
 800dd24:	4553      	cmp	r3, sl
 800dd26:	dd05      	ble.n	800dd34 <__gethex+0x1f4>
 800dd28:	1eb9      	subs	r1, r7, #2
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f000 feec 	bl	800eb08 <__any_on>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	d145      	bne.n	800ddc0 <__gethex+0x280>
 800dd34:	f04f 0a02 	mov.w	sl, #2
 800dd38:	4639      	mov	r1, r7
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f7ff fe98 	bl	800da70 <rshift>
 800dd40:	443d      	add	r5, r7
 800dd42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd46:	42ab      	cmp	r3, r5
 800dd48:	da4c      	bge.n	800dde4 <__gethex+0x2a4>
 800dd4a:	ee18 0a10 	vmov	r0, s16
 800dd4e:	4621      	mov	r1, r4
 800dd50:	f000 fa7a 	bl	800e248 <_Bfree>
 800dd54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd56:	2300      	movs	r3, #0
 800dd58:	6013      	str	r3, [r2, #0]
 800dd5a:	27a3      	movs	r7, #163	; 0xa3
 800dd5c:	e785      	b.n	800dc6a <__gethex+0x12a>
 800dd5e:	1e73      	subs	r3, r6, #1
 800dd60:	9a05      	ldr	r2, [sp, #20]
 800dd62:	9303      	str	r3, [sp, #12]
 800dd64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d019      	beq.n	800dda0 <__gethex+0x260>
 800dd6c:	f1bb 0f20 	cmp.w	fp, #32
 800dd70:	d107      	bne.n	800dd82 <__gethex+0x242>
 800dd72:	9b02      	ldr	r3, [sp, #8]
 800dd74:	9a00      	ldr	r2, [sp, #0]
 800dd76:	f843 2b04 	str.w	r2, [r3], #4
 800dd7a:	9302      	str	r3, [sp, #8]
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	469b      	mov	fp, r3
 800dd82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dd86:	f7ff fec5 	bl	800db14 <__hexdig_fun>
 800dd8a:	9b00      	ldr	r3, [sp, #0]
 800dd8c:	f000 000f 	and.w	r0, r0, #15
 800dd90:	fa00 f00b 	lsl.w	r0, r0, fp
 800dd94:	4303      	orrs	r3, r0
 800dd96:	9300      	str	r3, [sp, #0]
 800dd98:	f10b 0b04 	add.w	fp, fp, #4
 800dd9c:	9b03      	ldr	r3, [sp, #12]
 800dd9e:	e00d      	b.n	800ddbc <__gethex+0x27c>
 800dda0:	9b03      	ldr	r3, [sp, #12]
 800dda2:	9a06      	ldr	r2, [sp, #24]
 800dda4:	4413      	add	r3, r2
 800dda6:	42bb      	cmp	r3, r7
 800dda8:	d3e0      	bcc.n	800dd6c <__gethex+0x22c>
 800ddaa:	4618      	mov	r0, r3
 800ddac:	9901      	ldr	r1, [sp, #4]
 800ddae:	9307      	str	r3, [sp, #28]
 800ddb0:	4652      	mov	r2, sl
 800ddb2:	f001 f8a5 	bl	800ef00 <strncmp>
 800ddb6:	9b07      	ldr	r3, [sp, #28]
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d1d7      	bne.n	800dd6c <__gethex+0x22c>
 800ddbc:	461e      	mov	r6, r3
 800ddbe:	e78b      	b.n	800dcd8 <__gethex+0x198>
 800ddc0:	f04f 0a03 	mov.w	sl, #3
 800ddc4:	e7b8      	b.n	800dd38 <__gethex+0x1f8>
 800ddc6:	da0a      	bge.n	800ddde <__gethex+0x29e>
 800ddc8:	1a37      	subs	r7, r6, r0
 800ddca:	4621      	mov	r1, r4
 800ddcc:	ee18 0a10 	vmov	r0, s16
 800ddd0:	463a      	mov	r2, r7
 800ddd2:	f000 fc55 	bl	800e680 <__lshift>
 800ddd6:	1bed      	subs	r5, r5, r7
 800ddd8:	4604      	mov	r4, r0
 800ddda:	f100 0914 	add.w	r9, r0, #20
 800ddde:	f04f 0a00 	mov.w	sl, #0
 800dde2:	e7ae      	b.n	800dd42 <__gethex+0x202>
 800dde4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dde8:	42a8      	cmp	r0, r5
 800ddea:	dd72      	ble.n	800ded2 <__gethex+0x392>
 800ddec:	1b45      	subs	r5, r0, r5
 800ddee:	42ae      	cmp	r6, r5
 800ddf0:	dc36      	bgt.n	800de60 <__gethex+0x320>
 800ddf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ddf6:	2b02      	cmp	r3, #2
 800ddf8:	d02a      	beq.n	800de50 <__gethex+0x310>
 800ddfa:	2b03      	cmp	r3, #3
 800ddfc:	d02c      	beq.n	800de58 <__gethex+0x318>
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d11c      	bne.n	800de3c <__gethex+0x2fc>
 800de02:	42ae      	cmp	r6, r5
 800de04:	d11a      	bne.n	800de3c <__gethex+0x2fc>
 800de06:	2e01      	cmp	r6, #1
 800de08:	d112      	bne.n	800de30 <__gethex+0x2f0>
 800de0a:	9a04      	ldr	r2, [sp, #16]
 800de0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de10:	6013      	str	r3, [r2, #0]
 800de12:	2301      	movs	r3, #1
 800de14:	6123      	str	r3, [r4, #16]
 800de16:	f8c9 3000 	str.w	r3, [r9]
 800de1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de1c:	2762      	movs	r7, #98	; 0x62
 800de1e:	601c      	str	r4, [r3, #0]
 800de20:	e723      	b.n	800dc6a <__gethex+0x12a>
 800de22:	bf00      	nop
 800de24:	0800fb08 	.word	0x0800fb08
 800de28:	0800fa90 	.word	0x0800fa90
 800de2c:	0800faa1 	.word	0x0800faa1
 800de30:	1e71      	subs	r1, r6, #1
 800de32:	4620      	mov	r0, r4
 800de34:	f000 fe68 	bl	800eb08 <__any_on>
 800de38:	2800      	cmp	r0, #0
 800de3a:	d1e6      	bne.n	800de0a <__gethex+0x2ca>
 800de3c:	ee18 0a10 	vmov	r0, s16
 800de40:	4621      	mov	r1, r4
 800de42:	f000 fa01 	bl	800e248 <_Bfree>
 800de46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de48:	2300      	movs	r3, #0
 800de4a:	6013      	str	r3, [r2, #0]
 800de4c:	2750      	movs	r7, #80	; 0x50
 800de4e:	e70c      	b.n	800dc6a <__gethex+0x12a>
 800de50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1f2      	bne.n	800de3c <__gethex+0x2fc>
 800de56:	e7d8      	b.n	800de0a <__gethex+0x2ca>
 800de58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1d5      	bne.n	800de0a <__gethex+0x2ca>
 800de5e:	e7ed      	b.n	800de3c <__gethex+0x2fc>
 800de60:	1e6f      	subs	r7, r5, #1
 800de62:	f1ba 0f00 	cmp.w	sl, #0
 800de66:	d131      	bne.n	800decc <__gethex+0x38c>
 800de68:	b127      	cbz	r7, 800de74 <__gethex+0x334>
 800de6a:	4639      	mov	r1, r7
 800de6c:	4620      	mov	r0, r4
 800de6e:	f000 fe4b 	bl	800eb08 <__any_on>
 800de72:	4682      	mov	sl, r0
 800de74:	117b      	asrs	r3, r7, #5
 800de76:	2101      	movs	r1, #1
 800de78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800de7c:	f007 071f 	and.w	r7, r7, #31
 800de80:	fa01 f707 	lsl.w	r7, r1, r7
 800de84:	421f      	tst	r7, r3
 800de86:	4629      	mov	r1, r5
 800de88:	4620      	mov	r0, r4
 800de8a:	bf18      	it	ne
 800de8c:	f04a 0a02 	orrne.w	sl, sl, #2
 800de90:	1b76      	subs	r6, r6, r5
 800de92:	f7ff fded 	bl	800da70 <rshift>
 800de96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de9a:	2702      	movs	r7, #2
 800de9c:	f1ba 0f00 	cmp.w	sl, #0
 800dea0:	d048      	beq.n	800df34 <__gethex+0x3f4>
 800dea2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	d015      	beq.n	800ded6 <__gethex+0x396>
 800deaa:	2b03      	cmp	r3, #3
 800deac:	d017      	beq.n	800dede <__gethex+0x39e>
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d109      	bne.n	800dec6 <__gethex+0x386>
 800deb2:	f01a 0f02 	tst.w	sl, #2
 800deb6:	d006      	beq.n	800dec6 <__gethex+0x386>
 800deb8:	f8d9 0000 	ldr.w	r0, [r9]
 800debc:	ea4a 0a00 	orr.w	sl, sl, r0
 800dec0:	f01a 0f01 	tst.w	sl, #1
 800dec4:	d10e      	bne.n	800dee4 <__gethex+0x3a4>
 800dec6:	f047 0710 	orr.w	r7, r7, #16
 800deca:	e033      	b.n	800df34 <__gethex+0x3f4>
 800decc:	f04f 0a01 	mov.w	sl, #1
 800ded0:	e7d0      	b.n	800de74 <__gethex+0x334>
 800ded2:	2701      	movs	r7, #1
 800ded4:	e7e2      	b.n	800de9c <__gethex+0x35c>
 800ded6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ded8:	f1c3 0301 	rsb	r3, r3, #1
 800dedc:	9315      	str	r3, [sp, #84]	; 0x54
 800dede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d0f0      	beq.n	800dec6 <__gethex+0x386>
 800dee4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dee8:	f104 0314 	add.w	r3, r4, #20
 800deec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800def0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800def4:	f04f 0c00 	mov.w	ip, #0
 800def8:	4618      	mov	r0, r3
 800defa:	f853 2b04 	ldr.w	r2, [r3], #4
 800defe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800df02:	d01c      	beq.n	800df3e <__gethex+0x3fe>
 800df04:	3201      	adds	r2, #1
 800df06:	6002      	str	r2, [r0, #0]
 800df08:	2f02      	cmp	r7, #2
 800df0a:	f104 0314 	add.w	r3, r4, #20
 800df0e:	d13f      	bne.n	800df90 <__gethex+0x450>
 800df10:	f8d8 2000 	ldr.w	r2, [r8]
 800df14:	3a01      	subs	r2, #1
 800df16:	42b2      	cmp	r2, r6
 800df18:	d10a      	bne.n	800df30 <__gethex+0x3f0>
 800df1a:	1171      	asrs	r1, r6, #5
 800df1c:	2201      	movs	r2, #1
 800df1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800df22:	f006 061f 	and.w	r6, r6, #31
 800df26:	fa02 f606 	lsl.w	r6, r2, r6
 800df2a:	421e      	tst	r6, r3
 800df2c:	bf18      	it	ne
 800df2e:	4617      	movne	r7, r2
 800df30:	f047 0720 	orr.w	r7, r7, #32
 800df34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df36:	601c      	str	r4, [r3, #0]
 800df38:	9b04      	ldr	r3, [sp, #16]
 800df3a:	601d      	str	r5, [r3, #0]
 800df3c:	e695      	b.n	800dc6a <__gethex+0x12a>
 800df3e:	4299      	cmp	r1, r3
 800df40:	f843 cc04 	str.w	ip, [r3, #-4]
 800df44:	d8d8      	bhi.n	800def8 <__gethex+0x3b8>
 800df46:	68a3      	ldr	r3, [r4, #8]
 800df48:	459b      	cmp	fp, r3
 800df4a:	db19      	blt.n	800df80 <__gethex+0x440>
 800df4c:	6861      	ldr	r1, [r4, #4]
 800df4e:	ee18 0a10 	vmov	r0, s16
 800df52:	3101      	adds	r1, #1
 800df54:	f000 f938 	bl	800e1c8 <_Balloc>
 800df58:	4681      	mov	r9, r0
 800df5a:	b918      	cbnz	r0, 800df64 <__gethex+0x424>
 800df5c:	4b1a      	ldr	r3, [pc, #104]	; (800dfc8 <__gethex+0x488>)
 800df5e:	4602      	mov	r2, r0
 800df60:	2184      	movs	r1, #132	; 0x84
 800df62:	e6a8      	b.n	800dcb6 <__gethex+0x176>
 800df64:	6922      	ldr	r2, [r4, #16]
 800df66:	3202      	adds	r2, #2
 800df68:	f104 010c 	add.w	r1, r4, #12
 800df6c:	0092      	lsls	r2, r2, #2
 800df6e:	300c      	adds	r0, #12
 800df70:	f7fc ff69 	bl	800ae46 <memcpy>
 800df74:	4621      	mov	r1, r4
 800df76:	ee18 0a10 	vmov	r0, s16
 800df7a:	f000 f965 	bl	800e248 <_Bfree>
 800df7e:	464c      	mov	r4, r9
 800df80:	6923      	ldr	r3, [r4, #16]
 800df82:	1c5a      	adds	r2, r3, #1
 800df84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df88:	6122      	str	r2, [r4, #16]
 800df8a:	2201      	movs	r2, #1
 800df8c:	615a      	str	r2, [r3, #20]
 800df8e:	e7bb      	b.n	800df08 <__gethex+0x3c8>
 800df90:	6922      	ldr	r2, [r4, #16]
 800df92:	455a      	cmp	r2, fp
 800df94:	dd0b      	ble.n	800dfae <__gethex+0x46e>
 800df96:	2101      	movs	r1, #1
 800df98:	4620      	mov	r0, r4
 800df9a:	f7ff fd69 	bl	800da70 <rshift>
 800df9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dfa2:	3501      	adds	r5, #1
 800dfa4:	42ab      	cmp	r3, r5
 800dfa6:	f6ff aed0 	blt.w	800dd4a <__gethex+0x20a>
 800dfaa:	2701      	movs	r7, #1
 800dfac:	e7c0      	b.n	800df30 <__gethex+0x3f0>
 800dfae:	f016 061f 	ands.w	r6, r6, #31
 800dfb2:	d0fa      	beq.n	800dfaa <__gethex+0x46a>
 800dfb4:	4453      	add	r3, sl
 800dfb6:	f1c6 0620 	rsb	r6, r6, #32
 800dfba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dfbe:	f000 f9f5 	bl	800e3ac <__hi0bits>
 800dfc2:	42b0      	cmp	r0, r6
 800dfc4:	dbe7      	blt.n	800df96 <__gethex+0x456>
 800dfc6:	e7f0      	b.n	800dfaa <__gethex+0x46a>
 800dfc8:	0800fa90 	.word	0x0800fa90

0800dfcc <L_shift>:
 800dfcc:	f1c2 0208 	rsb	r2, r2, #8
 800dfd0:	0092      	lsls	r2, r2, #2
 800dfd2:	b570      	push	{r4, r5, r6, lr}
 800dfd4:	f1c2 0620 	rsb	r6, r2, #32
 800dfd8:	6843      	ldr	r3, [r0, #4]
 800dfda:	6804      	ldr	r4, [r0, #0]
 800dfdc:	fa03 f506 	lsl.w	r5, r3, r6
 800dfe0:	432c      	orrs	r4, r5
 800dfe2:	40d3      	lsrs	r3, r2
 800dfe4:	6004      	str	r4, [r0, #0]
 800dfe6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dfea:	4288      	cmp	r0, r1
 800dfec:	d3f4      	bcc.n	800dfd8 <L_shift+0xc>
 800dfee:	bd70      	pop	{r4, r5, r6, pc}

0800dff0 <__match>:
 800dff0:	b530      	push	{r4, r5, lr}
 800dff2:	6803      	ldr	r3, [r0, #0]
 800dff4:	3301      	adds	r3, #1
 800dff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dffa:	b914      	cbnz	r4, 800e002 <__match+0x12>
 800dffc:	6003      	str	r3, [r0, #0]
 800dffe:	2001      	movs	r0, #1
 800e000:	bd30      	pop	{r4, r5, pc}
 800e002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e006:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e00a:	2d19      	cmp	r5, #25
 800e00c:	bf98      	it	ls
 800e00e:	3220      	addls	r2, #32
 800e010:	42a2      	cmp	r2, r4
 800e012:	d0f0      	beq.n	800dff6 <__match+0x6>
 800e014:	2000      	movs	r0, #0
 800e016:	e7f3      	b.n	800e000 <__match+0x10>

0800e018 <__hexnan>:
 800e018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e01c:	680b      	ldr	r3, [r1, #0]
 800e01e:	115e      	asrs	r6, r3, #5
 800e020:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e024:	f013 031f 	ands.w	r3, r3, #31
 800e028:	b087      	sub	sp, #28
 800e02a:	bf18      	it	ne
 800e02c:	3604      	addne	r6, #4
 800e02e:	2500      	movs	r5, #0
 800e030:	1f37      	subs	r7, r6, #4
 800e032:	4690      	mov	r8, r2
 800e034:	6802      	ldr	r2, [r0, #0]
 800e036:	9301      	str	r3, [sp, #4]
 800e038:	4682      	mov	sl, r0
 800e03a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e03e:	46b9      	mov	r9, r7
 800e040:	463c      	mov	r4, r7
 800e042:	9502      	str	r5, [sp, #8]
 800e044:	46ab      	mov	fp, r5
 800e046:	7851      	ldrb	r1, [r2, #1]
 800e048:	1c53      	adds	r3, r2, #1
 800e04a:	9303      	str	r3, [sp, #12]
 800e04c:	b341      	cbz	r1, 800e0a0 <__hexnan+0x88>
 800e04e:	4608      	mov	r0, r1
 800e050:	9205      	str	r2, [sp, #20]
 800e052:	9104      	str	r1, [sp, #16]
 800e054:	f7ff fd5e 	bl	800db14 <__hexdig_fun>
 800e058:	2800      	cmp	r0, #0
 800e05a:	d14f      	bne.n	800e0fc <__hexnan+0xe4>
 800e05c:	9904      	ldr	r1, [sp, #16]
 800e05e:	9a05      	ldr	r2, [sp, #20]
 800e060:	2920      	cmp	r1, #32
 800e062:	d818      	bhi.n	800e096 <__hexnan+0x7e>
 800e064:	9b02      	ldr	r3, [sp, #8]
 800e066:	459b      	cmp	fp, r3
 800e068:	dd13      	ble.n	800e092 <__hexnan+0x7a>
 800e06a:	454c      	cmp	r4, r9
 800e06c:	d206      	bcs.n	800e07c <__hexnan+0x64>
 800e06e:	2d07      	cmp	r5, #7
 800e070:	dc04      	bgt.n	800e07c <__hexnan+0x64>
 800e072:	462a      	mov	r2, r5
 800e074:	4649      	mov	r1, r9
 800e076:	4620      	mov	r0, r4
 800e078:	f7ff ffa8 	bl	800dfcc <L_shift>
 800e07c:	4544      	cmp	r4, r8
 800e07e:	d950      	bls.n	800e122 <__hexnan+0x10a>
 800e080:	2300      	movs	r3, #0
 800e082:	f1a4 0904 	sub.w	r9, r4, #4
 800e086:	f844 3c04 	str.w	r3, [r4, #-4]
 800e08a:	f8cd b008 	str.w	fp, [sp, #8]
 800e08e:	464c      	mov	r4, r9
 800e090:	461d      	mov	r5, r3
 800e092:	9a03      	ldr	r2, [sp, #12]
 800e094:	e7d7      	b.n	800e046 <__hexnan+0x2e>
 800e096:	2929      	cmp	r1, #41	; 0x29
 800e098:	d156      	bne.n	800e148 <__hexnan+0x130>
 800e09a:	3202      	adds	r2, #2
 800e09c:	f8ca 2000 	str.w	r2, [sl]
 800e0a0:	f1bb 0f00 	cmp.w	fp, #0
 800e0a4:	d050      	beq.n	800e148 <__hexnan+0x130>
 800e0a6:	454c      	cmp	r4, r9
 800e0a8:	d206      	bcs.n	800e0b8 <__hexnan+0xa0>
 800e0aa:	2d07      	cmp	r5, #7
 800e0ac:	dc04      	bgt.n	800e0b8 <__hexnan+0xa0>
 800e0ae:	462a      	mov	r2, r5
 800e0b0:	4649      	mov	r1, r9
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f7ff ff8a 	bl	800dfcc <L_shift>
 800e0b8:	4544      	cmp	r4, r8
 800e0ba:	d934      	bls.n	800e126 <__hexnan+0x10e>
 800e0bc:	f1a8 0204 	sub.w	r2, r8, #4
 800e0c0:	4623      	mov	r3, r4
 800e0c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e0c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e0ca:	429f      	cmp	r7, r3
 800e0cc:	d2f9      	bcs.n	800e0c2 <__hexnan+0xaa>
 800e0ce:	1b3b      	subs	r3, r7, r4
 800e0d0:	f023 0303 	bic.w	r3, r3, #3
 800e0d4:	3304      	adds	r3, #4
 800e0d6:	3401      	adds	r4, #1
 800e0d8:	3e03      	subs	r6, #3
 800e0da:	42b4      	cmp	r4, r6
 800e0dc:	bf88      	it	hi
 800e0de:	2304      	movhi	r3, #4
 800e0e0:	4443      	add	r3, r8
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f843 2b04 	str.w	r2, [r3], #4
 800e0e8:	429f      	cmp	r7, r3
 800e0ea:	d2fb      	bcs.n	800e0e4 <__hexnan+0xcc>
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	b91b      	cbnz	r3, 800e0f8 <__hexnan+0xe0>
 800e0f0:	4547      	cmp	r7, r8
 800e0f2:	d127      	bne.n	800e144 <__hexnan+0x12c>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	603b      	str	r3, [r7, #0]
 800e0f8:	2005      	movs	r0, #5
 800e0fa:	e026      	b.n	800e14a <__hexnan+0x132>
 800e0fc:	3501      	adds	r5, #1
 800e0fe:	2d08      	cmp	r5, #8
 800e100:	f10b 0b01 	add.w	fp, fp, #1
 800e104:	dd06      	ble.n	800e114 <__hexnan+0xfc>
 800e106:	4544      	cmp	r4, r8
 800e108:	d9c3      	bls.n	800e092 <__hexnan+0x7a>
 800e10a:	2300      	movs	r3, #0
 800e10c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e110:	2501      	movs	r5, #1
 800e112:	3c04      	subs	r4, #4
 800e114:	6822      	ldr	r2, [r4, #0]
 800e116:	f000 000f 	and.w	r0, r0, #15
 800e11a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	e7b7      	b.n	800e092 <__hexnan+0x7a>
 800e122:	2508      	movs	r5, #8
 800e124:	e7b5      	b.n	800e092 <__hexnan+0x7a>
 800e126:	9b01      	ldr	r3, [sp, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d0df      	beq.n	800e0ec <__hexnan+0xd4>
 800e12c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e130:	f1c3 0320 	rsb	r3, r3, #32
 800e134:	fa22 f303 	lsr.w	r3, r2, r3
 800e138:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e13c:	401a      	ands	r2, r3
 800e13e:	f846 2c04 	str.w	r2, [r6, #-4]
 800e142:	e7d3      	b.n	800e0ec <__hexnan+0xd4>
 800e144:	3f04      	subs	r7, #4
 800e146:	e7d1      	b.n	800e0ec <__hexnan+0xd4>
 800e148:	2004      	movs	r0, #4
 800e14a:	b007      	add	sp, #28
 800e14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e150 <_localeconv_r>:
 800e150:	4800      	ldr	r0, [pc, #0]	; (800e154 <_localeconv_r+0x4>)
 800e152:	4770      	bx	lr
 800e154:	20000170 	.word	0x20000170

0800e158 <_lseek_r>:
 800e158:	b538      	push	{r3, r4, r5, lr}
 800e15a:	4d07      	ldr	r5, [pc, #28]	; (800e178 <_lseek_r+0x20>)
 800e15c:	4604      	mov	r4, r0
 800e15e:	4608      	mov	r0, r1
 800e160:	4611      	mov	r1, r2
 800e162:	2200      	movs	r2, #0
 800e164:	602a      	str	r2, [r5, #0]
 800e166:	461a      	mov	r2, r3
 800e168:	f7f3 fff4 	bl	8002154 <_lseek>
 800e16c:	1c43      	adds	r3, r0, #1
 800e16e:	d102      	bne.n	800e176 <_lseek_r+0x1e>
 800e170:	682b      	ldr	r3, [r5, #0]
 800e172:	b103      	cbz	r3, 800e176 <_lseek_r+0x1e>
 800e174:	6023      	str	r3, [r4, #0]
 800e176:	bd38      	pop	{r3, r4, r5, pc}
 800e178:	20001e20 	.word	0x20001e20

0800e17c <malloc>:
 800e17c:	4b02      	ldr	r3, [pc, #8]	; (800e188 <malloc+0xc>)
 800e17e:	4601      	mov	r1, r0
 800e180:	6818      	ldr	r0, [r3, #0]
 800e182:	f7fc be97 	b.w	800aeb4 <_malloc_r>
 800e186:	bf00      	nop
 800e188:	20000018 	.word	0x20000018

0800e18c <__ascii_mbtowc>:
 800e18c:	b082      	sub	sp, #8
 800e18e:	b901      	cbnz	r1, 800e192 <__ascii_mbtowc+0x6>
 800e190:	a901      	add	r1, sp, #4
 800e192:	b142      	cbz	r2, 800e1a6 <__ascii_mbtowc+0x1a>
 800e194:	b14b      	cbz	r3, 800e1aa <__ascii_mbtowc+0x1e>
 800e196:	7813      	ldrb	r3, [r2, #0]
 800e198:	600b      	str	r3, [r1, #0]
 800e19a:	7812      	ldrb	r2, [r2, #0]
 800e19c:	1e10      	subs	r0, r2, #0
 800e19e:	bf18      	it	ne
 800e1a0:	2001      	movne	r0, #1
 800e1a2:	b002      	add	sp, #8
 800e1a4:	4770      	bx	lr
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	e7fb      	b.n	800e1a2 <__ascii_mbtowc+0x16>
 800e1aa:	f06f 0001 	mvn.w	r0, #1
 800e1ae:	e7f8      	b.n	800e1a2 <__ascii_mbtowc+0x16>

0800e1b0 <__malloc_lock>:
 800e1b0:	4801      	ldr	r0, [pc, #4]	; (800e1b8 <__malloc_lock+0x8>)
 800e1b2:	f7fc be46 	b.w	800ae42 <__retarget_lock_acquire_recursive>
 800e1b6:	bf00      	nop
 800e1b8:	20001e14 	.word	0x20001e14

0800e1bc <__malloc_unlock>:
 800e1bc:	4801      	ldr	r0, [pc, #4]	; (800e1c4 <__malloc_unlock+0x8>)
 800e1be:	f7fc be41 	b.w	800ae44 <__retarget_lock_release_recursive>
 800e1c2:	bf00      	nop
 800e1c4:	20001e14 	.word	0x20001e14

0800e1c8 <_Balloc>:
 800e1c8:	b570      	push	{r4, r5, r6, lr}
 800e1ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	460d      	mov	r5, r1
 800e1d0:	b976      	cbnz	r6, 800e1f0 <_Balloc+0x28>
 800e1d2:	2010      	movs	r0, #16
 800e1d4:	f7ff ffd2 	bl	800e17c <malloc>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	6260      	str	r0, [r4, #36]	; 0x24
 800e1dc:	b920      	cbnz	r0, 800e1e8 <_Balloc+0x20>
 800e1de:	4b18      	ldr	r3, [pc, #96]	; (800e240 <_Balloc+0x78>)
 800e1e0:	4818      	ldr	r0, [pc, #96]	; (800e244 <_Balloc+0x7c>)
 800e1e2:	2166      	movs	r1, #102	; 0x66
 800e1e4:	f000 feae 	bl	800ef44 <__assert_func>
 800e1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1ec:	6006      	str	r6, [r0, #0]
 800e1ee:	60c6      	str	r6, [r0, #12]
 800e1f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e1f2:	68f3      	ldr	r3, [r6, #12]
 800e1f4:	b183      	cbz	r3, 800e218 <_Balloc+0x50>
 800e1f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e1fe:	b9b8      	cbnz	r0, 800e230 <_Balloc+0x68>
 800e200:	2101      	movs	r1, #1
 800e202:	fa01 f605 	lsl.w	r6, r1, r5
 800e206:	1d72      	adds	r2, r6, #5
 800e208:	0092      	lsls	r2, r2, #2
 800e20a:	4620      	mov	r0, r4
 800e20c:	f000 fc9d 	bl	800eb4a <_calloc_r>
 800e210:	b160      	cbz	r0, 800e22c <_Balloc+0x64>
 800e212:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e216:	e00e      	b.n	800e236 <_Balloc+0x6e>
 800e218:	2221      	movs	r2, #33	; 0x21
 800e21a:	2104      	movs	r1, #4
 800e21c:	4620      	mov	r0, r4
 800e21e:	f000 fc94 	bl	800eb4a <_calloc_r>
 800e222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e224:	60f0      	str	r0, [r6, #12]
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d1e4      	bne.n	800e1f6 <_Balloc+0x2e>
 800e22c:	2000      	movs	r0, #0
 800e22e:	bd70      	pop	{r4, r5, r6, pc}
 800e230:	6802      	ldr	r2, [r0, #0]
 800e232:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e236:	2300      	movs	r3, #0
 800e238:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e23c:	e7f7      	b.n	800e22e <_Balloc+0x66>
 800e23e:	bf00      	nop
 800e240:	0800fa1e 	.word	0x0800fa1e
 800e244:	0800fb1c 	.word	0x0800fb1c

0800e248 <_Bfree>:
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e24c:	4605      	mov	r5, r0
 800e24e:	460c      	mov	r4, r1
 800e250:	b976      	cbnz	r6, 800e270 <_Bfree+0x28>
 800e252:	2010      	movs	r0, #16
 800e254:	f7ff ff92 	bl	800e17c <malloc>
 800e258:	4602      	mov	r2, r0
 800e25a:	6268      	str	r0, [r5, #36]	; 0x24
 800e25c:	b920      	cbnz	r0, 800e268 <_Bfree+0x20>
 800e25e:	4b09      	ldr	r3, [pc, #36]	; (800e284 <_Bfree+0x3c>)
 800e260:	4809      	ldr	r0, [pc, #36]	; (800e288 <_Bfree+0x40>)
 800e262:	218a      	movs	r1, #138	; 0x8a
 800e264:	f000 fe6e 	bl	800ef44 <__assert_func>
 800e268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e26c:	6006      	str	r6, [r0, #0]
 800e26e:	60c6      	str	r6, [r0, #12]
 800e270:	b13c      	cbz	r4, 800e282 <_Bfree+0x3a>
 800e272:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e274:	6862      	ldr	r2, [r4, #4]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e27c:	6021      	str	r1, [r4, #0]
 800e27e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e282:	bd70      	pop	{r4, r5, r6, pc}
 800e284:	0800fa1e 	.word	0x0800fa1e
 800e288:	0800fb1c 	.word	0x0800fb1c

0800e28c <__multadd>:
 800e28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e290:	690d      	ldr	r5, [r1, #16]
 800e292:	4607      	mov	r7, r0
 800e294:	460c      	mov	r4, r1
 800e296:	461e      	mov	r6, r3
 800e298:	f101 0c14 	add.w	ip, r1, #20
 800e29c:	2000      	movs	r0, #0
 800e29e:	f8dc 3000 	ldr.w	r3, [ip]
 800e2a2:	b299      	uxth	r1, r3
 800e2a4:	fb02 6101 	mla	r1, r2, r1, r6
 800e2a8:	0c1e      	lsrs	r6, r3, #16
 800e2aa:	0c0b      	lsrs	r3, r1, #16
 800e2ac:	fb02 3306 	mla	r3, r2, r6, r3
 800e2b0:	b289      	uxth	r1, r1
 800e2b2:	3001      	adds	r0, #1
 800e2b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2b8:	4285      	cmp	r5, r0
 800e2ba:	f84c 1b04 	str.w	r1, [ip], #4
 800e2be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2c2:	dcec      	bgt.n	800e29e <__multadd+0x12>
 800e2c4:	b30e      	cbz	r6, 800e30a <__multadd+0x7e>
 800e2c6:	68a3      	ldr	r3, [r4, #8]
 800e2c8:	42ab      	cmp	r3, r5
 800e2ca:	dc19      	bgt.n	800e300 <__multadd+0x74>
 800e2cc:	6861      	ldr	r1, [r4, #4]
 800e2ce:	4638      	mov	r0, r7
 800e2d0:	3101      	adds	r1, #1
 800e2d2:	f7ff ff79 	bl	800e1c8 <_Balloc>
 800e2d6:	4680      	mov	r8, r0
 800e2d8:	b928      	cbnz	r0, 800e2e6 <__multadd+0x5a>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	4b0c      	ldr	r3, [pc, #48]	; (800e310 <__multadd+0x84>)
 800e2de:	480d      	ldr	r0, [pc, #52]	; (800e314 <__multadd+0x88>)
 800e2e0:	21b5      	movs	r1, #181	; 0xb5
 800e2e2:	f000 fe2f 	bl	800ef44 <__assert_func>
 800e2e6:	6922      	ldr	r2, [r4, #16]
 800e2e8:	3202      	adds	r2, #2
 800e2ea:	f104 010c 	add.w	r1, r4, #12
 800e2ee:	0092      	lsls	r2, r2, #2
 800e2f0:	300c      	adds	r0, #12
 800e2f2:	f7fc fda8 	bl	800ae46 <memcpy>
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	4638      	mov	r0, r7
 800e2fa:	f7ff ffa5 	bl	800e248 <_Bfree>
 800e2fe:	4644      	mov	r4, r8
 800e300:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e304:	3501      	adds	r5, #1
 800e306:	615e      	str	r6, [r3, #20]
 800e308:	6125      	str	r5, [r4, #16]
 800e30a:	4620      	mov	r0, r4
 800e30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e310:	0800fa90 	.word	0x0800fa90
 800e314:	0800fb1c 	.word	0x0800fb1c

0800e318 <__s2b>:
 800e318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e31c:	460c      	mov	r4, r1
 800e31e:	4615      	mov	r5, r2
 800e320:	461f      	mov	r7, r3
 800e322:	2209      	movs	r2, #9
 800e324:	3308      	adds	r3, #8
 800e326:	4606      	mov	r6, r0
 800e328:	fb93 f3f2 	sdiv	r3, r3, r2
 800e32c:	2100      	movs	r1, #0
 800e32e:	2201      	movs	r2, #1
 800e330:	429a      	cmp	r2, r3
 800e332:	db09      	blt.n	800e348 <__s2b+0x30>
 800e334:	4630      	mov	r0, r6
 800e336:	f7ff ff47 	bl	800e1c8 <_Balloc>
 800e33a:	b940      	cbnz	r0, 800e34e <__s2b+0x36>
 800e33c:	4602      	mov	r2, r0
 800e33e:	4b19      	ldr	r3, [pc, #100]	; (800e3a4 <__s2b+0x8c>)
 800e340:	4819      	ldr	r0, [pc, #100]	; (800e3a8 <__s2b+0x90>)
 800e342:	21ce      	movs	r1, #206	; 0xce
 800e344:	f000 fdfe 	bl	800ef44 <__assert_func>
 800e348:	0052      	lsls	r2, r2, #1
 800e34a:	3101      	adds	r1, #1
 800e34c:	e7f0      	b.n	800e330 <__s2b+0x18>
 800e34e:	9b08      	ldr	r3, [sp, #32]
 800e350:	6143      	str	r3, [r0, #20]
 800e352:	2d09      	cmp	r5, #9
 800e354:	f04f 0301 	mov.w	r3, #1
 800e358:	6103      	str	r3, [r0, #16]
 800e35a:	dd16      	ble.n	800e38a <__s2b+0x72>
 800e35c:	f104 0909 	add.w	r9, r4, #9
 800e360:	46c8      	mov	r8, r9
 800e362:	442c      	add	r4, r5
 800e364:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e368:	4601      	mov	r1, r0
 800e36a:	3b30      	subs	r3, #48	; 0x30
 800e36c:	220a      	movs	r2, #10
 800e36e:	4630      	mov	r0, r6
 800e370:	f7ff ff8c 	bl	800e28c <__multadd>
 800e374:	45a0      	cmp	r8, r4
 800e376:	d1f5      	bne.n	800e364 <__s2b+0x4c>
 800e378:	f1a5 0408 	sub.w	r4, r5, #8
 800e37c:	444c      	add	r4, r9
 800e37e:	1b2d      	subs	r5, r5, r4
 800e380:	1963      	adds	r3, r4, r5
 800e382:	42bb      	cmp	r3, r7
 800e384:	db04      	blt.n	800e390 <__s2b+0x78>
 800e386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e38a:	340a      	adds	r4, #10
 800e38c:	2509      	movs	r5, #9
 800e38e:	e7f6      	b.n	800e37e <__s2b+0x66>
 800e390:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e394:	4601      	mov	r1, r0
 800e396:	3b30      	subs	r3, #48	; 0x30
 800e398:	220a      	movs	r2, #10
 800e39a:	4630      	mov	r0, r6
 800e39c:	f7ff ff76 	bl	800e28c <__multadd>
 800e3a0:	e7ee      	b.n	800e380 <__s2b+0x68>
 800e3a2:	bf00      	nop
 800e3a4:	0800fa90 	.word	0x0800fa90
 800e3a8:	0800fb1c 	.word	0x0800fb1c

0800e3ac <__hi0bits>:
 800e3ac:	0c03      	lsrs	r3, r0, #16
 800e3ae:	041b      	lsls	r3, r3, #16
 800e3b0:	b9d3      	cbnz	r3, 800e3e8 <__hi0bits+0x3c>
 800e3b2:	0400      	lsls	r0, r0, #16
 800e3b4:	2310      	movs	r3, #16
 800e3b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e3ba:	bf04      	itt	eq
 800e3bc:	0200      	lsleq	r0, r0, #8
 800e3be:	3308      	addeq	r3, #8
 800e3c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e3c4:	bf04      	itt	eq
 800e3c6:	0100      	lsleq	r0, r0, #4
 800e3c8:	3304      	addeq	r3, #4
 800e3ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e3ce:	bf04      	itt	eq
 800e3d0:	0080      	lsleq	r0, r0, #2
 800e3d2:	3302      	addeq	r3, #2
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	db05      	blt.n	800e3e4 <__hi0bits+0x38>
 800e3d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e3dc:	f103 0301 	add.w	r3, r3, #1
 800e3e0:	bf08      	it	eq
 800e3e2:	2320      	moveq	r3, #32
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	4770      	bx	lr
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	e7e4      	b.n	800e3b6 <__hi0bits+0xa>

0800e3ec <__lo0bits>:
 800e3ec:	6803      	ldr	r3, [r0, #0]
 800e3ee:	f013 0207 	ands.w	r2, r3, #7
 800e3f2:	4601      	mov	r1, r0
 800e3f4:	d00b      	beq.n	800e40e <__lo0bits+0x22>
 800e3f6:	07da      	lsls	r2, r3, #31
 800e3f8:	d423      	bmi.n	800e442 <__lo0bits+0x56>
 800e3fa:	0798      	lsls	r0, r3, #30
 800e3fc:	bf49      	itett	mi
 800e3fe:	085b      	lsrmi	r3, r3, #1
 800e400:	089b      	lsrpl	r3, r3, #2
 800e402:	2001      	movmi	r0, #1
 800e404:	600b      	strmi	r3, [r1, #0]
 800e406:	bf5c      	itt	pl
 800e408:	600b      	strpl	r3, [r1, #0]
 800e40a:	2002      	movpl	r0, #2
 800e40c:	4770      	bx	lr
 800e40e:	b298      	uxth	r0, r3
 800e410:	b9a8      	cbnz	r0, 800e43e <__lo0bits+0x52>
 800e412:	0c1b      	lsrs	r3, r3, #16
 800e414:	2010      	movs	r0, #16
 800e416:	b2da      	uxtb	r2, r3
 800e418:	b90a      	cbnz	r2, 800e41e <__lo0bits+0x32>
 800e41a:	3008      	adds	r0, #8
 800e41c:	0a1b      	lsrs	r3, r3, #8
 800e41e:	071a      	lsls	r2, r3, #28
 800e420:	bf04      	itt	eq
 800e422:	091b      	lsreq	r3, r3, #4
 800e424:	3004      	addeq	r0, #4
 800e426:	079a      	lsls	r2, r3, #30
 800e428:	bf04      	itt	eq
 800e42a:	089b      	lsreq	r3, r3, #2
 800e42c:	3002      	addeq	r0, #2
 800e42e:	07da      	lsls	r2, r3, #31
 800e430:	d403      	bmi.n	800e43a <__lo0bits+0x4e>
 800e432:	085b      	lsrs	r3, r3, #1
 800e434:	f100 0001 	add.w	r0, r0, #1
 800e438:	d005      	beq.n	800e446 <__lo0bits+0x5a>
 800e43a:	600b      	str	r3, [r1, #0]
 800e43c:	4770      	bx	lr
 800e43e:	4610      	mov	r0, r2
 800e440:	e7e9      	b.n	800e416 <__lo0bits+0x2a>
 800e442:	2000      	movs	r0, #0
 800e444:	4770      	bx	lr
 800e446:	2020      	movs	r0, #32
 800e448:	4770      	bx	lr
	...

0800e44c <__i2b>:
 800e44c:	b510      	push	{r4, lr}
 800e44e:	460c      	mov	r4, r1
 800e450:	2101      	movs	r1, #1
 800e452:	f7ff feb9 	bl	800e1c8 <_Balloc>
 800e456:	4602      	mov	r2, r0
 800e458:	b928      	cbnz	r0, 800e466 <__i2b+0x1a>
 800e45a:	4b05      	ldr	r3, [pc, #20]	; (800e470 <__i2b+0x24>)
 800e45c:	4805      	ldr	r0, [pc, #20]	; (800e474 <__i2b+0x28>)
 800e45e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e462:	f000 fd6f 	bl	800ef44 <__assert_func>
 800e466:	2301      	movs	r3, #1
 800e468:	6144      	str	r4, [r0, #20]
 800e46a:	6103      	str	r3, [r0, #16]
 800e46c:	bd10      	pop	{r4, pc}
 800e46e:	bf00      	nop
 800e470:	0800fa90 	.word	0x0800fa90
 800e474:	0800fb1c 	.word	0x0800fb1c

0800e478 <__multiply>:
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	4691      	mov	r9, r2
 800e47e:	690a      	ldr	r2, [r1, #16]
 800e480:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e484:	429a      	cmp	r2, r3
 800e486:	bfb8      	it	lt
 800e488:	460b      	movlt	r3, r1
 800e48a:	460c      	mov	r4, r1
 800e48c:	bfbc      	itt	lt
 800e48e:	464c      	movlt	r4, r9
 800e490:	4699      	movlt	r9, r3
 800e492:	6927      	ldr	r7, [r4, #16]
 800e494:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e498:	68a3      	ldr	r3, [r4, #8]
 800e49a:	6861      	ldr	r1, [r4, #4]
 800e49c:	eb07 060a 	add.w	r6, r7, sl
 800e4a0:	42b3      	cmp	r3, r6
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	bfb8      	it	lt
 800e4a6:	3101      	addlt	r1, #1
 800e4a8:	f7ff fe8e 	bl	800e1c8 <_Balloc>
 800e4ac:	b930      	cbnz	r0, 800e4bc <__multiply+0x44>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	4b44      	ldr	r3, [pc, #272]	; (800e5c4 <__multiply+0x14c>)
 800e4b2:	4845      	ldr	r0, [pc, #276]	; (800e5c8 <__multiply+0x150>)
 800e4b4:	f240 115d 	movw	r1, #349	; 0x15d
 800e4b8:	f000 fd44 	bl	800ef44 <__assert_func>
 800e4bc:	f100 0514 	add.w	r5, r0, #20
 800e4c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e4c4:	462b      	mov	r3, r5
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	4543      	cmp	r3, r8
 800e4ca:	d321      	bcc.n	800e510 <__multiply+0x98>
 800e4cc:	f104 0314 	add.w	r3, r4, #20
 800e4d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e4d4:	f109 0314 	add.w	r3, r9, #20
 800e4d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e4dc:	9202      	str	r2, [sp, #8]
 800e4de:	1b3a      	subs	r2, r7, r4
 800e4e0:	3a15      	subs	r2, #21
 800e4e2:	f022 0203 	bic.w	r2, r2, #3
 800e4e6:	3204      	adds	r2, #4
 800e4e8:	f104 0115 	add.w	r1, r4, #21
 800e4ec:	428f      	cmp	r7, r1
 800e4ee:	bf38      	it	cc
 800e4f0:	2204      	movcc	r2, #4
 800e4f2:	9201      	str	r2, [sp, #4]
 800e4f4:	9a02      	ldr	r2, [sp, #8]
 800e4f6:	9303      	str	r3, [sp, #12]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d80c      	bhi.n	800e516 <__multiply+0x9e>
 800e4fc:	2e00      	cmp	r6, #0
 800e4fe:	dd03      	ble.n	800e508 <__multiply+0x90>
 800e500:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e504:	2b00      	cmp	r3, #0
 800e506:	d05a      	beq.n	800e5be <__multiply+0x146>
 800e508:	6106      	str	r6, [r0, #16]
 800e50a:	b005      	add	sp, #20
 800e50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e510:	f843 2b04 	str.w	r2, [r3], #4
 800e514:	e7d8      	b.n	800e4c8 <__multiply+0x50>
 800e516:	f8b3 a000 	ldrh.w	sl, [r3]
 800e51a:	f1ba 0f00 	cmp.w	sl, #0
 800e51e:	d024      	beq.n	800e56a <__multiply+0xf2>
 800e520:	f104 0e14 	add.w	lr, r4, #20
 800e524:	46a9      	mov	r9, r5
 800e526:	f04f 0c00 	mov.w	ip, #0
 800e52a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e52e:	f8d9 1000 	ldr.w	r1, [r9]
 800e532:	fa1f fb82 	uxth.w	fp, r2
 800e536:	b289      	uxth	r1, r1
 800e538:	fb0a 110b 	mla	r1, sl, fp, r1
 800e53c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e540:	f8d9 2000 	ldr.w	r2, [r9]
 800e544:	4461      	add	r1, ip
 800e546:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e54a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e54e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e552:	b289      	uxth	r1, r1
 800e554:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e558:	4577      	cmp	r7, lr
 800e55a:	f849 1b04 	str.w	r1, [r9], #4
 800e55e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e562:	d8e2      	bhi.n	800e52a <__multiply+0xb2>
 800e564:	9a01      	ldr	r2, [sp, #4]
 800e566:	f845 c002 	str.w	ip, [r5, r2]
 800e56a:	9a03      	ldr	r2, [sp, #12]
 800e56c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e570:	3304      	adds	r3, #4
 800e572:	f1b9 0f00 	cmp.w	r9, #0
 800e576:	d020      	beq.n	800e5ba <__multiply+0x142>
 800e578:	6829      	ldr	r1, [r5, #0]
 800e57a:	f104 0c14 	add.w	ip, r4, #20
 800e57e:	46ae      	mov	lr, r5
 800e580:	f04f 0a00 	mov.w	sl, #0
 800e584:	f8bc b000 	ldrh.w	fp, [ip]
 800e588:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e58c:	fb09 220b 	mla	r2, r9, fp, r2
 800e590:	4492      	add	sl, r2
 800e592:	b289      	uxth	r1, r1
 800e594:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e598:	f84e 1b04 	str.w	r1, [lr], #4
 800e59c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e5a0:	f8be 1000 	ldrh.w	r1, [lr]
 800e5a4:	0c12      	lsrs	r2, r2, #16
 800e5a6:	fb09 1102 	mla	r1, r9, r2, r1
 800e5aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e5ae:	4567      	cmp	r7, ip
 800e5b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e5b4:	d8e6      	bhi.n	800e584 <__multiply+0x10c>
 800e5b6:	9a01      	ldr	r2, [sp, #4]
 800e5b8:	50a9      	str	r1, [r5, r2]
 800e5ba:	3504      	adds	r5, #4
 800e5bc:	e79a      	b.n	800e4f4 <__multiply+0x7c>
 800e5be:	3e01      	subs	r6, #1
 800e5c0:	e79c      	b.n	800e4fc <__multiply+0x84>
 800e5c2:	bf00      	nop
 800e5c4:	0800fa90 	.word	0x0800fa90
 800e5c8:	0800fb1c 	.word	0x0800fb1c

0800e5cc <__pow5mult>:
 800e5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5d0:	4615      	mov	r5, r2
 800e5d2:	f012 0203 	ands.w	r2, r2, #3
 800e5d6:	4606      	mov	r6, r0
 800e5d8:	460f      	mov	r7, r1
 800e5da:	d007      	beq.n	800e5ec <__pow5mult+0x20>
 800e5dc:	4c25      	ldr	r4, [pc, #148]	; (800e674 <__pow5mult+0xa8>)
 800e5de:	3a01      	subs	r2, #1
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e5e6:	f7ff fe51 	bl	800e28c <__multadd>
 800e5ea:	4607      	mov	r7, r0
 800e5ec:	10ad      	asrs	r5, r5, #2
 800e5ee:	d03d      	beq.n	800e66c <__pow5mult+0xa0>
 800e5f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e5f2:	b97c      	cbnz	r4, 800e614 <__pow5mult+0x48>
 800e5f4:	2010      	movs	r0, #16
 800e5f6:	f7ff fdc1 	bl	800e17c <malloc>
 800e5fa:	4602      	mov	r2, r0
 800e5fc:	6270      	str	r0, [r6, #36]	; 0x24
 800e5fe:	b928      	cbnz	r0, 800e60c <__pow5mult+0x40>
 800e600:	4b1d      	ldr	r3, [pc, #116]	; (800e678 <__pow5mult+0xac>)
 800e602:	481e      	ldr	r0, [pc, #120]	; (800e67c <__pow5mult+0xb0>)
 800e604:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e608:	f000 fc9c 	bl	800ef44 <__assert_func>
 800e60c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e610:	6004      	str	r4, [r0, #0]
 800e612:	60c4      	str	r4, [r0, #12]
 800e614:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e618:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e61c:	b94c      	cbnz	r4, 800e632 <__pow5mult+0x66>
 800e61e:	f240 2171 	movw	r1, #625	; 0x271
 800e622:	4630      	mov	r0, r6
 800e624:	f7ff ff12 	bl	800e44c <__i2b>
 800e628:	2300      	movs	r3, #0
 800e62a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e62e:	4604      	mov	r4, r0
 800e630:	6003      	str	r3, [r0, #0]
 800e632:	f04f 0900 	mov.w	r9, #0
 800e636:	07eb      	lsls	r3, r5, #31
 800e638:	d50a      	bpl.n	800e650 <__pow5mult+0x84>
 800e63a:	4639      	mov	r1, r7
 800e63c:	4622      	mov	r2, r4
 800e63e:	4630      	mov	r0, r6
 800e640:	f7ff ff1a 	bl	800e478 <__multiply>
 800e644:	4639      	mov	r1, r7
 800e646:	4680      	mov	r8, r0
 800e648:	4630      	mov	r0, r6
 800e64a:	f7ff fdfd 	bl	800e248 <_Bfree>
 800e64e:	4647      	mov	r7, r8
 800e650:	106d      	asrs	r5, r5, #1
 800e652:	d00b      	beq.n	800e66c <__pow5mult+0xa0>
 800e654:	6820      	ldr	r0, [r4, #0]
 800e656:	b938      	cbnz	r0, 800e668 <__pow5mult+0x9c>
 800e658:	4622      	mov	r2, r4
 800e65a:	4621      	mov	r1, r4
 800e65c:	4630      	mov	r0, r6
 800e65e:	f7ff ff0b 	bl	800e478 <__multiply>
 800e662:	6020      	str	r0, [r4, #0]
 800e664:	f8c0 9000 	str.w	r9, [r0]
 800e668:	4604      	mov	r4, r0
 800e66a:	e7e4      	b.n	800e636 <__pow5mult+0x6a>
 800e66c:	4638      	mov	r0, r7
 800e66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e672:	bf00      	nop
 800e674:	0800fc68 	.word	0x0800fc68
 800e678:	0800fa1e 	.word	0x0800fa1e
 800e67c:	0800fb1c 	.word	0x0800fb1c

0800e680 <__lshift>:
 800e680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e684:	460c      	mov	r4, r1
 800e686:	6849      	ldr	r1, [r1, #4]
 800e688:	6923      	ldr	r3, [r4, #16]
 800e68a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e68e:	68a3      	ldr	r3, [r4, #8]
 800e690:	4607      	mov	r7, r0
 800e692:	4691      	mov	r9, r2
 800e694:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e698:	f108 0601 	add.w	r6, r8, #1
 800e69c:	42b3      	cmp	r3, r6
 800e69e:	db0b      	blt.n	800e6b8 <__lshift+0x38>
 800e6a0:	4638      	mov	r0, r7
 800e6a2:	f7ff fd91 	bl	800e1c8 <_Balloc>
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	b948      	cbnz	r0, 800e6be <__lshift+0x3e>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	4b2a      	ldr	r3, [pc, #168]	; (800e758 <__lshift+0xd8>)
 800e6ae:	482b      	ldr	r0, [pc, #172]	; (800e75c <__lshift+0xdc>)
 800e6b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e6b4:	f000 fc46 	bl	800ef44 <__assert_func>
 800e6b8:	3101      	adds	r1, #1
 800e6ba:	005b      	lsls	r3, r3, #1
 800e6bc:	e7ee      	b.n	800e69c <__lshift+0x1c>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	f100 0114 	add.w	r1, r0, #20
 800e6c4:	f100 0210 	add.w	r2, r0, #16
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	4553      	cmp	r3, sl
 800e6cc:	db37      	blt.n	800e73e <__lshift+0xbe>
 800e6ce:	6920      	ldr	r0, [r4, #16]
 800e6d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6d4:	f104 0314 	add.w	r3, r4, #20
 800e6d8:	f019 091f 	ands.w	r9, r9, #31
 800e6dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e6e4:	d02f      	beq.n	800e746 <__lshift+0xc6>
 800e6e6:	f1c9 0e20 	rsb	lr, r9, #32
 800e6ea:	468a      	mov	sl, r1
 800e6ec:	f04f 0c00 	mov.w	ip, #0
 800e6f0:	681a      	ldr	r2, [r3, #0]
 800e6f2:	fa02 f209 	lsl.w	r2, r2, r9
 800e6f6:	ea42 020c 	orr.w	r2, r2, ip
 800e6fa:	f84a 2b04 	str.w	r2, [sl], #4
 800e6fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800e702:	4298      	cmp	r0, r3
 800e704:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e708:	d8f2      	bhi.n	800e6f0 <__lshift+0x70>
 800e70a:	1b03      	subs	r3, r0, r4
 800e70c:	3b15      	subs	r3, #21
 800e70e:	f023 0303 	bic.w	r3, r3, #3
 800e712:	3304      	adds	r3, #4
 800e714:	f104 0215 	add.w	r2, r4, #21
 800e718:	4290      	cmp	r0, r2
 800e71a:	bf38      	it	cc
 800e71c:	2304      	movcc	r3, #4
 800e71e:	f841 c003 	str.w	ip, [r1, r3]
 800e722:	f1bc 0f00 	cmp.w	ip, #0
 800e726:	d001      	beq.n	800e72c <__lshift+0xac>
 800e728:	f108 0602 	add.w	r6, r8, #2
 800e72c:	3e01      	subs	r6, #1
 800e72e:	4638      	mov	r0, r7
 800e730:	612e      	str	r6, [r5, #16]
 800e732:	4621      	mov	r1, r4
 800e734:	f7ff fd88 	bl	800e248 <_Bfree>
 800e738:	4628      	mov	r0, r5
 800e73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e73e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e742:	3301      	adds	r3, #1
 800e744:	e7c1      	b.n	800e6ca <__lshift+0x4a>
 800e746:	3904      	subs	r1, #4
 800e748:	f853 2b04 	ldr.w	r2, [r3], #4
 800e74c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e750:	4298      	cmp	r0, r3
 800e752:	d8f9      	bhi.n	800e748 <__lshift+0xc8>
 800e754:	e7ea      	b.n	800e72c <__lshift+0xac>
 800e756:	bf00      	nop
 800e758:	0800fa90 	.word	0x0800fa90
 800e75c:	0800fb1c 	.word	0x0800fb1c

0800e760 <__mcmp>:
 800e760:	b530      	push	{r4, r5, lr}
 800e762:	6902      	ldr	r2, [r0, #16]
 800e764:	690c      	ldr	r4, [r1, #16]
 800e766:	1b12      	subs	r2, r2, r4
 800e768:	d10e      	bne.n	800e788 <__mcmp+0x28>
 800e76a:	f100 0314 	add.w	r3, r0, #20
 800e76e:	3114      	adds	r1, #20
 800e770:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e774:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e778:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e77c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e780:	42a5      	cmp	r5, r4
 800e782:	d003      	beq.n	800e78c <__mcmp+0x2c>
 800e784:	d305      	bcc.n	800e792 <__mcmp+0x32>
 800e786:	2201      	movs	r2, #1
 800e788:	4610      	mov	r0, r2
 800e78a:	bd30      	pop	{r4, r5, pc}
 800e78c:	4283      	cmp	r3, r0
 800e78e:	d3f3      	bcc.n	800e778 <__mcmp+0x18>
 800e790:	e7fa      	b.n	800e788 <__mcmp+0x28>
 800e792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e796:	e7f7      	b.n	800e788 <__mcmp+0x28>

0800e798 <__mdiff>:
 800e798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79c:	460c      	mov	r4, r1
 800e79e:	4606      	mov	r6, r0
 800e7a0:	4611      	mov	r1, r2
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	4690      	mov	r8, r2
 800e7a6:	f7ff ffdb 	bl	800e760 <__mcmp>
 800e7aa:	1e05      	subs	r5, r0, #0
 800e7ac:	d110      	bne.n	800e7d0 <__mdiff+0x38>
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	f7ff fd09 	bl	800e1c8 <_Balloc>
 800e7b6:	b930      	cbnz	r0, 800e7c6 <__mdiff+0x2e>
 800e7b8:	4b3a      	ldr	r3, [pc, #232]	; (800e8a4 <__mdiff+0x10c>)
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	f240 2132 	movw	r1, #562	; 0x232
 800e7c0:	4839      	ldr	r0, [pc, #228]	; (800e8a8 <__mdiff+0x110>)
 800e7c2:	f000 fbbf 	bl	800ef44 <__assert_func>
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7d0:	bfa4      	itt	ge
 800e7d2:	4643      	movge	r3, r8
 800e7d4:	46a0      	movge	r8, r4
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e7dc:	bfa6      	itte	ge
 800e7de:	461c      	movge	r4, r3
 800e7e0:	2500      	movge	r5, #0
 800e7e2:	2501      	movlt	r5, #1
 800e7e4:	f7ff fcf0 	bl	800e1c8 <_Balloc>
 800e7e8:	b920      	cbnz	r0, 800e7f4 <__mdiff+0x5c>
 800e7ea:	4b2e      	ldr	r3, [pc, #184]	; (800e8a4 <__mdiff+0x10c>)
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e7f2:	e7e5      	b.n	800e7c0 <__mdiff+0x28>
 800e7f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e7f8:	6926      	ldr	r6, [r4, #16]
 800e7fa:	60c5      	str	r5, [r0, #12]
 800e7fc:	f104 0914 	add.w	r9, r4, #20
 800e800:	f108 0514 	add.w	r5, r8, #20
 800e804:	f100 0e14 	add.w	lr, r0, #20
 800e808:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e80c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e810:	f108 0210 	add.w	r2, r8, #16
 800e814:	46f2      	mov	sl, lr
 800e816:	2100      	movs	r1, #0
 800e818:	f859 3b04 	ldr.w	r3, [r9], #4
 800e81c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e820:	fa1f f883 	uxth.w	r8, r3
 800e824:	fa11 f18b 	uxtah	r1, r1, fp
 800e828:	0c1b      	lsrs	r3, r3, #16
 800e82a:	eba1 0808 	sub.w	r8, r1, r8
 800e82e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e832:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e836:	fa1f f888 	uxth.w	r8, r8
 800e83a:	1419      	asrs	r1, r3, #16
 800e83c:	454e      	cmp	r6, r9
 800e83e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e842:	f84a 3b04 	str.w	r3, [sl], #4
 800e846:	d8e7      	bhi.n	800e818 <__mdiff+0x80>
 800e848:	1b33      	subs	r3, r6, r4
 800e84a:	3b15      	subs	r3, #21
 800e84c:	f023 0303 	bic.w	r3, r3, #3
 800e850:	3304      	adds	r3, #4
 800e852:	3415      	adds	r4, #21
 800e854:	42a6      	cmp	r6, r4
 800e856:	bf38      	it	cc
 800e858:	2304      	movcc	r3, #4
 800e85a:	441d      	add	r5, r3
 800e85c:	4473      	add	r3, lr
 800e85e:	469e      	mov	lr, r3
 800e860:	462e      	mov	r6, r5
 800e862:	4566      	cmp	r6, ip
 800e864:	d30e      	bcc.n	800e884 <__mdiff+0xec>
 800e866:	f10c 0203 	add.w	r2, ip, #3
 800e86a:	1b52      	subs	r2, r2, r5
 800e86c:	f022 0203 	bic.w	r2, r2, #3
 800e870:	3d03      	subs	r5, #3
 800e872:	45ac      	cmp	ip, r5
 800e874:	bf38      	it	cc
 800e876:	2200      	movcc	r2, #0
 800e878:	441a      	add	r2, r3
 800e87a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e87e:	b17b      	cbz	r3, 800e8a0 <__mdiff+0x108>
 800e880:	6107      	str	r7, [r0, #16]
 800e882:	e7a3      	b.n	800e7cc <__mdiff+0x34>
 800e884:	f856 8b04 	ldr.w	r8, [r6], #4
 800e888:	fa11 f288 	uxtah	r2, r1, r8
 800e88c:	1414      	asrs	r4, r2, #16
 800e88e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e892:	b292      	uxth	r2, r2
 800e894:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e898:	f84e 2b04 	str.w	r2, [lr], #4
 800e89c:	1421      	asrs	r1, r4, #16
 800e89e:	e7e0      	b.n	800e862 <__mdiff+0xca>
 800e8a0:	3f01      	subs	r7, #1
 800e8a2:	e7ea      	b.n	800e87a <__mdiff+0xe2>
 800e8a4:	0800fa90 	.word	0x0800fa90
 800e8a8:	0800fb1c 	.word	0x0800fb1c

0800e8ac <__ulp>:
 800e8ac:	b082      	sub	sp, #8
 800e8ae:	ed8d 0b00 	vstr	d0, [sp]
 800e8b2:	9b01      	ldr	r3, [sp, #4]
 800e8b4:	4912      	ldr	r1, [pc, #72]	; (800e900 <__ulp+0x54>)
 800e8b6:	4019      	ands	r1, r3
 800e8b8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e8bc:	2900      	cmp	r1, #0
 800e8be:	dd05      	ble.n	800e8cc <__ulp+0x20>
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	ec43 2b10 	vmov	d0, r2, r3
 800e8c8:	b002      	add	sp, #8
 800e8ca:	4770      	bx	lr
 800e8cc:	4249      	negs	r1, r1
 800e8ce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e8d2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e8d6:	f04f 0200 	mov.w	r2, #0
 800e8da:	f04f 0300 	mov.w	r3, #0
 800e8de:	da04      	bge.n	800e8ea <__ulp+0x3e>
 800e8e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e8e4:	fa41 f300 	asr.w	r3, r1, r0
 800e8e8:	e7ec      	b.n	800e8c4 <__ulp+0x18>
 800e8ea:	f1a0 0114 	sub.w	r1, r0, #20
 800e8ee:	291e      	cmp	r1, #30
 800e8f0:	bfda      	itte	le
 800e8f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e8f6:	fa20 f101 	lsrle.w	r1, r0, r1
 800e8fa:	2101      	movgt	r1, #1
 800e8fc:	460a      	mov	r2, r1
 800e8fe:	e7e1      	b.n	800e8c4 <__ulp+0x18>
 800e900:	7ff00000 	.word	0x7ff00000

0800e904 <__b2d>:
 800e904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e906:	6905      	ldr	r5, [r0, #16]
 800e908:	f100 0714 	add.w	r7, r0, #20
 800e90c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e910:	1f2e      	subs	r6, r5, #4
 800e912:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e916:	4620      	mov	r0, r4
 800e918:	f7ff fd48 	bl	800e3ac <__hi0bits>
 800e91c:	f1c0 0320 	rsb	r3, r0, #32
 800e920:	280a      	cmp	r0, #10
 800e922:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e9a0 <__b2d+0x9c>
 800e926:	600b      	str	r3, [r1, #0]
 800e928:	dc14      	bgt.n	800e954 <__b2d+0x50>
 800e92a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e92e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e932:	42b7      	cmp	r7, r6
 800e934:	ea41 030c 	orr.w	r3, r1, ip
 800e938:	bf34      	ite	cc
 800e93a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e93e:	2100      	movcs	r1, #0
 800e940:	3015      	adds	r0, #21
 800e942:	fa04 f000 	lsl.w	r0, r4, r0
 800e946:	fa21 f10e 	lsr.w	r1, r1, lr
 800e94a:	ea40 0201 	orr.w	r2, r0, r1
 800e94e:	ec43 2b10 	vmov	d0, r2, r3
 800e952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e954:	42b7      	cmp	r7, r6
 800e956:	bf3a      	itte	cc
 800e958:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e95c:	f1a5 0608 	subcc.w	r6, r5, #8
 800e960:	2100      	movcs	r1, #0
 800e962:	380b      	subs	r0, #11
 800e964:	d017      	beq.n	800e996 <__b2d+0x92>
 800e966:	f1c0 0c20 	rsb	ip, r0, #32
 800e96a:	fa04 f500 	lsl.w	r5, r4, r0
 800e96e:	42be      	cmp	r6, r7
 800e970:	fa21 f40c 	lsr.w	r4, r1, ip
 800e974:	ea45 0504 	orr.w	r5, r5, r4
 800e978:	bf8c      	ite	hi
 800e97a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e97e:	2400      	movls	r4, #0
 800e980:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e984:	fa01 f000 	lsl.w	r0, r1, r0
 800e988:	fa24 f40c 	lsr.w	r4, r4, ip
 800e98c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e990:	ea40 0204 	orr.w	r2, r0, r4
 800e994:	e7db      	b.n	800e94e <__b2d+0x4a>
 800e996:	ea44 030c 	orr.w	r3, r4, ip
 800e99a:	460a      	mov	r2, r1
 800e99c:	e7d7      	b.n	800e94e <__b2d+0x4a>
 800e99e:	bf00      	nop
 800e9a0:	3ff00000 	.word	0x3ff00000

0800e9a4 <__d2b>:
 800e9a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9a8:	4689      	mov	r9, r1
 800e9aa:	2101      	movs	r1, #1
 800e9ac:	ec57 6b10 	vmov	r6, r7, d0
 800e9b0:	4690      	mov	r8, r2
 800e9b2:	f7ff fc09 	bl	800e1c8 <_Balloc>
 800e9b6:	4604      	mov	r4, r0
 800e9b8:	b930      	cbnz	r0, 800e9c8 <__d2b+0x24>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	4b25      	ldr	r3, [pc, #148]	; (800ea54 <__d2b+0xb0>)
 800e9be:	4826      	ldr	r0, [pc, #152]	; (800ea58 <__d2b+0xb4>)
 800e9c0:	f240 310a 	movw	r1, #778	; 0x30a
 800e9c4:	f000 fabe 	bl	800ef44 <__assert_func>
 800e9c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e9cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e9d0:	bb35      	cbnz	r5, 800ea20 <__d2b+0x7c>
 800e9d2:	2e00      	cmp	r6, #0
 800e9d4:	9301      	str	r3, [sp, #4]
 800e9d6:	d028      	beq.n	800ea2a <__d2b+0x86>
 800e9d8:	4668      	mov	r0, sp
 800e9da:	9600      	str	r6, [sp, #0]
 800e9dc:	f7ff fd06 	bl	800e3ec <__lo0bits>
 800e9e0:	9900      	ldr	r1, [sp, #0]
 800e9e2:	b300      	cbz	r0, 800ea26 <__d2b+0x82>
 800e9e4:	9a01      	ldr	r2, [sp, #4]
 800e9e6:	f1c0 0320 	rsb	r3, r0, #32
 800e9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e9ee:	430b      	orrs	r3, r1
 800e9f0:	40c2      	lsrs	r2, r0
 800e9f2:	6163      	str	r3, [r4, #20]
 800e9f4:	9201      	str	r2, [sp, #4]
 800e9f6:	9b01      	ldr	r3, [sp, #4]
 800e9f8:	61a3      	str	r3, [r4, #24]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	bf14      	ite	ne
 800e9fe:	2202      	movne	r2, #2
 800ea00:	2201      	moveq	r2, #1
 800ea02:	6122      	str	r2, [r4, #16]
 800ea04:	b1d5      	cbz	r5, 800ea3c <__d2b+0x98>
 800ea06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea0a:	4405      	add	r5, r0
 800ea0c:	f8c9 5000 	str.w	r5, [r9]
 800ea10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea14:	f8c8 0000 	str.w	r0, [r8]
 800ea18:	4620      	mov	r0, r4
 800ea1a:	b003      	add	sp, #12
 800ea1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea24:	e7d5      	b.n	800e9d2 <__d2b+0x2e>
 800ea26:	6161      	str	r1, [r4, #20]
 800ea28:	e7e5      	b.n	800e9f6 <__d2b+0x52>
 800ea2a:	a801      	add	r0, sp, #4
 800ea2c:	f7ff fcde 	bl	800e3ec <__lo0bits>
 800ea30:	9b01      	ldr	r3, [sp, #4]
 800ea32:	6163      	str	r3, [r4, #20]
 800ea34:	2201      	movs	r2, #1
 800ea36:	6122      	str	r2, [r4, #16]
 800ea38:	3020      	adds	r0, #32
 800ea3a:	e7e3      	b.n	800ea04 <__d2b+0x60>
 800ea3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea44:	f8c9 0000 	str.w	r0, [r9]
 800ea48:	6918      	ldr	r0, [r3, #16]
 800ea4a:	f7ff fcaf 	bl	800e3ac <__hi0bits>
 800ea4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea52:	e7df      	b.n	800ea14 <__d2b+0x70>
 800ea54:	0800fa90 	.word	0x0800fa90
 800ea58:	0800fb1c 	.word	0x0800fb1c

0800ea5c <__ratio>:
 800ea5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea60:	4688      	mov	r8, r1
 800ea62:	4669      	mov	r1, sp
 800ea64:	4681      	mov	r9, r0
 800ea66:	f7ff ff4d 	bl	800e904 <__b2d>
 800ea6a:	a901      	add	r1, sp, #4
 800ea6c:	4640      	mov	r0, r8
 800ea6e:	ec55 4b10 	vmov	r4, r5, d0
 800ea72:	f7ff ff47 	bl	800e904 <__b2d>
 800ea76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea7a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ea7e:	eba3 0c02 	sub.w	ip, r3, r2
 800ea82:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ea86:	1a9b      	subs	r3, r3, r2
 800ea88:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ea8c:	ec51 0b10 	vmov	r0, r1, d0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	bfd6      	itet	le
 800ea94:	460a      	movle	r2, r1
 800ea96:	462a      	movgt	r2, r5
 800ea98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea9c:	468b      	mov	fp, r1
 800ea9e:	462f      	mov	r7, r5
 800eaa0:	bfd4      	ite	le
 800eaa2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eaa6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eaaa:	4620      	mov	r0, r4
 800eaac:	ee10 2a10 	vmov	r2, s0
 800eab0:	465b      	mov	r3, fp
 800eab2:	4639      	mov	r1, r7
 800eab4:	f7f1 feca 	bl	800084c <__aeabi_ddiv>
 800eab8:	ec41 0b10 	vmov	d0, r0, r1
 800eabc:	b003      	add	sp, #12
 800eabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eac2 <__copybits>:
 800eac2:	3901      	subs	r1, #1
 800eac4:	b570      	push	{r4, r5, r6, lr}
 800eac6:	1149      	asrs	r1, r1, #5
 800eac8:	6914      	ldr	r4, [r2, #16]
 800eaca:	3101      	adds	r1, #1
 800eacc:	f102 0314 	add.w	r3, r2, #20
 800ead0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ead4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ead8:	1f05      	subs	r5, r0, #4
 800eada:	42a3      	cmp	r3, r4
 800eadc:	d30c      	bcc.n	800eaf8 <__copybits+0x36>
 800eade:	1aa3      	subs	r3, r4, r2
 800eae0:	3b11      	subs	r3, #17
 800eae2:	f023 0303 	bic.w	r3, r3, #3
 800eae6:	3211      	adds	r2, #17
 800eae8:	42a2      	cmp	r2, r4
 800eaea:	bf88      	it	hi
 800eaec:	2300      	movhi	r3, #0
 800eaee:	4418      	add	r0, r3
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	4288      	cmp	r0, r1
 800eaf4:	d305      	bcc.n	800eb02 <__copybits+0x40>
 800eaf6:	bd70      	pop	{r4, r5, r6, pc}
 800eaf8:	f853 6b04 	ldr.w	r6, [r3], #4
 800eafc:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb00:	e7eb      	b.n	800eada <__copybits+0x18>
 800eb02:	f840 3b04 	str.w	r3, [r0], #4
 800eb06:	e7f4      	b.n	800eaf2 <__copybits+0x30>

0800eb08 <__any_on>:
 800eb08:	f100 0214 	add.w	r2, r0, #20
 800eb0c:	6900      	ldr	r0, [r0, #16]
 800eb0e:	114b      	asrs	r3, r1, #5
 800eb10:	4298      	cmp	r0, r3
 800eb12:	b510      	push	{r4, lr}
 800eb14:	db11      	blt.n	800eb3a <__any_on+0x32>
 800eb16:	dd0a      	ble.n	800eb2e <__any_on+0x26>
 800eb18:	f011 011f 	ands.w	r1, r1, #31
 800eb1c:	d007      	beq.n	800eb2e <__any_on+0x26>
 800eb1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb22:	fa24 f001 	lsr.w	r0, r4, r1
 800eb26:	fa00 f101 	lsl.w	r1, r0, r1
 800eb2a:	428c      	cmp	r4, r1
 800eb2c:	d10b      	bne.n	800eb46 <__any_on+0x3e>
 800eb2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d803      	bhi.n	800eb3e <__any_on+0x36>
 800eb36:	2000      	movs	r0, #0
 800eb38:	bd10      	pop	{r4, pc}
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	e7f7      	b.n	800eb2e <__any_on+0x26>
 800eb3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb42:	2900      	cmp	r1, #0
 800eb44:	d0f5      	beq.n	800eb32 <__any_on+0x2a>
 800eb46:	2001      	movs	r0, #1
 800eb48:	e7f6      	b.n	800eb38 <__any_on+0x30>

0800eb4a <_calloc_r>:
 800eb4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb4c:	fba1 2402 	umull	r2, r4, r1, r2
 800eb50:	b94c      	cbnz	r4, 800eb66 <_calloc_r+0x1c>
 800eb52:	4611      	mov	r1, r2
 800eb54:	9201      	str	r2, [sp, #4]
 800eb56:	f7fc f9ad 	bl	800aeb4 <_malloc_r>
 800eb5a:	9a01      	ldr	r2, [sp, #4]
 800eb5c:	4605      	mov	r5, r0
 800eb5e:	b930      	cbnz	r0, 800eb6e <_calloc_r+0x24>
 800eb60:	4628      	mov	r0, r5
 800eb62:	b003      	add	sp, #12
 800eb64:	bd30      	pop	{r4, r5, pc}
 800eb66:	220c      	movs	r2, #12
 800eb68:	6002      	str	r2, [r0, #0]
 800eb6a:	2500      	movs	r5, #0
 800eb6c:	e7f8      	b.n	800eb60 <_calloc_r+0x16>
 800eb6e:	4621      	mov	r1, r4
 800eb70:	f7fc f977 	bl	800ae62 <memset>
 800eb74:	e7f4      	b.n	800eb60 <_calloc_r+0x16>
	...

0800eb78 <_free_r>:
 800eb78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb7a:	2900      	cmp	r1, #0
 800eb7c:	d044      	beq.n	800ec08 <_free_r+0x90>
 800eb7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb82:	9001      	str	r0, [sp, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	f1a1 0404 	sub.w	r4, r1, #4
 800eb8a:	bfb8      	it	lt
 800eb8c:	18e4      	addlt	r4, r4, r3
 800eb8e:	f7ff fb0f 	bl	800e1b0 <__malloc_lock>
 800eb92:	4a1e      	ldr	r2, [pc, #120]	; (800ec0c <_free_r+0x94>)
 800eb94:	9801      	ldr	r0, [sp, #4]
 800eb96:	6813      	ldr	r3, [r2, #0]
 800eb98:	b933      	cbnz	r3, 800eba8 <_free_r+0x30>
 800eb9a:	6063      	str	r3, [r4, #4]
 800eb9c:	6014      	str	r4, [r2, #0]
 800eb9e:	b003      	add	sp, #12
 800eba0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eba4:	f7ff bb0a 	b.w	800e1bc <__malloc_unlock>
 800eba8:	42a3      	cmp	r3, r4
 800ebaa:	d908      	bls.n	800ebbe <_free_r+0x46>
 800ebac:	6825      	ldr	r5, [r4, #0]
 800ebae:	1961      	adds	r1, r4, r5
 800ebb0:	428b      	cmp	r3, r1
 800ebb2:	bf01      	itttt	eq
 800ebb4:	6819      	ldreq	r1, [r3, #0]
 800ebb6:	685b      	ldreq	r3, [r3, #4]
 800ebb8:	1949      	addeq	r1, r1, r5
 800ebba:	6021      	streq	r1, [r4, #0]
 800ebbc:	e7ed      	b.n	800eb9a <_free_r+0x22>
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	b10b      	cbz	r3, 800ebc8 <_free_r+0x50>
 800ebc4:	42a3      	cmp	r3, r4
 800ebc6:	d9fa      	bls.n	800ebbe <_free_r+0x46>
 800ebc8:	6811      	ldr	r1, [r2, #0]
 800ebca:	1855      	adds	r5, r2, r1
 800ebcc:	42a5      	cmp	r5, r4
 800ebce:	d10b      	bne.n	800ebe8 <_free_r+0x70>
 800ebd0:	6824      	ldr	r4, [r4, #0]
 800ebd2:	4421      	add	r1, r4
 800ebd4:	1854      	adds	r4, r2, r1
 800ebd6:	42a3      	cmp	r3, r4
 800ebd8:	6011      	str	r1, [r2, #0]
 800ebda:	d1e0      	bne.n	800eb9e <_free_r+0x26>
 800ebdc:	681c      	ldr	r4, [r3, #0]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	6053      	str	r3, [r2, #4]
 800ebe2:	4421      	add	r1, r4
 800ebe4:	6011      	str	r1, [r2, #0]
 800ebe6:	e7da      	b.n	800eb9e <_free_r+0x26>
 800ebe8:	d902      	bls.n	800ebf0 <_free_r+0x78>
 800ebea:	230c      	movs	r3, #12
 800ebec:	6003      	str	r3, [r0, #0]
 800ebee:	e7d6      	b.n	800eb9e <_free_r+0x26>
 800ebf0:	6825      	ldr	r5, [r4, #0]
 800ebf2:	1961      	adds	r1, r4, r5
 800ebf4:	428b      	cmp	r3, r1
 800ebf6:	bf04      	itt	eq
 800ebf8:	6819      	ldreq	r1, [r3, #0]
 800ebfa:	685b      	ldreq	r3, [r3, #4]
 800ebfc:	6063      	str	r3, [r4, #4]
 800ebfe:	bf04      	itt	eq
 800ec00:	1949      	addeq	r1, r1, r5
 800ec02:	6021      	streq	r1, [r4, #0]
 800ec04:	6054      	str	r4, [r2, #4]
 800ec06:	e7ca      	b.n	800eb9e <_free_r+0x26>
 800ec08:	b003      	add	sp, #12
 800ec0a:	bd30      	pop	{r4, r5, pc}
 800ec0c:	20001e18 	.word	0x20001e18

0800ec10 <__ssputs_r>:
 800ec10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec14:	688e      	ldr	r6, [r1, #8]
 800ec16:	429e      	cmp	r6, r3
 800ec18:	4682      	mov	sl, r0
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	4690      	mov	r8, r2
 800ec1e:	461f      	mov	r7, r3
 800ec20:	d838      	bhi.n	800ec94 <__ssputs_r+0x84>
 800ec22:	898a      	ldrh	r2, [r1, #12]
 800ec24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec28:	d032      	beq.n	800ec90 <__ssputs_r+0x80>
 800ec2a:	6825      	ldr	r5, [r4, #0]
 800ec2c:	6909      	ldr	r1, [r1, #16]
 800ec2e:	eba5 0901 	sub.w	r9, r5, r1
 800ec32:	6965      	ldr	r5, [r4, #20]
 800ec34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	444b      	add	r3, r9
 800ec40:	106d      	asrs	r5, r5, #1
 800ec42:	429d      	cmp	r5, r3
 800ec44:	bf38      	it	cc
 800ec46:	461d      	movcc	r5, r3
 800ec48:	0553      	lsls	r3, r2, #21
 800ec4a:	d531      	bpl.n	800ecb0 <__ssputs_r+0xa0>
 800ec4c:	4629      	mov	r1, r5
 800ec4e:	f7fc f931 	bl	800aeb4 <_malloc_r>
 800ec52:	4606      	mov	r6, r0
 800ec54:	b950      	cbnz	r0, 800ec6c <__ssputs_r+0x5c>
 800ec56:	230c      	movs	r3, #12
 800ec58:	f8ca 3000 	str.w	r3, [sl]
 800ec5c:	89a3      	ldrh	r3, [r4, #12]
 800ec5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec62:	81a3      	strh	r3, [r4, #12]
 800ec64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec6c:	6921      	ldr	r1, [r4, #16]
 800ec6e:	464a      	mov	r2, r9
 800ec70:	f7fc f8e9 	bl	800ae46 <memcpy>
 800ec74:	89a3      	ldrh	r3, [r4, #12]
 800ec76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec7e:	81a3      	strh	r3, [r4, #12]
 800ec80:	6126      	str	r6, [r4, #16]
 800ec82:	6165      	str	r5, [r4, #20]
 800ec84:	444e      	add	r6, r9
 800ec86:	eba5 0509 	sub.w	r5, r5, r9
 800ec8a:	6026      	str	r6, [r4, #0]
 800ec8c:	60a5      	str	r5, [r4, #8]
 800ec8e:	463e      	mov	r6, r7
 800ec90:	42be      	cmp	r6, r7
 800ec92:	d900      	bls.n	800ec96 <__ssputs_r+0x86>
 800ec94:	463e      	mov	r6, r7
 800ec96:	6820      	ldr	r0, [r4, #0]
 800ec98:	4632      	mov	r2, r6
 800ec9a:	4641      	mov	r1, r8
 800ec9c:	f000 f982 	bl	800efa4 <memmove>
 800eca0:	68a3      	ldr	r3, [r4, #8]
 800eca2:	1b9b      	subs	r3, r3, r6
 800eca4:	60a3      	str	r3, [r4, #8]
 800eca6:	6823      	ldr	r3, [r4, #0]
 800eca8:	4433      	add	r3, r6
 800ecaa:	6023      	str	r3, [r4, #0]
 800ecac:	2000      	movs	r0, #0
 800ecae:	e7db      	b.n	800ec68 <__ssputs_r+0x58>
 800ecb0:	462a      	mov	r2, r5
 800ecb2:	f000 f991 	bl	800efd8 <_realloc_r>
 800ecb6:	4606      	mov	r6, r0
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d1e1      	bne.n	800ec80 <__ssputs_r+0x70>
 800ecbc:	6921      	ldr	r1, [r4, #16]
 800ecbe:	4650      	mov	r0, sl
 800ecc0:	f7ff ff5a 	bl	800eb78 <_free_r>
 800ecc4:	e7c7      	b.n	800ec56 <__ssputs_r+0x46>
	...

0800ecc8 <_svfiprintf_r>:
 800ecc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eccc:	4698      	mov	r8, r3
 800ecce:	898b      	ldrh	r3, [r1, #12]
 800ecd0:	061b      	lsls	r3, r3, #24
 800ecd2:	b09d      	sub	sp, #116	; 0x74
 800ecd4:	4607      	mov	r7, r0
 800ecd6:	460d      	mov	r5, r1
 800ecd8:	4614      	mov	r4, r2
 800ecda:	d50e      	bpl.n	800ecfa <_svfiprintf_r+0x32>
 800ecdc:	690b      	ldr	r3, [r1, #16]
 800ecde:	b963      	cbnz	r3, 800ecfa <_svfiprintf_r+0x32>
 800ece0:	2140      	movs	r1, #64	; 0x40
 800ece2:	f7fc f8e7 	bl	800aeb4 <_malloc_r>
 800ece6:	6028      	str	r0, [r5, #0]
 800ece8:	6128      	str	r0, [r5, #16]
 800ecea:	b920      	cbnz	r0, 800ecf6 <_svfiprintf_r+0x2e>
 800ecec:	230c      	movs	r3, #12
 800ecee:	603b      	str	r3, [r7, #0]
 800ecf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecf4:	e0d1      	b.n	800ee9a <_svfiprintf_r+0x1d2>
 800ecf6:	2340      	movs	r3, #64	; 0x40
 800ecf8:	616b      	str	r3, [r5, #20]
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	9309      	str	r3, [sp, #36]	; 0x24
 800ecfe:	2320      	movs	r3, #32
 800ed00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed04:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed08:	2330      	movs	r3, #48	; 0x30
 800ed0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eeb4 <_svfiprintf_r+0x1ec>
 800ed0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed12:	f04f 0901 	mov.w	r9, #1
 800ed16:	4623      	mov	r3, r4
 800ed18:	469a      	mov	sl, r3
 800ed1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed1e:	b10a      	cbz	r2, 800ed24 <_svfiprintf_r+0x5c>
 800ed20:	2a25      	cmp	r2, #37	; 0x25
 800ed22:	d1f9      	bne.n	800ed18 <_svfiprintf_r+0x50>
 800ed24:	ebba 0b04 	subs.w	fp, sl, r4
 800ed28:	d00b      	beq.n	800ed42 <_svfiprintf_r+0x7a>
 800ed2a:	465b      	mov	r3, fp
 800ed2c:	4622      	mov	r2, r4
 800ed2e:	4629      	mov	r1, r5
 800ed30:	4638      	mov	r0, r7
 800ed32:	f7ff ff6d 	bl	800ec10 <__ssputs_r>
 800ed36:	3001      	adds	r0, #1
 800ed38:	f000 80aa 	beq.w	800ee90 <_svfiprintf_r+0x1c8>
 800ed3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed3e:	445a      	add	r2, fp
 800ed40:	9209      	str	r2, [sp, #36]	; 0x24
 800ed42:	f89a 3000 	ldrb.w	r3, [sl]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f000 80a2 	beq.w	800ee90 <_svfiprintf_r+0x1c8>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed56:	f10a 0a01 	add.w	sl, sl, #1
 800ed5a:	9304      	str	r3, [sp, #16]
 800ed5c:	9307      	str	r3, [sp, #28]
 800ed5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed62:	931a      	str	r3, [sp, #104]	; 0x68
 800ed64:	4654      	mov	r4, sl
 800ed66:	2205      	movs	r2, #5
 800ed68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed6c:	4851      	ldr	r0, [pc, #324]	; (800eeb4 <_svfiprintf_r+0x1ec>)
 800ed6e:	f7f1 fa37 	bl	80001e0 <memchr>
 800ed72:	9a04      	ldr	r2, [sp, #16]
 800ed74:	b9d8      	cbnz	r0, 800edae <_svfiprintf_r+0xe6>
 800ed76:	06d0      	lsls	r0, r2, #27
 800ed78:	bf44      	itt	mi
 800ed7a:	2320      	movmi	r3, #32
 800ed7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed80:	0711      	lsls	r1, r2, #28
 800ed82:	bf44      	itt	mi
 800ed84:	232b      	movmi	r3, #43	; 0x2b
 800ed86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ed8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ed90:	d015      	beq.n	800edbe <_svfiprintf_r+0xf6>
 800ed92:	9a07      	ldr	r2, [sp, #28]
 800ed94:	4654      	mov	r4, sl
 800ed96:	2000      	movs	r0, #0
 800ed98:	f04f 0c0a 	mov.w	ip, #10
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eda2:	3b30      	subs	r3, #48	; 0x30
 800eda4:	2b09      	cmp	r3, #9
 800eda6:	d94e      	bls.n	800ee46 <_svfiprintf_r+0x17e>
 800eda8:	b1b0      	cbz	r0, 800edd8 <_svfiprintf_r+0x110>
 800edaa:	9207      	str	r2, [sp, #28]
 800edac:	e014      	b.n	800edd8 <_svfiprintf_r+0x110>
 800edae:	eba0 0308 	sub.w	r3, r0, r8
 800edb2:	fa09 f303 	lsl.w	r3, r9, r3
 800edb6:	4313      	orrs	r3, r2
 800edb8:	9304      	str	r3, [sp, #16]
 800edba:	46a2      	mov	sl, r4
 800edbc:	e7d2      	b.n	800ed64 <_svfiprintf_r+0x9c>
 800edbe:	9b03      	ldr	r3, [sp, #12]
 800edc0:	1d19      	adds	r1, r3, #4
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	9103      	str	r1, [sp, #12]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	bfbb      	ittet	lt
 800edca:	425b      	neglt	r3, r3
 800edcc:	f042 0202 	orrlt.w	r2, r2, #2
 800edd0:	9307      	strge	r3, [sp, #28]
 800edd2:	9307      	strlt	r3, [sp, #28]
 800edd4:	bfb8      	it	lt
 800edd6:	9204      	strlt	r2, [sp, #16]
 800edd8:	7823      	ldrb	r3, [r4, #0]
 800edda:	2b2e      	cmp	r3, #46	; 0x2e
 800eddc:	d10c      	bne.n	800edf8 <_svfiprintf_r+0x130>
 800edde:	7863      	ldrb	r3, [r4, #1]
 800ede0:	2b2a      	cmp	r3, #42	; 0x2a
 800ede2:	d135      	bne.n	800ee50 <_svfiprintf_r+0x188>
 800ede4:	9b03      	ldr	r3, [sp, #12]
 800ede6:	1d1a      	adds	r2, r3, #4
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	9203      	str	r2, [sp, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	bfb8      	it	lt
 800edf0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800edf4:	3402      	adds	r4, #2
 800edf6:	9305      	str	r3, [sp, #20]
 800edf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eec4 <_svfiprintf_r+0x1fc>
 800edfc:	7821      	ldrb	r1, [r4, #0]
 800edfe:	2203      	movs	r2, #3
 800ee00:	4650      	mov	r0, sl
 800ee02:	f7f1 f9ed 	bl	80001e0 <memchr>
 800ee06:	b140      	cbz	r0, 800ee1a <_svfiprintf_r+0x152>
 800ee08:	2340      	movs	r3, #64	; 0x40
 800ee0a:	eba0 000a 	sub.w	r0, r0, sl
 800ee0e:	fa03 f000 	lsl.w	r0, r3, r0
 800ee12:	9b04      	ldr	r3, [sp, #16]
 800ee14:	4303      	orrs	r3, r0
 800ee16:	3401      	adds	r4, #1
 800ee18:	9304      	str	r3, [sp, #16]
 800ee1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee1e:	4826      	ldr	r0, [pc, #152]	; (800eeb8 <_svfiprintf_r+0x1f0>)
 800ee20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee24:	2206      	movs	r2, #6
 800ee26:	f7f1 f9db 	bl	80001e0 <memchr>
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	d038      	beq.n	800eea0 <_svfiprintf_r+0x1d8>
 800ee2e:	4b23      	ldr	r3, [pc, #140]	; (800eebc <_svfiprintf_r+0x1f4>)
 800ee30:	bb1b      	cbnz	r3, 800ee7a <_svfiprintf_r+0x1b2>
 800ee32:	9b03      	ldr	r3, [sp, #12]
 800ee34:	3307      	adds	r3, #7
 800ee36:	f023 0307 	bic.w	r3, r3, #7
 800ee3a:	3308      	adds	r3, #8
 800ee3c:	9303      	str	r3, [sp, #12]
 800ee3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee40:	4433      	add	r3, r6
 800ee42:	9309      	str	r3, [sp, #36]	; 0x24
 800ee44:	e767      	b.n	800ed16 <_svfiprintf_r+0x4e>
 800ee46:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee4a:	460c      	mov	r4, r1
 800ee4c:	2001      	movs	r0, #1
 800ee4e:	e7a5      	b.n	800ed9c <_svfiprintf_r+0xd4>
 800ee50:	2300      	movs	r3, #0
 800ee52:	3401      	adds	r4, #1
 800ee54:	9305      	str	r3, [sp, #20]
 800ee56:	4619      	mov	r1, r3
 800ee58:	f04f 0c0a 	mov.w	ip, #10
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee62:	3a30      	subs	r2, #48	; 0x30
 800ee64:	2a09      	cmp	r2, #9
 800ee66:	d903      	bls.n	800ee70 <_svfiprintf_r+0x1a8>
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d0c5      	beq.n	800edf8 <_svfiprintf_r+0x130>
 800ee6c:	9105      	str	r1, [sp, #20]
 800ee6e:	e7c3      	b.n	800edf8 <_svfiprintf_r+0x130>
 800ee70:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee74:	4604      	mov	r4, r0
 800ee76:	2301      	movs	r3, #1
 800ee78:	e7f0      	b.n	800ee5c <_svfiprintf_r+0x194>
 800ee7a:	ab03      	add	r3, sp, #12
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	462a      	mov	r2, r5
 800ee80:	4b0f      	ldr	r3, [pc, #60]	; (800eec0 <_svfiprintf_r+0x1f8>)
 800ee82:	a904      	add	r1, sp, #16
 800ee84:	4638      	mov	r0, r7
 800ee86:	f7fc f929 	bl	800b0dc <_printf_float>
 800ee8a:	1c42      	adds	r2, r0, #1
 800ee8c:	4606      	mov	r6, r0
 800ee8e:	d1d6      	bne.n	800ee3e <_svfiprintf_r+0x176>
 800ee90:	89ab      	ldrh	r3, [r5, #12]
 800ee92:	065b      	lsls	r3, r3, #25
 800ee94:	f53f af2c 	bmi.w	800ecf0 <_svfiprintf_r+0x28>
 800ee98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee9a:	b01d      	add	sp, #116	; 0x74
 800ee9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea0:	ab03      	add	r3, sp, #12
 800eea2:	9300      	str	r3, [sp, #0]
 800eea4:	462a      	mov	r2, r5
 800eea6:	4b06      	ldr	r3, [pc, #24]	; (800eec0 <_svfiprintf_r+0x1f8>)
 800eea8:	a904      	add	r1, sp, #16
 800eeaa:	4638      	mov	r0, r7
 800eeac:	f7fc fbba 	bl	800b624 <_printf_i>
 800eeb0:	e7eb      	b.n	800ee8a <_svfiprintf_r+0x1c2>
 800eeb2:	bf00      	nop
 800eeb4:	0800fc74 	.word	0x0800fc74
 800eeb8:	0800fc7e 	.word	0x0800fc7e
 800eebc:	0800b0dd 	.word	0x0800b0dd
 800eec0:	0800ec11 	.word	0x0800ec11
 800eec4:	0800fc7a 	.word	0x0800fc7a

0800eec8 <_read_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d07      	ldr	r5, [pc, #28]	; (800eee8 <_read_r+0x20>)
 800eecc:	4604      	mov	r4, r0
 800eece:	4608      	mov	r0, r1
 800eed0:	4611      	mov	r1, r2
 800eed2:	2200      	movs	r2, #0
 800eed4:	602a      	str	r2, [r5, #0]
 800eed6:	461a      	mov	r2, r3
 800eed8:	f7f3 f8f8 	bl	80020cc <_read>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_read_r+0x1e>
 800eee0:	682b      	ldr	r3, [r5, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_read_r+0x1e>
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	20001e20 	.word	0x20001e20
 800eeec:	00000000 	.word	0x00000000

0800eef0 <nan>:
 800eef0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eef8 <nan+0x8>
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	00000000 	.word	0x00000000
 800eefc:	7ff80000 	.word	0x7ff80000

0800ef00 <strncmp>:
 800ef00:	b510      	push	{r4, lr}
 800ef02:	b17a      	cbz	r2, 800ef24 <strncmp+0x24>
 800ef04:	4603      	mov	r3, r0
 800ef06:	3901      	subs	r1, #1
 800ef08:	1884      	adds	r4, r0, r2
 800ef0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ef12:	4290      	cmp	r0, r2
 800ef14:	d101      	bne.n	800ef1a <strncmp+0x1a>
 800ef16:	42a3      	cmp	r3, r4
 800ef18:	d101      	bne.n	800ef1e <strncmp+0x1e>
 800ef1a:	1a80      	subs	r0, r0, r2
 800ef1c:	bd10      	pop	{r4, pc}
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	d1f3      	bne.n	800ef0a <strncmp+0xa>
 800ef22:	e7fa      	b.n	800ef1a <strncmp+0x1a>
 800ef24:	4610      	mov	r0, r2
 800ef26:	e7f9      	b.n	800ef1c <strncmp+0x1c>

0800ef28 <__ascii_wctomb>:
 800ef28:	b149      	cbz	r1, 800ef3e <__ascii_wctomb+0x16>
 800ef2a:	2aff      	cmp	r2, #255	; 0xff
 800ef2c:	bf85      	ittet	hi
 800ef2e:	238a      	movhi	r3, #138	; 0x8a
 800ef30:	6003      	strhi	r3, [r0, #0]
 800ef32:	700a      	strbls	r2, [r1, #0]
 800ef34:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ef38:	bf98      	it	ls
 800ef3a:	2001      	movls	r0, #1
 800ef3c:	4770      	bx	lr
 800ef3e:	4608      	mov	r0, r1
 800ef40:	4770      	bx	lr
	...

0800ef44 <__assert_func>:
 800ef44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef46:	4614      	mov	r4, r2
 800ef48:	461a      	mov	r2, r3
 800ef4a:	4b09      	ldr	r3, [pc, #36]	; (800ef70 <__assert_func+0x2c>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4605      	mov	r5, r0
 800ef50:	68d8      	ldr	r0, [r3, #12]
 800ef52:	b14c      	cbz	r4, 800ef68 <__assert_func+0x24>
 800ef54:	4b07      	ldr	r3, [pc, #28]	; (800ef74 <__assert_func+0x30>)
 800ef56:	9100      	str	r1, [sp, #0]
 800ef58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef5c:	4906      	ldr	r1, [pc, #24]	; (800ef78 <__assert_func+0x34>)
 800ef5e:	462b      	mov	r3, r5
 800ef60:	f000 f80e 	bl	800ef80 <fiprintf>
 800ef64:	f000 fa80 	bl	800f468 <abort>
 800ef68:	4b04      	ldr	r3, [pc, #16]	; (800ef7c <__assert_func+0x38>)
 800ef6a:	461c      	mov	r4, r3
 800ef6c:	e7f3      	b.n	800ef56 <__assert_func+0x12>
 800ef6e:	bf00      	nop
 800ef70:	20000018 	.word	0x20000018
 800ef74:	0800fc85 	.word	0x0800fc85
 800ef78:	0800fc92 	.word	0x0800fc92
 800ef7c:	0800fcc0 	.word	0x0800fcc0

0800ef80 <fiprintf>:
 800ef80:	b40e      	push	{r1, r2, r3}
 800ef82:	b503      	push	{r0, r1, lr}
 800ef84:	4601      	mov	r1, r0
 800ef86:	ab03      	add	r3, sp, #12
 800ef88:	4805      	ldr	r0, [pc, #20]	; (800efa0 <fiprintf+0x20>)
 800ef8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef8e:	6800      	ldr	r0, [r0, #0]
 800ef90:	9301      	str	r3, [sp, #4]
 800ef92:	f000 f879 	bl	800f088 <_vfiprintf_r>
 800ef96:	b002      	add	sp, #8
 800ef98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef9c:	b003      	add	sp, #12
 800ef9e:	4770      	bx	lr
 800efa0:	20000018 	.word	0x20000018

0800efa4 <memmove>:
 800efa4:	4288      	cmp	r0, r1
 800efa6:	b510      	push	{r4, lr}
 800efa8:	eb01 0402 	add.w	r4, r1, r2
 800efac:	d902      	bls.n	800efb4 <memmove+0x10>
 800efae:	4284      	cmp	r4, r0
 800efb0:	4623      	mov	r3, r4
 800efb2:	d807      	bhi.n	800efc4 <memmove+0x20>
 800efb4:	1e43      	subs	r3, r0, #1
 800efb6:	42a1      	cmp	r1, r4
 800efb8:	d008      	beq.n	800efcc <memmove+0x28>
 800efba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efc2:	e7f8      	b.n	800efb6 <memmove+0x12>
 800efc4:	4402      	add	r2, r0
 800efc6:	4601      	mov	r1, r0
 800efc8:	428a      	cmp	r2, r1
 800efca:	d100      	bne.n	800efce <memmove+0x2a>
 800efcc:	bd10      	pop	{r4, pc}
 800efce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efd6:	e7f7      	b.n	800efc8 <memmove+0x24>

0800efd8 <_realloc_r>:
 800efd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efdc:	4680      	mov	r8, r0
 800efde:	4614      	mov	r4, r2
 800efe0:	460e      	mov	r6, r1
 800efe2:	b921      	cbnz	r1, 800efee <_realloc_r+0x16>
 800efe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efe8:	4611      	mov	r1, r2
 800efea:	f7fb bf63 	b.w	800aeb4 <_malloc_r>
 800efee:	b92a      	cbnz	r2, 800effc <_realloc_r+0x24>
 800eff0:	f7ff fdc2 	bl	800eb78 <_free_r>
 800eff4:	4625      	mov	r5, r4
 800eff6:	4628      	mov	r0, r5
 800eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effc:	f000 faa0 	bl	800f540 <_malloc_usable_size_r>
 800f000:	4284      	cmp	r4, r0
 800f002:	4607      	mov	r7, r0
 800f004:	d802      	bhi.n	800f00c <_realloc_r+0x34>
 800f006:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f00a:	d812      	bhi.n	800f032 <_realloc_r+0x5a>
 800f00c:	4621      	mov	r1, r4
 800f00e:	4640      	mov	r0, r8
 800f010:	f7fb ff50 	bl	800aeb4 <_malloc_r>
 800f014:	4605      	mov	r5, r0
 800f016:	2800      	cmp	r0, #0
 800f018:	d0ed      	beq.n	800eff6 <_realloc_r+0x1e>
 800f01a:	42bc      	cmp	r4, r7
 800f01c:	4622      	mov	r2, r4
 800f01e:	4631      	mov	r1, r6
 800f020:	bf28      	it	cs
 800f022:	463a      	movcs	r2, r7
 800f024:	f7fb ff0f 	bl	800ae46 <memcpy>
 800f028:	4631      	mov	r1, r6
 800f02a:	4640      	mov	r0, r8
 800f02c:	f7ff fda4 	bl	800eb78 <_free_r>
 800f030:	e7e1      	b.n	800eff6 <_realloc_r+0x1e>
 800f032:	4635      	mov	r5, r6
 800f034:	e7df      	b.n	800eff6 <_realloc_r+0x1e>

0800f036 <__sfputc_r>:
 800f036:	6893      	ldr	r3, [r2, #8]
 800f038:	3b01      	subs	r3, #1
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	b410      	push	{r4}
 800f03e:	6093      	str	r3, [r2, #8]
 800f040:	da08      	bge.n	800f054 <__sfputc_r+0x1e>
 800f042:	6994      	ldr	r4, [r2, #24]
 800f044:	42a3      	cmp	r3, r4
 800f046:	db01      	blt.n	800f04c <__sfputc_r+0x16>
 800f048:	290a      	cmp	r1, #10
 800f04a:	d103      	bne.n	800f054 <__sfputc_r+0x1e>
 800f04c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f050:	f000 b94a 	b.w	800f2e8 <__swbuf_r>
 800f054:	6813      	ldr	r3, [r2, #0]
 800f056:	1c58      	adds	r0, r3, #1
 800f058:	6010      	str	r0, [r2, #0]
 800f05a:	7019      	strb	r1, [r3, #0]
 800f05c:	4608      	mov	r0, r1
 800f05e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <__sfputs_r>:
 800f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f066:	4606      	mov	r6, r0
 800f068:	460f      	mov	r7, r1
 800f06a:	4614      	mov	r4, r2
 800f06c:	18d5      	adds	r5, r2, r3
 800f06e:	42ac      	cmp	r4, r5
 800f070:	d101      	bne.n	800f076 <__sfputs_r+0x12>
 800f072:	2000      	movs	r0, #0
 800f074:	e007      	b.n	800f086 <__sfputs_r+0x22>
 800f076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f07a:	463a      	mov	r2, r7
 800f07c:	4630      	mov	r0, r6
 800f07e:	f7ff ffda 	bl	800f036 <__sfputc_r>
 800f082:	1c43      	adds	r3, r0, #1
 800f084:	d1f3      	bne.n	800f06e <__sfputs_r+0xa>
 800f086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f088 <_vfiprintf_r>:
 800f088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08c:	460d      	mov	r5, r1
 800f08e:	b09d      	sub	sp, #116	; 0x74
 800f090:	4614      	mov	r4, r2
 800f092:	4698      	mov	r8, r3
 800f094:	4606      	mov	r6, r0
 800f096:	b118      	cbz	r0, 800f0a0 <_vfiprintf_r+0x18>
 800f098:	6983      	ldr	r3, [r0, #24]
 800f09a:	b90b      	cbnz	r3, 800f0a0 <_vfiprintf_r+0x18>
 800f09c:	f7fb fe0e 	bl	800acbc <__sinit>
 800f0a0:	4b89      	ldr	r3, [pc, #548]	; (800f2c8 <_vfiprintf_r+0x240>)
 800f0a2:	429d      	cmp	r5, r3
 800f0a4:	d11b      	bne.n	800f0de <_vfiprintf_r+0x56>
 800f0a6:	6875      	ldr	r5, [r6, #4]
 800f0a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0aa:	07d9      	lsls	r1, r3, #31
 800f0ac:	d405      	bmi.n	800f0ba <_vfiprintf_r+0x32>
 800f0ae:	89ab      	ldrh	r3, [r5, #12]
 800f0b0:	059a      	lsls	r2, r3, #22
 800f0b2:	d402      	bmi.n	800f0ba <_vfiprintf_r+0x32>
 800f0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0b6:	f7fb fec4 	bl	800ae42 <__retarget_lock_acquire_recursive>
 800f0ba:	89ab      	ldrh	r3, [r5, #12]
 800f0bc:	071b      	lsls	r3, r3, #28
 800f0be:	d501      	bpl.n	800f0c4 <_vfiprintf_r+0x3c>
 800f0c0:	692b      	ldr	r3, [r5, #16]
 800f0c2:	b9eb      	cbnz	r3, 800f100 <_vfiprintf_r+0x78>
 800f0c4:	4629      	mov	r1, r5
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	f000 f960 	bl	800f38c <__swsetup_r>
 800f0cc:	b1c0      	cbz	r0, 800f100 <_vfiprintf_r+0x78>
 800f0ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f0d0:	07dc      	lsls	r4, r3, #31
 800f0d2:	d50e      	bpl.n	800f0f2 <_vfiprintf_r+0x6a>
 800f0d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0d8:	b01d      	add	sp, #116	; 0x74
 800f0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0de:	4b7b      	ldr	r3, [pc, #492]	; (800f2cc <_vfiprintf_r+0x244>)
 800f0e0:	429d      	cmp	r5, r3
 800f0e2:	d101      	bne.n	800f0e8 <_vfiprintf_r+0x60>
 800f0e4:	68b5      	ldr	r5, [r6, #8]
 800f0e6:	e7df      	b.n	800f0a8 <_vfiprintf_r+0x20>
 800f0e8:	4b79      	ldr	r3, [pc, #484]	; (800f2d0 <_vfiprintf_r+0x248>)
 800f0ea:	429d      	cmp	r5, r3
 800f0ec:	bf08      	it	eq
 800f0ee:	68f5      	ldreq	r5, [r6, #12]
 800f0f0:	e7da      	b.n	800f0a8 <_vfiprintf_r+0x20>
 800f0f2:	89ab      	ldrh	r3, [r5, #12]
 800f0f4:	0598      	lsls	r0, r3, #22
 800f0f6:	d4ed      	bmi.n	800f0d4 <_vfiprintf_r+0x4c>
 800f0f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0fa:	f7fb fea3 	bl	800ae44 <__retarget_lock_release_recursive>
 800f0fe:	e7e9      	b.n	800f0d4 <_vfiprintf_r+0x4c>
 800f100:	2300      	movs	r3, #0
 800f102:	9309      	str	r3, [sp, #36]	; 0x24
 800f104:	2320      	movs	r3, #32
 800f106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f10a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f10e:	2330      	movs	r3, #48	; 0x30
 800f110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f2d4 <_vfiprintf_r+0x24c>
 800f114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f118:	f04f 0901 	mov.w	r9, #1
 800f11c:	4623      	mov	r3, r4
 800f11e:	469a      	mov	sl, r3
 800f120:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f124:	b10a      	cbz	r2, 800f12a <_vfiprintf_r+0xa2>
 800f126:	2a25      	cmp	r2, #37	; 0x25
 800f128:	d1f9      	bne.n	800f11e <_vfiprintf_r+0x96>
 800f12a:	ebba 0b04 	subs.w	fp, sl, r4
 800f12e:	d00b      	beq.n	800f148 <_vfiprintf_r+0xc0>
 800f130:	465b      	mov	r3, fp
 800f132:	4622      	mov	r2, r4
 800f134:	4629      	mov	r1, r5
 800f136:	4630      	mov	r0, r6
 800f138:	f7ff ff94 	bl	800f064 <__sfputs_r>
 800f13c:	3001      	adds	r0, #1
 800f13e:	f000 80aa 	beq.w	800f296 <_vfiprintf_r+0x20e>
 800f142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f144:	445a      	add	r2, fp
 800f146:	9209      	str	r2, [sp, #36]	; 0x24
 800f148:	f89a 3000 	ldrb.w	r3, [sl]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	f000 80a2 	beq.w	800f296 <_vfiprintf_r+0x20e>
 800f152:	2300      	movs	r3, #0
 800f154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f15c:	f10a 0a01 	add.w	sl, sl, #1
 800f160:	9304      	str	r3, [sp, #16]
 800f162:	9307      	str	r3, [sp, #28]
 800f164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f168:	931a      	str	r3, [sp, #104]	; 0x68
 800f16a:	4654      	mov	r4, sl
 800f16c:	2205      	movs	r2, #5
 800f16e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f172:	4858      	ldr	r0, [pc, #352]	; (800f2d4 <_vfiprintf_r+0x24c>)
 800f174:	f7f1 f834 	bl	80001e0 <memchr>
 800f178:	9a04      	ldr	r2, [sp, #16]
 800f17a:	b9d8      	cbnz	r0, 800f1b4 <_vfiprintf_r+0x12c>
 800f17c:	06d1      	lsls	r1, r2, #27
 800f17e:	bf44      	itt	mi
 800f180:	2320      	movmi	r3, #32
 800f182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f186:	0713      	lsls	r3, r2, #28
 800f188:	bf44      	itt	mi
 800f18a:	232b      	movmi	r3, #43	; 0x2b
 800f18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f190:	f89a 3000 	ldrb.w	r3, [sl]
 800f194:	2b2a      	cmp	r3, #42	; 0x2a
 800f196:	d015      	beq.n	800f1c4 <_vfiprintf_r+0x13c>
 800f198:	9a07      	ldr	r2, [sp, #28]
 800f19a:	4654      	mov	r4, sl
 800f19c:	2000      	movs	r0, #0
 800f19e:	f04f 0c0a 	mov.w	ip, #10
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1a8:	3b30      	subs	r3, #48	; 0x30
 800f1aa:	2b09      	cmp	r3, #9
 800f1ac:	d94e      	bls.n	800f24c <_vfiprintf_r+0x1c4>
 800f1ae:	b1b0      	cbz	r0, 800f1de <_vfiprintf_r+0x156>
 800f1b0:	9207      	str	r2, [sp, #28]
 800f1b2:	e014      	b.n	800f1de <_vfiprintf_r+0x156>
 800f1b4:	eba0 0308 	sub.w	r3, r0, r8
 800f1b8:	fa09 f303 	lsl.w	r3, r9, r3
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	9304      	str	r3, [sp, #16]
 800f1c0:	46a2      	mov	sl, r4
 800f1c2:	e7d2      	b.n	800f16a <_vfiprintf_r+0xe2>
 800f1c4:	9b03      	ldr	r3, [sp, #12]
 800f1c6:	1d19      	adds	r1, r3, #4
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	9103      	str	r1, [sp, #12]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	bfbb      	ittet	lt
 800f1d0:	425b      	neglt	r3, r3
 800f1d2:	f042 0202 	orrlt.w	r2, r2, #2
 800f1d6:	9307      	strge	r3, [sp, #28]
 800f1d8:	9307      	strlt	r3, [sp, #28]
 800f1da:	bfb8      	it	lt
 800f1dc:	9204      	strlt	r2, [sp, #16]
 800f1de:	7823      	ldrb	r3, [r4, #0]
 800f1e0:	2b2e      	cmp	r3, #46	; 0x2e
 800f1e2:	d10c      	bne.n	800f1fe <_vfiprintf_r+0x176>
 800f1e4:	7863      	ldrb	r3, [r4, #1]
 800f1e6:	2b2a      	cmp	r3, #42	; 0x2a
 800f1e8:	d135      	bne.n	800f256 <_vfiprintf_r+0x1ce>
 800f1ea:	9b03      	ldr	r3, [sp, #12]
 800f1ec:	1d1a      	adds	r2, r3, #4
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	9203      	str	r2, [sp, #12]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	bfb8      	it	lt
 800f1f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f1fa:	3402      	adds	r4, #2
 800f1fc:	9305      	str	r3, [sp, #20]
 800f1fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f2e4 <_vfiprintf_r+0x25c>
 800f202:	7821      	ldrb	r1, [r4, #0]
 800f204:	2203      	movs	r2, #3
 800f206:	4650      	mov	r0, sl
 800f208:	f7f0 ffea 	bl	80001e0 <memchr>
 800f20c:	b140      	cbz	r0, 800f220 <_vfiprintf_r+0x198>
 800f20e:	2340      	movs	r3, #64	; 0x40
 800f210:	eba0 000a 	sub.w	r0, r0, sl
 800f214:	fa03 f000 	lsl.w	r0, r3, r0
 800f218:	9b04      	ldr	r3, [sp, #16]
 800f21a:	4303      	orrs	r3, r0
 800f21c:	3401      	adds	r4, #1
 800f21e:	9304      	str	r3, [sp, #16]
 800f220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f224:	482c      	ldr	r0, [pc, #176]	; (800f2d8 <_vfiprintf_r+0x250>)
 800f226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f22a:	2206      	movs	r2, #6
 800f22c:	f7f0 ffd8 	bl	80001e0 <memchr>
 800f230:	2800      	cmp	r0, #0
 800f232:	d03f      	beq.n	800f2b4 <_vfiprintf_r+0x22c>
 800f234:	4b29      	ldr	r3, [pc, #164]	; (800f2dc <_vfiprintf_r+0x254>)
 800f236:	bb1b      	cbnz	r3, 800f280 <_vfiprintf_r+0x1f8>
 800f238:	9b03      	ldr	r3, [sp, #12]
 800f23a:	3307      	adds	r3, #7
 800f23c:	f023 0307 	bic.w	r3, r3, #7
 800f240:	3308      	adds	r3, #8
 800f242:	9303      	str	r3, [sp, #12]
 800f244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f246:	443b      	add	r3, r7
 800f248:	9309      	str	r3, [sp, #36]	; 0x24
 800f24a:	e767      	b.n	800f11c <_vfiprintf_r+0x94>
 800f24c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f250:	460c      	mov	r4, r1
 800f252:	2001      	movs	r0, #1
 800f254:	e7a5      	b.n	800f1a2 <_vfiprintf_r+0x11a>
 800f256:	2300      	movs	r3, #0
 800f258:	3401      	adds	r4, #1
 800f25a:	9305      	str	r3, [sp, #20]
 800f25c:	4619      	mov	r1, r3
 800f25e:	f04f 0c0a 	mov.w	ip, #10
 800f262:	4620      	mov	r0, r4
 800f264:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f268:	3a30      	subs	r2, #48	; 0x30
 800f26a:	2a09      	cmp	r2, #9
 800f26c:	d903      	bls.n	800f276 <_vfiprintf_r+0x1ee>
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d0c5      	beq.n	800f1fe <_vfiprintf_r+0x176>
 800f272:	9105      	str	r1, [sp, #20]
 800f274:	e7c3      	b.n	800f1fe <_vfiprintf_r+0x176>
 800f276:	fb0c 2101 	mla	r1, ip, r1, r2
 800f27a:	4604      	mov	r4, r0
 800f27c:	2301      	movs	r3, #1
 800f27e:	e7f0      	b.n	800f262 <_vfiprintf_r+0x1da>
 800f280:	ab03      	add	r3, sp, #12
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	462a      	mov	r2, r5
 800f286:	4b16      	ldr	r3, [pc, #88]	; (800f2e0 <_vfiprintf_r+0x258>)
 800f288:	a904      	add	r1, sp, #16
 800f28a:	4630      	mov	r0, r6
 800f28c:	f7fb ff26 	bl	800b0dc <_printf_float>
 800f290:	4607      	mov	r7, r0
 800f292:	1c78      	adds	r0, r7, #1
 800f294:	d1d6      	bne.n	800f244 <_vfiprintf_r+0x1bc>
 800f296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f298:	07d9      	lsls	r1, r3, #31
 800f29a:	d405      	bmi.n	800f2a8 <_vfiprintf_r+0x220>
 800f29c:	89ab      	ldrh	r3, [r5, #12]
 800f29e:	059a      	lsls	r2, r3, #22
 800f2a0:	d402      	bmi.n	800f2a8 <_vfiprintf_r+0x220>
 800f2a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2a4:	f7fb fdce 	bl	800ae44 <__retarget_lock_release_recursive>
 800f2a8:	89ab      	ldrh	r3, [r5, #12]
 800f2aa:	065b      	lsls	r3, r3, #25
 800f2ac:	f53f af12 	bmi.w	800f0d4 <_vfiprintf_r+0x4c>
 800f2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2b2:	e711      	b.n	800f0d8 <_vfiprintf_r+0x50>
 800f2b4:	ab03      	add	r3, sp, #12
 800f2b6:	9300      	str	r3, [sp, #0]
 800f2b8:	462a      	mov	r2, r5
 800f2ba:	4b09      	ldr	r3, [pc, #36]	; (800f2e0 <_vfiprintf_r+0x258>)
 800f2bc:	a904      	add	r1, sp, #16
 800f2be:	4630      	mov	r0, r6
 800f2c0:	f7fc f9b0 	bl	800b624 <_printf_i>
 800f2c4:	e7e4      	b.n	800f290 <_vfiprintf_r+0x208>
 800f2c6:	bf00      	nop
 800f2c8:	0800f83c 	.word	0x0800f83c
 800f2cc:	0800f85c 	.word	0x0800f85c
 800f2d0:	0800f81c 	.word	0x0800f81c
 800f2d4:	0800fc74 	.word	0x0800fc74
 800f2d8:	0800fc7e 	.word	0x0800fc7e
 800f2dc:	0800b0dd 	.word	0x0800b0dd
 800f2e0:	0800f065 	.word	0x0800f065
 800f2e4:	0800fc7a 	.word	0x0800fc7a

0800f2e8 <__swbuf_r>:
 800f2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ea:	460e      	mov	r6, r1
 800f2ec:	4614      	mov	r4, r2
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	b118      	cbz	r0, 800f2fa <__swbuf_r+0x12>
 800f2f2:	6983      	ldr	r3, [r0, #24]
 800f2f4:	b90b      	cbnz	r3, 800f2fa <__swbuf_r+0x12>
 800f2f6:	f7fb fce1 	bl	800acbc <__sinit>
 800f2fa:	4b21      	ldr	r3, [pc, #132]	; (800f380 <__swbuf_r+0x98>)
 800f2fc:	429c      	cmp	r4, r3
 800f2fe:	d12b      	bne.n	800f358 <__swbuf_r+0x70>
 800f300:	686c      	ldr	r4, [r5, #4]
 800f302:	69a3      	ldr	r3, [r4, #24]
 800f304:	60a3      	str	r3, [r4, #8]
 800f306:	89a3      	ldrh	r3, [r4, #12]
 800f308:	071a      	lsls	r2, r3, #28
 800f30a:	d52f      	bpl.n	800f36c <__swbuf_r+0x84>
 800f30c:	6923      	ldr	r3, [r4, #16]
 800f30e:	b36b      	cbz	r3, 800f36c <__swbuf_r+0x84>
 800f310:	6923      	ldr	r3, [r4, #16]
 800f312:	6820      	ldr	r0, [r4, #0]
 800f314:	1ac0      	subs	r0, r0, r3
 800f316:	6963      	ldr	r3, [r4, #20]
 800f318:	b2f6      	uxtb	r6, r6
 800f31a:	4283      	cmp	r3, r0
 800f31c:	4637      	mov	r7, r6
 800f31e:	dc04      	bgt.n	800f32a <__swbuf_r+0x42>
 800f320:	4621      	mov	r1, r4
 800f322:	4628      	mov	r0, r5
 800f324:	f7fe fb68 	bl	800d9f8 <_fflush_r>
 800f328:	bb30      	cbnz	r0, 800f378 <__swbuf_r+0x90>
 800f32a:	68a3      	ldr	r3, [r4, #8]
 800f32c:	3b01      	subs	r3, #1
 800f32e:	60a3      	str	r3, [r4, #8]
 800f330:	6823      	ldr	r3, [r4, #0]
 800f332:	1c5a      	adds	r2, r3, #1
 800f334:	6022      	str	r2, [r4, #0]
 800f336:	701e      	strb	r6, [r3, #0]
 800f338:	6963      	ldr	r3, [r4, #20]
 800f33a:	3001      	adds	r0, #1
 800f33c:	4283      	cmp	r3, r0
 800f33e:	d004      	beq.n	800f34a <__swbuf_r+0x62>
 800f340:	89a3      	ldrh	r3, [r4, #12]
 800f342:	07db      	lsls	r3, r3, #31
 800f344:	d506      	bpl.n	800f354 <__swbuf_r+0x6c>
 800f346:	2e0a      	cmp	r6, #10
 800f348:	d104      	bne.n	800f354 <__swbuf_r+0x6c>
 800f34a:	4621      	mov	r1, r4
 800f34c:	4628      	mov	r0, r5
 800f34e:	f7fe fb53 	bl	800d9f8 <_fflush_r>
 800f352:	b988      	cbnz	r0, 800f378 <__swbuf_r+0x90>
 800f354:	4638      	mov	r0, r7
 800f356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f358:	4b0a      	ldr	r3, [pc, #40]	; (800f384 <__swbuf_r+0x9c>)
 800f35a:	429c      	cmp	r4, r3
 800f35c:	d101      	bne.n	800f362 <__swbuf_r+0x7a>
 800f35e:	68ac      	ldr	r4, [r5, #8]
 800f360:	e7cf      	b.n	800f302 <__swbuf_r+0x1a>
 800f362:	4b09      	ldr	r3, [pc, #36]	; (800f388 <__swbuf_r+0xa0>)
 800f364:	429c      	cmp	r4, r3
 800f366:	bf08      	it	eq
 800f368:	68ec      	ldreq	r4, [r5, #12]
 800f36a:	e7ca      	b.n	800f302 <__swbuf_r+0x1a>
 800f36c:	4621      	mov	r1, r4
 800f36e:	4628      	mov	r0, r5
 800f370:	f000 f80c 	bl	800f38c <__swsetup_r>
 800f374:	2800      	cmp	r0, #0
 800f376:	d0cb      	beq.n	800f310 <__swbuf_r+0x28>
 800f378:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f37c:	e7ea      	b.n	800f354 <__swbuf_r+0x6c>
 800f37e:	bf00      	nop
 800f380:	0800f83c 	.word	0x0800f83c
 800f384:	0800f85c 	.word	0x0800f85c
 800f388:	0800f81c 	.word	0x0800f81c

0800f38c <__swsetup_r>:
 800f38c:	4b32      	ldr	r3, [pc, #200]	; (800f458 <__swsetup_r+0xcc>)
 800f38e:	b570      	push	{r4, r5, r6, lr}
 800f390:	681d      	ldr	r5, [r3, #0]
 800f392:	4606      	mov	r6, r0
 800f394:	460c      	mov	r4, r1
 800f396:	b125      	cbz	r5, 800f3a2 <__swsetup_r+0x16>
 800f398:	69ab      	ldr	r3, [r5, #24]
 800f39a:	b913      	cbnz	r3, 800f3a2 <__swsetup_r+0x16>
 800f39c:	4628      	mov	r0, r5
 800f39e:	f7fb fc8d 	bl	800acbc <__sinit>
 800f3a2:	4b2e      	ldr	r3, [pc, #184]	; (800f45c <__swsetup_r+0xd0>)
 800f3a4:	429c      	cmp	r4, r3
 800f3a6:	d10f      	bne.n	800f3c8 <__swsetup_r+0x3c>
 800f3a8:	686c      	ldr	r4, [r5, #4]
 800f3aa:	89a3      	ldrh	r3, [r4, #12]
 800f3ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3b0:	0719      	lsls	r1, r3, #28
 800f3b2:	d42c      	bmi.n	800f40e <__swsetup_r+0x82>
 800f3b4:	06dd      	lsls	r5, r3, #27
 800f3b6:	d411      	bmi.n	800f3dc <__swsetup_r+0x50>
 800f3b8:	2309      	movs	r3, #9
 800f3ba:	6033      	str	r3, [r6, #0]
 800f3bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f3c0:	81a3      	strh	r3, [r4, #12]
 800f3c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3c6:	e03e      	b.n	800f446 <__swsetup_r+0xba>
 800f3c8:	4b25      	ldr	r3, [pc, #148]	; (800f460 <__swsetup_r+0xd4>)
 800f3ca:	429c      	cmp	r4, r3
 800f3cc:	d101      	bne.n	800f3d2 <__swsetup_r+0x46>
 800f3ce:	68ac      	ldr	r4, [r5, #8]
 800f3d0:	e7eb      	b.n	800f3aa <__swsetup_r+0x1e>
 800f3d2:	4b24      	ldr	r3, [pc, #144]	; (800f464 <__swsetup_r+0xd8>)
 800f3d4:	429c      	cmp	r4, r3
 800f3d6:	bf08      	it	eq
 800f3d8:	68ec      	ldreq	r4, [r5, #12]
 800f3da:	e7e6      	b.n	800f3aa <__swsetup_r+0x1e>
 800f3dc:	0758      	lsls	r0, r3, #29
 800f3de:	d512      	bpl.n	800f406 <__swsetup_r+0x7a>
 800f3e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3e2:	b141      	cbz	r1, 800f3f6 <__swsetup_r+0x6a>
 800f3e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3e8:	4299      	cmp	r1, r3
 800f3ea:	d002      	beq.n	800f3f2 <__swsetup_r+0x66>
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f7ff fbc3 	bl	800eb78 <_free_r>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	6363      	str	r3, [r4, #52]	; 0x34
 800f3f6:	89a3      	ldrh	r3, [r4, #12]
 800f3f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3fc:	81a3      	strh	r3, [r4, #12]
 800f3fe:	2300      	movs	r3, #0
 800f400:	6063      	str	r3, [r4, #4]
 800f402:	6923      	ldr	r3, [r4, #16]
 800f404:	6023      	str	r3, [r4, #0]
 800f406:	89a3      	ldrh	r3, [r4, #12]
 800f408:	f043 0308 	orr.w	r3, r3, #8
 800f40c:	81a3      	strh	r3, [r4, #12]
 800f40e:	6923      	ldr	r3, [r4, #16]
 800f410:	b94b      	cbnz	r3, 800f426 <__swsetup_r+0x9a>
 800f412:	89a3      	ldrh	r3, [r4, #12]
 800f414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f41c:	d003      	beq.n	800f426 <__swsetup_r+0x9a>
 800f41e:	4621      	mov	r1, r4
 800f420:	4630      	mov	r0, r6
 800f422:	f000 f84d 	bl	800f4c0 <__smakebuf_r>
 800f426:	89a0      	ldrh	r0, [r4, #12]
 800f428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f42c:	f010 0301 	ands.w	r3, r0, #1
 800f430:	d00a      	beq.n	800f448 <__swsetup_r+0xbc>
 800f432:	2300      	movs	r3, #0
 800f434:	60a3      	str	r3, [r4, #8]
 800f436:	6963      	ldr	r3, [r4, #20]
 800f438:	425b      	negs	r3, r3
 800f43a:	61a3      	str	r3, [r4, #24]
 800f43c:	6923      	ldr	r3, [r4, #16]
 800f43e:	b943      	cbnz	r3, 800f452 <__swsetup_r+0xc6>
 800f440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f444:	d1ba      	bne.n	800f3bc <__swsetup_r+0x30>
 800f446:	bd70      	pop	{r4, r5, r6, pc}
 800f448:	0781      	lsls	r1, r0, #30
 800f44a:	bf58      	it	pl
 800f44c:	6963      	ldrpl	r3, [r4, #20]
 800f44e:	60a3      	str	r3, [r4, #8]
 800f450:	e7f4      	b.n	800f43c <__swsetup_r+0xb0>
 800f452:	2000      	movs	r0, #0
 800f454:	e7f7      	b.n	800f446 <__swsetup_r+0xba>
 800f456:	bf00      	nop
 800f458:	20000018 	.word	0x20000018
 800f45c:	0800f83c 	.word	0x0800f83c
 800f460:	0800f85c 	.word	0x0800f85c
 800f464:	0800f81c 	.word	0x0800f81c

0800f468 <abort>:
 800f468:	b508      	push	{r3, lr}
 800f46a:	2006      	movs	r0, #6
 800f46c:	f000 f898 	bl	800f5a0 <raise>
 800f470:	2001      	movs	r0, #1
 800f472:	f7f2 fe21 	bl	80020b8 <_exit>

0800f476 <__swhatbuf_r>:
 800f476:	b570      	push	{r4, r5, r6, lr}
 800f478:	460e      	mov	r6, r1
 800f47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f47e:	2900      	cmp	r1, #0
 800f480:	b096      	sub	sp, #88	; 0x58
 800f482:	4614      	mov	r4, r2
 800f484:	461d      	mov	r5, r3
 800f486:	da08      	bge.n	800f49a <__swhatbuf_r+0x24>
 800f488:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f48c:	2200      	movs	r2, #0
 800f48e:	602a      	str	r2, [r5, #0]
 800f490:	061a      	lsls	r2, r3, #24
 800f492:	d410      	bmi.n	800f4b6 <__swhatbuf_r+0x40>
 800f494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f498:	e00e      	b.n	800f4b8 <__swhatbuf_r+0x42>
 800f49a:	466a      	mov	r2, sp
 800f49c:	f000 f89c 	bl	800f5d8 <_fstat_r>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	dbf1      	blt.n	800f488 <__swhatbuf_r+0x12>
 800f4a4:	9a01      	ldr	r2, [sp, #4]
 800f4a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4ae:	425a      	negs	r2, r3
 800f4b0:	415a      	adcs	r2, r3
 800f4b2:	602a      	str	r2, [r5, #0]
 800f4b4:	e7ee      	b.n	800f494 <__swhatbuf_r+0x1e>
 800f4b6:	2340      	movs	r3, #64	; 0x40
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	6023      	str	r3, [r4, #0]
 800f4bc:	b016      	add	sp, #88	; 0x58
 800f4be:	bd70      	pop	{r4, r5, r6, pc}

0800f4c0 <__smakebuf_r>:
 800f4c0:	898b      	ldrh	r3, [r1, #12]
 800f4c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4c4:	079d      	lsls	r5, r3, #30
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	460c      	mov	r4, r1
 800f4ca:	d507      	bpl.n	800f4dc <__smakebuf_r+0x1c>
 800f4cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4d0:	6023      	str	r3, [r4, #0]
 800f4d2:	6123      	str	r3, [r4, #16]
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	6163      	str	r3, [r4, #20]
 800f4d8:	b002      	add	sp, #8
 800f4da:	bd70      	pop	{r4, r5, r6, pc}
 800f4dc:	ab01      	add	r3, sp, #4
 800f4de:	466a      	mov	r2, sp
 800f4e0:	f7ff ffc9 	bl	800f476 <__swhatbuf_r>
 800f4e4:	9900      	ldr	r1, [sp, #0]
 800f4e6:	4605      	mov	r5, r0
 800f4e8:	4630      	mov	r0, r6
 800f4ea:	f7fb fce3 	bl	800aeb4 <_malloc_r>
 800f4ee:	b948      	cbnz	r0, 800f504 <__smakebuf_r+0x44>
 800f4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4f4:	059a      	lsls	r2, r3, #22
 800f4f6:	d4ef      	bmi.n	800f4d8 <__smakebuf_r+0x18>
 800f4f8:	f023 0303 	bic.w	r3, r3, #3
 800f4fc:	f043 0302 	orr.w	r3, r3, #2
 800f500:	81a3      	strh	r3, [r4, #12]
 800f502:	e7e3      	b.n	800f4cc <__smakebuf_r+0xc>
 800f504:	4b0d      	ldr	r3, [pc, #52]	; (800f53c <__smakebuf_r+0x7c>)
 800f506:	62b3      	str	r3, [r6, #40]	; 0x28
 800f508:	89a3      	ldrh	r3, [r4, #12]
 800f50a:	6020      	str	r0, [r4, #0]
 800f50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f510:	81a3      	strh	r3, [r4, #12]
 800f512:	9b00      	ldr	r3, [sp, #0]
 800f514:	6163      	str	r3, [r4, #20]
 800f516:	9b01      	ldr	r3, [sp, #4]
 800f518:	6120      	str	r0, [r4, #16]
 800f51a:	b15b      	cbz	r3, 800f534 <__smakebuf_r+0x74>
 800f51c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f520:	4630      	mov	r0, r6
 800f522:	f000 f86b 	bl	800f5fc <_isatty_r>
 800f526:	b128      	cbz	r0, 800f534 <__smakebuf_r+0x74>
 800f528:	89a3      	ldrh	r3, [r4, #12]
 800f52a:	f023 0303 	bic.w	r3, r3, #3
 800f52e:	f043 0301 	orr.w	r3, r3, #1
 800f532:	81a3      	strh	r3, [r4, #12]
 800f534:	89a0      	ldrh	r0, [r4, #12]
 800f536:	4305      	orrs	r5, r0
 800f538:	81a5      	strh	r5, [r4, #12]
 800f53a:	e7cd      	b.n	800f4d8 <__smakebuf_r+0x18>
 800f53c:	0800ac55 	.word	0x0800ac55

0800f540 <_malloc_usable_size_r>:
 800f540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f544:	1f18      	subs	r0, r3, #4
 800f546:	2b00      	cmp	r3, #0
 800f548:	bfbc      	itt	lt
 800f54a:	580b      	ldrlt	r3, [r1, r0]
 800f54c:	18c0      	addlt	r0, r0, r3
 800f54e:	4770      	bx	lr

0800f550 <_raise_r>:
 800f550:	291f      	cmp	r1, #31
 800f552:	b538      	push	{r3, r4, r5, lr}
 800f554:	4604      	mov	r4, r0
 800f556:	460d      	mov	r5, r1
 800f558:	d904      	bls.n	800f564 <_raise_r+0x14>
 800f55a:	2316      	movs	r3, #22
 800f55c:	6003      	str	r3, [r0, #0]
 800f55e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f562:	bd38      	pop	{r3, r4, r5, pc}
 800f564:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f566:	b112      	cbz	r2, 800f56e <_raise_r+0x1e>
 800f568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f56c:	b94b      	cbnz	r3, 800f582 <_raise_r+0x32>
 800f56e:	4620      	mov	r0, r4
 800f570:	f000 f830 	bl	800f5d4 <_getpid_r>
 800f574:	462a      	mov	r2, r5
 800f576:	4601      	mov	r1, r0
 800f578:	4620      	mov	r0, r4
 800f57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f57e:	f000 b817 	b.w	800f5b0 <_kill_r>
 800f582:	2b01      	cmp	r3, #1
 800f584:	d00a      	beq.n	800f59c <_raise_r+0x4c>
 800f586:	1c59      	adds	r1, r3, #1
 800f588:	d103      	bne.n	800f592 <_raise_r+0x42>
 800f58a:	2316      	movs	r3, #22
 800f58c:	6003      	str	r3, [r0, #0]
 800f58e:	2001      	movs	r0, #1
 800f590:	e7e7      	b.n	800f562 <_raise_r+0x12>
 800f592:	2400      	movs	r4, #0
 800f594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f598:	4628      	mov	r0, r5
 800f59a:	4798      	blx	r3
 800f59c:	2000      	movs	r0, #0
 800f59e:	e7e0      	b.n	800f562 <_raise_r+0x12>

0800f5a0 <raise>:
 800f5a0:	4b02      	ldr	r3, [pc, #8]	; (800f5ac <raise+0xc>)
 800f5a2:	4601      	mov	r1, r0
 800f5a4:	6818      	ldr	r0, [r3, #0]
 800f5a6:	f7ff bfd3 	b.w	800f550 <_raise_r>
 800f5aa:	bf00      	nop
 800f5ac:	20000018 	.word	0x20000018

0800f5b0 <_kill_r>:
 800f5b0:	b538      	push	{r3, r4, r5, lr}
 800f5b2:	4d07      	ldr	r5, [pc, #28]	; (800f5d0 <_kill_r+0x20>)
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	4604      	mov	r4, r0
 800f5b8:	4608      	mov	r0, r1
 800f5ba:	4611      	mov	r1, r2
 800f5bc:	602b      	str	r3, [r5, #0]
 800f5be:	f7f2 fd6b 	bl	8002098 <_kill>
 800f5c2:	1c43      	adds	r3, r0, #1
 800f5c4:	d102      	bne.n	800f5cc <_kill_r+0x1c>
 800f5c6:	682b      	ldr	r3, [r5, #0]
 800f5c8:	b103      	cbz	r3, 800f5cc <_kill_r+0x1c>
 800f5ca:	6023      	str	r3, [r4, #0]
 800f5cc:	bd38      	pop	{r3, r4, r5, pc}
 800f5ce:	bf00      	nop
 800f5d0:	20001e20 	.word	0x20001e20

0800f5d4 <_getpid_r>:
 800f5d4:	f7f2 bd58 	b.w	8002088 <_getpid>

0800f5d8 <_fstat_r>:
 800f5d8:	b538      	push	{r3, r4, r5, lr}
 800f5da:	4d07      	ldr	r5, [pc, #28]	; (800f5f8 <_fstat_r+0x20>)
 800f5dc:	2300      	movs	r3, #0
 800f5de:	4604      	mov	r4, r0
 800f5e0:	4608      	mov	r0, r1
 800f5e2:	4611      	mov	r1, r2
 800f5e4:	602b      	str	r3, [r5, #0]
 800f5e6:	f7f2 fd9a 	bl	800211e <_fstat>
 800f5ea:	1c43      	adds	r3, r0, #1
 800f5ec:	d102      	bne.n	800f5f4 <_fstat_r+0x1c>
 800f5ee:	682b      	ldr	r3, [r5, #0]
 800f5f0:	b103      	cbz	r3, 800f5f4 <_fstat_r+0x1c>
 800f5f2:	6023      	str	r3, [r4, #0]
 800f5f4:	bd38      	pop	{r3, r4, r5, pc}
 800f5f6:	bf00      	nop
 800f5f8:	20001e20 	.word	0x20001e20

0800f5fc <_isatty_r>:
 800f5fc:	b538      	push	{r3, r4, r5, lr}
 800f5fe:	4d06      	ldr	r5, [pc, #24]	; (800f618 <_isatty_r+0x1c>)
 800f600:	2300      	movs	r3, #0
 800f602:	4604      	mov	r4, r0
 800f604:	4608      	mov	r0, r1
 800f606:	602b      	str	r3, [r5, #0]
 800f608:	f7f2 fd99 	bl	800213e <_isatty>
 800f60c:	1c43      	adds	r3, r0, #1
 800f60e:	d102      	bne.n	800f616 <_isatty_r+0x1a>
 800f610:	682b      	ldr	r3, [r5, #0]
 800f612:	b103      	cbz	r3, 800f616 <_isatty_r+0x1a>
 800f614:	6023      	str	r3, [r4, #0]
 800f616:	bd38      	pop	{r3, r4, r5, pc}
 800f618:	20001e20 	.word	0x20001e20

0800f61c <_init>:
 800f61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f61e:	bf00      	nop
 800f620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f622:	bc08      	pop	{r3}
 800f624:	469e      	mov	lr, r3
 800f626:	4770      	bx	lr

0800f628 <_fini>:
 800f628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f62a:	bf00      	nop
 800f62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f62e:	bc08      	pop	{r3}
 800f630:	469e      	mov	lr, r3
 800f632:	4770      	bx	lr
